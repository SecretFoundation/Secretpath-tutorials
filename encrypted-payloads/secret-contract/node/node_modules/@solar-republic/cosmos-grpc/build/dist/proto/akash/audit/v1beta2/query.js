import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeAkashAuditProvider } from './audit.js';
import { decodeCosmosBaseQueryPageResponse, decodeCosmosBaseQueryPageRequest } from '../../../cosmos/base/query/v1beta1/pagination.js';
const SR_LCD_AKASH_AUDIT_QUERY = '/akash/';
/**
 * Queries all providers buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: providers - the 'providers' response property
 *   - 1: pagination - the 'providers' response property
 */
export const queryAkashAuditAllProvidersAttributes = restful_grpc(g_pagination => [SR_LCD_AKASH_AUDIT_QUERY + 'audit/v1beta2/audit/attributes/list', {
        pagination: g_pagination,
    }]);
/**
 * Queries all provider signed attributes buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: providers - the 'providers' response property
 *   - 1: pagination - the 'providers' response property
 */
export const queryAkashAuditProviderAttributes = restful_grpc((sa_owner, g_pagination) => [SR_LCD_AKASH_AUDIT_QUERY + 'audit/v1beta2/audit/attributes/' + sa_owner + '/list', {
        pagination: g_pagination,
    }]);
/**
 * Queries provider signed attributes by specific auditor buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_auditor -
 * @param sa_owner -
 * @returns a tuple where:
 *   - 0: providers - the 'providers' response property
 *   - 1: pagination - the 'providers' response property
 */
export const queryAkashAuditProviderAuditorAttributes = restful_grpc((s_auditor, sa_owner) => [SR_LCD_AKASH_AUDIT_QUERY + 'audit/v1beta2/audit/attributes/' + s_auditor + '/' + sa_owner]);
/**
 * Queries all providers signed by this auditor buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_auditor -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: providers - the 'providers' response property
 *   - 1: pagination - the 'providers' response property
 */
export const queryAkashAuditAuditorAttributes = restful_grpc((s_auditor, g_pagination) => [SR_LCD_AKASH_AUDIT_QUERY + 'provider/v1beta2/auditor/' + s_auditor + '/list', {
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryProvidersResponse` protobuf message: response type for the Query/Providers RPC method
 * @param a_providers - `providers`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashAuditQueryProvidersResponse = (a_providers, atu8_pagination) => Protobuf() // ...
    .B(a_providers) // Provider[] providers = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryProviderRequest` protobuf message: request type for the Query/Provider RPC method
 * @param s_auditor - `auditor`:
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashAuditQueryProviderRequest = (s_auditor, sa_owner) => Protobuf() // ...
    .s(s_auditor) // string auditor = 1
    .s(sa_owner) // string owner = 2
    .o;
/**
 * Encodes a `QueryAllProvidersAttributesRequest` protobuf message: request type for the Query/All Providers RPC method
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashAuditQueryAllProvidersAttributesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryProviderAttributesRequest` protobuf message: request type for the Query/Provider RPC method
 * @param sa_owner - `owner`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashAuditQueryProviderAttributesRequest = (sa_owner, atu8_pagination) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryProviderAuditorRequest` protobuf message: request type for the Query/Providers RPC method
 * @param s_auditor - `auditor`:
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashAuditQueryProviderAuditorRequest = (s_auditor, sa_owner) => Protobuf() // ...
    .s(s_auditor) // string auditor = 1
    .s(sa_owner) // string owner = 2
    .o;
/**
 * Encodes a `QueryAuditorAttributesRequest` protobuf message: request type for the Query/Providers RPC method
 * @param s_auditor - `auditor`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashAuditQueryAuditorAttributesRequest = (s_auditor, atu8_pagination) => Protobuf() // ...
    .s(s_auditor) // string auditor = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Decodes a protobuf QueryProviders message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashAuditQueryProvidersResponse}
 */
export const decodeAkashAuditQueryProvidersResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeAkashAuditProvider, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryProviderRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashAuditQueryProviderRequest}
 */
export const decodeAkashAuditQueryProviderRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryAllProvidersAttributesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashAuditQueryAllProvidersAttributesRequest}
 */
export const decodeAkashAuditQueryAllProvidersAttributesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryProviderAttributesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashAuditQueryProviderAttributesRequest}
 */
export const decodeAkashAuditQueryProviderAttributesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryProviderAuditorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashAuditQueryProviderAuditorRequest}
 */
export const decodeAkashAuditQueryProviderAuditorRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryAuditorAttributesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashAuditQueryAuditorAttributesRequest}
 */
export const decodeAkashAuditQueryAuditorAttributesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Destructures the fields of a {@link AkashAuditQueryProvidersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: providers -
 *   - 1: pagination -
 */
export const destructAkashAuditQueryProvidersResponse = (g_struct) => [g_struct.providers, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_AUDIT_QUERY_PROVIDERS_RESPONSE = '/akash.audit.v1beta2.QueryProvidersResponse';
/**
 * Destructures the fields of a {@link AkashAuditQueryProviderRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: auditor -
 *   - 1: owner -
 */
export const destructAkashAuditQueryProviderRequest = (g_struct) => [g_struct.auditor, g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_AUDIT_QUERY_PROVIDER_REQUEST = '/akash.audit.v1beta2.QueryProviderRequest';
/**
 * Destructures the fields of a {@link AkashAuditQueryAllProvidersAttributesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination -
 */
export const destructAkashAuditQueryAllProvidersAttributesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_AUDIT_QUERY_ALL_PROVIDERS_ATTRIBUTES_REQUEST = '/akash.audit.v1beta2.QueryAllProvidersAttributesRequest';
/**
 * Destructures the fields of a {@link AkashAuditQueryProviderAttributesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: pagination -
 */
export const destructAkashAuditQueryProviderAttributesRequest = (g_struct) => [g_struct.owner, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_AUDIT_QUERY_PROVIDER_ATTRIBUTES_REQUEST = '/akash.audit.v1beta2.QueryProviderAttributesRequest';
/**
 * Destructures the fields of a {@link AkashAuditQueryProviderAuditorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: auditor -
 *   - 1: owner -
 */
export const destructAkashAuditQueryProviderAuditorRequest = (g_struct) => [g_struct.auditor, g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_AUDIT_QUERY_PROVIDER_AUDITOR_REQUEST = '/akash.audit.v1beta2.QueryProviderAuditorRequest';
/**
 * Destructures the fields of a {@link AkashAuditQueryAuditorAttributesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: auditor -
 *   - 1: pagination -
 */
export const destructAkashAuditQueryAuditorAttributesRequest = (g_struct) => [g_struct.auditor, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_AUDIT_QUERY_AUDITOR_ATTRIBUTES_REQUEST = '/akash.audit.v1beta2.QueryAuditorAttributesRequest';
//# sourceMappingURL=query.js.map