import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashBaseAttribute, DecodedAkashBaseAttribute } from './attribute.js';
import type { AkashBaseResourceValue, DecodedAkashBaseResourceValue } from './resourcevalue.js';
export type EncodedAkashBaseCPU = Encoded<'/akash.base.v1beta2.CPU'>;
export type EncodedAkashBaseMemory = Encoded<'/akash.base.v1beta2.Memory'>;
export type EncodedAkashBaseStorage = Encoded<'/akash.base.v1beta2.Storage'>;
/**
 * Encodes a `CPU` protobuf message: stores resource units and cpu config attributes
 * @param g_units - `units`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseCPU: (atu8_units?: Opt<Encoded<'/akash.base.v1beta2.ResourceValue'>>, a_attributes?: Opt<Encoded<'/akash.base.v1beta2.Attribute'>[]>) => EncodedAkashBaseCPU;
/**
 * Encodes a `Memory` protobuf message: stores resource quantity and memory attributes
 * @param g_quantity - `quantity`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseMemory: (atu8_quantity?: Opt<Encoded<'/akash.base.v1beta2.ResourceValue'>>, a_attributes?: Opt<Encoded<'/akash.base.v1beta2.Attribute'>[]>) => EncodedAkashBaseMemory;
/**
 * Encodes a `Storage` protobuf message: stores resource quantity and storage attributes
 * @param s_name - `name`:
 * @param g_quantity - `quantity`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseStorage: (s_name?: Opt<string>, atu8_quantity?: Opt<Encoded<'/akash.base.v1beta2.ResourceValue'>>, a_attributes?: Opt<Encoded<'/akash.base.v1beta2.Attribute'>[]>) => EncodedAkashBaseStorage;
/**
 * A decoded protobuf CPU message
 *
 * Tuple where:
 *   - 0: units -
 *   - 1: attributes -
 */
export type DecodedAkashBaseCPU = [
    a_units?: DecodedAkashBaseResourceValue,
    a_attributes?: DecodedAkashBaseAttribute[]
];
/**
 * Decodes a protobuf CPU message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseCPU}
 */
export declare const decodeAkashBaseCPU: (atu8_payload: Uint8Array) => DecodedAkashBaseCPU;
/**
 * A decoded protobuf Memory message
 *
 * Tuple where:
 *   - 0: quantity -
 *   - 1: attributes -
 */
export type DecodedAkashBaseMemory = [
    a_quantity?: DecodedAkashBaseResourceValue,
    a_attributes?: DecodedAkashBaseAttribute[]
];
/**
 * Decodes a protobuf Memory message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseMemory}
 */
export declare const decodeAkashBaseMemory: (atu8_payload: Uint8Array) => DecodedAkashBaseMemory;
/**
 * A decoded protobuf Storage message
 *
 * Tuple where:
 *   - 0: name -
 *   - 1: quantity -
 *   - 2: attributes -
 */
export type DecodedAkashBaseStorage = [
    s_name?: string,
    a_quantity?: DecodedAkashBaseResourceValue,
    a_attributes?: DecodedAkashBaseAttribute[]
];
/**
 * Decodes a protobuf Storage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseStorage}
 */
export declare const decodeAkashBaseStorage: (atu8_payload: Uint8Array) => DecodedAkashBaseStorage;
/**
 * Destructures the fields of a {@link AkashBaseCPU} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: units -
 *   - 1: attributes -
 */
export declare const destructAkashBaseCPU: (g_struct: AkashBaseCPU) => [units?: AkashBaseResourceValue, attributes?: AkashBaseAttribute[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_C_P_U = "/akash.base.v1beta2.CPU";
/**
 * JSON serialization of `akash.base.v1beta2.CPU` - stores resource units and cpu config attributes
 */
export type AkashBaseCPU = {
    units?: AkashBaseResourceValue | undefined;
    attributes?: AkashBaseAttribute[] | undefined;
};
/**
 * Destructures the fields of a {@link AkashBaseMemory} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: quantity -
 *   - 1: attributes -
 */
export declare const destructAkashBaseMemory: (g_struct: AkashBaseMemory) => [quantity?: AkashBaseResourceValue, attributes?: AkashBaseAttribute[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_MEMORY = "/akash.base.v1beta2.Memory";
/**
 * JSON serialization of `akash.base.v1beta2.Memory` - stores resource quantity and memory attributes
 */
export type AkashBaseMemory = {
    quantity?: AkashBaseResourceValue | undefined;
    attributes?: AkashBaseAttribute[] | undefined;
};
/**
 * Destructures the fields of a {@link AkashBaseStorage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: quantity -
 *   - 2: attributes -
 */
export declare const destructAkashBaseStorage: (g_struct: AkashBaseStorage) => [name?: string, quantity?: AkashBaseResourceValue, attributes?: AkashBaseAttribute[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_STORAGE = "/akash.base.v1beta2.Storage";
/**
 * JSON serialization of `akash.base.v1beta2.Storage` - stores resource quantity and storage attributes
 */
export type AkashBaseStorage = {
    name?: string | undefined;
    quantity?: AkashBaseResourceValue | undefined;
    attributes?: AkashBaseAttribute[] | undefined;
};
