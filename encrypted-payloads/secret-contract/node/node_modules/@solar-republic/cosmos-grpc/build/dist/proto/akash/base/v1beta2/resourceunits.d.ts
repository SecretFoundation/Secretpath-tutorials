import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashBaseEndpoint, DecodedAkashBaseEndpoint } from './endpoint.js';
import type { AkashBaseCPU, DecodedAkashBaseCPU, AkashBaseMemory, DecodedAkashBaseMemory, AkashBaseStorage, DecodedAkashBaseStorage } from './resource.js';
export type EncodedAkashBaseResourceUnits = Encoded<'/akash.base.v1beta2.ResourceUnits'>;
/**
 * Encodes a `ResourceUnits` protobuf message: describes all available resources types for deployment/node etc if field is nil resource is not present in the given data-structure
 * @param g_cpu - `cpu`:
 * @param g_memory - `memory`:
 * @param a_storages - `storage`:
 * @param a_endpoints - `endpoints`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseResourceUnits: (atu8_cpu?: Opt<Encoded<'/akash.base.v1beta2.CPU'>>, atu8_memory?: Opt<Encoded<'/akash.base.v1beta2.Memory'>>, a_storages?: Opt<Encoded<'/akash.base.v1beta2.Storage'>[]>, a_endpoints?: Opt<Encoded<'/akash.base.v1beta2.Endpoint'>[]>) => EncodedAkashBaseResourceUnits;
/**
 * A decoded protobuf ResourceUnits message
 *
 * Tuple where:
 *   - 0: cpu -
 *   - 1: memory -
 *   - 2: storage -
 *   - 3: endpoints -
 */
export type DecodedAkashBaseResourceUnits = [
    a_cpu?: DecodedAkashBaseCPU,
    a_memory?: DecodedAkashBaseMemory,
    a_storage?: DecodedAkashBaseStorage[],
    a_endpoints?: DecodedAkashBaseEndpoint[]
];
/**
 * Decodes a protobuf ResourceUnits message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseResourceUnits}
 */
export declare const decodeAkashBaseResourceUnits: (atu8_payload: Uint8Array) => DecodedAkashBaseResourceUnits;
/**
 * Destructures the fields of a {@link AkashBaseResourceUnits} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cpu -
 *   - 1: memory -
 *   - 2: storage -
 *   - 3: endpoints -
 */
export declare const destructAkashBaseResourceUnits: (g_struct: AkashBaseResourceUnits) => [cpu?: AkashBaseCPU, memory?: AkashBaseMemory, storage?: AkashBaseStorage[], endpoints?: AkashBaseEndpoint[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_RESOURCE_UNITS = "/akash.base.v1beta2.ResourceUnits";
/**
 * JSON serialization of `akash.base.v1beta2.ResourceUnits` - describes all available resources types for deployment/node etc if field is nil resource is not present in the given data-structure
 */
export type AkashBaseResourceUnits = {
    cpu?: AkashBaseCPU | undefined;
    memory?: AkashBaseMemory | undefined;
    storage?: AkashBaseStorage[] | undefined;
    endpoints?: AkashBaseEndpoint[] | undefined;
};
