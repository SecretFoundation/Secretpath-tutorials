import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashBaseAttribute = Encoded<'/akash.base.v1beta3.Attribute'>;
export type EncodedAkashBaseSignedBy = Encoded<'/akash.base.v1beta3.SignedBy'>;
export type EncodedAkashBasePlacementRequirements = Encoded<'/akash.base.v1beta3.PlacementRequirements'>;
/**
 * Encodes a `Attribute` protobuf message: represents key value pair
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseAttribute: (s_key?: Opt<string>, s_value?: Opt<string>) => EncodedAkashBaseAttribute;
/**
 * Encodes a `SignedBy` protobuf message: represents validation accounts that tenant expects signatures for provider attributes AllOf has precedence i.e. if there is at least one entry AnyOf is ignored regardless to how many entries there this behaviour to be discussed
 * @param a_all_ofs - `all_of`: all keys in this list must have signed attributes
 * @param a_any_ofs - `any_of`: at least of of the keys from the list must have signed attributes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseSignedBy: (a_all_ofs?: Opt<string[]>, a_any_ofs?: Opt<string[]>) => EncodedAkashBaseSignedBy;
/**
 * Encodes a `PlacementRequirements` protobuf message:
 * @param g_signed_by - `signed_by`: SignedBy list of keys that tenants expect to have signatures from
 * @param a_attributes - `attributes`: Attribute list of attributes tenant expects from the provider
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBasePlacementRequirements: (atu8_signed_by?: Opt<Encoded<'/akash.base.v1beta3.SignedBy'>>, a_attributes?: Opt<Encoded<'/akash.base.v1beta3.Attribute'>[]>) => EncodedAkashBasePlacementRequirements;
/**
 * A decoded protobuf Attribute message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAkashBaseAttribute = [
    s_key?: string,
    s_value?: string
];
/**
 * Decodes a protobuf Attribute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseAttribute}
 */
export declare const decodeAkashBaseAttribute: (atu8_payload: Uint8Array) => DecodedAkashBaseAttribute;
/**
 * A decoded protobuf SignedBy message
 *
 * Tuple where:
 *   - 0: all_of - all keys in this list must have signed attributes
 *   - 1: any_of - at least of of the keys from the list must have signed attributes
 */
export type DecodedAkashBaseSignedBy = [
    a_all_ofs?: string[],
    a_any_ofs?: string[]
];
/**
 * Decodes a protobuf SignedBy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseSignedBy}
 */
export declare const decodeAkashBaseSignedBy: (atu8_payload: Uint8Array) => DecodedAkashBaseSignedBy;
/**
 * A decoded protobuf PlacementRequirements message
 *
 * Tuple where:
 *   - 0: signed_by - SignedBy list of keys that tenants expect to have signatures from
 *   - 1: attributes - Attribute list of attributes tenant expects from the provider
 */
export type DecodedAkashBasePlacementRequirements = [
    a_signed_by?: DecodedAkashBaseSignedBy,
    a_attributes?: DecodedAkashBaseAttribute[]
];
/**
 * Decodes a protobuf PlacementRequirements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBasePlacementRequirements}
 */
export declare const decodeAkashBasePlacementRequirements: (atu8_payload: Uint8Array) => DecodedAkashBasePlacementRequirements;
/**
 * Destructures the fields of a {@link AkashBaseAttribute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAkashBaseAttribute: (g_struct: AkashBaseAttribute) => [key?: string, value?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_ATTRIBUTE = "/akash.base.v1beta3.Attribute";
/**
 * JSON serialization of `akash.base.v1beta3.Attribute` - represents key value pair
 */
export type AkashBaseAttribute = {
    key?: string | undefined;
    value?: string | undefined;
};
/**
 * Destructures the fields of a {@link AkashBasePlacementRequirements} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signed_by - SignedBy list of keys that tenants expect to have signatures from
 *   - 1: attributes - Attribute list of attributes tenant expects from the provider
 */
export declare const destructAkashBasePlacementRequirements: (g_struct: AkashBasePlacementRequirements) => [signed_by?: AkashBaseSignedBy, attributes?: AkashBaseAttribute[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_PLACEMENT_REQUIREMENTS = "/akash.base.v1beta3.PlacementRequirements";
/**
 * JSON serialization of `akash.base.v1beta3.PlacementRequirements` -
 */
export type AkashBasePlacementRequirements = {
    signed_by?: AkashBaseSignedBy | undefined;
    attributes?: AkashBaseAttribute[] | undefined;
};
/**
 * Destructures the fields of a {@link AkashBaseSignedBy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: all_of - all keys in this list must have signed attributes
 *   - 1: any_of - at least of of the keys from the list must have signed attributes
 */
export declare const destructAkashBaseSignedBy: (g_struct: AkashBaseSignedBy) => [all_of?: string[], any_of?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_SIGNED_BY = "/akash.base.v1beta3.SignedBy";
/**
 * JSON serialization of `akash.base.v1beta3.SignedBy` - represents validation accounts that tenant expects signatures for provider attributes AllOf has precedence i.e. if there is at least one entry AnyOf is ignored regardless to how many entries there this behaviour to be discussed
 */
export type AkashBaseSignedBy = {
    all_of?: string[] | undefined;
    any_of?: string[] | undefined;
};
