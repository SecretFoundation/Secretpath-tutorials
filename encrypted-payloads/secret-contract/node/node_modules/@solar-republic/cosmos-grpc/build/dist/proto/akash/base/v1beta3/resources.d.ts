import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashBaseCPU, DecodedAkashBaseCPU } from './cpu.js';
import type { AkashBaseEndpoint, DecodedAkashBaseEndpoint } from './endpoint.js';
import type { AkashBaseGPU, DecodedAkashBaseGPU } from './gpu.js';
import type { AkashBaseMemory, DecodedAkashBaseMemory } from './memory.js';
import type { AkashBaseStorage, DecodedAkashBaseStorage } from './storage.js';
export type EncodedAkashBaseResources = Encoded<'/akash.base.v1beta3.Resources'>;
/**
 * Encodes a `Resources` protobuf message: describes all available resources types for deployment/node etc if field is nil resource is not present in the given data-structure
 * @param n_id - `id`:
 * @param g_cpu - `cpu`:
 * @param g_memory - `memory`:
 * @param a_storages - `storage`:
 * @param g_gpu - `gpu`:
 * @param a_endpoints - `endpoints`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseResources: (n_id?: Opt<number>, atu8_cpu?: Opt<Encoded<'/akash.base.v1beta3.CPU'>>, atu8_memory?: Opt<Encoded<'/akash.base.v1beta3.Memory'>>, a_storages?: Opt<Encoded<'/akash.base.v1beta3.Storage'>[]>, atu8_gpu?: Opt<Encoded<'/akash.base.v1beta3.GPU'>>, a_endpoints?: Opt<Encoded<'/akash.base.v1beta3.Endpoint'>[]>) => EncodedAkashBaseResources;
/**
 * A decoded protobuf Resources message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: cpu -
 *   - 2: memory -
 *   - 3: storage -
 *   - 4: gpu -
 *   - 5: endpoints -
 */
export type DecodedAkashBaseResources = [
    n_id?: number,
    a_cpu?: DecodedAkashBaseCPU,
    a_memory?: DecodedAkashBaseMemory,
    a_storage?: DecodedAkashBaseStorage[],
    a_gpu?: DecodedAkashBaseGPU,
    a_endpoints?: DecodedAkashBaseEndpoint[]
];
/**
 * Decodes a protobuf Resources message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseResources}
 */
export declare const decodeAkashBaseResources: (atu8_payload: Uint8Array) => DecodedAkashBaseResources;
/**
 * Destructures the fields of a {@link AkashBaseResources} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: cpu -
 *   - 2: memory -
 *   - 3: storage -
 *   - 4: gpu -
 *   - 5: endpoints -
 */
export declare const destructAkashBaseResources: (g_struct: AkashBaseResources) => [id?: number, cpu?: AkashBaseCPU, memory?: AkashBaseMemory, storage?: AkashBaseStorage[], gpu?: AkashBaseGPU, endpoints?: AkashBaseEndpoint[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_RESOURCES = "/akash.base.v1beta3.Resources";
/**
 * JSON serialization of `akash.base.v1beta3.Resources` - describes all available resources types for deployment/node etc if field is nil resource is not present in the given data-structure
 */
export type AkashBaseResources = {
    id?: number | undefined;
    cpu?: AkashBaseCPU | undefined;
    memory?: AkashBaseMemory | undefined;
    storage?: AkashBaseStorage[] | undefined;
    gpu?: AkashBaseGPU | undefined;
    endpoints?: AkashBaseEndpoint[] | undefined;
};
