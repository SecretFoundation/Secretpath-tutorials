import type { WeakAccountAddr, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashCertCertificateID = Encoded<'/akash.cert.v1beta2.CertificateID'>;
export type EncodedAkashCertCertificate = Encoded<'/akash.cert.v1beta2.Certificate'>;
export type EncodedAkashCertCertificateFilter = Encoded<'/akash.cert.v1beta2.CertificateFilter'>;
export type EncodedAkashCertMsgCreateCertificate = Encoded<'/akash.cert.v1beta2.MsgCreateCertificate'>;
export type EncodedAkashCertMsgCreateCertificateResponse = Encoded<'/akash.cert.v1beta2.MsgCreateCertificateResponse'>;
export type EncodedAkashCertMsgRevokeCertificate = Encoded<'/akash.cert.v1beta2.MsgRevokeCertificate'>;
export type EncodedAkashCertMsgRevokeCertificateResponse = Encoded<'/akash.cert.v1beta2.MsgRevokeCertificateResponse'>;
/**
 * Encodes a `CertificateID` protobuf message: stores owner and sequence number
 * @param sa_owner - `owner`:
 * @param s_serial - `serial`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertCertificateID: (sa_owner?: Opt<WeakAccountAddr>, s_serial?: Opt<string>) => EncodedAkashCertCertificateID;
/**
 * Encodes a `Certificate` protobuf message: stores state, certificate and it's public key
 * @param xc_state - `state`:
 * @param atu8_cert - `cert`:
 * @param atu8_pubkey - `pubkey`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertCertificate: (xc_state?: Opt<ProtoEnumAkashCertCertificateState>, atu8_cert?: Opt<Uint8Array>, atu8_pubkey?: Opt<Uint8Array>) => EncodedAkashCertCertificate;
/**
 * Encodes a `CertificateFilter` protobuf message: defines filters used to filter certificates
 * @param sa_owner - `owner`:
 * @param s_serial - `serial`:
 * @param s_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertCertificateFilter: (sa_owner?: Opt<WeakAccountAddr>, s_serial?: Opt<string>, s_state?: Opt<string>) => EncodedAkashCertCertificateFilter;
/**
 * Encodes a `MsgCreateCertificate` protobuf message: defines an SDK message for creating certificate
 * @param sa_owner - `owner`:
 * @param atu8_cert - `cert`:
 * @param atu8_pubkey - `pubkey`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertMsgCreateCertificate: (sa_owner?: Opt<WeakAccountAddr>, atu8_cert?: Opt<Uint8Array>, atu8_pubkey?: Opt<Uint8Array>) => EncodedAkashCertMsgCreateCertificate;
/**
 * Encodes a `MsgCreateCertificateResponse` protobuf message: defines the Msg/CreateCertificate response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertMsgCreateCertificateResponse: () => EncodedAkashCertMsgCreateCertificateResponse;
/**
 * Encodes a `MsgRevokeCertificate` protobuf message: defines an SDK message for revoking certificate
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertMsgRevokeCertificate: (atu8_id?: Opt<Encoded<'/akash.cert.v1beta2.CertificateID'>>) => EncodedAkashCertMsgRevokeCertificate;
/**
 * Encodes a `MsgRevokeCertificateResponse` protobuf message: defines the Msg/RevokeCertificate response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertMsgRevokeCertificateResponse: () => EncodedAkashCertMsgRevokeCertificateResponse;
/**
 * A decoded protobuf CertificateID message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: serial -
 */
export type DecodedAkashCertCertificateID = [
    sa_owner?: CwAccountAddr,
    s_serial?: string
];
/**
 * Decodes a protobuf CertificateID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertCertificateID}
 */
export declare const decodeAkashCertCertificateID: (atu8_payload: Uint8Array) => DecodedAkashCertCertificateID;
/**
 * A decoded protobuf Certificate message
 *
 * Tuple where:
 *   - 1: state -
 *   - 2: cert -
 *   - 3: pubkey -
 */
export type DecodedAkashCertCertificate = [
    w_0?: undefined,
    xc_state?: ProtoEnumAkashCertCertificateState,
    atu8_cert?: Uint8Array,
    atu8_pubkey?: Uint8Array
];
/**
 * Decodes a protobuf Certificate message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAkashCertCertificate}
 */
export declare const decodeAkashCertCertificate: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAkashCertCertificate;
/**
 * A decoded protobuf CertificateFilter message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: serial -
 *   - 2: state -
 */
export type DecodedAkashCertCertificateFilter = [
    sa_owner?: CwAccountAddr,
    s_serial?: string,
    s_state?: string
];
/**
 * Decodes a protobuf CertificateFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertCertificateFilter}
 */
export declare const decodeAkashCertCertificateFilter: (atu8_payload: Uint8Array) => DecodedAkashCertCertificateFilter;
/**
 * A decoded protobuf CreateCertificate message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: cert -
 *   - 2: pubkey -
 */
export type DecodedAkashCertMsgCreateCertificate = [
    sa_owner?: CwAccountAddr,
    atu8_cert?: Uint8Array,
    atu8_pubkey?: Uint8Array
];
/**
 * Decodes a protobuf CreateCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgCreateCertificate}
 */
export declare const decodeAkashCertMsgCreateCertificate: (atu8_payload: Uint8Array) => DecodedAkashCertMsgCreateCertificate;
/**
 * A decoded protobuf CreateCertificate message
 *
 * Tuple where:
 */
export type DecodedAkashCertMsgCreateCertificateResponse = [];
/**
 * Decodes a protobuf CreateCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgCreateCertificateResponse}
 */
export declare const decodeAkashCertMsgCreateCertificateResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RevokeCertificate message
 *
 * Alias for: id -
 */
export type DecodedAkashCertMsgRevokeCertificate = [
    a_id?: DecodedAkashCertCertificateID
];
/**
 * Decodes a protobuf RevokeCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgRevokeCertificate}
 */
export declare const decodeAkashCertMsgRevokeCertificate: (atu8_payload: Uint8Array) => DecodedAkashCertMsgRevokeCertificate;
/**
 * A decoded protobuf RevokeCertificate message
 *
 * Tuple where:
 */
export type DecodedAkashCertMsgRevokeCertificateResponse = [];
/**
 * Decodes a protobuf RevokeCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgRevokeCertificateResponse}
 */
export declare const decodeAkashCertMsgRevokeCertificateResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link AkashCertCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: state -
 *   - 2: cert -
 *   - 3: pubkey -
 */
export declare const destructAkashCertCertificate: (g_struct: AkashCertCertificate) => [EMPTY?: void, state?: JsonEnumAkashCertCertificateState, cert?: Uint8Array, pubkey?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE = "/akash.cert.v1beta2.Certificate";
/**
 * JSON serialization of `akash.cert.v1beta2.Certificate` - stores state, certificate and it's public key
 */
export type AkashCertCertificate = {
    state?: JsonEnumAkashCertCertificateState | undefined;
    cert?: CwBase64 | undefined;
    pubkey?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertCertificateFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: serial -
 *   - 2: state -
 */
export declare const destructAkashCertCertificateFilter: (g_struct: AkashCertCertificateFilter) => [owner?: CwAccountAddr, serial?: string, state?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE_FILTER = "/akash.cert.v1beta2.CertificateFilter";
/**
 * JSON serialization of `akash.cert.v1beta2.CertificateFilter` - defines filters used to filter certificates
 */
export type AkashCertCertificateFilter = {
    owner?: CwAccountAddr | undefined;
    serial?: string | undefined;
    state?: string | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertCertificateID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: serial -
 */
export declare const destructAkashCertCertificateID: (g_struct: AkashCertCertificateID) => [owner?: CwAccountAddr, serial?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE_I_D = "/akash.cert.v1beta2.CertificateID";
/**
 * JSON serialization of `akash.cert.v1beta2.CertificateID` - stores owner and sequence number
 */
export type AkashCertCertificateID = {
    owner?: CwAccountAddr | undefined;
    serial?: string | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertMsgCreateCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: cert -
 *   - 2: pubkey -
 */
export declare const destructAkashCertMsgCreateCertificate: (g_struct: AkashCertMsgCreateCertificate) => [owner?: CwAccountAddr, cert?: Uint8Array, pubkey?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_MSG_CREATE_CERTIFICATE = "/akash.cert.v1beta2.MsgCreateCertificate";
/**
 * JSON serialization of `akash.cert.v1beta2.MsgCreateCertificate` - defines an SDK message for creating certificate
 */
export type AkashCertMsgCreateCertificate = {
    owner?: CwAccountAddr | undefined;
    cert?: CwBase64 | undefined;
    pubkey?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertMsgCreateCertificateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAkashCertMsgCreateCertificateResponse: (g_struct: AkashCertMsgCreateCertificateResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_MSG_CREATE_CERTIFICATE_RESPONSE = "/akash.cert.v1beta2.MsgCreateCertificateResponse";
/**
 * JSON serialization of `akash.cert.v1beta2.MsgCreateCertificateResponse` - defines the Msg/CreateCertificate response type.
 */
export type AkashCertMsgCreateCertificateResponse = {};
/**
 * Destructures the fields of a {@link AkashCertMsgRevokeCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAkashCertMsgRevokeCertificate: (g_struct: AkashCertMsgRevokeCertificate) => [id?: AkashCertCertificateID];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_MSG_REVOKE_CERTIFICATE = "/akash.cert.v1beta2.MsgRevokeCertificate";
/**
 * JSON serialization of `akash.cert.v1beta2.MsgRevokeCertificate` - defines an SDK message for revoking certificate
 */
export type AkashCertMsgRevokeCertificate = {
    id?: AkashCertCertificateID | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertMsgRevokeCertificateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAkashCertMsgRevokeCertificateResponse: (g_struct: AkashCertMsgRevokeCertificateResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_MSG_REVOKE_CERTIFICATE_RESPONSE = "/akash.cert.v1beta2.MsgRevokeCertificateResponse";
/**
 * JSON serialization of `akash.cert.v1beta2.MsgRevokeCertificateResponse` - defines the Msg/RevokeCertificate response type.
 */
export type AkashCertMsgRevokeCertificateResponse = {};
/**
 * Protobuf enum value for `akash.cert.v1beta2.Certificate.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashCertCertificateState}
 */
export declare const XC_PROTO_AKASH_CERT_CERTIFICATE_invalid = 0;
/**
 * JSON enum value for `akash.cert.v1beta2.Certificate.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashCertCertificateState}
 */
export declare const SI_JSON_AKASH_CERT_CERTIFICATE_invalid = "CertificateStateInvalid";
/**
 * Protobuf enum value for `akash.cert.v1beta2.Certificate.State`.
 *
 * **valid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashCertCertificateState}
 */
export declare const XC_PROTO_AKASH_CERT_CERTIFICATE_valid = 1;
/**
 * JSON enum value for `akash.cert.v1beta2.Certificate.State`.
 *
 * **valid** -
 *
 * Belongs to enum type {@link JsonEnumAkashCertCertificateState}
 */
export declare const SI_JSON_AKASH_CERT_CERTIFICATE_valid = "CertificateValid";
/**
 * Protobuf enum value for `akash.cert.v1beta2.Certificate.State`.
 *
 * **revoked** -
 *
 * Belongs to enum type {@link ProtoEnumAkashCertCertificateState}
 */
export declare const XC_PROTO_AKASH_CERT_CERTIFICATE_revoked = 2;
/**
 * JSON enum value for `akash.cert.v1beta2.Certificate.State`.
 *
 * **revoked** -
 *
 * Belongs to enum type {@link JsonEnumAkashCertCertificateState}
 */
export declare const SI_JSON_AKASH_CERT_CERTIFICATE_revoked = "CertificateRevoked";
/**
 * Raw protobuf enum values for `akash.cert.v1beta2.Certificate.State` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AKASH_CERT_CERTIFICATE_invalid}
 *   - {@link XC_PROTO_AKASH_CERT_CERTIFICATE_valid}
 *   - {@link XC_PROTO_AKASH_CERT_CERTIFICATE_revoked}
 */
export type ProtoEnumAkashCertCertificateState = typeof XC_PROTO_AKASH_CERT_CERTIFICATE_invalid | typeof XC_PROTO_AKASH_CERT_CERTIFICATE_valid | typeof XC_PROTO_AKASH_CERT_CERTIFICATE_revoked;
/**
 * JSON enum values for `akash.cert.v1beta2.Certificate.State` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AKASH_CERT_CERTIFICATE_invalid}
 *   - {@link SI_JSON_AKASH_CERT_CERTIFICATE_valid}
 *   - {@link SI_JSON_AKASH_CERT_CERTIFICATE_revoked}
 */
export type JsonEnumAkashCertCertificateState = typeof SI_JSON_AKASH_CERT_CERTIFICATE_invalid | typeof SI_JSON_AKASH_CERT_CERTIFICATE_valid | typeof SI_JSON_AKASH_CERT_CERTIFICATE_revoked;
/**
 * Maps a protobuf enum int value for `akash.cert.v1beta2.Certificate.State` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAkashCertCertificateState: Record<ProtoEnumAkashCertCertificateState, JsonEnumAkashCertCertificateState>;
/**
 * Maps a JSON enum string value for `akash.cert.v1beta2.Certificate.State` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAkashCertCertificateState: Record<JsonEnumAkashCertCertificateState, ProtoEnumAkashCertCertificateState>;
