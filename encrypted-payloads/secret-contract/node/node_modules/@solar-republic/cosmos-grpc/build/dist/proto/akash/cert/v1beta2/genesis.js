import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAkashCertCertificate } from './cert.js';
/**
 * Encodes a `GenesisCertificate` protobuf message: defines certificate entry at genesis
 * @param sa_owner - `owner`:
 * @param g_certificate - `certificate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertGenesisCertificate = (sa_owner, atu8_certificate) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(atu8_certificate) // Certificate certificate = 2
    .o;
/**
 * Encodes a `GenesisState` protobuf message: defines the basic genesis state used by cert module
 * @param a_certificates - `certificates`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertGenesisState = (a_certificates) => Protobuf() // ...
    .B(a_certificates) // GenesisCertificate[] certificates = 1
    .o;
/**
 * Decodes a protobuf GenesisCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertGenesisCertificate}
 */
export const decodeAkashCertGenesisCertificate = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeAkashCertCertificate]);
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertGenesisState}
 */
export const decodeAkashCertGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeAkashCertGenesisCertificate]);
/**
 * Destructures the fields of a {@link AkashCertGenesisCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: certificate -
 */
export const destructAkashCertGenesisCertificate = (g_struct) => [g_struct.owner, g_struct.certificate];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_GENESIS_CERTIFICATE = '/akash.cert.v1beta2.GenesisCertificate';
/**
 * Destructures the fields of a {@link AkashCertGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificates -
 */
export const destructAkashCertGenesisState = (g_struct) => [g_struct.certificates];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_GENESIS_STATE = '/akash.cert.v1beta2.GenesisState';
//# sourceMappingURL=genesis.js.map