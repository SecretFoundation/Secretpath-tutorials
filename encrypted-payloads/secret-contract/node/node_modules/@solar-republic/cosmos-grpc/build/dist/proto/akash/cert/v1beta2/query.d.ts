/// <reference types="node" />
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashCertCertificate, DecodedAkashCertCertificate, AkashCertCertificateFilter, DecodedAkashCertCertificateFilter } from './cert.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
export type EncodedAkashCertCertificateResponse = Encoded<'/akash.cert.v1beta2.CertificateResponse'>;
export type EncodedAkashCertQueryCertificatesRequest = Encoded<'/akash.cert.v1beta2.QueryCertificatesRequest'>;
export type EncodedAkashCertQueryCertificatesResponse = Encoded<'/akash.cert.v1beta2.QueryCertificatesResponse'>;
/**
 * Queries certificates
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_filter -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: certificates - the 'certificates' response property
 *   - 1: pagination - the 'certificates' response property
 */
export declare const queryAkashCertCertificates: (z_req: string | ({
    origin: string;
} & RequestInit), g_filter?: Opt<AkashCertCertificateFilter>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AkashCertQueryCertificatesResponse>>;
/**
 * Encodes a `CertificateResponse` protobuf message: contains a single X509 certificate and its serial number
 * @param g_certificate - `certificate`:
 * @param s_serial - `serial`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertCertificateResponse: (atu8_certificate?: Opt<Encoded<'/akash.cert.v1beta2.Certificate'>>, s_serial?: Opt<string>) => EncodedAkashCertCertificateResponse;
/**
 * Encodes a `QueryCertificatesRequest` protobuf message: QueryDeploymentsRequest is request type for the Query/Deployments RPC method
 * @param g_filter - `filter`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertQueryCertificatesRequest: (atu8_filter?: Opt<Encoded<'/akash.cert.v1beta2.CertificateFilter'>>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedAkashCertQueryCertificatesRequest;
/**
 * Encodes a `QueryCertificatesResponse` protobuf message: response type for the Query/Certificates RPC method
 * @param a_certificates - `certificates`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertQueryCertificatesResponse: (a_certificates?: Opt<Encoded<'/akash.cert.v1beta2.CertificateResponse'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedAkashCertQueryCertificatesResponse;
/**
 * A decoded protobuf Certificate message
 *
 * Tuple where:
 *   - 0: certificate -
 *   - 1: serial -
 */
export type DecodedAkashCertCertificateResponse = [
    a_certificate?: DecodedAkashCertCertificate,
    s_serial?: string
];
/**
 * Decodes a protobuf Certificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertCertificateResponse}
 */
export declare const decodeAkashCertCertificateResponse: (atu8_payload: Uint8Array) => DecodedAkashCertCertificateResponse;
/**
 * A decoded protobuf QueryCertificatesRequest message
 *
 * Tuple where:
 *   - 0: filter -
 *   - 1: pagination -
 */
export type DecodedAkashCertQueryCertificatesRequest = [
    a_filter?: DecodedAkashCertCertificateFilter,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryCertificatesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertQueryCertificatesRequest}
 */
export declare const decodeAkashCertQueryCertificatesRequest: (atu8_payload: Uint8Array) => DecodedAkashCertQueryCertificatesRequest;
/**
 * A decoded protobuf QueryCertificates message
 *
 * Tuple where:
 *   - 0: certificates -
 *   - 1: pagination -
 */
export type DecodedAkashCertQueryCertificatesResponse = [
    a_certificates?: DecodedAkashCertCertificateResponse[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryCertificates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertQueryCertificatesResponse}
 */
export declare const decodeAkashCertQueryCertificatesResponse: (atu8_payload: Uint8Array) => DecodedAkashCertQueryCertificatesResponse;
/**
 * Destructures the fields of a {@link AkashCertCertificateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificate -
 *   - 1: serial -
 */
export declare const destructAkashCertCertificateResponse: (g_struct: AkashCertCertificateResponse) => [certificate?: AkashCertCertificate, serial?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE_RESPONSE = "/akash.cert.v1beta2.CertificateResponse";
/**
 * JSON serialization of `akash.cert.v1beta2.CertificateResponse` - contains a single X509 certificate and its serial number
 */
export type AkashCertCertificateResponse = {
    certificate?: AkashCertCertificate | undefined;
    serial?: string | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertQueryCertificatesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: filter -
 *   - 1: pagination -
 */
export declare const destructAkashCertQueryCertificatesRequest: (g_struct: AkashCertQueryCertificatesRequest) => [filter?: AkashCertCertificateFilter, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_QUERY_CERTIFICATES_REQUEST = "/akash.cert.v1beta2.QueryCertificatesRequest";
/**
 * JSON serialization of `akash.cert.v1beta2.QueryCertificatesRequest` - QueryDeploymentsRequest is request type for the Query/Deployments RPC method
 */
export type AkashCertQueryCertificatesRequest = {
    filter?: AkashCertCertificateFilter | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertQueryCertificatesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificates -
 *   - 1: pagination -
 */
export declare const destructAkashCertQueryCertificatesResponse: (g_struct: AkashCertQueryCertificatesResponse) => [certificates?: AkashCertCertificateResponse[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_QUERY_CERTIFICATES_RESPONSE = "/akash.cert.v1beta2.QueryCertificatesResponse";
/**
 * JSON serialization of `akash.cert.v1beta2.QueryCertificatesResponse` - response type for the Query/Certificates RPC method
 */
export type AkashCertQueryCertificatesResponse = {
    certificates?: AkashCertCertificateResponse[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
