import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `CertificateID` protobuf message: stores owner and sequence number
 * @param sa_owner - `owner`:
 * @param s_serial - `serial`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertCertificateID = (sa_owner, s_serial) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .s(s_serial) // string serial = 2
    .o;
/**
 * Encodes a `Certificate` protobuf message: stores state, certificate and it's public key
 * @param xc_state - `state`:
 * @param atu8_cert - `cert`:
 * @param atu8_pubkey - `pubkey`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertCertificate = (xc_state, atu8_cert, atu8_pubkey) => Protobuf() // ...
    .v(xc_state, 2) // State state = 2
    .b(atu8_cert, 3) // bytes cert = 3
    .b(atu8_pubkey, 4) // bytes pubkey = 4
    .o;
/**
 * Encodes a `CertificateFilter` protobuf message: defines filters used to filter certificates
 * @param sa_owner - `owner`:
 * @param s_serial - `serial`:
 * @param s_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertCertificateFilter = (sa_owner, s_serial, s_state) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .s(s_serial) // string serial = 2
    .s(s_state) // string state = 3
    .o;
/**
 * Encodes a `MsgCreateCertificate` protobuf message: defines an SDK message for creating certificate
 * @param sa_owner - `owner`:
 * @param atu8_cert - `cert`:
 * @param atu8_pubkey - `pubkey`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertMsgCreateCertificate = (sa_owner, atu8_cert, atu8_pubkey) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(atu8_cert) // bytes cert = 2
    .b(atu8_pubkey) // bytes pubkey = 3
    .o;
/**
 * Encodes a `MsgCreateCertificateResponse` protobuf message: defines the Msg/CreateCertificate response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertMsgCreateCertificateResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgRevokeCertificate` protobuf message: defines an SDK message for revoking certificate
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertMsgRevokeCertificate = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // CertificateID id = 1
    .o;
/**
 * Encodes a `MsgRevokeCertificateResponse` protobuf message: defines the Msg/RevokeCertificate response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertMsgRevokeCertificateResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf CertificateID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertCertificateID}
 */
export const decodeAkashCertCertificateID = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf Certificate message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAkashCertCertificate}
 */
export const decodeAkashCertCertificate = ((atu8_payload, [, xc_state, atu8_cert, atu8_pubkey] = decode_protobuf(atu8_payload, [0, 1, 1, 1])) => [__UNDEFINED, xc_state, atu8_cert, atu8_pubkey]);
/**
 * Decodes a protobuf CertificateFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertCertificateFilter}
 */
export const decodeAkashCertCertificateFilter = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf CreateCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgCreateCertificate}
 */
export const decodeAkashCertMsgCreateCertificate = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1]);
/**
 * Decodes a protobuf CreateCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgCreateCertificateResponse}
 */
export const decodeAkashCertMsgCreateCertificateResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RevokeCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgRevokeCertificate}
 */
export const decodeAkashCertMsgRevokeCertificate = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashCertCertificateID]);
/**
 * Decodes a protobuf RevokeCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertMsgRevokeCertificateResponse}
 */
export const decodeAkashCertMsgRevokeCertificateResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AkashCertCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: state -
 *   - 2: cert -
 *   - 3: pubkey -
 */
export const destructAkashCertCertificate = (g_struct) => [__UNDEFINED, g_struct.state, safe_base64_to_bytes(g_struct.cert), safe_base64_to_bytes(g_struct.pubkey)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE = '/akash.cert.v1beta3.Certificate';
/**
 * Destructures the fields of a {@link AkashCertCertificateFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: serial -
 *   - 2: state -
 */
export const destructAkashCertCertificateFilter = (g_struct) => [g_struct.owner, g_struct.serial, g_struct.state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE_FILTER = '/akash.cert.v1beta3.CertificateFilter';
/**
 * Destructures the fields of a {@link AkashCertCertificateID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: serial -
 */
export const destructAkashCertCertificateID = (g_struct) => [g_struct.owner, g_struct.serial];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE_I_D = '/akash.cert.v1beta3.CertificateID';
/**
 * Destructures the fields of a {@link AkashCertMsgCreateCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: cert -
 *   - 2: pubkey -
 */
export const destructAkashCertMsgCreateCertificate = (g_struct) => [g_struct.owner, safe_base64_to_bytes(g_struct.cert), safe_base64_to_bytes(g_struct.pubkey)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_MSG_CREATE_CERTIFICATE = '/akash.cert.v1beta3.MsgCreateCertificate';
/**
 * Destructures the fields of a {@link AkashCertMsgCreateCertificateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashCertMsgCreateCertificateResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_MSG_CREATE_CERTIFICATE_RESPONSE = '/akash.cert.v1beta3.MsgCreateCertificateResponse';
/**
 * Destructures the fields of a {@link AkashCertMsgRevokeCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashCertMsgRevokeCertificate = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_MSG_REVOKE_CERTIFICATE = '/akash.cert.v1beta3.MsgRevokeCertificate';
/**
 * Destructures the fields of a {@link AkashCertMsgRevokeCertificateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashCertMsgRevokeCertificateResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_MSG_REVOKE_CERTIFICATE_RESPONSE = '/akash.cert.v1beta3.MsgRevokeCertificateResponse';
/**
 * Protobuf enum value for `akash.cert.v1beta3.Certificate.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashCertCertificateState}
 */
export const XC_PROTO_AKASH_CERT_CERTIFICATE_invalid = 0;
/**
 * JSON enum value for `akash.cert.v1beta3.Certificate.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashCertCertificateState}
 */
export const SI_JSON_AKASH_CERT_CERTIFICATE_invalid = 'CertificateStateInvalid';
/**
 * Protobuf enum value for `akash.cert.v1beta3.Certificate.State`.
 *
 * **valid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashCertCertificateState}
 */
export const XC_PROTO_AKASH_CERT_CERTIFICATE_valid = 1;
/**
 * JSON enum value for `akash.cert.v1beta3.Certificate.State`.
 *
 * **valid** -
 *
 * Belongs to enum type {@link JsonEnumAkashCertCertificateState}
 */
export const SI_JSON_AKASH_CERT_CERTIFICATE_valid = 'CertificateValid';
/**
 * Protobuf enum value for `akash.cert.v1beta3.Certificate.State`.
 *
 * **revoked** -
 *
 * Belongs to enum type {@link ProtoEnumAkashCertCertificateState}
 */
export const XC_PROTO_AKASH_CERT_CERTIFICATE_revoked = 2;
/**
 * JSON enum value for `akash.cert.v1beta3.Certificate.State`.
 *
 * **revoked** -
 *
 * Belongs to enum type {@link JsonEnumAkashCertCertificateState}
 */
export const SI_JSON_AKASH_CERT_CERTIFICATE_revoked = 'CertificateRevoked';
/**
 * Maps a protobuf enum int value for `akash.cert.v1beta3.Certificate.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAkashCertCertificateState = {
    [XC_PROTO_AKASH_CERT_CERTIFICATE_invalid]: SI_JSON_AKASH_CERT_CERTIFICATE_invalid,
    [XC_PROTO_AKASH_CERT_CERTIFICATE_valid]: SI_JSON_AKASH_CERT_CERTIFICATE_valid,
    [XC_PROTO_AKASH_CERT_CERTIFICATE_revoked]: SI_JSON_AKASH_CERT_CERTIFICATE_revoked,
};
/**
 * Maps a JSON enum string value for `akash.cert.v1beta3.Certificate.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAkashCertCertificateState = {
    [SI_JSON_AKASH_CERT_CERTIFICATE_invalid]: XC_PROTO_AKASH_CERT_CERTIFICATE_invalid,
    [SI_JSON_AKASH_CERT_CERTIFICATE_valid]: XC_PROTO_AKASH_CERT_CERTIFICATE_valid,
    [SI_JSON_AKASH_CERT_CERTIFICATE_revoked]: XC_PROTO_AKASH_CERT_CERTIFICATE_revoked,
};
//# sourceMappingURL=cert.js.map