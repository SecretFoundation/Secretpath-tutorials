/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeAkashCertCertificate, decodeAkashCertCertificateFilter } from './cert.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
const SR_LCD_AKASH_CERT_QUERY = '/akash/cert/v1beta3/certificates/list';
/**
 * Queries certificates
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_filter -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: certificates - the 'certificates' response property
 *   - 1: pagination - the 'certificates' response property
 */
export const queryAkashCertCertificates = restful_grpc((g_filter, g_pagination) => [SR_LCD_AKASH_CERT_QUERY, {
        filter: g_filter,
        pagination: g_pagination,
    }]);
/**
 * Encodes a `CertificateResponse` protobuf message: contains a single X509 certificate and its serial number
 * @param g_certificate - `certificate`:
 * @param s_serial - `serial`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertCertificateResponse = (atu8_certificate, s_serial) => Protobuf() // ...
    .b(atu8_certificate) // Certificate certificate = 1
    .s(s_serial) // string serial = 2
    .o;
/**
 * Encodes a `QueryCertificatesRequest` protobuf message: QueryDeploymentsRequest is request type for the Query/Deployments RPC method
 * @param g_filter - `filter`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertQueryCertificatesRequest = (atu8_filter, atu8_pagination) => Protobuf() // ...
    .b(atu8_filter) // CertificateFilter filter = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryCertificatesResponse` protobuf message: response type for the Query/Certificates RPC method
 * @param a_certificates - `certificates`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashCertQueryCertificatesResponse = (a_certificates, atu8_pagination) => Protobuf() // ...
    .B(a_certificates) // CertificateResponse[] certificates = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Decodes a protobuf Certificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertCertificateResponse}
 */
export const decodeAkashCertCertificateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5], [decodeAkashCertCertificate]);
/**
 * Decodes a protobuf QueryCertificatesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertQueryCertificatesRequest}
 */
export const decodeAkashCertQueryCertificatesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeAkashCertCertificateFilter, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryCertificates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertQueryCertificatesResponse}
 */
export const decodeAkashCertQueryCertificatesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeAkashCertCertificateResponse, decodeCosmosBaseQueryPageResponse]);
/**
 * Destructures the fields of a {@link AkashCertCertificateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificate -
 *   - 1: serial -
 */
export const destructAkashCertCertificateResponse = (g_struct) => [g_struct.certificate, g_struct.serial];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_CERTIFICATE_RESPONSE = '/akash.cert.v1beta3.CertificateResponse';
/**
 * Destructures the fields of a {@link AkashCertQueryCertificatesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: filter -
 *   - 1: pagination -
 */
export const destructAkashCertQueryCertificatesRequest = (g_struct) => [g_struct.filter, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_QUERY_CERTIFICATES_REQUEST = '/akash.cert.v1beta3.QueryCertificatesRequest';
/**
 * Destructures the fields of a {@link AkashCertQueryCertificatesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificates -
 *   - 1: pagination -
 */
export const destructAkashCertQueryCertificatesResponse = (g_struct) => [g_struct.certificates, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_CERT_QUERY_CERTIFICATES_RESPONSE = '/akash.cert.v1beta3.QueryCertificatesResponse';
//# sourceMappingURL=query.js.map