import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashDeploymentGroupID = Encoded<'/akash.deployment.v1beta2.GroupID'>;
/**
 * Encodes a `GroupID` protobuf message: stores owner, deployment sequence number and group sequence number
 * @param sa_owner - `owner`:
 * @param sg_dseq - `dseq`:
 * @param n_gseq - `gseq`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentGroupID: (sa_owner?: Opt<WeakAccountAddr>, sg_dseq?: Opt<WeakUint64Str>, n_gseq?: Opt<number>) => EncodedAkashDeploymentGroupID;
/**
 * A decoded protobuf GroupID message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: dseq -
 *   - 2: gseq -
 */
export type DecodedAkashDeploymentGroupID = [
    sa_owner?: CwAccountAddr,
    sg_dseq?: CwUint64,
    n_gseq?: number
];
/**
 * Decodes a protobuf GroupID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroupID}
 */
export declare const decodeAkashDeploymentGroupID: (atu8_payload: Uint8Array) => DecodedAkashDeploymentGroupID;
/**
 * Destructures the fields of a {@link AkashDeploymentGroupID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: dseq -
 *   - 2: gseq -
 */
export declare const destructAkashDeploymentGroupID: (g_struct: AkashDeploymentGroupID) => [owner?: CwAccountAddr, dseq?: CwUint64, gseq?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP_I_D = "/akash.deployment.v1beta2.GroupID";
/**
 * JSON serialization of `akash.deployment.v1beta2.GroupID` - stores owner, deployment sequence number and group sequence number
 */
export type AkashDeploymentGroupID = {
    owner?: CwAccountAddr | undefined;
    dseq?: CwUint64 | undefined;
    gseq?: number | undefined;
};
