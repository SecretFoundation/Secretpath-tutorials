/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAkashBasePlacementRequirements } from '../../base/v1beta2/attribute.js';
import { decodeAkashDeploymentResource } from './resource.js';
/**
 * Encodes a `GroupSpec` protobuf message: stores group specifications
 * @param s_name - `name`:
 * @param g_requirements - `requirements`:
 * @param a_resources - `resources`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentGroupSpec = (s_name, atu8_requirements, a_resources) => Protobuf() // ...
    .s(s_name) // string name = 1
    .b(atu8_requirements) // PlacementRequirements requirements = 2
    .B(a_resources) // Resource[] resources = 3
    .o;
/**
 * Decodes a protobuf GroupSpec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroupSpec}
 */
export const decodeAkashDeploymentGroupSpec = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0], [0, decodeAkashBasePlacementRequirements, decodeAkashDeploymentResource]);
/**
 * Destructures the fields of a {@link AkashDeploymentGroupSpec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: requirements -
 *   - 2: resources -
 */
export const destructAkashDeploymentGroupSpec = (g_struct) => [g_struct.name, g_struct.requirements, g_struct.resources];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP_SPEC = '/akash.deployment.v1beta2.GroupSpec';
//# sourceMappingURL=groupspec.js.map