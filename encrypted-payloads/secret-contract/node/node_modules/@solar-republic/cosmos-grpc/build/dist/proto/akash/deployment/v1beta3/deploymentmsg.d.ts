import type { WeakAccountAddr, SlimCoin, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashDeploymentDeploymentID, DecodedAkashDeploymentDeploymentID } from './deployment.js';
import type { AkashDeploymentGroupSpec, DecodedAkashDeploymentGroupSpec } from './groupspec.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAkashDeploymentMsgCreateDeployment = Encoded<'/akash.deployment.v1beta3.MsgCreateDeployment'>;
export type EncodedAkashDeploymentMsgCreateDeploymentResponse = Encoded<'/akash.deployment.v1beta3.MsgCreateDeploymentResponse'>;
export type EncodedAkashDeploymentMsgDepositDeployment = Encoded<'/akash.deployment.v1beta3.MsgDepositDeployment'>;
export type EncodedAkashDeploymentMsgDepositDeploymentResponse = Encoded<'/akash.deployment.v1beta3.MsgDepositDeploymentResponse'>;
export type EncodedAkashDeploymentMsgUpdateDeployment = Encoded<'/akash.deployment.v1beta3.MsgUpdateDeployment'>;
export type EncodedAkashDeploymentMsgUpdateDeploymentResponse = Encoded<'/akash.deployment.v1beta3.MsgUpdateDeploymentResponse'>;
export type EncodedAkashDeploymentMsgCloseDeployment = Encoded<'/akash.deployment.v1beta3.MsgCloseDeployment'>;
export type EncodedAkashDeploymentMsgCloseDeploymentResponse = Encoded<'/akash.deployment.v1beta3.MsgCloseDeploymentResponse'>;
/**
 * Encodes a `MsgCreateDeployment` protobuf message: defines an SDK message for creating deployment
 * @param g_id - `id`:
 * @param a_groups - `groups`:
 * @param atu8_version - `version`:
 * @param a_deposit - `deposit`:
 * @param sa_depositor - `depositor`: Depositor pays for the deposit
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgCreateDeployment: (atu8_id?: Opt<Encoded<'/akash.deployment.v1beta3.DeploymentID'>>, a_groups?: Opt<Encoded<'/akash.deployment.v1beta3.GroupSpec'>[]>, atu8_version?: Opt<Uint8Array>, a_deposit?: Opt<SlimCoin>, sa_depositor?: Opt<WeakAccountAddr>) => EncodedAkashDeploymentMsgCreateDeployment;
/**
 * Encodes a `MsgCreateDeploymentResponse` protobuf message: defines the Msg/CreateDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgCreateDeploymentResponse: () => EncodedAkashDeploymentMsgCreateDeploymentResponse;
/**
 * Encodes a `MsgDepositDeployment` protobuf message: deposits more funds into the deposit account
 * @param g_id - `id`:
 * @param a_amount - `amount`:
 * @param sa_depositor - `depositor`: Depositor pays for the deposit
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgDepositDeployment: (atu8_id?: Opt<Encoded<'/akash.deployment.v1beta3.DeploymentID'>>, a_amount?: Opt<SlimCoin>, sa_depositor?: Opt<WeakAccountAddr>) => EncodedAkashDeploymentMsgDepositDeployment;
/**
 * Encodes a `MsgDepositDeploymentResponse` protobuf message: MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgDepositDeploymentResponse: () => EncodedAkashDeploymentMsgDepositDeploymentResponse;
/**
 * Encodes a `MsgUpdateDeployment` protobuf message: defines an SDK message for updating deployment
 * @param g_id - `id`:
 * @param atu8_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgUpdateDeployment: (atu8_id?: Opt<Encoded<'/akash.deployment.v1beta3.DeploymentID'>>, atu8_version?: Opt<Uint8Array>) => EncodedAkashDeploymentMsgUpdateDeployment;
/**
 * Encodes a `MsgUpdateDeploymentResponse` protobuf message: defines the Msg/UpdateDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgUpdateDeploymentResponse: () => EncodedAkashDeploymentMsgUpdateDeploymentResponse;
/**
 * Encodes a `MsgCloseDeployment` protobuf message: defines an SDK message for closing deployment
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgCloseDeployment: (atu8_id?: Opt<Encoded<'/akash.deployment.v1beta3.DeploymentID'>>) => EncodedAkashDeploymentMsgCloseDeployment;
/**
 * Encodes a `MsgCloseDeploymentResponse` protobuf message: defines the Msg/CloseDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentMsgCloseDeploymentResponse: () => EncodedAkashDeploymentMsgCloseDeploymentResponse;
/**
 * A decoded protobuf CreateDeployment message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: groups -
 *   - 2: version -
 *   - 3: deposit -
 *   - 4: depositor - Depositor pays for the deposit
 */
export type DecodedAkashDeploymentMsgCreateDeployment = [
    a_id?: DecodedAkashDeploymentDeploymentID,
    a_groups?: DecodedAkashDeploymentGroupSpec[],
    atu8_version?: Uint8Array,
    a_deposit?: [
        string,
        string
    ],
    sa_depositor?: CwAccountAddr
];
/**
 * Decodes a protobuf CreateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCreateDeployment}
 */
export declare const decodeAkashDeploymentMsgCreateDeployment: (atu8_payload: Uint8Array) => DecodedAkashDeploymentMsgCreateDeployment;
/**
 * A decoded protobuf CreateDeployment message
 *
 * Tuple where:
 */
export type DecodedAkashDeploymentMsgCreateDeploymentResponse = [];
/**
 * Decodes a protobuf CreateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCreateDeploymentResponse}
 */
export declare const decodeAkashDeploymentMsgCreateDeploymentResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf DepositDeployment message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: amount -
 *   - 2: depositor - Depositor pays for the deposit
 */
export type DecodedAkashDeploymentMsgDepositDeployment = [
    a_id?: DecodedAkashDeploymentDeploymentID,
    a_amount?: [
        string,
        string
    ],
    sa_depositor?: CwAccountAddr
];
/**
 * Decodes a protobuf DepositDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgDepositDeployment}
 */
export declare const decodeAkashDeploymentMsgDepositDeployment: (atu8_payload: Uint8Array) => DecodedAkashDeploymentMsgDepositDeployment;
/**
 * A decoded protobuf DepositDeployment message
 *
 * Tuple where:
 */
export type DecodedAkashDeploymentMsgDepositDeploymentResponse = [];
/**
 * Decodes a protobuf DepositDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgDepositDeploymentResponse}
 */
export declare const decodeAkashDeploymentMsgDepositDeploymentResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateDeployment message
 *
 * Tuple where:
 *   - 0: id -
 *   - 2: version -
 */
export type DecodedAkashDeploymentMsgUpdateDeployment = [
    a_id?: DecodedAkashDeploymentDeploymentID,
    w_0?: undefined,
    atu8_version?: Uint8Array
];
/**
 * Decodes a protobuf UpdateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAkashDeploymentMsgUpdateDeployment}
 */
export declare const decodeAkashDeploymentMsgUpdateDeployment: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAkashDeploymentMsgUpdateDeployment;
/**
 * A decoded protobuf UpdateDeployment message
 *
 * Tuple where:
 */
export type DecodedAkashDeploymentMsgUpdateDeploymentResponse = [];
/**
 * Decodes a protobuf UpdateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgUpdateDeploymentResponse}
 */
export declare const decodeAkashDeploymentMsgUpdateDeploymentResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf CloseDeployment message
 *
 * Alias for: id -
 */
export type DecodedAkashDeploymentMsgCloseDeployment = [
    a_id?: DecodedAkashDeploymentDeploymentID
];
/**
 * Decodes a protobuf CloseDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCloseDeployment}
 */
export declare const decodeAkashDeploymentMsgCloseDeployment: (atu8_payload: Uint8Array) => DecodedAkashDeploymentMsgCloseDeployment;
/**
 * A decoded protobuf CloseDeployment message
 *
 * Tuple where:
 */
export type DecodedAkashDeploymentMsgCloseDeploymentResponse = [];
/**
 * Decodes a protobuf CloseDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCloseDeploymentResponse}
 */
export declare const decodeAkashDeploymentMsgCloseDeploymentResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCreateDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: groups -
 *   - 2: version -
 *   - 3: deposit -
 *   - 4: depositor - Depositor pays for the deposit
 */
export declare const destructAkashDeploymentMsgCreateDeployment: (g_struct: AkashDeploymentMsgCreateDeployment) => [id?: AkashDeploymentDeploymentID, groups?: AkashDeploymentGroupSpec[], version?: Uint8Array, deposit?: CosmosBaseCoin, depositor?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CREATE_DEPLOYMENT = "/akash.deployment.v1beta3.MsgCreateDeployment";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgCreateDeployment` - defines an SDK message for creating deployment
 */
export type AkashDeploymentMsgCreateDeployment = {
    id?: AkashDeploymentDeploymentID | undefined;
    groups?: AkashDeploymentGroupSpec[] | undefined;
    version?: CwBase64 | undefined;
    deposit?: CosmosBaseCoin | undefined;
    depositor?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCreateDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAkashDeploymentMsgCreateDeploymentResponse: (g_struct: AkashDeploymentMsgCreateDeploymentResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CREATE_DEPLOYMENT_RESPONSE = "/akash.deployment.v1beta3.MsgCreateDeploymentResponse";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgCreateDeploymentResponse` - defines the Msg/CreateDeployment response type.
 */
export type AkashDeploymentMsgCreateDeploymentResponse = {};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgDepositDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: amount -
 *   - 2: depositor - Depositor pays for the deposit
 */
export declare const destructAkashDeploymentMsgDepositDeployment: (g_struct: AkashDeploymentMsgDepositDeployment) => [id?: AkashDeploymentDeploymentID, amount?: CosmosBaseCoin, depositor?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_DEPOSIT_DEPLOYMENT = "/akash.deployment.v1beta3.MsgDepositDeployment";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgDepositDeployment` - deposits more funds into the deposit account
 */
export type AkashDeploymentMsgDepositDeployment = {
    id?: AkashDeploymentDeploymentID | undefined;
    amount?: CosmosBaseCoin | undefined;
    depositor?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgDepositDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAkashDeploymentMsgDepositDeploymentResponse: (g_struct: AkashDeploymentMsgDepositDeploymentResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_DEPOSIT_DEPLOYMENT_RESPONSE = "/akash.deployment.v1beta3.MsgDepositDeploymentResponse";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgDepositDeploymentResponse` - MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type.
 */
export type AkashDeploymentMsgDepositDeploymentResponse = {};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgUpdateDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 2: version -
 */
export declare const destructAkashDeploymentMsgUpdateDeployment: (g_struct: AkashDeploymentMsgUpdateDeployment) => [id?: AkashDeploymentDeploymentID, EMPTY?: void, version?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_UPDATE_DEPLOYMENT = "/akash.deployment.v1beta3.MsgUpdateDeployment";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgUpdateDeployment` - defines an SDK message for updating deployment
 */
export type AkashDeploymentMsgUpdateDeployment = {
    id?: AkashDeploymentDeploymentID | undefined;
    version?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgUpdateDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAkashDeploymentMsgUpdateDeploymentResponse: (g_struct: AkashDeploymentMsgUpdateDeploymentResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_UPDATE_DEPLOYMENT_RESPONSE = "/akash.deployment.v1beta3.MsgUpdateDeploymentResponse";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgUpdateDeploymentResponse` - defines the Msg/UpdateDeployment response type.
 */
export type AkashDeploymentMsgUpdateDeploymentResponse = {};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCloseDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAkashDeploymentMsgCloseDeployment: (g_struct: AkashDeploymentMsgCloseDeployment) => [id?: AkashDeploymentDeploymentID];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CLOSE_DEPLOYMENT = "/akash.deployment.v1beta3.MsgCloseDeployment";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgCloseDeployment` - defines an SDK message for closing deployment
 */
export type AkashDeploymentMsgCloseDeployment = {
    id?: AkashDeploymentDeploymentID | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCloseDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAkashDeploymentMsgCloseDeploymentResponse: (g_struct: AkashDeploymentMsgCloseDeploymentResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CLOSE_DEPLOYMENT_RESPONSE = "/akash.deployment.v1beta3.MsgCloseDeploymentResponse";
/**
 * JSON serialization of `akash.deployment.v1beta3.MsgCloseDeploymentResponse` - defines the Msg/CloseDeployment response type.
 */
export type AkashDeploymentMsgCloseDeploymentResponse = {};
