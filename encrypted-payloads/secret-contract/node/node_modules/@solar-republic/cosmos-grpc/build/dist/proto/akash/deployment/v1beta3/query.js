/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeAkashDeploymentDeploymentFilters, decodeAkashDeploymentDeploymentID, decodeAkashDeploymentDeployment } from './deployment.js';
import { decodeAkashDeploymentGroup } from './group.js';
import { decodeAkashDeploymentGroupID } from './groupid.js';
import { decodeAkashEscrowAccount } from '../../escrow/v1beta3/types.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
const SR_LCD_AKASH_DEPLOYMENT_QUERY = '/akash/deployment/v1beta3/';
/**
 * Queries deployments
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_filters -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: deployments - the 'deployments' response property
 *   - 1: pagination - the 'deployments' response property
 */
export const queryAkashDeploymentDeployments = restful_grpc((g_filters, g_pagination) => [SR_LCD_AKASH_DEPLOYMENT_QUERY + 'deployments/list', {
        filters: g_filters,
        pagination: g_pagination,
    }]);
/**
 * Queries deployment details
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_id -
 * @returns a tuple where:
 *   - 0: deployment - the 'deployment' response property
 *   - 1: groups - the 'deployment' response property
 *   - 2: escrow_account - the 'deployment' response property
 */
export const queryAkashDeploymentDeployment = restful_grpc(g_id => [SR_LCD_AKASH_DEPLOYMENT_QUERY + 'deployments/info', {
        id: g_id,
    }]);
/**
 * Queries group details
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_id -
 * @returns a tuple where:
 *   - 0: group - the 'group' response property
 */
export const queryAkashDeploymentGroup = restful_grpc(g_id => [SR_LCD_AKASH_DEPLOYMENT_QUERY + 'groups/info', {
        id: g_id,
    }]);
/**
 * Encodes a `QueryDeploymentsRequest` protobuf message: request type for the Query/Deployments RPC method
 * @param g_filters - `filters`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentQueryDeploymentsRequest = (atu8_filters, atu8_pagination) => Protobuf() // ...
    .b(atu8_filters) // DeploymentFilters filters = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryDeploymentsResponse` protobuf message: response type for the Query/Deployments RPC method
 * @param a_deployments - `deployments`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentQueryDeploymentsResponse = (a_deployments, atu8_pagination) => Protobuf() // ...
    .B(a_deployments) // QueryDeploymentResponse[] deployments = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDeploymentRequest` protobuf message: request type for the Query/Deployment RPC method
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentQueryDeploymentRequest = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // DeploymentID id = 1
    .o;
/**
 * Encodes a `QueryDeploymentResponse` protobuf message: response type for the Query/Deployment RPC method
 * @param g_deployment - `deployment`:
 * @param a_groups - `groups`:
 * @param g_escrow_account - `escrow_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentQueryDeploymentResponse = (atu8_deployment, a_groups, atu8_escrow_account) => Protobuf() // ...
    .b(atu8_deployment) // Deployment deployment = 1
    .B(a_groups) // Group[] groups = 2
    .b(atu8_escrow_account) // Account escrow_account = 3
    .o;
/**
 * Encodes a `QueryGroupRequest` protobuf message: request type for the Query/Group RPC method
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentQueryGroupRequest = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // GroupID id = 1
    .o;
/**
 * Encodes a `QueryGroupResponse` protobuf message: response type for the Query/Group RPC method
 * @param g_group - `group`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentQueryGroupResponse = (atu8_group) => Protobuf() // ...
    .b(atu8_group) // Group group = 1
    .o;
/**
 * Decodes a protobuf QueryDeploymentsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentsRequest}
 */
export const decodeAkashDeploymentQueryDeploymentsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeAkashDeploymentDeploymentFilters, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDeployments message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentsResponse}
 */
export const decodeAkashDeploymentQueryDeploymentsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeAkashDeploymentQueryDeploymentResponse, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDeploymentRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentRequest}
 */
export const decodeAkashDeploymentQueryDeploymentRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentDeploymentID]);
/**
 * Decodes a protobuf QueryDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentResponse}
 */
export const decodeAkashDeploymentQueryDeploymentResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 1], [decodeAkashDeploymentDeployment, decodeAkashDeploymentGroup, decodeAkashEscrowAccount]);
/**
 * Decodes a protobuf QueryGroupRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryGroupRequest}
 */
export const decodeAkashDeploymentQueryGroupRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentGroupID]);
/**
 * Decodes a protobuf QueryGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryGroupResponse}
 */
export const decodeAkashDeploymentQueryGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentGroup]);
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: filters -
 *   - 1: pagination -
 */
export const destructAkashDeploymentQueryDeploymentsRequest = (g_struct) => [g_struct.filters, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENTS_REQUEST = '/akash.deployment.v1beta3.QueryDeploymentsRequest';
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployments -
 *   - 1: pagination -
 */
export const destructAkashDeploymentQueryDeploymentsResponse = (g_struct) => [g_struct.deployments, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENTS_RESPONSE = '/akash.deployment.v1beta3.QueryDeploymentsResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployment -
 *   - 1: groups -
 *   - 2: escrow_account -
 */
export const destructAkashDeploymentQueryDeploymentResponse = (g_struct) => [g_struct.deployment, g_struct.groups, g_struct.escrow_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENT_RESPONSE = '/akash.deployment.v1beta3.QueryDeploymentResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashDeploymentQueryDeploymentRequest = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENT_REQUEST = '/akash.deployment.v1beta3.QueryDeploymentRequest';
/**
 * Destructures the fields of a {@link AkashDeploymentQueryGroupRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashDeploymentQueryGroupRequest = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_GROUP_REQUEST = '/akash.deployment.v1beta3.QueryGroupRequest';
/**
 * Destructures the fields of a {@link AkashDeploymentQueryGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group -
 */
export const destructAkashDeploymentQueryGroupResponse = (g_struct) => [g_struct.group];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_GROUP_RESPONSE = '/akash.deployment.v1beta3.QueryGroupResponse';
//# sourceMappingURL=query.js.map