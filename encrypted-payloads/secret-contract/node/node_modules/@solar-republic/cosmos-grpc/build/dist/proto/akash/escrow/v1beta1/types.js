import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `AccountID` protobuf message: the account identifier
 * @param s_scope - `scope`:
 * @param s_xid - `xid`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowAccountID = (s_scope, s_xid) => Protobuf() // ...
    .s(s_scope) // string scope = 1
    .s(s_xid) // string xid = 2
    .o;
/**
 * Encodes a `Account` protobuf message: stores state for an escrow account
 * @param g_id - `id`: unique identifier for this escrow account
 * @param sa_owner - `owner`: bech32 encoded account address of the owner of this escrow account
 * @param xc_state - `state`: current state of this escrow account
 * @param a_balance - `balance`: unspent coins received from the owner's wallet
 * @param a_transferred - `transferred`: total coins spent by this account
 * @param sg_settled_at - `settled_at`: block height at which this account was last settled
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowAccount = (atu8_id, sa_owner, xc_state, a_balance, a_transferred, sg_settled_at) => Protobuf() // ...
    .b(atu8_id) // AccountID id = 1
    .s(sa_owner) // string owner = 2
    .v(xc_state) // State state = 3
    .b(coin(a_balance)) // Coin balance = 4
    .b(coin(a_transferred)) // Coin transferred = 5
    .g(sg_settled_at) // int32 settled_at = 6
    .o;
/**
 * Encodes a `Payment` protobuf message: stores state for a payment
 * @param g_account_id - `account_id`:
 * @param si_payment - `payment_id`:
 * @param sa_owner - `owner`:
 * @param xc_state - `state`:
 * @param a_rate - `rate`:
 * @param a_balance - `balance`:
 * @param a_withdrawn - `withdrawn`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowPayment = (atu8_account_id, si_payment, sa_owner, xc_state, a_rate, a_balance, a_withdrawn) => Protobuf() // ...
    .b(atu8_account_id) // AccountID account_id = 1
    .s(si_payment) // string payment_id = 2
    .s(sa_owner) // string owner = 3
    .v(xc_state) // State state = 4
    .b(coin(a_rate)) // Coin rate = 5
    .b(coin(a_balance)) // Coin balance = 6
    .b(coin(a_withdrawn)) // Coin withdrawn = 7
    .o;
/**
 * Decodes a protobuf AccountID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowAccountID}
 */
export const decodeAkashEscrowAccountID = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf Account message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowAccount}
 */
export const decodeAkashEscrowAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1, 1, 3], [decodeAkashEscrowAccountID, 0, 0, decode_coin, decode_coin]);
/**
 * Decodes a protobuf Payment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowPayment}
 */
export const decodeAkashEscrowPayment = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 1, 1, 1, 1], [decodeAkashEscrowAccountID, 0, 0, 0, decode_coin, decode_coin, decode_coin]);
/**
 * Destructures the fields of a {@link AkashEscrowAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - unique identifier for this escrow account
 *   - 1: owner - bech32 encoded account address of the owner of this escrow account
 *   - 2: state - current state of this escrow account
 *   - 3: balance - unspent coins received from the owner's wallet
 *   - 4: transferred - total coins spent by this account
 *   - 5: settled_at - block height at which this account was last settled
 */
export const destructAkashEscrowAccount = (g_struct) => [g_struct.id, g_struct.owner, g_struct.state, g_struct.balance, g_struct.transferred, g_struct.settled_at];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_ACCOUNT = '/akash.escrow.v1beta1.Account';
/**
 * Destructures the fields of a {@link AkashEscrowAccountID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: scope -
 *   - 1: xid -
 */
export const destructAkashEscrowAccountID = (g_struct) => [g_struct.scope, g_struct.xid];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_ACCOUNT_I_D = '/akash.escrow.v1beta1.AccountID';
/**
 * Destructures the fields of a {@link AkashEscrowPayment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account_id -
 *   - 1: payment_id -
 *   - 2: owner -
 *   - 3: state -
 *   - 4: rate -
 *   - 5: balance -
 *   - 6: withdrawn -
 */
export const destructAkashEscrowPayment = (g_struct) => [g_struct.account_id, g_struct.payment_id, g_struct.owner, g_struct.state, g_struct.rate, g_struct.balance, g_struct.withdrawn];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_PAYMENT = '/akash.escrow.v1beta1.Payment';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export const XC_PROTO_AKASH_ESCROW_ACCOUNT_invalid = 0;
/**
 * JSON enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export const SI_JSON_AKASH_ESCROW_ACCOUNT_invalid = 'AccountStateInvalid';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export const XC_PROTO_AKASH_ESCROW_ACCOUNT_open = 1;
/**
 * JSON enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export const SI_JSON_AKASH_ESCROW_ACCOUNT_open = 'AccountOpen';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export const XC_PROTO_AKASH_ESCROW_ACCOUNT_closed = 2;
/**
 * JSON enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export const SI_JSON_AKASH_ESCROW_ACCOUNT_closed = 'AccountClosed';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export const XC_PROTO_AKASH_ESCROW_ACCOUNT_overdrawn = 3;
/**
 * JSON enum value for `akash.escrow.v1beta1.Account.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export const SI_JSON_AKASH_ESCROW_ACCOUNT_overdrawn = 'AccountOverdrawn';
/**
 * Maps a protobuf enum int value for `akash.escrow.v1beta1.Account.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAkashEscrowAccountState = {
    [XC_PROTO_AKASH_ESCROW_ACCOUNT_invalid]: SI_JSON_AKASH_ESCROW_ACCOUNT_invalid,
    [XC_PROTO_AKASH_ESCROW_ACCOUNT_open]: SI_JSON_AKASH_ESCROW_ACCOUNT_open,
    [XC_PROTO_AKASH_ESCROW_ACCOUNT_closed]: SI_JSON_AKASH_ESCROW_ACCOUNT_closed,
    [XC_PROTO_AKASH_ESCROW_ACCOUNT_overdrawn]: SI_JSON_AKASH_ESCROW_ACCOUNT_overdrawn,
};
/**
 * Maps a JSON enum string value for `akash.escrow.v1beta1.Account.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAkashEscrowAccountState = {
    [SI_JSON_AKASH_ESCROW_ACCOUNT_invalid]: XC_PROTO_AKASH_ESCROW_ACCOUNT_invalid,
    [SI_JSON_AKASH_ESCROW_ACCOUNT_open]: XC_PROTO_AKASH_ESCROW_ACCOUNT_open,
    [SI_JSON_AKASH_ESCROW_ACCOUNT_closed]: XC_PROTO_AKASH_ESCROW_ACCOUNT_closed,
    [SI_JSON_AKASH_ESCROW_ACCOUNT_overdrawn]: XC_PROTO_AKASH_ESCROW_ACCOUNT_overdrawn,
};
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowPaymentState}
 */
export const XC_PROTO_AKASH_ESCROW_PAYMENT_invalid = 0;
/**
 * JSON enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowPaymentState}
 */
export const SI_JSON_AKASH_ESCROW_PAYMENT_invalid = 'PaymentStateInvalid';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowPaymentState}
 */
export const XC_PROTO_AKASH_ESCROW_PAYMENT_open = 1;
/**
 * JSON enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowPaymentState}
 */
export const SI_JSON_AKASH_ESCROW_PAYMENT_open = 'PaymentOpen';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowPaymentState}
 */
export const XC_PROTO_AKASH_ESCROW_PAYMENT_closed = 2;
/**
 * JSON enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowPaymentState}
 */
export const SI_JSON_AKASH_ESCROW_PAYMENT_closed = 'PaymentClosed';
/**
 * Protobuf enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowPaymentState}
 */
export const XC_PROTO_AKASH_ESCROW_PAYMENT_overdrawn = 3;
/**
 * JSON enum value for `akash.escrow.v1beta1.Payment.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowPaymentState}
 */
export const SI_JSON_AKASH_ESCROW_PAYMENT_overdrawn = 'PaymentOverdrawn';
/**
 * Maps a protobuf enum int value for `akash.escrow.v1beta1.Payment.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAkashEscrowPaymentState = {
    [XC_PROTO_AKASH_ESCROW_PAYMENT_invalid]: SI_JSON_AKASH_ESCROW_PAYMENT_invalid,
    [XC_PROTO_AKASH_ESCROW_PAYMENT_open]: SI_JSON_AKASH_ESCROW_PAYMENT_open,
    [XC_PROTO_AKASH_ESCROW_PAYMENT_closed]: SI_JSON_AKASH_ESCROW_PAYMENT_closed,
    [XC_PROTO_AKASH_ESCROW_PAYMENT_overdrawn]: SI_JSON_AKASH_ESCROW_PAYMENT_overdrawn,
};
/**
 * Maps a JSON enum string value for `akash.escrow.v1beta1.Payment.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAkashEscrowPaymentState = {
    [SI_JSON_AKASH_ESCROW_PAYMENT_invalid]: XC_PROTO_AKASH_ESCROW_PAYMENT_invalid,
    [SI_JSON_AKASH_ESCROW_PAYMENT_open]: XC_PROTO_AKASH_ESCROW_PAYMENT_open,
    [SI_JSON_AKASH_ESCROW_PAYMENT_closed]: XC_PROTO_AKASH_ESCROW_PAYMENT_closed,
    [SI_JSON_AKASH_ESCROW_PAYMENT_overdrawn]: XC_PROTO_AKASH_ESCROW_PAYMENT_overdrawn,
};
//# sourceMappingURL=types.js.map