import type { WeakInt64Str, WeakAccountAddr, SlimCoin, CwInt64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin, CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAkashEscrowAccountID = Encoded<'/akash.escrow.v1beta2.AccountID'>;
export type EncodedAkashEscrowAccount = Encoded<'/akash.escrow.v1beta2.Account'>;
export type EncodedAkashEscrowFractionalPayment = Encoded<'/akash.escrow.v1beta2.FractionalPayment'>;
/**
 * Encodes a `AccountID` protobuf message: the account identifier
 * @param s_scope - `scope`:
 * @param s_xid - `xid`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashEscrowAccountID: (s_scope?: Opt<string>, s_xid?: Opt<string>) => EncodedAkashEscrowAccountID;
/**
 * Encodes a `Account` protobuf message: stores state for an escrow account
 * @param g_id - `id`: unique identifier for this escrow account
 * @param sa_owner - `owner`: bech32 encoded account address of the owner of this escrow account
 * @param xc_state - `state`: current state of this escrow account
 * @param g_balance - `balance`: unspent coins received from the owner's wallet
 * @param g_transferred - `transferred`: total coins spent by this account
 * @param sg_settled_at - `settled_at`: block height at which this account was last settled
 * @param sa_depositor - `depositor`: bech32 encoded account address of the depositor. If depositor is same as the owner, then any incoming coins are added to the Balance. If depositor isn't same as the owner, then any incoming coins are added to the Funds.
 * @param g_funds - `funds`: Funds are unspent coins received from the (non-Owner) Depositor's wallet. If there are any funds, they should be spent before spending the Balance.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashEscrowAccount: (atu8_id?: Opt<Encoded<'/akash.escrow.v1beta2.AccountID'>>, sa_owner?: Opt<WeakAccountAddr>, xc_state?: Opt<ProtoEnumAkashEscrowAccountState>, atu8_balance?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>>, atu8_transferred?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>>, sg_settled_at?: Opt<WeakInt64Str>, sa_depositor?: Opt<WeakAccountAddr>, atu8_funds?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>>) => EncodedAkashEscrowAccount;
/**
 * Encodes a `FractionalPayment` protobuf message: Payment stores state for a payment
 * @param g_account_id - `account_id`:
 * @param si_payment - `payment_id`:
 * @param sa_owner - `owner`:
 * @param xc_state - `state`:
 * @param g_rate - `rate`:
 * @param g_balance - `balance`:
 * @param a_withdrawn - `withdrawn`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashEscrowFractionalPayment: (atu8_account_id?: Opt<Encoded<'/akash.escrow.v1beta2.AccountID'>>, si_payment?: Opt<string>, sa_owner?: Opt<WeakAccountAddr>, xc_state?: Opt<ProtoEnumAkashEscrowFractionalPaymentState>, atu8_rate?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>>, atu8_balance?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>>, a_withdrawn?: Opt<SlimCoin>) => EncodedAkashEscrowFractionalPayment;
/**
 * A decoded protobuf AccountID message
 *
 * Tuple where:
 *   - 0: scope -
 *   - 1: xid -
 */
export type DecodedAkashEscrowAccountID = [
    s_scope?: string,
    s_xid?: string
];
/**
 * Decodes a protobuf AccountID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowAccountID}
 */
export declare const decodeAkashEscrowAccountID: (atu8_payload: Uint8Array) => DecodedAkashEscrowAccountID;
/**
 * A decoded protobuf Account message
 *
 * Tuple where:
 *   - 0: id - unique identifier for this escrow account
 *   - 1: owner - bech32 encoded account address of the owner of this escrow account
 *   - 2: state - current state of this escrow account
 *   - 3: balance - unspent coins received from the owner's wallet
 *   - 4: transferred - total coins spent by this account
 *   - 5: settled_at - block height at which this account was last settled
 *   - 6: depositor - bech32 encoded account address of the depositor. If depositor is same as the owner, then any incoming coins are added to the Balance. If depositor isn't same as the owner, then any incoming coins are added to the Funds.
 *   - 7: funds - Funds are unspent coins received from the (non-Owner) Depositor's wallet. If there are any funds, they should be spent before spending the Balance.
 */
export type DecodedAkashEscrowAccount = [
    a_id?: DecodedAkashEscrowAccountID,
    sa_owner?: CwAccountAddr,
    xc_state?: ProtoEnumAkashEscrowAccountState,
    a_balance?: DecodedCosmosBaseDecCoin,
    a_transferred?: DecodedCosmosBaseDecCoin,
    sg_settled_at?: CwInt64,
    sa_depositor?: CwAccountAddr,
    a_funds?: DecodedCosmosBaseDecCoin
];
/**
 * Decodes a protobuf Account message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowAccount}
 */
export declare const decodeAkashEscrowAccount: (atu8_payload: Uint8Array) => DecodedAkashEscrowAccount;
/**
 * A decoded protobuf FractionalPayment message
 *
 * Tuple where:
 *   - 0: account_id -
 *   - 1: payment_id -
 *   - 2: owner -
 *   - 3: state -
 *   - 4: rate -
 *   - 5: balance -
 *   - 6: withdrawn -
 */
export type DecodedAkashEscrowFractionalPayment = [
    a_account_id?: DecodedAkashEscrowAccountID,
    si_payment?: string,
    sa_owner?: CwAccountAddr,
    xc_state?: ProtoEnumAkashEscrowFractionalPaymentState,
    a_rate?: DecodedCosmosBaseDecCoin,
    a_balance?: DecodedCosmosBaseDecCoin,
    a_withdrawn?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf FractionalPayment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowFractionalPayment}
 */
export declare const decodeAkashEscrowFractionalPayment: (atu8_payload: Uint8Array) => DecodedAkashEscrowFractionalPayment;
/**
 * Destructures the fields of a {@link AkashEscrowAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - unique identifier for this escrow account
 *   - 1: owner - bech32 encoded account address of the owner of this escrow account
 *   - 2: state - current state of this escrow account
 *   - 3: balance - unspent coins received from the owner's wallet
 *   - 4: transferred - total coins spent by this account
 *   - 5: settled_at - block height at which this account was last settled
 *   - 6: depositor - bech32 encoded account address of the depositor. If depositor is same as the owner, then any incoming coins are added to the Balance. If depositor isn't same as the owner, then any incoming coins are added to the Funds.
 *   - 7: funds - Funds are unspent coins received from the (non-Owner) Depositor's wallet. If there are any funds, they should be spent before spending the Balance.
 */
export declare const destructAkashEscrowAccount: (g_struct: AkashEscrowAccount) => [id?: AkashEscrowAccountID, owner?: CwAccountAddr, state?: JsonEnumAkashEscrowAccountState, balance?: CosmosBaseDecCoin, transferred?: CosmosBaseDecCoin, settled_at?: CwInt64, depositor?: CwAccountAddr, funds?: CosmosBaseDecCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_ESCROW_ACCOUNT = "/akash.escrow.v1beta2.Account";
/**
 * JSON serialization of `akash.escrow.v1beta2.Account` - stores state for an escrow account
 */
export type AkashEscrowAccount = {
    id?: AkashEscrowAccountID | undefined;
    owner?: CwAccountAddr | undefined;
    state?: JsonEnumAkashEscrowAccountState | undefined;
    balance?: CosmosBaseDecCoin | undefined;
    transferred?: CosmosBaseDecCoin | undefined;
    settled_at?: CwInt64 | undefined;
    depositor?: CwAccountAddr | undefined;
    funds?: CosmosBaseDecCoin | undefined;
};
/**
 * Destructures the fields of a {@link AkashEscrowAccountID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: scope -
 *   - 1: xid -
 */
export declare const destructAkashEscrowAccountID: (g_struct: AkashEscrowAccountID) => [scope?: string, xid?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_ESCROW_ACCOUNT_I_D = "/akash.escrow.v1beta2.AccountID";
/**
 * JSON serialization of `akash.escrow.v1beta2.AccountID` - the account identifier
 */
export type AkashEscrowAccountID = {
    scope?: string | undefined;
    xid?: string | undefined;
};
/**
 * Destructures the fields of a {@link AkashEscrowFractionalPayment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account_id -
 *   - 1: payment_id -
 *   - 2: owner -
 *   - 3: state -
 *   - 4: rate -
 *   - 5: balance -
 *   - 6: withdrawn -
 */
export declare const destructAkashEscrowFractionalPayment: (g_struct: AkashEscrowFractionalPayment) => [account_id?: AkashEscrowAccountID, payment_id?: string, owner?: CwAccountAddr, state?: JsonEnumAkashEscrowFractionalPaymentState, rate?: CosmosBaseDecCoin, balance?: CosmosBaseDecCoin, withdrawn?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_ESCROW_FRACTIONAL_PAYMENT = "/akash.escrow.v1beta2.FractionalPayment";
/**
 * JSON serialization of `akash.escrow.v1beta2.FractionalPayment` - Payment stores state for a payment
 */
export type AkashEscrowFractionalPayment = {
    account_id?: AkashEscrowAccountID | undefined;
    payment_id?: string | undefined;
    owner?: CwAccountAddr | undefined;
    state?: JsonEnumAkashEscrowFractionalPaymentState | undefined;
    rate?: CosmosBaseDecCoin | undefined;
    balance?: CosmosBaseDecCoin | undefined;
    withdrawn?: CosmosBaseCoin | undefined;
};
/**
 * Protobuf enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export declare const XC_PROTO_AKASH_ESCROW_ACCOUNT_invalid = 0;
/**
 * JSON enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export declare const SI_JSON_AKASH_ESCROW_ACCOUNT_invalid = "AccountStateInvalid";
/**
 * Protobuf enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export declare const XC_PROTO_AKASH_ESCROW_ACCOUNT_open = 1;
/**
 * JSON enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export declare const SI_JSON_AKASH_ESCROW_ACCOUNT_open = "AccountOpen";
/**
 * Protobuf enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export declare const XC_PROTO_AKASH_ESCROW_ACCOUNT_closed = 2;
/**
 * JSON enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export declare const SI_JSON_AKASH_ESCROW_ACCOUNT_closed = "AccountClosed";
/**
 * Protobuf enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowAccountState}
 */
export declare const XC_PROTO_AKASH_ESCROW_ACCOUNT_overdrawn = 3;
/**
 * JSON enum value for `akash.escrow.v1beta2.Account.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowAccountState}
 */
export declare const SI_JSON_AKASH_ESCROW_ACCOUNT_overdrawn = "AccountOverdrawn";
/**
 * Raw protobuf enum values for `akash.escrow.v1beta2.Account.State` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AKASH_ESCROW_ACCOUNT_invalid}
 *   - {@link XC_PROTO_AKASH_ESCROW_ACCOUNT_open}
 *   - {@link XC_PROTO_AKASH_ESCROW_ACCOUNT_closed}
 *   - {@link XC_PROTO_AKASH_ESCROW_ACCOUNT_overdrawn}
 */
export type ProtoEnumAkashEscrowAccountState = typeof XC_PROTO_AKASH_ESCROW_ACCOUNT_invalid | typeof XC_PROTO_AKASH_ESCROW_ACCOUNT_open | typeof XC_PROTO_AKASH_ESCROW_ACCOUNT_closed | typeof XC_PROTO_AKASH_ESCROW_ACCOUNT_overdrawn;
/**
 * JSON enum values for `akash.escrow.v1beta2.Account.State` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AKASH_ESCROW_ACCOUNT_invalid}
 *   - {@link SI_JSON_AKASH_ESCROW_ACCOUNT_open}
 *   - {@link SI_JSON_AKASH_ESCROW_ACCOUNT_closed}
 *   - {@link SI_JSON_AKASH_ESCROW_ACCOUNT_overdrawn}
 */
export type JsonEnumAkashEscrowAccountState = typeof SI_JSON_AKASH_ESCROW_ACCOUNT_invalid | typeof SI_JSON_AKASH_ESCROW_ACCOUNT_open | typeof SI_JSON_AKASH_ESCROW_ACCOUNT_closed | typeof SI_JSON_AKASH_ESCROW_ACCOUNT_overdrawn;
/**
 * Maps a protobuf enum int value for `akash.escrow.v1beta2.Account.State` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAkashEscrowAccountState: Record<ProtoEnumAkashEscrowAccountState, JsonEnumAkashEscrowAccountState>;
/**
 * Maps a JSON enum string value for `akash.escrow.v1beta2.Account.State` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAkashEscrowAccountState: Record<JsonEnumAkashEscrowAccountState, ProtoEnumAkashEscrowAccountState>;
/**
 * Protobuf enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowFractionalPaymentState}
 */
export declare const XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_invalid = 0;
/**
 * JSON enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowFractionalPaymentState}
 */
export declare const SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_invalid = "PaymentStateInvalid";
/**
 * Protobuf enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowFractionalPaymentState}
 */
export declare const XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_open = 1;
/**
 * JSON enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowFractionalPaymentState}
 */
export declare const SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_open = "PaymentOpen";
/**
 * Protobuf enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowFractionalPaymentState}
 */
export declare const XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_closed = 2;
/**
 * JSON enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowFractionalPaymentState}
 */
export declare const SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_closed = "PaymentClosed";
/**
 * Protobuf enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link ProtoEnumAkashEscrowFractionalPaymentState}
 */
export declare const XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_overdrawn = 3;
/**
 * JSON enum value for `akash.escrow.v1beta2.FractionalPayment.State`.
 *
 * **overdrawn** -
 *
 * Belongs to enum type {@link JsonEnumAkashEscrowFractionalPaymentState}
 */
export declare const SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_overdrawn = "PaymentOverdrawn";
/**
 * Raw protobuf enum values for `akash.escrow.v1beta2.FractionalPayment.State` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_invalid}
 *   - {@link XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_open}
 *   - {@link XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_closed}
 *   - {@link XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_overdrawn}
 */
export type ProtoEnumAkashEscrowFractionalPaymentState = typeof XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_invalid | typeof XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_open | typeof XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_closed | typeof XC_PROTO_AKASH_ESCROW_FRACTIONAL_PAYMENT_overdrawn;
/**
 * JSON enum values for `akash.escrow.v1beta2.FractionalPayment.State` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_invalid}
 *   - {@link SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_open}
 *   - {@link SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_closed}
 *   - {@link SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_overdrawn}
 */
export type JsonEnumAkashEscrowFractionalPaymentState = typeof SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_invalid | typeof SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_open | typeof SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_closed | typeof SI_JSON_AKASH_ESCROW_FRACTIONAL_PAYMENT_overdrawn;
/**
 * Maps a protobuf enum int value for `akash.escrow.v1beta2.FractionalPayment.State` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAkashEscrowFractionalPaymentState: Record<ProtoEnumAkashEscrowFractionalPaymentState, JsonEnumAkashEscrowFractionalPaymentState>;
/**
 * Maps a JSON enum string value for `akash.escrow.v1beta2.FractionalPayment.State` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAkashEscrowFractionalPaymentState: Record<JsonEnumAkashEscrowFractionalPaymentState, ProtoEnumAkashEscrowFractionalPaymentState>;
