import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAkashMarketBidID } from './bid.js';
import { decodeCosmosBaseDecCoin } from '../../../cosmos/base/v1beta1/coin.js';
/**
 * Encodes a `MsgWithdrawLease` protobuf message: defines an SDK message for closing bid
 * @param g_bid_id - `bid_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketMsgWithdrawLease = (atu8_bid_id) => Protobuf() // ...
    .b(atu8_bid_id) // LeaseID bid_id = 1
    .o;
/**
 * Encodes a `MsgCreateLease` protobuf message: sent to create a lease
 * @param g_bid_id - `bid_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketMsgCreateLease = (atu8_bid_id) => Protobuf() // ...
    .b(atu8_bid_id) // BidID bid_id = 1
    .o;
/**
 * Encodes a `MsgCloseLease` protobuf message: defines an SDK message for closing order
 * @param g_lease_id - `lease_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketMsgCloseLease = (atu8_lease_id) => Protobuf() // ...
    .b(atu8_lease_id) // LeaseID lease_id = 1
    .o;
/**
 * Encodes a `LeaseID` protobuf message: stores bid details of lease
 * @param sa_owner - `owner`:
 * @param sg_dseq - `dseq`:
 * @param n_gseq - `gseq`:
 * @param n_oseq - `oseq`:
 * @param s_provider - `provider`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketLeaseID = (sa_owner, sg_dseq, n_gseq, n_oseq, s_provider) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_dseq) // uint64 dseq = 2
    .v(n_gseq) // uint32 gseq = 3
    .v(n_oseq) // uint32 oseq = 4
    .s(s_provider) // string provider = 5
    .o;
/**
 * Encodes a `Lease` protobuf message: stores LeaseID, state of lease and price
 * @param g_lease_id - `lease_id`:
 * @param xc_state - `state`:
 * @param g_price - `price`:
 * @param sg_created_at - `created_at`:
 * @param sg_closed_on - `closed_on`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketLease = (atu8_lease_id, xc_state, atu8_price, sg_created_at, sg_closed_on) => Protobuf() // ...
    .b(atu8_lease_id) // LeaseID lease_id = 1
    .v(xc_state) // State state = 2
    .b(atu8_price) // DecCoin price = 3
    .g(sg_created_at) // int32 created_at = 4
    .g(sg_closed_on) // int32 closed_on = 5
    .o;
/**
 * Encodes a `LeaseFilters` protobuf message: defines flags for lease list filter
 * @param sa_owner - `owner`:
 * @param sg_dseq - `dseq`:
 * @param n_gseq - `gseq`:
 * @param n_oseq - `oseq`:
 * @param s_provider - `provider`:
 * @param s_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketLeaseFilters = (sa_owner, sg_dseq, n_gseq, n_oseq, s_provider, s_state) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_dseq) // uint64 dseq = 2
    .v(n_gseq) // uint32 gseq = 3
    .v(n_oseq) // uint32 oseq = 4
    .s(s_provider) // string provider = 5
    .s(s_state) // string state = 6
    .o;
/**
 * Encodes a `MsgCreateLeaseResponse` protobuf message: the response from creating a lease
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketMsgCreateLeaseResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgWithdrawLeaseResponse` protobuf message: defines the Msg/WithdrawLease response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketMsgWithdrawLeaseResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCloseLeaseResponse` protobuf message: defines the Msg/CloseLease response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketMsgCloseLeaseResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf LeaseID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketLeaseID}
 */
export const decodeAkashMarketLeaseID = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1, 1, 5]);
/**
 * Decodes a protobuf Lease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketLease}
 */
export const decodeAkashMarketLease = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 3, 3], [decodeAkashMarketLeaseID, 0, decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf LeaseFilters message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketLeaseFilters}
 */
export const decodeAkashMarketLeaseFilters = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1, 1, 5, 5]);
/**
 * Decodes a protobuf CreateLease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketMsgCreateLease}
 */
export const decodeAkashMarketMsgCreateLease = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashMarketBidID]);
/**
 * Decodes a protobuf CreateLease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketMsgCreateLeaseResponse}
 */
export const decodeAkashMarketMsgCreateLeaseResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf WithdrawLease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketMsgWithdrawLease}
 */
export const decodeAkashMarketMsgWithdrawLease = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashMarketLeaseID]);
/**
 * Decodes a protobuf WithdrawLease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketMsgWithdrawLeaseResponse}
 */
export const decodeAkashMarketMsgWithdrawLeaseResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CloseLease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketMsgCloseLease}
 */
export const decodeAkashMarketMsgCloseLease = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashMarketLeaseID]);
/**
 * Decodes a protobuf CloseLease message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketMsgCloseLeaseResponse}
 */
export const decodeAkashMarketMsgCloseLeaseResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AkashMarketLeaseFilters} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: dseq -
 *   - 2: gseq -
 *   - 3: oseq -
 *   - 4: provider -
 *   - 5: state -
 */
export const destructAkashMarketLeaseFilters = (g_struct) => [g_struct.owner, g_struct.dseq, g_struct.gseq, g_struct.oseq, g_struct.provider, g_struct.state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_LEASE_FILTERS = '/akash.market.v1beta2.LeaseFilters';
/**
 * Destructures the fields of a {@link AkashMarketLease} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lease_id -
 *   - 1: state -
 *   - 2: price -
 *   - 3: created_at -
 *   - 4: closed_on -
 */
export const destructAkashMarketLease = (g_struct) => [g_struct.lease_id, g_struct.state, g_struct.price, g_struct.created_at, g_struct.closed_on];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_LEASE = '/akash.market.v1beta2.Lease';
/**
 * Destructures the fields of a {@link AkashMarketLeaseID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: dseq -
 *   - 2: gseq -
 *   - 3: oseq -
 *   - 4: provider -
 */
export const destructAkashMarketLeaseID = (g_struct) => [g_struct.owner, g_struct.dseq, g_struct.gseq, g_struct.oseq, g_struct.provider];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_LEASE_I_D = '/akash.market.v1beta2.LeaseID';
/**
 * Destructures the fields of a {@link AkashMarketMsgCreateLease} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bid_id -
 */
export const destructAkashMarketMsgCreateLease = (g_struct) => [g_struct.bid_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_MSG_CREATE_LEASE = '/akash.market.v1beta2.MsgCreateLease';
/**
 * Destructures the fields of a {@link AkashMarketMsgCreateLeaseResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashMarketMsgCreateLeaseResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_MSG_CREATE_LEASE_RESPONSE = '/akash.market.v1beta2.MsgCreateLeaseResponse';
/**
 * Destructures the fields of a {@link AkashMarketMsgWithdrawLease} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bid_id -
 */
export const destructAkashMarketMsgWithdrawLease = (g_struct) => [g_struct.bid_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_MSG_WITHDRAW_LEASE = '/akash.market.v1beta2.MsgWithdrawLease';
/**
 * Destructures the fields of a {@link AkashMarketMsgWithdrawLeaseResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashMarketMsgWithdrawLeaseResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_MSG_WITHDRAW_LEASE_RESPONSE = '/akash.market.v1beta2.MsgWithdrawLeaseResponse';
/**
 * Destructures the fields of a {@link AkashMarketMsgCloseLease} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lease_id -
 */
export const destructAkashMarketMsgCloseLease = (g_struct) => [g_struct.lease_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_MSG_CLOSE_LEASE = '/akash.market.v1beta2.MsgCloseLease';
/**
 * Destructures the fields of a {@link AkashMarketMsgCloseLeaseResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashMarketMsgCloseLeaseResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_MSG_CLOSE_LEASE_RESPONSE = '/akash.market.v1beta2.MsgCloseLeaseResponse';
/**
 * Protobuf enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashMarketLeaseState}
 */
export const XC_PROTO_AKASH_MARKET_LEASE_invalid = 0;
/**
 * JSON enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashMarketLeaseState}
 */
export const SI_JSON_AKASH_MARKET_LEASE_invalid = 'LeaseStateInvalid';
/**
 * Protobuf enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **active** -
 *
 * Belongs to enum type {@link ProtoEnumAkashMarketLeaseState}
 */
export const XC_PROTO_AKASH_MARKET_LEASE_active = 1;
/**
 * JSON enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **active** -
 *
 * Belongs to enum type {@link JsonEnumAkashMarketLeaseState}
 */
export const SI_JSON_AKASH_MARKET_LEASE_active = 'LeaseActive';
/**
 * Protobuf enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **insufficient_funds** -
 *
 * Belongs to enum type {@link ProtoEnumAkashMarketLeaseState}
 */
export const XC_PROTO_AKASH_MARKET_LEASE_insufficient_funds = 2;
/**
 * JSON enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **insufficient_funds** -
 *
 * Belongs to enum type {@link JsonEnumAkashMarketLeaseState}
 */
export const SI_JSON_AKASH_MARKET_LEASE_insufficient_funds = 'LeaseInsufficientFunds';
/**
 * Protobuf enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashMarketLeaseState}
 */
export const XC_PROTO_AKASH_MARKET_LEASE_closed = 3;
/**
 * JSON enum value for `akash.market.v1beta2.Lease.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashMarketLeaseState}
 */
export const SI_JSON_AKASH_MARKET_LEASE_closed = 'LeaseClosed';
/**
 * Maps a protobuf enum int value for `akash.market.v1beta2.Lease.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAkashMarketLeaseState = {
    [XC_PROTO_AKASH_MARKET_LEASE_invalid]: SI_JSON_AKASH_MARKET_LEASE_invalid,
    [XC_PROTO_AKASH_MARKET_LEASE_active]: SI_JSON_AKASH_MARKET_LEASE_active,
    [XC_PROTO_AKASH_MARKET_LEASE_insufficient_funds]: SI_JSON_AKASH_MARKET_LEASE_insufficient_funds,
    [XC_PROTO_AKASH_MARKET_LEASE_closed]: SI_JSON_AKASH_MARKET_LEASE_closed,
};
/**
 * Maps a JSON enum string value for `akash.market.v1beta2.Lease.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAkashMarketLeaseState = {
    [SI_JSON_AKASH_MARKET_LEASE_invalid]: XC_PROTO_AKASH_MARKET_LEASE_invalid,
    [SI_JSON_AKASH_MARKET_LEASE_active]: XC_PROTO_AKASH_MARKET_LEASE_active,
    [SI_JSON_AKASH_MARKET_LEASE_insufficient_funds]: XC_PROTO_AKASH_MARKET_LEASE_insufficient_funds,
    [SI_JSON_AKASH_MARKET_LEASE_closed]: XC_PROTO_AKASH_MARKET_LEASE_closed,
};
//# sourceMappingURL=lease.js.map