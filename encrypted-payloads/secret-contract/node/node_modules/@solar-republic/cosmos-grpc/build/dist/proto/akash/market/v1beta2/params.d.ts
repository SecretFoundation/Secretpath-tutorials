import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAkashMarketParams = Encoded<'/akash.market.v1beta2.Params'>;
/**
 * Encodes a `Params` protobuf message: the params for the x/market module
 * @param a_bid_min_deposit - `bid_min_deposit`:
 * @param n_order_max_bids - `order_max_bids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashMarketParams: (a_bid_min_deposit?: Opt<SlimCoin>, n_order_max_bids?: Opt<number>) => EncodedAkashMarketParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: bid_min_deposit -
 *   - 1: order_max_bids -
 */
export type DecodedAkashMarketParams = [
    a_bid_min_deposit?: [
        string,
        string
    ],
    n_order_max_bids?: number
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketParams}
 */
export declare const decodeAkashMarketParams: (atu8_payload: Uint8Array) => DecodedAkashMarketParams;
/**
 * Destructures the fields of a {@link AkashMarketParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bid_min_deposit -
 *   - 1: order_max_bids -
 */
export declare const destructAkashMarketParams: (g_struct: AkashMarketParams) => [bid_min_deposit?: CosmosBaseCoin, order_max_bids?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_MARKET_PARAMS = "/akash.market.v1beta2.Params";
/**
 * JSON serialization of `akash.market.v1beta2.Params` - the params for the x/market module
 */
export type AkashMarketParams = {
    bid_min_deposit?: CosmosBaseCoin | undefined;
    order_max_bids?: number | undefined;
};
