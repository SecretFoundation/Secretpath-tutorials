import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message: the params for the x/market module
 * @param a_bid_min_deposit - `bid_min_deposit`:
 * @param n_order_max_bids - `order_max_bids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashMarketParams = (a_bid_min_deposit, n_order_max_bids) => Protobuf() // ...
    .b(coin(a_bid_min_deposit)) // Coin bid_min_deposit = 1
    .v(n_order_max_bids) // uint32 order_max_bids = 2
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashMarketParams}
 */
export const decodeAkashMarketParams = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decode_coin]);
/**
 * Destructures the fields of a {@link AkashMarketParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bid_min_deposit -
 *   - 1: order_max_bids -
 */
export const destructAkashMarketParams = (g_struct) => [g_struct.bid_min_deposit, g_struct.order_max_bids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_MARKET_PARAMS = '/akash.market.v1beta2.Params';
//# sourceMappingURL=params.js.map