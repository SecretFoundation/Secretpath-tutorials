import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashProviderProvider, DecodedAkashProviderProvider } from './provider.js';
export type EncodedAkashProviderGenesisState = Encoded<'/akash.provider.v1beta2.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the basic genesis state used by provider module
 * @param a_providers - `providers`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashProviderGenesisState: (a_providers?: Opt<Encoded<'/akash.provider.v1beta2.Provider'>[]>) => EncodedAkashProviderGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: providers -
 */
export type DecodedAkashProviderGenesisState = [
    a_providers?: DecodedAkashProviderProvider[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderGenesisState}
 */
export declare const decodeAkashProviderGenesisState: (atu8_payload: Uint8Array) => DecodedAkashProviderGenesisState;
/**
 * Destructures the fields of a {@link AkashProviderGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: providers -
 */
export declare const destructAkashProviderGenesisState: (g_struct: AkashProviderGenesisState) => [providers?: AkashProviderProvider[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_PROVIDER_GENESIS_STATE = "/akash.provider.v1beta2.GenesisState";
/**
 * JSON serialization of `akash.provider.v1beta2.GenesisState` - defines the basic genesis state used by provider module
 */
export type AkashProviderGenesisState = {
    providers?: AkashProviderProvider[] | undefined;
};
