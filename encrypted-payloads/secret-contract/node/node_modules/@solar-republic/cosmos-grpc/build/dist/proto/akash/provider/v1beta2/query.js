import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeAkashProviderProvider } from './provider.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
const SR_LCD_AKASH_PROVIDER_QUERY = '/akash/provider/v1beta2/providers';
/**
 * Queries providers
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: providers - the 'providers' response property
 *   - 1: pagination - the 'providers' response property
 */
export const queryAkashProviderProviders = restful_grpc(g_pagination => [SR_LCD_AKASH_PROVIDER_QUERY, {
        pagination: g_pagination,
    }]);
/**
 * Queries provider details
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @returns a tuple where:
 *   - 0: provider - the 'provider' response property
 */
export const queryAkashProviderProvider = restful_grpc(sa_owner => [SR_LCD_AKASH_PROVIDER_QUERY + '/' + sa_owner]);
/**
 * Encodes a `QueryProvidersRequest` protobuf message: request type for the Query/Providers RPC method
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashProviderQueryProvidersRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryProvidersResponse` protobuf message: response type for the Query/Providers RPC method
 * @param a_providers - `providers`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashProviderQueryProvidersResponse = (a_providers, atu8_pagination) => Protobuf() // ...
    .B(a_providers) // Provider[] providers = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryProviderRequest` protobuf message: request type for the Query/Provider RPC method
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashProviderQueryProviderRequest = (sa_owner) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .o;
/**
 * Encodes a `QueryProviderResponse` protobuf message: response type for the Query/Provider RPC method
 * @param g_provider - `provider`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashProviderQueryProviderResponse = (atu8_provider) => Protobuf() // ...
    .b(atu8_provider) // Provider provider = 1
    .o;
/**
 * Decodes a protobuf QueryProvidersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProvidersRequest}
 */
export const decodeAkashProviderQueryProvidersRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryProviders message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProvidersResponse}
 */
export const decodeAkashProviderQueryProvidersResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeAkashProviderProvider, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryProviderRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProviderRequest}
 */
export const decodeAkashProviderQueryProviderRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryProvider message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProviderResponse}
 */
export const decodeAkashProviderQueryProviderResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashProviderProvider]);
/**
 * Destructures the fields of a {@link AkashProviderQueryProvidersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination -
 */
export const destructAkashProviderQueryProvidersRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDERS_REQUEST = '/akash.provider.v1beta2.QueryProvidersRequest';
/**
 * Destructures the fields of a {@link AkashProviderQueryProvidersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: providers -
 *   - 1: pagination -
 */
export const destructAkashProviderQueryProvidersResponse = (g_struct) => [g_struct.providers, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDERS_RESPONSE = '/akash.provider.v1beta2.QueryProvidersResponse';
/**
 * Destructures the fields of a {@link AkashProviderQueryProviderRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 */
export const destructAkashProviderQueryProviderRequest = (g_struct) => [g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDER_REQUEST = '/akash.provider.v1beta2.QueryProviderRequest';
/**
 * Destructures the fields of a {@link AkashProviderQueryProviderResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: provider -
 */
export const destructAkashProviderQueryProviderResponse = (g_struct) => [g_struct.provider];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDER_RESPONSE = '/akash.provider.v1beta2.QueryProviderResponse';
//# sourceMappingURL=query.js.map