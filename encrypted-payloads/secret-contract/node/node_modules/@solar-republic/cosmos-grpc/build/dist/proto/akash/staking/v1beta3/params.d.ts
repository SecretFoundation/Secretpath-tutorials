import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashStakingParams = Encoded<'/akash.staking.v1beta3.Params'>;
/**
 * Encodes a `Params` protobuf message: extends the parameters for the x/staking module
 * @param s_min_commission_rate - `min_commission_rate`: the chain-wide minimum commission rate that a validator can charge their delegators
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashStakingParams: (s_min_commission_rate?: Opt<string>) => EncodedAkashStakingParams;
/**
 * A decoded protobuf Params message
 *
 * Alias for: min_commission_rate - the chain-wide minimum commission rate that a validator can charge their delegators
 */
export type DecodedAkashStakingParams = [
    s_min_commission_rate?: string
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashStakingParams}
 */
export declare const decodeAkashStakingParams: (atu8_payload: Uint8Array) => DecodedAkashStakingParams;
/**
 * Destructures the fields of a {@link AkashStakingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_commission_rate - the chain-wide minimum commission rate that a validator can charge their delegators
 */
export declare const destructAkashStakingParams: (g_struct: AkashStakingParams) => [min_commission_rate?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_STAKING_PARAMS = "/akash.staking.v1beta3.Params";
/**
 * JSON serialization of `akash.staking.v1beta3.Params` - extends the parameters for the x/staking module
 */
export type AkashStakingParams = {
    min_commission_rate?: string | undefined;
};
