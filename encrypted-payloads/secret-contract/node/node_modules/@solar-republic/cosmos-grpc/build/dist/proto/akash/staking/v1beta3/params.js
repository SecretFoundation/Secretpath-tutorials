/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message: extends the parameters for the x/staking module
 * @param s_min_commission_rate - `min_commission_rate`: the chain-wide minimum commission rate that a validator can charge their delegators
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashStakingParams = (s_min_commission_rate) => Protobuf() // ...
    .s(s_min_commission_rate) // string min_commission_rate = 1
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashStakingParams}
 */
export const decodeAkashStakingParams = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link AkashStakingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_commission_rate - the chain-wide minimum commission rate that a validator can charge their delegators
 */
export const destructAkashStakingParams = (g_struct) => [g_struct.min_commission_rate];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_STAKING_PARAMS = '/akash.staking.v1beta3.Params';
//# sourceMappingURL=params.js.map