import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashTakeDenomTakeRate = Encoded<'/akash.take.v1beta3.DenomTakeRate'>;
export type EncodedAkashTakeParams = Encoded<'/akash.take.v1beta3.Params'>;
/**
 * Encodes a `DenomTakeRate` protobuf message: describes take rate for specified denom
 * @param s_denom - `denom`:
 * @param n_rate - `rate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashTakeDenomTakeRate: (s_denom?: Opt<string>, n_rate?: Opt<number>) => EncodedAkashTakeDenomTakeRate;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/take package
 * @param a_denom_take_rates - `denom_take_rates`: denom -> % take rate
 * @param n_default_take_rate - `default_take_rate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashTakeParams: (a_denom_take_rates?: Opt<Encoded<'/akash.take.v1beta3.DenomTakeRate'>[]>, n_default_take_rate?: Opt<number>) => EncodedAkashTakeParams;
/**
 * A decoded protobuf DenomTakeRate message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: rate -
 */
export type DecodedAkashTakeDenomTakeRate = [
    s_denom?: string,
    n_rate?: number
];
/**
 * Decodes a protobuf DenomTakeRate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashTakeDenomTakeRate}
 */
export declare const decodeAkashTakeDenomTakeRate: (atu8_payload: Uint8Array) => DecodedAkashTakeDenomTakeRate;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: denom_take_rates - denom -> % take rate
 *   - 1: default_take_rate -
 */
export type DecodedAkashTakeParams = [
    a_denom_take_rates?: DecodedAkashTakeDenomTakeRate[],
    n_default_take_rate?: number
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashTakeParams}
 */
export declare const decodeAkashTakeParams: (atu8_payload: Uint8Array) => DecodedAkashTakeParams;
/**
 * Destructures the fields of a {@link AkashTakeParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_take_rates - denom -> % take rate
 *   - 1: default_take_rate -
 */
export declare const destructAkashTakeParams: (g_struct: AkashTakeParams) => [denom_take_rates?: AkashTakeDenomTakeRate[], default_take_rate?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_TAKE_PARAMS = "/akash.take.v1beta3.Params";
/**
 * JSON serialization of `akash.take.v1beta3.Params` - defines the parameters for the x/take package
 */
export type AkashTakeParams = {
    denom_take_rates?: AkashTakeDenomTakeRate[] | undefined;
    default_take_rate?: number | undefined;
};
/**
 * Destructures the fields of a {@link AkashTakeDenomTakeRate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: rate -
 */
export declare const destructAkashTakeDenomTakeRate: (g_struct: AkashTakeDenomTakeRate) => [denom?: string, rate?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_TAKE_DENOM_TAKE_RATE = "/akash.take.v1beta3.DenomTakeRate";
/**
 * JSON serialization of `akash.take.v1beta3.DenomTakeRate` - describes take rate for specified denom
 */
export type AkashTakeDenomTakeRate = {
    denom?: string | undefined;
    rate?: number | undefined;
};
