import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarAxelarnetIBCTransferSent = Encoded<'/axelar.axelarnet.v1beta1.IBCTransferSent'>;
export type EncodedAxelarAxelarnetIBCTransferCompleted = Encoded<'/axelar.axelarnet.v1beta1.IBCTransferCompleted'>;
export type EncodedAxelarAxelarnetIBCTransferFailed = Encoded<'/axelar.axelarnet.v1beta1.IBCTransferFailed'>;
export type EncodedAxelarAxelarnetIBCTransferRetried = Encoded<'/axelar.axelarnet.v1beta1.IBCTransferRetried'>;
export type EncodedAxelarAxelarnetAxelarTransferCompleted = Encoded<'/axelar.axelarnet.v1beta1.AxelarTransferCompleted'>;
export type EncodedAxelarAxelarnetFeeCollected = Encoded<'/axelar.axelarnet.v1beta1.FeeCollected'>;
export type EncodedAxelarAxelarnetFeePaid = Encoded<'/axelar.axelarnet.v1beta1.FeePaid'>;
export type EncodedAxelarAxelarnetContractCallSubmitted = Encoded<'/axelar.axelarnet.v1beta1.ContractCallSubmitted'>;
export type EncodedAxelarAxelarnetContractCallWithTokenSubmitted = Encoded<'/axelar.axelarnet.v1beta1.ContractCallWithTokenSubmitted'>;
export type EncodedAxelarAxelarnetTokenSent = Encoded<'/axelar.axelarnet.v1beta1.TokenSent'>;
/**
 * Encodes a `IBCTransferSent` protobuf message:
 * @param sg_id - `id`:
 * @param s_receipient - `receipient`:
 * @param a_asset - `asset`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sa_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetIBCTransferSent: (sg_id?: Opt<WeakUint64Str>, s_receipient?: Opt<string>, a_asset?: Opt<SlimCoin>, sg_sequence?: Opt<WeakUint64Str>, si_port?: Opt<string>, si_channel?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>) => EncodedAxelarAxelarnetIBCTransferSent;
/**
 * Encodes a `IBCTransferCompleted` protobuf message:
 * @param sg_id - `id`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetIBCTransferCompleted: (sg_id?: Opt<WeakUint64Str>, sg_sequence?: Opt<WeakUint64Str>, si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedAxelarAxelarnetIBCTransferCompleted;
/**
 * Encodes a `IBCTransferFailed` protobuf message:
 * @param sg_id - `id`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetIBCTransferFailed: (sg_id?: Opt<WeakUint64Str>, sg_sequence?: Opt<WeakUint64Str>, si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedAxelarAxelarnetIBCTransferFailed;
/**
 * Encodes a `IBCTransferRetried` protobuf message:
 * @param sg_id - `id`:
 * @param s_receipient - `receipient`:
 * @param a_asset - `asset`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sa_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetIBCTransferRetried: (sg_id?: Opt<WeakUint64Str>, s_receipient?: Opt<string>, a_asset?: Opt<SlimCoin>, sg_sequence?: Opt<WeakUint64Str>, si_port?: Opt<string>, si_channel?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>) => EncodedAxelarAxelarnetIBCTransferRetried;
/**
 * Encodes a `AxelarTransferCompleted` protobuf message:
 * @param sg_id - `id`:
 * @param s_receipient - `receipient`:
 * @param a_asset - `asset`:
 * @param sa_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetAxelarTransferCompleted: (sg_id?: Opt<WeakUint64Str>, s_receipient?: Opt<string>, a_asset?: Opt<SlimCoin>, sa_recipient?: Opt<WeakAccountAddr>) => EncodedAxelarAxelarnetAxelarTransferCompleted;
/**
 * Encodes a `FeeCollected` protobuf message:
 * @param atu8_collector - `collector`:
 * @param a_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetFeeCollected: (atu8_collector?: Opt<Uint8Array>, a_fee?: Opt<SlimCoin>) => EncodedAxelarAxelarnetFeeCollected;
/**
 * Encodes a `FeePaid` protobuf message:
 * @param si_message - `message_id`:
 * @param atu8_recipient - `recipient`:
 * @param a_fee - `fee`:
 * @param s_refund_recipient - `refund_recipient`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetFeePaid: (si_message?: Opt<string>, atu8_recipient?: Opt<Uint8Array>, a_fee?: Opt<SlimCoin>, s_refund_recipient?: Opt<string>, s_asset?: Opt<string>) => EncodedAxelarAxelarnetFeePaid;
/**
 * Encodes a `ContractCallSubmitted` protobuf message:
 * @param si_message - `message_id`:
 * @param sa_sender - `sender`:
 * @param s_source_chain - `source_chain`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload - `payload`:
 * @param atu8_payload_hash - `payload_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetContractCallSubmitted: (si_message?: Opt<string>, sa_sender?: Opt<WeakAccountAddr>, s_source_chain?: Opt<string>, s_destination_chain?: Opt<string>, sa_contract?: Opt<WeakAccountAddr>, atu8_payload?: Opt<Uint8Array>, atu8_payload_hash?: Opt<Uint8Array>) => EncodedAxelarAxelarnetContractCallSubmitted;
/**
 * Encodes a `ContractCallWithTokenSubmitted` protobuf message:
 * @param si_message - `message_id`:
 * @param sa_sender - `sender`:
 * @param s_source_chain - `source_chain`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload - `payload`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetContractCallWithTokenSubmitted: (si_message?: Opt<string>, sa_sender?: Opt<WeakAccountAddr>, s_source_chain?: Opt<string>, s_destination_chain?: Opt<string>, sa_contract?: Opt<WeakAccountAddr>, atu8_payload?: Opt<Uint8Array>, atu8_payload_hash?: Opt<Uint8Array>, a_asset?: Opt<SlimCoin>) => EncodedAxelarAxelarnetContractCallWithTokenSubmitted;
/**
 * Encodes a `TokenSent` protobuf message:
 * @param sg_transfer_id - `transfer_id`:
 * @param sa_sender - `sender`:
 * @param s_source_chain - `source_chain`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetTokenSent: (sg_transfer_id?: Opt<WeakUint64Str>, sa_sender?: Opt<WeakAccountAddr>, s_source_chain?: Opt<string>, s_destination_chain?: Opt<string>, sa_destination?: Opt<WeakAccountAddr>, a_asset?: Opt<SlimCoin>) => EncodedAxelarAxelarnetTokenSent;
/**
 * A decoded protobuf IBCTransferSent message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: sequence -
 *   - 4: port_id -
 *   - 5: channel_id -
 *   - 6: recipient -
 */
export type DecodedAxelarAxelarnetIBCTransferSent = [
    sg_id?: CwUint64,
    s_receipient?: string,
    a_asset?: [
        string,
        string
    ],
    sg_sequence?: CwUint64,
    si_port?: string,
    si_channel?: string,
    sa_recipient?: CwAccountAddr
];
/**
 * Decodes a protobuf IBCTransferSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferSent}
 */
export declare const decodeAxelarAxelarnetIBCTransferSent: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetIBCTransferSent;
/**
 * A decoded protobuf IBCTransferCompleted message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: sequence -
 *   - 2: port_id -
 *   - 3: channel_id -
 */
export type DecodedAxelarAxelarnetIBCTransferCompleted = [
    sg_id?: CwUint64,
    sg_sequence?: CwUint64,
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf IBCTransferCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferCompleted}
 */
export declare const decodeAxelarAxelarnetIBCTransferCompleted: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetIBCTransferCompleted;
/**
 * A decoded protobuf IBCTransferFailed message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: sequence -
 *   - 2: port_id -
 *   - 3: channel_id -
 */
export type DecodedAxelarAxelarnetIBCTransferFailed = [
    sg_id?: CwUint64,
    sg_sequence?: CwUint64,
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf IBCTransferFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferFailed}
 */
export declare const decodeAxelarAxelarnetIBCTransferFailed: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetIBCTransferFailed;
/**
 * A decoded protobuf IBCTransferRetried message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: sequence -
 *   - 4: port_id -
 *   - 5: channel_id -
 *   - 6: recipient -
 */
export type DecodedAxelarAxelarnetIBCTransferRetried = [
    sg_id?: CwUint64,
    s_receipient?: string,
    a_asset?: [
        string,
        string
    ],
    sg_sequence?: CwUint64,
    si_port?: string,
    si_channel?: string,
    sa_recipient?: CwAccountAddr
];
/**
 * Decodes a protobuf IBCTransferRetried message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferRetried}
 */
export declare const decodeAxelarAxelarnetIBCTransferRetried: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetIBCTransferRetried;
/**
 * A decoded protobuf AxelarTransferCompleted message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: recipient -
 */
export type DecodedAxelarAxelarnetAxelarTransferCompleted = [
    sg_id?: CwUint64,
    s_receipient?: string,
    a_asset?: [
        string,
        string
    ],
    sa_recipient?: CwAccountAddr
];
/**
 * Decodes a protobuf AxelarTransferCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetAxelarTransferCompleted}
 */
export declare const decodeAxelarAxelarnetAxelarTransferCompleted: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetAxelarTransferCompleted;
/**
 * A decoded protobuf FeeCollected message
 *
 * Tuple where:
 *   - 0: collector -
 *   - 1: fee -
 */
export type DecodedAxelarAxelarnetFeeCollected = [
    atu8_collector?: Uint8Array,
    a_fee?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf FeeCollected message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetFeeCollected}
 */
export declare const decodeAxelarAxelarnetFeeCollected: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetFeeCollected;
/**
 * A decoded protobuf FeePaid message
 *
 * Tuple where:
 *   - 0: message_id -
 *   - 1: recipient -
 *   - 2: fee -
 *   - 3: refund_recipient -
 *   - 4: asset -
 */
export type DecodedAxelarAxelarnetFeePaid = [
    si_message?: string,
    atu8_recipient?: Uint8Array,
    a_fee?: [
        string,
        string
    ],
    s_refund_recipient?: string,
    s_asset?: string
];
/**
 * Decodes a protobuf FeePaid message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetFeePaid}
 */
export declare const decodeAxelarAxelarnetFeePaid: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetFeePaid;
/**
 * A decoded protobuf ContractCallSubmitted message
 *
 * Tuple where:
 *   - 0: message_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: contract_address -
 *   - 5: payload -
 *   - 6: payload_hash -
 */
export type DecodedAxelarAxelarnetContractCallSubmitted = [
    si_message?: string,
    sa_sender?: CwAccountAddr,
    s_source_chain?: string,
    s_destination_chain?: string,
    sa_contract?: CwAccountAddr,
    atu8_payload?: Uint8Array,
    atu8_payload_hash?: Uint8Array
];
/**
 * Decodes a protobuf ContractCallSubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetContractCallSubmitted}
 */
export declare const decodeAxelarAxelarnetContractCallSubmitted: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetContractCallSubmitted;
/**
 * A decoded protobuf ContractCallWithTokenSubmitted message
 *
 * Tuple where:
 *   - 0: message_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: contract_address -
 *   - 5: payload -
 *   - 6: payload_hash -
 *   - 7: asset -
 */
export type DecodedAxelarAxelarnetContractCallWithTokenSubmitted = [
    si_message?: string,
    sa_sender?: CwAccountAddr,
    s_source_chain?: string,
    s_destination_chain?: string,
    sa_contract?: CwAccountAddr,
    atu8_payload?: Uint8Array,
    atu8_payload_hash?: Uint8Array,
    a_asset?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf ContractCallWithTokenSubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetContractCallWithTokenSubmitted}
 */
export declare const decodeAxelarAxelarnetContractCallWithTokenSubmitted: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetContractCallWithTokenSubmitted;
/**
 * A decoded protobuf TokenSent message
 *
 * Tuple where:
 *   - 0: transfer_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: destination_address -
 *   - 5: asset -
 */
export type DecodedAxelarAxelarnetTokenSent = [
    sg_transfer_id?: CwUint64,
    sa_sender?: CwAccountAddr,
    s_source_chain?: string,
    s_destination_chain?: string,
    sa_destination?: CwAccountAddr,
    a_asset?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf TokenSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetTokenSent}
 */
export declare const decodeAxelarAxelarnetTokenSent: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetTokenSent;
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: sequence -
 *   - 4: port_id -
 *   - 5: channel_id -
 *   - 6: recipient -
 */
export declare const destructAxelarAxelarnetIBCTransferSent: (g_struct: AxelarAxelarnetIBCTransferSent) => [id?: CwUint64, receipient?: string, asset?: CosmosBaseCoin, sequence?: CwUint64, port_id?: string, channel_id?: string, recipient?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_SENT = "/axelar.axelarnet.v1beta1.IBCTransferSent";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.IBCTransferSent` -
 */
export type AxelarAxelarnetIBCTransferSent = {
    id?: CwUint64 | undefined;
    receipient?: string | undefined;
    asset?: CosmosBaseCoin | undefined;
    sequence?: CwUint64 | undefined;
    port_id?: string | undefined;
    channel_id?: string | undefined;
    recipient?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: sequence -
 *   - 2: port_id -
 *   - 3: channel_id -
 */
export declare const destructAxelarAxelarnetIBCTransferCompleted: (g_struct: AxelarAxelarnetIBCTransferCompleted) => [id?: CwUint64, sequence?: CwUint64, port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_COMPLETED = "/axelar.axelarnet.v1beta1.IBCTransferCompleted";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.IBCTransferCompleted` -
 */
export type AxelarAxelarnetIBCTransferCompleted = {
    id?: CwUint64 | undefined;
    sequence?: CwUint64 | undefined;
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: sequence -
 *   - 2: port_id -
 *   - 3: channel_id -
 */
export declare const destructAxelarAxelarnetIBCTransferFailed: (g_struct: AxelarAxelarnetIBCTransferFailed) => [id?: CwUint64, sequence?: CwUint64, port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_FAILED = "/axelar.axelarnet.v1beta1.IBCTransferFailed";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.IBCTransferFailed` -
 */
export type AxelarAxelarnetIBCTransferFailed = {
    id?: CwUint64 | undefined;
    sequence?: CwUint64 | undefined;
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferRetried} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: sequence -
 *   - 4: port_id -
 *   - 5: channel_id -
 *   - 6: recipient -
 */
export declare const destructAxelarAxelarnetIBCTransferRetried: (g_struct: AxelarAxelarnetIBCTransferRetried) => [id?: CwUint64, receipient?: string, asset?: CosmosBaseCoin, sequence?: CwUint64, port_id?: string, channel_id?: string, recipient?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_RETRIED = "/axelar.axelarnet.v1beta1.IBCTransferRetried";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.IBCTransferRetried` -
 */
export type AxelarAxelarnetIBCTransferRetried = {
    id?: CwUint64 | undefined;
    receipient?: string | undefined;
    asset?: CosmosBaseCoin | undefined;
    sequence?: CwUint64 | undefined;
    port_id?: string | undefined;
    channel_id?: string | undefined;
    recipient?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetAxelarTransferCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: recipient -
 */
export declare const destructAxelarAxelarnetAxelarTransferCompleted: (g_struct: AxelarAxelarnetAxelarTransferCompleted) => [id?: CwUint64, receipient?: string, asset?: CosmosBaseCoin, recipient?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_AXELAR_TRANSFER_COMPLETED = "/axelar.axelarnet.v1beta1.AxelarTransferCompleted";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.AxelarTransferCompleted` -
 */
export type AxelarAxelarnetAxelarTransferCompleted = {
    id?: CwUint64 | undefined;
    receipient?: string | undefined;
    asset?: CosmosBaseCoin | undefined;
    recipient?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetFeeCollected} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: collector -
 *   - 1: fee -
 */
export declare const destructAxelarAxelarnetFeeCollected: (g_struct: AxelarAxelarnetFeeCollected) => [collector?: Uint8Array, fee?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_FEE_COLLECTED = "/axelar.axelarnet.v1beta1.FeeCollected";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.FeeCollected` -
 */
export type AxelarAxelarnetFeeCollected = {
    collector?: CwBase64 | undefined;
    fee?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetFeePaid} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_id -
 *   - 1: recipient -
 *   - 2: fee -
 *   - 3: refund_recipient -
 *   - 4: asset -
 */
export declare const destructAxelarAxelarnetFeePaid: (g_struct: AxelarAxelarnetFeePaid) => [message_id?: string, recipient?: Uint8Array, fee?: CosmosBaseCoin, refund_recipient?: string, asset?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_FEE_PAID = "/axelar.axelarnet.v1beta1.FeePaid";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.FeePaid` -
 */
export type AxelarAxelarnetFeePaid = {
    message_id?: string | undefined;
    recipient?: CwBase64 | undefined;
    fee?: CosmosBaseCoin | undefined;
    refund_recipient?: string | undefined;
    asset?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetContractCallSubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: contract_address -
 *   - 5: payload -
 *   - 6: payload_hash -
 */
export declare const destructAxelarAxelarnetContractCallSubmitted: (g_struct: AxelarAxelarnetContractCallSubmitted) => [message_id?: string, sender?: CwAccountAddr, source_chain?: string, destination_chain?: string, contract_address?: CwAccountAddr, payload?: Uint8Array, payload_hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CONTRACT_CALL_SUBMITTED = "/axelar.axelarnet.v1beta1.ContractCallSubmitted";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.ContractCallSubmitted` -
 */
export type AxelarAxelarnetContractCallSubmitted = {
    message_id?: string | undefined;
    sender?: CwAccountAddr | undefined;
    source_chain?: string | undefined;
    destination_chain?: string | undefined;
    contract_address?: CwAccountAddr | undefined;
    payload?: CwBase64 | undefined;
    payload_hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetContractCallWithTokenSubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: contract_address -
 *   - 5: payload -
 *   - 6: payload_hash -
 *   - 7: asset -
 */
export declare const destructAxelarAxelarnetContractCallWithTokenSubmitted: (g_struct: AxelarAxelarnetContractCallWithTokenSubmitted) => [message_id?: string, sender?: CwAccountAddr, source_chain?: string, destination_chain?: string, contract_address?: CwAccountAddr, payload?: Uint8Array, payload_hash?: Uint8Array, asset?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CONTRACT_CALL_WITH_TOKEN_SUBMITTED = "/axelar.axelarnet.v1beta1.ContractCallWithTokenSubmitted";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.ContractCallWithTokenSubmitted` -
 */
export type AxelarAxelarnetContractCallWithTokenSubmitted = {
    message_id?: string | undefined;
    sender?: CwAccountAddr | undefined;
    source_chain?: string | undefined;
    destination_chain?: string | undefined;
    contract_address?: CwAccountAddr | undefined;
    payload?: CwBase64 | undefined;
    payload_hash?: CwBase64 | undefined;
    asset?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetTokenSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfer_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: destination_address -
 *   - 5: asset -
 */
export declare const destructAxelarAxelarnetTokenSent: (g_struct: AxelarAxelarnetTokenSent) => [transfer_id?: CwUint64, sender?: CwAccountAddr, source_chain?: string, destination_chain?: string, destination_address?: CwAccountAddr, asset?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_TOKEN_SENT = "/axelar.axelarnet.v1beta1.TokenSent";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.TokenSent` -
 */
export type AxelarAxelarnetTokenSent = {
    transfer_id?: CwUint64 | undefined;
    sender?: CwAccountAddr | undefined;
    source_chain?: string | undefined;
    destination_chain?: string | undefined;
    destination_address?: CwAccountAddr | undefined;
    asset?: CosmosBaseCoin | undefined;
};
