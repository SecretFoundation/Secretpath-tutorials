import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `IBCTransferSent` protobuf message:
 * @param sg_id - `id`:
 * @param s_receipient - `receipient`:
 * @param a_asset - `asset`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sa_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetIBCTransferSent = (sg_id, s_receipient, a_asset, sg_sequence, si_port, si_channel, sa_recipient) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .s(s_receipient) // string receipient = 2
    .b(coin(a_asset)) // Coin asset = 3
    .g(sg_sequence) // uint64 sequence = 4
    .s(si_port) // string port_id = 5
    .s(si_channel) // string channel_id = 6
    .s(sa_recipient) // string recipient = 7
    .o;
/**
 * Encodes a `IBCTransferCompleted` protobuf message:
 * @param sg_id - `id`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetIBCTransferCompleted = (sg_id, sg_sequence, si_port, si_channel) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .g(sg_sequence) // uint64 sequence = 2
    .s(si_port) // string port_id = 3
    .s(si_channel) // string channel_id = 4
    .o;
/**
 * Encodes a `IBCTransferFailed` protobuf message:
 * @param sg_id - `id`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetIBCTransferFailed = (sg_id, sg_sequence, si_port, si_channel) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .g(sg_sequence) // uint64 sequence = 2
    .s(si_port) // string port_id = 3
    .s(si_channel) // string channel_id = 4
    .o;
/**
 * Encodes a `IBCTransferRetried` protobuf message:
 * @param sg_id - `id`:
 * @param s_receipient - `receipient`:
 * @param a_asset - `asset`:
 * @param sg_sequence - `sequence`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sa_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetIBCTransferRetried = (sg_id, s_receipient, a_asset, sg_sequence, si_port, si_channel, sa_recipient) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .s(s_receipient) // string receipient = 2
    .b(coin(a_asset)) // Coin asset = 3
    .g(sg_sequence) // uint64 sequence = 4
    .s(si_port) // string port_id = 5
    .s(si_channel) // string channel_id = 6
    .s(sa_recipient) // string recipient = 7
    .o;
/**
 * Encodes a `AxelarTransferCompleted` protobuf message:
 * @param sg_id - `id`:
 * @param s_receipient - `receipient`:
 * @param a_asset - `asset`:
 * @param sa_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetAxelarTransferCompleted = (sg_id, s_receipient, a_asset, sa_recipient) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .s(s_receipient) // string receipient = 2
    .b(coin(a_asset)) // Coin asset = 3
    .s(sa_recipient) // string recipient = 4
    .o;
/**
 * Encodes a `FeeCollected` protobuf message:
 * @param atu8_collector - `collector`:
 * @param a_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetFeeCollected = (atu8_collector, a_fee) => Protobuf() // ...
    .b(atu8_collector) // bytes collector = 1
    .b(coin(a_fee)) // Coin fee = 2
    .o;
/**
 * Encodes a `FeePaid` protobuf message:
 * @param si_message - `message_id`:
 * @param atu8_recipient - `recipient`:
 * @param a_fee - `fee`:
 * @param s_refund_recipient - `refund_recipient`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetFeePaid = (si_message, atu8_recipient, a_fee, s_refund_recipient, s_asset) => Protobuf() // ...
    .s(si_message) // string message_id = 1
    .b(atu8_recipient) // bytes recipient = 2
    .b(coin(a_fee)) // Coin fee = 3
    .s(s_refund_recipient) // string refund_recipient = 4
    .s(s_asset) // string asset = 5
    .o;
/**
 * Encodes a `ContractCallSubmitted` protobuf message:
 * @param si_message - `message_id`:
 * @param sa_sender - `sender`:
 * @param s_source_chain - `source_chain`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload - `payload`:
 * @param atu8_payload_hash - `payload_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetContractCallSubmitted = (si_message, sa_sender, s_source_chain, s_destination_chain, sa_contract, atu8_payload, atu8_payload_hash) => Protobuf() // ...
    .s(si_message) // string message_id = 1
    .s(sa_sender) // string sender = 2
    .s(s_source_chain) // string source_chain = 3
    .s(s_destination_chain) // string destination_chain = 4
    .s(sa_contract) // string contract_address = 5
    .b(atu8_payload) // bytes payload = 6
    .b(atu8_payload_hash) // bytes payload_hash = 7
    .o;
/**
 * Encodes a `ContractCallWithTokenSubmitted` protobuf message:
 * @param si_message - `message_id`:
 * @param sa_sender - `sender`:
 * @param s_source_chain - `source_chain`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload - `payload`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetContractCallWithTokenSubmitted = (si_message, sa_sender, s_source_chain, s_destination_chain, sa_contract, atu8_payload, atu8_payload_hash, a_asset) => Protobuf() // ...
    .s(si_message) // string message_id = 1
    .s(sa_sender) // string sender = 2
    .s(s_source_chain) // string source_chain = 3
    .s(s_destination_chain) // string destination_chain = 4
    .s(sa_contract) // string contract_address = 5
    .b(atu8_payload) // bytes payload = 6
    .b(atu8_payload_hash) // bytes payload_hash = 7
    .b(coin(a_asset)) // Coin asset = 8
    .o;
/**
 * Encodes a `TokenSent` protobuf message:
 * @param sg_transfer_id - `transfer_id`:
 * @param sa_sender - `sender`:
 * @param s_source_chain - `source_chain`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetTokenSent = (sg_transfer_id, sa_sender, s_source_chain, s_destination_chain, sa_destination, a_asset) => Protobuf() // ...
    .g(sg_transfer_id) // uint64 transfer_id = 1
    .s(sa_sender) // string sender = 2
    .s(s_source_chain) // string source_chain = 3
    .s(s_destination_chain) // string destination_chain = 4
    .s(sa_destination) // string destination_address = 5
    .b(coin(a_asset)) // Coin asset = 6
    .o;
/**
 * Decodes a protobuf IBCTransferSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferSent}
 */
export const decodeAxelarAxelarnetIBCTransferSent = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 3, 5, 5, 5], [0, 0, decode_coin]);
/**
 * Decodes a protobuf IBCTransferCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferCompleted}
 */
export const decodeAxelarAxelarnetIBCTransferCompleted = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 5, 5]);
/**
 * Decodes a protobuf IBCTransferFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferFailed}
 */
export const decodeAxelarAxelarnetIBCTransferFailed = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 5, 5]);
/**
 * Decodes a protobuf IBCTransferRetried message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransferRetried}
 */
export const decodeAxelarAxelarnetIBCTransferRetried = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 3, 5, 5, 5], [0, 0, decode_coin]);
/**
 * Decodes a protobuf AxelarTransferCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetAxelarTransferCompleted}
 */
export const decodeAxelarAxelarnetAxelarTransferCompleted = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 5], [0, 0, decode_coin]);
/**
 * Decodes a protobuf FeeCollected message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetFeeCollected}
 */
export const decodeAxelarAxelarnetFeeCollected = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [0, decode_coin]);
/**
 * Decodes a protobuf FeePaid message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetFeePaid}
 */
export const decodeAxelarAxelarnetFeePaid = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 5, 5], [0, 0, decode_coin]);
/**
 * Decodes a protobuf ContractCallSubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetContractCallSubmitted}
 */
export const decodeAxelarAxelarnetContractCallSubmitted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5, 1, 1]);
/**
 * Decodes a protobuf ContractCallWithTokenSubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetContractCallWithTokenSubmitted}
 */
export const decodeAxelarAxelarnetContractCallWithTokenSubmitted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf TokenSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetTokenSent}
 */
export const decodeAxelarAxelarnetTokenSent = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 5, 5, 1], [0, 0, 0, 0, 0, decode_coin]);
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: sequence -
 *   - 4: port_id -
 *   - 5: channel_id -
 *   - 6: recipient -
 */
export const destructAxelarAxelarnetIBCTransferSent = (g_struct) => [g_struct.id, g_struct.receipient, g_struct.asset, g_struct.sequence, g_struct.port_id, g_struct.channel_id, g_struct.recipient];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_SENT = '/axelar.axelarnet.v1beta1.IBCTransferSent';
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: sequence -
 *   - 2: port_id -
 *   - 3: channel_id -
 */
export const destructAxelarAxelarnetIBCTransferCompleted = (g_struct) => [g_struct.id, g_struct.sequence, g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_COMPLETED = '/axelar.axelarnet.v1beta1.IBCTransferCompleted';
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: sequence -
 *   - 2: port_id -
 *   - 3: channel_id -
 */
export const destructAxelarAxelarnetIBCTransferFailed = (g_struct) => [g_struct.id, g_struct.sequence, g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_FAILED = '/axelar.axelarnet.v1beta1.IBCTransferFailed';
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransferRetried} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: sequence -
 *   - 4: port_id -
 *   - 5: channel_id -
 *   - 6: recipient -
 */
export const destructAxelarAxelarnetIBCTransferRetried = (g_struct) => [g_struct.id, g_struct.receipient, g_struct.asset, g_struct.sequence, g_struct.port_id, g_struct.channel_id, g_struct.recipient];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER_RETRIED = '/axelar.axelarnet.v1beta1.IBCTransferRetried';
/**
 * Destructures the fields of a {@link AxelarAxelarnetAxelarTransferCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: receipient -
 *   - 2: asset -
 *   - 3: recipient -
 */
export const destructAxelarAxelarnetAxelarTransferCompleted = (g_struct) => [g_struct.id, g_struct.receipient, g_struct.asset, g_struct.recipient];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_AXELAR_TRANSFER_COMPLETED = '/axelar.axelarnet.v1beta1.AxelarTransferCompleted';
/**
 * Destructures the fields of a {@link AxelarAxelarnetFeeCollected} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: collector -
 *   - 1: fee -
 */
export const destructAxelarAxelarnetFeeCollected = (g_struct) => [safe_base64_to_bytes(g_struct.collector), g_struct.fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_FEE_COLLECTED = '/axelar.axelarnet.v1beta1.FeeCollected';
/**
 * Destructures the fields of a {@link AxelarAxelarnetFeePaid} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_id -
 *   - 1: recipient -
 *   - 2: fee -
 *   - 3: refund_recipient -
 *   - 4: asset -
 */
export const destructAxelarAxelarnetFeePaid = (g_struct) => [g_struct.message_id, safe_base64_to_bytes(g_struct.recipient), g_struct.fee, g_struct.refund_recipient, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_FEE_PAID = '/axelar.axelarnet.v1beta1.FeePaid';
/**
 * Destructures the fields of a {@link AxelarAxelarnetContractCallSubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: contract_address -
 *   - 5: payload -
 *   - 6: payload_hash -
 */
export const destructAxelarAxelarnetContractCallSubmitted = (g_struct) => [g_struct.message_id, g_struct.sender, g_struct.source_chain, g_struct.destination_chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload), safe_base64_to_bytes(g_struct.payload_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CONTRACT_CALL_SUBMITTED = '/axelar.axelarnet.v1beta1.ContractCallSubmitted';
/**
 * Destructures the fields of a {@link AxelarAxelarnetContractCallWithTokenSubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: contract_address -
 *   - 5: payload -
 *   - 6: payload_hash -
 *   - 7: asset -
 */
export const destructAxelarAxelarnetContractCallWithTokenSubmitted = (g_struct) => [g_struct.message_id, g_struct.sender, g_struct.source_chain, g_struct.destination_chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload), safe_base64_to_bytes(g_struct.payload_hash), g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CONTRACT_CALL_WITH_TOKEN_SUBMITTED = '/axelar.axelarnet.v1beta1.ContractCallWithTokenSubmitted';
/**
 * Destructures the fields of a {@link AxelarAxelarnetTokenSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfer_id -
 *   - 1: sender -
 *   - 2: source_chain -
 *   - 3: destination_chain -
 *   - 4: destination_address -
 *   - 5: asset -
 */
export const destructAxelarAxelarnetTokenSent = (g_struct) => [g_struct.transfer_id, g_struct.sender, g_struct.source_chain, g_struct.destination_chain, g_struct.destination_address, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_TOKEN_SENT = '/axelar.axelarnet.v1beta1.TokenSent';
//# sourceMappingURL=events.js.map