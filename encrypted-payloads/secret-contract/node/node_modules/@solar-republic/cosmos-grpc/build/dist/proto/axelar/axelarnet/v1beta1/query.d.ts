import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarAxelarnetParams, DecodedAxelarAxelarnetParams } from './params.js';
export type EncodedAxelarAxelarnetPendingIBCTransferCountRequest = Encoded<'/axelar.axelarnet.v1beta1.PendingIBCTransferCountRequest'>;
export type EncodedAxelarAxelarnetPendingIBCTransferCountResponse = Encoded<'/axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse'>;
export type EncodedAxelarAxelarnetParamsRequest = Encoded<'/axelar.axelarnet.v1beta1.ParamsRequest'>;
export type EncodedAxelarAxelarnetParamsResponse = Encoded<'/axelar.axelarnet.v1beta1.ParamsResponse'>;
export type EncodedAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry = Encoded<'/axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse.TransfersByChainEntry'>;
/**
 * Encodes a `PendingIBCTransferCountRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetPendingIBCTransferCountRequest: () => EncodedAxelarAxelarnetPendingIBCTransferCountRequest;
/**
 * Encodes a `PendingIBCTransferCountResponse` protobuf message:
 * @param a_transfers_by_chains - `transfers_by_chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetPendingIBCTransferCountResponse: (a_transfers_by_chains?: Opt<Encoded<'/axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse.TransfersByChainEntry'>[]>) => EncodedAxelarAxelarnetPendingIBCTransferCountResponse;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetParamsRequest: () => EncodedAxelarAxelarnetParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetParamsResponse: (atu8_params?: Opt<Encoded<'/axelar.axelarnet.v1beta1.Params'>>) => EncodedAxelarAxelarnetParamsResponse;
/**
 * Encodes a `TransfersByChainEntry` protobuf message:
 * @param s_key - `key`:
 * @param n_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry: (s_key?: Opt<string>, n_value?: Opt<number>) => EncodedAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry;
/**
 * A decoded protobuf PendingIBCTransferCountRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarAxelarnetPendingIBCTransferCountRequest = [];
/**
 * Decodes a protobuf PendingIBCTransferCountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetPendingIBCTransferCountRequest}
 */
export declare const decodeAxelarAxelarnetPendingIBCTransferCountRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf PendingIBCTransferCount message
 *
 * Alias for: transfers_by_chain -
 */
export type DecodedAxelarAxelarnetPendingIBCTransferCountResponse = [
    a_transfers_by_chain?: DecodedAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry[]
];
/**
 * Decodes a protobuf PendingIBCTransferCount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetPendingIBCTransferCountResponse}
 */
export declare const decodeAxelarAxelarnetPendingIBCTransferCountResponse: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetPendingIBCTransferCountResponse;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarAxelarnetParamsRequest = [];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetParamsRequest}
 */
export declare const decodeAxelarAxelarnetParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Params message
 *
 * Alias for: params -
 */
export type DecodedAxelarAxelarnetParamsResponse = [
    a_params?: DecodedAxelarAxelarnetParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetParamsResponse}
 */
export declare const decodeAxelarAxelarnetParamsResponse: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetParamsResponse;
/**
 * A decoded protobuf TransfersByChainEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry = [
    s_key?: string,
    n_value?: number
];
/**
 * Decodes a protobuf TransfersByChainEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry}
 */
export declare const decodeAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry;
/**
 * Destructures the fields of a {@link AxelarAxelarnetPendingIBCTransferCountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarAxelarnetPendingIBCTransferCountRequest: (g_struct: AxelarAxelarnetPendingIBCTransferCountRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_PENDING_I_B_C_TRANSFER_COUNT_REQUEST = "/axelar.axelarnet.v1beta1.PendingIBCTransferCountRequest";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.PendingIBCTransferCountRequest` -
 */
export type AxelarAxelarnetPendingIBCTransferCountRequest = {};
/**
 * Destructures the fields of a {@link AxelarAxelarnetPendingIBCTransferCountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfers_by_chain -
 */
export declare const destructAxelarAxelarnetPendingIBCTransferCountResponse: (g_struct: AxelarAxelarnetPendingIBCTransferCountResponse) => [transfers_by_chain?: AxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_PENDING_I_B_C_TRANSFER_COUNT_RESPONSE = "/axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse` -
 */
export type AxelarAxelarnetPendingIBCTransferCountResponse = {
    transfers_by_chain?: AxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry: (g_struct: AxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry) => [key?: string, value?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_PENDING_I_B_C_TRANSFER_COUNT_RESPONSE_TRANSFERS_BY_CHAIN_ENTRY = "/axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse.TransfersByChainEntry";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.PendingIBCTransferCountResponse.TransfersByChainEntry` -
 */
export type AxelarAxelarnetPendingIBCTransferCountResponseTransfersByChainEntry = {
    key?: string | undefined;
    value?: number | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarAxelarnetParamsRequest: (g_struct: AxelarAxelarnetParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_PARAMS_REQUEST = "/axelar.axelarnet.v1beta1.ParamsRequest";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.ParamsRequest` - represents a message that queries the params
 */
export type AxelarAxelarnetParamsRequest = {};
/**
 * Destructures the fields of a {@link AxelarAxelarnetParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export declare const destructAxelarAxelarnetParamsResponse: (g_struct: AxelarAxelarnetParamsResponse) => [params?: AxelarAxelarnetParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_PARAMS_RESPONSE = "/axelar.axelarnet.v1beta1.ParamsResponse";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.ParamsResponse` -
 */
export type AxelarAxelarnetParamsResponse = {
    params?: AxelarAxelarnetParams | undefined;
};
