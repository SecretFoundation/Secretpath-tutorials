/// <reference types="node" />
import type { Opt } from '../../../../api/types.js';
import type { AxelarAxelarnetPendingIBCTransferCountResponse, AxelarAxelarnetParamsResponse } from './query.js';
import type { AxelarAxelarnetLinkResponse, AxelarAxelarnetConfirmDepositResponse, AxelarAxelarnetExecutePendingTransfersResponse, AxelarAxelarnetAddCosmosBasedChainResponse, AxelarAxelarnetRegisterAssetResponse, AxelarAxelarnetRouteIBCTransfersResponse, AxelarAxelarnetRegisterFeeCollectorResponse, AxelarAxelarnetRetryIBCTransferResponse, AxelarAxelarnetRouteMessageResponse, AxelarAxelarnetCallContractResponse } from './tx.js';
import type { AxelarAxelarnetFee } from './types.js';
import type { AxelarNexusExportedChain, AxelarNexusExportedAsset } from '../../nexus/exported/v1beta1/types.js';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param sa_recipient_addr -
 * @param s_recipient_chain -
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: deposit_addr - the 'deposit_addr' response property
 */
export declare const submitAxelarAxelarnetLink: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, sa_recipient_addr?: Opt<`${string}1${string}`>, s_recipient_chain?: Opt<string>, s_asset?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetLinkResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_deposit_address -
 * @param s_denom -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetConfirmDeposit: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, atu8_deposit_address?: Opt<Uint8Array>, s_denom?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetConfirmDepositResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetExecutePendingTransfers: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetExecutePendingTransfersResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param g_chain -
 * @param s_addr_prefix -
 * @param a_native_assets -
 * @param s_cosmos_chain - TODO: Rename this to `chain` after v1beta1 -> v1 version bump
 * @param s_ibc_path -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetAddCosmosBasedChain: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, g_chain?: Opt<AxelarNexusExportedChain>, s_addr_prefix?: Opt<string>, a_native_assets?: Opt<AxelarNexusExportedAsset[]>, s_cosmos_chain?: Opt<string>, s_ibc_path?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetAddCosmosBasedChainResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param g_asset -
 * @param atu8_limit -
 * @param xt_window -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetRegisterAsset: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, g_asset?: Opt<AxelarNexusExportedAsset>, atu8_limit?: Opt<Uint8Array>, xt_window?: Opt<number>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetRegisterAssetResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetRouteIBCTransfers: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetRouteIBCTransfersResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_fee_collector -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetRegisterFeeCollector: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, atu8_fee_collector?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetRegisterFeeCollectorResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param sg_id -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetRetryIBCTransfer: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, sg_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetRetryIBCTransferResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_id -
 * @param atu8_payload -
 * @param atu8_feegranter -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetRouteMessage: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_id?: Opt<string>, atu8_payload?: Opt<Uint8Array>, atu8_feegranter?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetRouteMessageResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param sa_contract -
 * @param atu8_payload -
 * @param g_fee -
 * @returns an empty tuple
 */
export declare const submitAxelarAxelarnetCallContract: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, sa_contract?: Opt<`${string}1${string}`>, atu8_payload?: Opt<Uint8Array>, g_fee?: Opt<AxelarAxelarnetFee>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetCallContractResponse>>;
/**
 * Queries the pending ibc transfers for all chains
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: transfers_by_chain - the 'transfers_by_chain' response property
 */
export declare const queryAxelarAxelarnetPendingIBCTransferCount: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetPendingIBCTransferCountResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export declare const queryAxelarAxelarnetParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarAxelarnetParamsResponse>>;
