import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarEvmTokenDetails, DecodedAxelarEvmTokenDetails } from './types.js';
import type { AxelarVoteExportedPollParticipants, DecodedAxelarVoteExportedPollParticipants } from '../../vote/exported/v1beta1/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarEvmPollFailed = Encoded<'/axelar.evm.v1beta1.PollFailed'>;
export type EncodedAxelarEvmPollExpired = Encoded<'/axelar.evm.v1beta1.PollExpired'>;
export type EncodedAxelarEvmPollCompleted = Encoded<'/axelar.evm.v1beta1.PollCompleted'>;
export type EncodedAxelarEvmNoEventsConfirmed = Encoded<'/axelar.evm.v1beta1.NoEventsConfirmed'>;
export type EncodedAxelarEvmConfirmKeyTransferStarted = Encoded<'/axelar.evm.v1beta1.ConfirmKeyTransferStarted'>;
export type EncodedAxelarEvmConfirmGatewayTxStarted = Encoded<'/axelar.evm.v1beta1.ConfirmGatewayTxStarted'>;
export type EncodedAxelarEvmPollMapping = Encoded<'/axelar.evm.v1beta1.PollMapping'>;
export type EncodedAxelarEvmConfirmGatewayTxsStarted = Encoded<'/axelar.evm.v1beta1.ConfirmGatewayTxsStarted'>;
export type EncodedAxelarEvmConfirmDepositStarted = Encoded<'/axelar.evm.v1beta1.ConfirmDepositStarted'>;
export type EncodedAxelarEvmConfirmTokenStarted = Encoded<'/axelar.evm.v1beta1.ConfirmTokenStarted'>;
export type EncodedAxelarEvmChainAdded = Encoded<'/axelar.evm.v1beta1.ChainAdded'>;
export type EncodedAxelarEvmCommandBatchSigned = Encoded<'/axelar.evm.v1beta1.CommandBatchSigned'>;
export type EncodedAxelarEvmCommandBatchAborted = Encoded<'/axelar.evm.v1beta1.CommandBatchAborted'>;
export type EncodedAxelarEvmEVMEventConfirmed = Encoded<'/axelar.evm.v1beta1.EVMEventConfirmed'>;
export type EncodedAxelarEvmEVMEventCompleted = Encoded<'/axelar.evm.v1beta1.EVMEventCompleted'>;
export type EncodedAxelarEvmEVMEventFailed = Encoded<'/axelar.evm.v1beta1.EVMEventFailed'>;
export type EncodedAxelarEvmEVMEventRetryFailed = Encoded<'/axelar.evm.v1beta1.EVMEventRetryFailed'>;
export type EncodedAxelarEvmContractCallApproved = Encoded<'/axelar.evm.v1beta1.ContractCallApproved'>;
export type EncodedAxelarEvmContractCallFailed = Encoded<'/axelar.evm.v1beta1.ContractCallFailed'>;
export type EncodedAxelarEvmContractCallWithMintApproved = Encoded<'/axelar.evm.v1beta1.ContractCallWithMintApproved'>;
export type EncodedAxelarEvmTokenSent = Encoded<'/axelar.evm.v1beta1.TokenSent'>;
export type EncodedAxelarEvmMintCommand = Encoded<'/axelar.evm.v1beta1.MintCommand'>;
export type EncodedAxelarEvmBurnCommand = Encoded<'/axelar.evm.v1beta1.BurnCommand'>;
/**
 * Encodes a `PollFailed` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPollFailed: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, sg_poll_id?: Opt<WeakUint64Str>) => EncodedAxelarEvmPollFailed;
/**
 * Encodes a `PollExpired` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPollExpired: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, sg_poll_id?: Opt<WeakUint64Str>) => EncodedAxelarEvmPollExpired;
/**
 * Encodes a `PollCompleted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPollCompleted: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, sg_poll_id?: Opt<WeakUint64Str>) => EncodedAxelarEvmPollCompleted;
/**
 * Encodes a `NoEventsConfirmed` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmNoEventsConfirmed: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, sg_poll_id?: Opt<WeakUint64Str>) => EncodedAxelarEvmNoEventsConfirmed;
/**
 * Encodes a `ConfirmKeyTransferStarted` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmKeyTransferStarted: (s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>, atu8_gateway_address?: Opt<Uint8Array>, sg_confirmation_height?: Opt<WeakUint64Str>, atu8_participants?: Opt<Encoded<'/axelar.vote.exported.v1beta1.PollParticipants'>>) => EncodedAxelarEvmConfirmKeyTransferStarted;
/**
 * Encodes a `ConfirmGatewayTxStarted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmGatewayTxStarted: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, atu8_gateway_address?: Opt<Uint8Array>, sg_confirmation_height?: Opt<WeakUint64Str>, atu8_participants?: Opt<Encoded<'/axelar.vote.exported.v1beta1.PollParticipants'>>) => EncodedAxelarEvmConfirmGatewayTxStarted;
/**
 * Encodes a `PollMapping` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPollMapping: (atu8_tx_id?: Opt<Uint8Array>, sg_poll_id?: Opt<WeakUint64Str>) => EncodedAxelarEvmPollMapping;
/**
 * Encodes a `ConfirmGatewayTxsStarted` protobuf message:
 * @param a_poll_mappings - `poll_mappings`:
 * @param s_chain - `chain`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param a_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmGatewayTxsStarted: (a_poll_mappings?: Opt<Encoded<'/axelar.evm.v1beta1.PollMapping'>[]>, s_chain?: Opt<string>, atu8_gateway_address?: Opt<Uint8Array>, sg_confirmation_height?: Opt<WeakUint64Str>, a_participants?: Opt<Uint8Array[]>) => EncodedAxelarEvmConfirmGatewayTxsStarted;
/**
 * Encodes a `ConfirmDepositStarted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param atu8_deposit_address - `deposit_address`:
 * @param atu8_token_address - `token_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmDepositStarted: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, atu8_deposit_address?: Opt<Uint8Array>, atu8_token_address?: Opt<Uint8Array>, sg_confirmation_height?: Opt<WeakUint64Str>, atu8_participants?: Opt<Encoded<'/axelar.vote.exported.v1beta1.PollParticipants'>>, s_asset?: Opt<string>) => EncodedAxelarEvmConfirmDepositStarted;
/**
 * Encodes a `ConfirmTokenStarted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param atu8_token_address - `token_address`:
 * @param g_token_details - `token_details`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmTokenStarted: (atu8_tx_id?: Opt<Uint8Array>, s_chain?: Opt<string>, atu8_gateway_address?: Opt<Uint8Array>, atu8_token_address?: Opt<Uint8Array>, atu8_token_details?: Opt<Encoded<'/axelar.evm.v1beta1.TokenDetails'>>, sg_confirmation_height?: Opt<WeakUint64Str>, atu8_participants?: Opt<Encoded<'/axelar.vote.exported.v1beta1.PollParticipants'>>) => EncodedAxelarEvmConfirmTokenStarted;
/**
 * Encodes a `ChainAdded` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmChainAdded: (s_chain?: Opt<string>) => EncodedAxelarEvmChainAdded;
/**
 * Encodes a `CommandBatchSigned` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_command_batch_id - `command_batch_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommandBatchSigned: (s_chain?: Opt<string>, atu8_command_batch_id?: Opt<Uint8Array>) => EncodedAxelarEvmCommandBatchSigned;
/**
 * Encodes a `CommandBatchAborted` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_command_batch_id - `command_batch_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommandBatchAborted: (s_chain?: Opt<string>, atu8_command_batch_id?: Opt<Uint8Array>) => EncodedAxelarEvmCommandBatchAborted;
/**
 * Encodes a `EVMEventConfirmed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEVMEventConfirmed: (s_chain?: Opt<string>, si_event?: Opt<string>, s_type?: Opt<string>) => EncodedAxelarEvmEVMEventConfirmed;
/**
 * Encodes a `EVMEventCompleted` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEVMEventCompleted: (s_chain?: Opt<string>, si_event?: Opt<string>, s_type?: Opt<string>) => EncodedAxelarEvmEVMEventCompleted;
/**
 * Encodes a `EVMEventFailed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEVMEventFailed: (s_chain?: Opt<string>, si_event?: Opt<string>, s_type?: Opt<string>) => EncodedAxelarEvmEVMEventFailed;
/**
 * Encodes a `EVMEventRetryFailed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEVMEventRetryFailed: (s_chain?: Opt<string>, si_event?: Opt<string>, s_type?: Opt<string>) => EncodedAxelarEvmEVMEventRetryFailed;
/**
 * Encodes a `ContractCallApproved` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param atu8_command_id - `command_id`:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmContractCallApproved: (s_chain?: Opt<string>, si_event?: Opt<string>, atu8_command_id?: Opt<Uint8Array>, sa_sender?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_contract?: Opt<WeakAccountAddr>, atu8_payload_hash?: Opt<Uint8Array>) => EncodedAxelarEvmContractCallApproved;
/**
 * Encodes a `ContractCallFailed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_msg - `msg_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmContractCallFailed: (s_chain?: Opt<string>, si_msg?: Opt<string>) => EncodedAxelarEvmContractCallFailed;
/**
 * Encodes a `ContractCallWithMintApproved` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param atu8_command_id - `command_id`:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmContractCallWithMintApproved: (s_chain?: Opt<string>, si_event?: Opt<string>, atu8_command_id?: Opt<Uint8Array>, sa_sender?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_contract?: Opt<WeakAccountAddr>, atu8_payload_hash?: Opt<Uint8Array>, a_asset?: Opt<SlimCoin>) => EncodedAxelarEvmContractCallWithMintApproved;
/**
 * Encodes a `TokenSent` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param sg_transfer_id - `transfer_id`:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmTokenSent: (s_chain?: Opt<string>, si_event?: Opt<string>, sg_transfer_id?: Opt<WeakUint64Str>, sa_sender?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_destination?: Opt<WeakAccountAddr>, a_asset?: Opt<SlimCoin>) => EncodedAxelarEvmTokenSent;
/**
 * Encodes a `MintCommand` protobuf message:
 * @param s_chain - `chain`:
 * @param sg_transfer_id - `transfer_id`:
 * @param atu8_command_id - `command_id`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmMintCommand: (s_chain?: Opt<string>, sg_transfer_id?: Opt<WeakUint64Str>, atu8_command_id?: Opt<Uint8Array>, s_destination_chain?: Opt<string>, sa_destination?: Opt<WeakAccountAddr>, a_asset?: Opt<SlimCoin>) => EncodedAxelarEvmMintCommand;
/**
 * Encodes a `BurnCommand` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_command_id - `command_id`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_deposit - `deposit_address`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBurnCommand: (s_chain?: Opt<string>, atu8_command_id?: Opt<Uint8Array>, s_destination_chain?: Opt<string>, sa_deposit?: Opt<WeakAccountAddr>, s_asset?: Opt<string>) => EncodedAxelarEvmBurnCommand;
/**
 * A decoded protobuf PollFailed message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export type DecodedAxelarEvmPollFailed = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    sg_poll_id?: CwUint64
];
/**
 * Decodes a protobuf PollFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollFailed}
 */
export declare const decodeAxelarEvmPollFailed: (atu8_payload: Uint8Array) => DecodedAxelarEvmPollFailed;
/**
 * A decoded protobuf PollExpired message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export type DecodedAxelarEvmPollExpired = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    sg_poll_id?: CwUint64
];
/**
 * Decodes a protobuf PollExpired message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollExpired}
 */
export declare const decodeAxelarEvmPollExpired: (atu8_payload: Uint8Array) => DecodedAxelarEvmPollExpired;
/**
 * A decoded protobuf PollCompleted message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export type DecodedAxelarEvmPollCompleted = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    sg_poll_id?: CwUint64
];
/**
 * Decodes a protobuf PollCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollCompleted}
 */
export declare const decodeAxelarEvmPollCompleted: (atu8_payload: Uint8Array) => DecodedAxelarEvmPollCompleted;
/**
 * A decoded protobuf NoEventsConfirmed message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export type DecodedAxelarEvmNoEventsConfirmed = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    sg_poll_id?: CwUint64
];
/**
 * Decodes a protobuf NoEventsConfirmed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmNoEventsConfirmed}
 */
export declare const decodeAxelarEvmNoEventsConfirmed: (atu8_payload: Uint8Array) => DecodedAxelarEvmNoEventsConfirmed;
/**
 * A decoded protobuf ConfirmKeyTransferStarted message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export type DecodedAxelarEvmConfirmKeyTransferStarted = [
    s_chain?: string,
    atu8_tx_id?: Uint8Array,
    atu8_gateway_address?: Uint8Array,
    sg_confirmation_height?: CwUint64,
    a_participants?: DecodedAxelarVoteExportedPollParticipants
];
/**
 * Decodes a protobuf ConfirmKeyTransferStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmKeyTransferStarted}
 */
export declare const decodeAxelarEvmConfirmKeyTransferStarted: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmKeyTransferStarted;
/**
 * A decoded protobuf ConfirmGatewayTxStarted message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export type DecodedAxelarEvmConfirmGatewayTxStarted = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    atu8_gateway_address?: Uint8Array,
    sg_confirmation_height?: CwUint64,
    a_participants?: DecodedAxelarVoteExportedPollParticipants
];
/**
 * Decodes a protobuf ConfirmGatewayTxStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxStarted}
 */
export declare const decodeAxelarEvmConfirmGatewayTxStarted: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmGatewayTxStarted;
/**
 * A decoded protobuf PollMapping message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: poll_id -
 */
export type DecodedAxelarEvmPollMapping = [
    atu8_tx_id?: Uint8Array,
    sg_poll_id?: CwUint64
];
/**
 * Decodes a protobuf PollMapping message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollMapping}
 */
export declare const decodeAxelarEvmPollMapping: (atu8_payload: Uint8Array) => DecodedAxelarEvmPollMapping;
/**
 * A decoded protobuf ConfirmGatewayTxsStarted message
 *
 * Tuple where:
 *   - 0: poll_mappings -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export type DecodedAxelarEvmConfirmGatewayTxsStarted = [
    a_poll_mappings?: DecodedAxelarEvmPollMapping[],
    s_chain?: string,
    atu8_gateway_address?: Uint8Array,
    sg_confirmation_height?: CwUint64,
    a_participants?: Uint8Array[]
];
/**
 * Decodes a protobuf ConfirmGatewayTxsStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxsStarted}
 */
export declare const decodeAxelarEvmConfirmGatewayTxsStarted: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmGatewayTxsStarted;
/**
 * A decoded protobuf ConfirmDepositStarted message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: deposit_address -
 *   - 3: token_address -
 *   - 4: confirmation_height -
 *   - 5: participants -
 *   - 6: asset -
 */
export type DecodedAxelarEvmConfirmDepositStarted = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    atu8_deposit_address?: Uint8Array,
    atu8_token_address?: Uint8Array,
    sg_confirmation_height?: CwUint64,
    a_participants?: DecodedAxelarVoteExportedPollParticipants,
    s_asset?: string
];
/**
 * Decodes a protobuf ConfirmDepositStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmDepositStarted}
 */
export declare const decodeAxelarEvmConfirmDepositStarted: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmDepositStarted;
/**
 * A decoded protobuf ConfirmTokenStarted message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: token_address -
 *   - 4: token_details -
 *   - 5: confirmation_height -
 *   - 6: participants -
 */
export type DecodedAxelarEvmConfirmTokenStarted = [
    atu8_tx_id?: Uint8Array,
    s_chain?: string,
    atu8_gateway_address?: Uint8Array,
    atu8_token_address?: Uint8Array,
    a_token_details?: DecodedAxelarEvmTokenDetails,
    sg_confirmation_height?: CwUint64,
    a_participants?: DecodedAxelarVoteExportedPollParticipants
];
/**
 * Decodes a protobuf ConfirmTokenStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmTokenStarted}
 */
export declare const decodeAxelarEvmConfirmTokenStarted: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmTokenStarted;
/**
 * A decoded protobuf ChainAdded message
 *
 * Alias for: chain -
 */
export type DecodedAxelarEvmChainAdded = [
    s_chain?: string
];
/**
 * Decodes a protobuf ChainAdded message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmChainAdded}
 */
export declare const decodeAxelarEvmChainAdded: (atu8_payload: Uint8Array) => DecodedAxelarEvmChainAdded;
/**
 * A decoded protobuf CommandBatchSigned message
 *
 * Tuple where:
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export type DecodedAxelarEvmCommandBatchSigned = [
    w_0?: undefined,
    s_chain?: string,
    atu8_command_batch_id?: Uint8Array
];
/**
 * Decodes a protobuf CommandBatchSigned message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmCommandBatchSigned}
 */
export declare const decodeAxelarEvmCommandBatchSigned: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmCommandBatchSigned;
/**
 * A decoded protobuf CommandBatchAborted message
 *
 * Tuple where:
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export type DecodedAxelarEvmCommandBatchAborted = [
    w_0?: undefined,
    s_chain?: string,
    atu8_command_batch_id?: Uint8Array
];
/**
 * Decodes a protobuf CommandBatchAborted message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmCommandBatchAborted}
 */
export declare const decodeAxelarEvmCommandBatchAborted: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmCommandBatchAborted;
/**
 * A decoded protobuf EVMEventConfirmed message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export type DecodedAxelarEvmEVMEventConfirmed = [
    s_chain?: string,
    si_event?: string,
    s_type?: string
];
/**
 * Decodes a protobuf EVMEventConfirmed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventConfirmed}
 */
export declare const decodeAxelarEvmEVMEventConfirmed: (atu8_payload: Uint8Array) => DecodedAxelarEvmEVMEventConfirmed;
/**
 * A decoded protobuf EVMEventCompleted message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export type DecodedAxelarEvmEVMEventCompleted = [
    s_chain?: string,
    si_event?: string,
    s_type?: string
];
/**
 * Decodes a protobuf EVMEventCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventCompleted}
 */
export declare const decodeAxelarEvmEVMEventCompleted: (atu8_payload: Uint8Array) => DecodedAxelarEvmEVMEventCompleted;
/**
 * A decoded protobuf EVMEventFailed message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export type DecodedAxelarEvmEVMEventFailed = [
    s_chain?: string,
    si_event?: string,
    s_type?: string
];
/**
 * Decodes a protobuf EVMEventFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventFailed}
 */
export declare const decodeAxelarEvmEVMEventFailed: (atu8_payload: Uint8Array) => DecodedAxelarEvmEVMEventFailed;
/**
 * A decoded protobuf EVMEventRetryFailed message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export type DecodedAxelarEvmEVMEventRetryFailed = [
    s_chain?: string,
    si_event?: string,
    s_type?: string
];
/**
 * Decodes a protobuf EVMEventRetryFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventRetryFailed}
 */
export declare const decodeAxelarEvmEVMEventRetryFailed: (atu8_payload: Uint8Array) => DecodedAxelarEvmEVMEventRetryFailed;
/**
 * A decoded protobuf ContractCallApproved message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: command_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: contract_address -
 *   - 6: payload_hash -
 */
export type DecodedAxelarEvmContractCallApproved = [
    s_chain?: string,
    si_event?: string,
    atu8_command_id?: Uint8Array,
    sa_sender?: CwAccountAddr,
    s_destination_chain?: string,
    sa_contract?: CwAccountAddr,
    atu8_payload_hash?: Uint8Array
];
/**
 * Decodes a protobuf ContractCallApproved message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmContractCallApproved}
 */
export declare const decodeAxelarEvmContractCallApproved: (atu8_payload: Uint8Array) => DecodedAxelarEvmContractCallApproved;
/**
 * A decoded protobuf ContractCallFailed message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: msg_id -
 */
export type DecodedAxelarEvmContractCallFailed = [
    s_chain?: string,
    si_msg?: string
];
/**
 * Decodes a protobuf ContractCallFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmContractCallFailed}
 */
export declare const decodeAxelarEvmContractCallFailed: (atu8_payload: Uint8Array) => DecodedAxelarEvmContractCallFailed;
/**
 * A decoded protobuf ContractCallWithMintApproved message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: command_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: contract_address -
 *   - 6: payload_hash -
 *   - 7: asset -
 */
export type DecodedAxelarEvmContractCallWithMintApproved = [
    s_chain?: string,
    si_event?: string,
    atu8_command_id?: Uint8Array,
    sa_sender?: CwAccountAddr,
    s_destination_chain?: string,
    sa_contract?: CwAccountAddr,
    atu8_payload_hash?: Uint8Array,
    a_asset?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf ContractCallWithMintApproved message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmContractCallWithMintApproved}
 */
export declare const decodeAxelarEvmContractCallWithMintApproved: (atu8_payload: Uint8Array) => DecodedAxelarEvmContractCallWithMintApproved;
/**
 * A decoded protobuf TokenSent message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: transfer_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: destination_address -
 *   - 6: asset -
 */
export type DecodedAxelarEvmTokenSent = [
    s_chain?: string,
    si_event?: string,
    sg_transfer_id?: CwUint64,
    sa_sender?: CwAccountAddr,
    s_destination_chain?: string,
    sa_destination?: CwAccountAddr,
    a_asset?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf TokenSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTokenSent}
 */
export declare const decodeAxelarEvmTokenSent: (atu8_payload: Uint8Array) => DecodedAxelarEvmTokenSent;
/**
 * A decoded protobuf MintCommand message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: transfer_id -
 *   - 2: command_id -
 *   - 3: destination_chain -
 *   - 4: destination_address -
 *   - 5: asset -
 */
export type DecodedAxelarEvmMintCommand = [
    s_chain?: string,
    sg_transfer_id?: CwUint64,
    atu8_command_id?: Uint8Array,
    s_destination_chain?: string,
    sa_destination?: CwAccountAddr,
    a_asset?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf MintCommand message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmMintCommand}
 */
export declare const decodeAxelarEvmMintCommand: (atu8_payload: Uint8Array) => DecodedAxelarEvmMintCommand;
/**
 * A decoded protobuf BurnCommand message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: command_id -
 *   - 2: destination_chain -
 *   - 3: deposit_address -
 *   - 4: asset -
 */
export type DecodedAxelarEvmBurnCommand = [
    s_chain?: string,
    atu8_command_id?: Uint8Array,
    s_destination_chain?: string,
    sa_deposit?: CwAccountAddr,
    s_asset?: string
];
/**
 * Decodes a protobuf BurnCommand message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBurnCommand}
 */
export declare const decodeAxelarEvmBurnCommand: (atu8_payload: Uint8Array) => DecodedAxelarEvmBurnCommand;
/**
 * Destructures the fields of a {@link AxelarEvmPollFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export declare const destructAxelarEvmPollFailed: (g_struct: AxelarEvmPollFailed) => [tx_id?: Uint8Array, chain?: string, poll_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_FAILED = "/axelar.evm.v1beta1.PollFailed";
/**
 * JSON serialization of `axelar.evm.v1beta1.PollFailed` -
 */
export type AxelarEvmPollFailed = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    poll_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPollExpired} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export declare const destructAxelarEvmPollExpired: (g_struct: AxelarEvmPollExpired) => [tx_id?: Uint8Array, chain?: string, poll_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_EXPIRED = "/axelar.evm.v1beta1.PollExpired";
/**
 * JSON serialization of `axelar.evm.v1beta1.PollExpired` -
 */
export type AxelarEvmPollExpired = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    poll_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPollCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export declare const destructAxelarEvmPollCompleted: (g_struct: AxelarEvmPollCompleted) => [tx_id?: Uint8Array, chain?: string, poll_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_COMPLETED = "/axelar.evm.v1beta1.PollCompleted";
/**
 * JSON serialization of `axelar.evm.v1beta1.PollCompleted` -
 */
export type AxelarEvmPollCompleted = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    poll_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmNoEventsConfirmed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export declare const destructAxelarEvmNoEventsConfirmed: (g_struct: AxelarEvmNoEventsConfirmed) => [tx_id?: Uint8Array, chain?: string, poll_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_NO_EVENTS_CONFIRMED = "/axelar.evm.v1beta1.NoEventsConfirmed";
/**
 * JSON serialization of `axelar.evm.v1beta1.NoEventsConfirmed` -
 */
export type AxelarEvmNoEventsConfirmed = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    poll_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmKeyTransferStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export declare const destructAxelarEvmConfirmKeyTransferStarted: (g_struct: AxelarEvmConfirmKeyTransferStarted) => [chain?: string, tx_id?: Uint8Array, gateway_address?: Uint8Array, confirmation_height?: CwUint64, participants?: AxelarVoteExportedPollParticipants];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_KEY_TRANSFER_STARTED = "/axelar.evm.v1beta1.ConfirmKeyTransferStarted";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmKeyTransferStarted` -
 */
export type AxelarEvmConfirmKeyTransferStarted = {
    chain?: string | undefined;
    tx_id?: CwBase64 | undefined;
    gateway_address?: CwBase64 | undefined;
    confirmation_height?: CwUint64 | undefined;
    participants?: AxelarVoteExportedPollParticipants | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export declare const destructAxelarEvmConfirmGatewayTxStarted: (g_struct: AxelarEvmConfirmGatewayTxStarted) => [tx_id?: Uint8Array, chain?: string, gateway_address?: Uint8Array, confirmation_height?: CwUint64, participants?: AxelarVoteExportedPollParticipants];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TX_STARTED = "/axelar.evm.v1beta1.ConfirmGatewayTxStarted";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmGatewayTxStarted` -
 */
export type AxelarEvmConfirmGatewayTxStarted = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    gateway_address?: CwBase64 | undefined;
    confirmation_height?: CwUint64 | undefined;
    participants?: AxelarVoteExportedPollParticipants | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPollMapping} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: poll_id -
 */
export declare const destructAxelarEvmPollMapping: (g_struct: AxelarEvmPollMapping) => [tx_id?: Uint8Array, poll_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_MAPPING = "/axelar.evm.v1beta1.PollMapping";
/**
 * JSON serialization of `axelar.evm.v1beta1.PollMapping` -
 */
export type AxelarEvmPollMapping = {
    tx_id?: CwBase64 | undefined;
    poll_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxsStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: poll_mappings -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export declare const destructAxelarEvmConfirmGatewayTxsStarted: (g_struct: AxelarEvmConfirmGatewayTxsStarted) => [poll_mappings?: AxelarEvmPollMapping[], chain?: string, gateway_address?: Uint8Array, confirmation_height?: CwUint64, participants?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TXS_STARTED = "/axelar.evm.v1beta1.ConfirmGatewayTxsStarted";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmGatewayTxsStarted` -
 */
export type AxelarEvmConfirmGatewayTxsStarted = {
    poll_mappings?: AxelarEvmPollMapping[] | undefined;
    chain?: string | undefined;
    gateway_address?: CwBase64 | undefined;
    confirmation_height?: CwUint64 | undefined;
    participants?: CwBase64[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmDepositStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: deposit_address -
 *   - 3: token_address -
 *   - 4: confirmation_height -
 *   - 5: participants -
 *   - 6: asset -
 */
export declare const destructAxelarEvmConfirmDepositStarted: (g_struct: AxelarEvmConfirmDepositStarted) => [tx_id?: Uint8Array, chain?: string, deposit_address?: Uint8Array, token_address?: Uint8Array, confirmation_height?: CwUint64, participants?: AxelarVoteExportedPollParticipants, asset?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_DEPOSIT_STARTED = "/axelar.evm.v1beta1.ConfirmDepositStarted";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmDepositStarted` -
 */
export type AxelarEvmConfirmDepositStarted = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    deposit_address?: CwBase64 | undefined;
    token_address?: CwBase64 | undefined;
    confirmation_height?: CwUint64 | undefined;
    participants?: AxelarVoteExportedPollParticipants | undefined;
    asset?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmTokenStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: token_address -
 *   - 4: token_details -
 *   - 5: confirmation_height -
 *   - 6: participants -
 */
export declare const destructAxelarEvmConfirmTokenStarted: (g_struct: AxelarEvmConfirmTokenStarted) => [tx_id?: Uint8Array, chain?: string, gateway_address?: Uint8Array, token_address?: Uint8Array, token_details?: AxelarEvmTokenDetails, confirmation_height?: CwUint64, participants?: AxelarVoteExportedPollParticipants];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_TOKEN_STARTED = "/axelar.evm.v1beta1.ConfirmTokenStarted";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmTokenStarted` -
 */
export type AxelarEvmConfirmTokenStarted = {
    tx_id?: CwBase64 | undefined;
    chain?: string | undefined;
    gateway_address?: CwBase64 | undefined;
    token_address?: CwBase64 | undefined;
    token_details?: AxelarEvmTokenDetails | undefined;
    confirmation_height?: CwUint64 | undefined;
    participants?: AxelarVoteExportedPollParticipants | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmChainAdded} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarEvmChainAdded: (g_struct: AxelarEvmChainAdded) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CHAIN_ADDED = "/axelar.evm.v1beta1.ChainAdded";
/**
 * JSON serialization of `axelar.evm.v1beta1.ChainAdded` -
 */
export type AxelarEvmChainAdded = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommandBatchSigned} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export declare const destructAxelarEvmCommandBatchSigned: (g_struct: AxelarEvmCommandBatchSigned) => [EMPTY?: void, chain?: string, command_batch_id?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_BATCH_SIGNED = "/axelar.evm.v1beta1.CommandBatchSigned";
/**
 * JSON serialization of `axelar.evm.v1beta1.CommandBatchSigned` -
 */
export type AxelarEvmCommandBatchSigned = {
    chain?: string | undefined;
    command_batch_id?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommandBatchAborted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export declare const destructAxelarEvmCommandBatchAborted: (g_struct: AxelarEvmCommandBatchAborted) => [EMPTY?: void, chain?: string, command_batch_id?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_BATCH_ABORTED = "/axelar.evm.v1beta1.CommandBatchAborted";
/**
 * JSON serialization of `axelar.evm.v1beta1.CommandBatchAborted` -
 */
export type AxelarEvmCommandBatchAborted = {
    chain?: string | undefined;
    command_batch_id?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventConfirmed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export declare const destructAxelarEvmEVMEventConfirmed: (g_struct: AxelarEvmEVMEventConfirmed) => [chain?: string, event_id?: string, type_?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_CONFIRMED = "/axelar.evm.v1beta1.EVMEventConfirmed";
/**
 * JSON serialization of `axelar.evm.v1beta1.EVMEventConfirmed` -
 */
export type AxelarEvmEVMEventConfirmed = {
    chain?: string | undefined;
    event_id?: string | undefined;
    type?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export declare const destructAxelarEvmEVMEventCompleted: (g_struct: AxelarEvmEVMEventCompleted) => [chain?: string, event_id?: string, type_?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_COMPLETED = "/axelar.evm.v1beta1.EVMEventCompleted";
/**
 * JSON serialization of `axelar.evm.v1beta1.EVMEventCompleted` -
 */
export type AxelarEvmEVMEventCompleted = {
    chain?: string | undefined;
    event_id?: string | undefined;
    type?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export declare const destructAxelarEvmEVMEventFailed: (g_struct: AxelarEvmEVMEventFailed) => [chain?: string, event_id?: string, type_?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_FAILED = "/axelar.evm.v1beta1.EVMEventFailed";
/**
 * JSON serialization of `axelar.evm.v1beta1.EVMEventFailed` -
 */
export type AxelarEvmEVMEventFailed = {
    chain?: string | undefined;
    event_id?: string | undefined;
    type?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventRetryFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export declare const destructAxelarEvmEVMEventRetryFailed: (g_struct: AxelarEvmEVMEventRetryFailed) => [chain?: string, event_id?: string, type_?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_RETRY_FAILED = "/axelar.evm.v1beta1.EVMEventRetryFailed";
/**
 * JSON serialization of `axelar.evm.v1beta1.EVMEventRetryFailed` -
 */
export type AxelarEvmEVMEventRetryFailed = {
    chain?: string | undefined;
    event_id?: string | undefined;
    type?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmContractCallApproved} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: command_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: contract_address -
 *   - 6: payload_hash -
 */
export declare const destructAxelarEvmContractCallApproved: (g_struct: AxelarEvmContractCallApproved) => [chain?: string, event_id?: string, command_id?: Uint8Array, sender?: CwAccountAddr, destination_chain?: string, contract_address?: CwAccountAddr, payload_hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONTRACT_CALL_APPROVED = "/axelar.evm.v1beta1.ContractCallApproved";
/**
 * JSON serialization of `axelar.evm.v1beta1.ContractCallApproved` -
 */
export type AxelarEvmContractCallApproved = {
    chain?: string | undefined;
    event_id?: string | undefined;
    command_id?: CwBase64 | undefined;
    sender?: CwAccountAddr | undefined;
    destination_chain?: string | undefined;
    contract_address?: CwAccountAddr | undefined;
    payload_hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmContractCallFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: msg_id -
 */
export declare const destructAxelarEvmContractCallFailed: (g_struct: AxelarEvmContractCallFailed) => [chain?: string, msg_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONTRACT_CALL_FAILED = "/axelar.evm.v1beta1.ContractCallFailed";
/**
 * JSON serialization of `axelar.evm.v1beta1.ContractCallFailed` -
 */
export type AxelarEvmContractCallFailed = {
    chain?: string | undefined;
    msg_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmContractCallWithMintApproved} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: command_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: contract_address -
 *   - 6: payload_hash -
 *   - 7: asset -
 */
export declare const destructAxelarEvmContractCallWithMintApproved: (g_struct: AxelarEvmContractCallWithMintApproved) => [chain?: string, event_id?: string, command_id?: Uint8Array, sender?: CwAccountAddr, destination_chain?: string, contract_address?: CwAccountAddr, payload_hash?: Uint8Array, asset?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONTRACT_CALL_WITH_MINT_APPROVED = "/axelar.evm.v1beta1.ContractCallWithMintApproved";
/**
 * JSON serialization of `axelar.evm.v1beta1.ContractCallWithMintApproved` -
 */
export type AxelarEvmContractCallWithMintApproved = {
    chain?: string | undefined;
    event_id?: string | undefined;
    command_id?: CwBase64 | undefined;
    sender?: CwAccountAddr | undefined;
    destination_chain?: string | undefined;
    contract_address?: CwAccountAddr | undefined;
    payload_hash?: CwBase64 | undefined;
    asset?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmTokenSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: transfer_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: destination_address -
 *   - 6: asset -
 */
export declare const destructAxelarEvmTokenSent: (g_struct: AxelarEvmTokenSent) => [chain?: string, event_id?: string, transfer_id?: CwUint64, sender?: CwAccountAddr, destination_chain?: string, destination_address?: CwAccountAddr, asset?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_TOKEN_SENT = "/axelar.evm.v1beta1.TokenSent";
/**
 * JSON serialization of `axelar.evm.v1beta1.TokenSent` -
 */
export type AxelarEvmTokenSent = {
    chain?: string | undefined;
    event_id?: string | undefined;
    transfer_id?: CwUint64 | undefined;
    sender?: CwAccountAddr | undefined;
    destination_chain?: string | undefined;
    destination_address?: CwAccountAddr | undefined;
    asset?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmMintCommand} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: transfer_id -
 *   - 2: command_id -
 *   - 3: destination_chain -
 *   - 4: destination_address -
 *   - 5: asset -
 */
export declare const destructAxelarEvmMintCommand: (g_struct: AxelarEvmMintCommand) => [chain?: string, transfer_id?: CwUint64, command_id?: Uint8Array, destination_chain?: string, destination_address?: CwAccountAddr, asset?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_MINT_COMMAND = "/axelar.evm.v1beta1.MintCommand";
/**
 * JSON serialization of `axelar.evm.v1beta1.MintCommand` -
 */
export type AxelarEvmMintCommand = {
    chain?: string | undefined;
    transfer_id?: CwUint64 | undefined;
    command_id?: CwBase64 | undefined;
    destination_chain?: string | undefined;
    destination_address?: CwAccountAddr | undefined;
    asset?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBurnCommand} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: command_id -
 *   - 2: destination_chain -
 *   - 3: deposit_address -
 *   - 4: asset -
 */
export declare const destructAxelarEvmBurnCommand: (g_struct: AxelarEvmBurnCommand) => [chain?: string, command_id?: Uint8Array, destination_chain?: string, deposit_address?: CwAccountAddr, asset?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BURN_COMMAND = "/axelar.evm.v1beta1.BurnCommand";
/**
 * JSON serialization of `axelar.evm.v1beta1.BurnCommand` -
 */
export type AxelarEvmBurnCommand = {
    chain?: string | undefined;
    command_id?: CwBase64 | undefined;
    destination_chain?: string | undefined;
    deposit_address?: CwAccountAddr | undefined;
    asset?: string | undefined;
};
