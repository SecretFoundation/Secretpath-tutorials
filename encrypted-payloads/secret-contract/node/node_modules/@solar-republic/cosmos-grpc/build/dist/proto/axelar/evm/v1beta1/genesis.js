/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAxelarEvmParams } from './params.js';
import { decodeAxelarEvmBurnerInfo, decodeAxelarEvmERC20Deposit, decodeAxelarEvmCommandBatchMetadata, decodeAxelarEvmGateway, decodeAxelarEvmERC20TokenMetadata, decodeAxelarEvmEvent } from './types.js';
import { decodeAxelarUtilsQueueState } from '../../utils/v1beta1/queuer.js';
/**
 * Encodes a `GenesisState` protobuf message: represents the genesis state
 * @param a_chains - `chains`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmGenesisState = (a_chains) => Protobuf() // ...
    .B(a_chains, 3) // Chain[] chains = 3
    .o;
/**
 * Encodes a `Chain` protobuf message:
 * @param g_params - `params`:
 * @param a_burner_infos - `burner_infos`:
 * @param g_command_queue - `command_queue`:
 * @param a_confirmed_deposits - `confirmed_deposits`:
 * @param a_burned_deposits - `burned_deposits`:
 * @param a_command_batches - `command_batches`:
 * @param g_gateway - `gateway`:
 * @param a_tokens - `tokens`:
 * @param a_events - `events`:
 * @param g_confirmed_event_queue - `confirmed_event_queue`:
 * @param a_legacy_confirmed_deposits - `legacy_confirmed_deposits`:
 * @param a_legacy_burned_deposits - `legacy_burned_deposits`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmGenesisStateChain = (atu8_params, a_burner_infos, atu8_command_queue, a_confirmed_deposits, a_burned_deposits, a_command_batches, atu8_gateway, a_tokens, a_events, atu8_confirmed_event_queue, a_legacy_confirmed_deposits, a_legacy_burned_deposits) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_burner_infos) // BurnerInfo[] burner_infos = 2
    .b(atu8_command_queue) // QueueState command_queue = 3
    .B(a_confirmed_deposits) // ERC20Deposit[] confirmed_deposits = 4
    .B(a_burned_deposits) // ERC20Deposit[] burned_deposits = 5
    .B(a_command_batches, 8) // CommandBatchMetadata[] command_batches = 8
    .b(atu8_gateway, 9) // Gateway gateway = 9
    .B(a_tokens, 10) // ERC20TokenMetadata[] tokens = 10
    .B(a_events, 11) // Event[] events = 11
    .b(atu8_confirmed_event_queue, 12) // QueueState confirmed_event_queue = 12
    .B(a_legacy_confirmed_deposits, 13) // ERC20Deposit[] legacy_confirmed_deposits = 13
    .B(a_legacy_burned_deposits, 14) // ERC20Deposit[] legacy_burned_deposits = 14
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmGenesisState}
 */
export const decodeAxelarEvmGenesisState = ((atu8_payload, [, , a_chains] = decode_protobuf(atu8_payload, [0, 0, 0], [0, 0, decodeAxelarEvmGenesisStateChain])) => [__UNDEFINED, __UNDEFINED, a_chains]);
/**
 * Decodes a protobuf Chain message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmGenesisStateChain}
 */
export const decodeAxelarEvmGenesisStateChain = ((atu8_payload, [a_params, a_burner_infos, a_command_queue, a_confirmed_deposits, a_burned_deposits, , , a_command_batches, a_gateway, a_tokens, a_events, a_confirmed_event_queue, a_legacy_confirmed_deposits, a_legacy_burned_deposits] = decode_protobuf(atu8_payload, [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [decodeAxelarEvmParams, decodeAxelarEvmBurnerInfo, decodeAxelarUtilsQueueState, decodeAxelarEvmERC20Deposit, decodeAxelarEvmERC20Deposit, 0, 0, decodeAxelarEvmCommandBatchMetadata, decodeAxelarEvmGateway, decodeAxelarEvmERC20TokenMetadata, decodeAxelarEvmEvent, decodeAxelarUtilsQueueState, decodeAxelarEvmERC20Deposit, decodeAxelarEvmERC20Deposit])) => [a_params, a_burner_infos, a_command_queue, a_confirmed_deposits, a_burned_deposits, __UNDEFINED, __UNDEFINED, a_command_batches, a_gateway, a_tokens, a_events, a_confirmed_event_queue, a_legacy_confirmed_deposits, a_legacy_burned_deposits]);
/**
 * Destructures the fields of a {@link AxelarEvmGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 2: chains -
 */
export const destructAxelarEvmGenesisState = (g_struct) => [__UNDEFINED, __UNDEFINED, g_struct.chains];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_GENESIS_STATE = '/axelar.evm.v1beta1.GenesisState';
/**
 * Destructures the fields of a {@link AxelarEvmGenesisStateChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: burner_infos -
 *   - 2: command_queue -
 *   - 3: confirmed_deposits -
 *   - 4: burned_deposits -
 *   - 7: command_batches -
 *   - 8: gateway -
 *   - 9: tokens -
 *   - 10: events -
 *   - 11: confirmed_event_queue -
 *   - 12: legacy_confirmed_deposits -
 *   - 13: legacy_burned_deposits -
 */
export const destructAxelarEvmGenesisStateChain = (g_struct) => [g_struct.params, g_struct.burner_infos, g_struct.command_queue, g_struct.confirmed_deposits, g_struct.burned_deposits, __UNDEFINED, __UNDEFINED, g_struct.command_batches, g_struct.gateway, g_struct.tokens, g_struct.events, g_struct.confirmed_event_queue, g_struct.legacy_confirmed_deposits, g_struct.legacy_burned_deposits];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_GENESIS_STATE_CHAIN = '/axelar.evm.v1beta1.GenesisState.Chain';
//# sourceMappingURL=genesis.js.map