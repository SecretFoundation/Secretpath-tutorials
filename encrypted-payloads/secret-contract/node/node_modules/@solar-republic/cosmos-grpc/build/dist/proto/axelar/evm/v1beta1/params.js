import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarEvmNetworkInfo } from './types.js';
import { decodeAxelarNexusExportedChain } from '../../nexus/exported/v1beta1/types.js';
import { decodeAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
/**
 * Encodes a `Params` protobuf message: the parameter set for this module
 * @param s_chain - `chain`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param s_network - `network`:
 * @param atu8_token_code - `token_code`:
 * @param atu8_burnable - `burnable`:
 * @param sg_revote_locking_period - `revote_locking_period`:
 * @param a_networks - `networks`:
 * @param g_voting_threshold - `voting_threshold`:
 * @param sg_min_voter_count - `min_voter_count`:
 * @param n_commands_gas_limit - `commands_gas_limit`:
 * @param sg_voting_grace_period - `voting_grace_period`:
 * @param sg_end_blocker_limit - `end_blocker_limit`:
 * @param sg_transfer_limit - `transfer_limit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmParams = (s_chain, sg_confirmation_height, s_network, atu8_token_code, atu8_burnable, sg_revote_locking_period, a_networks, atu8_voting_threshold, sg_min_voter_count, n_commands_gas_limit, sg_voting_grace_period, sg_end_blocker_limit, sg_transfer_limit) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .g(sg_confirmation_height) // uint64 confirmation_height = 2
    .s(s_network) // string network = 3
    .b(atu8_token_code, 5) // bytes token_code = 5
    .b(atu8_burnable, 6) // bytes burnable = 6
    .g(sg_revote_locking_period, 7) // int32 revote_locking_period = 7
    .B(a_networks, 8) // NetworkInfo[] networks = 8
    .b(atu8_voting_threshold, 9) // Threshold voting_threshold = 9
    .g(sg_min_voter_count, 10) // int32 min_voter_count = 10
    .v(n_commands_gas_limit, 11) // uint32 commands_gas_limit = 11
    .g(sg_voting_grace_period, 13) // int32 voting_grace_period = 13
    .g(sg_end_blocker_limit, 14) // int32 end_blocker_limit = 14
    .g(sg_transfer_limit, 15) // uint64 transfer_limit = 15
    .o;
/**
 * Encodes a `PendingChain` protobuf message:
 * @param g_params - `params`:
 * @param g_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmPendingChain = (atu8_params, atu8_chain) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .b(atu8_chain) // Chain chain = 2
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmParams}
 */
export const decodeAxelarEvmParams = ((atu8_payload, [s_chain, sg_confirmation_height, s_network, , atu8_token_code, atu8_burnable, sg_revote_locking_period, a_networks, a_voting_threshold, sg_min_voter_count, n_commands_gas_limit, , sg_voting_grace_period, sg_end_blocker_limit, sg_transfer_limit] = decode_protobuf(atu8_payload, [5, 3, 5, 0, 1, 1, 3, 0, 1, 3, 1, 0, 3, 3, 3], [0, 0, 0, 0, 0, 0, 0, decodeAxelarEvmNetworkInfo, decodeAxelarUtilsThreshold])) => [s_chain, sg_confirmation_height, s_network, __UNDEFINED, atu8_token_code, atu8_burnable, sg_revote_locking_period, a_networks, a_voting_threshold, sg_min_voter_count, n_commands_gas_limit, __UNDEFINED, sg_voting_grace_period, sg_end_blocker_limit, sg_transfer_limit]);
/**
 * Decodes a protobuf PendingChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPendingChain}
 */
export const decodeAxelarEvmPendingChain = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeAxelarEvmParams, decodeAxelarNexusExportedChain]);
/**
 * Destructures the fields of a {@link AxelarEvmParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: confirmation_height -
 *   - 2: network -
 *   - 4: token_code -
 *   - 5: burnable -
 *   - 6: revote_locking_period -
 *   - 7: networks -
 *   - 8: voting_threshold -
 *   - 9: min_voter_count -
 *   - 10: commands_gas_limit -
 *   - 12: voting_grace_period -
 *   - 13: end_blocker_limit -
 *   - 14: transfer_limit -
 */
export const destructAxelarEvmParams = (g_struct) => [g_struct.chain, g_struct.confirmation_height, g_struct.network, __UNDEFINED, safe_base64_to_bytes(g_struct.token_code), safe_base64_to_bytes(g_struct.burnable), g_struct.revote_locking_period, g_struct.networks, g_struct.voting_threshold, g_struct.min_voter_count, g_struct.commands_gas_limit, __UNDEFINED, g_struct.voting_grace_period, g_struct.end_blocker_limit, g_struct.transfer_limit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_PARAMS = '/axelar.evm.v1beta1.Params';
/**
 * Destructures the fields of a {@link AxelarEvmPendingChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: chain -
 */
export const destructAxelarEvmPendingChain = (g_struct) => [g_struct.params, g_struct.chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_PENDING_CHAIN = '/axelar.evm.v1beta1.PendingChain';
//# sourceMappingURL=params.js.map