import type { NaiveHexLower } from '@blake.regalia/belt';
import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwHexLower, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarEvmParams, DecodedAxelarEvmParams } from './params.js';
import type { ProtoEnumAxelarEvmBatchedCommandsStatus, JsonEnumAxelarEvmBatchedCommandsStatus, ProtoEnumAxelarEvmDepositStatus, JsonEnumAxelarEvmDepositStatus, AxelarEvmEvent, DecodedAxelarEvmEvent, AxelarEvmBurnerInfo, DecodedAxelarEvmBurnerInfo, AxelarEvmTokenDetails, DecodedAxelarEvmTokenDetails } from './types.js';
export type EncodedAxelarEvmDepositQueryParams = Encoded<'/axelar.evm.v1beta1.DepositQueryParams'>;
export type EncodedAxelarEvmBatchedCommandsRequest = Encoded<'/axelar.evm.v1beta1.BatchedCommandsRequest'>;
export type EncodedAxelarEvmBatchedCommandsResponse = Encoded<'/axelar.evm.v1beta1.BatchedCommandsResponse'>;
export type EncodedAxelarEvmKeyAddressRequest = Encoded<'/axelar.evm.v1beta1.KeyAddressRequest'>;
export type EncodedAxelarEvmKeyAddressResponse = Encoded<'/axelar.evm.v1beta1.KeyAddressResponse'>;
export type EncodedAxelarEvmQueryTokenAddressResponse = Encoded<'/axelar.evm.v1beta1.QueryTokenAddressResponse'>;
export type EncodedAxelarEvmQueryDepositStateParams = Encoded<'/axelar.evm.v1beta1.QueryDepositStateParams'>;
export type EncodedAxelarEvmDepositStateRequest = Encoded<'/axelar.evm.v1beta1.DepositStateRequest'>;
export type EncodedAxelarEvmDepositStateResponse = Encoded<'/axelar.evm.v1beta1.DepositStateResponse'>;
export type EncodedAxelarEvmEventRequest = Encoded<'/axelar.evm.v1beta1.EventRequest'>;
export type EncodedAxelarEvmEventResponse = Encoded<'/axelar.evm.v1beta1.EventResponse'>;
export type EncodedAxelarEvmQueryBurnerAddressResponse = Encoded<'/axelar.evm.v1beta1.QueryBurnerAddressResponse'>;
export type EncodedAxelarEvmChainsRequest = Encoded<'/axelar.evm.v1beta1.ChainsRequest'>;
export type EncodedAxelarEvmChainsResponse = Encoded<'/axelar.evm.v1beta1.ChainsResponse'>;
export type EncodedAxelarEvmCommandRequest = Encoded<'/axelar.evm.v1beta1.CommandRequest'>;
export type EncodedAxelarEvmCommandResponse = Encoded<'/axelar.evm.v1beta1.CommandResponse'>;
export type EncodedAxelarEvmPendingCommandsRequest = Encoded<'/axelar.evm.v1beta1.PendingCommandsRequest'>;
export type EncodedAxelarEvmPendingCommandsResponse = Encoded<'/axelar.evm.v1beta1.PendingCommandsResponse'>;
export type EncodedAxelarEvmQueryCommandResponse = Encoded<'/axelar.evm.v1beta1.QueryCommandResponse'>;
export type EncodedAxelarEvmBurnerInfoRequest = Encoded<'/axelar.evm.v1beta1.BurnerInfoRequest'>;
export type EncodedAxelarEvmBurnerInfoResponse = Encoded<'/axelar.evm.v1beta1.BurnerInfoResponse'>;
export type EncodedAxelarEvmConfirmationHeightRequest = Encoded<'/axelar.evm.v1beta1.ConfirmationHeightRequest'>;
export type EncodedAxelarEvmConfirmationHeightResponse = Encoded<'/axelar.evm.v1beta1.ConfirmationHeightResponse'>;
export type EncodedAxelarEvmGatewayAddressRequest = Encoded<'/axelar.evm.v1beta1.GatewayAddressRequest'>;
export type EncodedAxelarEvmGatewayAddressResponse = Encoded<'/axelar.evm.v1beta1.GatewayAddressResponse'>;
export type EncodedAxelarEvmBytecodeRequest = Encoded<'/axelar.evm.v1beta1.BytecodeRequest'>;
export type EncodedAxelarEvmBytecodeResponse = Encoded<'/axelar.evm.v1beta1.BytecodeResponse'>;
export type EncodedAxelarEvmERC20TokensRequest = Encoded<'/axelar.evm.v1beta1.ERC20TokensRequest'>;
export type EncodedAxelarEvmERC20TokensResponse = Encoded<'/axelar.evm.v1beta1.ERC20TokensResponse'>;
export type EncodedAxelarEvmTokenInfoRequest = Encoded<'/axelar.evm.v1beta1.TokenInfoRequest'>;
export type EncodedAxelarEvmTokenInfoResponse = Encoded<'/axelar.evm.v1beta1.TokenInfoResponse'>;
export type EncodedAxelarEvmProof = Encoded<'/axelar.evm.v1beta1.Proof'>;
export type EncodedAxelarEvmParamsRequest = Encoded<'/axelar.evm.v1beta1.ParamsRequest'>;
export type EncodedAxelarEvmParamsResponse = Encoded<'/axelar.evm.v1beta1.ParamsResponse'>;
export type EncodedAxelarEvmKeyAddressResponseWeightedAddress = Encoded<'/axelar.evm.v1beta1.KeyAddressResponse.WeightedAddress'>;
export type EncodedAxelarEvmCommandResponseParamsEntry = Encoded<'/axelar.evm.v1beta1.CommandResponse.ParamsEntry'>;
export type EncodedAxelarEvmQueryCommandResponseParamsEntry = Encoded<'/axelar.evm.v1beta1.QueryCommandResponse.ParamsEntry'>;
export type EncodedAxelarEvmERC20TokensResponseToken = Encoded<'/axelar.evm.v1beta1.ERC20TokensResponse.Token'>;
/**
 * Encodes a `DepositQueryParams` protobuf message: describe the parameters used to query for an EVM deposit address
 * @param sa_address - `address`:
 * @param s_asset - `asset`:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmDepositQueryParams: (sa_address?: Opt<WeakAccountAddr>, s_asset?: Opt<string>, s_chain?: Opt<string>) => EncodedAxelarEvmDepositQueryParams;
/**
 * Encodes a `BatchedCommandsRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param s_id - `id`: defines an optional id for the commandsbatch. If not specified the latest will be returned
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBatchedCommandsRequest: (s_chain?: Opt<string>, s_id?: Opt<string>) => EncodedAxelarEvmBatchedCommandsRequest;
/**
 * Encodes a `BatchedCommandsResponse` protobuf message:
 * @param s_id - `id`:
 * @param s_data - `data`:
 * @param xc_status - `status`:
 * @param si_key - `key_id`:
 * @param s_execute_data - `execute_data`:
 * @param si_prev_batched_commands - `prev_batched_commands_id`:
 * @param a_command_ids - `command_ids`:
 * @param g_proof - `proof`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBatchedCommandsResponse: (s_id?: Opt<string>, s_data?: Opt<string>, xc_status?: Opt<ProtoEnumAxelarEvmBatchedCommandsStatus>, si_key?: Opt<string>, s_execute_data?: Opt<string>, si_prev_batched_commands?: Opt<string>, a_command_ids?: Opt<string[]>, atu8_proof?: Opt<Encoded<'/axelar.evm.v1beta1.Proof'>>) => EncodedAxelarEvmBatchedCommandsResponse;
/**
 * Encodes a `KeyAddressRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmKeyAddressRequest: (s_chain?: Opt<string>, si_key?: Opt<string>) => EncodedAxelarEvmKeyAddressRequest;
/**
 * Encodes a `KeyAddressResponse` protobuf message:
 * @param si_key - `key_id`:
 * @param a_addresses - `addresses`:
 * @param s_threshold - `threshold`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmKeyAddressResponse: (si_key?: Opt<string>, a_addresses?: Opt<Encoded<'/axelar.evm.v1beta1.KeyAddressResponse.WeightedAddress'>[]>, s_threshold?: Opt<string>) => EncodedAxelarEvmKeyAddressResponse;
/**
 * Encodes a `QueryTokenAddressResponse` protobuf message:
 * @param sa_address - `address`:
 * @param b_confirmed - `confirmed`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmQueryTokenAddressResponse: (sa_address?: Opt<WeakAccountAddr>, b_confirmed?: Opt<boolean | 0 | 1>) => EncodedAxelarEvmQueryTokenAddressResponse;
/**
 * Encodes a `QueryDepositStateParams` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param atu8_burner_address - `burner_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmQueryDepositStateParams: (atu8_tx_id?: Opt<Uint8Array>, atu8_burner_address?: Opt<Uint8Array>) => EncodedAxelarEvmQueryDepositStateParams;
/**
 * Encodes a `DepositStateRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmDepositStateRequest: (s_chain?: Opt<string>, atu8_params?: Opt<Encoded<'/axelar.evm.v1beta1.QueryDepositStateParams'>>) => EncodedAxelarEvmDepositStateRequest;
/**
 * Encodes a `DepositStateResponse` protobuf message:
 * @param xc_status - `status`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmDepositStateResponse: (xc_status?: Opt<ProtoEnumAxelarEvmDepositStatus>) => EncodedAxelarEvmDepositStateResponse;
/**
 * Encodes a `EventRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventRequest: (s_chain?: Opt<string>, si_event?: Opt<string>) => EncodedAxelarEvmEventRequest;
/**
 * Encodes a `EventResponse` protobuf message:
 * @param g_event - `event`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventResponse: (atu8_event?: Opt<Encoded<'/axelar.evm.v1beta1.Event'>>) => EncodedAxelarEvmEventResponse;
/**
 * Encodes a `QueryBurnerAddressResponse` protobuf message:
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmQueryBurnerAddressResponse: (sa_address?: Opt<WeakAccountAddr>) => EncodedAxelarEvmQueryBurnerAddressResponse;
/**
 * Encodes a `ChainsRequest` protobuf message:
 * @param xc_status - `status`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmChainsRequest: (xc_status?: Opt<ProtoEnumAxelarEvmChainStatus>) => EncodedAxelarEvmChainsRequest;
/**
 * Encodes a `ChainsResponse` protobuf message:
 * @param a_chains - `chains`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmChainsResponse: (a_chains?: Opt<string[]>) => EncodedAxelarEvmChainsResponse;
/**
 * Encodes a `CommandRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommandRequest: (s_chain?: Opt<string>, s_id?: Opt<string>) => EncodedAxelarEvmCommandRequest;
/**
 * Encodes a `CommandResponse` protobuf message:
 * @param s_id - `id`:
 * @param s_type - `type`:
 * @param a_params - `params`:
 * @param si_key - `key_id`:
 * @param n_max_gas_cost - `max_gas_cost`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommandResponse: (s_id?: Opt<string>, s_type?: Opt<string>, a_params?: Opt<Encoded<'/axelar.evm.v1beta1.CommandResponse.ParamsEntry'>[]>, si_key?: Opt<string>, n_max_gas_cost?: Opt<number>) => EncodedAxelarEvmCommandResponse;
/**
 * Encodes a `PendingCommandsRequest` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPendingCommandsRequest: (s_chain?: Opt<string>) => EncodedAxelarEvmPendingCommandsRequest;
/**
 * Encodes a `PendingCommandsResponse` protobuf message:
 * @param a_commands - `commands`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPendingCommandsResponse: (a_commands?: Opt<Encoded<'/axelar.evm.v1beta1.QueryCommandResponse'>[]>) => EncodedAxelarEvmPendingCommandsResponse;
/**
 * Encodes a `QueryCommandResponse` protobuf message:
 * @param s_id - `id`:
 * @param s_type - `type`:
 * @param a_params - `params`:
 * @param si_key - `key_id`:
 * @param n_max_gas_cost - `max_gas_cost`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmQueryCommandResponse: (s_id?: Opt<string>, s_type?: Opt<string>, a_params?: Opt<Encoded<'/axelar.evm.v1beta1.QueryCommandResponse.ParamsEntry'>[]>, si_key?: Opt<string>, n_max_gas_cost?: Opt<number>) => EncodedAxelarEvmQueryCommandResponse;
/**
 * Encodes a `BurnerInfoRequest` protobuf message:
 * @param atu8_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBurnerInfoRequest: (atu8_address?: Opt<Uint8Array>) => EncodedAxelarEvmBurnerInfoRequest;
/**
 * Encodes a `BurnerInfoResponse` protobuf message:
 * @param s_chain - `chain`:
 * @param g_burner_info - `burner_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBurnerInfoResponse: (s_chain?: Opt<string>, atu8_burner_info?: Opt<Encoded<'/axelar.evm.v1beta1.BurnerInfo'>>) => EncodedAxelarEvmBurnerInfoResponse;
/**
 * Encodes a `ConfirmationHeightRequest` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmationHeightRequest: (s_chain?: Opt<string>) => EncodedAxelarEvmConfirmationHeightRequest;
/**
 * Encodes a `ConfirmationHeightResponse` protobuf message:
 * @param sg_height - `height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmConfirmationHeightResponse: (sg_height?: Opt<WeakUint64Str>) => EncodedAxelarEvmConfirmationHeightResponse;
/**
 * Encodes a `GatewayAddressRequest` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmGatewayAddressRequest: (s_chain?: Opt<string>) => EncodedAxelarEvmGatewayAddressRequest;
/**
 * Encodes a `GatewayAddressResponse` protobuf message:
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmGatewayAddressResponse: (sa_address?: Opt<WeakAccountAddr>) => EncodedAxelarEvmGatewayAddressResponse;
/**
 * Encodes a `BytecodeRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param s_contract - `contract`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBytecodeRequest: (s_chain?: Opt<string>, s_contract?: Opt<string>) => EncodedAxelarEvmBytecodeRequest;
/**
 * Encodes a `BytecodeResponse` protobuf message:
 * @param s_bytecode - `bytecode`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBytecodeResponse: (s_bytecode?: Opt<string>) => EncodedAxelarEvmBytecodeResponse;
/**
 * Encodes a `ERC20TokensRequest` protobuf message: describes the chain for which the type of ERC20 tokens are requested.
 * @param s_chain - `chain`:
 * @param xc_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmERC20TokensRequest: (s_chain?: Opt<string>, xc_type?: Opt<ProtoEnumAxelarEvmTokenType>) => EncodedAxelarEvmERC20TokensRequest;
/**
 * Encodes a `ERC20TokensResponse` protobuf message: describes the asset and symbol for all ERC20 tokens requested for a chain
 * @param a_tokens - `tokens`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmERC20TokensResponse: (a_tokens?: Opt<Encoded<'/axelar.evm.v1beta1.ERC20TokensResponse.Token'>[]>) => EncodedAxelarEvmERC20TokensResponse;
/**
 * Encodes a `TokenInfoRequest` protobuf message:
 * @param s_chain - `chain`:
 * @param s_asset - `asset`:
 * @param s_symbol - `symbol`:
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmTokenInfoRequest: (s_chain?: Opt<string>, s_asset?: Opt<string>, s_symbol?: Opt<string>, sa_address?: Opt<WeakAccountAddr>) => EncodedAxelarEvmTokenInfoRequest;
/**
 * Encodes a `TokenInfoResponse` protobuf message:
 * @param s_asset - `asset`:
 * @param g_details - `details`:
 * @param sa_address - `address`:
 * @param b_confirmed - `confirmed`:
 * @param b_is_external - `is_external`:
 * @param sb16_burner_code_hash - `burner_code_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmTokenInfoResponse: (s_asset?: Opt<string>, atu8_details?: Opt<Encoded<'/axelar.evm.v1beta1.TokenDetails'>>, sa_address?: Opt<WeakAccountAddr>, b_confirmed?: Opt<boolean | 0 | 1>, b_is_external?: Opt<boolean | 0 | 1>, sb16_burner_code_hash?: Opt<NaiveHexLower>) => EncodedAxelarEvmTokenInfoResponse;
/**
 * Encodes a `Proof` protobuf message:
 * @param a_addresses - `addresses`:
 * @param a_weights - `weights`:
 * @param s_threshold - `threshold`:
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmProof: (a_addresses?: Opt<string[]>, a_weights?: Opt<string[]>, s_threshold?: Opt<string>, a_signatures?: Opt<string[]>) => EncodedAxelarEvmProof;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmParamsRequest: (s_chain?: Opt<string>) => EncodedAxelarEvmParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmParamsResponse: (atu8_params?: Opt<Encoded<'/axelar.evm.v1beta1.Params'>>) => EncodedAxelarEvmParamsResponse;
/**
 * Encodes a `WeightedAddress` protobuf message:
 * @param sa_address - `address`:
 * @param s_weight - `weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmKeyAddressResponseWeightedAddress: (sa_address?: Opt<WeakAccountAddr>, s_weight?: Opt<string>) => EncodedAxelarEvmKeyAddressResponseWeightedAddress;
/**
 * Encodes a `ParamsEntry` protobuf message:
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommandResponseParamsEntry: (s_key?: Opt<string>, s_value?: Opt<string>) => EncodedAxelarEvmCommandResponseParamsEntry;
/**
 * Encodes a `ParamsEntry` protobuf message:
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmQueryCommandResponseParamsEntry: (s_key?: Opt<string>, s_value?: Opt<string>) => EncodedAxelarEvmQueryCommandResponseParamsEntry;
/**
 * Encodes a `Token` protobuf message:
 * @param s_asset - `asset`:
 * @param s_symbol - `symbol`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmERC20TokensResponseToken: (s_asset?: Opt<string>, s_symbol?: Opt<string>) => EncodedAxelarEvmERC20TokensResponseToken;
/**
 * A decoded protobuf DepositQueryParams message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: asset -
 *   - 2: chain -
 */
export type DecodedAxelarEvmDepositQueryParams = [
    sa_address?: CwAccountAddr,
    s_asset?: string,
    s_chain?: string
];
/**
 * Decodes a protobuf DepositQueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmDepositQueryParams}
 */
export declare const decodeAxelarEvmDepositQueryParams: (atu8_payload: Uint8Array) => DecodedAxelarEvmDepositQueryParams;
/**
 * A decoded protobuf BatchedCommandsRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: id - defines an optional id for the commandsbatch. If not specified the latest will be returned
 */
export type DecodedAxelarEvmBatchedCommandsRequest = [
    s_chain?: string,
    s_id?: string
];
/**
 * Decodes a protobuf BatchedCommandsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBatchedCommandsRequest}
 */
export declare const decodeAxelarEvmBatchedCommandsRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmBatchedCommandsRequest;
/**
 * A decoded protobuf BatchedCommands message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: data -
 *   - 2: status -
 *   - 3: key_id -
 *   - 5: execute_data -
 *   - 6: prev_batched_commands_id -
 *   - 7: command_ids -
 *   - 8: proof -
 */
export type DecodedAxelarEvmBatchedCommandsResponse = [
    s_id?: string,
    s_data?: string,
    xc_status?: ProtoEnumAxelarEvmBatchedCommandsStatus,
    si_key?: string,
    w_0?: undefined,
    s_execute_data?: string,
    si_prev_batched_commands?: string,
    a_command_ids?: string[],
    a_proof?: DecodedAxelarEvmProof
];
/**
 * Decodes a protobuf BatchedCommands message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmBatchedCommandsResponse}
 */
export declare const decodeAxelarEvmBatchedCommandsResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmBatchedCommandsResponse;
/**
 * A decoded protobuf KeyAddressRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 3: key_id -
 */
export type DecodedAxelarEvmKeyAddressRequest = [
    s_chain?: string,
    w_0?: undefined,
    w_1?: undefined,
    si_key?: string
];
/**
 * Decodes a protobuf KeyAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmKeyAddressRequest}
 */
export declare const decodeAxelarEvmKeyAddressRequest: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmKeyAddressRequest;
/**
 * A decoded protobuf KeyAddress message
 *
 * Tuple where:
 *   - 0: key_id -
 *   - 1: addresses -
 *   - 2: threshold -
 */
export type DecodedAxelarEvmKeyAddressResponse = [
    si_key?: string,
    a_addresses?: DecodedAxelarEvmKeyAddressResponseWeightedAddress[],
    s_threshold?: string
];
/**
 * Decodes a protobuf KeyAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmKeyAddressResponse}
 */
export declare const decodeAxelarEvmKeyAddressResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmKeyAddressResponse;
/**
 * A decoded protobuf QueryTokenAddress message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: confirmed -
 */
export type DecodedAxelarEvmQueryTokenAddressResponse = [
    sa_address?: CwAccountAddr,
    b_confirmed?: 0 | 1
];
/**
 * Decodes a protobuf QueryTokenAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmQueryTokenAddressResponse}
 */
export declare const decodeAxelarEvmQueryTokenAddressResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmQueryTokenAddressResponse;
/**
 * A decoded protobuf QueryDepositStateParams message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: burner_address -
 */
export type DecodedAxelarEvmQueryDepositStateParams = [
    atu8_tx_id?: Uint8Array,
    atu8_burner_address?: Uint8Array
];
/**
 * Decodes a protobuf QueryDepositStateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmQueryDepositStateParams}
 */
export declare const decodeAxelarEvmQueryDepositStateParams: (atu8_payload: Uint8Array) => DecodedAxelarEvmQueryDepositStateParams;
/**
 * A decoded protobuf DepositStateRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: params -
 */
export type DecodedAxelarEvmDepositStateRequest = [
    s_chain?: string,
    a_params?: DecodedAxelarEvmQueryDepositStateParams
];
/**
 * Decodes a protobuf DepositStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmDepositStateRequest}
 */
export declare const decodeAxelarEvmDepositStateRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmDepositStateRequest;
/**
 * A decoded protobuf DepositState message
 *
 * Alias for: status -
 */
export type DecodedAxelarEvmDepositStateResponse = [
    w_0?: undefined,
    xc_status?: ProtoEnumAxelarEvmDepositStatus
];
/**
 * Decodes a protobuf DepositState message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmDepositStateResponse}
 */
export declare const decodeAxelarEvmDepositStateResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmDepositStateResponse;
/**
 * A decoded protobuf EventRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 */
export type DecodedAxelarEvmEventRequest = [
    s_chain?: string,
    si_event?: string
];
/**
 * Decodes a protobuf EventRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventRequest}
 */
export declare const decodeAxelarEvmEventRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventRequest;
/**
 * A decoded protobuf Event message
 *
 * Alias for: event -
 */
export type DecodedAxelarEvmEventResponse = [
    a_event?: DecodedAxelarEvmEvent
];
/**
 * Decodes a protobuf Event message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventResponse}
 */
export declare const decodeAxelarEvmEventResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventResponse;
/**
 * A decoded protobuf QueryBurnerAddress message
 *
 * Alias for: address -
 */
export type DecodedAxelarEvmQueryBurnerAddressResponse = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryBurnerAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmQueryBurnerAddressResponse}
 */
export declare const decodeAxelarEvmQueryBurnerAddressResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmQueryBurnerAddressResponse;
/**
 * A decoded protobuf ChainsRequest message
 *
 * Alias for: status -
 */
export type DecodedAxelarEvmChainsRequest = [
    xc_status?: ProtoEnumAxelarEvmChainStatus
];
/**
 * Decodes a protobuf ChainsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmChainsRequest}
 */
export declare const decodeAxelarEvmChainsRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmChainsRequest;
/**
 * A decoded protobuf Chains message
 *
 * Alias for: chains -
 */
export type DecodedAxelarEvmChainsResponse = [
    a_chains?: string[]
];
/**
 * Decodes a protobuf Chains message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmChainsResponse}
 */
export declare const decodeAxelarEvmChainsResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmChainsResponse;
/**
 * A decoded protobuf CommandRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: id -
 */
export type DecodedAxelarEvmCommandRequest = [
    s_chain?: string,
    s_id?: string
];
/**
 * Decodes a protobuf CommandRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommandRequest}
 */
export declare const decodeAxelarEvmCommandRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmCommandRequest;
/**
 * A decoded protobuf Command message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: type -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 */
export type DecodedAxelarEvmCommandResponse = [
    s_id?: string,
    s_type?: string,
    a_params?: DecodedAxelarEvmCommandResponseParamsEntry[],
    si_key?: string,
    n_max_gas_cost?: number
];
/**
 * Decodes a protobuf Command message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommandResponse}
 */
export declare const decodeAxelarEvmCommandResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmCommandResponse;
/**
 * A decoded protobuf PendingCommandsRequest message
 *
 * Alias for: chain -
 */
export type DecodedAxelarEvmPendingCommandsRequest = [
    s_chain?: string
];
/**
 * Decodes a protobuf PendingCommandsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPendingCommandsRequest}
 */
export declare const decodeAxelarEvmPendingCommandsRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmPendingCommandsRequest;
/**
 * A decoded protobuf PendingCommands message
 *
 * Alias for: commands -
 */
export type DecodedAxelarEvmPendingCommandsResponse = [
    a_commands?: DecodedAxelarEvmQueryCommandResponse[]
];
/**
 * Decodes a protobuf PendingCommands message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPendingCommandsResponse}
 */
export declare const decodeAxelarEvmPendingCommandsResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmPendingCommandsResponse;
/**
 * A decoded protobuf QueryCommand message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: type -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 */
export type DecodedAxelarEvmQueryCommandResponse = [
    s_id?: string,
    s_type?: string,
    a_params?: DecodedAxelarEvmQueryCommandResponseParamsEntry[],
    si_key?: string,
    n_max_gas_cost?: number
];
/**
 * Decodes a protobuf QueryCommand message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmQueryCommandResponse}
 */
export declare const decodeAxelarEvmQueryCommandResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmQueryCommandResponse;
/**
 * A decoded protobuf BurnerInfoRequest message
 *
 * Alias for: address -
 */
export type DecodedAxelarEvmBurnerInfoRequest = [
    atu8_address?: Uint8Array
];
/**
 * Decodes a protobuf BurnerInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBurnerInfoRequest}
 */
export declare const decodeAxelarEvmBurnerInfoRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmBurnerInfoRequest;
/**
 * A decoded protobuf BurnerInfo message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: burner_info -
 */
export type DecodedAxelarEvmBurnerInfoResponse = [
    s_chain?: string,
    a_burner_info?: DecodedAxelarEvmBurnerInfo
];
/**
 * Decodes a protobuf BurnerInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBurnerInfoResponse}
 */
export declare const decodeAxelarEvmBurnerInfoResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmBurnerInfoResponse;
/**
 * A decoded protobuf ConfirmationHeightRequest message
 *
 * Alias for: chain -
 */
export type DecodedAxelarEvmConfirmationHeightRequest = [
    s_chain?: string
];
/**
 * Decodes a protobuf ConfirmationHeightRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmationHeightRequest}
 */
export declare const decodeAxelarEvmConfirmationHeightRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmationHeightRequest;
/**
 * A decoded protobuf ConfirmationHeight message
 *
 * Alias for: height -
 */
export type DecodedAxelarEvmConfirmationHeightResponse = [
    sg_height?: CwUint64
];
/**
 * Decodes a protobuf ConfirmationHeight message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmationHeightResponse}
 */
export declare const decodeAxelarEvmConfirmationHeightResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmConfirmationHeightResponse;
/**
 * A decoded protobuf GatewayAddressRequest message
 *
 * Alias for: chain -
 */
export type DecodedAxelarEvmGatewayAddressRequest = [
    s_chain?: string
];
/**
 * Decodes a protobuf GatewayAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmGatewayAddressRequest}
 */
export declare const decodeAxelarEvmGatewayAddressRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmGatewayAddressRequest;
/**
 * A decoded protobuf GatewayAddress message
 *
 * Alias for: address -
 */
export type DecodedAxelarEvmGatewayAddressResponse = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf GatewayAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmGatewayAddressResponse}
 */
export declare const decodeAxelarEvmGatewayAddressResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmGatewayAddressResponse;
/**
 * A decoded protobuf BytecodeRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: contract -
 */
export type DecodedAxelarEvmBytecodeRequest = [
    s_chain?: string,
    s_contract?: string
];
/**
 * Decodes a protobuf BytecodeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBytecodeRequest}
 */
export declare const decodeAxelarEvmBytecodeRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmBytecodeRequest;
/**
 * A decoded protobuf Bytecode message
 *
 * Alias for: bytecode -
 */
export type DecodedAxelarEvmBytecodeResponse = [
    s_bytecode?: string
];
/**
 * Decodes a protobuf Bytecode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBytecodeResponse}
 */
export declare const decodeAxelarEvmBytecodeResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmBytecodeResponse;
/**
 * A decoded protobuf ERC20TokensRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: type -
 */
export type DecodedAxelarEvmERC20TokensRequest = [
    s_chain?: string,
    xc_type?: ProtoEnumAxelarEvmTokenType
];
/**
 * Decodes a protobuf ERC20TokensRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmERC20TokensRequest}
 */
export declare const decodeAxelarEvmERC20TokensRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmERC20TokensRequest;
/**
 * A decoded protobuf ERC20Tokens message
 *
 * Alias for: tokens -
 */
export type DecodedAxelarEvmERC20TokensResponse = [
    a_tokens?: DecodedAxelarEvmERC20TokensResponseToken[]
];
/**
 * Decodes a protobuf ERC20Tokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmERC20TokensResponse}
 */
export declare const decodeAxelarEvmERC20TokensResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmERC20TokensResponse;
/**
 * A decoded protobuf TokenInfoRequest message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: asset -
 *   - 2: symbol -
 *   - 3: address -
 */
export type DecodedAxelarEvmTokenInfoRequest = [
    s_chain?: string,
    s_asset?: string,
    s_symbol?: string,
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf TokenInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTokenInfoRequest}
 */
export declare const decodeAxelarEvmTokenInfoRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmTokenInfoRequest;
/**
 * A decoded protobuf TokenInfo message
 *
 * Tuple where:
 *   - 0: asset -
 *   - 1: details -
 *   - 2: address -
 *   - 3: confirmed -
 *   - 4: is_external -
 *   - 5: burner_code_hash -
 */
export type DecodedAxelarEvmTokenInfoResponse = [
    s_asset?: string,
    a_details?: DecodedAxelarEvmTokenDetails,
    sa_address?: CwAccountAddr,
    b_confirmed?: 0 | 1,
    b_is_external?: 0 | 1,
    sb16_burner_code_hash?: CwHexLower
];
/**
 * Decodes a protobuf TokenInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTokenInfoResponse}
 */
export declare const decodeAxelarEvmTokenInfoResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmTokenInfoResponse;
/**
 * A decoded protobuf Proof message
 *
 * Tuple where:
 *   - 0: addresses -
 *   - 1: weights -
 *   - 2: threshold -
 *   - 3: signatures -
 */
export type DecodedAxelarEvmProof = [
    a_addresses?: string[],
    a_weights?: string[],
    s_threshold?: string,
    a_signatures?: string[]
];
/**
 * Decodes a protobuf Proof message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmProof}
 */
export declare const decodeAxelarEvmProof: (atu8_payload: Uint8Array) => DecodedAxelarEvmProof;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Alias for: chain -
 */
export type DecodedAxelarEvmParamsRequest = [
    s_chain?: string
];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmParamsRequest}
 */
export declare const decodeAxelarEvmParamsRequest: (atu8_payload: Uint8Array) => DecodedAxelarEvmParamsRequest;
/**
 * A decoded protobuf Params message
 *
 * Alias for: params -
 */
export type DecodedAxelarEvmParamsResponse = [
    a_params?: DecodedAxelarEvmParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmParamsResponse}
 */
export declare const decodeAxelarEvmParamsResponse: (atu8_payload: Uint8Array) => DecodedAxelarEvmParamsResponse;
/**
 * A decoded protobuf WeightedAddress message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export type DecodedAxelarEvmKeyAddressResponseWeightedAddress = [
    sa_address?: CwAccountAddr,
    s_weight?: string
];
/**
 * Decodes a protobuf WeightedAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmKeyAddressResponseWeightedAddress}
 */
export declare const decodeAxelarEvmKeyAddressResponseWeightedAddress: (atu8_payload: Uint8Array) => DecodedAxelarEvmKeyAddressResponseWeightedAddress;
/**
 * A decoded protobuf ParamsEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarEvmCommandResponseParamsEntry = [
    s_key?: string,
    s_value?: string
];
/**
 * Decodes a protobuf ParamsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommandResponseParamsEntry}
 */
export declare const decodeAxelarEvmCommandResponseParamsEntry: (atu8_payload: Uint8Array) => DecodedAxelarEvmCommandResponseParamsEntry;
/**
 * A decoded protobuf ParamsEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarEvmQueryCommandResponseParamsEntry = [
    s_key?: string,
    s_value?: string
];
/**
 * Decodes a protobuf ParamsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmQueryCommandResponseParamsEntry}
 */
export declare const decodeAxelarEvmQueryCommandResponseParamsEntry: (atu8_payload: Uint8Array) => DecodedAxelarEvmQueryCommandResponseParamsEntry;
/**
 * A decoded protobuf Token message
 *
 * Tuple where:
 *   - 0: asset -
 *   - 1: symbol -
 */
export type DecodedAxelarEvmERC20TokensResponseToken = [
    s_asset?: string,
    s_symbol?: string
];
/**
 * Decodes a protobuf Token message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmERC20TokensResponseToken}
 */
export declare const decodeAxelarEvmERC20TokensResponseToken: (atu8_payload: Uint8Array) => DecodedAxelarEvmERC20TokensResponseToken;
/**
 * Destructures the fields of a {@link AxelarEvmDepositQueryParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: asset -
 *   - 2: chain -
 */
export declare const destructAxelarEvmDepositQueryParams: (g_struct: AxelarEvmDepositQueryParams) => [address?: CwAccountAddr, asset?: string, chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_DEPOSIT_QUERY_PARAMS = "/axelar.evm.v1beta1.DepositQueryParams";
/**
 * JSON serialization of `axelar.evm.v1beta1.DepositQueryParams` - describe the parameters used to query for an EVM deposit address
 */
export type AxelarEvmDepositQueryParams = {
    address?: CwAccountAddr | undefined;
    asset?: string | undefined;
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBatchedCommandsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: id - defines an optional id for the commandsbatch. If not specified the latest will be returned
 */
export declare const destructAxelarEvmBatchedCommandsRequest: (g_struct: AxelarEvmBatchedCommandsRequest) => [chain?: string, id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BATCHED_COMMANDS_REQUEST = "/axelar.evm.v1beta1.BatchedCommandsRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.BatchedCommandsRequest` -
 */
export type AxelarEvmBatchedCommandsRequest = {
    chain?: string | undefined;
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBatchedCommandsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: data -
 *   - 2: status -
 *   - 3: key_id -
 *   - 5: execute_data -
 *   - 6: prev_batched_commands_id -
 *   - 7: command_ids -
 *   - 8: proof -
 */
export declare const destructAxelarEvmBatchedCommandsResponse: (g_struct: AxelarEvmBatchedCommandsResponse) => [id?: string, data?: string, status?: JsonEnumAxelarEvmBatchedCommandsStatus, key_id?: string, EMPTY?: void, execute_data?: string, prev_batched_commands_id?: string, command_ids?: string[], proof?: AxelarEvmProof];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BATCHED_COMMANDS_RESPONSE = "/axelar.evm.v1beta1.BatchedCommandsResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.BatchedCommandsResponse` -
 */
export type AxelarEvmBatchedCommandsResponse = {
    id?: string | undefined;
    data?: string | undefined;
    status?: JsonEnumAxelarEvmBatchedCommandsStatus | undefined;
    key_id?: string | undefined;
    execute_data?: string | undefined;
    prev_batched_commands_id?: string | undefined;
    command_ids?: string[] | undefined;
    proof?: AxelarEvmProof | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmProof} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: addresses -
 *   - 1: weights -
 *   - 2: threshold -
 *   - 3: signatures -
 */
export declare const destructAxelarEvmProof: (g_struct: AxelarEvmProof) => [addresses?: string[], weights?: string[], threshold?: string, signatures?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PROOF = "/axelar.evm.v1beta1.Proof";
/**
 * JSON serialization of `axelar.evm.v1beta1.Proof` -
 */
export type AxelarEvmProof = {
    addresses?: string[] | undefined;
    weights?: string[] | undefined;
    threshold?: string | undefined;
    signatures?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmKeyAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 3: key_id -
 */
export declare const destructAxelarEvmKeyAddressRequest: (g_struct: AxelarEvmKeyAddressRequest) => [chain?: string, EMPTY?: void, EMPTY?: void, key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_KEY_ADDRESS_REQUEST = "/axelar.evm.v1beta1.KeyAddressRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.KeyAddressRequest` -
 */
export type AxelarEvmKeyAddressRequest = {
    chain?: string | undefined;
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmKeyAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: addresses -
 *   - 2: threshold -
 */
export declare const destructAxelarEvmKeyAddressResponse: (g_struct: AxelarEvmKeyAddressResponse) => [key_id?: string, addresses?: AxelarEvmKeyAddressResponseWeightedAddress[], threshold?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_KEY_ADDRESS_RESPONSE = "/axelar.evm.v1beta1.KeyAddressResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.KeyAddressResponse` -
 */
export type AxelarEvmKeyAddressResponse = {
    key_id?: string | undefined;
    addresses?: AxelarEvmKeyAddressResponseWeightedAddress[] | undefined;
    threshold?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmKeyAddressResponseWeightedAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export declare const destructAxelarEvmKeyAddressResponseWeightedAddress: (g_struct: AxelarEvmKeyAddressResponseWeightedAddress) => [address?: CwAccountAddr, weight?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_KEY_ADDRESS_RESPONSE_WEIGHTED_ADDRESS = "/axelar.evm.v1beta1.KeyAddressResponse.WeightedAddress";
/**
 * JSON serialization of `axelar.evm.v1beta1.KeyAddressResponse.WeightedAddress` -
 */
export type AxelarEvmKeyAddressResponseWeightedAddress = {
    address?: CwAccountAddr | undefined;
    weight?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmQueryTokenAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: confirmed -
 */
export declare const destructAxelarEvmQueryTokenAddressResponse: (g_struct: AxelarEvmQueryTokenAddressResponse) => [address?: CwAccountAddr, confirmed?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_QUERY_TOKEN_ADDRESS_RESPONSE = "/axelar.evm.v1beta1.QueryTokenAddressResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.QueryTokenAddressResponse` -
 */
export type AxelarEvmQueryTokenAddressResponse = {
    address?: CwAccountAddr | undefined;
    confirmed?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmQueryDepositStateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: burner_address -
 */
export declare const destructAxelarEvmQueryDepositStateParams: (g_struct: AxelarEvmQueryDepositStateParams) => [tx_id?: Uint8Array, burner_address?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_QUERY_DEPOSIT_STATE_PARAMS = "/axelar.evm.v1beta1.QueryDepositStateParams";
/**
 * JSON serialization of `axelar.evm.v1beta1.QueryDepositStateParams` -
 */
export type AxelarEvmQueryDepositStateParams = {
    tx_id?: CwBase64 | undefined;
    burner_address?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmDepositStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: params -
 */
export declare const destructAxelarEvmDepositStateRequest: (g_struct: AxelarEvmDepositStateRequest) => [chain?: string, params?: AxelarEvmQueryDepositStateParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_DEPOSIT_STATE_REQUEST = "/axelar.evm.v1beta1.DepositStateRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.DepositStateRequest` -
 */
export type AxelarEvmDepositStateRequest = {
    chain?: string | undefined;
    params?: AxelarEvmQueryDepositStateParams | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmDepositStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: status -
 */
export declare const destructAxelarEvmDepositStateResponse: (g_struct: AxelarEvmDepositStateResponse) => [EMPTY?: void, status?: JsonEnumAxelarEvmDepositStatus];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_DEPOSIT_STATE_RESPONSE = "/axelar.evm.v1beta1.DepositStateResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.DepositStateResponse` -
 */
export type AxelarEvmDepositStateResponse = {
    status?: JsonEnumAxelarEvmDepositStatus | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 */
export declare const destructAxelarEvmEventRequest: (g_struct: AxelarEvmEventRequest) => [chain?: string, event_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_REQUEST = "/axelar.evm.v1beta1.EventRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventRequest` -
 */
export type AxelarEvmEventRequest = {
    chain?: string | undefined;
    event_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: event -
 */
export declare const destructAxelarEvmEventResponse: (g_struct: AxelarEvmEventResponse) => [event?: AxelarEvmEvent];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_RESPONSE = "/axelar.evm.v1beta1.EventResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventResponse` -
 */
export type AxelarEvmEventResponse = {
    event?: AxelarEvmEvent | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmQueryBurnerAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export declare const destructAxelarEvmQueryBurnerAddressResponse: (g_struct: AxelarEvmQueryBurnerAddressResponse) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_QUERY_BURNER_ADDRESS_RESPONSE = "/axelar.evm.v1beta1.QueryBurnerAddressResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.QueryBurnerAddressResponse` -
 */
export type AxelarEvmQueryBurnerAddressResponse = {
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmChainsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: status -
 */
export declare const destructAxelarEvmChainsRequest: (g_struct: AxelarEvmChainsRequest) => [status?: JsonEnumAxelarEvmChainStatus];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CHAINS_REQUEST = "/axelar.evm.v1beta1.ChainsRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.ChainsRequest` -
 */
export type AxelarEvmChainsRequest = {
    status?: JsonEnumAxelarEvmChainStatus | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmChainsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chains -
 */
export declare const destructAxelarEvmChainsResponse: (g_struct: AxelarEvmChainsResponse) => [chains?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CHAINS_RESPONSE = "/axelar.evm.v1beta1.ChainsResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.ChainsResponse` -
 */
export type AxelarEvmChainsResponse = {
    chains?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommandRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: id -
 */
export declare const destructAxelarEvmCommandRequest: (g_struct: AxelarEvmCommandRequest) => [chain?: string, id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_REQUEST = "/axelar.evm.v1beta1.CommandRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.CommandRequest` -
 */
export type AxelarEvmCommandRequest = {
    chain?: string | undefined;
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommandResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: type -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 */
export declare const destructAxelarEvmCommandResponse: (g_struct: AxelarEvmCommandResponse) => [id?: string, type_?: string, params?: AxelarEvmCommandResponseParamsEntry[], key_id?: string, max_gas_cost?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_RESPONSE = "/axelar.evm.v1beta1.CommandResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.CommandResponse` -
 */
export type AxelarEvmCommandResponse = {
    id?: string | undefined;
    type?: string | undefined;
    params?: AxelarEvmCommandResponseParamsEntry[] | undefined;
    key_id?: string | undefined;
    max_gas_cost?: number | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommandResponseParamsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarEvmCommandResponseParamsEntry: (g_struct: AxelarEvmCommandResponseParamsEntry) => [key?: string, value?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_RESPONSE_PARAMS_ENTRY = "/axelar.evm.v1beta1.CommandResponse.ParamsEntry";
/**
 * JSON serialization of `axelar.evm.v1beta1.CommandResponse.ParamsEntry` -
 */
export type AxelarEvmCommandResponseParamsEntry = {
    key?: string | undefined;
    value?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPendingCommandsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarEvmPendingCommandsRequest: (g_struct: AxelarEvmPendingCommandsRequest) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PENDING_COMMANDS_REQUEST = "/axelar.evm.v1beta1.PendingCommandsRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.PendingCommandsRequest` -
 */
export type AxelarEvmPendingCommandsRequest = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPendingCommandsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commands -
 */
export declare const destructAxelarEvmPendingCommandsResponse: (g_struct: AxelarEvmPendingCommandsResponse) => [commands?: AxelarEvmQueryCommandResponse[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PENDING_COMMANDS_RESPONSE = "/axelar.evm.v1beta1.PendingCommandsResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.PendingCommandsResponse` -
 */
export type AxelarEvmPendingCommandsResponse = {
    commands?: AxelarEvmQueryCommandResponse[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmQueryCommandResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: type -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 */
export declare const destructAxelarEvmQueryCommandResponse: (g_struct: AxelarEvmQueryCommandResponse) => [id?: string, type_?: string, params?: AxelarEvmQueryCommandResponseParamsEntry[], key_id?: string, max_gas_cost?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_QUERY_COMMAND_RESPONSE = "/axelar.evm.v1beta1.QueryCommandResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.QueryCommandResponse` -
 */
export type AxelarEvmQueryCommandResponse = {
    id?: string | undefined;
    type?: string | undefined;
    params?: AxelarEvmQueryCommandResponseParamsEntry[] | undefined;
    key_id?: string | undefined;
    max_gas_cost?: number | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmQueryCommandResponseParamsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarEvmQueryCommandResponseParamsEntry: (g_struct: AxelarEvmQueryCommandResponseParamsEntry) => [key?: string, value?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_QUERY_COMMAND_RESPONSE_PARAMS_ENTRY = "/axelar.evm.v1beta1.QueryCommandResponse.ParamsEntry";
/**
 * JSON serialization of `axelar.evm.v1beta1.QueryCommandResponse.ParamsEntry` -
 */
export type AxelarEvmQueryCommandResponseParamsEntry = {
    key?: string | undefined;
    value?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBurnerInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export declare const destructAxelarEvmBurnerInfoRequest: (g_struct: AxelarEvmBurnerInfoRequest) => [address?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BURNER_INFO_REQUEST = "/axelar.evm.v1beta1.BurnerInfoRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.BurnerInfoRequest` -
 */
export type AxelarEvmBurnerInfoRequest = {
    address?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBurnerInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: burner_info -
 */
export declare const destructAxelarEvmBurnerInfoResponse: (g_struct: AxelarEvmBurnerInfoResponse) => [chain?: string, burner_info?: AxelarEvmBurnerInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BURNER_INFO_RESPONSE = "/axelar.evm.v1beta1.BurnerInfoResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.BurnerInfoResponse` -
 */
export type AxelarEvmBurnerInfoResponse = {
    chain?: string | undefined;
    burner_info?: AxelarEvmBurnerInfo | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmationHeightRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarEvmConfirmationHeightRequest: (g_struct: AxelarEvmConfirmationHeightRequest) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRMATION_HEIGHT_REQUEST = "/axelar.evm.v1beta1.ConfirmationHeightRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmationHeightRequest` -
 */
export type AxelarEvmConfirmationHeightRequest = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmConfirmationHeightResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 */
export declare const destructAxelarEvmConfirmationHeightResponse: (g_struct: AxelarEvmConfirmationHeightResponse) => [height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRMATION_HEIGHT_RESPONSE = "/axelar.evm.v1beta1.ConfirmationHeightResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.ConfirmationHeightResponse` -
 */
export type AxelarEvmConfirmationHeightResponse = {
    height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmGatewayAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarEvmGatewayAddressRequest: (g_struct: AxelarEvmGatewayAddressRequest) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_GATEWAY_ADDRESS_REQUEST = "/axelar.evm.v1beta1.GatewayAddressRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.GatewayAddressRequest` -
 */
export type AxelarEvmGatewayAddressRequest = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmGatewayAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export declare const destructAxelarEvmGatewayAddressResponse: (g_struct: AxelarEvmGatewayAddressResponse) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_GATEWAY_ADDRESS_RESPONSE = "/axelar.evm.v1beta1.GatewayAddressResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.GatewayAddressResponse` -
 */
export type AxelarEvmGatewayAddressResponse = {
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBytecodeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: contract -
 */
export declare const destructAxelarEvmBytecodeRequest: (g_struct: AxelarEvmBytecodeRequest) => [chain?: string, contract?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BYTECODE_REQUEST = "/axelar.evm.v1beta1.BytecodeRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.BytecodeRequest` -
 */
export type AxelarEvmBytecodeRequest = {
    chain?: string | undefined;
    contract?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBytecodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bytecode -
 */
export declare const destructAxelarEvmBytecodeResponse: (g_struct: AxelarEvmBytecodeResponse) => [bytecode?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BYTECODE_RESPONSE = "/axelar.evm.v1beta1.BytecodeResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.BytecodeResponse` -
 */
export type AxelarEvmBytecodeResponse = {
    bytecode?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmERC20TokensRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: type -
 */
export declare const destructAxelarEvmERC20TokensRequest: (g_struct: AxelarEvmERC20TokensRequest) => [chain?: string, type_?: JsonEnumAxelarEvmTokenType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_TOKENS_REQUEST = "/axelar.evm.v1beta1.ERC20TokensRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.ERC20TokensRequest` - describes the chain for which the type of ERC20 tokens are requested.
 */
export type AxelarEvmERC20TokensRequest = {
    chain?: string | undefined;
    type?: JsonEnumAxelarEvmTokenType | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmERC20TokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tokens -
 */
export declare const destructAxelarEvmERC20TokensResponse: (g_struct: AxelarEvmERC20TokensResponse) => [tokens?: AxelarEvmERC20TokensResponseToken[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_TOKENS_RESPONSE = "/axelar.evm.v1beta1.ERC20TokensResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.ERC20TokensResponse` - describes the asset and symbol for all ERC20 tokens requested for a chain
 */
export type AxelarEvmERC20TokensResponse = {
    tokens?: AxelarEvmERC20TokensResponseToken[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmERC20TokensResponseToken} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: asset -
 *   - 1: symbol -
 */
export declare const destructAxelarEvmERC20TokensResponseToken: (g_struct: AxelarEvmERC20TokensResponseToken) => [asset?: string, symbol?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_TOKENS_RESPONSE_TOKEN = "/axelar.evm.v1beta1.ERC20TokensResponse.Token";
/**
 * JSON serialization of `axelar.evm.v1beta1.ERC20TokensResponse.Token` -
 */
export type AxelarEvmERC20TokensResponseToken = {
    asset?: string | undefined;
    symbol?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmTokenInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: asset -
 *   - 2: symbol -
 *   - 3: address -
 */
export declare const destructAxelarEvmTokenInfoRequest: (g_struct: AxelarEvmTokenInfoRequest) => [chain?: string, asset?: string, symbol?: string, address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_TOKEN_INFO_REQUEST = "/axelar.evm.v1beta1.TokenInfoRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.TokenInfoRequest` -
 */
export type AxelarEvmTokenInfoRequest = {
    chain?: string | undefined;
    asset?: string | undefined;
    symbol?: string | undefined;
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmTokenInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: asset -
 *   - 1: details -
 *   - 2: address -
 *   - 3: confirmed -
 *   - 4: is_external -
 *   - 5: burner_code_hash -
 */
export declare const destructAxelarEvmTokenInfoResponse: (g_struct: AxelarEvmTokenInfoResponse) => [asset?: string, details?: AxelarEvmTokenDetails, address?: CwAccountAddr, confirmed?: boolean, is_external?: boolean, burner_code_hash?: CwHexLower];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_TOKEN_INFO_RESPONSE = "/axelar.evm.v1beta1.TokenInfoResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.TokenInfoResponse` -
 */
export type AxelarEvmTokenInfoResponse = {
    asset?: string | undefined;
    details?: AxelarEvmTokenDetails | undefined;
    address?: CwAccountAddr | undefined;
    confirmed?: boolean | undefined;
    is_external?: boolean | undefined;
    burner_code_hash?: CwHexLower | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarEvmParamsRequest: (g_struct: AxelarEvmParamsRequest) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PARAMS_REQUEST = "/axelar.evm.v1beta1.ParamsRequest";
/**
 * JSON serialization of `axelar.evm.v1beta1.ParamsRequest` - represents a message that queries the params
 */
export type AxelarEvmParamsRequest = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export declare const destructAxelarEvmParamsResponse: (g_struct: AxelarEvmParamsResponse) => [params?: AxelarEvmParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PARAMS_RESPONSE = "/axelar.evm.v1beta1.ParamsResponse";
/**
 * JSON serialization of `axelar.evm.v1beta1.ParamsResponse` -
 */
export type AxelarEvmParamsResponse = {
    params?: AxelarEvmParams | undefined;
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.ChainStatus`.
 *
 * **CHAIN_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmChainStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_CHAIN_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.ChainStatus`.
 *
 * **CHAIN_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmChainStatus}
 */
export declare const SI_JSON_AXELAR_EVM_CHAIN_STATUS_UNSPECIFIED = "StatusUnspecified";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.ChainStatus`.
 *
 * **CHAIN_STATUS_ACTIVATED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmChainStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_CHAIN_STATUS_ACTIVATED = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.ChainStatus`.
 *
 * **CHAIN_STATUS_ACTIVATED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmChainStatus}
 */
export declare const SI_JSON_AXELAR_EVM_CHAIN_STATUS_ACTIVATED = "Activated";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.ChainStatus`.
 *
 * **CHAIN_STATUS_DEACTIVATED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmChainStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_CHAIN_STATUS_DEACTIVATED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.ChainStatus`.
 *
 * **CHAIN_STATUS_DEACTIVATED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmChainStatus}
 */
export declare const SI_JSON_AXELAR_EVM_CHAIN_STATUS_DEACTIVATED = "Deactivated";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.ChainStatus` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_CHAIN_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_CHAIN_STATUS_ACTIVATED}
 *   - {@link XC_PROTO_AXELAR_EVM_CHAIN_STATUS_DEACTIVATED}
 */
export type ProtoEnumAxelarEvmChainStatus = typeof XC_PROTO_AXELAR_EVM_CHAIN_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_CHAIN_STATUS_ACTIVATED | typeof XC_PROTO_AXELAR_EVM_CHAIN_STATUS_DEACTIVATED;
/**
 * JSON enum values for `axelar.evm.v1beta1.ChainStatus` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_CHAIN_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_CHAIN_STATUS_ACTIVATED}
 *   - {@link SI_JSON_AXELAR_EVM_CHAIN_STATUS_DEACTIVATED}
 */
export type JsonEnumAxelarEvmChainStatus = typeof SI_JSON_AXELAR_EVM_CHAIN_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_CHAIN_STATUS_ACTIVATED | typeof SI_JSON_AXELAR_EVM_CHAIN_STATUS_DEACTIVATED;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.ChainStatus` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmChainStatus: Record<ProtoEnumAxelarEvmChainStatus, JsonEnumAxelarEvmChainStatus>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.ChainStatus` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmChainStatus: Record<JsonEnumAxelarEvmChainStatus, ProtoEnumAxelarEvmChainStatus>;
/**
 * Protobuf enum value for `axelar.evm.v1beta1.TokenType`.
 *
 * **TOKEN_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmTokenType}
 */
export declare const XC_PROTO_AXELAR_EVM_TOKEN_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.TokenType`.
 *
 * **TOKEN_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmTokenType}
 */
export declare const SI_JSON_AXELAR_EVM_TOKEN_TYPE_UNSPECIFIED = "Unspecified";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.TokenType`.
 *
 * **TOKEN_TYPE_INTERNAL** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmTokenType}
 */
export declare const XC_PROTO_AXELAR_EVM_TOKEN_TYPE_INTERNAL = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.TokenType`.
 *
 * **TOKEN_TYPE_INTERNAL** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmTokenType}
 */
export declare const SI_JSON_AXELAR_EVM_TOKEN_TYPE_INTERNAL = "Internal";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.TokenType`.
 *
 * **TOKEN_TYPE_EXTERNAL** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmTokenType}
 */
export declare const XC_PROTO_AXELAR_EVM_TOKEN_TYPE_EXTERNAL = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.TokenType`.
 *
 * **TOKEN_TYPE_EXTERNAL** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmTokenType}
 */
export declare const SI_JSON_AXELAR_EVM_TOKEN_TYPE_EXTERNAL = "External";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.TokenType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_TOKEN_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_TOKEN_TYPE_INTERNAL}
 *   - {@link XC_PROTO_AXELAR_EVM_TOKEN_TYPE_EXTERNAL}
 */
export type ProtoEnumAxelarEvmTokenType = typeof XC_PROTO_AXELAR_EVM_TOKEN_TYPE_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_TOKEN_TYPE_INTERNAL | typeof XC_PROTO_AXELAR_EVM_TOKEN_TYPE_EXTERNAL;
/**
 * JSON enum values for `axelar.evm.v1beta1.TokenType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_TOKEN_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_TOKEN_TYPE_INTERNAL}
 *   - {@link SI_JSON_AXELAR_EVM_TOKEN_TYPE_EXTERNAL}
 */
export type JsonEnumAxelarEvmTokenType = typeof SI_JSON_AXELAR_EVM_TOKEN_TYPE_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_TOKEN_TYPE_INTERNAL | typeof SI_JSON_AXELAR_EVM_TOKEN_TYPE_EXTERNAL;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.TokenType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmTokenType: Record<ProtoEnumAxelarEvmTokenType, JsonEnumAxelarEvmTokenType>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.TokenType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmTokenType: Record<JsonEnumAxelarEvmTokenType, ProtoEnumAxelarEvmTokenType>;
