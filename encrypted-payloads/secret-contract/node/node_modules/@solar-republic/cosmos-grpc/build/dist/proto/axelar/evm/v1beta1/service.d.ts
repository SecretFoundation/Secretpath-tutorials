/// <reference types="node" />
import type { Opt } from '../../../../api/types.js';
import type { AxelarEvmBatchedCommandsResponse, AxelarEvmBurnerInfoResponse, AxelarEvmConfirmationHeightResponse, AxelarEvmQueryDepositStateParams, AxelarEvmDepositStateResponse, AxelarEvmPendingCommandsResponse, ProtoEnumAxelarEvmChainStatus, AxelarEvmChainsResponse, AxelarEvmCommandResponse, AxelarEvmKeyAddressResponse, AxelarEvmGatewayAddressResponse, AxelarEvmBytecodeResponse, AxelarEvmEventResponse, ProtoEnumAxelarEvmTokenType, AxelarEvmERC20TokensResponse, AxelarEvmTokenInfoResponse, AxelarEvmParamsResponse } from './query.js';
import type { AxelarEvmSetGatewayResponse, AxelarEvmConfirmGatewayTxResponse, AxelarEvmConfirmGatewayTxsResponse, AxelarEvmLinkResponse, AxelarEvmConfirmTokenResponse, AxelarEvmConfirmDepositResponse, AxelarEvmConfirmTransferKeyResponse, AxelarEvmCreateDeployTokenResponse, AxelarEvmCreateBurnTokensResponse, AxelarEvmCreatePendingTransfersResponse, AxelarEvmCreateTransferOperatorshipResponse, AxelarEvmSignCommandsResponse, AxelarEvmAddChainResponse, AxelarEvmRetryFailedEventResponse } from './tx.js';
import type { AxelarEvmAsset, AxelarEvmTokenDetails } from './types.js';
import type { ProtoEnumAxelarTssExportedKeyType } from '../../tss/exported/v1beta1/types.js';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_address -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmSetGateway: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, atu8_address?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmSetGatewayResponse>>;
/**
 * Deprecated: use ConfirmGatewayTxs instead
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmConfirmGatewayTx: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmConfirmGatewayTxResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param a_tx_ids -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmConfirmGatewayTxs: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, a_tx_ids?: Opt<Uint8Array[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmConfirmGatewayTxsResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param sa_recipient_addr -
 * @param s_asset -
 * @param s_recipient_chain -
 * @returns a tuple where:
 *   - 0: deposit_addr - the 'deposit_addr' response property
 */
export declare const submitAxelarEvmLink: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, sa_recipient_addr?: Opt<`${string}1${string}`>, s_asset?: Opt<string>, s_recipient_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmLinkResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @param g_asset -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmConfirmToken: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>, g_asset?: Opt<AxelarEvmAsset>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmConfirmTokenResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @param atu8_amount -
 * @param atu8_burner_address -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmConfirmDeposit: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>, atu8_amount?: Opt<Uint8Array>, atu8_burner_address?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmConfirmDepositResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmConfirmTransferKey: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmConfirmTransferKeyResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param g_asset -
 * @param g_token_details -
 * @param atu8_address -
 * @param s_daily_mint_limit -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmCreateDeployToken: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, g_asset?: Opt<AxelarEvmAsset>, g_token_details?: Opt<AxelarEvmTokenDetails>, atu8_address?: Opt<Uint8Array>, s_daily_mint_limit?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmCreateDeployTokenResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmCreateBurnTokens: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmCreateBurnTokensResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmCreatePendingTransfers: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmCreatePendingTransfersResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param si_key -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmCreateTransferOperatorship: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, si_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmCreateTransferOperatorshipResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: batched_commands_id - the 'batched_commands_id' response property
 *   - 1: command_count - the 'batched_commands_id' response property
 */
export declare const submitAxelarEvmSignCommands: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmSignCommandsResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_name -
 * @param xc_key_type -
 * @param atu8_params -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmAddChain: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_name?: Opt<string>, xc_key_type?: Opt<ProtoEnumAxelarTssExportedKeyType>, atu8_params?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmAddChainResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param si_event -
 * @returns an empty tuple
 */
export declare const submitAxelarEvmRetryFailedEvent: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, si_event?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmRetryFailedEventResponse>>;
/**
 * Queries the batched commands for a specified chain and BatchedCommandsID if no BatchedCommandsID is specified, then it returns the latest batched commands
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_id - defines an optional id for the commandsbatch. If not specified the latest will be returned
 * @returns a tuple where:
 *   - 0: id - the 'id' response property
 *   - 1: data - the 'id' response property
 *   - 2: status - the 'id' response property
 *   - 3: key_id - the 'id' response property
 *   - 4: execute_data - the 'id' response property
 *   - 5: prev_batched_commands_id - the 'id' response property
 *   - 6: command_ids - the 'id' response property
 *   - 7: proof - the 'id' response property
 */
export declare const queryAxelarEvmBatchedCommands: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, s_id?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmBatchedCommandsResponse>>;
/**
 * Queries the burner info for the specified address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_address -
 * @returns a tuple where:
 *   - 0: chain - the 'chain' response property
 *   - 1: burner_info - the 'chain' response property
 */
export declare const queryAxelarEvmBurnerInfo: (z_req: string | ({
    origin: string;
} & RequestInit), atu8_address?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmBurnerInfoResponse>>;
/**
 * Queries the confirmation height for the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: height - the 'height' response property
 */
export declare const queryAxelarEvmConfirmationHeight: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmConfirmationHeightResponse>>;
/**
 * Queries the state of the specified deposit
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param g_params -
 * @returns a tuple where:
 *   - 0: status - the 'status' response property
 */
export declare const queryAxelarEvmDepositState: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, g_params?: Opt<AxelarEvmQueryDepositStateParams>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmDepositStateResponse>>;
/**
 * Queries the pending commands for the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: commands - the 'commands' response property
 */
export declare const queryAxelarEvmPendingCommands: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmPendingCommandsResponse>>;
/**
 * Queries the available evm chains
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param xc_status -
 * @returns a tuple where:
 *   - 0: chains - the 'chains' response property
 */
export declare const queryAxelarEvmChains: (z_req: string | ({
    origin: string;
} & RequestInit), xc_status?: Opt<ProtoEnumAxelarEvmChainStatus>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmChainsResponse>>;
/**
 * Queries the command of a chain provided the command id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_id -
 * @returns a tuple where:
 *   - 0: id - the 'id' response property
 *   - 1: type - the 'id' response property
 *   - 2: params - the 'id' response property
 *   - 3: key_id - the 'id' response property
 *   - 4: max_gas_cost - the 'id' response property
 */
export declare const queryAxelarEvmCommand: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, s_id?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmCommandResponse>>;
/**
 * Queries the address of key of a chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param si_key -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 *   - 1: addresses - the 'key_id' response property
 *   - 2: threshold - the 'key_id' response property
 */
export declare const queryAxelarEvmKeyAddress: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, si_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmKeyAddressResponse>>;
/**
 * Queries the address of axelar gateway at the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: address - the 'address' response property
 */
export declare const queryAxelarEvmGatewayAddress: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmGatewayAddressResponse>>;
/**
 * Queries the bytecode of a specified gateway at the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_contract -
 * @returns a tuple where:
 *   - 0: bytecode - the 'bytecode' response property
 */
export declare const queryAxelarEvmBytecode: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, s_contract?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmBytecodeResponse>>;
/**
 * Queries an event at the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param si_event -
 * @returns a tuple where:
 *   - 0: event - the 'event' response property
 */
export declare const queryAxelarEvmEvent: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, si_event?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmEventResponse>>;
/**
 * Queries the ERC20 tokens registered for a chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param xc_type -
 * @returns a tuple where:
 *   - 0: tokens - the 'tokens' response property
 */
export declare const queryAxelarEvmERC20Tokens: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, xc_type?: Opt<ProtoEnumAxelarEvmTokenType>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmERC20TokensResponse>>;
/**
 * Queries the token info for a registered ERC20 Token
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_asset -
 * @param s_symbol -
 * @param sa_address -
 * @returns a tuple where:
 *   - 0: asset - the 'asset' response property
 *   - 1: details - the 'asset' response property
 *   - 2: address - the 'asset' response property
 *   - 3: confirmed - the 'asset' response property
 *   - 4: is_external - the 'asset' response property
 *   - 5: burner_code_hash - the 'asset' response property
 */
export declare const queryAxelarEvmTokenInfo: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, s_asset?: Opt<string>, s_symbol?: Opt<string>, sa_address?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmTokenInfoResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export declare const queryAxelarEvmParams: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarEvmParamsResponse>>;
