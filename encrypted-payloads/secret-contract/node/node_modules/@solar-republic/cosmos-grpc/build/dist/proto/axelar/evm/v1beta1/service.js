import { bech32_decode } from '@solar-republic/crypto';
import { map } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
const SR_LCD_AXELAR_EVM_MSGSERVICE = '/axelar/evm/';
const SR_LCD_AXELAR_EVM_QUERYSERVICE = '/axelar/evm/v1beta1/';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_address -
 * @returns an empty tuple
 */
export const submitAxelarEvmSetGateway = restful_grpc((sa_sender, s_chain, atu8_address) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'set_gateway', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        address: safe_bytes_to_base64(atu8_address),
    }], 1);
/**
 * Deprecated: use ConfirmGatewayTxs instead
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @returns an empty tuple
 */
export const submitAxelarEvmConfirmGatewayTx = restful_grpc((sa_sender, s_chain, atu8_tx_id) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'confirm_gateway_tx', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        tx_id: safe_bytes_to_base64(atu8_tx_id),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param a_tx_ids -
 * @returns an empty tuple
 */
export const submitAxelarEvmConfirmGatewayTxs = restful_grpc((sa_sender, s_chain, a_tx_ids) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'confirm_gateway_txs', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        tx_ids: map(a_tx_ids, safe_bytes_to_base64),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param sa_recipient_addr -
 * @param s_asset -
 * @param s_recipient_chain -
 * @returns a tuple where:
 *   - 0: deposit_addr - the 'deposit_addr' response property
 */
export const submitAxelarEvmLink = restful_grpc((sa_sender, s_chain, sa_recipient_addr, s_asset, s_recipient_chain) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'link', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        recipient_addr: sa_recipient_addr,
        asset: s_asset,
        recipient_chain: s_recipient_chain,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @param g_asset -
 * @returns an empty tuple
 */
export const submitAxelarEvmConfirmToken = restful_grpc((sa_sender, s_chain, atu8_tx_id, g_asset) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'confirm_token', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        tx_id: safe_bytes_to_base64(atu8_tx_id),
        asset: g_asset,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @param atu8_amount -
 * @param atu8_burner_address -
 * @returns an empty tuple
 */
export const submitAxelarEvmConfirmDeposit = restful_grpc((sa_sender, s_chain, atu8_tx_id, atu8_amount, atu8_burner_address) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'confirm_deposit', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        tx_id: safe_bytes_to_base64(atu8_tx_id),
        amount: safe_bytes_to_base64(atu8_amount),
        burner_address: safe_bytes_to_base64(atu8_burner_address),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param atu8_tx_id -
 * @returns an empty tuple
 */
export const submitAxelarEvmConfirmTransferKey = restful_grpc((sa_sender, s_chain, atu8_tx_id) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'confirm_transfer_key', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        tx_id: safe_bytes_to_base64(atu8_tx_id),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param g_asset -
 * @param g_token_details -
 * @param atu8_address -
 * @param s_daily_mint_limit -
 * @returns an empty tuple
 */
export const submitAxelarEvmCreateDeployToken = restful_grpc((sa_sender, s_chain, g_asset, g_token_details, atu8_address, s_daily_mint_limit) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'create_deploy_token', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        asset: g_asset,
        token_details: g_token_details,
        address: safe_bytes_to_base64(atu8_address),
        daily_mint_limit: s_daily_mint_limit,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @returns an empty tuple
 */
export const submitAxelarEvmCreateBurnTokens = restful_grpc((sa_sender, s_chain) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'create_burn_tokens', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @returns an empty tuple
 */
export const submitAxelarEvmCreatePendingTransfers = restful_grpc((sa_sender, s_chain) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'create_pending_transfers', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param si_key -
 * @returns an empty tuple
 */
export const submitAxelarEvmCreateTransferOperatorship = restful_grpc((sa_sender, s_chain, si_key) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'create_transfer_operatorship', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        key_id: si_key,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: batched_commands_id - the 'batched_commands_id' response property
 *   - 1: command_count - the 'batched_commands_id' response property
 */
export const submitAxelarEvmSignCommands = restful_grpc((sa_sender, s_chain) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'sign_commands', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_name -
 * @param xc_key_type -
 * @param atu8_params -
 * @returns an empty tuple
 */
export const submitAxelarEvmAddChain = restful_grpc((sa_sender, s_name, xc_key_type, atu8_params) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'add_chain', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        name: s_name,
        key_type: xc_key_type,
        params: safe_bytes_to_base64(atu8_params),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param si_event -
 * @returns an empty tuple
 */
export const submitAxelarEvmRetryFailedEvent = restful_grpc((sa_sender, s_chain, si_event) => [SR_LCD_AXELAR_EVM_MSGSERVICE + 'retry-failed-event', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        event_id: si_event,
    }], 1);
/**
 * Queries the batched commands for a specified chain and BatchedCommandsID if no BatchedCommandsID is specified, then it returns the latest batched commands
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_id - defines an optional id for the commandsbatch. If not specified the latest will be returned
 * @returns a tuple where:
 *   - 0: id - the 'id' response property
 *   - 1: data - the 'id' response property
 *   - 2: status - the 'id' response property
 *   - 3: key_id - the 'id' response property
 *   - 4: execute_data - the 'id' response property
 *   - 5: prev_batched_commands_id - the 'id' response property
 *   - 6: command_ids - the 'id' response property
 *   - 7: proof - the 'id' response property
 */
export const queryAxelarEvmBatchedCommands = restful_grpc((s_chain, s_id) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'batched_commands/' + s_chain + '/' + s_id]);
/**
 * Queries the burner info for the specified address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_address -
 * @returns a tuple where:
 *   - 0: chain - the 'chain' response property
 *   - 1: burner_info - the 'chain' response property
 */
export const queryAxelarEvmBurnerInfo = restful_grpc(atu8_address => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'burner_info', {
        address: safe_bytes_to_base64(atu8_address),
    }]);
/**
 * Queries the confirmation height for the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: height - the 'height' response property
 */
export const queryAxelarEvmConfirmationHeight = restful_grpc(s_chain => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'confirmation_height/' + s_chain]);
/**
 * Queries the state of the specified deposit
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param g_params -
 * @returns a tuple where:
 *   - 0: status - the 'status' response property
 */
export const queryAxelarEvmDepositState = restful_grpc((s_chain, g_params) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'deposit_state', {
        chain: s_chain,
        params: g_params,
    }]);
/**
 * Queries the pending commands for the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: commands - the 'commands' response property
 */
export const queryAxelarEvmPendingCommands = restful_grpc(s_chain => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'pending_commands/' + s_chain]);
/**
 * Queries the available evm chains
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param xc_status -
 * @returns a tuple where:
 *   - 0: chains - the 'chains' response property
 */
export const queryAxelarEvmChains = restful_grpc(xc_status => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'chains', {
        status: xc_status,
    }]);
/**
 * Queries the command of a chain provided the command id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_id -
 * @returns a tuple where:
 *   - 0: id - the 'id' response property
 *   - 1: type - the 'id' response property
 *   - 2: params - the 'id' response property
 *   - 3: key_id - the 'id' response property
 *   - 4: max_gas_cost - the 'id' response property
 */
export const queryAxelarEvmCommand = restful_grpc((s_chain, s_id) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'command_request', {
        chain: s_chain,
        id: s_id,
    }]);
/**
 * Queries the address of key of a chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param si_key -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 *   - 1: addresses - the 'key_id' response property
 *   - 2: threshold - the 'key_id' response property
 */
export const queryAxelarEvmKeyAddress = restful_grpc((s_chain, si_key) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'key_address/' + s_chain, {
        key_id: si_key,
    }]);
/**
 * Queries the address of axelar gateway at the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: address - the 'address' response property
 */
export const queryAxelarEvmGatewayAddress = restful_grpc(s_chain => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'gateway_address/' + s_chain]);
/**
 * Queries the bytecode of a specified gateway at the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_contract -
 * @returns a tuple where:
 *   - 0: bytecode - the 'bytecode' response property
 */
export const queryAxelarEvmBytecode = restful_grpc((s_chain, s_contract) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'bytecode/' + s_chain + '/' + s_contract]);
/**
 * Queries an event at the specified chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param si_event -
 * @returns a tuple where:
 *   - 0: event - the 'event' response property
 */
export const queryAxelarEvmEvent = restful_grpc((s_chain, si_event) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'event/' + s_chain + '/' + si_event]);
/**
 * Queries the ERC20 tokens registered for a chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param xc_type -
 * @returns a tuple where:
 *   - 0: tokens - the 'tokens' response property
 */
export const queryAxelarEvmERC20Tokens = restful_grpc((s_chain, xc_type) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'erc20_tokens/' + s_chain, {
        type: xc_type,
    }]);
/**
 * Queries the token info for a registered ERC20 Token
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_asset -
 * @param s_symbol -
 * @param sa_address -
 * @returns a tuple where:
 *   - 0: asset - the 'asset' response property
 *   - 1: details - the 'asset' response property
 *   - 2: address - the 'asset' response property
 *   - 3: confirmed - the 'asset' response property
 *   - 4: is_external - the 'asset' response property
 *   - 5: burner_code_hash - the 'asset' response property
 */
export const queryAxelarEvmTokenInfo = restful_grpc((s_chain, s_asset, s_symbol, sa_address) => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'token_info/' + s_chain, {
        asset: s_asset,
        symbol: s_symbol,
        address: sa_address,
    }]);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryAxelarEvmParams = restful_grpc(s_chain => [SR_LCD_AXELAR_EVM_QUERYSERVICE + 'params/' + s_chain]);
//# sourceMappingURL=service.js.map