import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarMultisigParams, DecodedAxelarMultisigParams } from './params.js';
import type { AxelarMultisigKeygenSession, DecodedAxelarMultisigKeygenSession, AxelarMultisigSigningSession, DecodedAxelarMultisigSigningSession, AxelarMultisigKey, DecodedAxelarMultisigKey, AxelarMultisigKeyEpoch, DecodedAxelarMultisigKeyEpoch } from './types.js';
export type EncodedAxelarMultisigGenesisState = Encoded<'/axelar.multisig.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: represents the genesis state
 * @param g_params - `params`:
 * @param a_keygen_sessions - `keygen_sessions`:
 * @param a_signing_sessions - `signing_sessions`:
 * @param a_keys - `keys`:
 * @param a_key_epochs - `key_epochs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigGenesisState: (atu8_params?: Opt<Encoded<'/axelar.multisig.v1beta1.Params'>>, a_keygen_sessions?: Opt<Encoded<'/axelar.multisig.v1beta1.KeygenSession'>[]>, a_signing_sessions?: Opt<Encoded<'/axelar.multisig.v1beta1.SigningSession'>[]>, a_keys?: Opt<Encoded<'/axelar.multisig.v1beta1.Key'>[]>, a_key_epochs?: Opt<Encoded<'/axelar.multisig.v1beta1.KeyEpoch'>[]>) => EncodedAxelarMultisigGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params -
 *   - 1: keygen_sessions -
 *   - 2: signing_sessions -
 *   - 3: keys -
 *   - 4: key_epochs -
 */
export type DecodedAxelarMultisigGenesisState = [
    a_params?: DecodedAxelarMultisigParams,
    a_keygen_sessions?: DecodedAxelarMultisigKeygenSession[],
    a_signing_sessions?: DecodedAxelarMultisigSigningSession[],
    a_keys?: DecodedAxelarMultisigKey[],
    a_key_epochs?: DecodedAxelarMultisigKeyEpoch[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigGenesisState}
 */
export declare const decodeAxelarMultisigGenesisState: (atu8_payload: Uint8Array) => DecodedAxelarMultisigGenesisState;
/**
 * Destructures the fields of a {@link AxelarMultisigGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: keygen_sessions -
 *   - 2: signing_sessions -
 *   - 3: keys -
 *   - 4: key_epochs -
 */
export declare const destructAxelarMultisigGenesisState: (g_struct: AxelarMultisigGenesisState) => [params?: AxelarMultisigParams, keygen_sessions?: AxelarMultisigKeygenSession[], signing_sessions?: AxelarMultisigSigningSession[], keys?: AxelarMultisigKey[], key_epochs?: AxelarMultisigKeyEpoch[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_GENESIS_STATE = "/axelar.multisig.v1beta1.GenesisState";
/**
 * JSON serialization of `axelar.multisig.v1beta1.GenesisState` - represents the genesis state
 */
export type AxelarMultisigGenesisState = {
    params?: AxelarMultisigParams | undefined;
    keygen_sessions?: AxelarMultisigKeygenSession[] | undefined;
    signing_sessions?: AxelarMultisigSigningSession[] | undefined;
    keys?: AxelarMultisigKey[] | undefined;
    key_epochs?: AxelarMultisigKeyEpoch[] | undefined;
};
