/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAxelarMultisigParams } from './params.js';
import { decodeAxelarMultisigKeygenSession, decodeAxelarMultisigSigningSession, decodeAxelarMultisigKey, decodeAxelarMultisigKeyEpoch } from './types.js';
/**
 * Encodes a `GenesisState` protobuf message: represents the genesis state
 * @param g_params - `params`:
 * @param a_keygen_sessions - `keygen_sessions`:
 * @param a_signing_sessions - `signing_sessions`:
 * @param a_keys - `keys`:
 * @param a_key_epochs - `key_epochs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigGenesisState = (atu8_params, a_keygen_sessions, a_signing_sessions, a_keys, a_key_epochs) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_keygen_sessions) // KeygenSession[] keygen_sessions = 2
    .B(a_signing_sessions) // SigningSession[] signing_sessions = 3
    .B(a_keys) // Key[] keys = 4
    .B(a_key_epochs) // KeyEpoch[] key_epochs = 5
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigGenesisState}
 */
export const decodeAxelarMultisigGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 0, 0, 0], [decodeAxelarMultisigParams, decodeAxelarMultisigKeygenSession, decodeAxelarMultisigSigningSession, decodeAxelarMultisigKey, decodeAxelarMultisigKeyEpoch]);
/**
 * Destructures the fields of a {@link AxelarMultisigGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: keygen_sessions -
 *   - 2: signing_sessions -
 *   - 3: keys -
 *   - 4: key_epochs -
 */
export const destructAxelarMultisigGenesisState = (g_struct) => [g_struct.params, g_struct.keygen_sessions, g_struct.signing_sessions, g_struct.keys, g_struct.key_epochs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_GENESIS_STATE = '/axelar.multisig.v1beta1.GenesisState';
//# sourceMappingURL=genesis.js.map