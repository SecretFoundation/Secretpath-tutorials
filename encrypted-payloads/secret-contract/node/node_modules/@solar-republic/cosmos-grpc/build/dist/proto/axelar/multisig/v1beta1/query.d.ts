import type { WeakInt64Str, WeakAccountAddr, CwInt64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../../api/types.js';
import type { ProtoEnumAxelarMultisigExportedKeyState, JsonEnumAxelarMultisigExportedKeyState, ProtoEnumAxelarMultisigExportedMultisigState, JsonEnumAxelarMultisigExportedMultisigState } from '../exported/v1beta1/types.js';
import type { AxelarMultisigParams, DecodedAxelarMultisigParams } from './params.js';
export type EncodedAxelarMultisigKeyIDRequest = Encoded<'/axelar.multisig.v1beta1.KeyIDRequest'>;
export type EncodedAxelarMultisigKeyIDResponse = Encoded<'/axelar.multisig.v1beta1.KeyIDResponse'>;
export type EncodedAxelarMultisigNextKeyIDRequest = Encoded<'/axelar.multisig.v1beta1.NextKeyIDRequest'>;
export type EncodedAxelarMultisigNextKeyIDResponse = Encoded<'/axelar.multisig.v1beta1.NextKeyIDResponse'>;
export type EncodedAxelarMultisigKeyRequest = Encoded<'/axelar.multisig.v1beta1.KeyRequest'>;
export type EncodedAxelarMultisigKeygenParticipant = Encoded<'/axelar.multisig.v1beta1.KeygenParticipant'>;
export type EncodedAxelarMultisigKeyResponse = Encoded<'/axelar.multisig.v1beta1.KeyResponse'>;
export type EncodedAxelarMultisigKeygenSessionRequest = Encoded<'/axelar.multisig.v1beta1.KeygenSessionRequest'>;
export type EncodedAxelarMultisigKeygenSessionResponse = Encoded<'/axelar.multisig.v1beta1.KeygenSessionResponse'>;
export type EncodedAxelarMultisigParamsRequest = Encoded<'/axelar.multisig.v1beta1.ParamsRequest'>;
export type EncodedAxelarMultisigParamsResponse = Encoded<'/axelar.multisig.v1beta1.ParamsResponse'>;
/**
 * Encodes a `KeyIDRequest` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyIDRequest: (s_chain?: Opt<string>) => EncodedAxelarMultisigKeyIDRequest;
/**
 * Encodes a `KeyIDResponse` protobuf message: contains the key ID of the key assigned to a given chain.
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyIDResponse: (si_key?: Opt<string>) => EncodedAxelarMultisigKeyIDResponse;
/**
 * Encodes a `NextKeyIDRequest` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigNextKeyIDRequest: (s_chain?: Opt<string>) => EncodedAxelarMultisigNextKeyIDRequest;
/**
 * Encodes a `NextKeyIDResponse` protobuf message: contains the key ID for the next rotation on the given chain
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigNextKeyIDResponse: (si_key?: Opt<string>) => EncodedAxelarMultisigNextKeyIDResponse;
/**
 * Encodes a `KeyRequest` protobuf message:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyRequest: (si_key?: Opt<string>) => EncodedAxelarMultisigKeyRequest;
/**
 * Encodes a `KeygenParticipant` protobuf message:
 * @param sa_address - `address`:
 * @param atu8_weight - `weight`:
 * @param s_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenParticipant: (sa_address?: Opt<WeakAccountAddr>, atu8_weight?: Opt<Uint8Array>, s_pub_key?: Opt<string>) => EncodedAxelarMultisigKeygenParticipant;
/**
 * Encodes a `KeyResponse` protobuf message: contains the key corresponding to a given key id.
 * @param si_key - `key_id`:
 * @param xc_state - `state`:
 * @param sg_started_at - `started_at`:
 * @param xt_started_at_timestamp - `started_at_timestamp`:
 * @param atu8_threshold_weight - `threshold_weight`:
 * @param atu8_bonded_weight - `bonded_weight`:
 * @param a_participants - `participants`: Keygen participants in descending order by weight
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyResponse: (si_key?: Opt<string>, xc_state?: Opt<ProtoEnumAxelarMultisigExportedKeyState>, sg_started_at?: Opt<WeakInt64Str>, xt_started_at_timestamp?: Opt<number>, atu8_threshold_weight?: Opt<Uint8Array>, atu8_bonded_weight?: Opt<Uint8Array>, a_participants?: Opt<Encoded<'/axelar.multisig.v1beta1.KeygenParticipant'>[]>) => EncodedAxelarMultisigKeyResponse;
/**
 * Encodes a `KeygenSessionRequest` protobuf message:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenSessionRequest: (si_key?: Opt<string>) => EncodedAxelarMultisigKeygenSessionRequest;
/**
 * Encodes a `KeygenSessionResponse` protobuf message: contains the keygen session info for a given key ID.
 * @param sg_started_at - `started_at`:
 * @param xt_started_at_timestamp - `started_at_timestamp`:
 * @param sg_expires_at - `expires_at`:
 * @param sg_completed_at - `completed_at`:
 * @param sg_grace_period - `grace_period`:
 * @param xc_state - `state`:
 * @param atu8_keygen_threshold_weight - `keygen_threshold_weight`:
 * @param atu8_signing_threshold_weight - `signing_threshold_weight`:
 * @param atu8_bonded_weight - `bonded_weight`:
 * @param a_participants - `participants`: Keygen candidates in descending order by weight
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenSessionResponse: (sg_started_at?: Opt<WeakInt64Str>, xt_started_at_timestamp?: Opt<number>, sg_expires_at?: Opt<WeakInt64Str>, sg_completed_at?: Opt<WeakInt64Str>, sg_grace_period?: Opt<WeakInt64Str>, xc_state?: Opt<ProtoEnumAxelarMultisigExportedMultisigState>, atu8_keygen_threshold_weight?: Opt<Uint8Array>, atu8_signing_threshold_weight?: Opt<Uint8Array>, atu8_bonded_weight?: Opt<Uint8Array>, a_participants?: Opt<Encoded<'/axelar.multisig.v1beta1.KeygenParticipant'>[]>) => EncodedAxelarMultisigKeygenSessionResponse;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigParamsRequest: () => EncodedAxelarMultisigParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigParamsResponse: (atu8_params?: Opt<Encoded<'/axelar.multisig.v1beta1.Params'>>) => EncodedAxelarMultisigParamsResponse;
/**
 * A decoded protobuf KeyIDRequest message
 *
 * Alias for: chain -
 */
export type DecodedAxelarMultisigKeyIDRequest = [
    s_chain?: string
];
/**
 * Decodes a protobuf KeyIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyIDRequest}
 */
export declare const decodeAxelarMultisigKeyIDRequest: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyIDRequest;
/**
 * A decoded protobuf KeyID message
 *
 * Alias for: key_id -
 */
export type DecodedAxelarMultisigKeyIDResponse = [
    si_key?: string
];
/**
 * Decodes a protobuf KeyID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyIDResponse}
 */
export declare const decodeAxelarMultisigKeyIDResponse: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyIDResponse;
/**
 * A decoded protobuf NextKeyIDRequest message
 *
 * Alias for: chain -
 */
export type DecodedAxelarMultisigNextKeyIDRequest = [
    s_chain?: string
];
/**
 * Decodes a protobuf NextKeyIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigNextKeyIDRequest}
 */
export declare const decodeAxelarMultisigNextKeyIDRequest: (atu8_payload: Uint8Array) => DecodedAxelarMultisigNextKeyIDRequest;
/**
 * A decoded protobuf NextKeyID message
 *
 * Alias for: key_id -
 */
export type DecodedAxelarMultisigNextKeyIDResponse = [
    si_key?: string
];
/**
 * Decodes a protobuf NextKeyID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigNextKeyIDResponse}
 */
export declare const decodeAxelarMultisigNextKeyIDResponse: (atu8_payload: Uint8Array) => DecodedAxelarMultisigNextKeyIDResponse;
/**
 * A decoded protobuf KeyRequest message
 *
 * Alias for: key_id -
 */
export type DecodedAxelarMultisigKeyRequest = [
    si_key?: string
];
/**
 * Decodes a protobuf KeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyRequest}
 */
export declare const decodeAxelarMultisigKeyRequest: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyRequest;
/**
 * A decoded protobuf KeygenParticipant message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: weight -
 *   - 2: pub_key -
 */
export type DecodedAxelarMultisigKeygenParticipant = [
    sa_address?: CwAccountAddr,
    atu8_weight?: Uint8Array,
    s_pub_key?: string
];
/**
 * Decodes a protobuf KeygenParticipant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenParticipant}
 */
export declare const decodeAxelarMultisigKeygenParticipant: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenParticipant;
/**
 * A decoded protobuf Key message
 *
 * Tuple where:
 *   - 0: key_id -
 *   - 1: state -
 *   - 2: started_at -
 *   - 3: started_at_timestamp -
 *   - 4: threshold_weight -
 *   - 5: bonded_weight -
 *   - 6: participants - Keygen participants in descending order by weight
 */
export type DecodedAxelarMultisigKeyResponse = [
    si_key?: string,
    xc_state?: ProtoEnumAxelarMultisigExportedKeyState,
    sg_started_at?: CwInt64,
    a_started_at_timestamp?: [
        string,
        number
    ],
    atu8_threshold_weight?: Uint8Array,
    atu8_bonded_weight?: Uint8Array,
    a_participants?: DecodedAxelarMultisigKeygenParticipant[]
];
/**
 * Decodes a protobuf Key message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyResponse}
 */
export declare const decodeAxelarMultisigKeyResponse: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyResponse;
/**
 * A decoded protobuf KeygenSessionRequest message
 *
 * Alias for: key_id -
 */
export type DecodedAxelarMultisigKeygenSessionRequest = [
    si_key?: string
];
/**
 * Decodes a protobuf KeygenSessionRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenSessionRequest}
 */
export declare const decodeAxelarMultisigKeygenSessionRequest: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenSessionRequest;
/**
 * A decoded protobuf KeygenSession message
 *
 * Tuple where:
 *   - 0: started_at -
 *   - 1: started_at_timestamp -
 *   - 2: expires_at -
 *   - 3: completed_at -
 *   - 4: grace_period -
 *   - 5: state -
 *   - 6: keygen_threshold_weight -
 *   - 7: signing_threshold_weight -
 *   - 8: bonded_weight -
 *   - 9: participants - Keygen candidates in descending order by weight
 */
export type DecodedAxelarMultisigKeygenSessionResponse = [
    sg_started_at?: CwInt64,
    a_started_at_timestamp?: [
        string,
        number
    ],
    sg_expires_at?: CwInt64,
    sg_completed_at?: CwInt64,
    sg_grace_period?: CwInt64,
    xc_state?: ProtoEnumAxelarMultisigExportedMultisigState,
    atu8_keygen_threshold_weight?: Uint8Array,
    atu8_signing_threshold_weight?: Uint8Array,
    atu8_bonded_weight?: Uint8Array,
    a_participants?: DecodedAxelarMultisigKeygenParticipant[]
];
/**
 * Decodes a protobuf KeygenSession message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenSessionResponse}
 */
export declare const decodeAxelarMultisigKeygenSessionResponse: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenSessionResponse;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarMultisigParamsRequest = [];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigParamsRequest}
 */
export declare const decodeAxelarMultisigParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Params message
 *
 * Alias for: params -
 */
export type DecodedAxelarMultisigParamsResponse = [
    a_params?: DecodedAxelarMultisigParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigParamsResponse}
 */
export declare const decodeAxelarMultisigParamsResponse: (atu8_payload: Uint8Array) => DecodedAxelarMultisigParamsResponse;
/**
 * Destructures the fields of a {@link AxelarMultisigKeyIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarMultisigKeyIDRequest: (g_struct: AxelarMultisigKeyIDRequest) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_I_D_REQUEST = "/axelar.multisig.v1beta1.KeyIDRequest";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyIDRequest` -
 */
export type AxelarMultisigKeyIDRequest = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 */
export declare const destructAxelarMultisigKeyIDResponse: (g_struct: AxelarMultisigKeyIDResponse) => [key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_I_D_RESPONSE = "/axelar.multisig.v1beta1.KeyIDResponse";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyIDResponse` - contains the key ID of the key assigned to a given chain.
 */
export type AxelarMultisigKeyIDResponse = {
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigNextKeyIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export declare const destructAxelarMultisigNextKeyIDRequest: (g_struct: AxelarMultisigNextKeyIDRequest) => [chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_NEXT_KEY_I_D_REQUEST = "/axelar.multisig.v1beta1.NextKeyIDRequest";
/**
 * JSON serialization of `axelar.multisig.v1beta1.NextKeyIDRequest` -
 */
export type AxelarMultisigNextKeyIDRequest = {
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigNextKeyIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 */
export declare const destructAxelarMultisigNextKeyIDResponse: (g_struct: AxelarMultisigNextKeyIDResponse) => [key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_NEXT_KEY_I_D_RESPONSE = "/axelar.multisig.v1beta1.NextKeyIDResponse";
/**
 * JSON serialization of `axelar.multisig.v1beta1.NextKeyIDResponse` - contains the key ID for the next rotation on the given chain
 */
export type AxelarMultisigNextKeyIDResponse = {
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 */
export declare const destructAxelarMultisigKeyRequest: (g_struct: AxelarMultisigKeyRequest) => [key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_REQUEST = "/axelar.multisig.v1beta1.KeyRequest";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyRequest` -
 */
export type AxelarMultisigKeyRequest = {
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenParticipant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: weight -
 *   - 2: pub_key -
 */
export declare const destructAxelarMultisigKeygenParticipant: (g_struct: AxelarMultisigKeygenParticipant) => [address?: CwAccountAddr, weight?: Uint8Array, pub_key?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_PARTICIPANT = "/axelar.multisig.v1beta1.KeygenParticipant";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenParticipant` -
 */
export type AxelarMultisigKeygenParticipant = {
    address?: CwAccountAddr | undefined;
    weight?: CwBase64 | undefined;
    pub_key?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: state -
 *   - 2: started_at -
 *   - 3: started_at_timestamp -
 *   - 4: threshold_weight -
 *   - 5: bonded_weight -
 *   - 6: participants - Keygen participants in descending order by weight
 */
export declare const destructAxelarMultisigKeyResponse: (g_struct: AxelarMultisigKeyResponse) => [key_id?: string, state?: JsonEnumAxelarMultisigExportedKeyState, started_at?: CwInt64, started_at_timestamp?: number, threshold_weight?: Uint8Array, bonded_weight?: Uint8Array, participants?: AxelarMultisigKeygenParticipant[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_RESPONSE = "/axelar.multisig.v1beta1.KeyResponse";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyResponse` - contains the key corresponding to a given key id.
 */
export type AxelarMultisigKeyResponse = {
    key_id?: string | undefined;
    state?: JsonEnumAxelarMultisigExportedKeyState | undefined;
    started_at?: CwInt64 | undefined;
    started_at_timestamp?: WeakTimestampStr | undefined;
    threshold_weight?: CwBase64 | undefined;
    bonded_weight?: CwBase64 | undefined;
    participants?: AxelarMultisigKeygenParticipant[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenSessionRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 */
export declare const destructAxelarMultisigKeygenSessionRequest: (g_struct: AxelarMultisigKeygenSessionRequest) => [key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_SESSION_REQUEST = "/axelar.multisig.v1beta1.KeygenSessionRequest";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenSessionRequest` -
 */
export type AxelarMultisigKeygenSessionRequest = {
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenSessionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: started_at -
 *   - 1: started_at_timestamp -
 *   - 2: expires_at -
 *   - 3: completed_at -
 *   - 4: grace_period -
 *   - 5: state -
 *   - 6: keygen_threshold_weight -
 *   - 7: signing_threshold_weight -
 *   - 8: bonded_weight -
 *   - 9: participants - Keygen candidates in descending order by weight
 */
export declare const destructAxelarMultisigKeygenSessionResponse: (g_struct: AxelarMultisigKeygenSessionResponse) => [started_at?: CwInt64, started_at_timestamp?: number, expires_at?: CwInt64, completed_at?: CwInt64, grace_period?: CwInt64, state?: JsonEnumAxelarMultisigExportedMultisigState, keygen_threshold_weight?: Uint8Array, signing_threshold_weight?: Uint8Array, bonded_weight?: Uint8Array, participants?: AxelarMultisigKeygenParticipant[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_SESSION_RESPONSE = "/axelar.multisig.v1beta1.KeygenSessionResponse";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenSessionResponse` - contains the keygen session info for a given key ID.
 */
export type AxelarMultisigKeygenSessionResponse = {
    started_at?: CwInt64 | undefined;
    started_at_timestamp?: WeakTimestampStr | undefined;
    expires_at?: CwInt64 | undefined;
    completed_at?: CwInt64 | undefined;
    grace_period?: CwInt64 | undefined;
    state?: JsonEnumAxelarMultisigExportedMultisigState | undefined;
    keygen_threshold_weight?: CwBase64 | undefined;
    signing_threshold_weight?: CwBase64 | undefined;
    bonded_weight?: CwBase64 | undefined;
    participants?: AxelarMultisigKeygenParticipant[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarMultisigParamsRequest: (g_struct: AxelarMultisigParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_PARAMS_REQUEST = "/axelar.multisig.v1beta1.ParamsRequest";
/**
 * JSON serialization of `axelar.multisig.v1beta1.ParamsRequest` - represents a message that queries the params
 */
export type AxelarMultisigParamsRequest = {};
/**
 * Destructures the fields of a {@link AxelarMultisigParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export declare const destructAxelarMultisigParamsResponse: (g_struct: AxelarMultisigParamsResponse) => [params?: AxelarMultisigParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_PARAMS_RESPONSE = "/axelar.multisig.v1beta1.ParamsResponse";
/**
 * JSON serialization of `axelar.multisig.v1beta1.ParamsResponse` -
 */
export type AxelarMultisigParamsResponse = {
    params?: AxelarMultisigParams | undefined;
};
