import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `StartKeygenRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigStartKeygenRequest = (sa_sender, si_key) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(si_key) // string key_id = 2
    .o;
/**
 * Encodes a `StartKeygenResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigStartKeygenResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `SubmitPubKeyRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param si_key - `key_id`:
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSubmitPubKeyRequest = (sa_sender, si_key, atu8_pub_key, atu8_signature) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(si_key) // string key_id = 2
    .b(atu8_pub_key) // bytes pub_key = 3
    .b(atu8_signature) // bytes signature = 4
    .o;
/**
 * Encodes a `SubmitPubKeyResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSubmitPubKeyResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `SubmitSignatureRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_sig_id - `sig_id`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSubmitSignatureRequest = (sa_sender, sg_sig_id, atu8_signature) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_sig_id) // uint64 sig_id = 2
    .b(atu8_signature) // bytes signature = 3
    .o;
/**
 * Encodes a `SubmitSignatureResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSubmitSignatureResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RotateKeyRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigRotateKeyRequest = (sa_sender, s_chain, si_key) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(si_key) // string key_id = 3
    .o;
/**
 * Encodes a `RotateKeyResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigRotateKeyResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `KeygenOptOutRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenOptOutRequest = (sa_sender) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .o;
/**
 * Encodes a `KeygenOptOutResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenOptOutResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `KeygenOptInRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenOptInRequest = (sa_sender) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .o;
/**
 * Encodes a `KeygenOptInResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenOptInResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf StartKeygenRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigStartKeygenRequest}
 */
export const decodeAxelarMultisigStartKeygenRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf StartKeygen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigStartKeygenResponse}
 */
export const decodeAxelarMultisigStartKeygenResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitPubKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSubmitPubKeyRequest}
 */
export const decodeAxelarMultisigSubmitPubKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1]);
/**
 * Decodes a protobuf SubmitPubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSubmitPubKeyResponse}
 */
export const decodeAxelarMultisigSubmitPubKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitSignatureRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSubmitSignatureRequest}
 */
export const decodeAxelarMultisigSubmitSignatureRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1]);
/**
 * Decodes a protobuf SubmitSignature message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSubmitSignatureResponse}
 */
export const decodeAxelarMultisigSubmitSignatureResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RotateKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigRotateKeyRequest}
 */
export const decodeAxelarMultisigRotateKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5]);
/**
 * Decodes a protobuf RotateKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigRotateKeyResponse}
 */
export const decodeAxelarMultisigRotateKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf KeygenOptOutRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptOutRequest}
 */
export const decodeAxelarMultisigKeygenOptOutRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf KeygenOptOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptOutResponse}
 */
export const decodeAxelarMultisigKeygenOptOutResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf KeygenOptInRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptInRequest}
 */
export const decodeAxelarMultisigKeygenOptInRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf KeygenOptIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptInResponse}
 */
export const decodeAxelarMultisigKeygenOptInResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AxelarMultisigStartKeygenRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: key_id -
 */
export const destructAxelarMultisigStartKeygenRequest = (g_struct) => [g_struct.sender, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_START_KEYGEN_REQUEST = '/axelar.multisig.v1beta1.StartKeygenRequest';
/**
 * Destructures the fields of a {@link AxelarMultisigStartKeygenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarMultisigStartKeygenResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_START_KEYGEN_RESPONSE = '/axelar.multisig.v1beta1.StartKeygenResponse';
/**
 * Destructures the fields of a {@link AxelarMultisigSubmitPubKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: key_id -
 *   - 2: pub_key -
 *   - 3: signature -
 */
export const destructAxelarMultisigSubmitPubKeyRequest = (g_struct) => [g_struct.sender, g_struct.key_id, safe_base64_to_bytes(g_struct.pub_key), safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SUBMIT_PUB_KEY_REQUEST = '/axelar.multisig.v1beta1.SubmitPubKeyRequest';
/**
 * Destructures the fields of a {@link AxelarMultisigSubmitPubKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarMultisigSubmitPubKeyResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SUBMIT_PUB_KEY_RESPONSE = '/axelar.multisig.v1beta1.SubmitPubKeyResponse';
/**
 * Destructures the fields of a {@link AxelarMultisigSubmitSignatureRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: sig_id -
 *   - 2: signature -
 */
export const destructAxelarMultisigSubmitSignatureRequest = (g_struct) => [g_struct.sender, g_struct.sig_id, safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SUBMIT_SIGNATURE_REQUEST = '/axelar.multisig.v1beta1.SubmitSignatureRequest';
/**
 * Destructures the fields of a {@link AxelarMultisigSubmitSignatureResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarMultisigSubmitSignatureResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SUBMIT_SIGNATURE_RESPONSE = '/axelar.multisig.v1beta1.SubmitSignatureResponse';
/**
 * Destructures the fields of a {@link AxelarMultisigRotateKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: key_id -
 */
export const destructAxelarMultisigRotateKeyRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_ROTATE_KEY_REQUEST = '/axelar.multisig.v1beta1.RotateKeyRequest';
/**
 * Destructures the fields of a {@link AxelarMultisigRotateKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarMultisigRotateKeyResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_ROTATE_KEY_RESPONSE = '/axelar.multisig.v1beta1.RotateKeyResponse';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptOutRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 */
export const destructAxelarMultisigKeygenOptOutRequest = (g_struct) => [g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_OUT_REQUEST = '/axelar.multisig.v1beta1.KeygenOptOutRequest';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptOutResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarMultisigKeygenOptOutResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_OUT_RESPONSE = '/axelar.multisig.v1beta1.KeygenOptOutResponse';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptInRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 */
export const destructAxelarMultisigKeygenOptInRequest = (g_struct) => [g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_IN_REQUEST = '/axelar.multisig.v1beta1.KeygenOptInRequest';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptInResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarMultisigKeygenOptInResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_IN_RESPONSE = '/axelar.multisig.v1beta1.KeygenOptInResponse';
//# sourceMappingURL=tx.js.map