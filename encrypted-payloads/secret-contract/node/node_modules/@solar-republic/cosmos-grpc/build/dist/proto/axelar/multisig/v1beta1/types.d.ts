import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { ProtoEnumAxelarMultisigExportedKeyState, JsonEnumAxelarMultisigExportedKeyState, ProtoEnumAxelarMultisigExportedMultisigState, JsonEnumAxelarMultisigExportedMultisigState } from '../exported/v1beta1/types.js';
import type { AxelarSnapshotExportedSnapshot, DecodedAxelarSnapshotExportedSnapshot } from '../../snapshot/exported/v1beta1/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedAxelarMultisigKey = Encoded<'/axelar.multisig.v1beta1.Key'>;
export type EncodedAxelarMultisigKeygenSession = Encoded<'/axelar.multisig.v1beta1.KeygenSession'>;
export type EncodedAxelarMultisigMultiSig = Encoded<'/axelar.multisig.v1beta1.MultiSig'>;
export type EncodedAxelarMultisigSigningSession = Encoded<'/axelar.multisig.v1beta1.SigningSession'>;
export type EncodedAxelarMultisigKeyEpoch = Encoded<'/axelar.multisig.v1beta1.KeyEpoch'>;
export type EncodedAxelarMultisigKeyPubKeysEntry = Encoded<'/axelar.multisig.v1beta1.Key.PubKeysEntry'>;
export type EncodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry = Encoded<'/axelar.multisig.v1beta1.KeygenSession.IsPubKeyReceivedEntry'>;
export type EncodedAxelarMultisigMultiSigSigsEntry = Encoded<'/axelar.multisig.v1beta1.MultiSig.SigsEntry'>;
/**
 * Encodes a `Key` protobuf message:
 * @param s_id - `id`:
 * @param g_snapshot - `snapshot`:
 * @param a_pub_keys - `pub_keys`:
 * @param g_signing_threshold - `signing_threshold`:
 * @param xc_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKey: (s_id?: Opt<string>, atu8_snapshot?: Opt<Encoded<'/axelar.snapshot.exported.v1beta1.Snapshot'>>, a_pub_keys?: Opt<Encoded<'/axelar.multisig.v1beta1.Key.PubKeysEntry'>[]>, atu8_signing_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, xc_state?: Opt<ProtoEnumAxelarMultisigExportedKeyState>) => EncodedAxelarMultisigKey;
/**
 * Encodes a `KeygenSession` protobuf message:
 * @param g_key - `key`:
 * @param xc_state - `state`:
 * @param g_keygen_threshold - `keygen_threshold`:
 * @param sg_expires_at - `expires_at`:
 * @param sg_completed_at - `completed_at`:
 * @param a_is_pub_key_receiveds - `is_pub_key_received`:
 * @param sg_grace_period - `grace_period`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenSession: (atu8_key?: Opt<Encoded<'/axelar.multisig.v1beta1.Key'>>, xc_state?: Opt<ProtoEnumAxelarMultisigExportedMultisigState>, atu8_keygen_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_expires_at?: Opt<WeakInt64Str>, sg_completed_at?: Opt<WeakInt64Str>, a_is_pub_key_receiveds?: Opt<Encoded<'/axelar.multisig.v1beta1.KeygenSession.IsPubKeyReceivedEntry'>[]>, sg_grace_period?: Opt<WeakInt64Str>) => EncodedAxelarMultisigKeygenSession;
/**
 * Encodes a `MultiSig` protobuf message:
 * @param si_key - `key_id`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param a_sigs - `sigs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigMultiSig: (si_key?: Opt<string>, atu8_payload_hash?: Opt<Uint8Array>, a_sigs?: Opt<Encoded<'/axelar.multisig.v1beta1.MultiSig.SigsEntry'>[]>) => EncodedAxelarMultisigMultiSig;
/**
 * Encodes a `SigningSession` protobuf message:
 * @param sg_id - `id`:
 * @param g_multi_sig - `multi_sig`:
 * @param xc_state - `state`:
 * @param g_key - `key`:
 * @param sg_expires_at - `expires_at`:
 * @param sg_completed_at - `completed_at`:
 * @param sg_grace_period - `grace_period`:
 * @param s_module - `module`:
 * @param atu8_module_metadata - `module_metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigSigningSession: (sg_id?: Opt<WeakUint64Str>, atu8_multi_sig?: Opt<Encoded<'/axelar.multisig.v1beta1.MultiSig'>>, xc_state?: Opt<ProtoEnumAxelarMultisigExportedMultisigState>, atu8_key?: Opt<Encoded<'/axelar.multisig.v1beta1.Key'>>, sg_expires_at?: Opt<WeakInt64Str>, sg_completed_at?: Opt<WeakInt64Str>, sg_grace_period?: Opt<WeakInt64Str>, s_module?: Opt<string>, atu8_module_metadata?: Opt<Encoded<'github.com/cosmos/codec/ProtoMarshaler'>>) => EncodedAxelarMultisigSigningSession;
/**
 * Encodes a `KeyEpoch` protobuf message:
 * @param sg_epoch - `epoch`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyEpoch: (sg_epoch?: Opt<WeakUint64Str>, s_chain?: Opt<string>, si_key?: Opt<string>) => EncodedAxelarMultisigKeyEpoch;
/**
 * Encodes a `PubKeysEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyPubKeysEntry: (s_key?: Opt<string>, atu8_value?: Opt<Uint8Array>) => EncodedAxelarMultisigKeyPubKeysEntry;
/**
 * Encodes a `IsPubKeyReceivedEntry` protobuf message:
 * @param s_key - `key`:
 * @param b_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenSessionIsPubKeyReceivedEntry: (s_key?: Opt<string>, b_value?: Opt<boolean | 0 | 1>) => EncodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry;
/**
 * Encodes a `SigsEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigMultiSigSigsEntry: (s_key?: Opt<string>, atu8_value?: Opt<Uint8Array>) => EncodedAxelarMultisigMultiSigSigsEntry;
/**
 * A decoded protobuf Key message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: snapshot -
 *   - 2: pub_keys -
 *   - 3: signing_threshold -
 *   - 4: state -
 */
export type DecodedAxelarMultisigKey = [
    s_id?: string,
    a_snapshot?: DecodedAxelarSnapshotExportedSnapshot,
    a_pub_keys?: DecodedAxelarMultisigKeyPubKeysEntry[],
    a_signing_threshold?: DecodedAxelarUtilsThreshold,
    xc_state?: ProtoEnumAxelarMultisigExportedKeyState
];
/**
 * Decodes a protobuf Key message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKey}
 */
export declare const decodeAxelarMultisigKey: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKey;
/**
 * A decoded protobuf KeygenSession message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: state -
 *   - 2: keygen_threshold -
 *   - 3: expires_at -
 *   - 4: completed_at -
 *   - 5: is_pub_key_received -
 *   - 6: grace_period -
 */
export type DecodedAxelarMultisigKeygenSession = [
    a_key?: DecodedAxelarMultisigKey,
    xc_state?: ProtoEnumAxelarMultisigExportedMultisigState,
    a_keygen_threshold?: DecodedAxelarUtilsThreshold,
    sg_expires_at?: CwInt64,
    sg_completed_at?: CwInt64,
    a_is_pub_key_received?: DecodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry[],
    sg_grace_period?: CwInt64
];
/**
 * Decodes a protobuf KeygenSession message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenSession}
 */
export declare const decodeAxelarMultisigKeygenSession: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenSession;
/**
 * A decoded protobuf MultiSig message
 *
 * Tuple where:
 *   - 0: key_id -
 *   - 1: payload_hash -
 *   - 2: sigs -
 */
export type DecodedAxelarMultisigMultiSig = [
    si_key?: string,
    atu8_payload_hash?: Uint8Array,
    a_sigs?: DecodedAxelarMultisigMultiSigSigsEntry[]
];
/**
 * Decodes a protobuf MultiSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigMultiSig}
 */
export declare const decodeAxelarMultisigMultiSig: (atu8_payload: Uint8Array) => DecodedAxelarMultisigMultiSig;
/**
 * A decoded protobuf SigningSession message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: multi_sig -
 *   - 2: state -
 *   - 3: key -
 *   - 4: expires_at -
 *   - 5: completed_at -
 *   - 6: grace_period -
 *   - 7: module -
 *   - 8: module_metadata -
 */
export type DecodedAxelarMultisigSigningSession = [
    sg_id?: CwUint64,
    a_multi_sig?: DecodedAxelarMultisigMultiSig,
    xc_state?: ProtoEnumAxelarMultisigExportedMultisigState,
    a_key?: DecodedAxelarMultisigKey,
    sg_expires_at?: CwInt64,
    sg_completed_at?: CwInt64,
    sg_grace_period?: CwInt64,
    s_module?: string,
    a_module_metadata?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf SigningSession message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningSession}
 */
export declare const decodeAxelarMultisigSigningSession: (atu8_payload: Uint8Array) => DecodedAxelarMultisigSigningSession;
/**
 * A decoded protobuf KeyEpoch message
 *
 * Tuple where:
 *   - 0: epoch -
 *   - 1: chain -
 *   - 2: key_id -
 */
export type DecodedAxelarMultisigKeyEpoch = [
    sg_epoch?: CwUint64,
    s_chain?: string,
    si_key?: string
];
/**
 * Decodes a protobuf KeyEpoch message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyEpoch}
 */
export declare const decodeAxelarMultisigKeyEpoch: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyEpoch;
/**
 * A decoded protobuf PubKeysEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarMultisigKeyPubKeysEntry = [
    s_key?: string,
    atu8_value?: Uint8Array
];
/**
 * Decodes a protobuf PubKeysEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyPubKeysEntry}
 */
export declare const decodeAxelarMultisigKeyPubKeysEntry: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyPubKeysEntry;
/**
 * A decoded protobuf IsPubKeyReceivedEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry = [
    s_key?: string,
    b_value?: 0 | 1
];
/**
 * Decodes a protobuf IsPubKeyReceivedEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry}
 */
export declare const decodeAxelarMultisigKeygenSessionIsPubKeyReceivedEntry: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry;
/**
 * A decoded protobuf SigsEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarMultisigMultiSigSigsEntry = [
    s_key?: string,
    atu8_value?: Uint8Array
];
/**
 * Decodes a protobuf SigsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigMultiSigSigsEntry}
 */
export declare const decodeAxelarMultisigMultiSigSigsEntry: (atu8_payload: Uint8Array) => DecodedAxelarMultisigMultiSigSigsEntry;
/**
 * Destructures the fields of a {@link AxelarMultisigKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: snapshot -
 *   - 2: pub_keys -
 *   - 3: signing_threshold -
 *   - 4: state -
 */
export declare const destructAxelarMultisigKey: (g_struct: AxelarMultisigKey) => [id?: string, snapshot?: AxelarSnapshotExportedSnapshot, pub_keys?: AxelarMultisigKeyPubKeysEntry[], signing_threshold?: AxelarUtilsThreshold, state?: JsonEnumAxelarMultisigExportedKeyState];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY = "/axelar.multisig.v1beta1.Key";
/**
 * JSON serialization of `axelar.multisig.v1beta1.Key` -
 */
export type AxelarMultisigKey = {
    id?: string | undefined;
    snapshot?: AxelarSnapshotExportedSnapshot | undefined;
    pub_keys?: AxelarMultisigKeyPubKeysEntry[] | undefined;
    signing_threshold?: AxelarUtilsThreshold | undefined;
    state?: JsonEnumAxelarMultisigExportedKeyState | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyPubKeysEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarMultisigKeyPubKeysEntry: (g_struct: AxelarMultisigKeyPubKeysEntry) => [key?: string, value?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_PUB_KEYS_ENTRY = "/axelar.multisig.v1beta1.Key.PubKeysEntry";
/**
 * JSON serialization of `axelar.multisig.v1beta1.Key.PubKeysEntry` -
 */
export type AxelarMultisigKeyPubKeysEntry = {
    key?: string | undefined;
    value?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenSession} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: state -
 *   - 2: keygen_threshold -
 *   - 3: expires_at -
 *   - 4: completed_at -
 *   - 5: is_pub_key_received -
 *   - 6: grace_period -
 */
export declare const destructAxelarMultisigKeygenSession: (g_struct: AxelarMultisigKeygenSession) => [key?: AxelarMultisigKey, state?: JsonEnumAxelarMultisigExportedMultisigState, keygen_threshold?: AxelarUtilsThreshold, expires_at?: CwInt64, completed_at?: CwInt64, is_pub_key_received?: AxelarMultisigKeygenSessionIsPubKeyReceivedEntry[], grace_period?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_SESSION = "/axelar.multisig.v1beta1.KeygenSession";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenSession` -
 */
export type AxelarMultisigKeygenSession = {
    key?: AxelarMultisigKey | undefined;
    state?: JsonEnumAxelarMultisigExportedMultisigState | undefined;
    keygen_threshold?: AxelarUtilsThreshold | undefined;
    expires_at?: CwInt64 | undefined;
    completed_at?: CwInt64 | undefined;
    is_pub_key_received?: AxelarMultisigKeygenSessionIsPubKeyReceivedEntry[] | undefined;
    grace_period?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenSessionIsPubKeyReceivedEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarMultisigKeygenSessionIsPubKeyReceivedEntry: (g_struct: AxelarMultisigKeygenSessionIsPubKeyReceivedEntry) => [key?: string, value?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_SESSION_IS_PUB_KEY_RECEIVED_ENTRY = "/axelar.multisig.v1beta1.KeygenSession.IsPubKeyReceivedEntry";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenSession.IsPubKeyReceivedEntry` -
 */
export type AxelarMultisigKeygenSessionIsPubKeyReceivedEntry = {
    key?: string | undefined;
    value?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigMultiSig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: payload_hash -
 *   - 2: sigs -
 */
export declare const destructAxelarMultisigMultiSig: (g_struct: AxelarMultisigMultiSig) => [key_id?: string, payload_hash?: Uint8Array, sigs?: AxelarMultisigMultiSigSigsEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_MULTI_SIG = "/axelar.multisig.v1beta1.MultiSig";
/**
 * JSON serialization of `axelar.multisig.v1beta1.MultiSig` -
 */
export type AxelarMultisigMultiSig = {
    key_id?: string | undefined;
    payload_hash?: CwBase64 | undefined;
    sigs?: AxelarMultisigMultiSigSigsEntry[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigMultiSigSigsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarMultisigMultiSigSigsEntry: (g_struct: AxelarMultisigMultiSigSigsEntry) => [key?: string, value?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_MULTI_SIG_SIGS_ENTRY = "/axelar.multisig.v1beta1.MultiSig.SigsEntry";
/**
 * JSON serialization of `axelar.multisig.v1beta1.MultiSig.SigsEntry` -
 */
export type AxelarMultisigMultiSigSigsEntry = {
    key?: string | undefined;
    value?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigSigningSession} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: multi_sig -
 *   - 2: state -
 *   - 3: key -
 *   - 4: expires_at -
 *   - 5: completed_at -
 *   - 6: grace_period -
 *   - 7: module -
 *   - 8: module_metadata -
 */
export declare const destructAxelarMultisigSigningSession: (g_struct: AxelarMultisigSigningSession) => [id?: CwUint64, multi_sig?: AxelarMultisigMultiSig, state?: JsonEnumAxelarMultisigExportedMultisigState, key?: AxelarMultisigKey, expires_at?: CwInt64, completed_at?: CwInt64, grace_period?: CwInt64, module?: string, module_metadata?: JsonAny<string>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_SESSION = "/axelar.multisig.v1beta1.SigningSession";
/**
 * JSON serialization of `axelar.multisig.v1beta1.SigningSession` -
 */
export type AxelarMultisigSigningSession = {
    id?: CwUint64 | undefined;
    multi_sig?: AxelarMultisigMultiSig | undefined;
    state?: JsonEnumAxelarMultisigExportedMultisigState | undefined;
    key?: AxelarMultisigKey | undefined;
    expires_at?: CwInt64 | undefined;
    completed_at?: CwInt64 | undefined;
    grace_period?: CwInt64 | undefined;
    module?: string | undefined;
    module_metadata?: JsonAny<string> | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyEpoch} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch -
 *   - 1: chain -
 *   - 2: key_id -
 */
export declare const destructAxelarMultisigKeyEpoch: (g_struct: AxelarMultisigKeyEpoch) => [epoch?: CwUint64, chain?: string, key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_EPOCH = "/axelar.multisig.v1beta1.KeyEpoch";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyEpoch` -
 */
export type AxelarMultisigKeyEpoch = {
    epoch?: CwUint64 | undefined;
    chain?: string | undefined;
    key_id?: string | undefined;
};
