import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarSnapshotExportedSnapshot } from '../../snapshot/exported/v1beta1/types.js';
import { decodeAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `Key` protobuf message:
 * @param s_id - `id`:
 * @param g_snapshot - `snapshot`:
 * @param a_pub_keys - `pub_keys`:
 * @param g_signing_threshold - `signing_threshold`:
 * @param xc_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKey = (s_id, atu8_snapshot, a_pub_keys, atu8_signing_threshold, xc_state) => Protobuf() // ...
    .s(s_id) // string id = 1
    .b(atu8_snapshot) // Snapshot snapshot = 2
    .B(a_pub_keys) // PubKeysEntry[] pub_keys = 3
    .b(atu8_signing_threshold) // Threshold signing_threshold = 4
    .v(xc_state) // KeyState state = 5
    .o;
/**
 * Encodes a `KeygenSession` protobuf message:
 * @param g_key - `key`:
 * @param xc_state - `state`:
 * @param g_keygen_threshold - `keygen_threshold`:
 * @param sg_expires_at - `expires_at`:
 * @param sg_completed_at - `completed_at`:
 * @param a_is_pub_key_receiveds - `is_pub_key_received`:
 * @param sg_grace_period - `grace_period`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenSession = (atu8_key, xc_state, atu8_keygen_threshold, sg_expires_at, sg_completed_at, a_is_pub_key_receiveds, sg_grace_period) => Protobuf() // ...
    .b(atu8_key) // Key key = 1
    .v(xc_state) // MultisigState state = 2
    .b(atu8_keygen_threshold) // Threshold keygen_threshold = 3
    .g(sg_expires_at) // int32 expires_at = 4
    .g(sg_completed_at) // int32 completed_at = 5
    .B(a_is_pub_key_receiveds) // IsPubKeyReceivedEntry[] is_pub_key_received = 6
    .g(sg_grace_period) // int32 grace_period = 7
    .o;
/**
 * Encodes a `MultiSig` protobuf message:
 * @param si_key - `key_id`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param a_sigs - `sigs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigMultiSig = (si_key, atu8_payload_hash, a_sigs) => Protobuf() // ...
    .s(si_key) // string key_id = 1
    .b(atu8_payload_hash) // bytes payload_hash = 2
    .B(a_sigs) // SigsEntry[] sigs = 3
    .o;
/**
 * Encodes a `SigningSession` protobuf message:
 * @param sg_id - `id`:
 * @param g_multi_sig - `multi_sig`:
 * @param xc_state - `state`:
 * @param g_key - `key`:
 * @param sg_expires_at - `expires_at`:
 * @param sg_completed_at - `completed_at`:
 * @param sg_grace_period - `grace_period`:
 * @param s_module - `module`:
 * @param atu8_module_metadata - `module_metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSigningSession = (sg_id, atu8_multi_sig, xc_state, atu8_key, sg_expires_at, sg_completed_at, sg_grace_period, s_module, atu8_module_metadata) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .b(atu8_multi_sig) // MultiSig multi_sig = 2
    .v(xc_state) // MultisigState state = 3
    .b(atu8_key) // Key key = 4
    .g(sg_expires_at) // int32 expires_at = 5
    .g(sg_completed_at) // int32 completed_at = 6
    .g(sg_grace_period) // int32 grace_period = 7
    .s(s_module) // string module = 8
    .b(atu8_module_metadata) // Any module_metadata = 9
    .o;
/**
 * Encodes a `KeyEpoch` protobuf message:
 * @param sg_epoch - `epoch`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeyEpoch = (sg_epoch, s_chain, si_key) => Protobuf() // ...
    .g(sg_epoch) // uint64 epoch = 1
    .s(s_chain) // string chain = 2
    .s(si_key) // string key_id = 3
    .o;
/**
 * Encodes a `PubKeysEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeyPubKeysEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // bytes value = 2
    .o;
/**
 * Encodes a `IsPubKeyReceivedEntry` protobuf message:
 * @param s_key - `key`:
 * @param b_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenSessionIsPubKeyReceivedEntry = (s_key, b_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .v(b_value) // boolean value = 2
    .o;
/**
 * Encodes a `SigsEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigMultiSigSigsEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // bytes value = 2
    .o;
/**
 * Decodes a protobuf Key message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKey}
 */
export const decodeAxelarMultisigKey = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0, 1, 1], [0, decodeAxelarSnapshotExportedSnapshot, decodeAxelarMultisigKeyPubKeysEntry, decodeAxelarUtilsThreshold]);
/**
 * Decodes a protobuf KeygenSession message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenSession}
 */
export const decodeAxelarMultisigKeygenSession = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 3, 3, 0, 3], [decodeAxelarMultisigKey, 0, decodeAxelarUtilsThreshold, 0, 0, decodeAxelarMultisigKeygenSessionIsPubKeyReceivedEntry]);
/**
 * Decodes a protobuf MultiSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigMultiSig}
 */
export const decodeAxelarMultisigMultiSig = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0], [0, 0, decodeAxelarMultisigMultiSigSigsEntry]);
/**
 * Decodes a protobuf SigningSession message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningSession}
 */
export const decodeAxelarMultisigSigningSession = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1, 1, 3, 3, 3, 5, 1], [0, decodeAxelarMultisigMultiSig, 0, decodeAxelarMultisigKey, 0, 0, 0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf KeyEpoch message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyEpoch}
 */
export const decodeAxelarMultisigKeyEpoch = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf PubKeysEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyPubKeysEntry}
 */
export const decodeAxelarMultisigKeyPubKeysEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf IsPubKeyReceivedEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenSessionIsPubKeyReceivedEntry}
 */
export const decodeAxelarMultisigKeygenSessionIsPubKeyReceivedEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf SigsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigMultiSigSigsEntry}
 */
export const decodeAxelarMultisigMultiSigSigsEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Destructures the fields of a {@link AxelarMultisigKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: snapshot -
 *   - 2: pub_keys -
 *   - 3: signing_threshold -
 *   - 4: state -
 */
export const destructAxelarMultisigKey = (g_struct) => [g_struct.id, g_struct.snapshot, g_struct.pub_keys, g_struct.signing_threshold, g_struct.state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY = '/axelar.multisig.v1beta1.Key';
/**
 * Destructures the fields of a {@link AxelarMultisigKeyPubKeysEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarMultisigKeyPubKeysEntry = (g_struct) => [g_struct.key, safe_base64_to_bytes(g_struct.value)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_PUB_KEYS_ENTRY = '/axelar.multisig.v1beta1.Key.PubKeysEntry';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenSession} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: state -
 *   - 2: keygen_threshold -
 *   - 3: expires_at -
 *   - 4: completed_at -
 *   - 5: is_pub_key_received -
 *   - 6: grace_period -
 */
export const destructAxelarMultisigKeygenSession = (g_struct) => [g_struct.key, g_struct.state, g_struct.keygen_threshold, g_struct.expires_at, g_struct.completed_at, g_struct.is_pub_key_received, g_struct.grace_period];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_SESSION = '/axelar.multisig.v1beta1.KeygenSession';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenSessionIsPubKeyReceivedEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarMultisigKeygenSessionIsPubKeyReceivedEntry = (g_struct) => [g_struct.key, g_struct.value];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_SESSION_IS_PUB_KEY_RECEIVED_ENTRY = '/axelar.multisig.v1beta1.KeygenSession.IsPubKeyReceivedEntry';
/**
 * Destructures the fields of a {@link AxelarMultisigMultiSig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: payload_hash -
 *   - 2: sigs -
 */
export const destructAxelarMultisigMultiSig = (g_struct) => [g_struct.key_id, safe_base64_to_bytes(g_struct.payload_hash), g_struct.sigs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_MULTI_SIG = '/axelar.multisig.v1beta1.MultiSig';
/**
 * Destructures the fields of a {@link AxelarMultisigMultiSigSigsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarMultisigMultiSigSigsEntry = (g_struct) => [g_struct.key, safe_base64_to_bytes(g_struct.value)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_MULTI_SIG_SIGS_ENTRY = '/axelar.multisig.v1beta1.MultiSig.SigsEntry';
/**
 * Destructures the fields of a {@link AxelarMultisigSigningSession} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: multi_sig -
 *   - 2: state -
 *   - 3: key -
 *   - 4: expires_at -
 *   - 5: completed_at -
 *   - 6: grace_period -
 *   - 7: module -
 *   - 8: module_metadata -
 */
export const destructAxelarMultisigSigningSession = (g_struct) => [g_struct.id, g_struct.multi_sig, g_struct.state, g_struct.key, g_struct.expires_at, g_struct.completed_at, g_struct.grace_period, g_struct.module, g_struct.module_metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_SESSION = '/axelar.multisig.v1beta1.SigningSession';
/**
 * Destructures the fields of a {@link AxelarMultisigKeyEpoch} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch -
 *   - 1: chain -
 *   - 2: key_id -
 */
export const destructAxelarMultisigKeyEpoch = (g_struct) => [g_struct.epoch, g_struct.chain, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_EPOCH = '/axelar.multisig.v1beta1.KeyEpoch';
//# sourceMappingURL=types.js.map