import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { ProtoEnumAxelarTssExportedKeyType, JsonEnumAxelarTssExportedKeyType } from '../../../tss/exported/v1beta1/types.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarNexusExportedChain = Encoded<'/axelar.nexus.exported.v1beta1.Chain'>;
export type EncodedAxelarNexusExportedCrossChainAddress = Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>;
export type EncodedAxelarNexusExportedCrossChainTransfer = Encoded<'/axelar.nexus.exported.v1beta1.CrossChainTransfer'>;
export type EncodedAxelarNexusExportedTransferFee = Encoded<'/axelar.nexus.exported.v1beta1.TransferFee'>;
export type EncodedAxelarNexusExportedFeeInfo = Encoded<'/axelar.nexus.exported.v1beta1.FeeInfo'>;
export type EncodedAxelarNexusExportedAsset = Encoded<'/axelar.nexus.exported.v1beta1.Asset'>;
export type EncodedAxelarNexusExportedGeneralMessage = Encoded<'/axelar.nexus.exported.v1beta1.GeneralMessage'>;
export type EncodedAxelarNexusExportedWasmMessage = Encoded<'/axelar.nexus.exported.v1beta1.WasmMessage'>;
/**
 * Encodes a `Chain` protobuf message: represents the properties of a registered blockchain
 * @param s_name - `name`:
 * @param b_supports_foreign_assets - `supports_foreign_assets`:
 * @param xc_key_type - `key_type`:
 * @param s_module - `module`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedChain: (s_name?: Opt<string>, b_supports_foreign_assets?: Opt<boolean | 0 | 1>, xc_key_type?: Opt<ProtoEnumAxelarTssExportedKeyType>, s_module?: Opt<string>) => EncodedAxelarNexusExportedChain;
/**
 * Encodes a `CrossChainAddress` protobuf message: represents a generalized address on any registered chain
 * @param g_chain - `chain`:
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedCrossChainAddress: (atu8_chain?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.Chain'>>, sa_address?: Opt<WeakAccountAddr>) => EncodedAxelarNexusExportedCrossChainAddress;
/**
 * Encodes a `CrossChainTransfer` protobuf message: represents a generalized transfer of some asset to a registered blockchain
 * @param g_recipient - `recipient`:
 * @param a_asset - `asset`:
 * @param sg_id - `id`:
 * @param xc_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedCrossChainTransfer: (atu8_recipient?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>, a_asset?: Opt<SlimCoin>, sg_id?: Opt<WeakUint64Str>, xc_state?: Opt<ProtoEnumAxelarNexusExportedTransferState>) => EncodedAxelarNexusExportedCrossChainTransfer;
/**
 * Encodes a `TransferFee` protobuf message: represents accumulated fees generated by the network
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedTransferFee: (a_coins?: Opt<SlimCoin[]>) => EncodedAxelarNexusExportedTransferFee;
/**
 * Encodes a `FeeInfo` protobuf message:
 * @param s_chain - `chain`:
 * @param s_asset - `asset`:
 * @param atu8_fee_rate - `fee_rate`:
 * @param atu8_min_fee - `min_fee`:
 * @param atu8_max_fee - `max_fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedFeeInfo: (s_chain?: Opt<string>, s_asset?: Opt<string>, atu8_fee_rate?: Opt<Uint8Array>, atu8_min_fee?: Opt<Uint8Array>, atu8_max_fee?: Opt<Uint8Array>) => EncodedAxelarNexusExportedFeeInfo;
/**
 * Encodes a `Asset` protobuf message:
 * @param s_denom - `denom`:
 * @param b_is_native_asset - `is_native_asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedAsset: (s_denom?: Opt<string>, b_is_native_asset?: Opt<boolean | 0 | 1>) => EncodedAxelarNexusExportedAsset;
/**
 * Encodes a `GeneralMessage` protobuf message:
 * @param s_id - `id`:
 * @param g_sender - `sender`:
 * @param g_recipient - `recipient`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param xc_status - `status`:
 * @param a_asset - `asset`:
 * @param atu8_source_tx_id - `source_tx_id`:
 * @param sg_source_tx_index - `source_tx_index`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedGeneralMessage: (s_id?: Opt<string>, atu8_sender?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>, atu8_recipient?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>, atu8_payload_hash?: Opt<Uint8Array>, xc_status?: Opt<ProtoEnumAxelarNexusExportedGeneralMessageStatus>, a_asset?: Opt<SlimCoin>, atu8_source_tx_id?: Opt<Uint8Array>, sg_source_tx_index?: Opt<WeakUint64Str>) => EncodedAxelarNexusExportedGeneralMessage;
/**
 * Encodes a `WasmMessage` protobuf message:
 * @param s_source_chain - `source_chain`:
 * @param sa_source - `source_address`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param atu8_source_tx_id - `source_tx_id`:
 * @param sg_source_tx_index - `source_tx_index`:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusExportedWasmMessage: (s_source_chain?: Opt<string>, sa_source?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_destination?: Opt<WeakAccountAddr>, atu8_payload_hash?: Opt<Uint8Array>, atu8_source_tx_id?: Opt<Uint8Array>, sg_source_tx_index?: Opt<WeakUint64Str>, sa_sender?: Opt<WeakAccountAddr>) => EncodedAxelarNexusExportedWasmMessage;
/**
 * A decoded protobuf Chain message
 *
 * Tuple where:
 *   - 0: name -
 *   - 2: supports_foreign_assets -
 *   - 3: key_type -
 *   - 4: module -
 */
export type DecodedAxelarNexusExportedChain = [
    s_name?: string,
    w_0?: undefined,
    b_supports_foreign_assets?: 0 | 1,
    xc_key_type?: ProtoEnumAxelarTssExportedKeyType,
    s_module?: string
];
/**
 * Decodes a protobuf Chain message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarNexusExportedChain}
 */
export declare const decodeAxelarNexusExportedChain: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarNexusExportedChain;
/**
 * A decoded protobuf CrossChainAddress message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: address -
 */
export type DecodedAxelarNexusExportedCrossChainAddress = [
    a_chain?: DecodedAxelarNexusExportedChain,
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf CrossChainAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedCrossChainAddress}
 */
export declare const decodeAxelarNexusExportedCrossChainAddress: (atu8_payload: Uint8Array) => DecodedAxelarNexusExportedCrossChainAddress;
/**
 * A decoded protobuf CrossChainTransfer message
 *
 * Tuple where:
 *   - 0: recipient -
 *   - 1: asset -
 *   - 2: id -
 *   - 3: state -
 */
export type DecodedAxelarNexusExportedCrossChainTransfer = [
    a_recipient?: DecodedAxelarNexusExportedCrossChainAddress,
    a_asset?: [
        string,
        string
    ],
    sg_id?: CwUint64,
    xc_state?: ProtoEnumAxelarNexusExportedTransferState
];
/**
 * Decodes a protobuf CrossChainTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedCrossChainTransfer}
 */
export declare const decodeAxelarNexusExportedCrossChainTransfer: (atu8_payload: Uint8Array) => DecodedAxelarNexusExportedCrossChainTransfer;
/**
 * A decoded protobuf TransferFee message
 *
 * Alias for: coins -
 */
export type DecodedAxelarNexusExportedTransferFee = [
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf TransferFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedTransferFee}
 */
export declare const decodeAxelarNexusExportedTransferFee: (atu8_payload: Uint8Array) => DecodedAxelarNexusExportedTransferFee;
/**
 * A decoded protobuf FeeInfo message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: asset -
 *   - 2: fee_rate -
 *   - 3: min_fee -
 *   - 4: max_fee -
 */
export type DecodedAxelarNexusExportedFeeInfo = [
    s_chain?: string,
    s_asset?: string,
    atu8_fee_rate?: Uint8Array,
    atu8_min_fee?: Uint8Array,
    atu8_max_fee?: Uint8Array
];
/**
 * Decodes a protobuf FeeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedFeeInfo}
 */
export declare const decodeAxelarNexusExportedFeeInfo: (atu8_payload: Uint8Array) => DecodedAxelarNexusExportedFeeInfo;
/**
 * A decoded protobuf Asset message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 2: is_native_asset -
 */
export type DecodedAxelarNexusExportedAsset = [
    s_denom?: string,
    w_0?: undefined,
    b_is_native_asset?: 0 | 1
];
/**
 * Decodes a protobuf Asset message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarNexusExportedAsset}
 */
export declare const decodeAxelarNexusExportedAsset: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarNexusExportedAsset;
/**
 * A decoded protobuf GeneralMessage message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: sender -
 *   - 2: recipient -
 *   - 3: payload_hash -
 *   - 4: status -
 *   - 5: asset -
 *   - 6: source_tx_id -
 *   - 7: source_tx_index -
 */
export type DecodedAxelarNexusExportedGeneralMessage = [
    s_id?: string,
    a_sender?: DecodedAxelarNexusExportedCrossChainAddress,
    a_recipient?: DecodedAxelarNexusExportedCrossChainAddress,
    atu8_payload_hash?: Uint8Array,
    xc_status?: ProtoEnumAxelarNexusExportedGeneralMessageStatus,
    a_asset?: [
        string,
        string
    ],
    atu8_source_tx_id?: Uint8Array,
    sg_source_tx_index?: CwUint64
];
/**
 * Decodes a protobuf GeneralMessage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedGeneralMessage}
 */
export declare const decodeAxelarNexusExportedGeneralMessage: (atu8_payload: Uint8Array) => DecodedAxelarNexusExportedGeneralMessage;
/**
 * A decoded protobuf WasmMessage message
 *
 * Tuple where:
 *   - 0: source_chain -
 *   - 1: source_address -
 *   - 2: destination_chain -
 *   - 3: destination_address -
 *   - 4: payload_hash -
 *   - 5: source_tx_id -
 *   - 6: source_tx_index -
 *   - 7: sender -
 */
export type DecodedAxelarNexusExportedWasmMessage = [
    s_source_chain?: string,
    sa_source?: CwAccountAddr,
    s_destination_chain?: string,
    sa_destination?: CwAccountAddr,
    atu8_payload_hash?: Uint8Array,
    atu8_source_tx_id?: Uint8Array,
    sg_source_tx_index?: CwUint64,
    sa_sender?: CwAccountAddr
];
/**
 * Decodes a protobuf WasmMessage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedWasmMessage}
 */
export declare const decodeAxelarNexusExportedWasmMessage: (atu8_payload: Uint8Array) => DecodedAxelarNexusExportedWasmMessage;
/**
 * Destructures the fields of a {@link AxelarNexusExportedChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 2: supports_foreign_assets -
 *   - 3: key_type -
 *   - 4: module -
 */
export declare const destructAxelarNexusExportedChain: (g_struct: AxelarNexusExportedChain) => [name?: string, EMPTY?: void, supports_foreign_assets?: boolean, key_type?: JsonEnumAxelarTssExportedKeyType, module?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_CHAIN = "/axelar.nexus.exported.v1beta1.Chain";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.Chain` - represents the properties of a registered blockchain
 */
export type AxelarNexusExportedChain = {
    name?: string | undefined;
    supports_foreign_assets?: boolean | undefined;
    key_type?: JsonEnumAxelarTssExportedKeyType | undefined;
    module?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 2: is_native_asset -
 */
export declare const destructAxelarNexusExportedAsset: (g_struct: AxelarNexusExportedAsset) => [denom?: string, EMPTY?: void, is_native_asset?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_ASSET = "/axelar.nexus.exported.v1beta1.Asset";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.Asset` -
 */
export type AxelarNexusExportedAsset = {
    denom?: string | undefined;
    is_native_asset?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedCrossChainAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: address -
 */
export declare const destructAxelarNexusExportedCrossChainAddress: (g_struct: AxelarNexusExportedCrossChainAddress) => [chain?: AxelarNexusExportedChain, address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_CROSS_CHAIN_ADDRESS = "/axelar.nexus.exported.v1beta1.CrossChainAddress";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.CrossChainAddress` - represents a generalized address on any registered chain
 */
export type AxelarNexusExportedCrossChainAddress = {
    chain?: AxelarNexusExportedChain | undefined;
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedCrossChainTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: recipient -
 *   - 1: asset -
 *   - 2: id -
 *   - 3: state -
 */
export declare const destructAxelarNexusExportedCrossChainTransfer: (g_struct: AxelarNexusExportedCrossChainTransfer) => [recipient?: AxelarNexusExportedCrossChainAddress, asset?: CosmosBaseCoin, id?: CwUint64, state?: JsonEnumAxelarNexusExportedTransferState];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_CROSS_CHAIN_TRANSFER = "/axelar.nexus.exported.v1beta1.CrossChainTransfer";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.CrossChainTransfer` - represents a generalized transfer of some asset to a registered blockchain
 */
export type AxelarNexusExportedCrossChainTransfer = {
    recipient?: AxelarNexusExportedCrossChainAddress | undefined;
    asset?: CosmosBaseCoin | undefined;
    id?: CwUint64 | undefined;
    state?: JsonEnumAxelarNexusExportedTransferState | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedTransferFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export declare const destructAxelarNexusExportedTransferFee: (g_struct: AxelarNexusExportedTransferFee) => [coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_TRANSFER_FEE = "/axelar.nexus.exported.v1beta1.TransferFee";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.TransferFee` - represents accumulated fees generated by the network
 */
export type AxelarNexusExportedTransferFee = {
    coins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedFeeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: asset -
 *   - 2: fee_rate -
 *   - 3: min_fee -
 *   - 4: max_fee -
 */
export declare const destructAxelarNexusExportedFeeInfo: (g_struct: AxelarNexusExportedFeeInfo) => [chain?: string, asset?: string, fee_rate?: Uint8Array, min_fee?: Uint8Array, max_fee?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_FEE_INFO = "/axelar.nexus.exported.v1beta1.FeeInfo";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.FeeInfo` -
 */
export type AxelarNexusExportedFeeInfo = {
    chain?: string | undefined;
    asset?: string | undefined;
    fee_rate?: CwBase64 | undefined;
    min_fee?: CwBase64 | undefined;
    max_fee?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedGeneralMessage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: sender -
 *   - 2: recipient -
 *   - 3: payload_hash -
 *   - 4: status -
 *   - 5: asset -
 *   - 6: source_tx_id -
 *   - 7: source_tx_index -
 */
export declare const destructAxelarNexusExportedGeneralMessage: (g_struct: AxelarNexusExportedGeneralMessage) => [id?: string, sender?: AxelarNexusExportedCrossChainAddress, recipient?: AxelarNexusExportedCrossChainAddress, payload_hash?: Uint8Array, status?: JsonEnumAxelarNexusExportedGeneralMessageStatus, asset?: CosmosBaseCoin, source_tx_id?: Uint8Array, source_tx_index?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE = "/axelar.nexus.exported.v1beta1.GeneralMessage";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.GeneralMessage` -
 */
export type AxelarNexusExportedGeneralMessage = {
    id?: string | undefined;
    sender?: AxelarNexusExportedCrossChainAddress | undefined;
    recipient?: AxelarNexusExportedCrossChainAddress | undefined;
    payload_hash?: CwBase64 | undefined;
    status?: JsonEnumAxelarNexusExportedGeneralMessageStatus | undefined;
    asset?: CosmosBaseCoin | undefined;
    source_tx_id?: CwBase64 | undefined;
    source_tx_index?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusExportedWasmMessage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: source_chain -
 *   - 1: source_address -
 *   - 2: destination_chain -
 *   - 3: destination_address -
 *   - 4: payload_hash -
 *   - 5: source_tx_id -
 *   - 6: source_tx_index -
 *   - 7: sender -
 */
export declare const destructAxelarNexusExportedWasmMessage: (g_struct: AxelarNexusExportedWasmMessage) => [source_chain?: string, source_address?: CwAccountAddr, destination_chain?: string, destination_address?: CwAccountAddr, payload_hash?: Uint8Array, source_tx_id?: Uint8Array, source_tx_index?: CwUint64, sender?: CwBase64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_WASM_MESSAGE = "/axelar.nexus.exported.v1beta1.WasmMessage";
/**
 * JSON serialization of `axelar.nexus.exported.v1beta1.WasmMessage` -
 */
export type AxelarNexusExportedWasmMessage = {
    source_chain?: string | undefined;
    source_address?: CwAccountAddr | undefined;
    destination_chain?: string | undefined;
    destination_address?: CwAccountAddr | undefined;
    payload_hash?: CwBase64 | undefined;
    source_tx_id?: CwBase64 | undefined;
    source_tx_index?: CwUint64 | undefined;
    sender?: CwBase64 | undefined;
};
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED = "TRANSFER_STATE_UNSPECIFIED";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING = 1;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING = "Pending";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_ARCHIVED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED = 2;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_ARCHIVED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED = "Archived";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_INSUFFICIENT_AMOUNT** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_INSUFFICIENT_AMOUNT** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT = "InsufficientAmount";
/**
 * Raw protobuf enum values for `axelar.nexus.exported.v1beta1.TransferState` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT}
 */
export type ProtoEnumAxelarNexusExportedTransferState = typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT;
/**
 * JSON enum values for `axelar.nexus.exported.v1beta1.TransferState` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT}
 */
export type JsonEnumAxelarNexusExportedTransferState = typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT;
/**
 * Maps a protobuf enum int value for `axelar.nexus.exported.v1beta1.TransferState` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarNexusExportedTransferState: Record<ProtoEnumAxelarNexusExportedTransferState, JsonEnumAxelarNexusExportedTransferState>;
/**
 * Maps a JSON enum string value for `axelar.nexus.exported.v1beta1.TransferState` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarNexusExportedTransferState: Record<JsonEnumAxelarNexusExportedTransferState, ProtoEnumAxelarNexusExportedTransferState>;
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED = "NonExistent";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_APPROVED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED = 1;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_APPROVED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED = "Approved";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_PROCESSING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING = 2;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_PROCESSING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING = "Processing";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_EXECUTED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED = 3;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_EXECUTED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED = "Executed";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED = 4;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED = "Failed";
/**
 * Raw protobuf enum values for `axelar.nexus.exported.v1beta1.GeneralMessage.Status` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED}
 */
export type ProtoEnumAxelarNexusExportedGeneralMessageStatus = typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED;
/**
 * JSON enum values for `axelar.nexus.exported.v1beta1.GeneralMessage.Status` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED}
 */
export type JsonEnumAxelarNexusExportedGeneralMessageStatus = typeof SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED;
/**
 * Maps a protobuf enum int value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarNexusExportedGeneralMessageStatus: Record<ProtoEnumAxelarNexusExportedGeneralMessageStatus, JsonEnumAxelarNexusExportedGeneralMessageStatus>;
/**
 * Maps a JSON enum string value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarNexusExportedGeneralMessageStatus: Record<JsonEnumAxelarNexusExportedGeneralMessageStatus, ProtoEnumAxelarNexusExportedGeneralMessageStatus>;
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferDirection}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferDirection}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED = "Unspecified";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_INCOMING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferDirection}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING = 1;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_INCOMING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferDirection}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING = "Incoming";
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_OUTGOING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferDirection}
 */
export declare const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING = 2;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_OUTGOING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferDirection}
 */
export declare const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING = "Outgoing";
/**
 * Raw protobuf enum values for `axelar.nexus.exported.v1beta1.TransferDirection` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING}
 *   - {@link XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING}
 */
export type ProtoEnumAxelarNexusExportedTransferDirection = typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING | typeof XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING;
/**
 * JSON enum values for `axelar.nexus.exported.v1beta1.TransferDirection` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING}
 *   - {@link SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING}
 */
export type JsonEnumAxelarNexusExportedTransferDirection = typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING | typeof SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING;
/**
 * Maps a protobuf enum int value for `axelar.nexus.exported.v1beta1.TransferDirection` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarNexusExportedTransferDirection: Record<ProtoEnumAxelarNexusExportedTransferDirection, JsonEnumAxelarNexusExportedTransferDirection>;
/**
 * Maps a JSON enum string value for `axelar.nexus.exported.v1beta1.TransferDirection` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarNexusExportedTransferDirection: Record<JsonEnumAxelarNexusExportedTransferDirection, ProtoEnumAxelarNexusExportedTransferDirection>;
