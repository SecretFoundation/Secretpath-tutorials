/// <reference types="node" />
import type { SlimCoin } from '@solar-republic/types';
import type { Opt } from '../../../../api/types.js';
import type { AxelarNexusExportedFeeInfo, ProtoEnumAxelarNexusExportedTransferState } from '../exported/v1beta1/types.js';
import type { AxelarNexusLatestDepositAddressResponse, AxelarNexusTransfersForChainResponse, AxelarNexusFeeInfoResponse, AxelarNexusTransferFeeResponse, ProtoEnumAxelarNexusChainStatus, AxelarNexusChainsResponse, AxelarNexusAssetsResponse, AxelarNexusChainStateResponse, AxelarNexusChainsByAssetResponse, AxelarNexusRecipientAddressResponse, AxelarNexusChainMaintainersResponse, AxelarNexusTransferRateLimitResponse, AxelarNexusMessageResponse, AxelarNexusParamsResponse } from './query.js';
import type { AxelarNexusRegisterChainMaintainerResponse, AxelarNexusDeregisterChainMaintainerResponse, AxelarNexusActivateChainResponse, AxelarNexusDeactivateChainResponse, AxelarNexusRegisterAssetFeeResponse, AxelarNexusSetTransferRateLimitResponse } from './tx.js';
import type { CosmosBaseQueryPageRequest } from '../../../cosmos/base/query/v1beta1/pagination.js';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export declare const submitAxelarNexusRegisterChainMaintainer: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, a_chains?: Opt<string[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusRegisterChainMaintainerResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export declare const submitAxelarNexusDeregisterChainMaintainer: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, a_chains?: Opt<string[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusDeregisterChainMaintainerResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export declare const submitAxelarNexusActivateChain: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, a_chains?: Opt<string[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusActivateChainResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export declare const submitAxelarNexusDeactivateChain: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, a_chains?: Opt<string[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusDeactivateChainResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param g_fee_info -
 * @returns an empty tuple
 */
export declare const submitAxelarNexusRegisterAssetFee: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, g_fee_info?: Opt<AxelarNexusExportedFeeInfo>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusRegisterAssetFeeResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param a_limit -
 * @param xt_window -
 * @returns an empty tuple
 */
export declare const submitAxelarNexusSetTransferRateLimit: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, a_limit?: Opt<SlimCoin>, xt_window?: Opt<number>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusSetTransferRateLimitResponse>>;
/**
 * Queries the a deposit address by recipient
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_recipient_addr -
 * @param s_recipient_chain -
 * @param s_deposit_chain -
 * @returns a tuple where:
 *   - 0: deposit_addr - the 'deposit_addr' response property
 */
export declare const queryAxelarNexusLatestDepositAddress: (z_req: string | ({
    origin: string;
} & RequestInit), sa_recipient_addr?: Opt<`${string}1${string}`>, s_recipient_chain?: Opt<string>, s_deposit_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusLatestDepositAddressResponse>>;
/**
 * Queries transfers by chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param xc_state -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: transfers - the 'transfers' response property
 *   - 1: pagination - the 'transfers' response property
 */
export declare const queryAxelarNexusTransfersForChain: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, xc_state?: Opt<ProtoEnumAxelarNexusExportedTransferState>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusTransfersForChainResponse>>;
/**
 * Queries the fee info by chain and asset
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: fee_info - the 'fee_info' response property
 */
export declare const queryAxelarNexusFeeInfo: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, s_asset?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusFeeInfoResponse>>;
/**
 * Queries the transfer fee by the source, destination chain, and amount. If amount is 0, the min fee is returned
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_source_chain -
 * @param s_destination_chain -
 * @param s_amount -
 * @returns a tuple where:
 *   - 0: fee - the 'fee' response property
 */
export declare const queryAxelarNexusTransferFee: (z_req: string | ({
    origin: string;
} & RequestInit), s_source_chain?: Opt<string>, s_destination_chain?: Opt<string>, s_amount?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusTransferFeeResponse>>;
/**
 * Queries the chains registered on the network
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param xc_status -
 * @returns a tuple where:
 *   - 0: chains - the 'chains' response property
 */
export declare const queryAxelarNexusChains: (z_req: string | ({
    origin: string;
} & RequestInit), xc_status?: Opt<ProtoEnumAxelarNexusChainStatus>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusChainsResponse>>;
/**
 * Queries the assets registered for a chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: assets - the 'assets' response property
 */
export declare const queryAxelarNexusAssets: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusAssetsResponse>>;
/**
 * Queries the state of a registered chain on the network
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: state - the 'state' response property
 */
export declare const queryAxelarNexusChainState: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusChainStateResponse>>;
/**
 * Queries the chains that support an asset on the network
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: chains - the 'chains' response property
 */
export declare const queryAxelarNexusChainsByAsset: (z_req: string | ({
    origin: string;
} & RequestInit), s_asset?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusChainsByAssetResponse>>;
/**
 * Queries the recipient address for a given deposit address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_deposit_addr -
 * @param s_deposit_chain -
 * @returns a tuple where:
 *   - 0: recipient_addr - the 'recipient_addr' response property
 *   - 1: recipient_chain - the 'recipient_addr' response property
 */
export declare const queryAxelarNexusRecipientAddress: (z_req: string | ({
    origin: string;
} & RequestInit), sa_deposit_addr?: Opt<`${string}1${string}`>, s_deposit_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusRecipientAddressResponse>>;
/**
 * Queries the chain maintainers for a given chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: maintainers - the 'maintainers' response property
 */
export declare const queryAxelarNexusChainMaintainers: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusChainMaintainersResponse>>;
/**
 * Queries the transfer rate limit for a given chain and asset. If a rate limit is not set, nil is returned.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: transfer_rate_limit - the 'transfer_rate_limit' response property
 */
export declare const queryAxelarNexusTransferRateLimit: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>, s_asset?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusTransferRateLimitResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_id -
 * @returns a tuple where:
 *   - 0: message - the 'message' response property
 */
export declare const queryAxelarNexusMessage: (z_req: string | ({
    origin: string;
} & RequestInit), s_id?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusMessageResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export declare const queryAxelarNexusParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarNexusParamsResponse>>;
