import type { WeakUint64Str, SlimCoin, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakDurationStr } from '../../../../api/types.js';
import type { AxelarNexusExportedChain, DecodedAxelarNexusExportedChain, AxelarNexusExportedAsset, DecodedAxelarNexusExportedAsset, AxelarNexusExportedCrossChainAddress, DecodedAxelarNexusExportedCrossChainAddress, ProtoEnumAxelarNexusExportedTransferDirection, JsonEnumAxelarNexusExportedTransferDirection } from '../exported/v1beta1/types.js';
import type { AxelarUtilsBitmap, DecodedAxelarUtilsBitmap } from '../../utils/v1beta1/bitmap.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarNexusMaintainerState = Encoded<'/axelar.nexus.v1beta1.MaintainerState'>;
export type EncodedAxelarNexusChainState = Encoded<'/axelar.nexus.v1beta1.ChainState'>;
export type EncodedAxelarNexusLinkedAddresses = Encoded<'/axelar.nexus.v1beta1.LinkedAddresses'>;
export type EncodedAxelarNexusRateLimit = Encoded<'/axelar.nexus.v1beta1.RateLimit'>;
export type EncodedAxelarNexusTransferEpoch = Encoded<'/axelar.nexus.v1beta1.TransferEpoch'>;
/**
 * Encodes a `MaintainerState` protobuf message:
 * @param atu8_address - `address`:
 * @param g_missing_votes - `missing_votes`:
 * @param g_incorrect_votes - `incorrect_votes`:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusMaintainerState: (atu8_address?: Opt<Uint8Array>, atu8_missing_votes?: Opt<Encoded<'/axelar.utils.v1beta1.Bitmap'>>, atu8_incorrect_votes?: Opt<Encoded<'/axelar.utils.v1beta1.Bitmap'>>, s_chain?: Opt<string>) => EncodedAxelarNexusMaintainerState;
/**
 * Encodes a `ChainState` protobuf message: represents the state of a registered blockchain
 * @param g_chain - `chain`:
 * @param b_activated - `activated`:
 * @param a_assets - `assets`:
 * @param a_maintainer_states - `maintainer_states`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusChainState: (atu8_chain?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.Chain'>>, b_activated?: Opt<boolean | 0 | 1>, a_assets?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.Asset'>[]>, a_maintainer_states?: Opt<Encoded<'/axelar.nexus.v1beta1.MaintainerState'>[]>) => EncodedAxelarNexusChainState;
/**
 * Encodes a `LinkedAddresses` protobuf message:
 * @param g_deposit_address - `deposit_address`:
 * @param g_recipient_address - `recipient_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusLinkedAddresses: (atu8_deposit_address?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>, atu8_recipient_address?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>) => EncodedAxelarNexusLinkedAddresses;
/**
 * Encodes a `RateLimit` protobuf message:
 * @param s_chain - `chain`:
 * @param a_limit - `limit`:
 * @param xt_window - `window`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusRateLimit: (s_chain?: Opt<string>, a_limit?: Opt<SlimCoin>, xt_window?: Opt<number>) => EncodedAxelarNexusRateLimit;
/**
 * Encodes a `TransferEpoch` protobuf message:
 * @param s_chain - `chain`:
 * @param a_amount - `amount`:
 * @param sg_epoch - `epoch`:
 * @param xc_direction - `direction`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusTransferEpoch: (s_chain?: Opt<string>, a_amount?: Opt<SlimCoin>, sg_epoch?: Opt<WeakUint64Str>, xc_direction?: Opt<ProtoEnumAxelarNexusExportedTransferDirection>) => EncodedAxelarNexusTransferEpoch;
/**
 * A decoded protobuf MaintainerState message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: missing_votes -
 *   - 2: incorrect_votes -
 *   - 3: chain -
 */
export type DecodedAxelarNexusMaintainerState = [
    atu8_address?: Uint8Array,
    a_missing_votes?: DecodedAxelarUtilsBitmap,
    a_incorrect_votes?: DecodedAxelarUtilsBitmap,
    s_chain?: string
];
/**
 * Decodes a protobuf MaintainerState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMaintainerState}
 */
export declare const decodeAxelarNexusMaintainerState: (atu8_payload: Uint8Array) => DecodedAxelarNexusMaintainerState;
/**
 * A decoded protobuf ChainState message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 2: activated -
 *   - 4: assets -
 *   - 5: maintainer_states -
 */
export type DecodedAxelarNexusChainState = [
    a_chain?: DecodedAxelarNexusExportedChain,
    w_0?: undefined,
    b_activated?: 0 | 1,
    w_0?: undefined,
    a_assets?: DecodedAxelarNexusExportedAsset[],
    a_maintainer_states?: DecodedAxelarNexusMaintainerState[]
];
/**
 * Decodes a protobuf ChainState message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarNexusChainState}
 */
export declare const decodeAxelarNexusChainState: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarNexusChainState;
/**
 * A decoded protobuf LinkedAddresses message
 *
 * Tuple where:
 *   - 0: deposit_address -
 *   - 1: recipient_address -
 */
export type DecodedAxelarNexusLinkedAddresses = [
    a_deposit_address?: DecodedAxelarNexusExportedCrossChainAddress,
    a_recipient_address?: DecodedAxelarNexusExportedCrossChainAddress
];
/**
 * Decodes a protobuf LinkedAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusLinkedAddresses}
 */
export declare const decodeAxelarNexusLinkedAddresses: (atu8_payload: Uint8Array) => DecodedAxelarNexusLinkedAddresses;
/**
 * A decoded protobuf RateLimit message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: limit -
 *   - 2: window -
 */
export type DecodedAxelarNexusRateLimit = [
    s_chain?: string,
    a_limit?: [
        string,
        string
    ],
    a_window?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf RateLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusRateLimit}
 */
export declare const decodeAxelarNexusRateLimit: (atu8_payload: Uint8Array) => DecodedAxelarNexusRateLimit;
/**
 * A decoded protobuf TransferEpoch message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: amount -
 *   - 2: epoch -
 *   - 3: direction -
 */
export type DecodedAxelarNexusTransferEpoch = [
    s_chain?: string,
    a_amount?: [
        string,
        string
    ],
    sg_epoch?: CwUint64,
    xc_direction?: ProtoEnumAxelarNexusExportedTransferDirection
];
/**
 * Decodes a protobuf TransferEpoch message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusTransferEpoch}
 */
export declare const decodeAxelarNexusTransferEpoch: (atu8_payload: Uint8Array) => DecodedAxelarNexusTransferEpoch;
/**
 * Destructures the fields of a {@link AxelarNexusMaintainerState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: missing_votes -
 *   - 2: incorrect_votes -
 *   - 3: chain -
 */
export declare const destructAxelarNexusMaintainerState: (g_struct: AxelarNexusMaintainerState) => [address?: Uint8Array, missing_votes?: AxelarUtilsBitmap, incorrect_votes?: AxelarUtilsBitmap, chain?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_MAINTAINER_STATE = "/axelar.nexus.v1beta1.MaintainerState";
/**
 * JSON serialization of `axelar.nexus.v1beta1.MaintainerState` -
 */
export type AxelarNexusMaintainerState = {
    address?: CwBase64 | undefined;
    missing_votes?: AxelarUtilsBitmap | undefined;
    incorrect_votes?: AxelarUtilsBitmap | undefined;
    chain?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusChainState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 2: activated -
 *   - 4: assets -
 *   - 5: maintainer_states -
 */
export declare const destructAxelarNexusChainState: (g_struct: AxelarNexusChainState) => [chain?: AxelarNexusExportedChain, EMPTY?: void, activated?: boolean, EMPTY?: void, assets?: AxelarNexusExportedAsset[], maintainer_states?: AxelarNexusMaintainerState[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_CHAIN_STATE = "/axelar.nexus.v1beta1.ChainState";
/**
 * JSON serialization of `axelar.nexus.v1beta1.ChainState` - represents the state of a registered blockchain
 */
export type AxelarNexusChainState = {
    chain?: AxelarNexusExportedChain | undefined;
    activated?: boolean | undefined;
    assets?: AxelarNexusExportedAsset[] | undefined;
    maintainer_states?: AxelarNexusMaintainerState[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusLinkedAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deposit_address -
 *   - 1: recipient_address -
 */
export declare const destructAxelarNexusLinkedAddresses: (g_struct: AxelarNexusLinkedAddresses) => [deposit_address?: AxelarNexusExportedCrossChainAddress, recipient_address?: AxelarNexusExportedCrossChainAddress];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_LINKED_ADDRESSES = "/axelar.nexus.v1beta1.LinkedAddresses";
/**
 * JSON serialization of `axelar.nexus.v1beta1.LinkedAddresses` -
 */
export type AxelarNexusLinkedAddresses = {
    deposit_address?: AxelarNexusExportedCrossChainAddress | undefined;
    recipient_address?: AxelarNexusExportedCrossChainAddress | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusRateLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: limit -
 *   - 2: window -
 */
export declare const destructAxelarNexusRateLimit: (g_struct: AxelarNexusRateLimit) => [chain?: string, limit?: CosmosBaseCoin, window?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_RATE_LIMIT = "/axelar.nexus.v1beta1.RateLimit";
/**
 * JSON serialization of `axelar.nexus.v1beta1.RateLimit` -
 */
export type AxelarNexusRateLimit = {
    chain?: string | undefined;
    limit?: CosmosBaseCoin | undefined;
    window?: WeakDurationStr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusTransferEpoch} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: amount -
 *   - 2: epoch -
 *   - 3: direction -
 */
export declare const destructAxelarNexusTransferEpoch: (g_struct: AxelarNexusTransferEpoch) => [chain?: string, amount?: CosmosBaseCoin, epoch?: CwUint64, direction?: JsonEnumAxelarNexusExportedTransferDirection];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_TRANSFER_EPOCH = "/axelar.nexus.v1beta1.TransferEpoch";
/**
 * JSON serialization of `axelar.nexus.v1beta1.TransferEpoch` -
 */
export type AxelarNexusTransferEpoch = {
    chain?: string | undefined;
    amount?: CosmosBaseCoin | undefined;
    epoch?: CwUint64 | undefined;
    direction?: JsonEnumAxelarNexusExportedTransferDirection | undefined;
};
