import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarPermissionParams, DecodedAxelarPermissionParams } from './params.js';
import type { CosmosCryptoMultisigLegacyAminoPubKey, DecodedCosmosCryptoMultisigLegacyAminoPubKey } from '../../../cosmos/crypto/multisig/keys.js';
export type EncodedAxelarPermissionQueryGovernanceKeyRequest = Encoded<'/axelar.permission.v1beta1.QueryGovernanceKeyRequest'>;
export type EncodedAxelarPermissionQueryGovernanceKeyResponse = Encoded<'/axelar.permission.v1beta1.QueryGovernanceKeyResponse'>;
export type EncodedAxelarPermissionParamsRequest = Encoded<'/axelar.permission.v1beta1.ParamsRequest'>;
export type EncodedAxelarPermissionParamsResponse = Encoded<'/axelar.permission.v1beta1.ParamsResponse'>;
/**
 * Encodes a `QueryGovernanceKeyRequest` protobuf message: the request type for the Query/GovernanceKey RPC method
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionQueryGovernanceKeyRequest: () => EncodedAxelarPermissionQueryGovernanceKeyRequest;
/**
 * Encodes a `QueryGovernanceKeyResponse` protobuf message: the response type for the Query/GovernanceKey RPC method
 * @param g_governance_key - `governance_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionQueryGovernanceKeyResponse: (atu8_governance_key?: Opt<Encoded<'/cosmos.crypto.multisig.LegacyAminoPubKey'>>) => EncodedAxelarPermissionQueryGovernanceKeyResponse;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionParamsRequest: () => EncodedAxelarPermissionParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionParamsResponse: (atu8_params?: Opt<Encoded<'/axelar.permission.v1beta1.Params'>>) => EncodedAxelarPermissionParamsResponse;
/**
 * A decoded protobuf QueryGovernanceKeyRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarPermissionQueryGovernanceKeyRequest = [];
/**
 * Decodes a protobuf QueryGovernanceKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionQueryGovernanceKeyRequest}
 */
export declare const decodeAxelarPermissionQueryGovernanceKeyRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGovernanceKey message
 *
 * Alias for: governance_key -
 */
export type DecodedAxelarPermissionQueryGovernanceKeyResponse = [
    a_governance_key?: DecodedCosmosCryptoMultisigLegacyAminoPubKey
];
/**
 * Decodes a protobuf QueryGovernanceKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionQueryGovernanceKeyResponse}
 */
export declare const decodeAxelarPermissionQueryGovernanceKeyResponse: (atu8_payload: Uint8Array) => DecodedAxelarPermissionQueryGovernanceKeyResponse;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarPermissionParamsRequest = [];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionParamsRequest}
 */
export declare const decodeAxelarPermissionParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Params message
 *
 * Alias for: params -
 */
export type DecodedAxelarPermissionParamsResponse = [
    a_params?: DecodedAxelarPermissionParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionParamsResponse}
 */
export declare const decodeAxelarPermissionParamsResponse: (atu8_payload: Uint8Array) => DecodedAxelarPermissionParamsResponse;
/**
 * Destructures the fields of a {@link AxelarPermissionQueryGovernanceKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarPermissionQueryGovernanceKeyRequest: (g_struct: AxelarPermissionQueryGovernanceKeyRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_QUERY_GOVERNANCE_KEY_REQUEST = "/axelar.permission.v1beta1.QueryGovernanceKeyRequest";
/**
 * JSON serialization of `axelar.permission.v1beta1.QueryGovernanceKeyRequest` - the request type for the Query/GovernanceKey RPC method
 */
export type AxelarPermissionQueryGovernanceKeyRequest = {};
/**
 * Destructures the fields of a {@link AxelarPermissionQueryGovernanceKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: governance_key -
 */
export declare const destructAxelarPermissionQueryGovernanceKeyResponse: (g_struct: AxelarPermissionQueryGovernanceKeyResponse) => [governance_key?: CosmosCryptoMultisigLegacyAminoPubKey];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_QUERY_GOVERNANCE_KEY_RESPONSE = "/axelar.permission.v1beta1.QueryGovernanceKeyResponse";
/**
 * JSON serialization of `axelar.permission.v1beta1.QueryGovernanceKeyResponse` - the response type for the Query/GovernanceKey RPC method
 */
export type AxelarPermissionQueryGovernanceKeyResponse = {
    governance_key?: CosmosCryptoMultisigLegacyAminoPubKey | undefined;
};
/**
 * Destructures the fields of a {@link AxelarPermissionParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarPermissionParamsRequest: (g_struct: AxelarPermissionParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_PARAMS_REQUEST = "/axelar.permission.v1beta1.ParamsRequest";
/**
 * JSON serialization of `axelar.permission.v1beta1.ParamsRequest` - represents a message that queries the params
 */
export type AxelarPermissionParamsRequest = {};
/**
 * Destructures the fields of a {@link AxelarPermissionParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export declare const destructAxelarPermissionParamsResponse: (g_struct: AxelarPermissionParamsResponse) => [params?: AxelarPermissionParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_PARAMS_RESPONSE = "/axelar.permission.v1beta1.ParamsResponse";
/**
 * JSON serialization of `axelar.permission.v1beta1.ParamsResponse` -
 */
export type AxelarPermissionParamsResponse = {
    params?: AxelarPermissionParams | undefined;
};
