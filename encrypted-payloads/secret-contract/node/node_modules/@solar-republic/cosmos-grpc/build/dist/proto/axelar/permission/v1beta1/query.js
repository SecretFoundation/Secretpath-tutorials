/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAxelarPermissionParams } from './params.js';
import { decodeCosmosCryptoMultisigLegacyAminoPubKey } from '../../../cosmos/crypto/multisig/keys.js';
/**
 * Encodes a `QueryGovernanceKeyRequest` protobuf message: the request type for the Query/GovernanceKey RPC method
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionQueryGovernanceKeyRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGovernanceKeyResponse` protobuf message: the response type for the Query/GovernanceKey RPC method
 * @param g_governance_key - `governance_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionQueryGovernanceKeyResponse = (atu8_governance_key) => Protobuf() // ...
    .b(atu8_governance_key) // LegacyAminoPubKey governance_key = 1
    .o;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf QueryGovernanceKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionQueryGovernanceKeyRequest}
 */
export const decodeAxelarPermissionQueryGovernanceKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGovernanceKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionQueryGovernanceKeyResponse}
 */
export const decodeAxelarPermissionQueryGovernanceKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosCryptoMultisigLegacyAminoPubKey]);
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionParamsRequest}
 */
export const decodeAxelarPermissionParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionParamsResponse}
 */
export const decodeAxelarPermissionParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAxelarPermissionParams]);
/**
 * Destructures the fields of a {@link AxelarPermissionQueryGovernanceKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarPermissionQueryGovernanceKeyRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_QUERY_GOVERNANCE_KEY_REQUEST = '/axelar.permission.v1beta1.QueryGovernanceKeyRequest';
/**
 * Destructures the fields of a {@link AxelarPermissionQueryGovernanceKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: governance_key -
 */
export const destructAxelarPermissionQueryGovernanceKeyResponse = (g_struct) => [g_struct.governance_key];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_QUERY_GOVERNANCE_KEY_RESPONSE = '/axelar.permission.v1beta1.QueryGovernanceKeyResponse';
/**
 * Destructures the fields of a {@link AxelarPermissionParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarPermissionParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_PARAMS_REQUEST = '/axelar.permission.v1beta1.ParamsRequest';
/**
 * Destructures the fields of a {@link AxelarPermissionParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export const destructAxelarPermissionParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_PARAMS_RESPONSE = '/axelar.permission.v1beta1.ParamsResponse';
//# sourceMappingURL=query.js.map