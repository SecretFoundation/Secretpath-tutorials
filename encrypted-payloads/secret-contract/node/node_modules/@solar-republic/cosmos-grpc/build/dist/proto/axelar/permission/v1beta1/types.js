import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `GovAccount` protobuf message:
 * @param atu8_address - `address`:
 * @param xc_role - `role`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionGovAccount = (atu8_address, xc_role) => Protobuf() // ...
    .b(atu8_address) // bytes address = 1
    .v(xc_role) // Role role = 2
    .o;
/**
 * Decodes a protobuf GovAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionGovAccount}
 */
export const decodeAxelarPermissionGovAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link AxelarPermissionGovAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: role -
 */
export const destructAxelarPermissionGovAccount = (g_struct) => [safe_base64_to_bytes(g_struct.address), g_struct.role];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_GOV_ACCOUNT = '/axelar.permission.v1beta1.GovAccount';
//# sourceMappingURL=types.js.map