import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `Pool` protobuf message:
 * @param s_name - `name`:
 * @param a_rewards - `rewards`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardPool = (s_name, a_rewards) => Protobuf() // ...
    .s(s_name) // string name = 1
    .B(a_rewards) // Reward[] rewards = 2
    .o;
/**
 * Encodes a `Refund` protobuf message:
 * @param atu8_payer - `payer`:
 * @param a_fees - `fees`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardRefund = (atu8_payer, a_fees) => Protobuf() // ...
    .b(atu8_payer) // bytes payer = 1
    .B(coins(a_fees)) // Coin[] fees = 2
    .o;
/**
 * Encodes a `Reward` protobuf message:
 * @param atu8_validator - `validator`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardPoolReward = (atu8_validator, a_coins) => Protobuf() // ...
    .b(atu8_validator) // bytes validator = 1
    .B(coins(a_coins)) // Coin[] coins = 2
    .o;
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardPool}
 */
export const decodeAxelarRewardPool = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeAxelarRewardPoolReward]);
/**
 * Decodes a protobuf Refund message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardRefund}
 */
export const decodeAxelarRewardRefund = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [0, decode_coin]);
/**
 * Decodes a protobuf Reward message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardPoolReward}
 */
export const decodeAxelarRewardPoolReward = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [0, decode_coin]);
/**
 * Destructures the fields of a {@link AxelarRewardPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: rewards -
 */
export const destructAxelarRewardPool = (g_struct) => [g_struct.name, g_struct.rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_POOL = '/axelar.reward.v1beta1.Pool';
/**
 * Destructures the fields of a {@link AxelarRewardPoolReward} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 *   - 1: coins -
 */
export const destructAxelarRewardPoolReward = (g_struct) => [safe_base64_to_bytes(g_struct.validator), g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_POOL_REWARD = '/axelar.reward.v1beta1.Pool.Reward';
/**
 * Destructures the fields of a {@link AxelarRewardRefund} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: payer -
 *   - 1: fees -
 */
export const destructAxelarRewardRefund = (g_struct) => [safe_base64_to_bytes(g_struct.payer), g_struct.fees];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_REFUND = '/axelar.reward.v1beta1.Refund';
//# sourceMappingURL=types.js.map