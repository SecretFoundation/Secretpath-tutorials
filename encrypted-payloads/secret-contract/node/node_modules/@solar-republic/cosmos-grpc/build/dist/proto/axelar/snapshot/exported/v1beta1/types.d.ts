import type { WeakInt64Str, CwInt64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../../../api/types.js';
export type EncodedAxelarSnapshotExportedParticipant = Encoded<'/axelar.snapshot.exported.v1beta1.Participant'>;
export type EncodedAxelarSnapshotExportedSnapshot = Encoded<'/axelar.snapshot.exported.v1beta1.Snapshot'>;
export type EncodedAxelarSnapshotExportedSnapshotParticipantsEntry = Encoded<'/axelar.snapshot.exported.v1beta1.Snapshot.ParticipantsEntry'>;
/**
 * Encodes a `Participant` protobuf message:
 * @param atu8_address - `address`:
 * @param atu8_weight - `weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotExportedParticipant: (atu8_address?: Opt<Uint8Array>, atu8_weight?: Opt<Uint8Array>) => EncodedAxelarSnapshotExportedParticipant;
/**
 * Encodes a `Snapshot` protobuf message:
 * @param xt_timestamp - `timestamp`:
 * @param sg_height - `height`:
 * @param a_participants - `participants`:
 * @param atu8_bonded_weight - `bonded_weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotExportedSnapshot: (xt_timestamp?: Opt<number>, sg_height?: Opt<WeakInt64Str>, a_participants?: Opt<Encoded<'/axelar.snapshot.exported.v1beta1.Snapshot.ParticipantsEntry'>[]>, atu8_bonded_weight?: Opt<Uint8Array>) => EncodedAxelarSnapshotExportedSnapshot;
/**
 * Encodes a `ParticipantsEntry` protobuf message:
 * @param s_key - `key`:
 * @param g_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotExportedSnapshotParticipantsEntry: (s_key?: Opt<string>, atu8_value?: Opt<Encoded<'/axelar.snapshot.exported.v1beta1.Participant'>>) => EncodedAxelarSnapshotExportedSnapshotParticipantsEntry;
/**
 * A decoded protobuf Participant message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export type DecodedAxelarSnapshotExportedParticipant = [
    atu8_address?: Uint8Array,
    atu8_weight?: Uint8Array
];
/**
 * Decodes a protobuf Participant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotExportedParticipant}
 */
export declare const decodeAxelarSnapshotExportedParticipant: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotExportedParticipant;
/**
 * A decoded protobuf Snapshot message
 *
 * Tuple where:
 *   - 1: timestamp -
 *   - 2: height -
 *   - 7: participants -
 *   - 8: bonded_weight -
 */
export type DecodedAxelarSnapshotExportedSnapshot = [
    w_0?: undefined,
    a_timestamp?: [
        string,
        number
    ],
    sg_height?: CwInt64,
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    w_3?: undefined,
    a_participants?: DecodedAxelarSnapshotExportedSnapshotParticipantsEntry[],
    atu8_bonded_weight?: Uint8Array
];
/**
 * Decodes a protobuf Snapshot message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarSnapshotExportedSnapshot}
 */
export declare const decodeAxelarSnapshotExportedSnapshot: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarSnapshotExportedSnapshot;
/**
 * A decoded protobuf ParticipantsEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarSnapshotExportedSnapshotParticipantsEntry = [
    s_key?: string,
    a_value?: DecodedAxelarSnapshotExportedParticipant
];
/**
 * Decodes a protobuf ParticipantsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotExportedSnapshotParticipantsEntry}
 */
export declare const decodeAxelarSnapshotExportedSnapshotParticipantsEntry: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotExportedSnapshotParticipantsEntry;
/**
 * Destructures the fields of a {@link AxelarSnapshotExportedSnapshot} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: timestamp -
 *   - 2: height -
 *   - 7: participants -
 *   - 8: bonded_weight -
 */
export declare const destructAxelarSnapshotExportedSnapshot: (g_struct: AxelarSnapshotExportedSnapshot) => [EMPTY?: void, timestamp?: number, height?: CwInt64, EMPTY?: void, EMPTY?: void, EMPTY?: void, EMPTY?: void, participants?: AxelarSnapshotExportedSnapshotParticipantsEntry[], bonded_weight?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_EXPORTED_SNAPSHOT = "/axelar.snapshot.exported.v1beta1.Snapshot";
/**
 * JSON serialization of `axelar.snapshot.exported.v1beta1.Snapshot` -
 */
export type AxelarSnapshotExportedSnapshot = {
    timestamp?: WeakTimestampStr | undefined;
    height?: CwInt64 | undefined;
    participants?: AxelarSnapshotExportedSnapshotParticipantsEntry[] | undefined;
    bonded_weight?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarSnapshotExportedSnapshotParticipantsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarSnapshotExportedSnapshotParticipantsEntry: (g_struct: AxelarSnapshotExportedSnapshotParticipantsEntry) => [key?: string, value?: AxelarSnapshotExportedParticipant];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_EXPORTED_SNAPSHOT_PARTICIPANTS_ENTRY = "/axelar.snapshot.exported.v1beta1.Snapshot.ParticipantsEntry";
/**
 * JSON serialization of `axelar.snapshot.exported.v1beta1.Snapshot.ParticipantsEntry` -
 */
export type AxelarSnapshotExportedSnapshotParticipantsEntry = {
    key?: string | undefined;
    value?: AxelarSnapshotExportedParticipant | undefined;
};
/**
 * Destructures the fields of a {@link AxelarSnapshotExportedParticipant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export declare const destructAxelarSnapshotExportedParticipant: (g_struct: AxelarSnapshotExportedParticipant) => [address?: Uint8Array, weight?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_EXPORTED_PARTICIPANT = "/axelar.snapshot.exported.v1beta1.Participant";
/**
 * JSON serialization of `axelar.snapshot.exported.v1beta1.Participant` -
 */
export type AxelarSnapshotExportedParticipant = {
    address?: CwBase64 | undefined;
    weight?: CwBase64 | undefined;
};
