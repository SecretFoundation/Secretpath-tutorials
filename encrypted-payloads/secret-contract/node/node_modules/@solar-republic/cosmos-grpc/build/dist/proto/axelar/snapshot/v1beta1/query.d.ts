import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarSnapshotParams, DecodedAxelarSnapshotParams } from './params.js';
export type EncodedAxelarSnapshotQueryValidatorsResponse = Encoded<'/axelar.snapshot.v1beta1.QueryValidatorsResponse'>;
export type EncodedAxelarSnapshotParamsRequest = Encoded<'/axelar.snapshot.v1beta1.ParamsRequest'>;
export type EncodedAxelarSnapshotParamsResponse = Encoded<'/axelar.snapshot.v1beta1.ParamsResponse'>;
export type EncodedAxelarSnapshotQueryValidatorsResponseValidator = Encoded<'/axelar.snapshot.v1beta1.QueryValidatorsResponse.Validator'>;
export type EncodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo = Encoded<'/axelar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo'>;
/**
 * Encodes a `QueryValidatorsResponse` protobuf message:
 * @param a_validators - `validators`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotQueryValidatorsResponse: (a_validators?: Opt<Encoded<'/axelar.snapshot.v1beta1.QueryValidatorsResponse.Validator'>[]>) => EncodedAxelarSnapshotQueryValidatorsResponse;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotParamsRequest: () => EncodedAxelarSnapshotParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotParamsResponse: (atu8_params?: Opt<Encoded<'/axelar.snapshot.v1beta1.Params'>>) => EncodedAxelarSnapshotParamsResponse;
/**
 * Encodes a `Validator` protobuf message:
 * @param sa_operator - `operator_address`:
 * @param s_moniker - `moniker`:
 * @param g_tss_illegibility_info - `tss_illegibility_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotQueryValidatorsResponseValidator: (sa_operator?: Opt<WeakAccountAddr>, s_moniker?: Opt<string>, atu8_tss_illegibility_info?: Opt<Encoded<'/axelar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo'>>) => EncodedAxelarSnapshotQueryValidatorsResponseValidator;
/**
 * Encodes a `TssIllegibilityInfo` protobuf message:
 * @param b_tombstoned - `tombstoned`:
 * @param b_jailed - `jailed`:
 * @param b_missed_too_many_blocks - `missed_too_many_blocks`:
 * @param b_no_proxy_registered - `no_proxy_registered`:
 * @param b_tss_suspended - `tss_suspended`:
 * @param b_proxy_insuficient_funds - `proxy_insuficient_funds`:
 * @param b_stale_tss_heartbeat - `stale_tss_heartbeat`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo: (b_tombstoned?: Opt<boolean | 0 | 1>, b_jailed?: Opt<boolean | 0 | 1>, b_missed_too_many_blocks?: Opt<boolean | 0 | 1>, b_no_proxy_registered?: Opt<boolean | 0 | 1>, b_tss_suspended?: Opt<boolean | 0 | 1>, b_proxy_insuficient_funds?: Opt<boolean | 0 | 1>, b_stale_tss_heartbeat?: Opt<boolean | 0 | 1>) => EncodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo;
/**
 * A decoded protobuf QueryValidators message
 *
 * Alias for: validators -
 */
export type DecodedAxelarSnapshotQueryValidatorsResponse = [
    a_validators?: DecodedAxelarSnapshotQueryValidatorsResponseValidator[]
];
/**
 * Decodes a protobuf QueryValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotQueryValidatorsResponse}
 */
export declare const decodeAxelarSnapshotQueryValidatorsResponse: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotQueryValidatorsResponse;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarSnapshotParamsRequest = [];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotParamsRequest}
 */
export declare const decodeAxelarSnapshotParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Params message
 *
 * Alias for: params -
 */
export type DecodedAxelarSnapshotParamsResponse = [
    a_params?: DecodedAxelarSnapshotParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotParamsResponse}
 */
export declare const decodeAxelarSnapshotParamsResponse: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotParamsResponse;
/**
 * A decoded protobuf Validator message
 *
 * Tuple where:
 *   - 0: operator_address -
 *   - 1: moniker -
 *   - 2: tss_illegibility_info -
 */
export type DecodedAxelarSnapshotQueryValidatorsResponseValidator = [
    sa_operator?: CwAccountAddr,
    s_moniker?: string,
    a_tss_illegibility_info?: DecodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo
];
/**
 * Decodes a protobuf Validator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotQueryValidatorsResponseValidator}
 */
export declare const decodeAxelarSnapshotQueryValidatorsResponseValidator: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotQueryValidatorsResponseValidator;
/**
 * A decoded protobuf TssIllegibilityInfo message
 *
 * Tuple where:
 *   - 0: tombstoned -
 *   - 1: jailed -
 *   - 2: missed_too_many_blocks -
 *   - 3: no_proxy_registered -
 *   - 4: tss_suspended -
 *   - 5: proxy_insuficient_funds -
 *   - 6: stale_tss_heartbeat -
 */
export type DecodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo = [
    b_tombstoned?: 0 | 1,
    b_jailed?: 0 | 1,
    b_missed_too_many_blocks?: 0 | 1,
    b_no_proxy_registered?: 0 | 1,
    b_tss_suspended?: 0 | 1,
    b_proxy_insuficient_funds?: 0 | 1,
    b_stale_tss_heartbeat?: 0 | 1
];
/**
 * Decodes a protobuf TssIllegibilityInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo}
 */
export declare const decodeAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo;
/**
 * Destructures the fields of a {@link AxelarSnapshotQueryValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators -
 */
export declare const destructAxelarSnapshotQueryValidatorsResponse: (g_struct: AxelarSnapshotQueryValidatorsResponse) => [validators?: AxelarSnapshotQueryValidatorsResponseValidator[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_QUERY_VALIDATORS_RESPONSE = "/axelar.snapshot.v1beta1.QueryValidatorsResponse";
/**
 * JSON serialization of `axelar.snapshot.v1beta1.QueryValidatorsResponse` -
 */
export type AxelarSnapshotQueryValidatorsResponse = {
    validators?: AxelarSnapshotQueryValidatorsResponseValidator[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarSnapshotQueryValidatorsResponseValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: operator_address -
 *   - 1: moniker -
 *   - 2: tss_illegibility_info -
 */
export declare const destructAxelarSnapshotQueryValidatorsResponseValidator: (g_struct: AxelarSnapshotQueryValidatorsResponseValidator) => [operator_address?: CwAccountAddr, moniker?: string, tss_illegibility_info?: AxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_QUERY_VALIDATORS_RESPONSE_VALIDATOR = "/axelar.snapshot.v1beta1.QueryValidatorsResponse.Validator";
/**
 * JSON serialization of `axelar.snapshot.v1beta1.QueryValidatorsResponse.Validator` -
 */
export type AxelarSnapshotQueryValidatorsResponseValidator = {
    operator_address?: CwAccountAddr | undefined;
    moniker?: string | undefined;
    tss_illegibility_info?: AxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo | undefined;
};
/**
 * Destructures the fields of a {@link AxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tombstoned -
 *   - 1: jailed -
 *   - 2: missed_too_many_blocks -
 *   - 3: no_proxy_registered -
 *   - 4: tss_suspended -
 *   - 5: proxy_insuficient_funds -
 *   - 6: stale_tss_heartbeat -
 */
export declare const destructAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo: (g_struct: AxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo) => [tombstoned?: boolean, jailed?: boolean, missed_too_many_blocks?: boolean, no_proxy_registered?: boolean, tss_suspended?: boolean, proxy_insuficient_funds?: boolean, stale_tss_heartbeat?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_QUERY_VALIDATORS_RESPONSE_TSS_ILLEGIBILITY_INFO = "/axelar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo";
/**
 * JSON serialization of `axelar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo` -
 */
export type AxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo = {
    tombstoned?: boolean | undefined;
    jailed?: boolean | undefined;
    missed_too_many_blocks?: boolean | undefined;
    no_proxy_registered?: boolean | undefined;
    tss_suspended?: boolean | undefined;
    proxy_insuficient_funds?: boolean | undefined;
    stale_tss_heartbeat?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarSnapshotParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarSnapshotParamsRequest: (g_struct: AxelarSnapshotParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_PARAMS_REQUEST = "/axelar.snapshot.v1beta1.ParamsRequest";
/**
 * JSON serialization of `axelar.snapshot.v1beta1.ParamsRequest` - represents a message that queries the params
 */
export type AxelarSnapshotParamsRequest = {};
/**
 * Destructures the fields of a {@link AxelarSnapshotParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export declare const destructAxelarSnapshotParamsResponse: (g_struct: AxelarSnapshotParamsResponse) => [params?: AxelarSnapshotParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_PARAMS_RESPONSE = "/axelar.snapshot.v1beta1.ParamsResponse";
/**
 * JSON serialization of `axelar.snapshot.v1beta1.ParamsResponse` -
 */
export type AxelarSnapshotParamsResponse = {
    params?: AxelarSnapshotParams | undefined;
};
