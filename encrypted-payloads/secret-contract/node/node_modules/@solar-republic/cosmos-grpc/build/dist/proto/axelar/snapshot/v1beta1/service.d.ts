/// <reference types="node" />
import type { Opt } from '../../../../api/types.js';
import type { AxelarSnapshotParamsResponse } from './query.js';
import type { AxelarSnapshotRegisterProxyResponse, AxelarSnapshotDeactivateProxyResponse } from './tx.js';
/**
 * Defines a method for registering a proxy account that can act in a validator account's stead.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_proxy_addr -
 * @returns an empty tuple
 */
export declare const submitAxelarSnapshotRegisterProxy: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, atu8_proxy_addr?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarSnapshotRegisterProxyResponse>>;
/**
 * Defines a method for deregistering a proxy account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export declare const submitAxelarSnapshotDeactivateProxy: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarSnapshotDeactivateProxyResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export declare const queryAxelarSnapshotParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarSnapshotParamsResponse>>;
