import type { WeakInt64Str, CwInt64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../../utils/v1beta1/threshold.js';
export type EncodedAxelarTssExportedKeyRequirement = Encoded<'/axelar.tss.exported.v1beta1.KeyRequirement'>;
export type EncodedAxelarTssExportedSigKeyPair = Encoded<'/axelar.tss.exported.v1beta1.SigKeyPair'>;
/**
 * Encodes a `KeyRequirement` protobuf message: defines requirements for keys
 * @param xc_key_role - `key_role`:
 * @param xc_key_type - `key_type`:
 * @param g_min_keygen_threshold - `min_keygen_threshold`:
 * @param g_safety_threshold - `safety_threshold`:
 * @param xc_key_share_distribution_policy - `key_share_distribution_policy`:
 * @param sg_max_total_share_count - `max_total_share_count`:
 * @param sg_min_total_share_count - `min_total_share_count`:
 * @param g_keygen_voting_threshold - `keygen_voting_threshold`:
 * @param g_sign_voting_threshold - `sign_voting_threshold`:
 * @param sg_keygen_timeout - `keygen_timeout`:
 * @param sg_sign_timeout - `sign_timeout`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssExportedKeyRequirement: (xc_key_role?: Opt<ProtoEnumAxelarTssExportedKeyRole>, xc_key_type?: Opt<ProtoEnumAxelarTssExportedKeyType>, atu8_min_keygen_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, atu8_safety_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, xc_key_share_distribution_policy?: Opt<ProtoEnumAxelarTssExportedKeyShareDistributionPolicy>, sg_max_total_share_count?: Opt<WeakInt64Str>, sg_min_total_share_count?: Opt<WeakInt64Str>, atu8_keygen_voting_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, atu8_sign_voting_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_keygen_timeout?: Opt<WeakInt64Str>, sg_sign_timeout?: Opt<WeakInt64Str>) => EncodedAxelarTssExportedKeyRequirement;
/**
 * Encodes a `SigKeyPair` protobuf message: PubKeyInfo holds a pubkey and a signature
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssExportedSigKeyPair: (atu8_pub_key?: Opt<Uint8Array>, atu8_signature?: Opt<Uint8Array>) => EncodedAxelarTssExportedSigKeyPair;
/**
 * A decoded protobuf KeyRequirement message
 *
 * Tuple where:
 *   - 0: key_role -
 *   - 1: key_type -
 *   - 2: min_keygen_threshold -
 *   - 3: safety_threshold -
 *   - 4: key_share_distribution_policy -
 *   - 5: max_total_share_count -
 *   - 6: min_total_share_count -
 *   - 7: keygen_voting_threshold -
 *   - 8: sign_voting_threshold -
 *   - 9: keygen_timeout -
 *   - 10: sign_timeout -
 */
export type DecodedAxelarTssExportedKeyRequirement = [
    xc_key_role?: ProtoEnumAxelarTssExportedKeyRole,
    xc_key_type?: ProtoEnumAxelarTssExportedKeyType,
    a_min_keygen_threshold?: DecodedAxelarUtilsThreshold,
    a_safety_threshold?: DecodedAxelarUtilsThreshold,
    xc_key_share_distribution_policy?: ProtoEnumAxelarTssExportedKeyShareDistributionPolicy,
    sg_max_total_share_count?: CwInt64,
    sg_min_total_share_count?: CwInt64,
    a_keygen_voting_threshold?: DecodedAxelarUtilsThreshold,
    a_sign_voting_threshold?: DecodedAxelarUtilsThreshold,
    sg_keygen_timeout?: CwInt64,
    sg_sign_timeout?: CwInt64
];
/**
 * Decodes a protobuf KeyRequirement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssExportedKeyRequirement}
 */
export declare const decodeAxelarTssExportedKeyRequirement: (atu8_payload: Uint8Array) => DecodedAxelarTssExportedKeyRequirement;
/**
 * A decoded protobuf SigKeyPair message
 *
 * Tuple where:
 *   - 0: pub_key -
 *   - 1: signature -
 */
export type DecodedAxelarTssExportedSigKeyPair = [
    atu8_pub_key?: Uint8Array,
    atu8_signature?: Uint8Array
];
/**
 * Decodes a protobuf SigKeyPair message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssExportedSigKeyPair}
 */
export declare const decodeAxelarTssExportedSigKeyPair: (atu8_payload: Uint8Array) => DecodedAxelarTssExportedSigKeyPair;
/**
 * Destructures the fields of a {@link AxelarTssExportedKeyRequirement} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_role -
 *   - 1: key_type -
 *   - 2: min_keygen_threshold -
 *   - 3: safety_threshold -
 *   - 4: key_share_distribution_policy -
 *   - 5: max_total_share_count -
 *   - 6: min_total_share_count -
 *   - 7: keygen_voting_threshold -
 *   - 8: sign_voting_threshold -
 *   - 9: keygen_timeout -
 *   - 10: sign_timeout -
 */
export declare const destructAxelarTssExportedKeyRequirement: (g_struct: AxelarTssExportedKeyRequirement) => [key_role?: JsonEnumAxelarTssExportedKeyRole, key_type?: JsonEnumAxelarTssExportedKeyType, min_keygen_threshold?: AxelarUtilsThreshold, safety_threshold?: AxelarUtilsThreshold, key_share_distribution_policy?: JsonEnumAxelarTssExportedKeyShareDistributionPolicy, max_total_share_count?: CwInt64, min_total_share_count?: CwInt64, keygen_voting_threshold?: AxelarUtilsThreshold, sign_voting_threshold?: AxelarUtilsThreshold, keygen_timeout?: CwInt64, sign_timeout?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_EXPORTED_KEY_REQUIREMENT = "/axelar.tss.exported.v1beta1.KeyRequirement";
/**
 * JSON serialization of `axelar.tss.exported.v1beta1.KeyRequirement` - defines requirements for keys
 */
export type AxelarTssExportedKeyRequirement = {
    key_role?: JsonEnumAxelarTssExportedKeyRole | undefined;
    key_type?: JsonEnumAxelarTssExportedKeyType | undefined;
    min_keygen_threshold?: AxelarUtilsThreshold | undefined;
    safety_threshold?: AxelarUtilsThreshold | undefined;
    key_share_distribution_policy?: JsonEnumAxelarTssExportedKeyShareDistributionPolicy | undefined;
    max_total_share_count?: CwInt64 | undefined;
    min_total_share_count?: CwInt64 | undefined;
    keygen_voting_threshold?: AxelarUtilsThreshold | undefined;
    sign_voting_threshold?: AxelarUtilsThreshold | undefined;
    keygen_timeout?: CwInt64 | undefined;
    sign_timeout?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssExportedSigKeyPair} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: signature -
 */
export declare const destructAxelarTssExportedSigKeyPair: (g_struct: AxelarTssExportedSigKeyPair) => [pub_key?: Uint8Array, signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_EXPORTED_SIG_KEY_PAIR = "/axelar.tss.exported.v1beta1.SigKeyPair";
/**
 * JSON serialization of `axelar.tss.exported.v1beta1.SigKeyPair` - PubKeyInfo holds a pubkey and a signature
 */
export type AxelarTssExportedSigKeyPair = {
    pub_key?: CwBase64 | undefined;
    signature?: CwBase64 | undefined;
};
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED = "KEY_TYPE_UNSPECIFIED";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_NONE** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE = 1;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_NONE** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE = "None";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_THRESHOLD** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD = 2;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_THRESHOLD** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD = "Threshold";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_MULTISIG** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG = 3;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_MULTISIG** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG = "Multisig";
/**
 * Raw protobuf enum values for `axelar.tss.exported.v1beta1.KeyType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG}
 */
export type ProtoEnumAxelarTssExportedKeyType = typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG;
/**
 * JSON enum values for `axelar.tss.exported.v1beta1.KeyType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG}
 */
export type JsonEnumAxelarTssExportedKeyType = typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG;
/**
 * Maps a protobuf enum int value for `axelar.tss.exported.v1beta1.KeyType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarTssExportedKeyType: Record<ProtoEnumAxelarTssExportedKeyType, JsonEnumAxelarTssExportedKeyType>;
/**
 * Maps a JSON enum string value for `axelar.tss.exported.v1beta1.KeyType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarTssExportedKeyType: Record<JsonEnumAxelarTssExportedKeyType, ProtoEnumAxelarTssExportedKeyType>;
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED = "Unknown";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_MASTER_KEY** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY = 1;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_MASTER_KEY** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY = "MasterKey";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_SECONDARY_KEY** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY = 2;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_SECONDARY_KEY** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY = "SecondaryKey";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_EXTERNAL_KEY** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY = 3;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_EXTERNAL_KEY** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY = "ExternalKey";
/**
 * Raw protobuf enum values for `axelar.tss.exported.v1beta1.KeyRole` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY}
 */
export type ProtoEnumAxelarTssExportedKeyRole = typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY;
/**
 * JSON enum values for `axelar.tss.exported.v1beta1.KeyRole` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY}
 */
export type JsonEnumAxelarTssExportedKeyRole = typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY;
/**
 * Maps a protobuf enum int value for `axelar.tss.exported.v1beta1.KeyRole` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarTssExportedKeyRole: Record<ProtoEnumAxelarTssExportedKeyRole, JsonEnumAxelarTssExportedKeyRole>;
/**
 * Maps a JSON enum string value for `axelar.tss.exported.v1beta1.KeyRole` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarTssExportedKeyRole: Record<JsonEnumAxelarTssExportedKeyRole, ProtoEnumAxelarTssExportedKeyRole>;
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED = "Unspecified";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE = 1;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE = "WeightedByStake";
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export declare const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR = 2;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export declare const SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR = "OnePerValidator";
/**
 * Raw protobuf enum values for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE}
 *   - {@link XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR}
 */
export type ProtoEnumAxelarTssExportedKeyShareDistributionPolicy = typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE | typeof XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR;
/**
 * JSON enum values for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE}
 *   - {@link SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR}
 */
export type JsonEnumAxelarTssExportedKeyShareDistributionPolicy = typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE | typeof SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR;
/**
 * Maps a protobuf enum int value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarTssExportedKeyShareDistributionPolicy: Record<ProtoEnumAxelarTssExportedKeyShareDistributionPolicy, JsonEnumAxelarTssExportedKeyShareDistributionPolicy>;
/**
 * Maps a JSON enum string value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarTssExportedKeyShareDistributionPolicy: Record<JsonEnumAxelarTssExportedKeyShareDistributionPolicy, ProtoEnumAxelarTssExportedKeyShareDistributionPolicy>;
