import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeAxelarUtilsThreshold } from '../../../utils/v1beta1/threshold.js';
/**
 * Encodes a `KeyRequirement` protobuf message: defines requirements for keys
 * @param xc_key_role - `key_role`:
 * @param xc_key_type - `key_type`:
 * @param g_min_keygen_threshold - `min_keygen_threshold`:
 * @param g_safety_threshold - `safety_threshold`:
 * @param xc_key_share_distribution_policy - `key_share_distribution_policy`:
 * @param sg_max_total_share_count - `max_total_share_count`:
 * @param sg_min_total_share_count - `min_total_share_count`:
 * @param g_keygen_voting_threshold - `keygen_voting_threshold`:
 * @param g_sign_voting_threshold - `sign_voting_threshold`:
 * @param sg_keygen_timeout - `keygen_timeout`:
 * @param sg_sign_timeout - `sign_timeout`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssExportedKeyRequirement = (xc_key_role, xc_key_type, atu8_min_keygen_threshold, atu8_safety_threshold, xc_key_share_distribution_policy, sg_max_total_share_count, sg_min_total_share_count, atu8_keygen_voting_threshold, atu8_sign_voting_threshold, sg_keygen_timeout, sg_sign_timeout) => Protobuf() // ...
    .v(xc_key_role) // KeyRole key_role = 1
    .v(xc_key_type) // KeyType key_type = 2
    .b(atu8_min_keygen_threshold) // Threshold min_keygen_threshold = 3
    .b(atu8_safety_threshold) // Threshold safety_threshold = 4
    .v(xc_key_share_distribution_policy) // KeyShareDistributionPolicy key_share_distribution_policy = 5
    .g(sg_max_total_share_count) // int32 max_total_share_count = 6
    .g(sg_min_total_share_count) // int32 min_total_share_count = 7
    .b(atu8_keygen_voting_threshold) // Threshold keygen_voting_threshold = 8
    .b(atu8_sign_voting_threshold) // Threshold sign_voting_threshold = 9
    .g(sg_keygen_timeout) // int32 keygen_timeout = 10
    .g(sg_sign_timeout) // int32 sign_timeout = 11
    .o;
/**
 * Encodes a `SigKeyPair` protobuf message: PubKeyInfo holds a pubkey and a signature
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssExportedSigKeyPair = (atu8_pub_key, atu8_signature) => Protobuf() // ...
    .b(atu8_pub_key) // bytes pub_key = 1
    .b(atu8_signature) // bytes signature = 2
    .o;
/**
 * Decodes a protobuf KeyRequirement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssExportedKeyRequirement}
 */
export const decodeAxelarTssExportedKeyRequirement = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3], [0, 0, decodeAxelarUtilsThreshold, decodeAxelarUtilsThreshold, 0, 0, 0, decodeAxelarUtilsThreshold, decodeAxelarUtilsThreshold]);
/**
 * Decodes a protobuf SigKeyPair message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssExportedSigKeyPair}
 */
export const decodeAxelarTssExportedSigKeyPair = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link AxelarTssExportedKeyRequirement} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_role -
 *   - 1: key_type -
 *   - 2: min_keygen_threshold -
 *   - 3: safety_threshold -
 *   - 4: key_share_distribution_policy -
 *   - 5: max_total_share_count -
 *   - 6: min_total_share_count -
 *   - 7: keygen_voting_threshold -
 *   - 8: sign_voting_threshold -
 *   - 9: keygen_timeout -
 *   - 10: sign_timeout -
 */
export const destructAxelarTssExportedKeyRequirement = (g_struct) => [g_struct.key_role, g_struct.key_type, g_struct.min_keygen_threshold, g_struct.safety_threshold, g_struct.key_share_distribution_policy, g_struct.max_total_share_count, g_struct.min_total_share_count, g_struct.keygen_voting_threshold, g_struct.sign_voting_threshold, g_struct.keygen_timeout, g_struct.sign_timeout];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_EXPORTED_KEY_REQUIREMENT = '/axelar.tss.exported.v1beta1.KeyRequirement';
/**
 * Destructures the fields of a {@link AxelarTssExportedSigKeyPair} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: signature -
 */
export const destructAxelarTssExportedSigKeyPair = (g_struct) => [safe_base64_to_bytes(g_struct.pub_key), safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_EXPORTED_SIG_KEY_PAIR = '/axelar.tss.exported.v1beta1.SigKeyPair';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED = 'KEY_TYPE_UNSPECIFIED';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_NONE** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE = 1;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_NONE** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE = 'None';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_THRESHOLD** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD = 2;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_THRESHOLD** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD = 'Threshold';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_MULTISIG** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyType}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG = 3;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyType`.
 *
 * **KEY_TYPE_MULTISIG** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyType}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG = 'Multisig';
/**
 * Maps a protobuf enum int value for `axelar.tss.exported.v1beta1.KeyType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarTssExportedKeyType = {
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG,
};
/**
 * Maps a JSON enum string value for `axelar.tss.exported.v1beta1.KeyType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarTssExportedKeyType = {
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_UNSPECIFIED,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_NONE,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_THRESHOLD,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_TYPE_MULTISIG,
};
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED = 'Unknown';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_MASTER_KEY** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY = 1;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_MASTER_KEY** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY = 'MasterKey';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_SECONDARY_KEY** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY = 2;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_SECONDARY_KEY** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY = 'SecondaryKey';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_EXTERNAL_KEY** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyRole}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY = 3;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyRole`.
 *
 * **KEY_ROLE_EXTERNAL_KEY** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyRole}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY = 'ExternalKey';
/**
 * Maps a protobuf enum int value for `axelar.tss.exported.v1beta1.KeyRole` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarTssExportedKeyRole = {
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY,
};
/**
 * Maps a JSON enum string value for `axelar.tss.exported.v1beta1.KeyRole` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarTssExportedKeyRole = {
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_UNSPECIFIED,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_MASTER_KEY,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_SECONDARY_KEY,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_ROLE_EXTERNAL_KEY,
};
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED = 'Unspecified';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE = 1;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE = 'WeightedByStake';
/**
 * Protobuf enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export const XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR = 2;
/**
 * JSON enum value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy`.
 *
 * **KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssExportedKeyShareDistributionPolicy}
 */
export const SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR = 'OnePerValidator';
/**
 * Maps a protobuf enum int value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarTssExportedKeyShareDistributionPolicy = {
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE,
    [XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR]: SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR,
};
/**
 * Maps a JSON enum string value for `axelar.tss.exported.v1beta1.KeyShareDistributionPolicy` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarTssExportedKeyShareDistributionPolicy = {
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE,
    [SI_JSON_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR]: XC_PROTO_AXELAR_TSS_EXPORTED_KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR,
};
//# sourceMappingURL=types.js.map