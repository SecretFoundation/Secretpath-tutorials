import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedAxelarTssTofndKeygenRequest = Encoded<'/axelar.tss.tofnd.v1beta1.KeygenRequest'>;
export type EncodedAxelarTssTofndKeygenResponse = Encoded<'/axelar.tss.tofnd.v1beta1.KeygenResponse'>;
export type EncodedAxelarTssTofndSignRequest = Encoded<'/axelar.tss.tofnd.v1beta1.SignRequest'>;
export type EncodedAxelarTssTofndSignResponse = Encoded<'/axelar.tss.tofnd.v1beta1.SignResponse'>;
/**
 * Encodes a `KeygenRequest` protobuf message:
 * @param s_key_uid - `key_uid`:
 * @param s_party_uid - `party_uid`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndKeygenRequest: (s_key_uid?: Opt<string>, s_party_uid?: Opt<string>) => EncodedAxelarTssTofndKeygenRequest;
/**
 * Encodes a `KeygenResponse` protobuf message:
 * @param atu8_pub_key - `pub_key`:
 * @param s_error - `error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndKeygenResponse: (atu8_pub_key?: Opt<Uint8Array>, s_error?: Opt<string>) => EncodedAxelarTssTofndKeygenResponse;
/**
 * Encodes a `SignRequest` protobuf message:
 * @param s_key_uid - `key_uid`:
 * @param atu8_msg_to_sign - `msg_to_sign`:
 * @param s_party_uid - `party_uid`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndSignRequest: (s_key_uid?: Opt<string>, atu8_msg_to_sign?: Opt<Uint8Array>, s_party_uid?: Opt<string>, atu8_pub_key?: Opt<Uint8Array>) => EncodedAxelarTssTofndSignRequest;
/**
 * Encodes a `SignResponse` protobuf message:
 * @param atu8_signature - `signature`:
 * @param s_error - `error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndSignResponse: (atu8_signature?: Opt<Uint8Array>, s_error?: Opt<string>) => EncodedAxelarTssTofndSignResponse;
/**
 * A decoded protobuf KeygenRequest message
 *
 * Tuple where:
 *   - 0: key_uid -
 *   - 1: party_uid -
 */
export type DecodedAxelarTssTofndKeygenRequest = [
    s_key_uid?: string,
    s_party_uid?: string
];
/**
 * Decodes a protobuf KeygenRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenRequest}
 */
export declare const decodeAxelarTssTofndKeygenRequest: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndKeygenRequest;
/**
 * A decoded protobuf Keygen message
 *
 * Tuple where:
 *   - 0: pub_key -
 *   - 1: error -
 */
export type DecodedAxelarTssTofndKeygenResponse = [
    atu8_pub_key?: Uint8Array,
    s_error?: string
];
/**
 * Decodes a protobuf Keygen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenResponse}
 */
export declare const decodeAxelarTssTofndKeygenResponse: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndKeygenResponse;
/**
 * A decoded protobuf SignRequest message
 *
 * Tuple where:
 *   - 0: key_uid -
 *   - 1: msg_to_sign -
 *   - 2: party_uid -
 *   - 3: pub_key -
 */
export type DecodedAxelarTssTofndSignRequest = [
    s_key_uid?: string,
    atu8_msg_to_sign?: Uint8Array,
    s_party_uid?: string,
    atu8_pub_key?: Uint8Array
];
/**
 * Decodes a protobuf SignRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndSignRequest}
 */
export declare const decodeAxelarTssTofndSignRequest: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndSignRequest;
/**
 * A decoded protobuf Sign message
 *
 * Tuple where:
 *   - 0: signature -
 *   - 1: error -
 */
export type DecodedAxelarTssTofndSignResponse = [
    atu8_signature?: Uint8Array,
    s_error?: string
];
/**
 * Decodes a protobuf Sign message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndSignResponse}
 */
export declare const decodeAxelarTssTofndSignResponse: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndSignResponse;
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_uid -
 *   - 1: party_uid -
 */
export declare const destructAxelarTssTofndKeygenRequest: (g_struct: AxelarTssTofndKeygenRequest) => [key_uid?: string, party_uid?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_REQUEST = "/axelar.tss.tofnd.v1beta1.KeygenRequest";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.KeygenRequest` -
 */
export type AxelarTssTofndKeygenRequest = {
    key_uid?: string | undefined;
    party_uid?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: error -
 */
export declare const destructAxelarTssTofndKeygenResponse: (g_struct: AxelarTssTofndKeygenResponse) => [pub_key?: Uint8Array, error?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_RESPONSE = "/axelar.tss.tofnd.v1beta1.KeygenResponse";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.KeygenResponse` -
 */
export type AxelarTssTofndKeygenResponse = {
    pub_key?: CwBase64 | undefined;
    error?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndSignRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_uid -
 *   - 1: msg_to_sign -
 *   - 2: party_uid -
 *   - 3: pub_key -
 */
export declare const destructAxelarTssTofndSignRequest: (g_struct: AxelarTssTofndSignRequest) => [key_uid?: string, msg_to_sign?: Uint8Array, party_uid?: string, pub_key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_SIGN_REQUEST = "/axelar.tss.tofnd.v1beta1.SignRequest";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.SignRequest` -
 */
export type AxelarTssTofndSignRequest = {
    key_uid?: string | undefined;
    msg_to_sign?: CwBase64 | undefined;
    party_uid?: string | undefined;
    pub_key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndSignResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signature -
 *   - 1: error -
 */
export declare const destructAxelarTssTofndSignResponse: (g_struct: AxelarTssTofndSignResponse) => [signature?: Uint8Array, error?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_SIGN_RESPONSE = "/axelar.tss.tofnd.v1beta1.SignResponse";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.SignResponse` -
 */
export type AxelarTssTofndSignResponse = {
    signature?: CwBase64 | undefined;
    error?: string | undefined;
};
