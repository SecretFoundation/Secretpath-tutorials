import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `KeygenRequest` protobuf message:
 * @param s_key_uid - `key_uid`:
 * @param s_party_uid - `party_uid`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndKeygenRequest = (s_key_uid, s_party_uid) => Protobuf() // ...
    .s(s_key_uid) // string key_uid = 1
    .s(s_party_uid) // string party_uid = 2
    .o;
/**
 * Encodes a `KeygenResponse` protobuf message:
 * @param atu8_pub_key - `pub_key`:
 * @param s_error - `error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndKeygenResponse = (atu8_pub_key, s_error) => Protobuf() // ...
    .b(atu8_pub_key) // bytes pub_key = 1
    .s(s_error) // string error = 2
    .o;
/**
 * Encodes a `SignRequest` protobuf message:
 * @param s_key_uid - `key_uid`:
 * @param atu8_msg_to_sign - `msg_to_sign`:
 * @param s_party_uid - `party_uid`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndSignRequest = (s_key_uid, atu8_msg_to_sign, s_party_uid, atu8_pub_key) => Protobuf() // ...
    .s(s_key_uid) // string key_uid = 1
    .b(atu8_msg_to_sign) // bytes msg_to_sign = 2
    .s(s_party_uid) // string party_uid = 3
    .b(atu8_pub_key) // bytes pub_key = 4
    .o;
/**
 * Encodes a `SignResponse` protobuf message:
 * @param atu8_signature - `signature`:
 * @param s_error - `error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndSignResponse = (atu8_signature, s_error) => Protobuf() // ...
    .b(atu8_signature) // bytes signature = 1
    .s(s_error) // string error = 2
    .o;
/**
 * Decodes a protobuf KeygenRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenRequest}
 */
export const decodeAxelarTssTofndKeygenRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf Keygen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenResponse}
 */
export const decodeAxelarTssTofndKeygenResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf SignRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndSignRequest}
 */
export const decodeAxelarTssTofndSignRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5, 1]);
/**
 * Decodes a protobuf Sign message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndSignResponse}
 */
export const decodeAxelarTssTofndSignResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_uid -
 *   - 1: party_uid -
 */
export const destructAxelarTssTofndKeygenRequest = (g_struct) => [g_struct.key_uid, g_struct.party_uid];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_REQUEST = '/axelar.tss.tofnd.v1beta1.KeygenRequest';
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: error -
 */
export const destructAxelarTssTofndKeygenResponse = (g_struct) => [safe_base64_to_bytes(g_struct.pub_key), g_struct.error];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_RESPONSE = '/axelar.tss.tofnd.v1beta1.KeygenResponse';
/**
 * Destructures the fields of a {@link AxelarTssTofndSignRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_uid -
 *   - 1: msg_to_sign -
 *   - 2: party_uid -
 *   - 3: pub_key -
 */
export const destructAxelarTssTofndSignRequest = (g_struct) => [g_struct.key_uid, safe_base64_to_bytes(g_struct.msg_to_sign), g_struct.party_uid, safe_base64_to_bytes(g_struct.pub_key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_SIGN_REQUEST = '/axelar.tss.tofnd.v1beta1.SignRequest';
/**
 * Destructures the fields of a {@link AxelarTssTofndSignResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signature -
 *   - 1: error -
 */
export const destructAxelarTssTofndSignResponse = (g_struct) => [safe_base64_to_bytes(g_struct.signature), g_struct.error];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_SIGN_RESPONSE = '/axelar.tss.tofnd.v1beta1.SignResponse';
//# sourceMappingURL=multisig.js.map