import type { WeakInt64Str, CwInt64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarTssExportedKeyRequirement, DecodedAxelarTssExportedKeyRequirement } from '../exported/v1beta1/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
export type EncodedAxelarTssParams = Encoded<'/axelar.tss.v1beta1.Params'>;
/**
 * Encodes a `Params` protobuf message: the parameter set for this module
 * @param a_key_requirements - `key_requirements`: KeyRequirements defines the requirement for each key role
 * @param sg_suspend_duration_in_blocks - `suspend_duration_in_blocks`: SuspendDurationInBlocks defines the number of blocks a validator is disallowed to participate in any TSS ceremony after committing a malicious behaviour during signing
 * @param sg_heartbeat_period_in_blocks - `heartbeat_period_in_blocks`: HeartBeatPeriodInBlocks defines the time period in blocks for tss to emit the event asking validators to send their heartbeats
 * @param g_max_missed_blocks_per_window - `max_missed_blocks_per_window`:
 * @param sg_unbonding_locking_key_rotation_count - `unbonding_locking_key_rotation_count`:
 * @param g_external_multisig_threshold - `external_multisig_threshold`:
 * @param sg_max_sign_queue_size - `max_sign_queue_size`:
 * @param sg_max_simultaneous_sign_shares - `max_simultaneous_sign_shares`:
 * @param sg_tss_signed_blocks_window - `tss_signed_blocks_window`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssParams: (a_key_requirements?: Opt<Encoded<'/axelar.tss.exported.v1beta1.KeyRequirement'>[]>, sg_suspend_duration_in_blocks?: Opt<WeakInt64Str>, sg_heartbeat_period_in_blocks?: Opt<WeakInt64Str>, atu8_max_missed_blocks_per_window?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_unbonding_locking_key_rotation_count?: Opt<WeakInt64Str>, atu8_external_multisig_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_max_sign_queue_size?: Opt<WeakInt64Str>, sg_max_simultaneous_sign_shares?: Opt<WeakInt64Str>, sg_tss_signed_blocks_window?: Opt<WeakInt64Str>) => EncodedAxelarTssParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: key_requirements - KeyRequirements defines the requirement for each key role
 *   - 1: suspend_duration_in_blocks - SuspendDurationInBlocks defines the number of blocks a validator is disallowed to participate in any TSS ceremony after committing a malicious behaviour during signing
 *   - 2: heartbeat_period_in_blocks - HeartBeatPeriodInBlocks defines the time period in blocks for tss to emit the event asking validators to send their heartbeats
 *   - 3: max_missed_blocks_per_window -
 *   - 4: unbonding_locking_key_rotation_count -
 *   - 5: external_multisig_threshold -
 *   - 6: max_sign_queue_size -
 *   - 7: max_simultaneous_sign_shares -
 *   - 8: tss_signed_blocks_window -
 */
export type DecodedAxelarTssParams = [
    a_key_requirements?: DecodedAxelarTssExportedKeyRequirement[],
    sg_suspend_duration_in_blocks?: CwInt64,
    sg_heartbeat_period_in_blocks?: CwInt64,
    a_max_missed_blocks_per_window?: DecodedAxelarUtilsThreshold,
    sg_unbonding_locking_key_rotation_count?: CwInt64,
    a_external_multisig_threshold?: DecodedAxelarUtilsThreshold,
    sg_max_sign_queue_size?: CwInt64,
    sg_max_simultaneous_sign_shares?: CwInt64,
    sg_tss_signed_blocks_window?: CwInt64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssParams}
 */
export declare const decodeAxelarTssParams: (atu8_payload: Uint8Array) => DecodedAxelarTssParams;
/**
 * Destructures the fields of a {@link AxelarTssParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_requirements - KeyRequirements defines the requirement for each key role
 *   - 1: suspend_duration_in_blocks - SuspendDurationInBlocks defines the number of blocks a validator is disallowed to participate in any TSS ceremony after committing a malicious behaviour during signing
 *   - 2: heartbeat_period_in_blocks - HeartBeatPeriodInBlocks defines the time period in blocks for tss to emit the event asking validators to send their heartbeats
 *   - 3: max_missed_blocks_per_window -
 *   - 4: unbonding_locking_key_rotation_count -
 *   - 5: external_multisig_threshold -
 *   - 6: max_sign_queue_size -
 *   - 7: max_simultaneous_sign_shares -
 *   - 8: tss_signed_blocks_window -
 */
export declare const destructAxelarTssParams: (g_struct: AxelarTssParams) => [key_requirements?: AxelarTssExportedKeyRequirement[], suspend_duration_in_blocks?: CwInt64, heartbeat_period_in_blocks?: CwInt64, max_missed_blocks_per_window?: AxelarUtilsThreshold, unbonding_locking_key_rotation_count?: CwInt64, external_multisig_threshold?: AxelarUtilsThreshold, max_sign_queue_size?: CwInt64, max_simultaneous_sign_shares?: CwInt64, tss_signed_blocks_window?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_PARAMS = "/axelar.tss.v1beta1.Params";
/**
 * JSON serialization of `axelar.tss.v1beta1.Params` - the parameter set for this module
 */
export type AxelarTssParams = {
    key_requirements?: AxelarTssExportedKeyRequirement[] | undefined;
    suspend_duration_in_blocks?: CwInt64 | undefined;
    heartbeat_period_in_blocks?: CwInt64 | undefined;
    max_missed_blocks_per_window?: AxelarUtilsThreshold | undefined;
    unbonding_locking_key_rotation_count?: CwInt64 | undefined;
    external_multisig_threshold?: AxelarUtilsThreshold | undefined;
    max_sign_queue_size?: CwInt64 | undefined;
    max_simultaneous_sign_shares?: CwInt64 | undefined;
    tss_signed_blocks_window?: CwInt64 | undefined;
};
