import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAxelarTssExportedKeyRequirement } from '../exported/v1beta1/types.js';
import { decodeAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
/**
 * Encodes a `Params` protobuf message: the parameter set for this module
 * @param a_key_requirements - `key_requirements`: KeyRequirements defines the requirement for each key role
 * @param sg_suspend_duration_in_blocks - `suspend_duration_in_blocks`: SuspendDurationInBlocks defines the number of blocks a validator is disallowed to participate in any TSS ceremony after committing a malicious behaviour during signing
 * @param sg_heartbeat_period_in_blocks - `heartbeat_period_in_blocks`: HeartBeatPeriodInBlocks defines the time period in blocks for tss to emit the event asking validators to send their heartbeats
 * @param g_max_missed_blocks_per_window - `max_missed_blocks_per_window`:
 * @param sg_unbonding_locking_key_rotation_count - `unbonding_locking_key_rotation_count`:
 * @param g_external_multisig_threshold - `external_multisig_threshold`:
 * @param sg_max_sign_queue_size - `max_sign_queue_size`:
 * @param sg_max_simultaneous_sign_shares - `max_simultaneous_sign_shares`:
 * @param sg_tss_signed_blocks_window - `tss_signed_blocks_window`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssParams = (a_key_requirements, sg_suspend_duration_in_blocks, sg_heartbeat_period_in_blocks, atu8_max_missed_blocks_per_window, sg_unbonding_locking_key_rotation_count, atu8_external_multisig_threshold, sg_max_sign_queue_size, sg_max_simultaneous_sign_shares, sg_tss_signed_blocks_window) => Protobuf() // ...
    .B(a_key_requirements) // KeyRequirement[] key_requirements = 1
    .g(sg_suspend_duration_in_blocks) // int32 suspend_duration_in_blocks = 2
    .g(sg_heartbeat_period_in_blocks) // int32 heartbeat_period_in_blocks = 3
    .b(atu8_max_missed_blocks_per_window) // Threshold max_missed_blocks_per_window = 4
    .g(sg_unbonding_locking_key_rotation_count) // int32 unbonding_locking_key_rotation_count = 5
    .b(atu8_external_multisig_threshold) // Threshold external_multisig_threshold = 6
    .g(sg_max_sign_queue_size) // int32 max_sign_queue_size = 7
    .g(sg_max_simultaneous_sign_shares) // int32 max_simultaneous_sign_shares = 8
    .g(sg_tss_signed_blocks_window) // int32 tss_signed_blocks_window = 9
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssParams}
 */
export const decodeAxelarTssParams = (atu8_payload) => decode_protobuf(atu8_payload, [0, 3, 3, 1, 3, 1, 3, 3, 3], [decodeAxelarTssExportedKeyRequirement, 0, 0, decodeAxelarUtilsThreshold, 0, decodeAxelarUtilsThreshold]);
/**
 * Destructures the fields of a {@link AxelarTssParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_requirements - KeyRequirements defines the requirement for each key role
 *   - 1: suspend_duration_in_blocks - SuspendDurationInBlocks defines the number of blocks a validator is disallowed to participate in any TSS ceremony after committing a malicious behaviour during signing
 *   - 2: heartbeat_period_in_blocks - HeartBeatPeriodInBlocks defines the time period in blocks for tss to emit the event asking validators to send their heartbeats
 *   - 3: max_missed_blocks_per_window -
 *   - 4: unbonding_locking_key_rotation_count -
 *   - 5: external_multisig_threshold -
 *   - 6: max_sign_queue_size -
 *   - 7: max_simultaneous_sign_shares -
 *   - 8: tss_signed_blocks_window -
 */
export const destructAxelarTssParams = (g_struct) => [g_struct.key_requirements, g_struct.suspend_duration_in_blocks, g_struct.heartbeat_period_in_blocks, g_struct.max_missed_blocks_per_window, g_struct.unbonding_locking_key_rotation_count, g_struct.external_multisig_threshold, g_struct.max_sign_queue_size, g_struct.max_simultaneous_sign_shares, g_struct.tss_signed_blocks_window];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_PARAMS = '/axelar.tss.v1beta1.Params';
//# sourceMappingURL=params.js.map