import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { ProtoEnumAxelarTssExportedKeyRole, JsonEnumAxelarTssExportedKeyRole, ProtoEnumAxelarTssExportedKeyType, JsonEnumAxelarTssExportedKeyType } from '../exported/v1beta1/types.js';
export type EncodedAxelarTssKeygenVoteData = Encoded<'/axelar.tss.v1beta1.KeygenVoteData'>;
export type EncodedAxelarTssKeyInfo = Encoded<'/axelar.tss.v1beta1.KeyInfo'>;
export type EncodedAxelarTssMultisigInfo = Encoded<'/axelar.tss.v1beta1.MultisigInfo'>;
export type EncodedAxelarTssKeyRecoveryInfo = Encoded<'/axelar.tss.v1beta1.KeyRecoveryInfo'>;
export type EncodedAxelarTssExternalKeys = Encoded<'/axelar.tss.v1beta1.ExternalKeys'>;
export type EncodedAxelarTssValidatorStatus = Encoded<'/axelar.tss.v1beta1.ValidatorStatus'>;
export type EncodedAxelarTssMultisigInfoInfo = Encoded<'/axelar.tss.v1beta1.MultisigInfo.Info'>;
export type EncodedAxelarTssKeyRecoveryInfoPrivateEntry = Encoded<'/axelar.tss.v1beta1.KeyRecoveryInfo.PrivateEntry'>;
/**
 * Encodes a `KeygenVoteData` protobuf message:
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_group_recovery_info - `group_recovery_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssKeygenVoteData: (atu8_pub_key?: Opt<Uint8Array>, atu8_group_recovery_info?: Opt<Uint8Array>) => EncodedAxelarTssKeygenVoteData;
/**
 * Encodes a `KeyInfo` protobuf message: holds information about a key
 * @param si_key - `key_id`:
 * @param xc_key_role - `key_role`:
 * @param xc_key_type - `key_type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssKeyInfo: (si_key?: Opt<string>, xc_key_role?: Opt<ProtoEnumAxelarTssExportedKeyRole>, xc_key_type?: Opt<ProtoEnumAxelarTssExportedKeyType>) => EncodedAxelarTssKeyInfo;
/**
 * Encodes a `MultisigInfo` protobuf message:
 * @param s_id - `id`:
 * @param sg_timeout - `timeout`:
 * @param sg_target_num - `target_num`:
 * @param a_infos - `infos`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssMultisigInfo: (s_id?: Opt<string>, sg_timeout?: Opt<WeakInt64Str>, sg_target_num?: Opt<WeakInt64Str>, a_infos?: Opt<Encoded<'/axelar.tss.v1beta1.MultisigInfo.Info'>[]>) => EncodedAxelarTssMultisigInfo;
/**
 * Encodes a `KeyRecoveryInfo` protobuf message:
 * @param si_key - `key_id`:
 * @param atu8_public - `public`:
 * @param a_privates - `private`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssKeyRecoveryInfo: (si_key?: Opt<string>, atu8_public?: Opt<Uint8Array>, a_privates?: Opt<Encoded<'/axelar.tss.v1beta1.KeyRecoveryInfo.PrivateEntry'>[]>) => EncodedAxelarTssKeyRecoveryInfo;
/**
 * Encodes a `ExternalKeys` protobuf message:
 * @param s_chain - `chain`:
 * @param a_key_ids - `key_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssExternalKeys: (s_chain?: Opt<string>, a_key_ids?: Opt<string[]>) => EncodedAxelarTssExternalKeys;
/**
 * Encodes a `ValidatorStatus` protobuf message:
 * @param atu8_validator - `validator`:
 * @param sg_suspended_until - `suspended_until`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssValidatorStatus: (atu8_validator?: Opt<Uint8Array>, sg_suspended_until?: Opt<WeakUint64Str>) => EncodedAxelarTssValidatorStatus;
/**
 * Encodes a `Info` protobuf message:
 * @param atu8_participant - `participant`:
 * @param a_datas - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssMultisigInfoInfo: (atu8_participant?: Opt<Uint8Array>, a_datas?: Opt<Uint8Array[]>) => EncodedAxelarTssMultisigInfoInfo;
/**
 * Encodes a `PrivateEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssKeyRecoveryInfoPrivateEntry: (s_key?: Opt<string>, atu8_value?: Opt<Uint8Array>) => EncodedAxelarTssKeyRecoveryInfoPrivateEntry;
/**
 * A decoded protobuf KeygenVoteData message
 *
 * Tuple where:
 *   - 0: pub_key -
 *   - 1: group_recovery_info -
 */
export type DecodedAxelarTssKeygenVoteData = [
    atu8_pub_key?: Uint8Array,
    atu8_group_recovery_info?: Uint8Array
];
/**
 * Decodes a protobuf KeygenVoteData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeygenVoteData}
 */
export declare const decodeAxelarTssKeygenVoteData: (atu8_payload: Uint8Array) => DecodedAxelarTssKeygenVoteData;
/**
 * A decoded protobuf KeyInfo message
 *
 * Tuple where:
 *   - 0: key_id -
 *   - 1: key_role -
 *   - 2: key_type -
 */
export type DecodedAxelarTssKeyInfo = [
    si_key?: string,
    xc_key_role?: ProtoEnumAxelarTssExportedKeyRole,
    xc_key_type?: ProtoEnumAxelarTssExportedKeyType
];
/**
 * Decodes a protobuf KeyInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeyInfo}
 */
export declare const decodeAxelarTssKeyInfo: (atu8_payload: Uint8Array) => DecodedAxelarTssKeyInfo;
/**
 * A decoded protobuf MultisigInfo message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: timeout -
 *   - 2: target_num -
 *   - 3: infos -
 */
export type DecodedAxelarTssMultisigInfo = [
    s_id?: string,
    sg_timeout?: CwInt64,
    sg_target_num?: CwInt64,
    a_infos?: DecodedAxelarTssMultisigInfoInfo[]
];
/**
 * Decodes a protobuf MultisigInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssMultisigInfo}
 */
export declare const decodeAxelarTssMultisigInfo: (atu8_payload: Uint8Array) => DecodedAxelarTssMultisigInfo;
/**
 * A decoded protobuf KeyRecoveryInfo message
 *
 * Tuple where:
 *   - 0: key_id -
 *   - 1: public -
 *   - 2: private -
 */
export type DecodedAxelarTssKeyRecoveryInfo = [
    si_key?: string,
    atu8_public?: Uint8Array,
    a_private?: DecodedAxelarTssKeyRecoveryInfoPrivateEntry[]
];
/**
 * Decodes a protobuf KeyRecoveryInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeyRecoveryInfo}
 */
export declare const decodeAxelarTssKeyRecoveryInfo: (atu8_payload: Uint8Array) => DecodedAxelarTssKeyRecoveryInfo;
/**
 * A decoded protobuf ExternalKeys message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: key_ids -
 */
export type DecodedAxelarTssExternalKeys = [
    s_chain?: string,
    a_key_ids?: string[]
];
/**
 * Decodes a protobuf ExternalKeys message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssExternalKeys}
 */
export declare const decodeAxelarTssExternalKeys: (atu8_payload: Uint8Array) => DecodedAxelarTssExternalKeys;
/**
 * A decoded protobuf ValidatorStatus message
 *
 * Tuple where:
 *   - 0: validator -
 *   - 1: suspended_until -
 */
export type DecodedAxelarTssValidatorStatus = [
    atu8_validator?: Uint8Array,
    sg_suspended_until?: CwUint64
];
/**
 * Decodes a protobuf ValidatorStatus message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssValidatorStatus}
 */
export declare const decodeAxelarTssValidatorStatus: (atu8_payload: Uint8Array) => DecodedAxelarTssValidatorStatus;
/**
 * A decoded protobuf Info message
 *
 * Tuple where:
 *   - 0: participant -
 *   - 1: data -
 */
export type DecodedAxelarTssMultisigInfoInfo = [
    atu8_participant?: Uint8Array,
    a_datas?: Uint8Array[]
];
/**
 * Decodes a protobuf Info message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssMultisigInfoInfo}
 */
export declare const decodeAxelarTssMultisigInfoInfo: (atu8_payload: Uint8Array) => DecodedAxelarTssMultisigInfoInfo;
/**
 * A decoded protobuf PrivateEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarTssKeyRecoveryInfoPrivateEntry = [
    s_key?: string,
    atu8_value?: Uint8Array
];
/**
 * Decodes a protobuf PrivateEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeyRecoveryInfoPrivateEntry}
 */
export declare const decodeAxelarTssKeyRecoveryInfoPrivateEntry: (atu8_payload: Uint8Array) => DecodedAxelarTssKeyRecoveryInfoPrivateEntry;
/**
 * Destructures the fields of a {@link AxelarTssKeyInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: key_role -
 *   - 2: key_type -
 */
export declare const destructAxelarTssKeyInfo: (g_struct: AxelarTssKeyInfo) => [key_id?: string, key_role?: JsonEnumAxelarTssExportedKeyRole, key_type?: JsonEnumAxelarTssExportedKeyType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_KEY_INFO = "/axelar.tss.v1beta1.KeyInfo";
/**
 * JSON serialization of `axelar.tss.v1beta1.KeyInfo` - holds information about a key
 */
export type AxelarTssKeyInfo = {
    key_id?: string | undefined;
    key_role?: JsonEnumAxelarTssExportedKeyRole | undefined;
    key_type?: JsonEnumAxelarTssExportedKeyType | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssKeygenVoteData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: group_recovery_info -
 */
export declare const destructAxelarTssKeygenVoteData: (g_struct: AxelarTssKeygenVoteData) => [pub_key?: Uint8Array, group_recovery_info?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_KEYGEN_VOTE_DATA = "/axelar.tss.v1beta1.KeygenVoteData";
/**
 * JSON serialization of `axelar.tss.v1beta1.KeygenVoteData` -
 */
export type AxelarTssKeygenVoteData = {
    pub_key?: CwBase64 | undefined;
    group_recovery_info?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssMultisigInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: timeout -
 *   - 2: target_num -
 *   - 3: infos -
 */
export declare const destructAxelarTssMultisigInfo: (g_struct: AxelarTssMultisigInfo) => [id?: string, timeout?: CwInt64, target_num?: CwInt64, infos?: AxelarTssMultisigInfoInfo[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_MULTISIG_INFO = "/axelar.tss.v1beta1.MultisigInfo";
/**
 * JSON serialization of `axelar.tss.v1beta1.MultisigInfo` -
 */
export type AxelarTssMultisigInfo = {
    id?: string | undefined;
    timeout?: CwInt64 | undefined;
    target_num?: CwInt64 | undefined;
    infos?: AxelarTssMultisigInfoInfo[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssMultisigInfoInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: participant -
 *   - 1: data -
 */
export declare const destructAxelarTssMultisigInfoInfo: (g_struct: AxelarTssMultisigInfoInfo) => [participant?: Uint8Array, data?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_MULTISIG_INFO_INFO = "/axelar.tss.v1beta1.MultisigInfo.Info";
/**
 * JSON serialization of `axelar.tss.v1beta1.MultisigInfo.Info` -
 */
export type AxelarTssMultisigInfoInfo = {
    participant?: CwBase64 | undefined;
    data?: CwBase64[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssKeyRecoveryInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: public -
 *   - 2: private -
 */
export declare const destructAxelarTssKeyRecoveryInfo: (g_struct: AxelarTssKeyRecoveryInfo) => [key_id?: string, public_?: Uint8Array, private_?: AxelarTssKeyRecoveryInfoPrivateEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_KEY_RECOVERY_INFO = "/axelar.tss.v1beta1.KeyRecoveryInfo";
/**
 * JSON serialization of `axelar.tss.v1beta1.KeyRecoveryInfo` -
 */
export type AxelarTssKeyRecoveryInfo = {
    key_id?: string | undefined;
    public?: CwBase64 | undefined;
    private?: AxelarTssKeyRecoveryInfoPrivateEntry[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssKeyRecoveryInfoPrivateEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarTssKeyRecoveryInfoPrivateEntry: (g_struct: AxelarTssKeyRecoveryInfoPrivateEntry) => [key?: string, value?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_KEY_RECOVERY_INFO_PRIVATE_ENTRY = "/axelar.tss.v1beta1.KeyRecoveryInfo.PrivateEntry";
/**
 * JSON serialization of `axelar.tss.v1beta1.KeyRecoveryInfo.PrivateEntry` -
 */
export type AxelarTssKeyRecoveryInfoPrivateEntry = {
    key?: string | undefined;
    value?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssExternalKeys} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: key_ids -
 */
export declare const destructAxelarTssExternalKeys: (g_struct: AxelarTssExternalKeys) => [chain?: string, key_ids?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_EXTERNAL_KEYS = "/axelar.tss.v1beta1.ExternalKeys";
/**
 * JSON serialization of `axelar.tss.v1beta1.ExternalKeys` -
 */
export type AxelarTssExternalKeys = {
    chain?: string | undefined;
    key_ids?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssValidatorStatus} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 *   - 1: suspended_until -
 */
export declare const destructAxelarTssValidatorStatus: (g_struct: AxelarTssValidatorStatus) => [validator?: Uint8Array, suspended_until?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_VALIDATOR_STATUS = "/axelar.tss.v1beta1.ValidatorStatus";
/**
 * JSON serialization of `axelar.tss.v1beta1.ValidatorStatus` -
 */
export type AxelarTssValidatorStatus = {
    validator?: CwBase64 | undefined;
    suspended_until?: CwUint64 | undefined;
};
