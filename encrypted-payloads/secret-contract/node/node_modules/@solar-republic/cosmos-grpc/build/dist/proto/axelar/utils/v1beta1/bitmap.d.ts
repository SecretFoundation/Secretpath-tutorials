import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAxelarUtilsBitmap = Encoded<'/axelar.utils.v1beta1.Bitmap'>;
export type EncodedAxelarUtilsCircularBuffer = Encoded<'/axelar.utils.v1beta1.CircularBuffer'>;
/**
 * Encodes a `Bitmap` protobuf message:
 * @param g_true_count_cache - `true_count_cache`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarUtilsBitmap: (atu8_true_count_cache?: Opt<Encoded<'/axelar.utils.v1beta1.CircularBuffer'>>) => EncodedAxelarUtilsBitmap;
/**
 * Encodes a `CircularBuffer` protobuf message:
 * @param a_cumulative_values - `cumulative_value`:
 * @param n_index - `index`:
 * @param n_max_size - `max_size`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarUtilsCircularBuffer: (a_cumulative_values?: Opt<WeakUint64Str[]>, n_index?: Opt<number>, n_max_size?: Opt<number>) => EncodedAxelarUtilsCircularBuffer;
/**
 * A decoded protobuf Bitmap message
 *
 * Alias for: true_count_cache -
 */
export type DecodedAxelarUtilsBitmap = [
    w_0?: undefined,
    a_true_count_cache?: DecodedAxelarUtilsCircularBuffer
];
/**
 * Decodes a protobuf Bitmap message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarUtilsBitmap}
 */
export declare const decodeAxelarUtilsBitmap: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarUtilsBitmap;
/**
 * A decoded protobuf CircularBuffer message
 *
 * Tuple where:
 *   - 0: cumulative_value -
 *   - 1: index -
 *   - 2: max_size -
 */
export type DecodedAxelarUtilsCircularBuffer = [
    a_cumulative_values?: CwUint64[],
    n_index?: number,
    n_max_size?: number
];
/**
 * Decodes a protobuf CircularBuffer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarUtilsCircularBuffer}
 */
export declare const decodeAxelarUtilsCircularBuffer: (atu8_payload: Uint8Array) => DecodedAxelarUtilsCircularBuffer;
/**
 * Destructures the fields of a {@link AxelarUtilsBitmap} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: true_count_cache -
 */
export declare const destructAxelarUtilsBitmap: (g_struct: AxelarUtilsBitmap) => [EMPTY?: void, true_count_cache?: AxelarUtilsCircularBuffer];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_UTILS_BITMAP = "/axelar.utils.v1beta1.Bitmap";
/**
 * JSON serialization of `axelar.utils.v1beta1.Bitmap` -
 */
export type AxelarUtilsBitmap = {
    true_count_cache?: AxelarUtilsCircularBuffer | undefined;
};
/**
 * Destructures the fields of a {@link AxelarUtilsCircularBuffer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cumulative_value -
 *   - 1: index -
 *   - 2: max_size -
 */
export declare const destructAxelarUtilsCircularBuffer: (g_struct: AxelarUtilsCircularBuffer) => [cumulative_value?: CwUint64[], index?: number, max_size?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_UTILS_CIRCULAR_BUFFER = "/axelar.utils.v1beta1.CircularBuffer";
/**
 * JSON serialization of `axelar.utils.v1beta1.CircularBuffer` -
 */
export type AxelarUtilsCircularBuffer = {
    cumulative_value?: CwUint64[] | undefined;
    index?: number | undefined;
    max_size?: number | undefined;
};
