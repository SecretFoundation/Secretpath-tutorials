import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Bitmap` protobuf message:
 * @param g_true_count_cache - `true_count_cache`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarUtilsBitmap = (atu8_true_count_cache) => Protobuf() // ...
    .b(atu8_true_count_cache, 2) // CircularBuffer true_count_cache = 2
    .o;
/**
 * Encodes a `CircularBuffer` protobuf message:
 * @param a_cumulative_values - `cumulative_value`:
 * @param n_index - `index`:
 * @param n_max_size - `max_size`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarUtilsCircularBuffer = (a_cumulative_values, n_index, n_max_size) => Protobuf() // ...
    .G(a_cumulative_values) // uint64[] cumulative_value = 1
    .v(n_index) // int32 index = 2
    .v(n_max_size) // int32 max_size = 3
    .o;
/**
 * Decodes a protobuf Bitmap message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarUtilsBitmap}
 */
export const decodeAxelarUtilsBitmap = ((atu8_payload, [, a_true_count_cache] = decode_protobuf(atu8_payload, [0, 1], [0, decodeAxelarUtilsCircularBuffer])) => [__UNDEFINED, a_true_count_cache]);
/**
 * Decodes a protobuf CircularBuffer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarUtilsCircularBuffer}
 */
export const decodeAxelarUtilsCircularBuffer = (atu8_payload) => decode_protobuf(atu8_payload, [2, 1, 1]);
/**
 * Destructures the fields of a {@link AxelarUtilsBitmap} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: true_count_cache -
 */
export const destructAxelarUtilsBitmap = (g_struct) => [__UNDEFINED, g_struct.true_count_cache];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_UTILS_BITMAP = '/axelar.utils.v1beta1.Bitmap';
/**
 * Destructures the fields of a {@link AxelarUtilsCircularBuffer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cumulative_value -
 *   - 1: index -
 *   - 2: max_size -
 */
export const destructAxelarUtilsCircularBuffer = (g_struct) => [g_struct.cumulative_value, g_struct.index, g_struct.max_size];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_UTILS_CIRCULAR_BUFFER = '/axelar.utils.v1beta1.CircularBuffer';
//# sourceMappingURL=bitmap.js.map