import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `QueueState` protobuf message:
 * @param a_items - `items`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarUtilsQueueState = (a_items) => Protobuf() // ...
    .B(a_items) // ItemsEntry[] items = 1
    .o;
/**
 * Encodes a `ItemsEntry` protobuf message:
 * @param s_key - `key`:
 * @param g_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarUtilsQueueStateItemsEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // Item value = 2
    .o;
/**
 * Encodes a `Item` protobuf message:
 * @param atu8_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarUtilsQueueStateItem = (atu8_key, atu8_value) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .b(atu8_value) // bytes value = 2
    .o;
/**
 * Decodes a protobuf QueueState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarUtilsQueueState}
 */
export const decodeAxelarUtilsQueueState = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeAxelarUtilsQueueStateItemsEntry]);
/**
 * Decodes a protobuf ItemsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarUtilsQueueStateItemsEntry}
 */
export const decodeAxelarUtilsQueueStateItemsEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeAxelarUtilsQueueStateItem]);
/**
 * Decodes a protobuf Item message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarUtilsQueueStateItem}
 */
export const decodeAxelarUtilsQueueStateItem = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link AxelarUtilsQueueState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: items -
 */
export const destructAxelarUtilsQueueState = (g_struct) => [g_struct.items];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_UTILS_QUEUE_STATE = '/axelar.utils.v1beta1.QueueState';
/**
 * Destructures the fields of a {@link AxelarUtilsQueueStateItemsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarUtilsQueueStateItemsEntry = (g_struct) => [g_struct.key, g_struct.value];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_UTILS_QUEUE_STATE_ITEMS_ENTRY = '/axelar.utils.v1beta1.QueueState.ItemsEntry';
/**
 * Destructures the fields of a {@link AxelarUtilsQueueStateItem} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarUtilsQueueStateItem = (g_struct) => [safe_base64_to_bytes(g_struct.key), safe_base64_to_bytes(g_struct.value)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_UTILS_QUEUE_STATE_ITEM = '/axelar.utils.v1beta1.QueueState.Item';
//# sourceMappingURL=queuer.js.map