import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarVoteExportedPollMetadata, DecodedAxelarVoteExportedPollMetadata } from '../exported/v1beta1/types.js';
import type { AxelarVoteParams, DecodedAxelarVoteParams } from './params.js';
export type EncodedAxelarVoteGenesisState = Encoded<'/axelar.vote.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message:
 * @param g_params - `params`:
 * @param a_poll_metadatas - `poll_metadatas`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteGenesisState: (atu8_params?: Opt<Encoded<'/axelar.vote.v1beta1.Params'>>, a_poll_metadatas?: Opt<Encoded<'/axelar.vote.exported.v1beta1.PollMetadata'>[]>) => EncodedAxelarVoteGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params -
 *   - 1: poll_metadatas -
 */
export type DecodedAxelarVoteGenesisState = [
    a_params?: DecodedAxelarVoteParams,
    a_poll_metadatas?: DecodedAxelarVoteExportedPollMetadata[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteGenesisState}
 */
export declare const decodeAxelarVoteGenesisState: (atu8_payload: Uint8Array) => DecodedAxelarVoteGenesisState;
/**
 * Destructures the fields of a {@link AxelarVoteGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: poll_metadatas -
 */
export declare const destructAxelarVoteGenesisState: (g_struct: AxelarVoteGenesisState) => [params?: AxelarVoteParams, poll_metadatas?: AxelarVoteExportedPollMetadata[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_GENESIS_STATE = "/axelar.vote.v1beta1.GenesisState";
/**
 * JSON serialization of `axelar.vote.v1beta1.GenesisState` -
 */
export type AxelarVoteGenesisState = {
    params?: AxelarVoteParams | undefined;
    poll_metadatas?: AxelarVoteExportedPollMetadata[] | undefined;
};
