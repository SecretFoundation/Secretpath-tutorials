import type { WeakInt64Str, CwInt64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
export type EncodedAxelarVoteParams = Encoded<'/axelar.vote.v1beta1.Params'>;
/**
 * Encodes a `Params` protobuf message: represent the genesis parameters for the module
 * @param g_default_voting_threshold - `default_voting_threshold`:
 * @param sg_end_blocker_limit - `end_blocker_limit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteParams: (atu8_default_voting_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_end_blocker_limit?: Opt<WeakInt64Str>) => EncodedAxelarVoteParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: default_voting_threshold -
 *   - 1: end_blocker_limit -
 */
export type DecodedAxelarVoteParams = [
    a_default_voting_threshold?: DecodedAxelarUtilsThreshold,
    sg_end_blocker_limit?: CwInt64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteParams}
 */
export declare const decodeAxelarVoteParams: (atu8_payload: Uint8Array) => DecodedAxelarVoteParams;
/**
 * Destructures the fields of a {@link AxelarVoteParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: default_voting_threshold -
 *   - 1: end_blocker_limit -
 */
export declare const destructAxelarVoteParams: (g_struct: AxelarVoteParams) => [default_voting_threshold?: AxelarUtilsThreshold, end_blocker_limit?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_PARAMS = "/axelar.vote.v1beta1.Params";
/**
 * JSON serialization of `axelar.vote.v1beta1.Params` - represent the genesis parameters for the module
 */
export type AxelarVoteParams = {
    default_voting_threshold?: AxelarUtilsThreshold | undefined;
    end_blocker_limit?: CwInt64 | undefined;
};
