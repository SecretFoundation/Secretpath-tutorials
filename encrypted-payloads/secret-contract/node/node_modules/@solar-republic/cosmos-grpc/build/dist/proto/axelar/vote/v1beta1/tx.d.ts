import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedAxelarVoteVoteRequest = Encoded<'/axelar.vote.v1beta1.VoteRequest'>;
export type EncodedAxelarVoteVoteResponse = Encoded<'/axelar.vote.v1beta1.VoteResponse'>;
/**
 * Encodes a `VoteRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_poll_id - `poll_id`:
 * @param atu8_vote - `vote`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteVoteRequest: (sa_sender?: Opt<WeakAccountAddr>, sg_poll_id?: Opt<WeakUint64Str>, atu8_vote?: Opt<Encoded<'github.com/cosmos/codec/ProtoMarshaler'>>) => EncodedAxelarVoteVoteRequest;
/**
 * Encodes a `VoteResponse` protobuf message:
 * @param s_log - `log`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteVoteResponse: (s_log?: Opt<string>) => EncodedAxelarVoteVoteResponse;
/**
 * A decoded protobuf VoteRequest message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 3: poll_id -
 *   - 4: vote -
 */
export type DecodedAxelarVoteVoteRequest = [
    sa_sender?: CwAccountAddr,
    w_0?: undefined,
    w_1?: undefined,
    sg_poll_id?: CwUint64,
    a_vote?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf VoteRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarVoteVoteRequest}
 */
export declare const decodeAxelarVoteVoteRequest: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarVoteVoteRequest;
/**
 * A decoded protobuf Vote message
 *
 * Alias for: log -
 */
export type DecodedAxelarVoteVoteResponse = [
    s_log?: string
];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteVoteResponse}
 */
export declare const decodeAxelarVoteVoteResponse: (atu8_payload: Uint8Array) => DecodedAxelarVoteVoteResponse;
/**
 * Destructures the fields of a {@link AxelarVoteVoteRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 3: poll_id -
 *   - 4: vote -
 */
export declare const destructAxelarVoteVoteRequest: (g_struct: AxelarVoteVoteRequest) => [sender?: CwBase64, EMPTY?: void, EMPTY?: void, poll_id?: CwUint64, vote?: JsonAny<string>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_VOTE_REQUEST = "/axelar.vote.v1beta1.VoteRequest";
/**
 * JSON serialization of `axelar.vote.v1beta1.VoteRequest` -
 */
export type AxelarVoteVoteRequest = {
    sender?: CwBase64 | undefined;
    poll_id?: CwUint64 | undefined;
    vote?: JsonAny<string> | undefined;
};
/**
 * Destructures the fields of a {@link AxelarVoteVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: log -
 */
export declare const destructAxelarVoteVoteResponse: (g_struct: AxelarVoteVoteResponse) => [log?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_VOTE_RESPONSE = "/axelar.vote.v1beta1.VoteResponse";
/**
 * JSON serialization of `axelar.vote.v1beta1.VoteResponse` -
 */
export type AxelarVoteVoteResponse = {
    log?: string | undefined;
};
