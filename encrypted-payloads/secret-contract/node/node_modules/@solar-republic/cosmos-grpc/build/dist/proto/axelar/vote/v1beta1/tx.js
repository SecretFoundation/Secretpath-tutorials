import { __UNDEFINED } from '@blake.regalia/belt';
import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `VoteRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_poll_id - `poll_id`:
 * @param atu8_vote - `vote`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarVoteVoteRequest = (sa_sender, sg_poll_id, atu8_vote) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .g(sg_poll_id, 4) // uint64 poll_id = 4
    .b(atu8_vote, 5) // Any vote = 5
    .o;
/**
 * Encodes a `VoteResponse` protobuf message:
 * @param s_log - `log`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarVoteVoteResponse = (s_log) => Protobuf() // ...
    .s(s_log) // string log = 1
    .o;
/**
 * Decodes a protobuf VoteRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarVoteVoteRequest}
 */
export const decodeAxelarVoteVoteRequest = ((atu8_payload, [sa_sender, , , sg_poll_id, a_vote] = decode_protobuf(atu8_payload, [1, 0, 0, 3, 1], [0, 0, 0, 0, decodeGoogleProtobufAny])) => [sa_sender, __UNDEFINED, __UNDEFINED, sg_poll_id, a_vote]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteVoteResponse}
 */
export const decodeAxelarVoteVoteResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link AxelarVoteVoteRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 3: poll_id -
 *   - 4: vote -
 */
export const destructAxelarVoteVoteRequest = (g_struct) => [g_struct.sender, __UNDEFINED, __UNDEFINED, g_struct.poll_id, g_struct.vote];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_VOTE_VOTE_REQUEST = '/axelar.vote.v1beta1.VoteRequest';
/**
 * Destructures the fields of a {@link AxelarVoteVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: log -
 */
export const destructAxelarVoteVoteResponse = (g_struct) => [g_struct.log];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_VOTE_VOTE_RESPONSE = '/axelar.vote.v1beta1.VoteResponse';
//# sourceMappingURL=tx.js.map