import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedCosmosAuthModuleModule = Encoded<'/cosmos.auth.module.v1.Module'>;
export type EncodedCosmosAuthModuleModuleAccountPermission = Encoded<'/cosmos.auth.module.v1.ModuleAccountPermission'>;
/**
 * Encodes a `Module` protobuf message: the config object for the auth module.
 * @param s_bech32_prefix - `bech32_prefix`: the bech32 account prefix for the app.
 * @param a_module_account_permissions - `module_account_permissions`: module account permissions.
 * @param s_authority - `authority`: defines the custom module authority. If not set, defaults to the governance module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthModuleModule: (s_bech32_prefix?: Opt<string>, a_module_account_permissions?: Opt<Encoded<'/cosmos.auth.module.v1.ModuleAccountPermission'>[]>, s_authority?: Opt<string>) => EncodedCosmosAuthModuleModule;
/**
 * Encodes a `ModuleAccountPermission` protobuf message: represents permissions for a module account.
 * @param s_account - `account`: the name of the module.
 * @param a_permissions - `permissions`: the permissions this module has. Currently recognized values are minter, burner and staking.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthModuleModuleAccountPermission: (s_account?: Opt<string>, a_permissions?: Opt<string[]>) => EncodedCosmosAuthModuleModuleAccountPermission;
/**
 * A decoded protobuf Module message
 *
 * Tuple where:
 *   - 0: bech32_prefix - the bech32 account prefix for the app.
 *   - 1: module_account_permissions - module account permissions.
 *   - 2: authority - defines the custom module authority. If not set, defaults to the governance module.
 */
export type DecodedCosmosAuthModuleModule = [
    s_bech32_prefix?: string,
    a_module_account_permissions?: DecodedCosmosAuthModuleModuleAccountPermission[],
    s_authority?: string
];
/**
 * Decodes a protobuf Module message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleModule}
 */
export declare const decodeCosmosAuthModuleModule: (atu8_payload: Uint8Array) => DecodedCosmosAuthModuleModule;
/**
 * A decoded protobuf ModuleAccountPermission message
 *
 * Tuple where:
 *   - 0: account - the name of the module.
 *   - 1: permissions - the permissions this module has. Currently recognized values are minter, burner and staking.
 */
export type DecodedCosmosAuthModuleModuleAccountPermission = [
    s_account?: string,
    a_permissions?: string[]
];
/**
 * Decodes a protobuf ModuleAccountPermission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleModuleAccountPermission}
 */
export declare const decodeCosmosAuthModuleModuleAccountPermission: (atu8_payload: Uint8Array) => DecodedCosmosAuthModuleModuleAccountPermission;
/**
 * Destructures the fields of a {@link CosmosAuthModuleModule} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bech32_prefix - the bech32 account prefix for the app.
 *   - 1: module_account_permissions - module account permissions.
 *   - 2: authority - defines the custom module authority. If not set, defaults to the governance module.
 */
export declare const destructCosmosAuthModuleModule: (g_struct: CosmosAuthModuleModule) => [bech32_prefix?: string, module_account_permissions?: CosmosAuthModuleModuleAccountPermission[], authority?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_MODULE = "/cosmos.auth.module.v1.Module";
/**
 * JSON serialization of `cosmos.auth.module.v1.Module` - the config object for the auth module.
 */
export type CosmosAuthModuleModule = {
    bech32_prefix?: string | undefined;
    module_account_permissions?: CosmosAuthModuleModuleAccountPermission[] | undefined;
    authority?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAuthModuleModuleAccountPermission} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account - the name of the module.
 *   - 1: permissions - the permissions this module has. Currently recognized values are minter, burner and staking.
 */
export declare const destructCosmosAuthModuleModuleAccountPermission: (g_struct: CosmosAuthModuleModuleAccountPermission) => [account?: string, permissions?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_MODULE_ACCOUNT_PERMISSION = "/cosmos.auth.module.v1.ModuleAccountPermission";
/**
 * JSON serialization of `cosmos.auth.module.v1.ModuleAccountPermission` - represents permissions for a module account.
 */
export type CosmosAuthModuleModuleAccountPermission = {
    account?: string | undefined;
    permissions?: string[] | undefined;
};
