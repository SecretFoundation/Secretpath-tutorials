import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type AnyCosmosAuthBaseAccount = Encoded<'cosmos.auth.v1beta1.AccountI'>;
export type AnyCosmosAuthModuleAccount = Encoded<'cosmos.auth.v1beta1.ModuleAccountI'>;
export type EncodedCosmosAuthBaseAccount = Encoded<'/cosmos.auth.v1beta1.BaseAccount' | 'cosmos.auth.v1beta1.AccountI'>;
export type EncodedCosmosAuthModuleAccount = Encoded<'/cosmos.auth.v1beta1.ModuleAccount' | 'cosmos.auth.v1beta1.ModuleAccountI'>;
export type EncodedCosmosAuthModuleCredential = Encoded<'/cosmos.auth.v1beta1.ModuleCredential'>;
export type EncodedCosmosAuthParams = Encoded<'/cosmos.auth.v1beta1.Params'>;
/**
 * Encodes a `BaseAccount` protobuf message wrapped in the `Any` container: defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).
 * @param sa_address - `address`:
 * @param atu8_pub_key - `pub_key`:
 * @param sg_account_number - `account_number`:
 * @param sg_sequence - `sequence`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyBaseAccount: (sa_address?: Opt<WeakAccountAddr>, atu8_pub_key?: Opt<Uint8Array>, sg_account_number?: Opt<WeakUint64Str>, sg_sequence?: Opt<WeakUint64Str>) => AnyCosmosAuthBaseAccount;
/**
 * Encodes a `ModuleAccount` protobuf message wrapped in the `Any` container: defines an account for modules that holds coins on a pool.
 * @param g_base_account - `base_account`:
 * @param s_name - `name`:
 * @param a_permissions - `permissions`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyModuleAccount: (atu8_base_account?: Opt<Encoded<'/cosmos.auth.v1beta1.BaseAccount'>>, s_name?: Opt<string>, a_permissions?: Opt<string[]>) => AnyCosmosAuthModuleAccount;
/**
 * Encodes a `BaseAccount` protobuf message: defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).
 * @param sa_address - `address`:
 * @param atu8_pub_key - `pub_key`:
 * @param sg_account_number - `account_number`:
 * @param sg_sequence - `sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthBaseAccount: (sa_address?: Opt<WeakAccountAddr>, atu8_pub_key?: Opt<Uint8Array>, sg_account_number?: Opt<WeakUint64Str>, sg_sequence?: Opt<WeakUint64Str>) => EncodedCosmosAuthBaseAccount;
/**
 * Encodes a `ModuleAccount` protobuf message: defines an account for modules that holds coins on a pool.
 * @param g_base_account - `base_account`:
 * @param s_name - `name`:
 * @param a_permissions - `permissions`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthModuleAccount: (atu8_base_account?: Opt<Encoded<'/cosmos.auth.v1beta1.BaseAccount'>>, s_name?: Opt<string>, a_permissions?: Opt<string[]>) => EncodedCosmosAuthModuleAccount;
/**
 * Encodes a `ModuleCredential` protobuf message: represents a unclaimable pubkey for base accounts controlled by modules. Since: cosmos-sdk 0.47
 * @param s_module_name - `module_name`: the name of the module used for address derivation (passed into address.Module).
 * @param a_derivation_keys - `derivation_keys`: for deriving a module account address (passed into address.Module) adding more keys creates sub-account addresses (passed into address.Derive)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthModuleCredential: (s_module_name?: Opt<string>, a_derivation_keys?: Opt<Uint8Array[]>) => EncodedCosmosAuthModuleCredential;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the auth module.
 * @param sg_max_memo_characters - `max_memo_characters`:
 * @param sg_tx_sig_limit - `tx_sig_limit`:
 * @param sg_tx_size_cost_per_byte - `tx_size_cost_per_byte`:
 * @param sg_sig_verify_cost_ed25519 - `sig_verify_cost_ed25519`:
 * @param sg_sig_verify_cost_secp256k1 - `sig_verify_cost_secp256k1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthParams: (sg_max_memo_characters?: Opt<WeakUint64Str>, sg_tx_sig_limit?: Opt<WeakUint64Str>, sg_tx_size_cost_per_byte?: Opt<WeakUint64Str>, sg_sig_verify_cost_ed25519?: Opt<WeakUint64Str>, sg_sig_verify_cost_secp256k1?: Opt<WeakUint64Str>) => EncodedCosmosAuthParams;
/**
 * A decoded protobuf BaseAccount message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: pub_key -
 *   - 2: account_number -
 *   - 3: sequence -
 */
export type DecodedCosmosAuthBaseAccount = [
    sa_address?: CwAccountAddr,
    a_pub_key?: DecodedGoogleProtobufAny,
    sg_account_number?: CwUint64,
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf BaseAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthBaseAccount}
 */
export declare const decodeCosmosAuthBaseAccount: (atu8_payload: Uint8Array) => DecodedCosmosAuthBaseAccount;
/**
 * A decoded protobuf ModuleAccount message
 *
 * Tuple where:
 *   - 0: base_account -
 *   - 1: name -
 *   - 2: permissions -
 */
export type DecodedCosmosAuthModuleAccount = [
    a_base_account?: DecodedCosmosAuthBaseAccount,
    s_name?: string,
    a_permissions?: string[]
];
/**
 * Decodes a protobuf ModuleAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleAccount}
 */
export declare const decodeCosmosAuthModuleAccount: (atu8_payload: Uint8Array) => DecodedCosmosAuthModuleAccount;
/**
 * A decoded protobuf ModuleCredential message
 *
 * Tuple where:
 *   - 0: module_name - the name of the module used for address derivation (passed into address.Module).
 *   - 1: derivation_keys - for deriving a module account address (passed into address.Module) adding more keys creates sub-account addresses (passed into address.Derive)
 */
export type DecodedCosmosAuthModuleCredential = [
    s_module_name?: string,
    a_derivation_keys?: Uint8Array[]
];
/**
 * Decodes a protobuf ModuleCredential message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleCredential}
 */
export declare const decodeCosmosAuthModuleCredential: (atu8_payload: Uint8Array) => DecodedCosmosAuthModuleCredential;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: max_memo_characters -
 *   - 1: tx_sig_limit -
 *   - 2: tx_size_cost_per_byte -
 *   - 3: sig_verify_cost_ed25519 -
 *   - 4: sig_verify_cost_secp256k1 -
 */
export type DecodedCosmosAuthParams = [
    sg_max_memo_characters?: CwUint64,
    sg_tx_sig_limit?: CwUint64,
    sg_tx_size_cost_per_byte?: CwUint64,
    sg_sig_verify_cost_ed25519?: CwUint64,
    sg_sig_verify_cost_secp256k1?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthParams}
 */
export declare const decodeCosmosAuthParams: (atu8_payload: Uint8Array) => DecodedCosmosAuthParams;
/**
 * Destructures the fields of a {@link CosmosAuthParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_memo_characters -
 *   - 1: tx_sig_limit -
 *   - 2: tx_size_cost_per_byte -
 *   - 3: sig_verify_cost_ed25519 -
 *   - 4: sig_verify_cost_secp256k1 -
 */
export declare const destructCosmosAuthParams: (g_struct: CosmosAuthParams) => [max_memo_characters?: CwUint64, tx_sig_limit?: CwUint64, tx_size_cost_per_byte?: CwUint64, sig_verify_cost_ed25519?: CwUint64, sig_verify_cost_secp256k1?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTH_PARAMS = "/cosmos.auth.v1beta1.Params";
/**
 * JSON serialization of `cosmos.auth.v1beta1.Params` - defines the parameters for the auth module.
 */
export type CosmosAuthParams = {
    max_memo_characters?: CwUint64 | undefined;
    tx_sig_limit?: CwUint64 | undefined;
    tx_size_cost_per_byte?: CwUint64 | undefined;
    sig_verify_cost_ed25519?: CwUint64 | undefined;
    sig_verify_cost_secp256k1?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAuthBaseAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: pub_key -
 *   - 2: account_number -
 *   - 3: sequence -
 */
export declare const destructCosmosAuthBaseAccount: (g_struct: CosmosAuthBaseAccount) => [address?: CwAccountAddr, pub_key?: JsonAny, account_number?: CwUint64, sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTH_BASE_ACCOUNT = "/cosmos.auth.v1beta1.BaseAccount";
/**
 * JSON serialization of `cosmos.auth.v1beta1.BaseAccount` - defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).
 */
export type CosmosAuthBaseAccount = {
    address?: CwAccountAddr | undefined;
    pub_key?: JsonAny | undefined;
    account_number?: CwUint64 | undefined;
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAuthModuleAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_account -
 *   - 1: name -
 *   - 2: permissions -
 */
export declare const destructCosmosAuthModuleAccount: (g_struct: CosmosAuthModuleAccount) => [base_account?: CosmosAuthBaseAccount, name?: string, permissions?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_ACCOUNT = "/cosmos.auth.v1beta1.ModuleAccount";
/**
 * JSON serialization of `cosmos.auth.v1beta1.ModuleAccount` - defines an account for modules that holds coins on a pool.
 */
export type CosmosAuthModuleAccount = {
    base_account?: CosmosAuthBaseAccount | undefined;
    name?: string | undefined;
    permissions?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAuthModuleCredential} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module_name - the name of the module used for address derivation (passed into address.Module).
 *   - 1: derivation_keys - for deriving a module account address (passed into address.Module) adding more keys creates sub-account addresses (passed into address.Derive)
 */
export declare const destructCosmosAuthModuleCredential: (g_struct: CosmosAuthModuleCredential) => [module_name?: string, derivation_keys?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_CREDENTIAL = "/cosmos.auth.v1beta1.ModuleCredential";
/**
 * JSON serialization of `cosmos.auth.v1beta1.ModuleCredential` - represents a unclaimable pubkey for base accounts controlled by modules. Since: cosmos-sdk 0.47
 */
export type CosmosAuthModuleCredential = {
    module_name?: string | undefined;
    derivation_keys?: CwBase64[] | undefined;
};
