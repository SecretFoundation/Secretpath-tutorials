import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64, safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosAuthParams, decodeCosmosAuthBaseAccount } from './auth.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
const SR_LCD_COSMOS_AUTH_QUERY = '/cosmos/auth/v1beta1/';
/**
 * Returns all the existing accounts. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set. Since: cosmos-sdk 0.43
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: accounts - the existing accounts
 *   - 1: pagination - the existing accounts
 */
export const queryCosmosAuthAccounts = restful_grpc(g_pagination => [SR_LCD_COSMOS_AUTH_QUERY + 'accounts', {
        pagination: g_pagination,
    }]);
/**
 * Returns account details based on address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - defines the address to query for.
 * @returns a tuple where:
 *   - 0: account - defines the account of the corresponding address.
 */
export const queryCosmosAuthAccount = restful_grpc(sa_address => [SR_LCD_COSMOS_AUTH_QUERY + 'accounts/' + sa_address]);
/**
 * Returns account address based on account number. Since: cosmos-sdk 0.46.2
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_id - Deprecated, use account_id instead id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
 * @param sg_account_id - the account number of the address to be queried. Since: cosmos-sdk 0.47
 * @returns a tuple where:
 *   - 0: account_address - the 'account_address' response property
 */
export const queryCosmosAuthAccountAddressByID = restful_grpc((sg_id, sg_account_id) => [SR_LCD_COSMOS_AUTH_QUERY + 'address_by_id/' + sg_id, {
        account_id: sg_account_id,
    }]);
/**
 * Queries all parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryCosmosAuthParams = restful_grpc(() => [SR_LCD_COSMOS_AUTH_QUERY + 'params']);
/**
 * Returns all the existing module accounts. Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: accounts - the 'accounts' response property
 */
export const queryCosmosAuthModuleAccounts = restful_grpc(() => [SR_LCD_COSMOS_AUTH_QUERY + 'module_accounts']);
/**
 * Returns the module account info by module name
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_name -
 * @returns a tuple where:
 *   - 0: account - the 'account' response property
 */
export const queryCosmosAuthModuleAccountByName = restful_grpc(s_name => [SR_LCD_COSMOS_AUTH_QUERY + 'module_accounts/' + s_name]);
/**
 * Queries bech32Prefix Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: bech32_prefix - the 'bech32_prefix' response property
 */
export const queryCosmosAuthBech32Prefix = restful_grpc(() => [SR_LCD_COSMOS_AUTH_QUERY + 'bech32']);
/**
 * Converts Account Address bytes to string Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_address_bytes -
 * @returns a tuple where:
 *   - 0: address_string - the 'address_string' response property
 */
export const queryCosmosAuthAddressBytesToString = restful_grpc(atu8_address_bytes => [SR_LCD_COSMOS_AUTH_QUERY + 'bech32/' + safe_bytes_to_base64(atu8_address_bytes)]);
/**
 * Converts Address string to bytes Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_address_string -
 * @returns a tuple where:
 *   - 0: address_bytes - the 'address_bytes' response property
 */
export const queryCosmosAuthAddressStringToBytes = restful_grpc(s_address_string => [SR_LCD_COSMOS_AUTH_QUERY + 'bech32/' + s_address_string]);
/**
 * Queries account info which is common to all account types. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the account address string.
 * @returns a tuple where:
 *   - 0: info - the account info which is represented by BaseAccount.
 */
export const queryCosmosAuthAccountInfo = restful_grpc(sa_address => [SR_LCD_COSMOS_AUTH_QUERY + 'account_info/' + sa_address]);
/**
 * Encodes a `QueryAccountsRequest` protobuf message: the request type for the Query/Accounts RPC method. Since: cosmos-sdk 0.43
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountsRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryAccountsResponse` protobuf message: the response type for the Query/Accounts RPC method. Since: cosmos-sdk 0.43
 * @param a_accounts - `accounts`: the existing accounts
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountsResponse = (a_accounts, atu8_pagination) => Protobuf() // ...
    .B(a_accounts) // Any[] accounts = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryAccountRequest` protobuf message: the request type for the Query/Account RPC method.
 * @param sa_address - `address`: defines the address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountRequest = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Encodes a `QueryAccountResponse` protobuf message: the response type for the Query/Account RPC method.
 * @param atu8_account - `account`: defines the account of the corresponding address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountResponse = (atu8_account) => Protobuf() // ...
    .b(atu8_account) // Any account = 1
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryModuleAccountsRequest` protobuf message: the request type for the Query/ModuleAccounts RPC method. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryModuleAccountsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryModuleAccountsResponse` protobuf message: the response type for the Query/ModuleAccounts RPC method. Since: cosmos-sdk 0.46
 * @param a_accounts - `accounts`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryModuleAccountsResponse = (a_accounts) => Protobuf() // ...
    .B(a_accounts) // Any[] accounts = 1
    .o;
/**
 * Encodes a `QueryModuleAccountByNameRequest` protobuf message: the request type for the Query/ModuleAccountByName RPC method.
 * @param s_name - `name`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryModuleAccountByNameRequest = (s_name) => Protobuf() // ...
    .s(s_name) // string name = 1
    .o;
/**
 * Encodes a `QueryModuleAccountByNameResponse` protobuf message: the response type for the Query/ModuleAccountByName RPC method.
 * @param atu8_account - `account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryModuleAccountByNameResponse = (atu8_account) => Protobuf() // ...
    .b(atu8_account) // Any account = 1
    .o;
/**
 * Encodes a `Bech32PrefixRequest` protobuf message: the request type for Bech32Prefix rpc method. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthBech32PrefixRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `Bech32PrefixResponse` protobuf message: the response type for Bech32Prefix rpc method. Since: cosmos-sdk 0.46
 * @param s_bech32_prefix - `bech32_prefix`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthBech32PrefixResponse = (s_bech32_prefix) => Protobuf() // ...
    .s(s_bech32_prefix) // string bech32_prefix = 1
    .o;
/**
 * Encodes a `AddressBytesToStringRequest` protobuf message: the request type for AddressString rpc method. Since: cosmos-sdk 0.46
 * @param atu8_address_bytes - `address_bytes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthAddressBytesToStringRequest = (atu8_address_bytes) => Protobuf() // ...
    .b(atu8_address_bytes) // bytes address_bytes = 1
    .o;
/**
 * Encodes a `AddressBytesToStringResponse` protobuf message: the response type for AddressString rpc method. Since: cosmos-sdk 0.46
 * @param s_address_string - `address_string`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthAddressBytesToStringResponse = (s_address_string) => Protobuf() // ...
    .s(s_address_string) // string address_string = 1
    .o;
/**
 * Encodes a `AddressStringToBytesRequest` protobuf message: the request type for AccountBytes rpc method. Since: cosmos-sdk 0.46
 * @param s_address_string - `address_string`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthAddressStringToBytesRequest = (s_address_string) => Protobuf() // ...
    .s(s_address_string) // string address_string = 1
    .o;
/**
 * Encodes a `AddressStringToBytesResponse` protobuf message: the response type for AddressBytes rpc method. Since: cosmos-sdk 0.46
 * @param atu8_address_bytes - `address_bytes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthAddressStringToBytesResponse = (atu8_address_bytes) => Protobuf() // ...
    .b(atu8_address_bytes) // bytes address_bytes = 1
    .o;
/**
 * Encodes a `QueryAccountAddressByIDRequest` protobuf message: the request type for AccountAddressByID rpc method Since: cosmos-sdk 0.46.2
 * @param sg_id - `id`: Deprecated, use account_id instead id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
 * @param sg_account_id - `account_id`: the account number of the address to be queried. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountAddressByIDRequest = (sg_id, sg_account_id) => Protobuf() // ...
    .g(sg_id) // int32 id = 1
    .g(sg_account_id) // uint64 account_id = 2
    .o;
/**
 * Encodes a `QueryAccountAddressByIDResponse` protobuf message: the response type for AccountAddressByID rpc method Since: cosmos-sdk 0.46.2
 * @param sa_account - `account_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountAddressByIDResponse = (sa_account) => Protobuf() // ...
    .s(sa_account) // string account_address = 1
    .o;
/**
 * Encodes a `QueryAccountInfoRequest` protobuf message: the Query/AccountInfo request type. Since: cosmos-sdk 0.47
 * @param sa_address - `address`: the account address string.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountInfoRequest = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Encodes a `QueryAccountInfoResponse` protobuf message: the Query/AccountInfo response type. Since: cosmos-sdk 0.47
 * @param g_info - `info`: the account info which is represented by BaseAccount.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthQueryAccountInfoResponse = (atu8_info) => Protobuf() // ...
    .b(atu8_info) // BaseAccount info = 1
    .o;
/**
 * Decodes a protobuf QueryAccountsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountsRequest}
 */
export const decodeCosmosAuthQueryAccountsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryAccounts message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountsResponse}
 */
export const decodeCosmosAuthQueryAccountsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeGoogleProtobufAny, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryAccountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountRequest}
 */
export const decodeCosmosAuthQueryAccountRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountResponse}
 */
export const decodeCosmosAuthQueryAccountResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryParamsRequest}
 */
export const decodeCosmosAuthQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryParamsResponse}
 */
export const decodeCosmosAuthQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosAuthParams]);
/**
 * Decodes a protobuf QueryModuleAccountsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryModuleAccountsRequest}
 */
export const decodeCosmosAuthQueryModuleAccountsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryModuleAccounts message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryModuleAccountsResponse}
 */
export const decodeCosmosAuthQueryModuleAccountsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf QueryModuleAccountByNameRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryModuleAccountByNameRequest}
 */
export const decodeCosmosAuthQueryModuleAccountByNameRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryModuleAccountByName message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryModuleAccountByNameResponse}
 */
export const decodeCosmosAuthQueryModuleAccountByNameResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf Bech32PrefixRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthBech32PrefixRequest}
 */
export const decodeCosmosAuthBech32PrefixRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Bech32Prefix message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthBech32PrefixResponse}
 */
export const decodeCosmosAuthBech32PrefixResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf AddressBytesToStringRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthAddressBytesToStringRequest}
 */
export const decodeCosmosAuthAddressBytesToStringRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf AddressBytesToString message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthAddressBytesToStringResponse}
 */
export const decodeCosmosAuthAddressBytesToStringResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf AddressStringToBytesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthAddressStringToBytesRequest}
 */
export const decodeCosmosAuthAddressStringToBytesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf AddressStringToBytes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthAddressStringToBytesResponse}
 */
export const decodeCosmosAuthAddressStringToBytesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf QueryAccountAddressByIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountAddressByIDRequest}
 */
export const decodeCosmosAuthQueryAccountAddressByIDRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf QueryAccountAddressByID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountAddressByIDResponse}
 */
export const decodeCosmosAuthQueryAccountAddressByIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryAccountInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountInfoRequest}
 */
export const decodeCosmosAuthQueryAccountInfoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryAccountInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthQueryAccountInfoResponse}
 */
export const decodeCosmosAuthQueryAccountInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosAuthBaseAccount]);
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export const destructCosmosAuthQueryAccountsRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNTS_REQUEST = '/cosmos.auth.v1beta1.QueryAccountsRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: accounts - the existing accounts
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosAuthQueryAccountsResponse = (g_struct) => [g_struct.accounts, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNTS_RESPONSE = '/cosmos.auth.v1beta1.QueryAccountsResponse';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - defines the address to query for.
 */
export const destructCosmosAuthQueryAccountRequest = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNT_REQUEST = '/cosmos.auth.v1beta1.QueryAccountRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account - defines the account of the corresponding address.
 */
export const destructCosmosAuthQueryAccountResponse = (g_struct) => [g_struct.account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNT_RESPONSE = '/cosmos.auth.v1beta1.QueryAccountResponse';
/**
 * Destructures the fields of a {@link CosmosAuthQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosAuthQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_PARAMS_REQUEST = '/cosmos.auth.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructCosmosAuthQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_PARAMS_RESPONSE = '/cosmos.auth.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link CosmosAuthQueryModuleAccountsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosAuthQueryModuleAccountsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_MODULE_ACCOUNTS_REQUEST = '/cosmos.auth.v1beta1.QueryModuleAccountsRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryModuleAccountsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: accounts -
 */
export const destructCosmosAuthQueryModuleAccountsResponse = (g_struct) => [g_struct.accounts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_MODULE_ACCOUNTS_RESPONSE = '/cosmos.auth.v1beta1.QueryModuleAccountsResponse';
/**
 * Destructures the fields of a {@link CosmosAuthQueryModuleAccountByNameRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 */
export const destructCosmosAuthQueryModuleAccountByNameRequest = (g_struct) => [g_struct.name];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_MODULE_ACCOUNT_BY_NAME_REQUEST = '/cosmos.auth.v1beta1.QueryModuleAccountByNameRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryModuleAccountByNameResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account -
 */
export const destructCosmosAuthQueryModuleAccountByNameResponse = (g_struct) => [g_struct.account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_MODULE_ACCOUNT_BY_NAME_RESPONSE = '/cosmos.auth.v1beta1.QueryModuleAccountByNameResponse';
/**
 * Destructures the fields of a {@link CosmosAuthBech32PrefixRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosAuthBech32PrefixRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_BECH32_PREFIX_REQUEST = '/cosmos.auth.v1beta1.Bech32PrefixRequest';
/**
 * Destructures the fields of a {@link CosmosAuthBech32PrefixResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bech32_prefix -
 */
export const destructCosmosAuthBech32PrefixResponse = (g_struct) => [g_struct.bech32_prefix];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_BECH32_PREFIX_RESPONSE = '/cosmos.auth.v1beta1.Bech32PrefixResponse';
/**
 * Destructures the fields of a {@link CosmosAuthAddressBytesToStringRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address_bytes -
 */
export const destructCosmosAuthAddressBytesToStringRequest = (g_struct) => [safe_base64_to_bytes(g_struct.address_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_ADDRESS_BYTES_TO_STRING_REQUEST = '/cosmos.auth.v1beta1.AddressBytesToStringRequest';
/**
 * Destructures the fields of a {@link CosmosAuthAddressBytesToStringResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address_string -
 */
export const destructCosmosAuthAddressBytesToStringResponse = (g_struct) => [g_struct.address_string];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_ADDRESS_BYTES_TO_STRING_RESPONSE = '/cosmos.auth.v1beta1.AddressBytesToStringResponse';
/**
 * Destructures the fields of a {@link CosmosAuthAddressStringToBytesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address_string -
 */
export const destructCosmosAuthAddressStringToBytesRequest = (g_struct) => [g_struct.address_string];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_ADDRESS_STRING_TO_BYTES_REQUEST = '/cosmos.auth.v1beta1.AddressStringToBytesRequest';
/**
 * Destructures the fields of a {@link CosmosAuthAddressStringToBytesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address_bytes -
 */
export const destructCosmosAuthAddressStringToBytesResponse = (g_struct) => [safe_base64_to_bytes(g_struct.address_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_ADDRESS_STRING_TO_BYTES_RESPONSE = '/cosmos.auth.v1beta1.AddressStringToBytesResponse';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountAddressByIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - Deprecated, use account_id instead id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.
 *   - 1: account_id - the account number of the address to be queried. Since: cosmos-sdk 0.47
 */
export const destructCosmosAuthQueryAccountAddressByIDRequest = (g_struct) => [g_struct.id, g_struct.account_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNT_ADDRESS_BY_I_D_REQUEST = '/cosmos.auth.v1beta1.QueryAccountAddressByIDRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountAddressByIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account_address -
 */
export const destructCosmosAuthQueryAccountAddressByIDResponse = (g_struct) => [g_struct.account_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNT_ADDRESS_BY_I_D_RESPONSE = '/cosmos.auth.v1beta1.QueryAccountAddressByIDResponse';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address string.
 */
export const destructCosmosAuthQueryAccountInfoRequest = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNT_INFO_REQUEST = '/cosmos.auth.v1beta1.QueryAccountInfoRequest';
/**
 * Destructures the fields of a {@link CosmosAuthQueryAccountInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info - the account info which is represented by BaseAccount.
 */
export const destructCosmosAuthQueryAccountInfoResponse = (g_struct) => [g_struct.info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_QUERY_ACCOUNT_INFO_RESPONSE = '/cosmos.auth.v1beta1.QueryAccountInfoResponse';
//# sourceMappingURL=query.js.map