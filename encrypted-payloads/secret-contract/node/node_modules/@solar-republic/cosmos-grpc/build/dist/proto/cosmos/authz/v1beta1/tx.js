import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosAuthzGrant } from './authz.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `MsgGrant` protobuf message: a request type for Grant method. It declares authorization to the grantee on behalf of the granter with the provided expiration time.
 * @param sa_granter - `granter`:
 * @param sa_grantee - `grantee`:
 * @param g_grant - `grant`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzMsgGrant = (sa_granter, sa_grantee, atu8_grant) => Protobuf() // ...
    .s(sa_granter) // string granter = 1
    .s(sa_grantee) // string grantee = 2
    .b(atu8_grant) // Grant grant = 3
    .o;
/**
 * Encodes a `MsgGrantResponse` protobuf message: defines the Msg/MsgGrant response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzMsgGrantResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgExec` protobuf message: attempts to execute the provided messages using authorizations granted to the grantee. Each message should have only one signer corresponding to the granter of the authorization.
 * @param sa_grantee - `grantee`:
 * @param a_msgs - `msgs`: Execute Msg. The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg)) triple and validate it.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzMsgExec = (sa_grantee, a_msgs) => Protobuf() // ...
    .s(sa_grantee) // string grantee = 1
    .B(a_msgs) // Any[] msgs = 2
    .o;
/**
 * Encodes a `MsgExecResponse` protobuf message: defines the Msg/MsgExecResponse response type.
 * @param a_results - `results`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzMsgExecResponse = (a_results) => Protobuf() // ...
    .B(a_results) // bytes[] results = 1
    .o;
/**
 * Encodes a `MsgRevoke` protobuf message: revokes any authorization with the provided sdk.Msg type on the granter's account with that has been granted to the grantee.
 * @param sa_granter - `granter`:
 * @param sa_grantee - `grantee`:
 * @param s_msg_type_url - `msg_type_url`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzMsgRevoke = (sa_granter, sa_grantee, s_msg_type_url) => Protobuf() // ...
    .s(sa_granter) // string granter = 1
    .s(sa_grantee) // string grantee = 2
    .s(s_msg_type_url) // string msg_type_url = 3
    .o;
/**
 * Encodes a `MsgRevokeResponse` protobuf message: defines the Msg/MsgRevokeResponse response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzMsgRevokeResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf Grant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzMsgGrant}
 */
export const decodeCosmosAuthzMsgGrant = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeCosmosAuthzGrant]);
/**
 * Decodes a protobuf Grant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzMsgGrantResponse}
 */
export const decodeCosmosAuthzMsgGrantResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Exec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzMsgExec}
 */
export const decodeCosmosAuthzMsgExec = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf Exec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzMsgExecResponse}
 */
export const decodeCosmosAuthzMsgExecResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0]);
/**
 * Decodes a protobuf Revoke message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzMsgRevoke}
 */
export const decodeCosmosAuthzMsgRevoke = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf Revoke message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzMsgRevokeResponse}
 */
export const decodeCosmosAuthzMsgRevokeResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmosAuthzMsgGrant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: granter -
 *   - 1: grantee -
 *   - 2: grant -
 */
export const destructCosmosAuthzMsgGrant = (g_struct) => [g_struct.granter, g_struct.grantee, g_struct.grant];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_MSG_GRANT = '/cosmos.authz.v1beta1.MsgGrant';
/**
 * Destructures the fields of a {@link CosmosAuthzMsgGrantResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosAuthzMsgGrantResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_MSG_GRANT_RESPONSE = '/cosmos.authz.v1beta1.MsgGrantResponse';
/**
 * Destructures the fields of a {@link CosmosAuthzMsgExec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grantee -
 *   - 1: msgs - Execute Msg. The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg)) triple and validate it.
 */
export const destructCosmosAuthzMsgExec = (g_struct) => [g_struct.grantee, g_struct.msgs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_MSG_EXEC = '/cosmos.authz.v1beta1.MsgExec';
/**
 * Destructures the fields of a {@link CosmosAuthzMsgExecResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: results -
 */
export const destructCosmosAuthzMsgExecResponse = (g_struct) => [map(g_struct.results, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_MSG_EXEC_RESPONSE = '/cosmos.authz.v1beta1.MsgExecResponse';
/**
 * Destructures the fields of a {@link CosmosAuthzMsgRevoke} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: granter -
 *   - 1: grantee -
 *   - 2: msg_type_url -
 */
export const destructCosmosAuthzMsgRevoke = (g_struct) => [g_struct.granter, g_struct.grantee, g_struct.msg_type_url];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_MSG_REVOKE = '/cosmos.authz.v1beta1.MsgRevoke';
/**
 * Destructures the fields of a {@link CosmosAuthzMsgRevokeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosAuthzMsgRevokeResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_MSG_REVOKE_RESPONSE = '/cosmos.authz.v1beta1.MsgRevokeResponse';
//# sourceMappingURL=tx.js.map