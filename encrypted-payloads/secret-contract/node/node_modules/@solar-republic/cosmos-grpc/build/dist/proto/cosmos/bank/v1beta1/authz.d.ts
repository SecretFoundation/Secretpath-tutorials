import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type AnyCosmosBankSendAuthorization = Encoded<'cosmos.authz.v1beta1.Authorization'>;
export type EncodedCosmosBankSendAuthorization = Encoded<'/cosmos.bank.v1beta1.SendAuthorization' | 'cosmos.authz.v1beta1.Authorization'>;
/**
 * Encodes a `SendAuthorization` protobuf message wrapped in the `Any` container: allows the grantee to spend up to spend_limit coins from the granter's account. Since: cosmos-sdk 0.43
 * @param a_spend_limits - `spend_limit`:
 * @param a_allow_lists - `allow_list`: specifies an optional list of addresses to whom the grantee can send tokens on behalf of the granter. If omitted, any recipient is allowed. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anySendAuthorization: (a_spend_limits?: Opt<SlimCoin[]>, a_allow_lists?: Opt<string[]>) => AnyCosmosBankSendAuthorization;
/**
 * Encodes a `SendAuthorization` protobuf message: allows the grantee to spend up to spend_limit coins from the granter's account. Since: cosmos-sdk 0.43
 * @param a_spend_limits - `spend_limit`:
 * @param a_allow_lists - `allow_list`: specifies an optional list of addresses to whom the grantee can send tokens on behalf of the granter. If omitted, any recipient is allowed. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankSendAuthorization: (a_spend_limits?: Opt<SlimCoin[]>, a_allow_lists?: Opt<string[]>) => EncodedCosmosBankSendAuthorization;
/**
 * A decoded protobuf SendAuthorization message
 *
 * Tuple where:
 *   - 0: spend_limit -
 *   - 1: allow_list - specifies an optional list of addresses to whom the grantee can send tokens on behalf of the granter. If omitted, any recipient is allowed. Since: cosmos-sdk 0.47
 */
export type DecodedCosmosBankSendAuthorization = [
    a_spend_limit?: [
        string,
        string
    ][],
    a_allow_lists?: string[]
];
/**
 * Decodes a protobuf SendAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankSendAuthorization}
 */
export declare const decodeCosmosBankSendAuthorization: (atu8_payload: Uint8Array) => DecodedCosmosBankSendAuthorization;
/**
 * Destructures the fields of a {@link CosmosBankSendAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: spend_limit -
 *   - 1: allow_list - specifies an optional list of addresses to whom the grantee can send tokens on behalf of the granter. If omitted, any recipient is allowed. Since: cosmos-sdk 0.47
 */
export declare const destructCosmosBankSendAuthorization: (g_struct: CosmosBankSendAuthorization) => [spend_limit?: CosmosBaseCoin[], allow_list?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_SEND_AUTHORIZATION = "/cosmos.bank.v1beta1.SendAuthorization";
/**
 * JSON serialization of `cosmos.bank.v1beta1.SendAuthorization` - allows the grantee to spend up to spend_limit coins from the granter's account. Since: cosmos-sdk 0.43
 */
export type CosmosBankSendAuthorization = {
    spend_limit?: CosmosBaseCoin[] | undefined;
    allow_list?: string[] | undefined;
};
