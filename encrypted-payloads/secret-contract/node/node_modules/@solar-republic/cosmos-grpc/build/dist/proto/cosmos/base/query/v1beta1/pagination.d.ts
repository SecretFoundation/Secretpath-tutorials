import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedCosmosBaseQueryPageRequest = Encoded<'/cosmos.base.query.v1beta1.PageRequest'>;
export type EncodedCosmosBaseQueryPageResponse = Encoded<'/cosmos.base.query.v1beta1.PageResponse'>;
/**
 * Encodes a `PageRequest` protobuf message: to be embedded in gRPC request messages for efficient pagination. Ex: message SomeRequest { Foo some_parameter = 1; PageRequest pagination = 2; }
 * @param atu8_key - `key`: a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
 * @param sg_offset - `offset`: a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
 * @param sg_limit - `limit`: the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 * @param b_count_total - `count_total`: set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
 * @param b_reverse - `reverse`: set to true if results are to be returned in the descending order. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseQueryPageRequest: (atu8_key?: Opt<Uint8Array>, sg_offset?: Opt<WeakUint64Str>, sg_limit?: Opt<WeakUint64Str>, b_count_total?: Opt<boolean | 0 | 1>, b_reverse?: Opt<boolean | 0 | 1>) => EncodedCosmosBaseQueryPageRequest;
/**
 * Encodes a `PageResponse` protobuf message: to be embedded in gRPC response messages where the corresponding request message has used PageRequest. message SomeResponse { repeated Bar results = 1; PageResponse page = 2; }
 * @param atu8_next_key - `next_key`: the key to be passed to PageRequest.key to query the next page most efficiently. It will be empty if there are no more results.
 * @param sg_total - `total`: total number of results available if PageRequest.count_total was set, its value is undefined otherwise
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseQueryPageResponse: (atu8_next_key?: Opt<Uint8Array>, sg_total?: Opt<WeakUint64Str>) => EncodedCosmosBaseQueryPageResponse;
/**
 * A decoded protobuf PageRequest message
 *
 * Tuple where:
 *   - 0: key - a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
 *   - 1: offset - a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
 *   - 2: limit - the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 *   - 3: count_total - set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
 *   - 4: reverse - set to true if results are to be returned in the descending order. Since: cosmos-sdk 0.43
 */
export type DecodedCosmosBaseQueryPageRequest = [
    atu8_key?: Uint8Array,
    sg_offset?: CwUint64,
    sg_limit?: CwUint64,
    b_count_total?: 0 | 1,
    b_reverse?: 0 | 1
];
/**
 * Decodes a protobuf PageRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseQueryPageRequest}
 */
export declare const decodeCosmosBaseQueryPageRequest: (atu8_payload: Uint8Array) => DecodedCosmosBaseQueryPageRequest;
/**
 * A decoded protobuf Page message
 *
 * Tuple where:
 *   - 0: next_key - the key to be passed to PageRequest.key to query the next page most efficiently. It will be empty if there are no more results.
 *   - 1: total - total number of results available if PageRequest.count_total was set, its value is undefined otherwise
 */
export type DecodedCosmosBaseQueryPageResponse = [
    atu8_next_key?: Uint8Array,
    sg_total?: CwUint64
];
/**
 * Decodes a protobuf Page message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseQueryPageResponse}
 */
export declare const decodeCosmosBaseQueryPageResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseQueryPageResponse;
/**
 * Destructures the fields of a {@link CosmosBaseQueryPageRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key - a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
 *   - 1: offset - a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
 *   - 2: limit - the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 *   - 3: count_total - set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
 *   - 4: reverse - set to true if results are to be returned in the descending order. Since: cosmos-sdk 0.43
 */
export declare const destructCosmosBaseQueryPageRequest: (g_struct: CosmosBaseQueryPageRequest) => [key?: Uint8Array, offset?: CwUint64, limit?: CwUint64, count_total?: boolean, reverse?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_QUERY_PAGE_REQUEST = "/cosmos.base.query.v1beta1.PageRequest";
/**
 * JSON serialization of `cosmos.base.query.v1beta1.PageRequest` - to be embedded in gRPC request messages for efficient pagination. Ex: message SomeRequest { Foo some_parameter = 1; PageRequest pagination = 2; }
 */
export type CosmosBaseQueryPageRequest = {
    key?: CwBase64 | undefined;
    offset?: CwUint64 | undefined;
    limit?: CwUint64 | undefined;
    count_total?: boolean | undefined;
    reverse?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseQueryPageResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_key - the key to be passed to PageRequest.key to query the next page most efficiently. It will be empty if there are no more results.
 *   - 1: total - total number of results available if PageRequest.count_total was set, its value is undefined otherwise
 */
export declare const destructCosmosBaseQueryPageResponse: (g_struct: CosmosBaseQueryPageResponse) => [next_key?: Uint8Array, total?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_QUERY_PAGE_RESPONSE = "/cosmos.base.query.v1beta1.PageResponse";
/**
 * JSON serialization of `cosmos.base.query.v1beta1.PageResponse` - to be embedded in gRPC response messages where the corresponding request message has used PageRequest. message SomeResponse { repeated Bar results = 1; PageResponse page = 2; }
 */
export type CosmosBaseQueryPageResponse = {
    next_key?: CwBase64 | undefined;
    total?: CwUint64 | undefined;
};
