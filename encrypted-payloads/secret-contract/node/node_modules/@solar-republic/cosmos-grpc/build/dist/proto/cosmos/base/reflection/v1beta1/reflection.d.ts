/// <reference types="node" />
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedCosmosBaseReflectionListAllInterfacesRequest = Encoded<'/cosmos.base.reflection.v1beta1.ListAllInterfacesRequest'>;
export type EncodedCosmosBaseReflectionListAllInterfacesResponse = Encoded<'/cosmos.base.reflection.v1beta1.ListAllInterfacesResponse'>;
export type EncodedCosmosBaseReflectionListImplementationsRequest = Encoded<'/cosmos.base.reflection.v1beta1.ListImplementationsRequest'>;
export type EncodedCosmosBaseReflectionListImplementationsResponse = Encoded<'/cosmos.base.reflection.v1beta1.ListImplementationsResponse'>;
/**
 * Lists all the interfaces registered in the interface registry.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: interface_names - an array of all the registered interfaces.
 */
export declare const queryCosmosBaseReflectionListAllInterfaces: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionListAllInterfacesResponse>>;
/**
 * List all the concrete types that implement a given interface.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_interface_name - defines the interface to query the implementations for.
 * @returns a tuple where:
 *   - 0: implementation_message_names - the 'implementation_message_names' response property
 */
export declare const queryCosmosBaseReflectionListImplementations: (z_req: string | ({
    origin: string;
} & RequestInit), s_interface_name?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionListImplementationsResponse>>;
/**
 * Encodes a `ListAllInterfacesRequest` protobuf message: the request type of the ListAllInterfaces RPC.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionListAllInterfacesRequest: () => EncodedCosmosBaseReflectionListAllInterfacesRequest;
/**
 * Encodes a `ListAllInterfacesResponse` protobuf message: the response type of the ListAllInterfaces RPC.
 * @param a_interface_names - `interface_names`: an array of all the registered interfaces.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionListAllInterfacesResponse: (a_interface_names?: Opt<string[]>) => EncodedCosmosBaseReflectionListAllInterfacesResponse;
/**
 * Encodes a `ListImplementationsRequest` protobuf message: the request type of the ListImplementations RPC.
 * @param s_interface_name - `interface_name`: defines the interface to query the implementations for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionListImplementationsRequest: (s_interface_name?: Opt<string>) => EncodedCosmosBaseReflectionListImplementationsRequest;
/**
 * Encodes a `ListImplementationsResponse` protobuf message: the response type of the ListImplementations RPC.
 * @param a_implementation_message_names - `implementation_message_names`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionListImplementationsResponse: (a_implementation_message_names?: Opt<string[]>) => EncodedCosmosBaseReflectionListImplementationsResponse;
/**
 * A decoded protobuf ListAllInterfacesRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionListAllInterfacesRequest = [];
/**
 * Decodes a protobuf ListAllInterfacesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListAllInterfacesRequest}
 */
export declare const decodeCosmosBaseReflectionListAllInterfacesRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ListAllInterfaces message
 *
 * Alias for: interface_names - an array of all the registered interfaces.
 */
export type DecodedCosmosBaseReflectionListAllInterfacesResponse = [
    a_interface_names?: string[]
];
/**
 * Decodes a protobuf ListAllInterfaces message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListAllInterfacesResponse}
 */
export declare const decodeCosmosBaseReflectionListAllInterfacesResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionListAllInterfacesResponse;
/**
 * A decoded protobuf ListImplementationsRequest message
 *
 * Alias for: interface_name - defines the interface to query the implementations for.
 */
export type DecodedCosmosBaseReflectionListImplementationsRequest = [
    s_interface_name?: string
];
/**
 * Decodes a protobuf ListImplementationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListImplementationsRequest}
 */
export declare const decodeCosmosBaseReflectionListImplementationsRequest: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionListImplementationsRequest;
/**
 * A decoded protobuf ListImplementations message
 *
 * Alias for: implementation_message_names -
 */
export type DecodedCosmosBaseReflectionListImplementationsResponse = [
    a_implementation_message_names?: string[]
];
/**
 * Decodes a protobuf ListImplementations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListImplementationsResponse}
 */
export declare const decodeCosmosBaseReflectionListImplementationsResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionListImplementationsResponse;
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListAllInterfacesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionListAllInterfacesRequest: (g_struct: CosmosBaseReflectionListAllInterfacesRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_ALL_INTERFACES_REQUEST = "/cosmos.base.reflection.v1beta1.ListAllInterfacesRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v1beta1.ListAllInterfacesRequest` - the request type of the ListAllInterfaces RPC.
 */
export type CosmosBaseReflectionListAllInterfacesRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListAllInterfacesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interface_names - an array of all the registered interfaces.
 */
export declare const destructCosmosBaseReflectionListAllInterfacesResponse: (g_struct: CosmosBaseReflectionListAllInterfacesResponse) => [interface_names?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_ALL_INTERFACES_RESPONSE = "/cosmos.base.reflection.v1beta1.ListAllInterfacesResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v1beta1.ListAllInterfacesResponse` - the response type of the ListAllInterfaces RPC.
 */
export type CosmosBaseReflectionListAllInterfacesResponse = {
    interface_names?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListImplementationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interface_name - defines the interface to query the implementations for.
 */
export declare const destructCosmosBaseReflectionListImplementationsRequest: (g_struct: CosmosBaseReflectionListImplementationsRequest) => [interface_name?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_IMPLEMENTATIONS_REQUEST = "/cosmos.base.reflection.v1beta1.ListImplementationsRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v1beta1.ListImplementationsRequest` - the request type of the ListImplementations RPC.
 */
export type CosmosBaseReflectionListImplementationsRequest = {
    interface_name?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListImplementationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: implementation_message_names -
 */
export declare const destructCosmosBaseReflectionListImplementationsResponse: (g_struct: CosmosBaseReflectionListImplementationsResponse) => [implementation_message_names?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_IMPLEMENTATIONS_RESPONSE = "/cosmos.base.reflection.v1beta1.ListImplementationsResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v1beta1.ListImplementationsResponse` - the response type of the ListImplementations RPC.
 */
export type CosmosBaseReflectionListImplementationsResponse = {
    implementation_message_names?: string[] | undefined;
};
