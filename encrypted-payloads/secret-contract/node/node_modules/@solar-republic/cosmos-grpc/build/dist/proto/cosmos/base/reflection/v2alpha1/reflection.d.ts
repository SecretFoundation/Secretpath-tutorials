/// <reference types="node" />
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedCosmosBaseReflectionAppDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.AppDescriptor'>;
export type EncodedCosmosBaseReflectionTxDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.TxDescriptor'>;
export type EncodedCosmosBaseReflectionAuthnDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.AuthnDescriptor'>;
export type EncodedCosmosBaseReflectionSigningModeDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.SigningModeDescriptor'>;
export type EncodedCosmosBaseReflectionChainDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.ChainDescriptor'>;
export type EncodedCosmosBaseReflectionCodecDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.CodecDescriptor'>;
export type EncodedCosmosBaseReflectionInterfaceDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.InterfaceDescriptor'>;
export type EncodedCosmosBaseReflectionInterfaceImplementerDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor'>;
export type EncodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor'>;
export type EncodedCosmosBaseReflectionConfigurationDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor'>;
export type EncodedCosmosBaseReflectionMsgDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.MsgDescriptor'>;
export type EncodedCosmosBaseReflectionGetAuthnDescriptorRequest = Encoded<'/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest'>;
export type EncodedCosmosBaseReflectionGetAuthnDescriptorResponse = Encoded<'/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse'>;
export type EncodedCosmosBaseReflectionGetChainDescriptorRequest = Encoded<'/cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest'>;
export type EncodedCosmosBaseReflectionGetChainDescriptorResponse = Encoded<'/cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse'>;
export type EncodedCosmosBaseReflectionGetCodecDescriptorRequest = Encoded<'/cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest'>;
export type EncodedCosmosBaseReflectionGetCodecDescriptorResponse = Encoded<'/cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse'>;
export type EncodedCosmosBaseReflectionGetConfigurationDescriptorRequest = Encoded<'/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest'>;
export type EncodedCosmosBaseReflectionGetConfigurationDescriptorResponse = Encoded<'/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse'>;
export type EncodedCosmosBaseReflectionGetQueryServicesDescriptorRequest = Encoded<'/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest'>;
export type EncodedCosmosBaseReflectionGetQueryServicesDescriptorResponse = Encoded<'/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse'>;
export type EncodedCosmosBaseReflectionGetTxDescriptorRequest = Encoded<'/cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest'>;
export type EncodedCosmosBaseReflectionGetTxDescriptorResponse = Encoded<'/cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse'>;
export type EncodedCosmosBaseReflectionQueryServicesDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor'>;
export type EncodedCosmosBaseReflectionQueryServiceDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor'>;
export type EncodedCosmosBaseReflectionQueryMethodDescriptor = Encoded<'/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor'>;
/**
 * Returns information on how to authenticate transactions in the application NOTE: this RPC is still experimental and might be subject to breaking changes or removal in future releases of the cosmos-sdk.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: authn - describes how to authenticate to the application when sending transactions
 */
export declare const queryCosmosBaseReflectionGetAuthnDescriptor: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionGetAuthnDescriptorResponse>>;
/**
 * Returns the description of the chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: chain - describes application chain information
 */
export declare const queryCosmosBaseReflectionGetChainDescriptor: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionGetChainDescriptorResponse>>;
/**
 * Returns the descriptor of the codec of the application
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: codec - describes the application codec such as registered interfaces and implementations
 */
export declare const queryCosmosBaseReflectionGetCodecDescriptor: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionGetCodecDescriptorResponse>>;
/**
 * Returns the descriptor for the sdk.Config of the application
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: config - describes the application's sdk.Config
 */
export declare const queryCosmosBaseReflectionGetConfigurationDescriptor: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionGetConfigurationDescriptorResponse>>;
/**
 * Returns the available gRPC queryable services of the application
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: queries - provides information on the available queryable services
 */
export declare const queryCosmosBaseReflectionGetQueryServicesDescriptor: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionGetQueryServicesDescriptorResponse>>;
/**
 * Returns information on the used transaction object and available msgs that can be used
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: tx - provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 */
export declare const queryCosmosBaseReflectionGetTxDescriptor: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<CosmosBaseReflectionGetTxDescriptorResponse>>;
/**
 * Encodes a `AppDescriptor` protobuf message: describes a cosmos-sdk based application
 * @param g_authn - `authn`: AuthnDescriptor provides information on how to authenticate transactions on the application NOTE: experimental and subject to change in future releases.
 * @param g_chain - `chain`: provides the chain descriptor
 * @param g_codec - `codec`: provides metadata information regarding codec related types
 * @param g_configuration - `configuration`: provides metadata information regarding the sdk.Config type
 * @param g_query_services - `query_services`: provides metadata information regarding the available queriable endpoints
 * @param g_tx - `tx`: provides metadata information regarding how to send transactions to the given application
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionAppDescriptor: (atu8_authn?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.AuthnDescriptor'>>, atu8_chain?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.ChainDescriptor'>>, atu8_codec?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.CodecDescriptor'>>, atu8_configuration?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor'>>, atu8_query_services?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor'>>, atu8_tx?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.TxDescriptor'>>) => EncodedCosmosBaseReflectionAppDescriptor;
/**
 * Encodes a `TxDescriptor` protobuf message: describes the accepted transaction type
 * @param s_fullname - `fullname`: the protobuf fullname of the raw transaction type (for instance the tx.Tx type) it is not meant to support polymorphism of transaction types, it is supposed to be used by reflection clients to understand if they can handle a specific transaction type in an application.
 * @param a_msgs - `msgs`: lists the accepted application messages (sdk.Msg)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionTxDescriptor: (s_fullname?: Opt<string>, a_msgs?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.MsgDescriptor'>[]>) => EncodedCosmosBaseReflectionTxDescriptor;
/**
 * Encodes a `AuthnDescriptor` protobuf message: provides information on how to sign transactions without relying on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
 * @param a_sign_modes - `sign_modes`: defines the supported signature algorithm
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionAuthnDescriptor: (a_sign_modes?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.SigningModeDescriptor'>[]>) => EncodedCosmosBaseReflectionAuthnDescriptor;
/**
 * Encodes a `SigningModeDescriptor` protobuf message: provides information on a signing flow of the application NOTE(fdymylja): here we could go as far as providing an entire flow on how to sign a message given a SigningModeDescriptor, but it's better to think about this another time
 * @param s_name - `name`: defines the unique name of the signing mode
 * @param n_number - `number`: the unique int32 identifier for the sign_mode enum
 * @param s_authn_info_provider_method_fullname - `authn_info_provider_method_fullname`: defines the fullname of the method to call to get the metadata required to authenticate using the provided sign_modes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionSigningModeDescriptor: (s_name?: Opt<string>, n_number?: Opt<number>, s_authn_info_provider_method_fullname?: Opt<string>) => EncodedCosmosBaseReflectionSigningModeDescriptor;
/**
 * Encodes a `ChainDescriptor` protobuf message: describes chain information of the application
 * @param s_id - `id`: the chain id
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionChainDescriptor: (s_id?: Opt<string>) => EncodedCosmosBaseReflectionChainDescriptor;
/**
 * Encodes a `CodecDescriptor` protobuf message: describes the registered interfaces and provides metadata information on the types
 * @param a_interfaces - `interfaces`: a list of the registerted interfaces descriptors
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionCodecDescriptor: (a_interfaces?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.InterfaceDescriptor'>[]>) => EncodedCosmosBaseReflectionCodecDescriptor;
/**
 * Encodes a `InterfaceDescriptor` protobuf message: describes the implementation of an interface
 * @param s_fullname - `fullname`: the name of the interface
 * @param a_interface_accepting_messages - `interface_accepting_messages`: contains information regarding the proto messages which contain the interface as google.protobuf.Any field
 * @param a_interface_implementers - `interface_implementers`: a list of the descriptors of the interface implementers
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionInterfaceDescriptor: (s_fullname?: Opt<string>, a_interface_accepting_messages?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor'>[]>, a_interface_implementers?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor'>[]>) => EncodedCosmosBaseReflectionInterfaceDescriptor;
/**
 * Encodes a `InterfaceImplementerDescriptor` protobuf message: describes an interface implementer
 * @param s_fullname - `fullname`: the protobuf queryable name of the interface implementer
 * @param s_type_url - `type_url`: defines the type URL used when marshalling the type as any this is required so we can provide type safe google.protobuf.Any marshalling and unmarshalling, making sure that we don't accept just 'any' type in our interface fields
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionInterfaceImplementerDescriptor: (s_fullname?: Opt<string>, s_type_url?: Opt<string>) => EncodedCosmosBaseReflectionInterfaceImplementerDescriptor;
/**
 * Encodes a `InterfaceAcceptingMessageDescriptor` protobuf message: describes a protobuf message which contains an interface represented as a google.protobuf.Any
 * @param s_fullname - `fullname`: the protobuf fullname of the type containing the interface
 * @param a_field_descriptor_names - `field_descriptor_names`: a list of the protobuf name (not fullname) of the field which contains the interface as google.protobuf.Any (the interface is the same, but it can be in multiple fields of the same proto message)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionInterfaceAcceptingMessageDescriptor: (s_fullname?: Opt<string>, a_field_descriptor_names?: Opt<string[]>) => EncodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor;
/**
 * Encodes a `ConfigurationDescriptor` protobuf message: contains metadata information on the sdk.Config
 * @param s_bech32_account_address_prefix - `bech32_account_address_prefix`: the account address prefix
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionConfigurationDescriptor: (s_bech32_account_address_prefix?: Opt<string>) => EncodedCosmosBaseReflectionConfigurationDescriptor;
/**
 * Encodes a `MsgDescriptor` protobuf message: describes a cosmos-sdk message that can be delivered with a transaction
 * @param s_msg_type_url - `msg_type_url`: contains the TypeURL of a sdk.Msg.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionMsgDescriptor: (s_msg_type_url?: Opt<string>) => EncodedCosmosBaseReflectionMsgDescriptor;
/**
 * Encodes a `GetAuthnDescriptorRequest` protobuf message: the request used for the GetAuthnDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetAuthnDescriptorRequest: () => EncodedCosmosBaseReflectionGetAuthnDescriptorRequest;
/**
 * Encodes a `GetAuthnDescriptorResponse` protobuf message: the response returned by the GetAuthnDescriptor RPC
 * @param g_authn - `authn`: describes how to authenticate to the application when sending transactions
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetAuthnDescriptorResponse: (atu8_authn?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.AuthnDescriptor'>>) => EncodedCosmosBaseReflectionGetAuthnDescriptorResponse;
/**
 * Encodes a `GetChainDescriptorRequest` protobuf message: the request used for the GetChainDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetChainDescriptorRequest: () => EncodedCosmosBaseReflectionGetChainDescriptorRequest;
/**
 * Encodes a `GetChainDescriptorResponse` protobuf message: the response returned by the GetChainDescriptor RPC
 * @param g_chain - `chain`: describes application chain information
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetChainDescriptorResponse: (atu8_chain?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.ChainDescriptor'>>) => EncodedCosmosBaseReflectionGetChainDescriptorResponse;
/**
 * Encodes a `GetCodecDescriptorRequest` protobuf message: the request used for the GetCodecDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetCodecDescriptorRequest: () => EncodedCosmosBaseReflectionGetCodecDescriptorRequest;
/**
 * Encodes a `GetCodecDescriptorResponse` protobuf message: the response returned by the GetCodecDescriptor RPC
 * @param g_codec - `codec`: describes the application codec such as registered interfaces and implementations
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetCodecDescriptorResponse: (atu8_codec?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.CodecDescriptor'>>) => EncodedCosmosBaseReflectionGetCodecDescriptorResponse;
/**
 * Encodes a `GetConfigurationDescriptorRequest` protobuf message: the request used for the GetConfigurationDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetConfigurationDescriptorRequest: () => EncodedCosmosBaseReflectionGetConfigurationDescriptorRequest;
/**
 * Encodes a `GetConfigurationDescriptorResponse` protobuf message: the response returned by the GetConfigurationDescriptor RPC
 * @param g_config - `config`: describes the application's sdk.Config
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetConfigurationDescriptorResponse: (atu8_config?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor'>>) => EncodedCosmosBaseReflectionGetConfigurationDescriptorResponse;
/**
 * Encodes a `GetQueryServicesDescriptorRequest` protobuf message: the request used for the GetQueryServicesDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetQueryServicesDescriptorRequest: () => EncodedCosmosBaseReflectionGetQueryServicesDescriptorRequest;
/**
 * Encodes a `GetQueryServicesDescriptorResponse` protobuf message: the response returned by the GetQueryServicesDescriptor RPC
 * @param g_queries - `queries`: provides information on the available queryable services
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetQueryServicesDescriptorResponse: (atu8_queries?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor'>>) => EncodedCosmosBaseReflectionGetQueryServicesDescriptorResponse;
/**
 * Encodes a `GetTxDescriptorRequest` protobuf message: the request used for the GetTxDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetTxDescriptorRequest: () => EncodedCosmosBaseReflectionGetTxDescriptorRequest;
/**
 * Encodes a `GetTxDescriptorResponse` protobuf message: the response returned by the GetTxDescriptor RPC
 * @param g_tx - `tx`: provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionGetTxDescriptorResponse: (atu8_tx?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.TxDescriptor'>>) => EncodedCosmosBaseReflectionGetTxDescriptorResponse;
/**
 * Encodes a `QueryServicesDescriptor` protobuf message: contains the list of cosmos-sdk queriable services
 * @param a_query_services - `query_services`: a list of cosmos-sdk QueryServiceDescriptor
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionQueryServicesDescriptor: (a_query_services?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor'>[]>) => EncodedCosmosBaseReflectionQueryServicesDescriptor;
/**
 * Encodes a `QueryServiceDescriptor` protobuf message: describes a cosmos-sdk queryable service
 * @param s_fullname - `fullname`: the protobuf fullname of the service descriptor
 * @param b_is_module - `is_module`: describes if this service is actually exposed by an application's module
 * @param a_methods - `methods`: provides a list of query service methods
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionQueryServiceDescriptor: (s_fullname?: Opt<string>, b_is_module?: Opt<boolean | 0 | 1>, a_methods?: Opt<Encoded<'/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor'>[]>) => EncodedCosmosBaseReflectionQueryServiceDescriptor;
/**
 * Encodes a `QueryMethodDescriptor` protobuf message: describes a queryable method of a query service no other info is provided beside method name and tendermint queryable path because it would be redundant with the grpc reflection service
 * @param s_name - `name`: the protobuf name (not fullname) of the method
 * @param s_full_query_path - `full_query_path`: the path that can be used to query this method via tendermint abci.Query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseReflectionQueryMethodDescriptor: (s_name?: Opt<string>, s_full_query_path?: Opt<string>) => EncodedCosmosBaseReflectionQueryMethodDescriptor;
/**
 * A decoded protobuf AppDescriptor message
 *
 * Tuple where:
 *   - 0: authn - AuthnDescriptor provides information on how to authenticate transactions on the application NOTE: experimental and subject to change in future releases.
 *   - 1: chain - provides the chain descriptor
 *   - 2: codec - provides metadata information regarding codec related types
 *   - 3: configuration - provides metadata information regarding the sdk.Config type
 *   - 4: query_services - provides metadata information regarding the available queriable endpoints
 *   - 5: tx - provides metadata information regarding how to send transactions to the given application
 */
export type DecodedCosmosBaseReflectionAppDescriptor = [
    a_authn?: DecodedCosmosBaseReflectionAuthnDescriptor,
    a_chain?: DecodedCosmosBaseReflectionChainDescriptor,
    a_codec?: DecodedCosmosBaseReflectionCodecDescriptor,
    a_configuration?: DecodedCosmosBaseReflectionConfigurationDescriptor,
    a_query_services?: DecodedCosmosBaseReflectionQueryServicesDescriptor,
    a_tx?: DecodedCosmosBaseReflectionTxDescriptor
];
/**
 * Decodes a protobuf AppDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionAppDescriptor}
 */
export declare const decodeCosmosBaseReflectionAppDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionAppDescriptor;
/**
 * A decoded protobuf TxDescriptor message
 *
 * Tuple where:
 *   - 0: fullname - the protobuf fullname of the raw transaction type (for instance the tx.Tx type) it is not meant to support polymorphism of transaction types, it is supposed to be used by reflection clients to understand if they can handle a specific transaction type in an application.
 *   - 1: msgs - lists the accepted application messages (sdk.Msg)
 */
export type DecodedCosmosBaseReflectionTxDescriptor = [
    s_fullname?: string,
    a_msgs?: DecodedCosmosBaseReflectionMsgDescriptor[]
];
/**
 * Decodes a protobuf TxDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionTxDescriptor}
 */
export declare const decodeCosmosBaseReflectionTxDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionTxDescriptor;
/**
 * A decoded protobuf AuthnDescriptor message
 *
 * Alias for: sign_modes - defines the supported signature algorithm
 */
export type DecodedCosmosBaseReflectionAuthnDescriptor = [
    a_sign_modes?: DecodedCosmosBaseReflectionSigningModeDescriptor[]
];
/**
 * Decodes a protobuf AuthnDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionAuthnDescriptor}
 */
export declare const decodeCosmosBaseReflectionAuthnDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionAuthnDescriptor;
/**
 * A decoded protobuf SigningModeDescriptor message
 *
 * Tuple where:
 *   - 0: name - defines the unique name of the signing mode
 *   - 1: number - the unique int32 identifier for the sign_mode enum
 *   - 2: authn_info_provider_method_fullname - defines the fullname of the method to call to get the metadata required to authenticate using the provided sign_modes
 */
export type DecodedCosmosBaseReflectionSigningModeDescriptor = [
    s_name?: string,
    n_number?: number,
    s_authn_info_provider_method_fullname?: string
];
/**
 * Decodes a protobuf SigningModeDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionSigningModeDescriptor}
 */
export declare const decodeCosmosBaseReflectionSigningModeDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionSigningModeDescriptor;
/**
 * A decoded protobuf ChainDescriptor message
 *
 * Alias for: id - the chain id
 */
export type DecodedCosmosBaseReflectionChainDescriptor = [
    s_id?: string
];
/**
 * Decodes a protobuf ChainDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionChainDescriptor}
 */
export declare const decodeCosmosBaseReflectionChainDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionChainDescriptor;
/**
 * A decoded protobuf CodecDescriptor message
 *
 * Alias for: interfaces - a list of the registerted interfaces descriptors
 */
export type DecodedCosmosBaseReflectionCodecDescriptor = [
    a_interfaces?: DecodedCosmosBaseReflectionInterfaceDescriptor[]
];
/**
 * Decodes a protobuf CodecDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionCodecDescriptor}
 */
export declare const decodeCosmosBaseReflectionCodecDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionCodecDescriptor;
/**
 * A decoded protobuf InterfaceDescriptor message
 *
 * Tuple where:
 *   - 0: fullname - the name of the interface
 *   - 1: interface_accepting_messages - contains information regarding the proto messages which contain the interface as google.protobuf.Any field
 *   - 2: interface_implementers - a list of the descriptors of the interface implementers
 */
export type DecodedCosmosBaseReflectionInterfaceDescriptor = [
    s_fullname?: string,
    a_interface_accepting_messages?: DecodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor[],
    a_interface_implementers?: DecodedCosmosBaseReflectionInterfaceImplementerDescriptor[]
];
/**
 * Decodes a protobuf InterfaceDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionInterfaceDescriptor}
 */
export declare const decodeCosmosBaseReflectionInterfaceDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionInterfaceDescriptor;
/**
 * A decoded protobuf InterfaceImplementerDescriptor message
 *
 * Tuple where:
 *   - 0: fullname - the protobuf queryable name of the interface implementer
 *   - 1: type_url - defines the type URL used when marshalling the type as any this is required so we can provide type safe google.protobuf.Any marshalling and unmarshalling, making sure that we don't accept just 'any' type in our interface fields
 */
export type DecodedCosmosBaseReflectionInterfaceImplementerDescriptor = [
    s_fullname?: string,
    s_type_url?: string
];
/**
 * Decodes a protobuf InterfaceImplementerDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionInterfaceImplementerDescriptor}
 */
export declare const decodeCosmosBaseReflectionInterfaceImplementerDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionInterfaceImplementerDescriptor;
/**
 * A decoded protobuf InterfaceAcceptingMessageDescriptor message
 *
 * Tuple where:
 *   - 0: fullname - the protobuf fullname of the type containing the interface
 *   - 1: field_descriptor_names - a list of the protobuf name (not fullname) of the field which contains the interface as google.protobuf.Any (the interface is the same, but it can be in multiple fields of the same proto message)
 */
export type DecodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor = [
    s_fullname?: string,
    a_field_descriptor_names?: string[]
];
/**
 * Decodes a protobuf InterfaceAcceptingMessageDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor}
 */
export declare const decodeCosmosBaseReflectionInterfaceAcceptingMessageDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor;
/**
 * A decoded protobuf ConfigurationDescriptor message
 *
 * Alias for: bech32_account_address_prefix - the account address prefix
 */
export type DecodedCosmosBaseReflectionConfigurationDescriptor = [
    s_bech32_account_address_prefix?: string
];
/**
 * Decodes a protobuf ConfigurationDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionConfigurationDescriptor}
 */
export declare const decodeCosmosBaseReflectionConfigurationDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionConfigurationDescriptor;
/**
 * A decoded protobuf Descriptor message
 *
 * Alias for: msg_type_url - contains the TypeURL of a sdk.Msg.
 */
export type DecodedCosmosBaseReflectionMsgDescriptor = [
    s_msg_type_url?: string
];
/**
 * Decodes a protobuf Descriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionMsgDescriptor}
 */
export declare const decodeCosmosBaseReflectionMsgDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionMsgDescriptor;
/**
 * A decoded protobuf GetAuthnDescriptorRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionGetAuthnDescriptorRequest = [];
/**
 * Decodes a protobuf GetAuthnDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetAuthnDescriptorRequest}
 */
export declare const decodeCosmosBaseReflectionGetAuthnDescriptorRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf GetAuthnDescriptor message
 *
 * Alias for: authn - describes how to authenticate to the application when sending transactions
 */
export type DecodedCosmosBaseReflectionGetAuthnDescriptorResponse = [
    a_authn?: DecodedCosmosBaseReflectionAuthnDescriptor
];
/**
 * Decodes a protobuf GetAuthnDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetAuthnDescriptorResponse}
 */
export declare const decodeCosmosBaseReflectionGetAuthnDescriptorResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionGetAuthnDescriptorResponse;
/**
 * A decoded protobuf GetChainDescriptorRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionGetChainDescriptorRequest = [];
/**
 * Decodes a protobuf GetChainDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetChainDescriptorRequest}
 */
export declare const decodeCosmosBaseReflectionGetChainDescriptorRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf GetChainDescriptor message
 *
 * Alias for: chain - describes application chain information
 */
export type DecodedCosmosBaseReflectionGetChainDescriptorResponse = [
    a_chain?: DecodedCosmosBaseReflectionChainDescriptor
];
/**
 * Decodes a protobuf GetChainDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetChainDescriptorResponse}
 */
export declare const decodeCosmosBaseReflectionGetChainDescriptorResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionGetChainDescriptorResponse;
/**
 * A decoded protobuf GetCodecDescriptorRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionGetCodecDescriptorRequest = [];
/**
 * Decodes a protobuf GetCodecDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetCodecDescriptorRequest}
 */
export declare const decodeCosmosBaseReflectionGetCodecDescriptorRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf GetCodecDescriptor message
 *
 * Alias for: codec - describes the application codec such as registered interfaces and implementations
 */
export type DecodedCosmosBaseReflectionGetCodecDescriptorResponse = [
    a_codec?: DecodedCosmosBaseReflectionCodecDescriptor
];
/**
 * Decodes a protobuf GetCodecDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetCodecDescriptorResponse}
 */
export declare const decodeCosmosBaseReflectionGetCodecDescriptorResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionGetCodecDescriptorResponse;
/**
 * A decoded protobuf GetConfigurationDescriptorRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionGetConfigurationDescriptorRequest = [];
/**
 * Decodes a protobuf GetConfigurationDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetConfigurationDescriptorRequest}
 */
export declare const decodeCosmosBaseReflectionGetConfigurationDescriptorRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf GetConfigurationDescriptor message
 *
 * Alias for: config - describes the application's sdk.Config
 */
export type DecodedCosmosBaseReflectionGetConfigurationDescriptorResponse = [
    a_config?: DecodedCosmosBaseReflectionConfigurationDescriptor
];
/**
 * Decodes a protobuf GetConfigurationDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetConfigurationDescriptorResponse}
 */
export declare const decodeCosmosBaseReflectionGetConfigurationDescriptorResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionGetConfigurationDescriptorResponse;
/**
 * A decoded protobuf GetQueryServicesDescriptorRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionGetQueryServicesDescriptorRequest = [];
/**
 * Decodes a protobuf GetQueryServicesDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetQueryServicesDescriptorRequest}
 */
export declare const decodeCosmosBaseReflectionGetQueryServicesDescriptorRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf GetQueryServicesDescriptor message
 *
 * Alias for: queries - provides information on the available queryable services
 */
export type DecodedCosmosBaseReflectionGetQueryServicesDescriptorResponse = [
    a_queries?: DecodedCosmosBaseReflectionQueryServicesDescriptor
];
/**
 * Decodes a protobuf GetQueryServicesDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetQueryServicesDescriptorResponse}
 */
export declare const decodeCosmosBaseReflectionGetQueryServicesDescriptorResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionGetQueryServicesDescriptorResponse;
/**
 * A decoded protobuf GetTxDescriptorRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosBaseReflectionGetTxDescriptorRequest = [];
/**
 * Decodes a protobuf GetTxDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetTxDescriptorRequest}
 */
export declare const decodeCosmosBaseReflectionGetTxDescriptorRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf GetTxDescriptor message
 *
 * Alias for: tx - provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 */
export type DecodedCosmosBaseReflectionGetTxDescriptorResponse = [
    a_tx?: DecodedCosmosBaseReflectionTxDescriptor
];
/**
 * Decodes a protobuf GetTxDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetTxDescriptorResponse}
 */
export declare const decodeCosmosBaseReflectionGetTxDescriptorResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionGetTxDescriptorResponse;
/**
 * A decoded protobuf QueryServicesDescriptor message
 *
 * Alias for: query_services - a list of cosmos-sdk QueryServiceDescriptor
 */
export type DecodedCosmosBaseReflectionQueryServicesDescriptor = [
    a_query_services?: DecodedCosmosBaseReflectionQueryServiceDescriptor[]
];
/**
 * Decodes a protobuf QueryServicesDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionQueryServicesDescriptor}
 */
export declare const decodeCosmosBaseReflectionQueryServicesDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionQueryServicesDescriptor;
/**
 * A decoded protobuf QueryServiceDescriptor message
 *
 * Tuple where:
 *   - 0: fullname - the protobuf fullname of the service descriptor
 *   - 1: is_module - describes if this service is actually exposed by an application's module
 *   - 2: methods - provides a list of query service methods
 */
export type DecodedCosmosBaseReflectionQueryServiceDescriptor = [
    s_fullname?: string,
    b_is_module?: 0 | 1,
    a_methods?: DecodedCosmosBaseReflectionQueryMethodDescriptor[]
];
/**
 * Decodes a protobuf QueryServiceDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionQueryServiceDescriptor}
 */
export declare const decodeCosmosBaseReflectionQueryServiceDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionQueryServiceDescriptor;
/**
 * A decoded protobuf QueryMethodDescriptor message
 *
 * Tuple where:
 *   - 0: name - the protobuf name (not fullname) of the method
 *   - 1: full_query_path - the path that can be used to query this method via tendermint abci.Query
 */
export type DecodedCosmosBaseReflectionQueryMethodDescriptor = [
    s_name?: string,
    s_full_query_path?: string
];
/**
 * Decodes a protobuf QueryMethodDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionQueryMethodDescriptor}
 */
export declare const decodeCosmosBaseReflectionQueryMethodDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosBaseReflectionQueryMethodDescriptor;
/**
 * Destructures the fields of a {@link CosmosBaseReflectionAppDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authn - AuthnDescriptor provides information on how to authenticate transactions on the application NOTE: experimental and subject to change in future releases.
 *   - 1: chain - provides the chain descriptor
 *   - 2: codec - provides metadata information regarding codec related types
 *   - 3: configuration - provides metadata information regarding the sdk.Config type
 *   - 4: query_services - provides metadata information regarding the available queriable endpoints
 *   - 5: tx - provides metadata information regarding how to send transactions to the given application
 */
export declare const destructCosmosBaseReflectionAppDescriptor: (g_struct: CosmosBaseReflectionAppDescriptor) => [authn?: CosmosBaseReflectionAuthnDescriptor, chain?: CosmosBaseReflectionChainDescriptor, codec?: CosmosBaseReflectionCodecDescriptor, configuration?: CosmosBaseReflectionConfigurationDescriptor, query_services?: CosmosBaseReflectionQueryServicesDescriptor, tx?: CosmosBaseReflectionTxDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_APP_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.AppDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.AppDescriptor` - describes a cosmos-sdk based application
 */
export type CosmosBaseReflectionAppDescriptor = {
    authn?: CosmosBaseReflectionAuthnDescriptor | undefined;
    chain?: CosmosBaseReflectionChainDescriptor | undefined;
    codec?: CosmosBaseReflectionCodecDescriptor | undefined;
    configuration?: CosmosBaseReflectionConfigurationDescriptor | undefined;
    query_services?: CosmosBaseReflectionQueryServicesDescriptor | undefined;
    tx?: CosmosBaseReflectionTxDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionAuthnDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sign_modes - defines the supported signature algorithm
 */
export declare const destructCosmosBaseReflectionAuthnDescriptor: (g_struct: CosmosBaseReflectionAuthnDescriptor) => [sign_modes?: CosmosBaseReflectionSigningModeDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_AUTHN_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.AuthnDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.AuthnDescriptor` - provides information on how to sign transactions without relying on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
 */
export type CosmosBaseReflectionAuthnDescriptor = {
    sign_modes?: CosmosBaseReflectionSigningModeDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionSigningModeDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - defines the unique name of the signing mode
 *   - 1: number - the unique int32 identifier for the sign_mode enum
 *   - 2: authn_info_provider_method_fullname - defines the fullname of the method to call to get the metadata required to authenticate using the provided sign_modes
 */
export declare const destructCosmosBaseReflectionSigningModeDescriptor: (g_struct: CosmosBaseReflectionSigningModeDescriptor) => [name?: string, number?: number, authn_info_provider_method_fullname?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_SIGNING_MODE_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.SigningModeDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.SigningModeDescriptor` - provides information on a signing flow of the application NOTE(fdymylja): here we could go as far as providing an entire flow on how to sign a message given a SigningModeDescriptor, but it's better to think about this another time
 */
export type CosmosBaseReflectionSigningModeDescriptor = {
    name?: string | undefined;
    number?: number | undefined;
    authn_info_provider_method_fullname?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionChainDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - the chain id
 */
export declare const destructCosmosBaseReflectionChainDescriptor: (g_struct: CosmosBaseReflectionChainDescriptor) => [id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_CHAIN_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.ChainDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.ChainDescriptor` - describes chain information of the application
 */
export type CosmosBaseReflectionChainDescriptor = {
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionCodecDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interfaces - a list of the registerted interfaces descriptors
 */
export declare const destructCosmosBaseReflectionCodecDescriptor: (g_struct: CosmosBaseReflectionCodecDescriptor) => [interfaces?: CosmosBaseReflectionInterfaceDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_CODEC_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.CodecDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.CodecDescriptor` - describes the registered interfaces and provides metadata information on the types
 */
export type CosmosBaseReflectionCodecDescriptor = {
    interfaces?: CosmosBaseReflectionInterfaceDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionInterfaceDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the name of the interface
 *   - 1: interface_accepting_messages - contains information regarding the proto messages which contain the interface as google.protobuf.Any field
 *   - 2: interface_implementers - a list of the descriptors of the interface implementers
 */
export declare const destructCosmosBaseReflectionInterfaceDescriptor: (g_struct: CosmosBaseReflectionInterfaceDescriptor) => [fullname?: string, interface_accepting_messages?: CosmosBaseReflectionInterfaceAcceptingMessageDescriptor[], interface_implementers?: CosmosBaseReflectionInterfaceImplementerDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_INTERFACE_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.InterfaceDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.InterfaceDescriptor` - describes the implementation of an interface
 */
export type CosmosBaseReflectionInterfaceDescriptor = {
    fullname?: string | undefined;
    interface_accepting_messages?: CosmosBaseReflectionInterfaceAcceptingMessageDescriptor[] | undefined;
    interface_implementers?: CosmosBaseReflectionInterfaceImplementerDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionInterfaceAcceptingMessageDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf fullname of the type containing the interface
 *   - 1: field_descriptor_names - a list of the protobuf name (not fullname) of the field which contains the interface as google.protobuf.Any (the interface is the same, but it can be in multiple fields of the same proto message)
 */
export declare const destructCosmosBaseReflectionInterfaceAcceptingMessageDescriptor: (g_struct: CosmosBaseReflectionInterfaceAcceptingMessageDescriptor) => [fullname?: string, field_descriptor_names?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_INTERFACE_ACCEPTING_MESSAGE_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor` - describes a protobuf message which contains an interface represented as a google.protobuf.Any
 */
export type CosmosBaseReflectionInterfaceAcceptingMessageDescriptor = {
    fullname?: string | undefined;
    field_descriptor_names?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionInterfaceImplementerDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf queryable name of the interface implementer
 *   - 1: type_url - defines the type URL used when marshalling the type as any this is required so we can provide type safe google.protobuf.Any marshalling and unmarshalling, making sure that we don't accept just 'any' type in our interface fields
 */
export declare const destructCosmosBaseReflectionInterfaceImplementerDescriptor: (g_struct: CosmosBaseReflectionInterfaceImplementerDescriptor) => [fullname?: string, type_url?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_INTERFACE_IMPLEMENTER_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor` - describes an interface implementer
 */
export type CosmosBaseReflectionInterfaceImplementerDescriptor = {
    fullname?: string | undefined;
    type_url?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionConfigurationDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bech32_account_address_prefix - the account address prefix
 */
export declare const destructCosmosBaseReflectionConfigurationDescriptor: (g_struct: CosmosBaseReflectionConfigurationDescriptor) => [bech32_account_address_prefix?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_CONFIGURATION_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.ConfigurationDescriptor` - contains metadata information on the sdk.Config
 */
export type CosmosBaseReflectionConfigurationDescriptor = {
    bech32_account_address_prefix?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionQueryServicesDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: query_services - a list of cosmos-sdk QueryServiceDescriptor
 */
export declare const destructCosmosBaseReflectionQueryServicesDescriptor: (g_struct: CosmosBaseReflectionQueryServicesDescriptor) => [query_services?: CosmosBaseReflectionQueryServiceDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_QUERY_SERVICES_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.QueryServicesDescriptor` - contains the list of cosmos-sdk queriable services
 */
export type CosmosBaseReflectionQueryServicesDescriptor = {
    query_services?: CosmosBaseReflectionQueryServiceDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionQueryServiceDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf fullname of the service descriptor
 *   - 1: is_module - describes if this service is actually exposed by an application's module
 *   - 2: methods - provides a list of query service methods
 */
export declare const destructCosmosBaseReflectionQueryServiceDescriptor: (g_struct: CosmosBaseReflectionQueryServiceDescriptor) => [fullname?: string, is_module?: boolean, methods?: CosmosBaseReflectionQueryMethodDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_QUERY_SERVICE_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.QueryServiceDescriptor` - describes a cosmos-sdk queryable service
 */
export type CosmosBaseReflectionQueryServiceDescriptor = {
    fullname?: string | undefined;
    is_module?: boolean | undefined;
    methods?: CosmosBaseReflectionQueryMethodDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionQueryMethodDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - the protobuf name (not fullname) of the method
 *   - 1: full_query_path - the path that can be used to query this method via tendermint abci.Query
 */
export declare const destructCosmosBaseReflectionQueryMethodDescriptor: (g_struct: CosmosBaseReflectionQueryMethodDescriptor) => [name?: string, full_query_path?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_QUERY_METHOD_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.QueryMethodDescriptor` - describes a queryable method of a query service no other info is provided beside method name and tendermint queryable path because it would be redundant with the grpc reflection service
 */
export type CosmosBaseReflectionQueryMethodDescriptor = {
    name?: string | undefined;
    full_query_path?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionTxDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf fullname of the raw transaction type (for instance the tx.Tx type) it is not meant to support polymorphism of transaction types, it is supposed to be used by reflection clients to understand if they can handle a specific transaction type in an application.
 *   - 1: msgs - lists the accepted application messages (sdk.Msg)
 */
export declare const destructCosmosBaseReflectionTxDescriptor: (g_struct: CosmosBaseReflectionTxDescriptor) => [fullname?: string, msgs?: CosmosBaseReflectionMsgDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_TX_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.TxDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.TxDescriptor` - describes the accepted transaction type
 */
export type CosmosBaseReflectionTxDescriptor = {
    fullname?: string | undefined;
    msgs?: CosmosBaseReflectionMsgDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionMsgDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_type_url - contains the TypeURL of a sdk.Msg.
 */
export declare const destructCosmosBaseReflectionMsgDescriptor: (g_struct: CosmosBaseReflectionMsgDescriptor) => [msg_type_url?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_MSG_DESCRIPTOR = "/cosmos.base.reflection.v2alpha1.MsgDescriptor";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.MsgDescriptor` - describes a cosmos-sdk message that can be delivered with a transaction
 */
export type CosmosBaseReflectionMsgDescriptor = {
    msg_type_url?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetAuthnDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionGetAuthnDescriptorRequest: (g_struct: CosmosBaseReflectionGetAuthnDescriptorRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_AUTHN_DESCRIPTOR_REQUEST = "/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest` - the request used for the GetAuthnDescriptor RPC
 */
export type CosmosBaseReflectionGetAuthnDescriptorRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetAuthnDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authn - describes how to authenticate to the application when sending transactions
 */
export declare const destructCosmosBaseReflectionGetAuthnDescriptorResponse: (g_struct: CosmosBaseReflectionGetAuthnDescriptorResponse) => [authn?: CosmosBaseReflectionAuthnDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_AUTHN_DESCRIPTOR_RESPONSE = "/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse` - the response returned by the GetAuthnDescriptor RPC
 */
export type CosmosBaseReflectionGetAuthnDescriptorResponse = {
    authn?: CosmosBaseReflectionAuthnDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetChainDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionGetChainDescriptorRequest: (g_struct: CosmosBaseReflectionGetChainDescriptorRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CHAIN_DESCRIPTOR_REQUEST = "/cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest` - the request used for the GetChainDescriptor RPC
 */
export type CosmosBaseReflectionGetChainDescriptorRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetChainDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain - describes application chain information
 */
export declare const destructCosmosBaseReflectionGetChainDescriptorResponse: (g_struct: CosmosBaseReflectionGetChainDescriptorResponse) => [chain?: CosmosBaseReflectionChainDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CHAIN_DESCRIPTOR_RESPONSE = "/cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse` - the response returned by the GetChainDescriptor RPC
 */
export type CosmosBaseReflectionGetChainDescriptorResponse = {
    chain?: CosmosBaseReflectionChainDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetCodecDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionGetCodecDescriptorRequest: (g_struct: CosmosBaseReflectionGetCodecDescriptorRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CODEC_DESCRIPTOR_REQUEST = "/cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest` - the request used for the GetCodecDescriptor RPC
 */
export type CosmosBaseReflectionGetCodecDescriptorRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetCodecDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: codec - describes the application codec such as registered interfaces and implementations
 */
export declare const destructCosmosBaseReflectionGetCodecDescriptorResponse: (g_struct: CosmosBaseReflectionGetCodecDescriptorResponse) => [codec?: CosmosBaseReflectionCodecDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CODEC_DESCRIPTOR_RESPONSE = "/cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse` - the response returned by the GetCodecDescriptor RPC
 */
export type CosmosBaseReflectionGetCodecDescriptorResponse = {
    codec?: CosmosBaseReflectionCodecDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetConfigurationDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionGetConfigurationDescriptorRequest: (g_struct: CosmosBaseReflectionGetConfigurationDescriptorRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CONFIGURATION_DESCRIPTOR_REQUEST = "/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest` - the request used for the GetConfigurationDescriptor RPC
 */
export type CosmosBaseReflectionGetConfigurationDescriptorRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetConfigurationDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: config - describes the application's sdk.Config
 */
export declare const destructCosmosBaseReflectionGetConfigurationDescriptorResponse: (g_struct: CosmosBaseReflectionGetConfigurationDescriptorResponse) => [config?: CosmosBaseReflectionConfigurationDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CONFIGURATION_DESCRIPTOR_RESPONSE = "/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse` - the response returned by the GetConfigurationDescriptor RPC
 */
export type CosmosBaseReflectionGetConfigurationDescriptorResponse = {
    config?: CosmosBaseReflectionConfigurationDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetQueryServicesDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionGetQueryServicesDescriptorRequest: (g_struct: CosmosBaseReflectionGetQueryServicesDescriptorRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_QUERY_SERVICES_DESCRIPTOR_REQUEST = "/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest` - the request used for the GetQueryServicesDescriptor RPC
 */
export type CosmosBaseReflectionGetQueryServicesDescriptorRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetQueryServicesDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: queries - provides information on the available queryable services
 */
export declare const destructCosmosBaseReflectionGetQueryServicesDescriptorResponse: (g_struct: CosmosBaseReflectionGetQueryServicesDescriptorResponse) => [queries?: CosmosBaseReflectionQueryServicesDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_QUERY_SERVICES_DESCRIPTOR_RESPONSE = "/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse` - the response returned by the GetQueryServicesDescriptor RPC
 */
export type CosmosBaseReflectionGetQueryServicesDescriptorResponse = {
    queries?: CosmosBaseReflectionQueryServicesDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetTxDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosBaseReflectionGetTxDescriptorRequest: (g_struct: CosmosBaseReflectionGetTxDescriptorRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_TX_DESCRIPTOR_REQUEST = "/cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest` - the request used for the GetTxDescriptor RPC
 */
export type CosmosBaseReflectionGetTxDescriptorRequest = {};
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetTxDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 */
export declare const destructCosmosBaseReflectionGetTxDescriptorResponse: (g_struct: CosmosBaseReflectionGetTxDescriptorResponse) => [tx?: CosmosBaseReflectionTxDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_TX_DESCRIPTOR_RESPONSE = "/cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse";
/**
 * JSON serialization of `cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse` - the response returned by the GetTxDescriptor RPC
 */
export type CosmosBaseReflectionGetTxDescriptorResponse = {
    tx?: CosmosBaseReflectionTxDescriptor | undefined;
};
