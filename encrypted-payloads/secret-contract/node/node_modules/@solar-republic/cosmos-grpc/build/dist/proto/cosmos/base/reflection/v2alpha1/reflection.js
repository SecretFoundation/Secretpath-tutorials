/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../../api/transport.js';
const SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE = '/cosmos/base/reflection/v1beta1/app_descriptor/';
/**
 * Returns information on how to authenticate transactions in the application NOTE: this RPC is still experimental and might be subject to breaking changes or removal in future releases of the cosmos-sdk.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: authn - describes how to authenticate to the application when sending transactions
 */
export const queryCosmosBaseReflectionGetAuthnDescriptor = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + 'authn']);
/**
 * Returns the description of the chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: chain - describes application chain information
 */
export const queryCosmosBaseReflectionGetChainDescriptor = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + 'chain']);
/**
 * Returns the descriptor of the codec of the application
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: codec - describes the application codec such as registered interfaces and implementations
 */
export const queryCosmosBaseReflectionGetCodecDescriptor = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + 'codec']);
/**
 * Returns the descriptor for the sdk.Config of the application
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: config - describes the application's sdk.Config
 */
export const queryCosmosBaseReflectionGetConfigurationDescriptor = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + 'configuration']);
/**
 * Returns the available gRPC queryable services of the application
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: queries - provides information on the available queryable services
 */
export const queryCosmosBaseReflectionGetQueryServicesDescriptor = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + 'query_services']);
/**
 * Returns information on the used transaction object and available msgs that can be used
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: tx - provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 */
export const queryCosmosBaseReflectionGetTxDescriptor = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + 'tx_descriptor']);
/**
 * Encodes a `AppDescriptor` protobuf message: describes a cosmos-sdk based application
 * @param g_authn - `authn`: AuthnDescriptor provides information on how to authenticate transactions on the application NOTE: experimental and subject to change in future releases.
 * @param g_chain - `chain`: provides the chain descriptor
 * @param g_codec - `codec`: provides metadata information regarding codec related types
 * @param g_configuration - `configuration`: provides metadata information regarding the sdk.Config type
 * @param g_query_services - `query_services`: provides metadata information regarding the available queriable endpoints
 * @param g_tx - `tx`: provides metadata information regarding how to send transactions to the given application
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionAppDescriptor = (atu8_authn, atu8_chain, atu8_codec, atu8_configuration, atu8_query_services, atu8_tx) => Protobuf() // ...
    .b(atu8_authn) // AuthnDescriptor authn = 1
    .b(atu8_chain) // ChainDescriptor chain = 2
    .b(atu8_codec) // CodecDescriptor codec = 3
    .b(atu8_configuration) // ConfigurationDescriptor configuration = 4
    .b(atu8_query_services) // QueryServicesDescriptor query_services = 5
    .b(atu8_tx) // TxDescriptor tx = 6
    .o;
/**
 * Encodes a `TxDescriptor` protobuf message: describes the accepted transaction type
 * @param s_fullname - `fullname`: the protobuf fullname of the raw transaction type (for instance the tx.Tx type) it is not meant to support polymorphism of transaction types, it is supposed to be used by reflection clients to understand if they can handle a specific transaction type in an application.
 * @param a_msgs - `msgs`: lists the accepted application messages (sdk.Msg)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionTxDescriptor = (s_fullname, a_msgs) => Protobuf() // ...
    .s(s_fullname) // string fullname = 1
    .B(a_msgs) // MsgDescriptor[] msgs = 2
    .o;
/**
 * Encodes a `AuthnDescriptor` protobuf message: provides information on how to sign transactions without relying on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
 * @param a_sign_modes - `sign_modes`: defines the supported signature algorithm
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionAuthnDescriptor = (a_sign_modes) => Protobuf() // ...
    .B(a_sign_modes) // SigningModeDescriptor[] sign_modes = 1
    .o;
/**
 * Encodes a `SigningModeDescriptor` protobuf message: provides information on a signing flow of the application NOTE(fdymylja): here we could go as far as providing an entire flow on how to sign a message given a SigningModeDescriptor, but it's better to think about this another time
 * @param s_name - `name`: defines the unique name of the signing mode
 * @param n_number - `number`: the unique int32 identifier for the sign_mode enum
 * @param s_authn_info_provider_method_fullname - `authn_info_provider_method_fullname`: defines the fullname of the method to call to get the metadata required to authenticate using the provided sign_modes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionSigningModeDescriptor = (s_name, n_number, s_authn_info_provider_method_fullname) => Protobuf() // ...
    .s(s_name) // string name = 1
    .v(n_number) // int32 number = 2
    .s(s_authn_info_provider_method_fullname) // string authn_info_provider_method_fullname = 3
    .o;
/**
 * Encodes a `ChainDescriptor` protobuf message: describes chain information of the application
 * @param s_id - `id`: the chain id
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionChainDescriptor = (s_id) => Protobuf() // ...
    .s(s_id) // string id = 1
    .o;
/**
 * Encodes a `CodecDescriptor` protobuf message: describes the registered interfaces and provides metadata information on the types
 * @param a_interfaces - `interfaces`: a list of the registerted interfaces descriptors
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionCodecDescriptor = (a_interfaces) => Protobuf() // ...
    .B(a_interfaces) // InterfaceDescriptor[] interfaces = 1
    .o;
/**
 * Encodes a `InterfaceDescriptor` protobuf message: describes the implementation of an interface
 * @param s_fullname - `fullname`: the name of the interface
 * @param a_interface_accepting_messages - `interface_accepting_messages`: contains information regarding the proto messages which contain the interface as google.protobuf.Any field
 * @param a_interface_implementers - `interface_implementers`: a list of the descriptors of the interface implementers
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionInterfaceDescriptor = (s_fullname, a_interface_accepting_messages, a_interface_implementers) => Protobuf() // ...
    .s(s_fullname) // string fullname = 1
    .B(a_interface_accepting_messages) // InterfaceAcceptingMessageDescriptor[] interface_accepting_messages = 2
    .B(a_interface_implementers) // InterfaceImplementerDescriptor[] interface_implementers = 3
    .o;
/**
 * Encodes a `InterfaceImplementerDescriptor` protobuf message: describes an interface implementer
 * @param s_fullname - `fullname`: the protobuf queryable name of the interface implementer
 * @param s_type_url - `type_url`: defines the type URL used when marshalling the type as any this is required so we can provide type safe google.protobuf.Any marshalling and unmarshalling, making sure that we don't accept just 'any' type in our interface fields
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionInterfaceImplementerDescriptor = (s_fullname, s_type_url) => Protobuf() // ...
    .s(s_fullname) // string fullname = 1
    .s(s_type_url) // string type_url = 2
    .o;
/**
 * Encodes a `InterfaceAcceptingMessageDescriptor` protobuf message: describes a protobuf message which contains an interface represented as a google.protobuf.Any
 * @param s_fullname - `fullname`: the protobuf fullname of the type containing the interface
 * @param a_field_descriptor_names - `field_descriptor_names`: a list of the protobuf name (not fullname) of the field which contains the interface as google.protobuf.Any (the interface is the same, but it can be in multiple fields of the same proto message)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionInterfaceAcceptingMessageDescriptor = (s_fullname, a_field_descriptor_names) => Protobuf() // ...
    .s(s_fullname) // string fullname = 1
    .S(a_field_descriptor_names) // string[] field_descriptor_names = 2
    .o;
/**
 * Encodes a `ConfigurationDescriptor` protobuf message: contains metadata information on the sdk.Config
 * @param s_bech32_account_address_prefix - `bech32_account_address_prefix`: the account address prefix
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionConfigurationDescriptor = (s_bech32_account_address_prefix) => Protobuf() // ...
    .s(s_bech32_account_address_prefix) // string bech32_account_address_prefix = 1
    .o;
/**
 * Encodes a `MsgDescriptor` protobuf message: describes a cosmos-sdk message that can be delivered with a transaction
 * @param s_msg_type_url - `msg_type_url`: contains the TypeURL of a sdk.Msg.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionMsgDescriptor = (s_msg_type_url) => Protobuf() // ...
    .s(s_msg_type_url) // string msg_type_url = 1
    .o;
/**
 * Encodes a `GetAuthnDescriptorRequest` protobuf message: the request used for the GetAuthnDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetAuthnDescriptorRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GetAuthnDescriptorResponse` protobuf message: the response returned by the GetAuthnDescriptor RPC
 * @param g_authn - `authn`: describes how to authenticate to the application when sending transactions
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetAuthnDescriptorResponse = (atu8_authn) => Protobuf() // ...
    .b(atu8_authn) // AuthnDescriptor authn = 1
    .o;
/**
 * Encodes a `GetChainDescriptorRequest` protobuf message: the request used for the GetChainDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetChainDescriptorRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GetChainDescriptorResponse` protobuf message: the response returned by the GetChainDescriptor RPC
 * @param g_chain - `chain`: describes application chain information
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetChainDescriptorResponse = (atu8_chain) => Protobuf() // ...
    .b(atu8_chain) // ChainDescriptor chain = 1
    .o;
/**
 * Encodes a `GetCodecDescriptorRequest` protobuf message: the request used for the GetCodecDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetCodecDescriptorRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GetCodecDescriptorResponse` protobuf message: the response returned by the GetCodecDescriptor RPC
 * @param g_codec - `codec`: describes the application codec such as registered interfaces and implementations
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetCodecDescriptorResponse = (atu8_codec) => Protobuf() // ...
    .b(atu8_codec) // CodecDescriptor codec = 1
    .o;
/**
 * Encodes a `GetConfigurationDescriptorRequest` protobuf message: the request used for the GetConfigurationDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetConfigurationDescriptorRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GetConfigurationDescriptorResponse` protobuf message: the response returned by the GetConfigurationDescriptor RPC
 * @param g_config - `config`: describes the application's sdk.Config
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetConfigurationDescriptorResponse = (atu8_config) => Protobuf() // ...
    .b(atu8_config) // ConfigurationDescriptor config = 1
    .o;
/**
 * Encodes a `GetQueryServicesDescriptorRequest` protobuf message: the request used for the GetQueryServicesDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetQueryServicesDescriptorRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GetQueryServicesDescriptorResponse` protobuf message: the response returned by the GetQueryServicesDescriptor RPC
 * @param g_queries - `queries`: provides information on the available queryable services
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetQueryServicesDescriptorResponse = (atu8_queries) => Protobuf() // ...
    .b(atu8_queries) // QueryServicesDescriptor queries = 1
    .o;
/**
 * Encodes a `GetTxDescriptorRequest` protobuf message: the request used for the GetTxDescriptor RPC
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetTxDescriptorRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GetTxDescriptorResponse` protobuf message: the response returned by the GetTxDescriptor RPC
 * @param g_tx - `tx`: provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionGetTxDescriptorResponse = (atu8_tx) => Protobuf() // ...
    .b(atu8_tx) // TxDescriptor tx = 1
    .o;
/**
 * Encodes a `QueryServicesDescriptor` protobuf message: contains the list of cosmos-sdk queriable services
 * @param a_query_services - `query_services`: a list of cosmos-sdk QueryServiceDescriptor
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionQueryServicesDescriptor = (a_query_services) => Protobuf() // ...
    .B(a_query_services) // QueryServiceDescriptor[] query_services = 1
    .o;
/**
 * Encodes a `QueryServiceDescriptor` protobuf message: describes a cosmos-sdk queryable service
 * @param s_fullname - `fullname`: the protobuf fullname of the service descriptor
 * @param b_is_module - `is_module`: describes if this service is actually exposed by an application's module
 * @param a_methods - `methods`: provides a list of query service methods
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionQueryServiceDescriptor = (s_fullname, b_is_module, a_methods) => Protobuf() // ...
    .s(s_fullname) // string fullname = 1
    .v(b_is_module) // boolean is_module = 2
    .B(a_methods) // QueryMethodDescriptor[] methods = 3
    .o;
/**
 * Encodes a `QueryMethodDescriptor` protobuf message: describes a queryable method of a query service no other info is provided beside method name and tendermint queryable path because it would be redundant with the grpc reflection service
 * @param s_name - `name`: the protobuf name (not fullname) of the method
 * @param s_full_query_path - `full_query_path`: the path that can be used to query this method via tendermint abci.Query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionQueryMethodDescriptor = (s_name, s_full_query_path) => Protobuf() // ...
    .s(s_name) // string name = 1
    .s(s_full_query_path) // string full_query_path = 2
    .o;
/**
 * Decodes a protobuf AppDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionAppDescriptor}
 */
export const decodeCosmosBaseReflectionAppDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1, 1, 1], [decodeCosmosBaseReflectionAuthnDescriptor, decodeCosmosBaseReflectionChainDescriptor, decodeCosmosBaseReflectionCodecDescriptor, decodeCosmosBaseReflectionConfigurationDescriptor, decodeCosmosBaseReflectionQueryServicesDescriptor, decodeCosmosBaseReflectionTxDescriptor]);
/**
 * Decodes a protobuf TxDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionTxDescriptor}
 */
export const decodeCosmosBaseReflectionTxDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeCosmosBaseReflectionMsgDescriptor]);
/**
 * Decodes a protobuf AuthnDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionAuthnDescriptor}
 */
export const decodeCosmosBaseReflectionAuthnDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseReflectionSigningModeDescriptor]);
/**
 * Decodes a protobuf SigningModeDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionSigningModeDescriptor}
 */
export const decodeCosmosBaseReflectionSigningModeDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5]);
/**
 * Decodes a protobuf ChainDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionChainDescriptor}
 */
export const decodeCosmosBaseReflectionChainDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf CodecDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionCodecDescriptor}
 */
export const decodeCosmosBaseReflectionCodecDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseReflectionInterfaceDescriptor]);
/**
 * Decodes a protobuf InterfaceDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionInterfaceDescriptor}
 */
export const decodeCosmosBaseReflectionInterfaceDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 0], [0, decodeCosmosBaseReflectionInterfaceAcceptingMessageDescriptor, decodeCosmosBaseReflectionInterfaceImplementerDescriptor]);
/**
 * Decodes a protobuf InterfaceImplementerDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionInterfaceImplementerDescriptor}
 */
export const decodeCosmosBaseReflectionInterfaceImplementerDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf InterfaceAcceptingMessageDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionInterfaceAcceptingMessageDescriptor}
 */
export const decodeCosmosBaseReflectionInterfaceAcceptingMessageDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf ConfigurationDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionConfigurationDescriptor}
 */
export const decodeCosmosBaseReflectionConfigurationDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf Descriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionMsgDescriptor}
 */
export const decodeCosmosBaseReflectionMsgDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf GetAuthnDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetAuthnDescriptorRequest}
 */
export const decodeCosmosBaseReflectionGetAuthnDescriptorRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GetAuthnDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetAuthnDescriptorResponse}
 */
export const decodeCosmosBaseReflectionGetAuthnDescriptorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseReflectionAuthnDescriptor]);
/**
 * Decodes a protobuf GetChainDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetChainDescriptorRequest}
 */
export const decodeCosmosBaseReflectionGetChainDescriptorRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GetChainDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetChainDescriptorResponse}
 */
export const decodeCosmosBaseReflectionGetChainDescriptorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseReflectionChainDescriptor]);
/**
 * Decodes a protobuf GetCodecDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetCodecDescriptorRequest}
 */
export const decodeCosmosBaseReflectionGetCodecDescriptorRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GetCodecDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetCodecDescriptorResponse}
 */
export const decodeCosmosBaseReflectionGetCodecDescriptorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseReflectionCodecDescriptor]);
/**
 * Decodes a protobuf GetConfigurationDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetConfigurationDescriptorRequest}
 */
export const decodeCosmosBaseReflectionGetConfigurationDescriptorRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GetConfigurationDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetConfigurationDescriptorResponse}
 */
export const decodeCosmosBaseReflectionGetConfigurationDescriptorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseReflectionConfigurationDescriptor]);
/**
 * Decodes a protobuf GetQueryServicesDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetQueryServicesDescriptorRequest}
 */
export const decodeCosmosBaseReflectionGetQueryServicesDescriptorRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GetQueryServicesDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetQueryServicesDescriptorResponse}
 */
export const decodeCosmosBaseReflectionGetQueryServicesDescriptorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseReflectionQueryServicesDescriptor]);
/**
 * Decodes a protobuf GetTxDescriptorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetTxDescriptorRequest}
 */
export const decodeCosmosBaseReflectionGetTxDescriptorRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GetTxDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionGetTxDescriptorResponse}
 */
export const decodeCosmosBaseReflectionGetTxDescriptorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseReflectionTxDescriptor]);
/**
 * Decodes a protobuf QueryServicesDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionQueryServicesDescriptor}
 */
export const decodeCosmosBaseReflectionQueryServicesDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseReflectionQueryServiceDescriptor]);
/**
 * Decodes a protobuf QueryServiceDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionQueryServiceDescriptor}
 */
export const decodeCosmosBaseReflectionQueryServiceDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0], [0, 0, decodeCosmosBaseReflectionQueryMethodDescriptor]);
/**
 * Decodes a protobuf QueryMethodDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionQueryMethodDescriptor}
 */
export const decodeCosmosBaseReflectionQueryMethodDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Destructures the fields of a {@link CosmosBaseReflectionAppDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authn - AuthnDescriptor provides information on how to authenticate transactions on the application NOTE: experimental and subject to change in future releases.
 *   - 1: chain - provides the chain descriptor
 *   - 2: codec - provides metadata information regarding codec related types
 *   - 3: configuration - provides metadata information regarding the sdk.Config type
 *   - 4: query_services - provides metadata information regarding the available queriable endpoints
 *   - 5: tx - provides metadata information regarding how to send transactions to the given application
 */
export const destructCosmosBaseReflectionAppDescriptor = (g_struct) => [g_struct.authn, g_struct.chain, g_struct.codec, g_struct.configuration, g_struct.query_services, g_struct.tx];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_APP_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.AppDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionAuthnDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sign_modes - defines the supported signature algorithm
 */
export const destructCosmosBaseReflectionAuthnDescriptor = (g_struct) => [g_struct.sign_modes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_AUTHN_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.AuthnDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionSigningModeDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - defines the unique name of the signing mode
 *   - 1: number - the unique int32 identifier for the sign_mode enum
 *   - 2: authn_info_provider_method_fullname - defines the fullname of the method to call to get the metadata required to authenticate using the provided sign_modes
 */
export const destructCosmosBaseReflectionSigningModeDescriptor = (g_struct) => [g_struct.name, g_struct.number, g_struct.authn_info_provider_method_fullname];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_SIGNING_MODE_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.SigningModeDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionChainDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - the chain id
 */
export const destructCosmosBaseReflectionChainDescriptor = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_CHAIN_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.ChainDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionCodecDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interfaces - a list of the registerted interfaces descriptors
 */
export const destructCosmosBaseReflectionCodecDescriptor = (g_struct) => [g_struct.interfaces];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_CODEC_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.CodecDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionInterfaceDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the name of the interface
 *   - 1: interface_accepting_messages - contains information regarding the proto messages which contain the interface as google.protobuf.Any field
 *   - 2: interface_implementers - a list of the descriptors of the interface implementers
 */
export const destructCosmosBaseReflectionInterfaceDescriptor = (g_struct) => [g_struct.fullname, g_struct.interface_accepting_messages, g_struct.interface_implementers];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_INTERFACE_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.InterfaceDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionInterfaceAcceptingMessageDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf fullname of the type containing the interface
 *   - 1: field_descriptor_names - a list of the protobuf name (not fullname) of the field which contains the interface as google.protobuf.Any (the interface is the same, but it can be in multiple fields of the same proto message)
 */
export const destructCosmosBaseReflectionInterfaceAcceptingMessageDescriptor = (g_struct) => [g_struct.fullname, g_struct.field_descriptor_names];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_INTERFACE_ACCEPTING_MESSAGE_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionInterfaceImplementerDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf queryable name of the interface implementer
 *   - 1: type_url - defines the type URL used when marshalling the type as any this is required so we can provide type safe google.protobuf.Any marshalling and unmarshalling, making sure that we don't accept just 'any' type in our interface fields
 */
export const destructCosmosBaseReflectionInterfaceImplementerDescriptor = (g_struct) => [g_struct.fullname, g_struct.type_url];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_INTERFACE_IMPLEMENTER_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionConfigurationDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bech32_account_address_prefix - the account address prefix
 */
export const destructCosmosBaseReflectionConfigurationDescriptor = (g_struct) => [g_struct.bech32_account_address_prefix];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_CONFIGURATION_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.ConfigurationDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionQueryServicesDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: query_services - a list of cosmos-sdk QueryServiceDescriptor
 */
export const destructCosmosBaseReflectionQueryServicesDescriptor = (g_struct) => [g_struct.query_services];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_QUERY_SERVICES_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.QueryServicesDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionQueryServiceDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf fullname of the service descriptor
 *   - 1: is_module - describes if this service is actually exposed by an application's module
 *   - 2: methods - provides a list of query service methods
 */
export const destructCosmosBaseReflectionQueryServiceDescriptor = (g_struct) => [g_struct.fullname, g_struct.is_module, g_struct.methods];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_QUERY_SERVICE_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.QueryServiceDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionQueryMethodDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - the protobuf name (not fullname) of the method
 *   - 1: full_query_path - the path that can be used to query this method via tendermint abci.Query
 */
export const destructCosmosBaseReflectionQueryMethodDescriptor = (g_struct) => [g_struct.name, g_struct.full_query_path];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_QUERY_METHOD_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.QueryMethodDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionTxDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fullname - the protobuf fullname of the raw transaction type (for instance the tx.Tx type) it is not meant to support polymorphism of transaction types, it is supposed to be used by reflection clients to understand if they can handle a specific transaction type in an application.
 *   - 1: msgs - lists the accepted application messages (sdk.Msg)
 */
export const destructCosmosBaseReflectionTxDescriptor = (g_struct) => [g_struct.fullname, g_struct.msgs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_TX_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.TxDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionMsgDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_type_url - contains the TypeURL of a sdk.Msg.
 */
export const destructCosmosBaseReflectionMsgDescriptor = (g_struct) => [g_struct.msg_type_url];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_MSG_DESCRIPTOR = '/cosmos.base.reflection.v2alpha1.MsgDescriptor';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetAuthnDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionGetAuthnDescriptorRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_AUTHN_DESCRIPTOR_REQUEST = '/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetAuthnDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authn - describes how to authenticate to the application when sending transactions
 */
export const destructCosmosBaseReflectionGetAuthnDescriptorResponse = (g_struct) => [g_struct.authn];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_AUTHN_DESCRIPTOR_RESPONSE = '/cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetChainDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionGetChainDescriptorRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CHAIN_DESCRIPTOR_REQUEST = '/cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetChainDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain - describes application chain information
 */
export const destructCosmosBaseReflectionGetChainDescriptorResponse = (g_struct) => [g_struct.chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CHAIN_DESCRIPTOR_RESPONSE = '/cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetCodecDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionGetCodecDescriptorRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CODEC_DESCRIPTOR_REQUEST = '/cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetCodecDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: codec - describes the application codec such as registered interfaces and implementations
 */
export const destructCosmosBaseReflectionGetCodecDescriptorResponse = (g_struct) => [g_struct.codec];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CODEC_DESCRIPTOR_RESPONSE = '/cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetConfigurationDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionGetConfigurationDescriptorRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CONFIGURATION_DESCRIPTOR_REQUEST = '/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetConfigurationDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: config - describes the application's sdk.Config
 */
export const destructCosmosBaseReflectionGetConfigurationDescriptorResponse = (g_struct) => [g_struct.config];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_CONFIGURATION_DESCRIPTOR_RESPONSE = '/cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetQueryServicesDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionGetQueryServicesDescriptorRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_QUERY_SERVICES_DESCRIPTOR_REQUEST = '/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetQueryServicesDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: queries - provides information on the available queryable services
 */
export const destructCosmosBaseReflectionGetQueryServicesDescriptorResponse = (g_struct) => [g_struct.queries];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_QUERY_SERVICES_DESCRIPTOR_RESPONSE = '/cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetTxDescriptorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionGetTxDescriptorRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_TX_DESCRIPTOR_REQUEST = '/cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionGetTxDescriptorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - provides information on msgs that can be forwarded to the application alongside the accepted transaction protobuf type
 */
export const destructCosmosBaseReflectionGetTxDescriptorResponse = (g_struct) => [g_struct.tx];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_GET_TX_DESCRIPTOR_RESPONSE = '/cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse';
//# sourceMappingURL=reflection.js.map