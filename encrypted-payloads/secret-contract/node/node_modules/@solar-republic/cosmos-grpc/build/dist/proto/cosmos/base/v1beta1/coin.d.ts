import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosBaseCoin = Encoded<'/cosmos.base.v1beta1.Coin'>;
export type EncodedCosmosBaseDecCoin = Encoded<'/cosmos.base.v1beta1.DecCoin'>;
/**
 * Encodes a `Coin` protobuf message: defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @param s_denom - `denom`:
 * @param s_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseCoin: (s_denom?: Opt<string>, s_amount?: Opt<string>) => EncodedCosmosBaseCoin;
/**
 * Encodes a `DecCoin` protobuf message: defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 * @param s_denom - `denom`:
 * @param s_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseDecCoin: (s_denom?: Opt<string>, s_amount?: Opt<string>) => EncodedCosmosBaseDecCoin;
/**
 * A decoded protobuf Coin message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: amount -
 */
export type DecodedCosmosBaseCoin = [
    s_denom?: string,
    s_amount?: string
];
/**
 * Decodes a protobuf Coin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseCoin}
 */
export declare const decodeCosmosBaseCoin: (atu8_payload: Uint8Array) => DecodedCosmosBaseCoin;
/**
 * A decoded protobuf DecCoin message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: amount -
 */
export type DecodedCosmosBaseDecCoin = [
    s_denom?: string,
    s_amount?: string
];
/**
 * Decodes a protobuf DecCoin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseDecCoin}
 */
export declare const decodeCosmosBaseDecCoin: (atu8_payload: Uint8Array) => DecodedCosmosBaseDecCoin;
/**
 * Destructures the fields of a {@link CosmosBaseCoin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: amount -
 */
export declare const destructCosmosBaseCoin: (g_struct: CosmosBaseCoin) => [denom?: string, amount?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_COIN = "/cosmos.base.v1beta1.Coin";
/**
 * JSON serialization of `cosmos.base.v1beta1.Coin` - defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 */
export type CosmosBaseCoin = {
    denom?: string | undefined;
    amount?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseDecCoin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: amount -
 */
export declare const destructCosmosBaseDecCoin: (g_struct: CosmosBaseDecCoin) => [denom?: string, amount?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_DEC_COIN = "/cosmos.base.v1beta1.DecCoin";
/**
 * JSON serialization of `cosmos.base.v1beta1.DecCoin` - defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 */
export type CosmosBaseDecCoin = {
    denom?: string | undefined;
    amount?: string | undefined;
};
