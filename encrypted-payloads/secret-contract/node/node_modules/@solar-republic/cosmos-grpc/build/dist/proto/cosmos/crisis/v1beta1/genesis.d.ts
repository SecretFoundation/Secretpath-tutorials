import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type EncodedCosmosCrisisGenesisState = Encoded<'/cosmos.crisis.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the crisis module's genesis state.
 * @param a_constant_fee - `constant_fee`: the fee used to verify the invariant in the crisis module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCrisisGenesisState: (a_constant_fee?: Opt<SlimCoin>) => EncodedCosmosCrisisGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: constant_fee - the fee used to verify the invariant in the crisis module.
 */
export type DecodedCosmosCrisisGenesisState = [
    w_0?: undefined,
    w_1?: undefined,
    a_constant_fee?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosCrisisGenesisState}
 */
export declare const decodeCosmosCrisisGenesisState: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosCrisisGenesisState;
/**
 * Destructures the fields of a {@link CosmosCrisisGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 2: constant_fee - the fee used to verify the invariant in the crisis module.
 */
export declare const destructCosmosCrisisGenesisState: (g_struct: CosmosCrisisGenesisState) => [EMPTY?: void, EMPTY?: void, constant_fee?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRISIS_GENESIS_STATE = "/cosmos.crisis.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.crisis.v1beta1.GenesisState` - defines the crisis module's genesis state.
 */
export type CosmosCrisisGenesisState = {
    constant_fee?: CosmosBaseCoin | undefined;
};
