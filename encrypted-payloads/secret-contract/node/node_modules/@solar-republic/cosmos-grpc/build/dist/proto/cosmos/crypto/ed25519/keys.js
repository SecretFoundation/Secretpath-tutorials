import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `PubKey` protobuf message: an ed25519 public key for handling Tendermint keys in SDK. It's needed for Any serialization and SDK compatibility. It must not be used in a non Tendermint key context because it doesn't implement ADR-28. Nevertheless, you will like to use ed25519 in app user level then you must create a new proto message and follow ADR-28 for Address construction.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCryptoEd25519PubKey = (atu8_key) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .o;
/**
 * Encodes a `PrivKey` protobuf message: defines a ed25519 private key. NOTE: ed25519 keys must not be used in SDK apps except in a tendermint validator context.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCryptoEd25519PrivKey = (atu8_key) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .o;
/**
 * Decodes a protobuf PubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoEd25519PubKey}
 */
export const decodeCosmosCryptoEd25519PubKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf PrivKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoEd25519PrivKey}
 */
export const decodeCosmosCryptoEd25519PrivKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link CosmosCryptoEd25519PubKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export const destructCosmosCryptoEd25519PubKey = (g_struct) => [safe_base64_to_bytes(g_struct.key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CRYPTO_ED25519_PUB_KEY = '/cosmos.crypto.ed25519.PubKey';
/**
 * Destructures the fields of a {@link CosmosCryptoEd25519PrivKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export const destructCosmosCryptoEd25519PrivKey = (g_struct) => [safe_base64_to_bytes(g_struct.key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CRYPTO_ED25519_PRIV_KEY = '/cosmos.crypto.ed25519.PrivKey';
//# sourceMappingURL=keys.js.map