import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { CosmosCryptoHdBIP44Params, DecodedCosmosCryptoHdBIP44Params } from '../../hd/v1/hd.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
export type EncodedCosmosCryptoKeyringRecord = Encoded<'/cosmos.crypto.keyring.v1.Record'>;
export type EncodedCosmosCryptoKeyringRecordLocal = Encoded<'/cosmos.crypto.keyring.v1.Record.Local'>;
export type EncodedCosmosCryptoKeyringRecordLedger = Encoded<'/cosmos.crypto.keyring.v1.Record.Ledger'>;
export type EncodedCosmosCryptoKeyringRecordMulti = Encoded<'/cosmos.crypto.keyring.v1.Record.Multi'>;
export type EncodedCosmosCryptoKeyringRecordOffline = Encoded<'/cosmos.crypto.keyring.v1.Record.Offline'>;
/**
 * Encodes a `Record` protobuf message: used for representing a key in the keyring.
 * @param s_name - `name`: represents a name of Record
 * @param atu8_pub_key - `pub_key`: represents a public key in any format
 * @param g_local - `local`: stores the private key locally.
 * @param g_ledger - `ledger`: stores the information about a Ledger key.
 * @param g_multi - `multi`: Multi does not store any other information.
 * @param g_offline - `offline`: Offline does not store any other information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoKeyringRecord: (s_name?: Opt<string>, atu8_pub_key?: Opt<Uint8Array>, atu8_local?: Opt<Encoded<'/cosmos.crypto.keyring.v1.Record.Local'>>, atu8_ledger?: Opt<Encoded<'/cosmos.crypto.keyring.v1.Record.Ledger'>>, atu8_multi?: Opt<Encoded<'/cosmos.crypto.keyring.v1.Record.Multi'>>, atu8_offline?: Opt<Encoded<'/cosmos.crypto.keyring.v1.Record.Offline'>>) => EncodedCosmosCryptoKeyringRecord;
/**
 * Encodes a `Local` protobuf message:
 * @param atu8_priv_key - `priv_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoKeyringRecordLocal: (atu8_priv_key?: Opt<Uint8Array>) => EncodedCosmosCryptoKeyringRecordLocal;
/**
 * Encodes a `Ledger` protobuf message:
 * @param g_path - `path`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoKeyringRecordLedger: (atu8_path?: Opt<Encoded<'/cosmos.crypto.hd.v1.BIP44Params'>>) => EncodedCosmosCryptoKeyringRecordLedger;
/**
 * Encodes a `Multi` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoKeyringRecordMulti: () => EncodedCosmosCryptoKeyringRecordMulti;
/**
 * Encodes a `Offline` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoKeyringRecordOffline: () => EncodedCosmosCryptoKeyringRecordOffline;
/**
 * A decoded protobuf Record message
 *
 * Tuple where:
 *   - 0: name - represents a name of Record
 *   - 1: pub_key - represents a public key in any format
 *   - 2: local - stores the private key locally.
 *   - 3: ledger - stores the information about a Ledger key.
 *   - 4: multi - Multi does not store any other information.
 *   - 5: offline - Offline does not store any other information.
 */
export type DecodedCosmosCryptoKeyringRecord = [
    s_name?: string,
    a_pub_key?: DecodedGoogleProtobufAny,
    a_local?: DecodedCosmosCryptoKeyringRecordLocal,
    a_ledger?: DecodedCosmosCryptoKeyringRecordLedger,
    a_multi?: DecodedCosmosCryptoKeyringRecordMulti,
    a_offline?: DecodedCosmosCryptoKeyringRecordOffline
];
/**
 * Decodes a protobuf Record message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoKeyringRecord}
 */
export declare const decodeCosmosCryptoKeyringRecord: (atu8_payload: Uint8Array) => DecodedCosmosCryptoKeyringRecord;
/**
 * A decoded protobuf Local message
 *
 * Alias for: priv_key -
 */
export type DecodedCosmosCryptoKeyringRecordLocal = [
    a_priv_key?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf Local message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoKeyringRecordLocal}
 */
export declare const decodeCosmosCryptoKeyringRecordLocal: (atu8_payload: Uint8Array) => DecodedCosmosCryptoKeyringRecordLocal;
/**
 * A decoded protobuf Ledger message
 *
 * Alias for: path -
 */
export type DecodedCosmosCryptoKeyringRecordLedger = [
    a_path?: DecodedCosmosCryptoHdBIP44Params
];
/**
 * Decodes a protobuf Ledger message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoKeyringRecordLedger}
 */
export declare const decodeCosmosCryptoKeyringRecordLedger: (atu8_payload: Uint8Array) => DecodedCosmosCryptoKeyringRecordLedger;
/**
 * A decoded protobuf Multi message
 *
 * Tuple where:
 */
export type DecodedCosmosCryptoKeyringRecordMulti = [];
/**
 * Decodes a protobuf Multi message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoKeyringRecordMulti}
 */
export declare const decodeCosmosCryptoKeyringRecordMulti: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Offline message
 *
 * Tuple where:
 */
export type DecodedCosmosCryptoKeyringRecordOffline = [];
/**
 * Decodes a protobuf Offline message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoKeyringRecordOffline}
 */
export declare const decodeCosmosCryptoKeyringRecordOffline: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link CosmosCryptoKeyringRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - represents a name of Record
 *   - 1: pub_key - represents a public key in any format
 *   - 2: local - stores the private key locally.
 *   - 3: ledger - stores the information about a Ledger key.
 *   - 4: multi - Multi does not store any other information.
 *   - 5: offline - Offline does not store any other information.
 */
export declare const destructCosmosCryptoKeyringRecord: (g_struct: CosmosCryptoKeyringRecord) => [name?: string, pub_key?: JsonAny, local?: CosmosCryptoKeyringRecordLocal, ledger?: CosmosCryptoKeyringRecordLedger, multi?: CosmosCryptoKeyringRecordMulti, offline?: CosmosCryptoKeyringRecordOffline];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_KEYRING_RECORD = "/cosmos.crypto.keyring.v1.Record";
/**
 * JSON serialization of `cosmos.crypto.keyring.v1.Record` - used for representing a key in the keyring.
 */
export type CosmosCryptoKeyringRecord = {
    name?: string | undefined;
    pub_key?: JsonAny | undefined;
    local?: CosmosCryptoKeyringRecordLocal | undefined;
    ledger?: CosmosCryptoKeyringRecordLedger | undefined;
    multi?: CosmosCryptoKeyringRecordMulti | undefined;
    offline?: CosmosCryptoKeyringRecordOffline | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoKeyringRecordLocal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: priv_key -
 */
export declare const destructCosmosCryptoKeyringRecordLocal: (g_struct: CosmosCryptoKeyringRecordLocal) => [priv_key?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_KEYRING_RECORD_LOCAL = "/cosmos.crypto.keyring.v1.Record.Local";
/**
 * JSON serialization of `cosmos.crypto.keyring.v1.Record.Local` -
 */
export type CosmosCryptoKeyringRecordLocal = {
    priv_key?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoKeyringRecordLedger} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 */
export declare const destructCosmosCryptoKeyringRecordLedger: (g_struct: CosmosCryptoKeyringRecordLedger) => [path?: CosmosCryptoHdBIP44Params];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_KEYRING_RECORD_LEDGER = "/cosmos.crypto.keyring.v1.Record.Ledger";
/**
 * JSON serialization of `cosmos.crypto.keyring.v1.Record.Ledger` -
 */
export type CosmosCryptoKeyringRecordLedger = {
    path?: CosmosCryptoHdBIP44Params | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoKeyringRecordMulti} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosCryptoKeyringRecordMulti: (g_struct: CosmosCryptoKeyringRecordMulti) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_KEYRING_RECORD_MULTI = "/cosmos.crypto.keyring.v1.Record.Multi";
/**
 * JSON serialization of `cosmos.crypto.keyring.v1.Record.Multi` -
 */
export type CosmosCryptoKeyringRecordMulti = {};
/**
 * Destructures the fields of a {@link CosmosCryptoKeyringRecordOffline} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosCryptoKeyringRecordOffline: (g_struct: CosmosCryptoKeyringRecordOffline) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_KEYRING_RECORD_OFFLINE = "/cosmos.crypto.keyring.v1.Record.Offline";
/**
 * JSON serialization of `cosmos.crypto.keyring.v1.Record.Offline` -
 */
export type CosmosCryptoKeyringRecordOffline = {};
