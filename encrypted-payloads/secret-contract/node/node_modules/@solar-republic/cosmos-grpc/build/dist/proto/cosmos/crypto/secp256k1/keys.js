import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `PubKey` protobuf message: defines a secp256k1 public key Key is the compressed form of the pubkey. The first byte depends is a 0x02 byte if the y-coordinate is the lexicographically largest of the two associated with the x-coordinate. Otherwise the first byte is a 0x03. This prefix is followed with the x-coordinate.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCryptoSecp256k1PubKey = (atu8_key) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .o;
/**
 * Encodes a `PrivKey` protobuf message: defines a secp256k1 private key.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCryptoSecp256k1PrivKey = (atu8_key) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .o;
/**
 * Decodes a protobuf PubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256k1PubKey}
 */
export const decodeCosmosCryptoSecp256k1PubKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf PrivKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256k1PrivKey}
 */
export const decodeCosmosCryptoSecp256k1PrivKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256k1PubKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export const destructCosmosCryptoSecp256k1PubKey = (g_struct) => [safe_base64_to_bytes(g_struct.key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256K1_PUB_KEY = '/cosmos.crypto.secp256k1.PubKey';
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256k1PrivKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export const destructCosmosCryptoSecp256k1PrivKey = (g_struct) => [safe_base64_to_bytes(g_struct.key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256K1_PRIV_KEY = '/cosmos.crypto.secp256k1.PrivKey';
//# sourceMappingURL=keys.js.map