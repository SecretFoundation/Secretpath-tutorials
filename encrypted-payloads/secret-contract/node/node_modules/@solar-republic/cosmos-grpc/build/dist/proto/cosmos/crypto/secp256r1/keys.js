import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `PubKey` protobuf message: defines a secp256r1 ECDSA public key.
 * @param atu8_key - `key`: Point on secp256r1 curve in a compressed representation as specified in section 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCryptoSecp256r1PubKey = (atu8_key) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .o;
/**
 * Encodes a `PrivKey` protobuf message: defines a secp256r1 ECDSA private key.
 * @param atu8_secret - `secret`: number serialized using big-endian encoding
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCryptoSecp256r1PrivKey = (atu8_secret) => Protobuf() // ...
    .b(atu8_secret) // bytes secret = 1
    .o;
/**
 * Decodes a protobuf PubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256r1PubKey}
 */
export const decodeCosmosCryptoSecp256r1PubKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf PrivKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256r1PrivKey}
 */
export const decodeCosmosCryptoSecp256r1PrivKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256r1PubKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key - Point on secp256r1 curve in a compressed representation as specified in section 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
 */
export const destructCosmosCryptoSecp256r1PubKey = (g_struct) => [safe_base64_to_bytes(g_struct.key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256R1_PUB_KEY = '/cosmos.crypto.secp256r1.PubKey';
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256r1PrivKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: secret - number serialized using big-endian encoding
 */
export const destructCosmosCryptoSecp256r1PrivKey = (g_struct) => [safe_base64_to_bytes(g_struct.secret)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256R1_PRIV_KEY = '/cosmos.crypto.secp256r1.PrivKey';
//# sourceMappingURL=keys.js.map