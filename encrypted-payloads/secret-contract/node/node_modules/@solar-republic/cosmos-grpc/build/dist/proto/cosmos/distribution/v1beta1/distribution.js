import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, any, coins } from '../../../../api/protobuf-writer.js';
import { decodeCosmosBaseDecCoin } from '../../base/v1beta1/coin.js';
/**
 * Encodes a `CommunityPoolSpendProposal` protobuf message wrapped in the `Any` container: details a proposal for use of community funds, together with how many coins are proposed to be spent, and to which recipient account. Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no longer a need for an explicit CommunityPoolSpendProposal. To spend community pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov module via a v1 governance proposal.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyCommunityPoolSpendProposal = (s_title, s_description, sa_recipient, a_amounts) => any('/cosmos.distribution.v1beta1.CommunityPoolSpendProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(sa_recipient) // string recipient = 3
    .B(coins(a_amounts)) // Coin[] amount = 4
    .o);
/**
 * Encodes a `CommunityPoolSpendProposalWithDeposit` protobuf message wrapped in the `Any` container: defines a CommunityPoolSpendProposal with a deposit Deprecated: Do not use.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param s_amount - `amount`:
 * @param s_deposit - `deposit`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyCommunityPoolSpendProposalWithDeposit = (s_title, s_description, sa_recipient, s_amount, s_deposit) => any('/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(sa_recipient) // string recipient = 3
    .s(s_amount) // string amount = 4
    .s(s_deposit) // string deposit = 5
    .o);
/**
 * Encodes a `Params` protobuf message: defines the set of params for the distribution module.
 * @param s_community_tax - `community_tax`:
 * @param s_base_proposer_reward - `base_proposer_reward`: Deprecated: The base_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 * @param s_bonus_proposer_reward - `bonus_proposer_reward`: Deprecated: The bonus_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 * @param b_withdraw_addr_enabled - `withdraw_addr_enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionParams = (s_community_tax, s_base_proposer_reward, s_bonus_proposer_reward, b_withdraw_addr_enabled) => Protobuf() // ...
    .s(s_community_tax) // string community_tax = 1
    .s(s_base_proposer_reward) // string base_proposer_reward = 2
    .s(s_bonus_proposer_reward) // string bonus_proposer_reward = 3
    .v(b_withdraw_addr_enabled) // boolean withdraw_addr_enabled = 4
    .o;
/**
 * Encodes a `ValidatorHistoricalRewards` protobuf message: represents historical rewards for a validator. Height is implicit within the store key. Cumulative reward ratio is the sum from the zeroeth period until this period of rewards / tokens, per the spec. The reference count indicates the number of objects which might need to reference this historical entry at any point. ReferenceCount = number of outstanding delegations which ended the associated period (and might need to read that record) + number of slashes which ended the associated period (and might need to read that record) + one per validator for the zeroeth period, set on initialization
 * @param a_cumulative_reward_ratios - `cumulative_reward_ratio`:
 * @param n_reference_count - `reference_count`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorHistoricalRewards = (a_cumulative_reward_ratios, n_reference_count) => Protobuf() // ...
    .B(a_cumulative_reward_ratios) // DecCoin[] cumulative_reward_ratio = 1
    .v(n_reference_count) // uint32 reference_count = 2
    .o;
/**
 * Encodes a `ValidatorCurrentRewards` protobuf message: represents current rewards and current period for a validator kept as a running counter and incremented each block as long as the validator's tokens remain constant.
 * @param a_rewards - `rewards`:
 * @param sg_period - `period`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorCurrentRewards = (a_rewards, sg_period) => Protobuf() // ...
    .B(a_rewards) // DecCoin[] rewards = 1
    .g(sg_period) // uint64 period = 2
    .o;
/**
 * Encodes a `ValidatorAccumulatedCommission` protobuf message: represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time.
 * @param a_commissions - `commission`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorAccumulatedCommission = (a_commissions) => Protobuf() // ...
    .B(a_commissions) // DecCoin[] commission = 1
    .o;
/**
 * Encodes a `ValidatorOutstandingRewards` protobuf message: represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 * @param a_rewards - `rewards`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorOutstandingRewards = (a_rewards) => Protobuf() // ...
    .B(a_rewards) // DecCoin[] rewards = 1
    .o;
/**
 * Encodes a `ValidatorSlashEvent` protobuf message: represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 * @param sg_validator_period - `validator_period`:
 * @param s_fraction - `fraction`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorSlashEvent = (sg_validator_period, s_fraction) => Protobuf() // ...
    .g(sg_validator_period) // uint64 validator_period = 1
    .s(s_fraction) // string fraction = 2
    .o;
/**
 * Encodes a `ValidatorSlashEvents` protobuf message: a collection of ValidatorSlashEvent messages.
 * @param a_validator_slash_events - `validator_slash_events`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorSlashEvents = (a_validator_slash_events) => Protobuf() // ...
    .B(a_validator_slash_events) // ValidatorSlashEvent[] validator_slash_events = 1
    .o;
/**
 * Encodes a `FeePool` protobuf message: the global fee pool for distribution.
 * @param a_community_pools - `community_pool`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionFeePool = (a_community_pools) => Protobuf() // ...
    .B(a_community_pools) // DecCoin[] community_pool = 1
    .o;
/**
 * Encodes a `CommunityPoolSpendProposal` protobuf message: details a proposal for use of community funds, together with how many coins are proposed to be spent, and to which recipient account. Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no longer a need for an explicit CommunityPoolSpendProposal. To spend community pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov module via a v1 governance proposal.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionCommunityPoolSpendProposal = (s_title, s_description, sa_recipient, a_amounts) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(sa_recipient) // string recipient = 3
    .B(coins(a_amounts)) // Coin[] amount = 4
    .o;
/**
 * Encodes a `DelegatorStartingInfo` protobuf message: represents the starting info for a delegator reward period. It tracks the previous validator period, the delegation's amount of staking token, and the creation height (to check later on if any slashes have occurred). NOTE: Even though validators are slashed to whole staking tokens, the delegators within the validator may be left with less than a full token, thus sdk.Dec is used.
 * @param sg_previous_period - `previous_period`:
 * @param s_stake - `stake`:
 * @param sg_height - `height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionDelegatorStartingInfo = (sg_previous_period, s_stake, sg_height) => Protobuf() // ...
    .g(sg_previous_period) // uint64 previous_period = 1
    .s(s_stake) // string stake = 2
    .g(sg_height) // uint64 height = 3
    .o;
/**
 * Encodes a `DelegationDelegatorReward` protobuf message: represents the properties of a delegator's delegation reward.
 * @param sa_validator - `validator_address`:
 * @param a_rewards - `reward`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionDelegationDelegatorReward = (sa_validator, a_rewards) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .B(a_rewards) // DecCoin[] reward = 2
    .o;
/**
 * Encodes a `CommunityPoolSpendProposalWithDeposit` protobuf message: defines a CommunityPoolSpendProposal with a deposit Deprecated: Do not use.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param s_amount - `amount`:
 * @param s_deposit - `deposit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionCommunityPoolSpendProposalWithDeposit = (s_title, s_description, sa_recipient, s_amount, s_deposit) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(sa_recipient) // string recipient = 3
    .s(s_amount) // string amount = 4
    .s(s_deposit) // string deposit = 5
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionParams}
 */
export const decodeCosmosDistributionParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 1]);
/**
 * Decodes a protobuf ValidatorHistoricalRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorHistoricalRewards}
 */
export const decodeCosmosDistributionValidatorHistoricalRewards = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf ValidatorCurrentRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorCurrentRewards}
 */
export const decodeCosmosDistributionValidatorCurrentRewards = (atu8_payload) => decode_protobuf(atu8_payload, [0, 3], [decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf ValidatorAccumulatedCommission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorAccumulatedCommission}
 */
export const decodeCosmosDistributionValidatorAccumulatedCommission = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf ValidatorOutstandingRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorOutstandingRewards}
 */
export const decodeCosmosDistributionValidatorOutstandingRewards = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf ValidatorSlashEvent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorSlashEvent}
 */
export const decodeCosmosDistributionValidatorSlashEvent = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf ValidatorSlashEvents message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorSlashEvents}
 */
export const decodeCosmosDistributionValidatorSlashEvents = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosDistributionValidatorSlashEvent]);
/**
 * Decodes a protobuf FeePool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionFeePool}
 */
export const decodeCosmosDistributionFeePool = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf CommunityPoolSpendProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionCommunityPoolSpendProposal}
 */
export const decodeCosmosDistributionCommunityPoolSpendProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 0], [0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf DelegatorStartingInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegatorStartingInfo}
 */
export const decodeCosmosDistributionDelegatorStartingInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 3]);
/**
 * Decodes a protobuf DelegationDelegatorReward message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegationDelegatorReward}
 */
export const decodeCosmosDistributionDelegationDelegatorReward = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf CommunityPoolSpendProposalWithDeposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionCommunityPoolSpendProposalWithDeposit}
 */
export const decodeCosmosDistributionCommunityPoolSpendProposalWithDeposit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5]);
/**
 * Destructures the fields of a {@link CosmosDistributionParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: community_tax -
 *   - 1: base_proposer_reward - Deprecated: The base_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 *   - 2: bonus_proposer_reward - Deprecated: The bonus_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 *   - 3: withdraw_addr_enabled -
 */
export const destructCosmosDistributionParams = (g_struct) => [g_struct.community_tax, g_struct.base_proposer_reward, g_struct.bonus_proposer_reward, g_struct.withdraw_addr_enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_PARAMS = '/cosmos.distribution.v1beta1.Params';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorHistoricalRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cumulative_reward_ratio -
 *   - 1: reference_count -
 */
export const destructCosmosDistributionValidatorHistoricalRewards = (g_struct) => [g_struct.cumulative_reward_ratio, g_struct.reference_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_HISTORICAL_REWARDS = '/cosmos.distribution.v1beta1.ValidatorHistoricalRewards';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorCurrentRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards -
 *   - 1: period -
 */
export const destructCosmosDistributionValidatorCurrentRewards = (g_struct) => [g_struct.rewards, g_struct.period];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_CURRENT_REWARDS = '/cosmos.distribution.v1beta1.ValidatorCurrentRewards';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorAccumulatedCommission} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commission -
 */
export const destructCosmosDistributionValidatorAccumulatedCommission = (g_struct) => [g_struct.commission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_ACCUMULATED_COMMISSION = '/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorOutstandingRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards -
 */
export const destructCosmosDistributionValidatorOutstandingRewards = (g_struct) => [g_struct.rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_OUTSTANDING_REWARDS = '/cosmos.distribution.v1beta1.ValidatorOutstandingRewards';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorSlashEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_period -
 *   - 1: fraction -
 */
export const destructCosmosDistributionValidatorSlashEvent = (g_struct) => [g_struct.validator_period, g_struct.fraction];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_SLASH_EVENT = '/cosmos.distribution.v1beta1.ValidatorSlashEvent';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorSlashEvents} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_slash_events -
 */
export const destructCosmosDistributionValidatorSlashEvents = (g_struct) => [g_struct.validator_slash_events];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_SLASH_EVENTS = '/cosmos.distribution.v1beta1.ValidatorSlashEvents';
/**
 * Destructures the fields of a {@link CosmosDistributionFeePool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: community_pool -
 */
export const destructCosmosDistributionFeePool = (g_struct) => [g_struct.community_pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_FEE_POOL = '/cosmos.distribution.v1beta1.FeePool';
/**
 * Destructures the fields of a {@link CosmosDistributionCommunityPoolSpendProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: recipient -
 *   - 3: amount -
 */
export const destructCosmosDistributionCommunityPoolSpendProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.recipient, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_COMMUNITY_POOL_SPEND_PROPOSAL = '/cosmos.distribution.v1beta1.CommunityPoolSpendProposal';
/**
 * Destructures the fields of a {@link CosmosDistributionDelegatorStartingInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: previous_period -
 *   - 1: stake -
 *   - 2: height -
 */
export const destructCosmosDistributionDelegatorStartingInfo = (g_struct) => [g_struct.previous_period, g_struct.stake, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATOR_STARTING_INFO = '/cosmos.distribution.v1beta1.DelegatorStartingInfo';
/**
 * Destructures the fields of a {@link CosmosDistributionDelegationDelegatorReward} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address -
 *   - 1: reward -
 */
export const destructCosmosDistributionDelegationDelegatorReward = (g_struct) => [g_struct.validator_address, g_struct.reward];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATION_DELEGATOR_REWARD = '/cosmos.distribution.v1beta1.DelegationDelegatorReward';
/**
 * Destructures the fields of a {@link CosmosDistributionCommunityPoolSpendProposalWithDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: recipient -
 *   - 3: amount -
 *   - 4: deposit -
 */
export const destructCosmosDistributionCommunityPoolSpendProposalWithDeposit = (g_struct) => [g_struct.title, g_struct.description, g_struct.recipient, g_struct.amount, g_struct.deposit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_COMMUNITY_POOL_SPEND_PROPOSAL_WITH_DEPOSIT = '/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit';
//# sourceMappingURL=distribution.js.map