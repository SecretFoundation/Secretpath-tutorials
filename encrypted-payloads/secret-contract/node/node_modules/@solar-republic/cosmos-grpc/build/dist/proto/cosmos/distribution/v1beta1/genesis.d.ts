import type { WeakUint64Str, WeakAccountAddr, WeakValidatorAddr, CwUint64, CwAccountAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin } from '../../base/v1beta1/coin.js';
import type { CosmosDistributionValidatorAccumulatedCommission, DecodedCosmosDistributionValidatorAccumulatedCommission, CosmosDistributionValidatorHistoricalRewards, DecodedCosmosDistributionValidatorHistoricalRewards, CosmosDistributionValidatorCurrentRewards, DecodedCosmosDistributionValidatorCurrentRewards, CosmosDistributionDelegatorStartingInfo, DecodedCosmosDistributionDelegatorStartingInfo, CosmosDistributionValidatorSlashEvent, DecodedCosmosDistributionValidatorSlashEvent, CosmosDistributionParams, DecodedCosmosDistributionParams, CosmosDistributionFeePool, DecodedCosmosDistributionFeePool } from './distribution.js';
export type EncodedCosmosDistributionDelegatorWithdrawInfo = Encoded<'/cosmos.distribution.v1beta1.DelegatorWithdrawInfo'>;
export type EncodedCosmosDistributionValidatorOutstandingRewardsRecord = Encoded<'/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord'>;
export type EncodedCosmosDistributionValidatorAccumulatedCommissionRecord = Encoded<'/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord'>;
export type EncodedCosmosDistributionValidatorHistoricalRewardsRecord = Encoded<'/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord'>;
export type EncodedCosmosDistributionValidatorCurrentRewardsRecord = Encoded<'/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord'>;
export type EncodedCosmosDistributionDelegatorStartingInfoRecord = Encoded<'/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord'>;
export type EncodedCosmosDistributionValidatorSlashEventRecord = Encoded<'/cosmos.distribution.v1beta1.ValidatorSlashEventRecord'>;
export type EncodedCosmosDistributionGenesisState = Encoded<'/cosmos.distribution.v1beta1.GenesisState'>;
/**
 * Encodes a `DelegatorWithdrawInfo` protobuf message: the address for where distributions rewards are withdrawn to by default this struct is only used at genesis to feed in default withdraw addresses.
 * @param sa_delegator - `delegator_address`: the address of the delegator.
 * @param sa_withdraw - `withdraw_address`: the address to withdraw the delegation rewards to.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionDelegatorWithdrawInfo: (sa_delegator?: Opt<WeakAccountAddr>, sa_withdraw?: Opt<WeakAccountAddr>) => EncodedCosmosDistributionDelegatorWithdrawInfo;
/**
 * Encodes a `ValidatorOutstandingRewardsRecord` protobuf message: used for import/export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param a_outstanding_rewards - `outstanding_rewards`: represents the outstanding rewards of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorOutstandingRewardsRecord: (sa_validator?: Opt<WeakValidatorAddr>, a_outstanding_rewards?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>) => EncodedCosmosDistributionValidatorOutstandingRewardsRecord;
/**
 * Encodes a `ValidatorAccumulatedCommissionRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param g_accumulated - `accumulated`: the accumulated commission of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorAccumulatedCommissionRecord: (sa_validator?: Opt<WeakValidatorAddr>, atu8_accumulated?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission'>>) => EncodedCosmosDistributionValidatorAccumulatedCommissionRecord;
/**
 * Encodes a `ValidatorHistoricalRewardsRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param sg_period - `period`: defines the period the historical rewards apply to.
 * @param g_rewards - `rewards`: defines the historical rewards of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorHistoricalRewardsRecord: (sa_validator?: Opt<WeakValidatorAddr>, sg_period?: Opt<WeakUint64Str>, atu8_rewards?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorHistoricalRewards'>>) => EncodedCosmosDistributionValidatorHistoricalRewardsRecord;
/**
 * Encodes a `ValidatorCurrentRewardsRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param g_rewards - `rewards`: defines the current rewards of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorCurrentRewardsRecord: (sa_validator?: Opt<WeakValidatorAddr>, atu8_rewards?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorCurrentRewards'>>) => EncodedCosmosDistributionValidatorCurrentRewardsRecord;
/**
 * Encodes a `DelegatorStartingInfoRecord` protobuf message: used for import / export via genesis json.
 * @param sa_delegator - `delegator_address`: the address of the delegator.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param g_starting_info - `starting_info`: defines the starting info of a delegator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionDelegatorStartingInfoRecord: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>, atu8_starting_info?: Opt<Encoded<'/cosmos.distribution.v1beta1.DelegatorStartingInfo'>>) => EncodedCosmosDistributionDelegatorStartingInfoRecord;
/**
 * Encodes a `ValidatorSlashEventRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param sg_height - `height`: defines the block height at which the slash event occurred.
 * @param sg_period - `period`: the period of the slash event.
 * @param g_validator_slash_event - `validator_slash_event`: describes the slash event.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorSlashEventRecord: (sa_validator?: Opt<WeakValidatorAddr>, sg_height?: Opt<WeakUint64Str>, sg_period?: Opt<WeakUint64Str>, atu8_validator_slash_event?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorSlashEvent'>>) => EncodedCosmosDistributionValidatorSlashEventRecord;
/**
 * Encodes a `GenesisState` protobuf message: defines the distribution module's genesis state.
 * @param g_params - `params`: defines all the parameters of the module.
 * @param g_fee_pool - `fee_pool`: defines the fee pool at genesis.
 * @param a_delegator_withdraw_infos - `delegator_withdraw_infos`: fee_pool defines the delegator withdraw infos at genesis.
 * @param s_previous_proposer - `previous_proposer`: fee_pool defines the previous proposer at genesis.
 * @param a_outstanding_rewards - `outstanding_rewards`: fee_pool defines the outstanding rewards of all validators at genesis.
 * @param a_validator_accumulated_commissions - `validator_accumulated_commissions`: fee_pool defines the accumulated commissions of all validators at genesis.
 * @param a_validator_historical_rewards - `validator_historical_rewards`: fee_pool defines the historical rewards of all validators at genesis.
 * @param a_validator_current_rewards - `validator_current_rewards`: fee_pool defines the current rewards of all validators at genesis.
 * @param a_delegator_starting_infos - `delegator_starting_infos`: fee_pool defines the delegator starting infos at genesis.
 * @param a_validator_slash_events - `validator_slash_events`: fee_pool defines the validator slash events at genesis.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionGenesisState: (atu8_params?: Opt<Encoded<'/cosmos.distribution.v1beta1.Params'>>, atu8_fee_pool?: Opt<Encoded<'/cosmos.distribution.v1beta1.FeePool'>>, a_delegator_withdraw_infos?: Opt<Encoded<'/cosmos.distribution.v1beta1.DelegatorWithdrawInfo'>[]>, s_previous_proposer?: Opt<string>, a_outstanding_rewards?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord'>[]>, a_validator_accumulated_commissions?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord'>[]>, a_validator_historical_rewards?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord'>[]>, a_validator_current_rewards?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord'>[]>, a_delegator_starting_infos?: Opt<Encoded<'/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord'>[]>, a_validator_slash_events?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorSlashEventRecord'>[]>) => EncodedCosmosDistributionGenesisState;
/**
 * A decoded protobuf DelegatorWithdrawInfo message
 *
 * Tuple where:
 *   - 0: delegator_address - the address of the delegator.
 *   - 1: withdraw_address - the address to withdraw the delegation rewards to.
 */
export type DecodedCosmosDistributionDelegatorWithdrawInfo = [
    sa_delegator?: CwAccountAddr,
    sa_withdraw?: CwAccountAddr
];
/**
 * Decodes a protobuf DelegatorWithdrawInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegatorWithdrawInfo}
 */
export declare const decodeCosmosDistributionDelegatorWithdrawInfo: (atu8_payload: Uint8Array) => DecodedCosmosDistributionDelegatorWithdrawInfo;
/**
 * A decoded protobuf ValidatorOutstandingRewardsRecord message
 *
 * Tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: outstanding_rewards - represents the outstanding rewards of a validator.
 */
export type DecodedCosmosDistributionValidatorOutstandingRewardsRecord = [
    sa_validator?: CwValidatorAddr,
    a_outstanding_rewards?: DecodedCosmosBaseDecCoin[]
];
/**
 * Decodes a protobuf ValidatorOutstandingRewardsRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorOutstandingRewardsRecord}
 */
export declare const decodeCosmosDistributionValidatorOutstandingRewardsRecord: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorOutstandingRewardsRecord;
/**
 * A decoded protobuf ValidatorAccumulatedCommissionRecord message
 *
 * Tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: accumulated - the accumulated commission of a validator.
 */
export type DecodedCosmosDistributionValidatorAccumulatedCommissionRecord = [
    sa_validator?: CwValidatorAddr,
    a_accumulated?: DecodedCosmosDistributionValidatorAccumulatedCommission
];
/**
 * Decodes a protobuf ValidatorAccumulatedCommissionRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorAccumulatedCommissionRecord}
 */
export declare const decodeCosmosDistributionValidatorAccumulatedCommissionRecord: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorAccumulatedCommissionRecord;
/**
 * A decoded protobuf ValidatorHistoricalRewardsRecord message
 *
 * Tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: period - defines the period the historical rewards apply to.
 *   - 2: rewards - defines the historical rewards of a validator.
 */
export type DecodedCosmosDistributionValidatorHistoricalRewardsRecord = [
    sa_validator?: CwValidatorAddr,
    sg_period?: CwUint64,
    a_rewards?: DecodedCosmosDistributionValidatorHistoricalRewards
];
/**
 * Decodes a protobuf ValidatorHistoricalRewardsRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorHistoricalRewardsRecord}
 */
export declare const decodeCosmosDistributionValidatorHistoricalRewardsRecord: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorHistoricalRewardsRecord;
/**
 * A decoded protobuf ValidatorCurrentRewardsRecord message
 *
 * Tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: rewards - defines the current rewards of a validator.
 */
export type DecodedCosmosDistributionValidatorCurrentRewardsRecord = [
    sa_validator?: CwValidatorAddr,
    a_rewards?: DecodedCosmosDistributionValidatorCurrentRewards
];
/**
 * Decodes a protobuf ValidatorCurrentRewardsRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorCurrentRewardsRecord}
 */
export declare const decodeCosmosDistributionValidatorCurrentRewardsRecord: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorCurrentRewardsRecord;
/**
 * A decoded protobuf DelegatorStartingInfoRecord message
 *
 * Tuple where:
 *   - 0: delegator_address - the address of the delegator.
 *   - 1: validator_address - the address of the validator.
 *   - 2: starting_info - defines the starting info of a delegator.
 */
export type DecodedCosmosDistributionDelegatorStartingInfoRecord = [
    sa_delegator?: CwAccountAddr,
    sa_validator?: CwValidatorAddr,
    a_starting_info?: DecodedCosmosDistributionDelegatorStartingInfo
];
/**
 * Decodes a protobuf DelegatorStartingInfoRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegatorStartingInfoRecord}
 */
export declare const decodeCosmosDistributionDelegatorStartingInfoRecord: (atu8_payload: Uint8Array) => DecodedCosmosDistributionDelegatorStartingInfoRecord;
/**
 * A decoded protobuf ValidatorSlashEventRecord message
 *
 * Tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: height - defines the block height at which the slash event occurred.
 *   - 2: period - the period of the slash event.
 *   - 3: validator_slash_event - describes the slash event.
 */
export type DecodedCosmosDistributionValidatorSlashEventRecord = [
    sa_validator?: CwValidatorAddr,
    sg_height?: CwUint64,
    sg_period?: CwUint64,
    a_validator_slash_event?: DecodedCosmosDistributionValidatorSlashEvent
];
/**
 * Decodes a protobuf ValidatorSlashEventRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorSlashEventRecord}
 */
export declare const decodeCosmosDistributionValidatorSlashEventRecord: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorSlashEventRecord;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - defines all the parameters of the module.
 *   - 1: fee_pool - defines the fee pool at genesis.
 *   - 2: delegator_withdraw_infos - fee_pool defines the delegator withdraw infos at genesis.
 *   - 3: previous_proposer - fee_pool defines the previous proposer at genesis.
 *   - 4: outstanding_rewards - fee_pool defines the outstanding rewards of all validators at genesis.
 *   - 5: validator_accumulated_commissions - fee_pool defines the accumulated commissions of all validators at genesis.
 *   - 6: validator_historical_rewards - fee_pool defines the historical rewards of all validators at genesis.
 *   - 7: validator_current_rewards - fee_pool defines the current rewards of all validators at genesis.
 *   - 8: delegator_starting_infos - fee_pool defines the delegator starting infos at genesis.
 *   - 9: validator_slash_events - fee_pool defines the validator slash events at genesis.
 */
export type DecodedCosmosDistributionGenesisState = [
    a_params?: DecodedCosmosDistributionParams,
    a_fee_pool?: DecodedCosmosDistributionFeePool,
    a_delegator_withdraw_infos?: DecodedCosmosDistributionDelegatorWithdrawInfo[],
    s_previous_proposer?: string,
    a_outstanding_rewards?: DecodedCosmosDistributionValidatorOutstandingRewardsRecord[],
    a_validator_accumulated_commissions?: DecodedCosmosDistributionValidatorAccumulatedCommissionRecord[],
    a_validator_historical_rewards?: DecodedCosmosDistributionValidatorHistoricalRewardsRecord[],
    a_validator_current_rewards?: DecodedCosmosDistributionValidatorCurrentRewardsRecord[],
    a_delegator_starting_infos?: DecodedCosmosDistributionDelegatorStartingInfoRecord[],
    a_validator_slash_events?: DecodedCosmosDistributionValidatorSlashEventRecord[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionGenesisState}
 */
export declare const decodeCosmosDistributionGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosDistributionGenesisState;
/**
 * Destructures the fields of a {@link CosmosDistributionDelegatorWithdrawInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the address of the delegator.
 *   - 1: withdraw_address - the address to withdraw the delegation rewards to.
 */
export declare const destructCosmosDistributionDelegatorWithdrawInfo: (g_struct: CosmosDistributionDelegatorWithdrawInfo) => [delegator_address?: CwAccountAddr, withdraw_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATOR_WITHDRAW_INFO = "/cosmos.distribution.v1beta1.DelegatorWithdrawInfo";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.DelegatorWithdrawInfo` - the address for where distributions rewards are withdrawn to by default this struct is only used at genesis to feed in default withdraw addresses.
 */
export type CosmosDistributionDelegatorWithdrawInfo = {
    delegator_address?: CwAccountAddr | undefined;
    withdraw_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorOutstandingRewardsRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: outstanding_rewards - represents the outstanding rewards of a validator.
 */
export declare const destructCosmosDistributionValidatorOutstandingRewardsRecord: (g_struct: CosmosDistributionValidatorOutstandingRewardsRecord) => [validator_address?: CwValidatorAddr, outstanding_rewards?: CosmosBaseDecCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_OUTSTANDING_REWARDS_RECORD = "/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord` - used for import/export via genesis json.
 */
export type CosmosDistributionValidatorOutstandingRewardsRecord = {
    validator_address?: CwValidatorAddr | undefined;
    outstanding_rewards?: CosmosBaseDecCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorAccumulatedCommissionRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: accumulated - the accumulated commission of a validator.
 */
export declare const destructCosmosDistributionValidatorAccumulatedCommissionRecord: (g_struct: CosmosDistributionValidatorAccumulatedCommissionRecord) => [validator_address?: CwValidatorAddr, accumulated?: CosmosDistributionValidatorAccumulatedCommission];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_ACCUMULATED_COMMISSION_RECORD = "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord` - used for import / export via genesis json.
 */
export type CosmosDistributionValidatorAccumulatedCommissionRecord = {
    validator_address?: CwValidatorAddr | undefined;
    accumulated?: CosmosDistributionValidatorAccumulatedCommission | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorHistoricalRewardsRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: period - defines the period the historical rewards apply to.
 *   - 2: rewards - defines the historical rewards of a validator.
 */
export declare const destructCosmosDistributionValidatorHistoricalRewardsRecord: (g_struct: CosmosDistributionValidatorHistoricalRewardsRecord) => [validator_address?: CwValidatorAddr, period?: CwUint64, rewards?: CosmosDistributionValidatorHistoricalRewards];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_HISTORICAL_REWARDS_RECORD = "/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord` - used for import / export via genesis json.
 */
export type CosmosDistributionValidatorHistoricalRewardsRecord = {
    validator_address?: CwValidatorAddr | undefined;
    period?: CwUint64 | undefined;
    rewards?: CosmosDistributionValidatorHistoricalRewards | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorCurrentRewardsRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: rewards - defines the current rewards of a validator.
 */
export declare const destructCosmosDistributionValidatorCurrentRewardsRecord: (g_struct: CosmosDistributionValidatorCurrentRewardsRecord) => [validator_address?: CwValidatorAddr, rewards?: CosmosDistributionValidatorCurrentRewards];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_CURRENT_REWARDS_RECORD = "/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord` - used for import / export via genesis json.
 */
export type CosmosDistributionValidatorCurrentRewardsRecord = {
    validator_address?: CwValidatorAddr | undefined;
    rewards?: CosmosDistributionValidatorCurrentRewards | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionDelegatorStartingInfoRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the address of the delegator.
 *   - 1: validator_address - the address of the validator.
 *   - 2: starting_info - defines the starting info of a delegator.
 */
export declare const destructCosmosDistributionDelegatorStartingInfoRecord: (g_struct: CosmosDistributionDelegatorStartingInfoRecord) => [delegator_address?: CwAccountAddr, validator_address?: CwValidatorAddr, starting_info?: CosmosDistributionDelegatorStartingInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATOR_STARTING_INFO_RECORD = "/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.DelegatorStartingInfoRecord` - used for import / export via genesis json.
 */
export type CosmosDistributionDelegatorStartingInfoRecord = {
    delegator_address?: CwAccountAddr | undefined;
    validator_address?: CwValidatorAddr | undefined;
    starting_info?: CosmosDistributionDelegatorStartingInfo | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorSlashEventRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: height - defines the block height at which the slash event occurred.
 *   - 2: period - the period of the slash event.
 *   - 3: validator_slash_event - describes the slash event.
 */
export declare const destructCosmosDistributionValidatorSlashEventRecord: (g_struct: CosmosDistributionValidatorSlashEventRecord) => [validator_address?: CwValidatorAddr, height?: CwUint64, period?: CwUint64, validator_slash_event?: CosmosDistributionValidatorSlashEvent];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_SLASH_EVENT_RECORD = "/cosmos.distribution.v1beta1.ValidatorSlashEventRecord";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorSlashEventRecord` - used for import / export via genesis json.
 */
export type CosmosDistributionValidatorSlashEventRecord = {
    validator_address?: CwValidatorAddr | undefined;
    height?: CwUint64 | undefined;
    period?: CwUint64 | undefined;
    validator_slash_event?: CosmosDistributionValidatorSlashEvent | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines all the parameters of the module.
 *   - 1: fee_pool - defines the fee pool at genesis.
 *   - 2: delegator_withdraw_infos - fee_pool defines the delegator withdraw infos at genesis.
 *   - 3: previous_proposer - fee_pool defines the previous proposer at genesis.
 *   - 4: outstanding_rewards - fee_pool defines the outstanding rewards of all validators at genesis.
 *   - 5: validator_accumulated_commissions - fee_pool defines the accumulated commissions of all validators at genesis.
 *   - 6: validator_historical_rewards - fee_pool defines the historical rewards of all validators at genesis.
 *   - 7: validator_current_rewards - fee_pool defines the current rewards of all validators at genesis.
 *   - 8: delegator_starting_infos - fee_pool defines the delegator starting infos at genesis.
 *   - 9: validator_slash_events - fee_pool defines the validator slash events at genesis.
 */
export declare const destructCosmosDistributionGenesisState: (g_struct: CosmosDistributionGenesisState) => [params?: CosmosDistributionParams, fee_pool?: CosmosDistributionFeePool, delegator_withdraw_infos?: CosmosDistributionDelegatorWithdrawInfo[], previous_proposer?: string, outstanding_rewards?: CosmosDistributionValidatorOutstandingRewardsRecord[], validator_accumulated_commissions?: CosmosDistributionValidatorAccumulatedCommissionRecord[], validator_historical_rewards?: CosmosDistributionValidatorHistoricalRewardsRecord[], validator_current_rewards?: CosmosDistributionValidatorCurrentRewardsRecord[], delegator_starting_infos?: CosmosDistributionDelegatorStartingInfoRecord[], validator_slash_events?: CosmosDistributionValidatorSlashEventRecord[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_GENESIS_STATE = "/cosmos.distribution.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.GenesisState` - defines the distribution module's genesis state.
 */
export type CosmosDistributionGenesisState = {
    params?: CosmosDistributionParams | undefined;
    fee_pool?: CosmosDistributionFeePool | undefined;
    delegator_withdraw_infos?: CosmosDistributionDelegatorWithdrawInfo[] | undefined;
    previous_proposer?: string | undefined;
    outstanding_rewards?: CosmosDistributionValidatorOutstandingRewardsRecord[] | undefined;
    validator_accumulated_commissions?: CosmosDistributionValidatorAccumulatedCommissionRecord[] | undefined;
    validator_historical_rewards?: CosmosDistributionValidatorHistoricalRewardsRecord[] | undefined;
    validator_current_rewards?: CosmosDistributionValidatorCurrentRewardsRecord[] | undefined;
    delegator_starting_infos?: CosmosDistributionDelegatorStartingInfoRecord[] | undefined;
    validator_slash_events?: CosmosDistributionValidatorSlashEventRecord[] | undefined;
};
