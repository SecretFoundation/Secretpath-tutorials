import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeCosmosBaseDecCoin } from '../../base/v1beta1/coin.js';
import { decodeCosmosDistributionValidatorAccumulatedCommission, decodeCosmosDistributionValidatorHistoricalRewards, decodeCosmosDistributionValidatorCurrentRewards, decodeCosmosDistributionDelegatorStartingInfo, decodeCosmosDistributionValidatorSlashEvent, decodeCosmosDistributionParams, decodeCosmosDistributionFeePool } from './distribution.js';
/**
 * Encodes a `DelegatorWithdrawInfo` protobuf message: the address for where distributions rewards are withdrawn to by default this struct is only used at genesis to feed in default withdraw addresses.
 * @param sa_delegator - `delegator_address`: the address of the delegator.
 * @param sa_withdraw - `withdraw_address`: the address to withdraw the delegation rewards to.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionDelegatorWithdrawInfo = (sa_delegator, sa_withdraw) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_withdraw) // string withdraw_address = 2
    .o;
/**
 * Encodes a `ValidatorOutstandingRewardsRecord` protobuf message: used for import/export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param a_outstanding_rewards - `outstanding_rewards`: represents the outstanding rewards of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorOutstandingRewardsRecord = (sa_validator, a_outstanding_rewards) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .B(a_outstanding_rewards) // DecCoin[] outstanding_rewards = 2
    .o;
/**
 * Encodes a `ValidatorAccumulatedCommissionRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param g_accumulated - `accumulated`: the accumulated commission of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorAccumulatedCommissionRecord = (sa_validator, atu8_accumulated) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .b(atu8_accumulated) // ValidatorAccumulatedCommission accumulated = 2
    .o;
/**
 * Encodes a `ValidatorHistoricalRewardsRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param sg_period - `period`: defines the period the historical rewards apply to.
 * @param g_rewards - `rewards`: defines the historical rewards of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorHistoricalRewardsRecord = (sa_validator, sg_period, atu8_rewards) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .g(sg_period) // uint64 period = 2
    .b(atu8_rewards) // ValidatorHistoricalRewards rewards = 3
    .o;
/**
 * Encodes a `ValidatorCurrentRewardsRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param g_rewards - `rewards`: defines the current rewards of a validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorCurrentRewardsRecord = (sa_validator, atu8_rewards) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .b(atu8_rewards) // ValidatorCurrentRewards rewards = 2
    .o;
/**
 * Encodes a `DelegatorStartingInfoRecord` protobuf message: used for import / export via genesis json.
 * @param sa_delegator - `delegator_address`: the address of the delegator.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param g_starting_info - `starting_info`: defines the starting info of a delegator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionDelegatorStartingInfoRecord = (sa_delegator, sa_validator, atu8_starting_info) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator) // string validator_address = 2
    .b(atu8_starting_info) // DelegatorStartingInfo starting_info = 3
    .o;
/**
 * Encodes a `ValidatorSlashEventRecord` protobuf message: used for import / export via genesis json.
 * @param sa_validator - `validator_address`: the address of the validator.
 * @param sg_height - `height`: defines the block height at which the slash event occurred.
 * @param sg_period - `period`: the period of the slash event.
 * @param g_validator_slash_event - `validator_slash_event`: describes the slash event.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionValidatorSlashEventRecord = (sa_validator, sg_height, sg_period, atu8_validator_slash_event) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .g(sg_height) // uint64 height = 2
    .g(sg_period) // uint64 period = 3
    .b(atu8_validator_slash_event) // ValidatorSlashEvent validator_slash_event = 4
    .o;
/**
 * Encodes a `GenesisState` protobuf message: defines the distribution module's genesis state.
 * @param g_params - `params`: defines all the parameters of the module.
 * @param g_fee_pool - `fee_pool`: defines the fee pool at genesis.
 * @param a_delegator_withdraw_infos - `delegator_withdraw_infos`: fee_pool defines the delegator withdraw infos at genesis.
 * @param s_previous_proposer - `previous_proposer`: fee_pool defines the previous proposer at genesis.
 * @param a_outstanding_rewards - `outstanding_rewards`: fee_pool defines the outstanding rewards of all validators at genesis.
 * @param a_validator_accumulated_commissions - `validator_accumulated_commissions`: fee_pool defines the accumulated commissions of all validators at genesis.
 * @param a_validator_historical_rewards - `validator_historical_rewards`: fee_pool defines the historical rewards of all validators at genesis.
 * @param a_validator_current_rewards - `validator_current_rewards`: fee_pool defines the current rewards of all validators at genesis.
 * @param a_delegator_starting_infos - `delegator_starting_infos`: fee_pool defines the delegator starting infos at genesis.
 * @param a_validator_slash_events - `validator_slash_events`: fee_pool defines the validator slash events at genesis.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionGenesisState = (atu8_params, atu8_fee_pool, a_delegator_withdraw_infos, s_previous_proposer, a_outstanding_rewards, a_validator_accumulated_commissions, a_validator_historical_rewards, a_validator_current_rewards, a_delegator_starting_infos, a_validator_slash_events) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .b(atu8_fee_pool) // FeePool fee_pool = 2
    .B(a_delegator_withdraw_infos) // DelegatorWithdrawInfo[] delegator_withdraw_infos = 3
    .s(s_previous_proposer) // string previous_proposer = 4
    .B(a_outstanding_rewards) // ValidatorOutstandingRewardsRecord[] outstanding_rewards = 5
    .B(a_validator_accumulated_commissions) // ValidatorAccumulatedCommissionRecord[] validator_accumulated_commissions = 6
    .B(a_validator_historical_rewards) // ValidatorHistoricalRewardsRecord[] validator_historical_rewards = 7
    .B(a_validator_current_rewards) // ValidatorCurrentRewardsRecord[] validator_current_rewards = 8
    .B(a_delegator_starting_infos) // DelegatorStartingInfoRecord[] delegator_starting_infos = 9
    .B(a_validator_slash_events) // ValidatorSlashEventRecord[] validator_slash_events = 10
    .o;
/**
 * Decodes a protobuf DelegatorWithdrawInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegatorWithdrawInfo}
 */
export const decodeCosmosDistributionDelegatorWithdrawInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ValidatorOutstandingRewardsRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorOutstandingRewardsRecord}
 */
export const decodeCosmosDistributionValidatorOutstandingRewardsRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf ValidatorAccumulatedCommissionRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorAccumulatedCommissionRecord}
 */
export const decodeCosmosDistributionValidatorAccumulatedCommissionRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosDistributionValidatorAccumulatedCommission]);
/**
 * Decodes a protobuf ValidatorHistoricalRewardsRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorHistoricalRewardsRecord}
 */
export const decodeCosmosDistributionValidatorHistoricalRewardsRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1], [0, 0, decodeCosmosDistributionValidatorHistoricalRewards]);
/**
 * Decodes a protobuf ValidatorCurrentRewardsRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorCurrentRewardsRecord}
 */
export const decodeCosmosDistributionValidatorCurrentRewardsRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosDistributionValidatorCurrentRewards]);
/**
 * Decodes a protobuf DelegatorStartingInfoRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegatorStartingInfoRecord}
 */
export const decodeCosmosDistributionDelegatorStartingInfoRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeCosmosDistributionDelegatorStartingInfo]);
/**
 * Decodes a protobuf ValidatorSlashEventRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorSlashEventRecord}
 */
export const decodeCosmosDistributionValidatorSlashEventRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, 1], [0, 0, 0, decodeCosmosDistributionValidatorSlashEvent]);
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionGenesisState}
 */
export const decodeCosmosDistributionGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 0, 5, 0, 0, 0, 0, 0, 0], [decodeCosmosDistributionParams, decodeCosmosDistributionFeePool, decodeCosmosDistributionDelegatorWithdrawInfo, 0, decodeCosmosDistributionValidatorOutstandingRewardsRecord, decodeCosmosDistributionValidatorAccumulatedCommissionRecord, decodeCosmosDistributionValidatorHistoricalRewardsRecord, decodeCosmosDistributionValidatorCurrentRewardsRecord, decodeCosmosDistributionDelegatorStartingInfoRecord, decodeCosmosDistributionValidatorSlashEventRecord]);
/**
 * Destructures the fields of a {@link CosmosDistributionDelegatorWithdrawInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the address of the delegator.
 *   - 1: withdraw_address - the address to withdraw the delegation rewards to.
 */
export const destructCosmosDistributionDelegatorWithdrawInfo = (g_struct) => [g_struct.delegator_address, g_struct.withdraw_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATOR_WITHDRAW_INFO = '/cosmos.distribution.v1beta1.DelegatorWithdrawInfo';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorOutstandingRewardsRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: outstanding_rewards - represents the outstanding rewards of a validator.
 */
export const destructCosmosDistributionValidatorOutstandingRewardsRecord = (g_struct) => [g_struct.validator_address, g_struct.outstanding_rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_OUTSTANDING_REWARDS_RECORD = '/cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorAccumulatedCommissionRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: accumulated - the accumulated commission of a validator.
 */
export const destructCosmosDistributionValidatorAccumulatedCommissionRecord = (g_struct) => [g_struct.validator_address, g_struct.accumulated];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_ACCUMULATED_COMMISSION_RECORD = '/cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorHistoricalRewardsRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: period - defines the period the historical rewards apply to.
 *   - 2: rewards - defines the historical rewards of a validator.
 */
export const destructCosmosDistributionValidatorHistoricalRewardsRecord = (g_struct) => [g_struct.validator_address, g_struct.period, g_struct.rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_HISTORICAL_REWARDS_RECORD = '/cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorCurrentRewardsRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: rewards - defines the current rewards of a validator.
 */
export const destructCosmosDistributionValidatorCurrentRewardsRecord = (g_struct) => [g_struct.validator_address, g_struct.rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_CURRENT_REWARDS_RECORD = '/cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord';
/**
 * Destructures the fields of a {@link CosmosDistributionDelegatorStartingInfoRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the address of the delegator.
 *   - 1: validator_address - the address of the validator.
 *   - 2: starting_info - defines the starting info of a delegator.
 */
export const destructCosmosDistributionDelegatorStartingInfoRecord = (g_struct) => [g_struct.delegator_address, g_struct.validator_address, g_struct.starting_info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATOR_STARTING_INFO_RECORD = '/cosmos.distribution.v1beta1.DelegatorStartingInfoRecord';
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorSlashEventRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - the address of the validator.
 *   - 1: height - defines the block height at which the slash event occurred.
 *   - 2: period - the period of the slash event.
 *   - 3: validator_slash_event - describes the slash event.
 */
export const destructCosmosDistributionValidatorSlashEventRecord = (g_struct) => [g_struct.validator_address, g_struct.height, g_struct.period, g_struct.validator_slash_event];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_SLASH_EVENT_RECORD = '/cosmos.distribution.v1beta1.ValidatorSlashEventRecord';
/**
 * Destructures the fields of a {@link CosmosDistributionGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines all the parameters of the module.
 *   - 1: fee_pool - defines the fee pool at genesis.
 *   - 2: delegator_withdraw_infos - fee_pool defines the delegator withdraw infos at genesis.
 *   - 3: previous_proposer - fee_pool defines the previous proposer at genesis.
 *   - 4: outstanding_rewards - fee_pool defines the outstanding rewards of all validators at genesis.
 *   - 5: validator_accumulated_commissions - fee_pool defines the accumulated commissions of all validators at genesis.
 *   - 6: validator_historical_rewards - fee_pool defines the historical rewards of all validators at genesis.
 *   - 7: validator_current_rewards - fee_pool defines the current rewards of all validators at genesis.
 *   - 8: delegator_starting_infos - fee_pool defines the delegator starting infos at genesis.
 *   - 9: validator_slash_events - fee_pool defines the validator slash events at genesis.
 */
export const destructCosmosDistributionGenesisState = (g_struct) => [g_struct.params, g_struct.fee_pool, g_struct.delegator_withdraw_infos, g_struct.previous_proposer, g_struct.outstanding_rewards, g_struct.validator_accumulated_commissions, g_struct.validator_historical_rewards, g_struct.validator_current_rewards, g_struct.delegator_starting_infos, g_struct.validator_slash_events];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_GENESIS_STATE = '/cosmos.distribution.v1beta1.GenesisState';
//# sourceMappingURL=genesis.js.map