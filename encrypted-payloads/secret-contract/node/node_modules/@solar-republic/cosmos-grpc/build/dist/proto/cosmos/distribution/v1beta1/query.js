import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeCosmosBaseDecCoin } from '../../base/v1beta1/coin.js';
import { decodeCosmosDistributionParams, decodeCosmosDistributionValidatorOutstandingRewards, decodeCosmosDistributionValidatorAccumulatedCommission, decodeCosmosDistributionValidatorSlashEvent, decodeCosmosDistributionDelegationDelegatorReward } from './distribution.js';
const SR_LCD_COSMOS_DISTRIBUTION_QUERY = '/cosmos/distribution/v1beta1/';
/**
 * Queries params of the distribution module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryCosmosDistributionParams = restful_grpc(() => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'params']);
/**
 * Queries validator commission and self-delegation rewards for validator
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: operator_address - defines the validator operator address.
 *   - 1: self_bond_rewards - defines the validator operator address.
 *   - 2: commission - defines the validator operator address.
 */
export const queryCosmosDistributionValidatorDistributionInfo = restful_grpc(sa_validator => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'validators/' + sa_validator]);
/**
 * Queries rewards of a validator address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: rewards - the 'rewards' response property
 */
export const queryCosmosDistributionValidatorOutstandingRewards = restful_grpc(sa_validator => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'validators/' + sa_validator + '/outstanding_rewards']);
/**
 * Queries accumulated commission for a validator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: commission - defines the commission the validator received.
 */
export const queryCosmosDistributionValidatorCommission = restful_grpc(sa_validator => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'validators/' + sa_validator + '/commission']);
/**
 * Queries slash events of a validator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @param sg_starting_height - defines the optional starting height to query the slashes.
 * @param sg_ending_height - starting_height defines the optional ending height to query the slashes.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: slashes - defines the slashes the validator received.
 *   - 1: pagination - defines the slashes the validator received.
 */
export const queryCosmosDistributionValidatorSlashes = restful_grpc((sa_validator, sg_starting_height, sg_ending_height, g_pagination) => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'validators/' + sa_validator + '/slashes', {
        starting_height: sg_starting_height,
        ending_height: sg_ending_height,
        pagination: g_pagination,
    }]);
/**
 * Queries the total rewards accrued by a delegation.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: rewards - defines the rewards accrued by a delegation.
 */
export const queryCosmosDistributionDelegationRewards = restful_grpc((sa_delegator, sa_validator) => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'delegators/' + sa_delegator + '/rewards/' + sa_validator]);
/**
 * Queries the total rewards accrued by each validator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator - defines the delegator address to query for.
 * @returns a tuple where:
 *   - 0: rewards - defines all the rewards accrued by a delegator.
 *   - 1: total - defines all the rewards accrued by a delegator.
 */
export const queryCosmosDistributionDelegationTotalRewards = restful_grpc(sa_delegator => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'delegators/' + sa_delegator + '/rewards']);
/**
 * Queries the validators of a delegator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator - defines the delegator address to query for.
 * @returns a tuple where:
 *   - 0: validators - defines the validators a delegator is delegating for.
 */
export const queryCosmosDistributionDelegatorValidators = restful_grpc(sa_delegator => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'delegators/' + sa_delegator + '/validators']);
/**
 * Queries withdraw address of a delegator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator - defines the delegator address to query for.
 * @returns a tuple where:
 *   - 0: withdraw_address - defines the delegator address to query for.
 */
export const queryCosmosDistributionDelegatorWithdrawAddress = restful_grpc(sa_delegator => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'delegators/' + sa_delegator + '/withdraw_address']);
/**
 * Queries the community pool coins. Deprecated: Prefer to use x/protocolpool module's CommunityPool rpc method. Since: cosmos-sdk 0.50
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: pool - defines community pool's coins.
 */
export const queryCosmosDistributionCommunityPool = restful_grpc(() => [SR_LCD_COSMOS_DISTRIBUTION_QUERY + 'community_pool']);
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryValidatorDistributionInfoRequest` protobuf message: the request type for the Query/ValidatorDistributionInfo RPC method.
 * @param sa_validator - `validator_address`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorDistributionInfoRequest = (sa_validator) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .o;
/**
 * Encodes a `QueryValidatorDistributionInfoResponse` protobuf message: the response type for the Query/ValidatorDistributionInfo RPC method.
 * @param sa_operator - `operator_address`: defines the validator operator address.
 * @param a_self_bond_rewards - `self_bond_rewards`: defines the self delegations rewards.
 * @param a_commissions - `commission`: defines the commission the validator received.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorDistributionInfoResponse = (sa_operator, a_self_bond_rewards, a_commissions) => Protobuf() // ...
    .s(sa_operator) // string operator_address = 1
    .B(a_self_bond_rewards) // DecCoin[] self_bond_rewards = 2
    .B(a_commissions) // DecCoin[] commission = 3
    .o;
/**
 * Encodes a `QueryValidatorOutstandingRewardsRequest` protobuf message: the request type for the Query/ValidatorOutstandingRewards RPC method.
 * @param sa_validator - `validator_address`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorOutstandingRewardsRequest = (sa_validator) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .o;
/**
 * Encodes a `QueryValidatorOutstandingRewardsResponse` protobuf message: the response type for the Query/ValidatorOutstandingRewards RPC method.
 * @param g_rewards - `rewards`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorOutstandingRewardsResponse = (atu8_rewards) => Protobuf() // ...
    .b(atu8_rewards) // ValidatorOutstandingRewards rewards = 1
    .o;
/**
 * Encodes a `QueryValidatorCommissionRequest` protobuf message: the request type for the Query/ValidatorCommission RPC method
 * @param sa_validator - `validator_address`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorCommissionRequest = (sa_validator) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .o;
/**
 * Encodes a `QueryValidatorCommissionResponse` protobuf message: the response type for the Query/ValidatorCommission RPC method
 * @param g_commission - `commission`: defines the commission the validator received.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorCommissionResponse = (atu8_commission) => Protobuf() // ...
    .b(atu8_commission) // ValidatorAccumulatedCommission commission = 1
    .o;
/**
 * Encodes a `QueryValidatorSlashesRequest` protobuf message: the request type for the Query/ValidatorSlashes RPC method
 * @param sa_validator - `validator_address`: defines the validator address to query for.
 * @param sg_starting_height - `starting_height`: defines the optional starting height to query the slashes.
 * @param sg_ending_height - `ending_height`: starting_height defines the optional ending height to query the slashes.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorSlashesRequest = (sa_validator, sg_starting_height, sg_ending_height, atu8_pagination) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .g(sg_starting_height) // uint64 starting_height = 2
    .g(sg_ending_height) // uint64 ending_height = 3
    .b(atu8_pagination) // PageRequest pagination = 4
    .o;
/**
 * Encodes a `QueryValidatorSlashesResponse` protobuf message: the response type for the Query/ValidatorSlashes RPC method.
 * @param a_slashes - `slashes`: defines the slashes the validator received.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryValidatorSlashesResponse = (a_slashes, atu8_pagination) => Protobuf() // ...
    .B(a_slashes) // ValidatorSlashEvent[] slashes = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDelegationRewardsRequest` protobuf message: the request type for the Query/DelegationRewards RPC method.
 * @param sa_delegator - `delegator_address`: defines the delegator address to query for.
 * @param sa_validator - `validator_address`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegationRewardsRequest = (sa_delegator, sa_validator) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator) // string validator_address = 2
    .o;
/**
 * Encodes a `QueryDelegationRewardsResponse` protobuf message: the response type for the Query/DelegationRewards RPC method.
 * @param a_rewards - `rewards`: defines the rewards accrued by a delegation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegationRewardsResponse = (a_rewards) => Protobuf() // ...
    .B(a_rewards) // DecCoin[] rewards = 1
    .o;
/**
 * Encodes a `QueryDelegationTotalRewardsRequest` protobuf message: the request type for the Query/DelegationTotalRewards RPC method.
 * @param sa_delegator - `delegator_address`: defines the delegator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegationTotalRewardsRequest = (sa_delegator) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .o;
/**
 * Encodes a `QueryDelegationTotalRewardsResponse` protobuf message: the response type for the Query/DelegationTotalRewards RPC method.
 * @param a_rewards - `rewards`: defines all the rewards accrued by a delegator.
 * @param a_totals - `total`: defines the sum of all the rewards.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegationTotalRewardsResponse = (a_rewards, a_totals) => Protobuf() // ...
    .B(a_rewards) // DelegationDelegatorReward[] rewards = 1
    .B(a_totals) // DecCoin[] total = 2
    .o;
/**
 * Encodes a `QueryDelegatorValidatorsRequest` protobuf message: the request type for the Query/DelegatorValidators RPC method.
 * @param sa_delegator - `delegator_address`: defines the delegator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegatorValidatorsRequest = (sa_delegator) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .o;
/**
 * Encodes a `QueryDelegatorValidatorsResponse` protobuf message: the response type for the Query/DelegatorValidators RPC method.
 * @param a_validators - `validators`: defines the validators a delegator is delegating for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegatorValidatorsResponse = (a_validators) => Protobuf() // ...
    .S(a_validators) // string[] validators = 1
    .o;
/**
 * Encodes a `QueryDelegatorWithdrawAddressRequest` protobuf message: the request type for the Query/DelegatorWithdrawAddress RPC method.
 * @param sa_delegator - `delegator_address`: defines the delegator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegatorWithdrawAddressRequest = (sa_delegator) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .o;
/**
 * Encodes a `QueryDelegatorWithdrawAddressResponse` protobuf message: the response type for the Query/DelegatorWithdrawAddress RPC method.
 * @param sa_withdraw - `withdraw_address`: defines the delegator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryDelegatorWithdrawAddressResponse = (sa_withdraw) => Protobuf() // ...
    .s(sa_withdraw) // string withdraw_address = 1
    .o;
/**
 * Encodes a `QueryCommunityPoolRequest` protobuf message: the request type for the Query/CommunityPool RPC method. Deprecated Since: cosmos-sdk 0.50
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryCommunityPoolRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryCommunityPoolResponse` protobuf message: the response type for the Query/CommunityPool RPC method. Deprecated Since: cosmos-sdk 0.50
 * @param a_pools - `pool`: defines community pool's coins.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosDistributionQueryCommunityPoolResponse = (a_pools) => Protobuf() // ...
    .B(a_pools) // DecCoin[] pool = 1
    .o;
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryParamsRequest}
 */
export const decodeCosmosDistributionQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryParamsResponse}
 */
export const decodeCosmosDistributionQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosDistributionParams]);
/**
 * Decodes a protobuf QueryValidatorDistributionInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorDistributionInfoRequest}
 */
export const decodeCosmosDistributionQueryValidatorDistributionInfoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryValidatorDistributionInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorDistributionInfoResponse}
 */
export const decodeCosmosDistributionQueryValidatorDistributionInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 0], [0, decodeCosmosBaseDecCoin, decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf QueryValidatorOutstandingRewardsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorOutstandingRewardsRequest}
 */
export const decodeCosmosDistributionQueryValidatorOutstandingRewardsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryValidatorOutstandingRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorOutstandingRewardsResponse}
 */
export const decodeCosmosDistributionQueryValidatorOutstandingRewardsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosDistributionValidatorOutstandingRewards]);
/**
 * Decodes a protobuf QueryValidatorCommissionRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorCommissionRequest}
 */
export const decodeCosmosDistributionQueryValidatorCommissionRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryValidatorCommission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorCommissionResponse}
 */
export const decodeCosmosDistributionQueryValidatorCommissionResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosDistributionValidatorAccumulatedCommission]);
/**
 * Decodes a protobuf QueryValidatorSlashesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorSlashesRequest}
 */
export const decodeCosmosDistributionQueryValidatorSlashesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, 1], [0, 0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryValidatorSlashes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryValidatorSlashesResponse}
 */
export const decodeCosmosDistributionQueryValidatorSlashesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosDistributionValidatorSlashEvent, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDelegationRewardsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegationRewardsRequest}
 */
export const decodeCosmosDistributionQueryDelegationRewardsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryDelegationRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegationRewardsResponse}
 */
export const decodeCosmosDistributionQueryDelegationRewardsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf QueryDelegationTotalRewardsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegationTotalRewardsRequest}
 */
export const decodeCosmosDistributionQueryDelegationTotalRewardsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDelegationTotalRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegationTotalRewardsResponse}
 */
export const decodeCosmosDistributionQueryDelegationTotalRewardsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0], [decodeCosmosDistributionDelegationDelegatorReward, decodeCosmosBaseDecCoin]);
/**
 * Decodes a protobuf QueryDelegatorValidatorsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegatorValidatorsRequest}
 */
export const decodeCosmosDistributionQueryDelegatorValidatorsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDelegatorValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegatorValidatorsResponse}
 */
export const decodeCosmosDistributionQueryDelegatorValidatorsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf QueryDelegatorWithdrawAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegatorWithdrawAddressRequest}
 */
export const decodeCosmosDistributionQueryDelegatorWithdrawAddressRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDelegatorWithdrawAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryDelegatorWithdrawAddressResponse}
 */
export const decodeCosmosDistributionQueryDelegatorWithdrawAddressResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryCommunityPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryCommunityPoolRequest}
 */
export const decodeCosmosDistributionQueryCommunityPoolRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryCommunityPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionQueryCommunityPoolResponse}
 */
export const decodeCosmosDistributionQueryCommunityPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Destructures the fields of a {@link CosmosDistributionQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosDistributionQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_PARAMS_REQUEST = '/cosmos.distribution.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructCosmosDistributionQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_PARAMS_RESPONSE = '/cosmos.distribution.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorDistributionInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - defines the validator address to query for.
 */
export const destructCosmosDistributionQueryValidatorDistributionInfoRequest = (g_struct) => [g_struct.validator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_DISTRIBUTION_INFO_REQUEST = '/cosmos.distribution.v1beta1.QueryValidatorDistributionInfoRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorDistributionInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: operator_address - defines the validator operator address.
 *   - 1: self_bond_rewards - defines the self delegations rewards.
 *   - 2: commission - defines the commission the validator received.
 */
export const destructCosmosDistributionQueryValidatorDistributionInfoResponse = (g_struct) => [g_struct.operator_address, g_struct.self_bond_rewards, g_struct.commission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_DISTRIBUTION_INFO_RESPONSE = '/cosmos.distribution.v1beta1.QueryValidatorDistributionInfoResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorOutstandingRewardsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - defines the validator address to query for.
 */
export const destructCosmosDistributionQueryValidatorOutstandingRewardsRequest = (g_struct) => [g_struct.validator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_OUTSTANDING_REWARDS_REQUEST = '/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorOutstandingRewardsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards -
 */
export const destructCosmosDistributionQueryValidatorOutstandingRewardsResponse = (g_struct) => [g_struct.rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_OUTSTANDING_REWARDS_RESPONSE = '/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorCommissionRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - defines the validator address to query for.
 */
export const destructCosmosDistributionQueryValidatorCommissionRequest = (g_struct) => [g_struct.validator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_COMMISSION_REQUEST = '/cosmos.distribution.v1beta1.QueryValidatorCommissionRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorCommissionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commission - defines the commission the validator received.
 */
export const destructCosmosDistributionQueryValidatorCommissionResponse = (g_struct) => [g_struct.commission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_COMMISSION_RESPONSE = '/cosmos.distribution.v1beta1.QueryValidatorCommissionResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorSlashesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address - defines the validator address to query for.
 *   - 1: starting_height - defines the optional starting height to query the slashes.
 *   - 2: ending_height - starting_height defines the optional ending height to query the slashes.
 *   - 3: pagination - defines an optional pagination for the request.
 */
export const destructCosmosDistributionQueryValidatorSlashesRequest = (g_struct) => [g_struct.validator_address, g_struct.starting_height, g_struct.ending_height, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_SLASHES_REQUEST = '/cosmos.distribution.v1beta1.QueryValidatorSlashesRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryValidatorSlashesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: slashes - defines the slashes the validator received.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosDistributionQueryValidatorSlashesResponse = (g_struct) => [g_struct.slashes, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_VALIDATOR_SLASHES_RESPONSE = '/cosmos.distribution.v1beta1.QueryValidatorSlashesResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegationRewardsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - defines the delegator address to query for.
 *   - 1: validator_address - defines the validator address to query for.
 */
export const destructCosmosDistributionQueryDelegationRewardsRequest = (g_struct) => [g_struct.delegator_address, g_struct.validator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATION_REWARDS_REQUEST = '/cosmos.distribution.v1beta1.QueryDelegationRewardsRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegationRewardsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards - defines the rewards accrued by a delegation.
 */
export const destructCosmosDistributionQueryDelegationRewardsResponse = (g_struct) => [g_struct.rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATION_REWARDS_RESPONSE = '/cosmos.distribution.v1beta1.QueryDelegationRewardsResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegationTotalRewardsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - defines the delegator address to query for.
 */
export const destructCosmosDistributionQueryDelegationTotalRewardsRequest = (g_struct) => [g_struct.delegator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATION_TOTAL_REWARDS_REQUEST = '/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegationTotalRewardsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards - defines all the rewards accrued by a delegator.
 *   - 1: total - defines the sum of all the rewards.
 */
export const destructCosmosDistributionQueryDelegationTotalRewardsResponse = (g_struct) => [g_struct.rewards, g_struct.total];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATION_TOTAL_REWARDS_RESPONSE = '/cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegatorValidatorsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - defines the delegator address to query for.
 */
export const destructCosmosDistributionQueryDelegatorValidatorsRequest = (g_struct) => [g_struct.delegator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATOR_VALIDATORS_REQUEST = '/cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegatorValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators - defines the validators a delegator is delegating for.
 */
export const destructCosmosDistributionQueryDelegatorValidatorsResponse = (g_struct) => [g_struct.validators];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATOR_VALIDATORS_RESPONSE = '/cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegatorWithdrawAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - defines the delegator address to query for.
 */
export const destructCosmosDistributionQueryDelegatorWithdrawAddressRequest = (g_struct) => [g_struct.delegator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATOR_WITHDRAW_ADDRESS_REQUEST = '/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryDelegatorWithdrawAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: withdraw_address - defines the delegator address to query for.
 */
export const destructCosmosDistributionQueryDelegatorWithdrawAddressResponse = (g_struct) => [g_struct.withdraw_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_DELEGATOR_WITHDRAW_ADDRESS_RESPONSE = '/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryCommunityPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosDistributionQueryCommunityPoolRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_COMMUNITY_POOL_REQUEST = '/cosmos.distribution.v1beta1.QueryCommunityPoolRequest';
/**
 * Destructures the fields of a {@link CosmosDistributionQueryCommunityPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - defines community pool's coins.
 */
export const destructCosmosDistributionQueryCommunityPoolResponse = (g_struct) => [g_struct.pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_QUERY_COMMUNITY_POOL_RESPONSE = '/cosmos.distribution.v1beta1.QueryCommunityPoolResponse';
//# sourceMappingURL=query.js.map