import type { WeakInt64Str, WeakAccountAddr, CwInt64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../../api/types.js';
export type EncodedCosmosEvidenceEquivocation = Encoded<'/cosmos.evidence.v1beta1.Equivocation'>;
/**
 * Encodes a `Equivocation` protobuf message: implements the Evidence interface and defines evidence of double signing misbehavior.
 * @param sg_height - `height`: the equivocation height.
 * @param xt_time - `time`: the equivocation time.
 * @param sg_power - `power`: the equivocation validator power.
 * @param sa_consensus - `consensus_address`: the equivocation validator consensus address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceEquivocation: (sg_height?: Opt<WeakInt64Str>, xt_time?: Opt<number>, sg_power?: Opt<WeakInt64Str>, sa_consensus?: Opt<WeakAccountAddr>) => EncodedCosmosEvidenceEquivocation;
/**
 * A decoded protobuf Equivocation message
 *
 * Tuple where:
 *   - 0: height - the equivocation height.
 *   - 1: time - the equivocation time.
 *   - 2: power - the equivocation validator power.
 *   - 3: consensus_address - the equivocation validator consensus address.
 */
export type DecodedCosmosEvidenceEquivocation = [
    sg_height?: CwInt64,
    a_time?: [
        string,
        number
    ],
    sg_power?: CwInt64,
    sa_consensus?: CwAccountAddr
];
/**
 * Decodes a protobuf Equivocation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceEquivocation}
 */
export declare const decodeCosmosEvidenceEquivocation: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceEquivocation;
/**
 * Destructures the fields of a {@link CosmosEvidenceEquivocation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - the equivocation height.
 *   - 1: time - the equivocation time.
 *   - 2: power - the equivocation validator power.
 *   - 3: consensus_address - the equivocation validator consensus address.
 */
export declare const destructCosmosEvidenceEquivocation: (g_struct: CosmosEvidenceEquivocation) => [height?: CwInt64, time?: number, power?: CwInt64, consensus_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_EQUIVOCATION = "/cosmos.evidence.v1beta1.Equivocation";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.Equivocation` - implements the Evidence interface and defines evidence of double signing misbehavior.
 */
export type CosmosEvidenceEquivocation = {
    height?: CwInt64 | undefined;
    time?: WeakTimestampStr | undefined;
    power?: CwInt64 | undefined;
    consensus_address?: CwAccountAddr | undefined;
};
