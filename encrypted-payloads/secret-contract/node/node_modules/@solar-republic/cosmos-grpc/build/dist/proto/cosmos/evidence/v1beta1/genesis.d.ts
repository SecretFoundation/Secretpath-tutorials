import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedCosmosEvidenceGenesisState = Encoded<'/cosmos.evidence.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the evidence module's genesis state.
 * @param a_evidences - `evidence`: defines all the evidence at genesis.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceGenesisState: (a_evidences?: Opt<Uint8Array[]>) => EncodedCosmosEvidenceGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: evidence - defines all the evidence at genesis.
 */
export type DecodedCosmosEvidenceGenesisState = [
    a_evidence?: DecodedGoogleProtobufAny[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceGenesisState}
 */
export declare const decodeCosmosEvidenceGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceGenesisState;
/**
 * Destructures the fields of a {@link CosmosEvidenceGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence - defines all the evidence at genesis.
 */
export declare const destructCosmosEvidenceGenesisState: (g_struct: CosmosEvidenceGenesisState) => [evidence?: JsonAny[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_GENESIS_STATE = "/cosmos.evidence.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.GenesisState` - defines the evidence module's genesis state.
 */
export type CosmosEvidenceGenesisState = {
    evidence?: JsonAny[] | undefined;
};
