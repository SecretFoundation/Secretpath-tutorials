/// <reference types="node" />
import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedCosmosEvidenceQueryEvidenceRequest = Encoded<'/cosmos.evidence.v1beta1.QueryEvidenceRequest'>;
export type EncodedCosmosEvidenceQueryEvidenceResponse = Encoded<'/cosmos.evidence.v1beta1.QueryEvidenceResponse'>;
export type EncodedCosmosEvidenceQueryAllEvidenceRequest = Encoded<'/cosmos.evidence.v1beta1.QueryAllEvidenceRequest'>;
export type EncodedCosmosEvidenceQueryAllEvidenceResponse = Encoded<'/cosmos.evidence.v1beta1.QueryAllEvidenceResponse'>;
/**
 * Queries evidence based on evidence hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_evidence_hash - defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 * @param s_hash - defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 * @returns a tuple where:
 *   - 0: evidence - returns the requested evidence.
 */
export declare const queryCosmosEvidenceEvidence: (z_req: string | ({
    origin: string;
} & RequestInit), atu8_evidence_hash?: Opt<Uint8Array>, s_hash?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosEvidenceQueryEvidenceResponse>>;
/**
 * Queries all evidence.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: evidence - returns all evidences.
 *   - 1: pagination - returns all evidences.
 */
export declare const queryCosmosEvidenceAllEvidence: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosEvidenceQueryAllEvidenceResponse>>;
/**
 * Encodes a `QueryEvidenceRequest` protobuf message: the request type for the Query/Evidence RPC method.
 * @param atu8_evidence_hash - `evidence_hash`: defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 * @param s_hash - `hash`: defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceQueryEvidenceRequest: (atu8_evidence_hash?: Opt<Uint8Array>, s_hash?: Opt<string>) => EncodedCosmosEvidenceQueryEvidenceRequest;
/**
 * Encodes a `QueryEvidenceResponse` protobuf message: the response type for the Query/Evidence RPC method.
 * @param atu8_evidence - `evidence`: returns the requested evidence.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceQueryEvidenceResponse: (atu8_evidence?: Opt<Uint8Array>) => EncodedCosmosEvidenceQueryEvidenceResponse;
/**
 * Encodes a `QueryAllEvidenceRequest` protobuf message: QueryEvidenceRequest is the request type for the Query/AllEvidence RPC method.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceQueryAllEvidenceRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosEvidenceQueryAllEvidenceRequest;
/**
 * Encodes a `QueryAllEvidenceResponse` protobuf message: the response type for the Query/AllEvidence RPC method.
 * @param a_evidences - `evidence`: returns all evidences.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceQueryAllEvidenceResponse: (a_evidences?: Opt<Uint8Array[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosEvidenceQueryAllEvidenceResponse;
/**
 * A decoded protobuf QueryEvidenceRequest message
 *
 * Tuple where:
 *   - 0: evidence_hash - defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 *   - 1: hash - defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 */
export type DecodedCosmosEvidenceQueryEvidenceRequest = [
    atu8_evidence_hash?: Uint8Array,
    s_hash?: string
];
/**
 * Decodes a protobuf QueryEvidenceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryEvidenceRequest}
 */
export declare const decodeCosmosEvidenceQueryEvidenceRequest: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceQueryEvidenceRequest;
/**
 * A decoded protobuf QueryEvidence message
 *
 * Alias for: evidence - returns the requested evidence.
 */
export type DecodedCosmosEvidenceQueryEvidenceResponse = [
    a_evidence?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf QueryEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryEvidenceResponse}
 */
export declare const decodeCosmosEvidenceQueryEvidenceResponse: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceQueryEvidenceResponse;
/**
 * A decoded protobuf QueryAllEvidenceRequest message
 *
 * Alias for: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosEvidenceQueryAllEvidenceRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryAllEvidenceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryAllEvidenceRequest}
 */
export declare const decodeCosmosEvidenceQueryAllEvidenceRequest: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceQueryAllEvidenceRequest;
/**
 * A decoded protobuf QueryAllEvidence message
 *
 * Tuple where:
 *   - 0: evidence - returns all evidences.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosEvidenceQueryAllEvidenceResponse = [
    a_evidence?: DecodedGoogleProtobufAny[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryAllEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryAllEvidenceResponse}
 */
export declare const decodeCosmosEvidenceQueryAllEvidenceResponse: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceQueryAllEvidenceResponse;
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryEvidenceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence_hash - defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 *   - 1: hash - defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 */
export declare const destructCosmosEvidenceQueryEvidenceRequest: (g_struct: CosmosEvidenceQueryEvidenceRequest) => [evidence_hash?: Uint8Array, hash?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_EVIDENCE_REQUEST = "/cosmos.evidence.v1beta1.QueryEvidenceRequest";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.QueryEvidenceRequest` - the request type for the Query/Evidence RPC method.
 */
export type CosmosEvidenceQueryEvidenceRequest = {
    evidence_hash?: CwBase64 | undefined;
    hash?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryEvidenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence - returns the requested evidence.
 */
export declare const destructCosmosEvidenceQueryEvidenceResponse: (g_struct: CosmosEvidenceQueryEvidenceResponse) => [evidence?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_EVIDENCE_RESPONSE = "/cosmos.evidence.v1beta1.QueryEvidenceResponse";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.QueryEvidenceResponse` - the response type for the Query/Evidence RPC method.
 */
export type CosmosEvidenceQueryEvidenceResponse = {
    evidence?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryAllEvidenceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosEvidenceQueryAllEvidenceRequest: (g_struct: CosmosEvidenceQueryAllEvidenceRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_ALL_EVIDENCE_REQUEST = "/cosmos.evidence.v1beta1.QueryAllEvidenceRequest";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.QueryAllEvidenceRequest` - QueryEvidenceRequest is the request type for the Query/AllEvidence RPC method.
 */
export type CosmosEvidenceQueryAllEvidenceRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryAllEvidenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence - returns all evidences.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosEvidenceQueryAllEvidenceResponse: (g_struct: CosmosEvidenceQueryAllEvidenceResponse) => [evidence?: JsonAny[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_ALL_EVIDENCE_RESPONSE = "/cosmos.evidence.v1beta1.QueryAllEvidenceResponse";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.QueryAllEvidenceResponse` - the response type for the Query/AllEvidence RPC method.
 */
export type CosmosEvidenceQueryAllEvidenceResponse = {
    evidence?: JsonAny[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
