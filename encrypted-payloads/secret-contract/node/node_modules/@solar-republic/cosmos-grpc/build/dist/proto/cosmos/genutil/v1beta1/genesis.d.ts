import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosGenutilGenesisState = Encoded<'/cosmos.genutil.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the raw genesis transaction in JSON.
 * @param a_gen_txs - `gen_txs`: defines the genesis transactions.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGenutilGenesisState: (a_gen_txs?: Opt<Uint8Array[]>) => EncodedCosmosGenutilGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: gen_txs - defines the genesis transactions.
 */
export type DecodedCosmosGenutilGenesisState = [
    a_gen_txs?: Uint8Array[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGenutilGenesisState}
 */
export declare const decodeCosmosGenutilGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosGenutilGenesisState;
/**
 * Destructures the fields of a {@link CosmosGenutilGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gen_txs - defines the genesis transactions.
 */
export declare const destructCosmosGenutilGenesisState: (g_struct: CosmosGenutilGenesisState) => [gen_txs?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GENUTIL_GENESIS_STATE = "/cosmos.genutil.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.genutil.v1beta1.GenesisState` - defines the raw genesis transaction in JSON.
 */
export type CosmosGenutilGenesisState = {
    gen_txs?: CwBase64[] | undefined;
};
