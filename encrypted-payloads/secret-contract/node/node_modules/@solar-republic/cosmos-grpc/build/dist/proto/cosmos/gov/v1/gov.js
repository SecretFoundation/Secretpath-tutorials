import { __UNDEFINED } from '@blake.regalia/belt';
import { parse_duration, parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, coins } from '../../../../api/protobuf-writer.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `WeightedVoteOption` protobuf message: defines a unit of vote for vote split.
 * @param xc_option - `option`: defines the valid vote options, it must not contain duplicate vote options.
 * @param s_weight - `weight`: the vote weight associated with the vote option.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovWeightedVoteOption = (xc_option, s_weight) => Protobuf() // ...
    .v(xc_option) // VoteOption option = 1
    .s(s_weight) // string weight = 2
    .o;
/**
 * Encodes a `Deposit` protobuf message: defines an amount deposited by an account address to an active proposal.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @param a_amounts - `amount`: to be deposited by depositor.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovDeposit = (sg_proposal_id, sa_depositor, a_amounts) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_depositor) // string depositor = 2
    .B(coins(a_amounts)) // Coin[] amount = 3
    .o;
/**
 * Encodes a `Proposal` protobuf message: defines the core field members of a governance proposal.
 * @param sg_id - `id`: defines the unique id of the proposal.
 * @param a_messages - `messages`: the arbitrary messages to be executed if the proposal passes.
 * @param xc_status - `status`: defines the proposal status.
 * @param g_final_tally_result - `final_tally_result`: the final tally result of the proposal. When querying a proposal via gRPC, this field is not populated until the proposal's voting period has ended.
 * @param xt_submit_time - `submit_time`: the time of proposal submission.
 * @param xt_deposit_end_time - `deposit_end_time`: the end time for deposition.
 * @param a_total_deposits - `total_deposit`: the total deposit on the proposal.
 * @param xt_voting_start_time - `voting_start_time`: the starting time to vote on a proposal.
 * @param xt_voting_end_time - `voting_end_time`: the end time of voting on a proposal.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3
 * @param s_title - `title`: the title of the proposal Since: cosmos-sdk 0.47
 * @param s_summary - `summary`: a short summary of the proposal Since: cosmos-sdk 0.47
 * @param s_proposer - `proposer`: the address of the proposal sumbitter Since: cosmos-sdk 0.47
 * @param b_expedited - `expedited`: defines if the proposal is expedited Since: cosmos-sdk 0.50
 * @param s_failed_reason - `failed_reason`: defines the reason why the proposal failed Since: cosmos-sdk 0.50
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovProposal = (sg_id, a_messages, xc_status, atu8_final_tally_result, xt_submit_time, xt_deposit_end_time, a_total_deposits, xt_voting_start_time, xt_voting_end_time, s_metadata, s_title, s_summary, s_proposer, b_expedited, s_failed_reason) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .B(a_messages) // Any[] messages = 2
    .v(xc_status) // ProposalStatus status = 3
    .b(atu8_final_tally_result) // TallyResult final_tally_result = 4
    .b(temporal(xt_submit_time)) // Timestamp submit_time = 5
    .b(temporal(xt_deposit_end_time)) // Timestamp deposit_end_time = 6
    .B(coins(a_total_deposits)) // Coin[] total_deposit = 7
    .b(temporal(xt_voting_start_time)) // Timestamp voting_start_time = 8
    .b(temporal(xt_voting_end_time)) // Timestamp voting_end_time = 9
    .s(s_metadata) // string metadata = 10
    .s(s_title) // string title = 11
    .s(s_summary) // string summary = 12
    .s(s_proposer) // string proposer = 13
    .v(b_expedited) // boolean expedited = 14
    .s(s_failed_reason) // string failed_reason = 15
    .o;
/**
 * Encodes a `TallyResult` protobuf message: defines a standard tally for a governance proposal.
 * @param s_yes_count - `yes_count`: the number of yes votes on a proposal.
 * @param s_abstain_count - `abstain_count`: the number of abstain votes on a proposal.
 * @param s_no_count - `no_count`: the number of no votes on a proposal.
 * @param s_no_with_veto_count - `no_with_veto_count`: the number of no with veto votes on a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovTallyResult = (s_yes_count, s_abstain_count, s_no_count, s_no_with_veto_count) => Protobuf() // ...
    .s(s_yes_count) // string yes_count = 1
    .s(s_abstain_count) // string abstain_count = 2
    .s(s_no_count) // string no_count = 3
    .s(s_no_with_veto_count) // string no_with_veto_count = 4
    .o;
/**
 * Encodes a `Vote` protobuf message: defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address of the proposal.
 * @param a_options - `options`: the weighted vote options.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovVote = (sg_proposal_id, sa_voter, a_options, s_metadata) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .B(a_options, 4) // WeightedVoteOption[] options = 4
    .s(s_metadata, 5) // string metadata = 5
    .o;
/**
 * Encodes a `DepositParams` protobuf message: defines the params for deposits on governance proposals.
 * @param a_min_deposits - `min_deposit`: Minimum deposit for a proposal to enter voting period.
 * @param xt_max_deposit_period - `max_deposit_period`: Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovDepositParams = (a_min_deposits, xt_max_deposit_period) => Protobuf() // ...
    .B(coins(a_min_deposits)) // Coin[] min_deposit = 1
    .b(temporal(xt_max_deposit_period)) // Duration max_deposit_period = 2
    .o;
/**
 * Encodes a `VotingParams` protobuf message: defines the params for voting on governance proposals.
 * @param xt_voting_period - `voting_period`: Duration of the voting period.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovVotingParams = (xt_voting_period) => Protobuf() // ...
    .b(temporal(xt_voting_period)) // Duration voting_period = 1
    .o;
/**
 * Encodes a `TallyParams` protobuf message: defines the params for tallying votes on governance proposals.
 * @param s_quorum - `quorum`: Minimum percentage of total stake needed to vote for a result to be considered valid.
 * @param s_threshold - `threshold`: Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 * @param s_veto_threshold - `veto_threshold`: Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovTallyParams = (s_quorum, s_threshold, s_veto_threshold) => Protobuf() // ...
    .s(s_quorum) // string quorum = 1
    .s(s_threshold) // string threshold = 2
    .s(s_veto_threshold) // string veto_threshold = 3
    .o;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/gov module. Since: cosmos-sdk 0.47
 * @param a_min_deposits - `min_deposit`: Minimum deposit for a proposal to enter voting period.
 * @param xt_max_deposit_period - `max_deposit_period`: Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 * @param xt_voting_period - `voting_period`: Duration of the voting period.
 * @param s_quorum - `quorum`: Minimum percentage of total stake needed to vote for a result to be considered valid.
 * @param s_threshold - `threshold`: Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 * @param s_veto_threshold - `veto_threshold`: Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 * @param s_min_initial_deposit_ratio - `min_initial_deposit_ratio`: The ratio representing the proportion of the deposit value that must be paid at proposal submission.
 * @param s_proposal_cancel_ratio - `proposal_cancel_ratio`: The cancel ratio which will not be returned back to the depositors when a proposal is cancelled. Since: cosmos-sdk 0.50
 * @param s_proposal_cancel_dest - `proposal_cancel_dest`: The address which will receive (proposal_cancel_ratio * deposit) proposal deposits. If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned. Since: cosmos-sdk 0.50
 * @param xt_expedited_voting_period - `expedited_voting_period`: Duration of the voting period of an expedited proposal. Since: cosmos-sdk 0.50
 * @param s_expedited_threshold - `expedited_threshold`: Minimum proportion of Yes votes for proposal to pass. Default value: 0.67. Since: cosmos-sdk 0.50
 * @param a_expedited_min_deposits - `expedited_min_deposit`: Minimum expedited deposit for a proposal to enter voting period.
 * @param b_burn_vote_quorum - `burn_vote_quorum`: burn deposits if a proposal does not meet quorum
 * @param b_burn_proposal_deposit_prevote - `burn_proposal_deposit_prevote`: burn deposits if the proposal does not enter voting period
 * @param b_burn_vote_veto - `burn_vote_veto`: burn deposits if quorum with vote type no_veto is met
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovParams = (a_min_deposits, xt_max_deposit_period, xt_voting_period, s_quorum, s_threshold, s_veto_threshold, s_min_initial_deposit_ratio, s_proposal_cancel_ratio, s_proposal_cancel_dest, xt_expedited_voting_period, s_expedited_threshold, a_expedited_min_deposits, b_burn_vote_quorum, b_burn_proposal_deposit_prevote, b_burn_vote_veto) => Protobuf() // ...
    .B(coins(a_min_deposits)) // Coin[] min_deposit = 1
    .b(temporal(xt_max_deposit_period)) // Duration max_deposit_period = 2
    .b(temporal(xt_voting_period)) // Duration voting_period = 3
    .s(s_quorum) // string quorum = 4
    .s(s_threshold) // string threshold = 5
    .s(s_veto_threshold) // string veto_threshold = 6
    .s(s_min_initial_deposit_ratio) // string min_initial_deposit_ratio = 7
    .s(s_proposal_cancel_ratio) // string proposal_cancel_ratio = 8
    .s(s_proposal_cancel_dest) // string proposal_cancel_dest = 9
    .b(temporal(xt_expedited_voting_period)) // Duration expedited_voting_period = 10
    .s(s_expedited_threshold) // string expedited_threshold = 11
    .B(coins(a_expedited_min_deposits)) // Coin[] expedited_min_deposit = 12
    .v(b_burn_vote_quorum) // boolean burn_vote_quorum = 13
    .v(b_burn_proposal_deposit_prevote) // boolean burn_proposal_deposit_prevote = 14
    .v(b_burn_vote_veto) // boolean burn_vote_veto = 15
    .o;
/**
 * Decodes a protobuf WeightedVoteOption message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovWeightedVoteOption}
 */
export const decodeCosmosGovWeightedVoteOption = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovDeposit}
 */
export const decodeCosmosGovDeposit = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf Proposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovProposal}
 */
export const decodeCosmosGovProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0, 1, 1, [3, 1], [3, 1], 0, [3, 1], [3, 1], 5, 5, 5, 5, 1, 5], [0, decodeGoogleProtobufAny, 0, decodeCosmosGovTallyResult, decode_temporal, decode_temporal, decode_coin, decode_temporal, decode_temporal]);
/**
 * Decodes a protobuf TallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovTallyResult}
 */
export const decodeCosmosGovTallyResult = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosGovVote}
 */
export const decodeCosmosGovVote = ((atu8_payload, [sg_proposal_id, sa_voter, , a_options, s_metadata] = decode_protobuf(atu8_payload, [3, 5, 0, 0, 5], [0, 0, 0, decodeCosmosGovWeightedVoteOption])) => [sg_proposal_id, sa_voter, __UNDEFINED, a_options, s_metadata]);
/**
 * Decodes a protobuf DepositParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovDepositParams}
 */
export const decodeCosmosGovDepositParams = (atu8_payload) => decode_protobuf(atu8_payload, [0, [3, 1]], [decode_coin, decode_temporal]);
/**
 * Decodes a protobuf VotingParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovVotingParams}
 */
export const decodeCosmosGovVotingParams = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1]], [decode_temporal]);
/**
 * Decodes a protobuf TallyParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovTallyParams}
 */
export const decodeCosmosGovTallyParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovParams}
 */
export const decodeCosmosGovParams = (atu8_payload) => decode_protobuf(atu8_payload, [0, [3, 1], [3, 1], 5, 5, 5, 5, 5, 5, [3, 1], 5, 0, 1, 1, 1], [decode_coin, decode_temporal, decode_temporal, 0, 0, 0, 0, 0, 0, decode_temporal, 0, decode_coin]);
/**
 * Destructures the fields of a {@link CosmosGovWeightedVoteOption} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: option - defines the valid vote options, it must not contain duplicate vote options.
 *   - 1: weight - the vote weight associated with the vote option.
 */
export const destructCosmosGovWeightedVoteOption = (g_struct) => [g_struct.option, g_struct.weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_WEIGHTED_VOTE_OPTION = '/cosmos.gov.v1.WeightedVoteOption';
/**
 * Destructures the fields of a {@link CosmosGovParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_deposit - Minimum deposit for a proposal to enter voting period.
 *   - 1: max_deposit_period - Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 *   - 2: voting_period - Duration of the voting period.
 *   - 3: quorum - Minimum percentage of total stake needed to vote for a result to be considered valid.
 *   - 4: threshold - Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 *   - 5: veto_threshold - Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 *   - 6: min_initial_deposit_ratio - The ratio representing the proportion of the deposit value that must be paid at proposal submission.
 *   - 7: proposal_cancel_ratio - The cancel ratio which will not be returned back to the depositors when a proposal is cancelled. Since: cosmos-sdk 0.50
 *   - 8: proposal_cancel_dest - The address which will receive (proposal_cancel_ratio * deposit) proposal deposits. If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned. Since: cosmos-sdk 0.50
 *   - 9: expedited_voting_period - Duration of the voting period of an expedited proposal. Since: cosmos-sdk 0.50
 *   - 10: expedited_threshold - Minimum proportion of Yes votes for proposal to pass. Default value: 0.67. Since: cosmos-sdk 0.50
 *   - 11: expedited_min_deposit - Minimum expedited deposit for a proposal to enter voting period.
 *   - 12: burn_vote_quorum - burn deposits if a proposal does not meet quorum
 *   - 13: burn_proposal_deposit_prevote - burn deposits if the proposal does not enter voting period
 *   - 14: burn_vote_veto - burn deposits if quorum with vote type no_veto is met
 */
export const destructCosmosGovParams = (g_struct) => [g_struct.min_deposit, parse_duration(g_struct.max_deposit_period), parse_duration(g_struct.voting_period), g_struct.quorum, g_struct.threshold, g_struct.veto_threshold, g_struct.min_initial_deposit_ratio, g_struct.proposal_cancel_ratio, g_struct.proposal_cancel_dest, parse_duration(g_struct.expedited_voting_period), g_struct.expedited_threshold, g_struct.expedited_min_deposit, g_struct.burn_vote_quorum, g_struct.burn_proposal_deposit_prevote, g_struct.burn_vote_veto];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_PARAMS = '/cosmos.gov.v1.Params';
/**
 * Destructures the fields of a {@link CosmosGovDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export const destructCosmosGovDeposit = (g_struct) => [g_struct.proposal_id, g_struct.depositor, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_DEPOSIT = '/cosmos.gov.v1.Deposit';
/**
 * Destructures the fields of a {@link CosmosGovProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - defines the unique id of the proposal.
 *   - 1: messages - the arbitrary messages to be executed if the proposal passes.
 *   - 2: status - defines the proposal status.
 *   - 3: final_tally_result - the final tally result of the proposal. When querying a proposal via gRPC, this field is not populated until the proposal's voting period has ended.
 *   - 4: submit_time - the time of proposal submission.
 *   - 5: deposit_end_time - the end time for deposition.
 *   - 6: total_deposit - the total deposit on the proposal.
 *   - 7: voting_start_time - the starting time to vote on a proposal.
 *   - 8: voting_end_time - the end time of voting on a proposal.
 *   - 9: metadata - any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#proposal-3
 *   - 10: title - the title of the proposal Since: cosmos-sdk 0.47
 *   - 11: summary - a short summary of the proposal Since: cosmos-sdk 0.47
 *   - 12: proposer - the address of the proposal sumbitter Since: cosmos-sdk 0.47
 *   - 13: expedited - defines if the proposal is expedited Since: cosmos-sdk 0.50
 *   - 14: failed_reason - defines the reason why the proposal failed Since: cosmos-sdk 0.50
 */
export const destructCosmosGovProposal = (g_struct) => [g_struct.id, g_struct.messages, g_struct.status, g_struct.final_tally_result, parse_timestamp(g_struct.submit_time), parse_timestamp(g_struct.deposit_end_time), g_struct.total_deposit, parse_timestamp(g_struct.voting_start_time), parse_timestamp(g_struct.voting_end_time), g_struct.metadata, g_struct.title, g_struct.summary, g_struct.proposer, g_struct.expedited, g_struct.failed_reason];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_PROPOSAL = '/cosmos.gov.v1.Proposal';
/**
 * Destructures the fields of a {@link CosmosGovTallyResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: yes_count - the number of yes votes on a proposal.
 *   - 1: abstain_count - the number of abstain votes on a proposal.
 *   - 2: no_count - the number of no votes on a proposal.
 *   - 3: no_with_veto_count - the number of no with veto votes on a proposal.
 */
export const destructCosmosGovTallyResult = (g_struct) => [g_struct.yes_count, g_struct.abstain_count, g_struct.no_count, g_struct.no_with_veto_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_TALLY_RESULT = '/cosmos.gov.v1.TallyResult';
/**
 * Destructures the fields of a {@link CosmosGovVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address of the proposal.
 *   - 3: options - the weighted vote options.
 *   - 4: metadata - any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/gov#vote-5
 */
export const destructCosmosGovVote = (g_struct) => [g_struct.proposal_id, g_struct.voter, __UNDEFINED, g_struct.options, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_VOTE = '/cosmos.gov.v1.Vote';
/**
 * Destructures the fields of a {@link CosmosGovDepositParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_deposit - Minimum deposit for a proposal to enter voting period.
 *   - 1: max_deposit_period - Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 */
export const destructCosmosGovDepositParams = (g_struct) => [g_struct.min_deposit, parse_duration(g_struct.max_deposit_period)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_DEPOSIT_PARAMS = '/cosmos.gov.v1.DepositParams';
/**
 * Destructures the fields of a {@link CosmosGovVotingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voting_period - Duration of the voting period.
 */
export const destructCosmosGovVotingParams = (g_struct) => [parse_duration(g_struct.voting_period)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_VOTING_PARAMS = '/cosmos.gov.v1.VotingParams';
/**
 * Destructures the fields of a {@link CosmosGovTallyParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: quorum - Minimum percentage of total stake needed to vote for a result to be considered valid.
 *   - 1: threshold - Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 *   - 2: veto_threshold - Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 */
export const destructCosmosGovTallyParams = (g_struct) => [g_struct.quorum, g_struct.threshold, g_struct.veto_threshold];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_TALLY_PARAMS = '/cosmos.gov.v1.TallyParams';
/**
 * Protobuf enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines a no-op vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export const XC_PROTO_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines a no-op vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export const SI_JSON_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED = 'VOTE_OPTION_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export const XC_PROTO_COSMOS_GOV_VOTE_OPTION_YES = 1;
/**
 * JSON enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export const SI_JSON_COSMOS_GOV_VOTE_OPTION_YES = 'VOTE_OPTION_YES';
/**
 * Protobuf enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export const XC_PROTO_COSMOS_GOV_VOTE_OPTION_ABSTAIN = 2;
/**
 * JSON enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export const SI_JSON_COSMOS_GOV_VOTE_OPTION_ABSTAIN = 'VOTE_OPTION_ABSTAIN';
/**
 * Protobuf enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export const XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO = 3;
/**
 * JSON enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export const SI_JSON_COSMOS_GOV_VOTE_OPTION_NO = 'VOTE_OPTION_NO';
/**
 * Protobuf enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export const XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO = 4;
/**
 * JSON enum value for `cosmos.gov.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export const SI_JSON_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO = 'VOTE_OPTION_NO_WITH_VETO';
/**
 * Maps a protobuf enum int value for `cosmos.gov.v1.VoteOption` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosGovVoteOption = {
    [XC_PROTO_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED]: SI_JSON_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED,
    [XC_PROTO_COSMOS_GOV_VOTE_OPTION_YES]: SI_JSON_COSMOS_GOV_VOTE_OPTION_YES,
    [XC_PROTO_COSMOS_GOV_VOTE_OPTION_ABSTAIN]: SI_JSON_COSMOS_GOV_VOTE_OPTION_ABSTAIN,
    [XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO]: SI_JSON_COSMOS_GOV_VOTE_OPTION_NO,
    [XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO]: SI_JSON_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO,
};
/**
 * Maps a JSON enum string value for `cosmos.gov.v1.VoteOption` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosGovVoteOption = {
    [SI_JSON_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED]: XC_PROTO_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED,
    [SI_JSON_COSMOS_GOV_VOTE_OPTION_YES]: XC_PROTO_COSMOS_GOV_VOTE_OPTION_YES,
    [SI_JSON_COSMOS_GOV_VOTE_OPTION_ABSTAIN]: XC_PROTO_COSMOS_GOV_VOTE_OPTION_ABSTAIN,
    [SI_JSON_COSMOS_GOV_VOTE_OPTION_NO]: XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO,
    [SI_JSON_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO]: XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO,
};
/**
 * Protobuf enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - defines the default proposal status.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - defines the default proposal status.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED = 'PROPOSAL_STATUS_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_DEPOSIT_PERIOD** - defines a proposal status during the deposit period.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD = 1;
/**
 * JSON enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_DEPOSIT_PERIOD** - defines a proposal status during the deposit period.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD = 'PROPOSAL_STATUS_DEPOSIT_PERIOD';
/**
 * Protobuf enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_VOTING_PERIOD** - defines a proposal status during the voting period.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD = 2;
/**
 * JSON enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_VOTING_PERIOD** - defines a proposal status during the voting period.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD = 'PROPOSAL_STATUS_VOTING_PERIOD';
/**
 * Protobuf enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_PASSED** - defines a proposal status of a proposal that has passed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_PASSED = 3;
/**
 * JSON enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_PASSED** - defines a proposal status of a proposal that has passed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_PASSED = 'PROPOSAL_STATUS_PASSED';
/**
 * Protobuf enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - defines a proposal status of a proposal that has been rejected.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_REJECTED = 4;
/**
 * JSON enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - defines a proposal status of a proposal that has been rejected.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_REJECTED = 'PROPOSAL_STATUS_REJECTED';
/**
 * Protobuf enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_FAILED** - defines a proposal status of a proposal that has failed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_FAILED = 5;
/**
 * JSON enum value for `cosmos.gov.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_FAILED** - defines a proposal status of a proposal that has failed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_FAILED = 'PROPOSAL_STATUS_FAILED';
/**
 * Maps a protobuf enum int value for `cosmos.gov.v1.ProposalStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosGovProposalStatus = {
    [XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED]: SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED,
    [XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD]: SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD,
    [XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD]: SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD,
    [XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_PASSED]: SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_PASSED,
    [XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_REJECTED]: SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_REJECTED,
    [XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_FAILED]: SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_FAILED,
};
/**
 * Maps a JSON enum string value for `cosmos.gov.v1.ProposalStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosGovProposalStatus = {
    [SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED]: XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED,
    [SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD]: XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD,
    [SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD]: XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD,
    [SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_PASSED]: XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_PASSED,
    [SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_REJECTED]: XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_REJECTED,
    [SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_FAILED]: XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_FAILED,
};
//# sourceMappingURL=gov.js.map