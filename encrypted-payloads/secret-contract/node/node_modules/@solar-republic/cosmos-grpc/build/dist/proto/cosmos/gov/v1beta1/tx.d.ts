import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
import type { CosmosDistributionCommunityPoolSpendProposal, CosmosDistributionCommunityPoolSpendProposalWithDeposit } from '../../distribution/v1beta1/distribution.js';
import type { CosmosGovTextProposal, ProtoEnumCosmosGovVoteOption, JsonEnumCosmosGovVoteOption, CosmosGovWeightedVoteOption, DecodedCosmosGovWeightedVoteOption } from './gov.js';
import type { CosmosParamsParameterChangeProposal } from '../../params/v1beta1/params.js';
import type { CosmosUpgradeSoftwareUpgradeProposal, CosmosUpgradeCancelSoftwareUpgradeProposal } from '../../upgrade/v1beta1/upgrade.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
import type { IbcCoreClientClientUpdateProposal, IbcCoreClientUpgradeProposal } from '../../../ibc/core/client/v1/client.js';
import type { OsmosisGammReplaceMigrationRecordsProposal, OsmosisGammUpdateMigrationRecordsProposal, OsmosisGammCreateConcentratedLiquidityPoolsAndLinktoCFMMProposal, OsmosisGammSetScalingFactorControllerProposal } from '../../../osmosis/gamm/v1beta1/gov.js';
import type { OsmosisPoolincentivesReplacePoolIncentivesProposal, OsmosisPoolincentivesUpdatePoolIncentivesProposal } from '../../../osmosis/pool-incentives/v1beta1/gov.js';
import type { OsmosisProtorevSetProtoRevEnabledProposal, OsmosisProtorevSetProtoRevAdminAccountProposal } from '../../../osmosis/protorev/v1beta1/gov.js';
import type { OsmosisSuperfluidSetSuperfluidAssetsProposal, OsmosisSuperfluidRemoveSuperfluidAssetsProposal, OsmosisSuperfluidUpdateUnpoolWhiteListProposal } from '../../../osmosis/superfluid/v1beta1/gov.js';
import type { OsmosisTxfeesUpdateFeeTokenProposal } from '../../../osmosis/txfees/v1beta1/gov.js';
export type EncodedCosmosGovMsgSubmitProposal = Encoded<'/cosmos.gov.v1beta1.MsgSubmitProposal'>;
export type EncodedCosmosGovMsgSubmitProposalResponse = Encoded<'/cosmos.gov.v1beta1.MsgSubmitProposalResponse'>;
export type EncodedCosmosGovMsgVote = Encoded<'/cosmos.gov.v1beta1.MsgVote'>;
export type EncodedCosmosGovMsgVoteResponse = Encoded<'/cosmos.gov.v1beta1.MsgVoteResponse'>;
export type EncodedCosmosGovMsgVoteWeighted = Encoded<'/cosmos.gov.v1beta1.MsgVoteWeighted'>;
export type EncodedCosmosGovMsgVoteWeightedResponse = Encoded<'/cosmos.gov.v1beta1.MsgVoteWeightedResponse'>;
export type EncodedCosmosGovMsgDeposit = Encoded<'/cosmos.gov.v1beta1.MsgDeposit'>;
export type EncodedCosmosGovMsgDepositResponse = Encoded<'/cosmos.gov.v1beta1.MsgDepositResponse'>;
/**
 * Encodes a `MsgSubmitProposal` protobuf message: defines an sdk.Msg type that supports submitting arbitrary proposal Content.
 * @param atu8_content - `content`: the proposal's content.
 * @param a_initial_deposits - `initial_deposit`: the deposit value that must be paid at proposal submission.
 * @param s_proposer - `proposer`: the account address of the proposer.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgSubmitProposal: (atu8_content?: Opt<Encoded<'cosmos.gov.v1beta1.Content'>>, a_initial_deposits?: Opt<SlimCoin[]>, s_proposer?: Opt<string>) => EncodedCosmosGovMsgSubmitProposal;
/**
 * Encodes a `MsgSubmitProposalResponse` protobuf message: defines the Msg/SubmitProposal response type.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgSubmitProposalResponse: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGovMsgSubmitProposalResponse;
/**
 * Encodes a `MsgVote` protobuf message: defines a message to cast a vote.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address for the proposal.
 * @param xc_option - `option`: defines the vote option.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgVote: (sg_proposal_id?: Opt<WeakUint64Str>, sa_voter?: Opt<WeakAccountAddr>, xc_option?: Opt<ProtoEnumCosmosGovVoteOption>) => EncodedCosmosGovMsgVote;
/**
 * Encodes a `MsgVoteResponse` protobuf message: defines the Msg/Vote response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgVoteResponse: () => EncodedCosmosGovMsgVoteResponse;
/**
 * Encodes a `MsgVoteWeighted` protobuf message: defines a message to cast a vote. Since: cosmos-sdk 0.43
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address for the proposal.
 * @param a_options - `options`: defines the weighted vote options.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgVoteWeighted: (sg_proposal_id?: Opt<WeakUint64Str>, sa_voter?: Opt<WeakAccountAddr>, a_options?: Opt<Encoded<'/cosmos.gov.v1beta1.WeightedVoteOption'>[]>) => EncodedCosmosGovMsgVoteWeighted;
/**
 * Encodes a `MsgVoteWeightedResponse` protobuf message: defines the Msg/VoteWeighted response type. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgVoteWeightedResponse: () => EncodedCosmosGovMsgVoteWeightedResponse;
/**
 * Encodes a `MsgDeposit` protobuf message: defines a message to submit a deposit to an existing proposal.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @param a_amounts - `amount`: to be deposited by depositor.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgDeposit: (sg_proposal_id?: Opt<WeakUint64Str>, sa_depositor?: Opt<WeakAccountAddr>, a_amounts?: Opt<SlimCoin[]>) => EncodedCosmosGovMsgDeposit;
/**
 * Encodes a `MsgDepositResponse` protobuf message: defines the Msg/Deposit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovMsgDepositResponse: () => EncodedCosmosGovMsgDepositResponse;
/**
 * A decoded protobuf SubmitProposal message
 *
 * Tuple where:
 *   - 0: content - the proposal's content.
 *   - 1: initial_deposit - the deposit value that must be paid at proposal submission.
 *   - 2: proposer - the account address of the proposer.
 */
export type DecodedCosmosGovMsgSubmitProposal = [
    a_content?: DecodedGoogleProtobufAny,
    a_initial_deposit?: [
        string,
        string
    ][],
    s_proposer?: string
];
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgSubmitProposal}
 */
export declare const decodeCosmosGovMsgSubmitProposal: (atu8_payload: Uint8Array) => DecodedCosmosGovMsgSubmitProposal;
/**
 * A decoded protobuf SubmitProposal message
 *
 * Alias for: proposal_id - defines the unique id of the proposal.
 */
export type DecodedCosmosGovMsgSubmitProposalResponse = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgSubmitProposalResponse}
 */
export declare const decodeCosmosGovMsgSubmitProposalResponse: (atu8_payload: Uint8Array) => DecodedCosmosGovMsgSubmitProposalResponse;
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: option - defines the vote option.
 */
export type DecodedCosmosGovMsgVote = [
    sg_proposal_id?: CwUint64,
    sa_voter?: CwAccountAddr,
    xc_option?: ProtoEnumCosmosGovVoteOption
];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVote}
 */
export declare const decodeCosmosGovMsgVote: (atu8_payload: Uint8Array) => DecodedCosmosGovMsgVote;
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 */
export type DecodedCosmosGovMsgVoteResponse = [];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteResponse}
 */
export declare const decodeCosmosGovMsgVoteResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf VoteWeighted message
 *
 * Tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: options - defines the weighted vote options.
 */
export type DecodedCosmosGovMsgVoteWeighted = [
    sg_proposal_id?: CwUint64,
    sa_voter?: CwAccountAddr,
    a_options?: DecodedCosmosGovWeightedVoteOption[]
];
/**
 * Decodes a protobuf VoteWeighted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteWeighted}
 */
export declare const decodeCosmosGovMsgVoteWeighted: (atu8_payload: Uint8Array) => DecodedCosmosGovMsgVoteWeighted;
/**
 * A decoded protobuf VoteWeighted message
 *
 * Tuple where:
 */
export type DecodedCosmosGovMsgVoteWeightedResponse = [];
/**
 * Decodes a protobuf VoteWeighted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteWeightedResponse}
 */
export declare const decodeCosmosGovMsgVoteWeightedResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Deposit message
 *
 * Tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export type DecodedCosmosGovMsgDeposit = [
    sg_proposal_id?: CwUint64,
    sa_depositor?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgDeposit}
 */
export declare const decodeCosmosGovMsgDeposit: (atu8_payload: Uint8Array) => DecodedCosmosGovMsgDeposit;
/**
 * A decoded protobuf Deposit message
 *
 * Tuple where:
 */
export type DecodedCosmosGovMsgDepositResponse = [];
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgDepositResponse}
 */
export declare const decodeCosmosGovMsgDepositResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link CosmosGovMsgSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: content - the proposal's content.
 *   - 1: initial_deposit - the deposit value that must be paid at proposal submission.
 *   - 2: proposer - the account address of the proposer.
 */
export declare const destructCosmosGovMsgSubmitProposal: (g_struct: CosmosGovMsgSubmitProposal) => [content?: JsonAny<string, CosmosDistributionCommunityPoolSpendProposal | CosmosDistributionCommunityPoolSpendProposalWithDeposit | CosmosParamsParameterChangeProposal | CosmosUpgradeSoftwareUpgradeProposal | CosmosUpgradeCancelSoftwareUpgradeProposal | IbcCoreClientClientUpdateProposal | IbcCoreClientUpgradeProposal | OsmosisGammReplaceMigrationRecordsProposal | OsmosisGammUpdateMigrationRecordsProposal | OsmosisGammCreateConcentratedLiquidityPoolsAndLinktoCFMMProposal | OsmosisGammSetScalingFactorControllerProposal | OsmosisPoolincentivesReplacePoolIncentivesProposal | OsmosisPoolincentivesUpdatePoolIncentivesProposal | OsmosisProtorevSetProtoRevEnabledProposal | OsmosisProtorevSetProtoRevAdminAccountProposal | OsmosisSuperfluidSetSuperfluidAssetsProposal | OsmosisSuperfluidRemoveSuperfluidAssetsProposal | OsmosisSuperfluidUpdateUnpoolWhiteListProposal | OsmosisTxfeesUpdateFeeTokenProposal | CosmosGovTextProposal>, initial_deposit?: CosmosBaseCoin[], proposer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_SUBMIT_PROPOSAL = "/cosmos.gov.v1beta1.MsgSubmitProposal";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgSubmitProposal` - defines an sdk.Msg type that supports submitting arbitrary proposal Content.
 */
export type CosmosGovMsgSubmitProposal = {
    content?: JsonAny<string, CosmosUpgradeSoftwareUpgradeProposal | CosmosUpgradeCancelSoftwareUpgradeProposal | CosmosDistributionCommunityPoolSpendProposal | CosmosDistributionCommunityPoolSpendProposalWithDeposit | CosmosParamsParameterChangeProposal | CosmosGovTextProposal | IbcCoreClientClientUpdateProposal | IbcCoreClientUpgradeProposal | OsmosisProtorevSetProtoRevEnabledProposal | OsmosisProtorevSetProtoRevAdminAccountProposal | OsmosisGammReplaceMigrationRecordsProposal | OsmosisGammUpdateMigrationRecordsProposal | OsmosisGammCreateConcentratedLiquidityPoolsAndLinktoCFMMProposal | OsmosisGammSetScalingFactorControllerProposal | OsmosisSuperfluidSetSuperfluidAssetsProposal | OsmosisSuperfluidRemoveSuperfluidAssetsProposal | OsmosisSuperfluidUpdateUnpoolWhiteListProposal | OsmosisTxfeesUpdateFeeTokenProposal | OsmosisPoolincentivesReplacePoolIncentivesProposal | OsmosisPoolincentivesUpdatePoolIncentivesProposal> | undefined;
    initial_deposit?: CosmosBaseCoin[] | undefined;
    proposer?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovMsgSubmitProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 */
export declare const destructCosmosGovMsgSubmitProposalResponse: (g_struct: CosmosGovMsgSubmitProposalResponse) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_SUBMIT_PROPOSAL_RESPONSE = "/cosmos.gov.v1beta1.MsgSubmitProposalResponse";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgSubmitProposalResponse` - defines the Msg/SubmitProposal response type.
 */
export type CosmosGovMsgSubmitProposalResponse = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovMsgVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: option - defines the vote option.
 */
export declare const destructCosmosGovMsgVote: (g_struct: CosmosGovMsgVote) => [proposal_id?: CwUint64, voter?: CwAccountAddr, option?: JsonEnumCosmosGovVoteOption];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE = "/cosmos.gov.v1beta1.MsgVote";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgVote` - defines a message to cast a vote.
 */
export type CosmosGovMsgVote = {
    proposal_id?: CwUint64 | undefined;
    voter?: CwAccountAddr | undefined;
    option?: JsonEnumCosmosGovVoteOption | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGovMsgVoteResponse: (g_struct: CosmosGovMsgVoteResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_RESPONSE = "/cosmos.gov.v1beta1.MsgVoteResponse";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgVoteResponse` - defines the Msg/Vote response type.
 */
export type CosmosGovMsgVoteResponse = {};
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteWeighted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: options - defines the weighted vote options.
 */
export declare const destructCosmosGovMsgVoteWeighted: (g_struct: CosmosGovMsgVoteWeighted) => [proposal_id?: CwUint64, voter?: CwAccountAddr, options?: CosmosGovWeightedVoteOption[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_WEIGHTED = "/cosmos.gov.v1beta1.MsgVoteWeighted";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgVoteWeighted` - defines a message to cast a vote. Since: cosmos-sdk 0.43
 */
export type CosmosGovMsgVoteWeighted = {
    proposal_id?: CwUint64 | undefined;
    voter?: CwAccountAddr | undefined;
    options?: CosmosGovWeightedVoteOption[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteWeightedResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGovMsgVoteWeightedResponse: (g_struct: CosmosGovMsgVoteWeightedResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_WEIGHTED_RESPONSE = "/cosmos.gov.v1beta1.MsgVoteWeightedResponse";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgVoteWeightedResponse` - defines the Msg/VoteWeighted response type. Since: cosmos-sdk 0.43
 */
export type CosmosGovMsgVoteWeightedResponse = {};
/**
 * Destructures the fields of a {@link CosmosGovMsgDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export declare const destructCosmosGovMsgDeposit: (g_struct: CosmosGovMsgDeposit) => [proposal_id?: CwUint64, depositor?: CwAccountAddr, amount?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_DEPOSIT = "/cosmos.gov.v1beta1.MsgDeposit";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgDeposit` - defines a message to submit a deposit to an existing proposal.
 */
export type CosmosGovMsgDeposit = {
    proposal_id?: CwUint64 | undefined;
    depositor?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovMsgDepositResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGovMsgDepositResponse: (g_struct: CosmosGovMsgDepositResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_DEPOSIT_RESPONSE = "/cosmos.gov.v1beta1.MsgDepositResponse";
/**
 * JSON serialization of `cosmos.gov.v1beta1.MsgDepositResponse` - defines the Msg/Deposit response type.
 */
export type CosmosGovMsgDepositResponse = {};
