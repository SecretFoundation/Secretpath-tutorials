import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { ProtoEnumCosmosGroupProposalExecutorResult, JsonEnumCosmosGroupProposalExecutorResult, ProtoEnumCosmosGroupProposalStatus, JsonEnumCosmosGroupProposalStatus, CosmosGroupTallyResult, DecodedCosmosGroupTallyResult } from './types.js';
export type EncodedCosmosGroupEventCreateGroup = Encoded<'/cosmos.group.v1.EventCreateGroup'>;
export type EncodedCosmosGroupEventUpdateGroup = Encoded<'/cosmos.group.v1.EventUpdateGroup'>;
export type EncodedCosmosGroupEventCreateGroupPolicy = Encoded<'/cosmos.group.v1.EventCreateGroupPolicy'>;
export type EncodedCosmosGroupEventUpdateGroupPolicy = Encoded<'/cosmos.group.v1.EventUpdateGroupPolicy'>;
export type EncodedCosmosGroupEventSubmitProposal = Encoded<'/cosmos.group.v1.EventSubmitProposal'>;
export type EncodedCosmosGroupEventWithdrawProposal = Encoded<'/cosmos.group.v1.EventWithdrawProposal'>;
export type EncodedCosmosGroupEventVote = Encoded<'/cosmos.group.v1.EventVote'>;
export type EncodedCosmosGroupEventExec = Encoded<'/cosmos.group.v1.EventExec'>;
export type EncodedCosmosGroupEventLeaveGroup = Encoded<'/cosmos.group.v1.EventLeaveGroup'>;
export type EncodedCosmosGroupEventProposalPruned = Encoded<'/cosmos.group.v1.EventProposalPruned'>;
/**
 * Encodes a `EventCreateGroup` protobuf message: an event emitted when a group is created.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventCreateGroup: (sg_group_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupEventCreateGroup;
/**
 * Encodes a `EventUpdateGroup` protobuf message: an event emitted when a group is updated.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventUpdateGroup: (sg_group_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupEventUpdateGroup;
/**
 * Encodes a `EventCreateGroupPolicy` protobuf message: an event emitted when a group policy is created.
 * @param sa_address - `address`: the account address of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventCreateGroupPolicy: (sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosGroupEventCreateGroupPolicy;
/**
 * Encodes a `EventUpdateGroupPolicy` protobuf message: an event emitted when a group policy is updated.
 * @param sa_address - `address`: the account address of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventUpdateGroupPolicy: (sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosGroupEventUpdateGroupPolicy;
/**
 * Encodes a `EventSubmitProposal` protobuf message: an event emitted when a proposal is created.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventSubmitProposal: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupEventSubmitProposal;
/**
 * Encodes a `EventWithdrawProposal` protobuf message: an event emitted when a proposal is withdrawn.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventWithdrawProposal: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupEventWithdrawProposal;
/**
 * Encodes a `EventVote` protobuf message: an event emitted when a voter votes on a proposal.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventVote: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupEventVote;
/**
 * Encodes a `EventExec` protobuf message: an event emitted when a proposal is executed.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @param xc_result - `result`: the proposal execution result.
 * @param s_logs - `logs`: contains error logs in case the execution result is FAILURE.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventExec: (sg_proposal_id?: Opt<WeakUint64Str>, xc_result?: Opt<ProtoEnumCosmosGroupProposalExecutorResult>, s_logs?: Opt<string>) => EncodedCosmosGroupEventExec;
/**
 * Encodes a `EventLeaveGroup` protobuf message: an event emitted when group member leaves the group.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param sa_address - `address`: the account address of the group member.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventLeaveGroup: (sg_group_id?: Opt<WeakUint64Str>, sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosGroupEventLeaveGroup;
/**
 * Encodes a `EventProposalPruned` protobuf message: an event emitted when a proposal is pruned.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @param xc_status - `status`: the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
 * @param g_tally_result - `tally_result`: the proposal tally result (when applicable).
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupEventProposalPruned: (sg_proposal_id?: Opt<WeakUint64Str>, xc_status?: Opt<ProtoEnumCosmosGroupProposalStatus>, atu8_tally_result?: Opt<Encoded<'/cosmos.group.v1.TallyResult'>>) => EncodedCosmosGroupEventProposalPruned;
/**
 * A decoded protobuf EventCreateGroup message
 *
 * Alias for: group_id - the unique ID of the group.
 */
export type DecodedCosmosGroupEventCreateGroup = [
    sg_group_id?: CwUint64
];
/**
 * Decodes a protobuf EventCreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventCreateGroup}
 */
export declare const decodeCosmosGroupEventCreateGroup: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventCreateGroup;
/**
 * A decoded protobuf EventUpdateGroup message
 *
 * Alias for: group_id - the unique ID of the group.
 */
export type DecodedCosmosGroupEventUpdateGroup = [
    sg_group_id?: CwUint64
];
/**
 * Decodes a protobuf EventUpdateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventUpdateGroup}
 */
export declare const decodeCosmosGroupEventUpdateGroup: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventUpdateGroup;
/**
 * A decoded protobuf EventCreateGroupPolicy message
 *
 * Alias for: address - the account address of the group policy.
 */
export type DecodedCosmosGroupEventCreateGroupPolicy = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf EventCreateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventCreateGroupPolicy}
 */
export declare const decodeCosmosGroupEventCreateGroupPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventCreateGroupPolicy;
/**
 * A decoded protobuf EventUpdateGroupPolicy message
 *
 * Alias for: address - the account address of the group policy.
 */
export type DecodedCosmosGroupEventUpdateGroupPolicy = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf EventUpdateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventUpdateGroupPolicy}
 */
export declare const decodeCosmosGroupEventUpdateGroupPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventUpdateGroupPolicy;
/**
 * A decoded protobuf EventSubmitProposal message
 *
 * Alias for: proposal_id - the unique ID of the proposal.
 */
export type DecodedCosmosGroupEventSubmitProposal = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf EventSubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventSubmitProposal}
 */
export declare const decodeCosmosGroupEventSubmitProposal: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventSubmitProposal;
/**
 * A decoded protobuf EventWithdrawProposal message
 *
 * Alias for: proposal_id - the unique ID of the proposal.
 */
export type DecodedCosmosGroupEventWithdrawProposal = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf EventWithdrawProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventWithdrawProposal}
 */
export declare const decodeCosmosGroupEventWithdrawProposal: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventWithdrawProposal;
/**
 * A decoded protobuf EventVote message
 *
 * Alias for: proposal_id - the unique ID of the proposal.
 */
export type DecodedCosmosGroupEventVote = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf EventVote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventVote}
 */
export declare const decodeCosmosGroupEventVote: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventVote;
/**
 * A decoded protobuf EventExec message
 *
 * Tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 *   - 1: result - the proposal execution result.
 *   - 2: logs - contains error logs in case the execution result is FAILURE.
 */
export type DecodedCosmosGroupEventExec = [
    sg_proposal_id?: CwUint64,
    xc_result?: ProtoEnumCosmosGroupProposalExecutorResult,
    s_logs?: string
];
/**
 * Decodes a protobuf EventExec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventExec}
 */
export declare const decodeCosmosGroupEventExec: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventExec;
/**
 * A decoded protobuf EventLeaveGroup message
 *
 * Tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: address - the account address of the group member.
 */
export type DecodedCosmosGroupEventLeaveGroup = [
    sg_group_id?: CwUint64,
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf EventLeaveGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventLeaveGroup}
 */
export declare const decodeCosmosGroupEventLeaveGroup: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventLeaveGroup;
/**
 * A decoded protobuf EventProposalPruned message
 *
 * Tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 *   - 1: status - the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
 *   - 2: tally_result - the proposal tally result (when applicable).
 */
export type DecodedCosmosGroupEventProposalPruned = [
    sg_proposal_id?: CwUint64,
    xc_status?: ProtoEnumCosmosGroupProposalStatus,
    a_tally_result?: DecodedCosmosGroupTallyResult
];
/**
 * Decodes a protobuf EventProposalPruned message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventProposalPruned}
 */
export declare const decodeCosmosGroupEventProposalPruned: (atu8_payload: Uint8Array) => DecodedCosmosGroupEventProposalPruned;
/**
 * Destructures the fields of a {@link CosmosGroupEventCreateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 */
export declare const destructCosmosGroupEventCreateGroup: (g_struct: CosmosGroupEventCreateGroup) => [group_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_CREATE_GROUP = "/cosmos.group.v1.EventCreateGroup";
/**
 * JSON serialization of `cosmos.group.v1.EventCreateGroup` - an event emitted when a group is created.
 */
export type CosmosGroupEventCreateGroup = {
    group_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventUpdateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 */
export declare const destructCosmosGroupEventUpdateGroup: (g_struct: CosmosGroupEventUpdateGroup) => [group_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_UPDATE_GROUP = "/cosmos.group.v1.EventUpdateGroup";
/**
 * JSON serialization of `cosmos.group.v1.EventUpdateGroup` - an event emitted when a group is updated.
 */
export type CosmosGroupEventUpdateGroup = {
    group_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventCreateGroupPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy.
 */
export declare const destructCosmosGroupEventCreateGroupPolicy: (g_struct: CosmosGroupEventCreateGroupPolicy) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_CREATE_GROUP_POLICY = "/cosmos.group.v1.EventCreateGroupPolicy";
/**
 * JSON serialization of `cosmos.group.v1.EventCreateGroupPolicy` - an event emitted when a group policy is created.
 */
export type CosmosGroupEventCreateGroupPolicy = {
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventUpdateGroupPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy.
 */
export declare const destructCosmosGroupEventUpdateGroupPolicy: (g_struct: CosmosGroupEventUpdateGroupPolicy) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_UPDATE_GROUP_POLICY = "/cosmos.group.v1.EventUpdateGroupPolicy";
/**
 * JSON serialization of `cosmos.group.v1.EventUpdateGroupPolicy` - an event emitted when a group policy is updated.
 */
export type CosmosGroupEventUpdateGroupPolicy = {
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 */
export declare const destructCosmosGroupEventSubmitProposal: (g_struct: CosmosGroupEventSubmitProposal) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_SUBMIT_PROPOSAL = "/cosmos.group.v1.EventSubmitProposal";
/**
 * JSON serialization of `cosmos.group.v1.EventSubmitProposal` - an event emitted when a proposal is created.
 */
export type CosmosGroupEventSubmitProposal = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventWithdrawProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 */
export declare const destructCosmosGroupEventWithdrawProposal: (g_struct: CosmosGroupEventWithdrawProposal) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_WITHDRAW_PROPOSAL = "/cosmos.group.v1.EventWithdrawProposal";
/**
 * JSON serialization of `cosmos.group.v1.EventWithdrawProposal` - an event emitted when a proposal is withdrawn.
 */
export type CosmosGroupEventWithdrawProposal = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 */
export declare const destructCosmosGroupEventVote: (g_struct: CosmosGroupEventVote) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_VOTE = "/cosmos.group.v1.EventVote";
/**
 * JSON serialization of `cosmos.group.v1.EventVote` - an event emitted when a voter votes on a proposal.
 */
export type CosmosGroupEventVote = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventExec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 *   - 1: result - the proposal execution result.
 *   - 2: logs - contains error logs in case the execution result is FAILURE.
 */
export declare const destructCosmosGroupEventExec: (g_struct: CosmosGroupEventExec) => [proposal_id?: CwUint64, result?: JsonEnumCosmosGroupProposalExecutorResult, logs?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_EXEC = "/cosmos.group.v1.EventExec";
/**
 * JSON serialization of `cosmos.group.v1.EventExec` - an event emitted when a proposal is executed.
 */
export type CosmosGroupEventExec = {
    proposal_id?: CwUint64 | undefined;
    result?: JsonEnumCosmosGroupProposalExecutorResult | undefined;
    logs?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventLeaveGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: address - the account address of the group member.
 */
export declare const destructCosmosGroupEventLeaveGroup: (g_struct: CosmosGroupEventLeaveGroup) => [group_id?: CwUint64, address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_LEAVE_GROUP = "/cosmos.group.v1.EventLeaveGroup";
/**
 * JSON serialization of `cosmos.group.v1.EventLeaveGroup` - an event emitted when group member leaves the group.
 */
export type CosmosGroupEventLeaveGroup = {
    group_id?: CwUint64 | undefined;
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupEventProposalPruned} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 *   - 1: status - the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
 *   - 2: tally_result - the proposal tally result (when applicable).
 */
export declare const destructCosmosGroupEventProposalPruned: (g_struct: CosmosGroupEventProposalPruned) => [proposal_id?: CwUint64, status?: JsonEnumCosmosGroupProposalStatus, tally_result?: CosmosGroupTallyResult];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_PROPOSAL_PRUNED = "/cosmos.group.v1.EventProposalPruned";
/**
 * JSON serialization of `cosmos.group.v1.EventProposalPruned` - an event emitted when a proposal is pruned.
 */
export type CosmosGroupEventProposalPruned = {
    proposal_id?: CwUint64 | undefined;
    status?: JsonEnumCosmosGroupProposalStatus | undefined;
    tally_result?: CosmosGroupTallyResult | undefined;
};
