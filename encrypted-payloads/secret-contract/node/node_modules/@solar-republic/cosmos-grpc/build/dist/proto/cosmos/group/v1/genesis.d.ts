import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosGroupGroupInfo, DecodedCosmosGroupGroupInfo, CosmosGroupGroupMember, DecodedCosmosGroupGroupMember, CosmosGroupGroupPolicyInfo, DecodedCosmosGroupGroupPolicyInfo, CosmosGroupProposal, DecodedCosmosGroupProposal, CosmosGroupVote, DecodedCosmosGroupVote } from './types.js';
export type EncodedCosmosGroupGenesisState = Encoded<'/cosmos.group.v1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the group module's genesis state.
 * @param sg_group_seq - `group_seq`: the group table orm.Sequence, it is used to get the next group ID.
 * @param a_groups - `groups`: the list of groups info.
 * @param a_group_members - `group_members`: the list of groups members.
 * @param sg_group_policy_seq - `group_policy_seq`: the group policy table orm.Sequence, it is used to generate the next group policy account address.
 * @param a_group_policies - `group_policies`: the list of group policies info.
 * @param sg_proposal_seq - `proposal_seq`: the proposal table orm.Sequence, it is used to get the next proposal ID.
 * @param a_proposals - `proposals`: the list of proposals.
 * @param a_votes - `votes`: the list of votes.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupGenesisState: (sg_group_seq?: Opt<WeakUint64Str>, a_groups?: Opt<Encoded<'/cosmos.group.v1.GroupInfo'>[]>, a_group_members?: Opt<Encoded<'/cosmos.group.v1.GroupMember'>[]>, sg_group_policy_seq?: Opt<WeakUint64Str>, a_group_policies?: Opt<Encoded<'/cosmos.group.v1.GroupPolicyInfo'>[]>, sg_proposal_seq?: Opt<WeakUint64Str>, a_proposals?: Opt<Encoded<'/cosmos.group.v1.Proposal'>[]>, a_votes?: Opt<Encoded<'/cosmos.group.v1.Vote'>[]>) => EncodedCosmosGroupGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: group_seq - the group table orm.Sequence, it is used to get the next group ID.
 *   - 1: groups - the list of groups info.
 *   - 2: group_members - the list of groups members.
 *   - 3: group_policy_seq - the group policy table orm.Sequence, it is used to generate the next group policy account address.
 *   - 4: group_policies - the list of group policies info.
 *   - 5: proposal_seq - the proposal table orm.Sequence, it is used to get the next proposal ID.
 *   - 6: proposals - the list of proposals.
 *   - 7: votes - the list of votes.
 */
export type DecodedCosmosGroupGenesisState = [
    sg_group_seq?: CwUint64,
    a_groups?: DecodedCosmosGroupGroupInfo[],
    a_group_members?: DecodedCosmosGroupGroupMember[],
    sg_group_policy_seq?: CwUint64,
    a_group_policies?: DecodedCosmosGroupGroupPolicyInfo[],
    sg_proposal_seq?: CwUint64,
    a_proposals?: DecodedCosmosGroupProposal[],
    a_votes?: DecodedCosmosGroupVote[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGenesisState}
 */
export declare const decodeCosmosGroupGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosGroupGenesisState;
/**
 * Destructures the fields of a {@link CosmosGroupGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_seq - the group table orm.Sequence, it is used to get the next group ID.
 *   - 1: groups - the list of groups info.
 *   - 2: group_members - the list of groups members.
 *   - 3: group_policy_seq - the group policy table orm.Sequence, it is used to generate the next group policy account address.
 *   - 4: group_policies - the list of group policies info.
 *   - 5: proposal_seq - the proposal table orm.Sequence, it is used to get the next proposal ID.
 *   - 6: proposals - the list of proposals.
 *   - 7: votes - the list of votes.
 */
export declare const destructCosmosGroupGenesisState: (g_struct: CosmosGroupGenesisState) => [group_seq?: CwUint64, groups?: CosmosGroupGroupInfo[], group_members?: CosmosGroupGroupMember[], group_policy_seq?: CwUint64, group_policies?: CosmosGroupGroupPolicyInfo[], proposal_seq?: CwUint64, proposals?: CosmosGroupProposal[], votes?: CosmosGroupVote[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_GENESIS_STATE = "/cosmos.group.v1.GenesisState";
/**
 * JSON serialization of `cosmos.group.v1.GenesisState` - defines the group module's genesis state.
 */
export type CosmosGroupGenesisState = {
    group_seq?: CwUint64 | undefined;
    groups?: CosmosGroupGroupInfo[] | undefined;
    group_members?: CosmosGroupGroupMember[] | undefined;
    group_policy_seq?: CwUint64 | undefined;
    group_policies?: CosmosGroupGroupPolicyInfo[] | undefined;
    proposal_seq?: CwUint64 | undefined;
    proposals?: CosmosGroupProposal[] | undefined;
    votes?: CosmosGroupVote[] | undefined;
};
