import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { CosmosGroupMemberRequest, DecodedCosmosGroupMemberRequest, CosmosGroupThresholdDecisionPolicy, CosmosGroupPercentageDecisionPolicy, ProtoEnumCosmosGroupVoteOption, JsonEnumCosmosGroupVoteOption, ProtoEnumCosmosGroupProposalExecutorResult, JsonEnumCosmosGroupProposalExecutorResult } from './types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedCosmosGroupMsgCreateGroup = Encoded<'/cosmos.group.v1.MsgCreateGroup'>;
export type EncodedCosmosGroupMsgCreateGroupResponse = Encoded<'/cosmos.group.v1.MsgCreateGroupResponse'>;
export type EncodedCosmosGroupMsgUpdateGroupMembers = Encoded<'/cosmos.group.v1.MsgUpdateGroupMembers'>;
export type EncodedCosmosGroupMsgUpdateGroupMembersResponse = Encoded<'/cosmos.group.v1.MsgUpdateGroupMembersResponse'>;
export type EncodedCosmosGroupMsgUpdateGroupAdmin = Encoded<'/cosmos.group.v1.MsgUpdateGroupAdmin'>;
export type EncodedCosmosGroupMsgUpdateGroupAdminResponse = Encoded<'/cosmos.group.v1.MsgUpdateGroupAdminResponse'>;
export type EncodedCosmosGroupMsgUpdateGroupMetadata = Encoded<'/cosmos.group.v1.MsgUpdateGroupMetadata'>;
export type EncodedCosmosGroupMsgUpdateGroupMetadataResponse = Encoded<'/cosmos.group.v1.MsgUpdateGroupMetadataResponse'>;
export type EncodedCosmosGroupMsgCreateGroupPolicy = Encoded<'/cosmos.group.v1.MsgCreateGroupPolicy'>;
export type EncodedCosmosGroupMsgCreateGroupPolicyResponse = Encoded<'/cosmos.group.v1.MsgCreateGroupPolicyResponse'>;
export type EncodedCosmosGroupMsgUpdateGroupPolicyAdmin = Encoded<'/cosmos.group.v1.MsgUpdateGroupPolicyAdmin'>;
export type EncodedCosmosGroupMsgUpdateGroupPolicyAdminResponse = Encoded<'/cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse'>;
export type EncodedCosmosGroupMsgCreateGroupWithPolicy = Encoded<'/cosmos.group.v1.MsgCreateGroupWithPolicy'>;
export type EncodedCosmosGroupMsgCreateGroupWithPolicyResponse = Encoded<'/cosmos.group.v1.MsgCreateGroupWithPolicyResponse'>;
export type EncodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicy = Encoded<'/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy'>;
export type EncodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse = Encoded<'/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse'>;
export type EncodedCosmosGroupMsgUpdateGroupPolicyMetadata = Encoded<'/cosmos.group.v1.MsgUpdateGroupPolicyMetadata'>;
export type EncodedCosmosGroupMsgUpdateGroupPolicyMetadataResponse = Encoded<'/cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse'>;
export type EncodedCosmosGroupMsgSubmitProposal = Encoded<'/cosmos.group.v1.MsgSubmitProposal'>;
export type EncodedCosmosGroupMsgSubmitProposalResponse = Encoded<'/cosmos.group.v1.MsgSubmitProposalResponse'>;
export type EncodedCosmosGroupMsgWithdrawProposal = Encoded<'/cosmos.group.v1.MsgWithdrawProposal'>;
export type EncodedCosmosGroupMsgWithdrawProposalResponse = Encoded<'/cosmos.group.v1.MsgWithdrawProposalResponse'>;
export type EncodedCosmosGroupMsgVote = Encoded<'/cosmos.group.v1.MsgVote'>;
export type EncodedCosmosGroupMsgVoteResponse = Encoded<'/cosmos.group.v1.MsgVoteResponse'>;
export type EncodedCosmosGroupMsgExec = Encoded<'/cosmos.group.v1.MsgExec'>;
export type EncodedCosmosGroupMsgExecResponse = Encoded<'/cosmos.group.v1.MsgExecResponse'>;
export type EncodedCosmosGroupMsgLeaveGroup = Encoded<'/cosmos.group.v1.MsgLeaveGroup'>;
export type EncodedCosmosGroupMsgLeaveGroupResponse = Encoded<'/cosmos.group.v1.MsgLeaveGroupResponse'>;
/**
 * Encodes a `MsgCreateGroup` protobuf message: the Msg/CreateGroup request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param a_members - `members`: defines the group members.
 * @param s_metadata - `metadata`: any arbitrary metadata to attached to the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgCreateGroup: (s_admin?: Opt<string>, a_members?: Opt<Encoded<'/cosmos.group.v1.MemberRequest'>[]>, s_metadata?: Opt<string>) => EncodedCosmosGroupMsgCreateGroup;
/**
 * Encodes a `MsgCreateGroupResponse` protobuf message: the Msg/CreateGroup response type.
 * @param sg_group_id - `group_id`: the unique ID of the newly created group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgCreateGroupResponse: (sg_group_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupMsgCreateGroupResponse;
/**
 * Encodes a `MsgUpdateGroupMembers` protobuf message: the Msg/UpdateGroupMembers request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param a_member_updates - `member_updates`: the list of members to update, set weight to 0 to remove a member.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupMembers: (s_admin?: Opt<string>, sg_group_id?: Opt<WeakUint64Str>, a_member_updates?: Opt<Encoded<'/cosmos.group.v1.MemberRequest'>[]>) => EncodedCosmosGroupMsgUpdateGroupMembers;
/**
 * Encodes a `MsgUpdateGroupMembersResponse` protobuf message: the Msg/UpdateGroupMembers response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupMembersResponse: () => EncodedCosmosGroupMsgUpdateGroupMembersResponse;
/**
 * Encodes a `MsgUpdateGroupAdmin` protobuf message: the Msg/UpdateGroupAdmin request type.
 * @param s_admin - `admin`: the current account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_new_admin - `new_admin`: the group new admin account address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupAdmin: (s_admin?: Opt<string>, sg_group_id?: Opt<WeakUint64Str>, s_new_admin?: Opt<string>) => EncodedCosmosGroupMsgUpdateGroupAdmin;
/**
 * Encodes a `MsgUpdateGroupAdminResponse` protobuf message: the Msg/UpdateGroupAdmin response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupAdminResponse: () => EncodedCosmosGroupMsgUpdateGroupAdminResponse;
/**
 * Encodes a `MsgUpdateGroupMetadata` protobuf message: the Msg/UpdateGroupMetadata request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_metadata - `metadata`: the updated group's metadata.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupMetadata: (s_admin?: Opt<string>, sg_group_id?: Opt<WeakUint64Str>, s_metadata?: Opt<string>) => EncodedCosmosGroupMsgUpdateGroupMetadata;
/**
 * Encodes a `MsgUpdateGroupMetadataResponse` protobuf message: the Msg/UpdateGroupMetadata response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupMetadataResponse: () => EncodedCosmosGroupMsgUpdateGroupMetadataResponse;
/**
 * Encodes a `MsgCreateGroupPolicy` protobuf message: the Msg/CreateGroupPolicy request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the group policy.
 * @param atu8_decision_policy - `decision_policy`: specifies the group policy's decision policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgCreateGroupPolicy: (s_admin?: Opt<string>, sg_group_id?: Opt<WeakUint64Str>, s_metadata?: Opt<string>, atu8_decision_policy?: Opt<Encoded<'cosmos.group.v1.DecisionPolicy'>>) => EncodedCosmosGroupMsgCreateGroupPolicy;
/**
 * Encodes a `MsgCreateGroupPolicyResponse` protobuf message: the Msg/CreateGroupPolicy response type.
 * @param sa_address - `address`: the account address of the newly created group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgCreateGroupPolicyResponse: (sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosGroupMsgCreateGroupPolicyResponse;
/**
 * Encodes a `MsgUpdateGroupPolicyAdmin` protobuf message: the Msg/UpdateGroupPolicyAdmin request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sa_group_policy - `group_policy_address`: the account address of the group policy.
 * @param s_new_admin - `new_admin`: the new group policy admin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupPolicyAdmin: (s_admin?: Opt<string>, sa_group_policy?: Opt<WeakAccountAddr>, s_new_admin?: Opt<string>) => EncodedCosmosGroupMsgUpdateGroupPolicyAdmin;
/**
 * Encodes a `MsgUpdateGroupPolicyAdminResponse` protobuf message: the Msg/UpdateGroupPolicyAdmin response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupPolicyAdminResponse: () => EncodedCosmosGroupMsgUpdateGroupPolicyAdminResponse;
/**
 * Encodes a `MsgCreateGroupWithPolicy` protobuf message: the Msg/CreateGroupWithPolicy request type.
 * @param s_admin - `admin`: the account address of the group and group policy admin.
 * @param a_members - `members`: defines the group members.
 * @param s_group_metadata - `group_metadata`: any arbitrary metadata attached to the group.
 * @param s_group_policy_metadata - `group_policy_metadata`: any arbitrary metadata attached to the group policy.
 * @param b_group_policy_as_admin - `group_policy_as_admin`: a boolean field, if set to true, the group policy account address will be used as group and group policy admin.
 * @param atu8_decision_policy - `decision_policy`: specifies the group policy's decision policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgCreateGroupWithPolicy: (s_admin?: Opt<string>, a_members?: Opt<Encoded<'/cosmos.group.v1.MemberRequest'>[]>, s_group_metadata?: Opt<string>, s_group_policy_metadata?: Opt<string>, b_group_policy_as_admin?: Opt<boolean | 0 | 1>, atu8_decision_policy?: Opt<Encoded<'cosmos.group.v1.DecisionPolicy'>>) => EncodedCosmosGroupMsgCreateGroupWithPolicy;
/**
 * Encodes a `MsgCreateGroupWithPolicyResponse` protobuf message: the Msg/CreateGroupWithPolicy response type.
 * @param sg_group_id - `group_id`: the unique ID of the newly created group with policy.
 * @param sa_group_policy - `group_policy_address`: the account address of the newly created group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgCreateGroupWithPolicyResponse: (sg_group_id?: Opt<WeakUint64Str>, sa_group_policy?: Opt<WeakAccountAddr>) => EncodedCosmosGroupMsgCreateGroupWithPolicyResponse;
/**
 * Encodes a `MsgUpdateGroupPolicyDecisionPolicy` protobuf message: the Msg/UpdateGroupPolicyDecisionPolicy request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param atu8_decision_policy - `decision_policy`: the updated group policy's decision policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicy: (s_admin?: Opt<string>, sa_group_policy?: Opt<WeakAccountAddr>, atu8_decision_policy?: Opt<Encoded<'cosmos.group.v1.DecisionPolicy'>>) => EncodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicy;
/**
 * Encodes a `MsgUpdateGroupPolicyDecisionPolicyResponse` protobuf message: the Msg/UpdateGroupPolicyDecisionPolicy response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse: () => EncodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse;
/**
 * Encodes a `MsgUpdateGroupPolicyMetadata` protobuf message: the Msg/UpdateGroupPolicyMetadata request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param s_metadata - `metadata`: the group policy metadata to be updated.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupPolicyMetadata: (s_admin?: Opt<string>, sa_group_policy?: Opt<WeakAccountAddr>, s_metadata?: Opt<string>) => EncodedCosmosGroupMsgUpdateGroupPolicyMetadata;
/**
 * Encodes a `MsgUpdateGroupPolicyMetadataResponse` protobuf message: the Msg/UpdateGroupPolicyMetadata response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgUpdateGroupPolicyMetadataResponse: () => EncodedCosmosGroupMsgUpdateGroupPolicyMetadataResponse;
/**
 * Encodes a `MsgSubmitProposal` protobuf message: the Msg/SubmitProposal request type.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param a_proposers - `proposers`: the account addresses of the proposers. Proposers signatures will be counted as yes votes.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the proposal.
 * @param a_messages - `messages`: a list of `sdk.Msg`s that will be executed if the proposal passes.
 * @param xc_exec - `exec`: defines the mode of execution of the proposal, whether it should be executed immediately on creation or not. If so, proposers signatures are considered as Yes votes.
 * @param s_title - `title`: the title of the proposal. Since: cosmos-sdk 0.47
 * @param s_summary - `summary`: the summary of the proposal. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgSubmitProposal: (sa_group_policy?: Opt<WeakAccountAddr>, a_proposers?: Opt<string[]>, s_metadata?: Opt<string>, a_messages?: Opt<Uint8Array[]>, xc_exec?: Opt<ProtoEnumCosmosGroupExec>, s_title?: Opt<string>, s_summary?: Opt<string>) => EncodedCosmosGroupMsgSubmitProposal;
/**
 * Encodes a `MsgSubmitProposalResponse` protobuf message: the Msg/SubmitProposal response type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgSubmitProposalResponse: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupMsgSubmitProposalResponse;
/**
 * Encodes a `MsgWithdrawProposal` protobuf message: the Msg/WithdrawProposal request type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param sa_address - `address`: the admin of the group policy or one of the proposer of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgWithdrawProposal: (sg_proposal_id?: Opt<WeakUint64Str>, sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosGroupMsgWithdrawProposal;
/**
 * Encodes a `MsgWithdrawProposalResponse` protobuf message: the Msg/WithdrawProposal response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgWithdrawProposalResponse: () => EncodedCosmosGroupMsgWithdrawProposalResponse;
/**
 * Encodes a `MsgVote` protobuf message: the Msg/Vote request type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param sa_voter - `voter`: the voter account address.
 * @param xc_option - `option`: the voter's choice on the proposal.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the vote.
 * @param xc_exec - `exec`: defines whether the proposal should be executed immediately after voting or not.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgVote: (sg_proposal_id?: Opt<WeakUint64Str>, sa_voter?: Opt<WeakAccountAddr>, xc_option?: Opt<ProtoEnumCosmosGroupVoteOption>, s_metadata?: Opt<string>, xc_exec?: Opt<ProtoEnumCosmosGroupExec>) => EncodedCosmosGroupMsgVote;
/**
 * Encodes a `MsgVoteResponse` protobuf message: the Msg/Vote response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgVoteResponse: () => EncodedCosmosGroupMsgVoteResponse;
/**
 * Encodes a `MsgExec` protobuf message: the Msg/Exec request type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param s_executor - `executor`: the account address used to execute the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgExec: (sg_proposal_id?: Opt<WeakUint64Str>, s_executor?: Opt<string>) => EncodedCosmosGroupMsgExec;
/**
 * Encodes a `MsgExecResponse` protobuf message: the Msg/Exec request type.
 * @param xc_result - `result`: the final result of the proposal execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgExecResponse: (xc_result?: Opt<ProtoEnumCosmosGroupProposalExecutorResult>) => EncodedCosmosGroupMsgExecResponse;
/**
 * Encodes a `MsgLeaveGroup` protobuf message: the Msg/LeaveGroup request type.
 * @param sa_address - `address`: the account address of the group member.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgLeaveGroup: (sa_address?: Opt<WeakAccountAddr>, sg_group_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupMsgLeaveGroup;
/**
 * Encodes a `MsgLeaveGroupResponse` protobuf message: the Msg/LeaveGroup response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMsgLeaveGroupResponse: () => EncodedCosmosGroupMsgLeaveGroupResponse;
/**
 * A decoded protobuf CreateGroup message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: members - defines the group members.
 *   - 2: metadata - any arbitrary metadata to attached to the group.
 */
export type DecodedCosmosGroupMsgCreateGroup = [
    s_admin?: string,
    a_members?: DecodedCosmosGroupMemberRequest[],
    s_metadata?: string
];
/**
 * Decodes a protobuf CreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroup}
 */
export declare const decodeCosmosGroupMsgCreateGroup: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgCreateGroup;
/**
 * A decoded protobuf CreateGroup message
 *
 * Alias for: group_id - the unique ID of the newly created group.
 */
export type DecodedCosmosGroupMsgCreateGroupResponse = [
    sg_group_id?: CwUint64
];
/**
 * Decodes a protobuf CreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupResponse}
 */
export declare const decodeCosmosGroupMsgCreateGroupResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgCreateGroupResponse;
/**
 * A decoded protobuf UpdateGroupMembers message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: member_updates - the list of members to update, set weight to 0 to remove a member.
 */
export type DecodedCosmosGroupMsgUpdateGroupMembers = [
    s_admin?: string,
    sg_group_id?: CwUint64,
    a_member_updates?: DecodedCosmosGroupMemberRequest[]
];
/**
 * Decodes a protobuf UpdateGroupMembers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMembers}
 */
export declare const decodeCosmosGroupMsgUpdateGroupMembers: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgUpdateGroupMembers;
/**
 * A decoded protobuf UpdateGroupMembers message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgUpdateGroupMembersResponse = [];
/**
 * Decodes a protobuf UpdateGroupMembers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMembersResponse}
 */
export declare const decodeCosmosGroupMsgUpdateGroupMembersResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateGroupAdmin message
 *
 * Tuple where:
 *   - 0: admin - the current account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: new_admin - the group new admin account address.
 */
export type DecodedCosmosGroupMsgUpdateGroupAdmin = [
    s_admin?: string,
    sg_group_id?: CwUint64,
    s_new_admin?: string
];
/**
 * Decodes a protobuf UpdateGroupAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupAdmin}
 */
export declare const decodeCosmosGroupMsgUpdateGroupAdmin: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgUpdateGroupAdmin;
/**
 * A decoded protobuf UpdateGroupAdmin message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgUpdateGroupAdminResponse = [];
/**
 * Decodes a protobuf UpdateGroupAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupAdminResponse}
 */
export declare const decodeCosmosGroupMsgUpdateGroupAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateGroupMetadata message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: metadata - the updated group's metadata.
 */
export type DecodedCosmosGroupMsgUpdateGroupMetadata = [
    s_admin?: string,
    sg_group_id?: CwUint64,
    s_metadata?: string
];
/**
 * Decodes a protobuf UpdateGroupMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMetadata}
 */
export declare const decodeCosmosGroupMsgUpdateGroupMetadata: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgUpdateGroupMetadata;
/**
 * A decoded protobuf UpdateGroupMetadata message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgUpdateGroupMetadataResponse = [];
/**
 * Decodes a protobuf UpdateGroupMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMetadataResponse}
 */
export declare const decodeCosmosGroupMsgUpdateGroupMetadataResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf CreateGroupPolicy message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: metadata - any arbitrary metadata attached to the group policy.
 *   - 3: decision_policy - specifies the group policy's decision policy.
 */
export type DecodedCosmosGroupMsgCreateGroupPolicy = [
    s_admin?: string,
    sg_group_id?: CwUint64,
    s_metadata?: string,
    a_decision_policy?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf CreateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupPolicy}
 */
export declare const decodeCosmosGroupMsgCreateGroupPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgCreateGroupPolicy;
/**
 * A decoded protobuf CreateGroupPolicy message
 *
 * Alias for: address - the account address of the newly created group policy.
 */
export type DecodedCosmosGroupMsgCreateGroupPolicyResponse = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf CreateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupPolicyResponse}
 */
export declare const decodeCosmosGroupMsgCreateGroupPolicyResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgCreateGroupPolicyResponse;
/**
 * A decoded protobuf UpdateGroupPolicyAdmin message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of the group policy.
 *   - 2: new_admin - the new group policy admin.
 */
export type DecodedCosmosGroupMsgUpdateGroupPolicyAdmin = [
    s_admin?: string,
    sa_group_policy?: CwAccountAddr,
    s_new_admin?: string
];
/**
 * Decodes a protobuf UpdateGroupPolicyAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyAdmin}
 */
export declare const decodeCosmosGroupMsgUpdateGroupPolicyAdmin: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgUpdateGroupPolicyAdmin;
/**
 * A decoded protobuf UpdateGroupPolicyAdmin message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgUpdateGroupPolicyAdminResponse = [];
/**
 * Decodes a protobuf UpdateGroupPolicyAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyAdminResponse}
 */
export declare const decodeCosmosGroupMsgUpdateGroupPolicyAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf CreateGroupWithPolicy message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group and group policy admin.
 *   - 1: members - defines the group members.
 *   - 2: group_metadata - any arbitrary metadata attached to the group.
 *   - 3: group_policy_metadata - any arbitrary metadata attached to the group policy.
 *   - 4: group_policy_as_admin - a boolean field, if set to true, the group policy account address will be used as group and group policy admin.
 *   - 5: decision_policy - specifies the group policy's decision policy.
 */
export type DecodedCosmosGroupMsgCreateGroupWithPolicy = [
    s_admin?: string,
    a_members?: DecodedCosmosGroupMemberRequest[],
    s_group_metadata?: string,
    s_group_policy_metadata?: string,
    b_group_policy_as_admin?: 0 | 1,
    a_decision_policy?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf CreateGroupWithPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupWithPolicy}
 */
export declare const decodeCosmosGroupMsgCreateGroupWithPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgCreateGroupWithPolicy;
/**
 * A decoded protobuf CreateGroupWithPolicy message
 *
 * Tuple where:
 *   - 0: group_id - the unique ID of the newly created group with policy.
 *   - 1: group_policy_address - the account address of the newly created group policy.
 */
export type DecodedCosmosGroupMsgCreateGroupWithPolicyResponse = [
    sg_group_id?: CwUint64,
    sa_group_policy?: CwAccountAddr
];
/**
 * Decodes a protobuf CreateGroupWithPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupWithPolicyResponse}
 */
export declare const decodeCosmosGroupMsgCreateGroupWithPolicyResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgCreateGroupWithPolicyResponse;
/**
 * A decoded protobuf UpdateGroupPolicyDecisionPolicy message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: decision_policy - the updated group policy's decision policy.
 */
export type DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicy = [
    s_admin?: string,
    sa_group_policy?: CwAccountAddr,
    a_decision_policy?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf UpdateGroupPolicyDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicy}
 */
export declare const decodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicy;
/**
 * A decoded protobuf UpdateGroupPolicyDecisionPolicy message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse = [];
/**
 * Decodes a protobuf UpdateGroupPolicyDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse}
 */
export declare const decodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateGroupPolicyMetadata message
 *
 * Tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: metadata - the group policy metadata to be updated.
 */
export type DecodedCosmosGroupMsgUpdateGroupPolicyMetadata = [
    s_admin?: string,
    sa_group_policy?: CwAccountAddr,
    s_metadata?: string
];
/**
 * Decodes a protobuf UpdateGroupPolicyMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyMetadata}
 */
export declare const decodeCosmosGroupMsgUpdateGroupPolicyMetadata: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgUpdateGroupPolicyMetadata;
/**
 * A decoded protobuf UpdateGroupPolicyMetadata message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgUpdateGroupPolicyMetadataResponse = [];
/**
 * Decodes a protobuf UpdateGroupPolicyMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyMetadataResponse}
 */
export declare const decodeCosmosGroupMsgUpdateGroupPolicyMetadataResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SubmitProposal message
 *
 * Tuple where:
 *   - 0: group_policy_address - the account address of group policy.
 *   - 1: proposers - the account addresses of the proposers. Proposers signatures will be counted as yes votes.
 *   - 2: metadata - any arbitrary metadata attached to the proposal.
 *   - 3: messages - a list of `sdk.Msg`s that will be executed if the proposal passes.
 *   - 4: exec - defines the mode of execution of the proposal, whether it should be executed immediately on creation or not. If so, proposers signatures are considered as Yes votes.
 *   - 5: title - the title of the proposal. Since: cosmos-sdk 0.47
 *   - 6: summary - the summary of the proposal. Since: cosmos-sdk 0.47
 */
export type DecodedCosmosGroupMsgSubmitProposal = [
    sa_group_policy?: CwAccountAddr,
    a_proposers?: string[],
    s_metadata?: string,
    a_messages?: DecodedGoogleProtobufAny[],
    xc_exec?: ProtoEnumCosmosGroupExec,
    s_title?: string,
    s_summary?: string
];
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgSubmitProposal}
 */
export declare const decodeCosmosGroupMsgSubmitProposal: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgSubmitProposal;
/**
 * A decoded protobuf SubmitProposal message
 *
 * Alias for: proposal_id - proposal is the unique ID of the proposal.
 */
export type DecodedCosmosGroupMsgSubmitProposalResponse = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgSubmitProposalResponse}
 */
export declare const decodeCosmosGroupMsgSubmitProposalResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgSubmitProposalResponse;
/**
 * A decoded protobuf WithdrawProposal message
 *
 * Tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: address - the admin of the group policy or one of the proposer of the proposal.
 */
export type DecodedCosmosGroupMsgWithdrawProposal = [
    sg_proposal_id?: CwUint64,
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf WithdrawProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgWithdrawProposal}
 */
export declare const decodeCosmosGroupMsgWithdrawProposal: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgWithdrawProposal;
/**
 * A decoded protobuf WithdrawProposal message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgWithdrawProposalResponse = [];
/**
 * Decodes a protobuf WithdrawProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgWithdrawProposalResponse}
 */
export declare const decodeCosmosGroupMsgWithdrawProposalResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: voter - the voter account address.
 *   - 2: option - the voter's choice on the proposal.
 *   - 3: metadata - any arbitrary metadata attached to the vote.
 *   - 4: exec - defines whether the proposal should be executed immediately after voting or not.
 */
export type DecodedCosmosGroupMsgVote = [
    sg_proposal_id?: CwUint64,
    sa_voter?: CwAccountAddr,
    xc_option?: ProtoEnumCosmosGroupVoteOption,
    s_metadata?: string,
    xc_exec?: ProtoEnumCosmosGroupExec
];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgVote}
 */
export declare const decodeCosmosGroupMsgVote: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgVote;
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgVoteResponse = [];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgVoteResponse}
 */
export declare const decodeCosmosGroupMsgVoteResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Exec message
 *
 * Tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: executor - the account address used to execute the proposal.
 */
export type DecodedCosmosGroupMsgExec = [
    sg_proposal_id?: CwUint64,
    s_executor?: string
];
/**
 * Decodes a protobuf Exec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgExec}
 */
export declare const decodeCosmosGroupMsgExec: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgExec;
/**
 * A decoded protobuf Exec message
 *
 * Alias for: result - the final result of the proposal execution.
 */
export type DecodedCosmosGroupMsgExecResponse = [
    w_0?: undefined,
    xc_result?: ProtoEnumCosmosGroupProposalExecutorResult
];
/**
 * Decodes a protobuf Exec message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosGroupMsgExecResponse}
 */
export declare const decodeCosmosGroupMsgExecResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosGroupMsgExecResponse;
/**
 * A decoded protobuf LeaveGroup message
 *
 * Tuple where:
 *   - 0: address - the account address of the group member.
 *   - 1: group_id - the unique ID of the group.
 */
export type DecodedCosmosGroupMsgLeaveGroup = [
    sa_address?: CwAccountAddr,
    sg_group_id?: CwUint64
];
/**
 * Decodes a protobuf LeaveGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgLeaveGroup}
 */
export declare const decodeCosmosGroupMsgLeaveGroup: (atu8_payload: Uint8Array) => DecodedCosmosGroupMsgLeaveGroup;
/**
 * A decoded protobuf LeaveGroup message
 *
 * Tuple where:
 */
export type DecodedCosmosGroupMsgLeaveGroupResponse = [];
/**
 * Decodes a protobuf LeaveGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgLeaveGroupResponse}
 */
export declare const decodeCosmosGroupMsgLeaveGroupResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: members - defines the group members.
 *   - 2: metadata - any arbitrary metadata to attached to the group.
 */
export declare const destructCosmosGroupMsgCreateGroup: (g_struct: CosmosGroupMsgCreateGroup) => [admin?: string, members?: CosmosGroupMemberRequest[], metadata?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP = "/cosmos.group.v1.MsgCreateGroup";
/**
 * JSON serialization of `cosmos.group.v1.MsgCreateGroup` - the Msg/CreateGroup request type.
 */
export type CosmosGroupMsgCreateGroup = {
    admin?: string | undefined;
    members?: CosmosGroupMemberRequest[] | undefined;
    metadata?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the newly created group.
 */
export declare const destructCosmosGroupMsgCreateGroupResponse: (g_struct: CosmosGroupMsgCreateGroupResponse) => [group_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_RESPONSE = "/cosmos.group.v1.MsgCreateGroupResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgCreateGroupResponse` - the Msg/CreateGroup response type.
 */
export type CosmosGroupMsgCreateGroupResponse = {
    group_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMembers} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: member_updates - the list of members to update, set weight to 0 to remove a member.
 */
export declare const destructCosmosGroupMsgUpdateGroupMembers: (g_struct: CosmosGroupMsgUpdateGroupMembers) => [admin?: string, group_id?: CwUint64, member_updates?: CosmosGroupMemberRequest[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_MEMBERS = "/cosmos.group.v1.MsgUpdateGroupMembers";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupMembers` - the Msg/UpdateGroupMembers request type.
 */
export type CosmosGroupMsgUpdateGroupMembers = {
    admin?: string | undefined;
    group_id?: CwUint64 | undefined;
    member_updates?: CosmosGroupMemberRequest[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMembersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgUpdateGroupMembersResponse: (g_struct: CosmosGroupMsgUpdateGroupMembersResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_MEMBERS_RESPONSE = "/cosmos.group.v1.MsgUpdateGroupMembersResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupMembersResponse` - the Msg/UpdateGroupMembers response type.
 */
export type CosmosGroupMsgUpdateGroupMembersResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the current account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: new_admin - the group new admin account address.
 */
export declare const destructCosmosGroupMsgUpdateGroupAdmin: (g_struct: CosmosGroupMsgUpdateGroupAdmin) => [admin?: string, group_id?: CwUint64, new_admin?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_ADMIN = "/cosmos.group.v1.MsgUpdateGroupAdmin";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupAdmin` - the Msg/UpdateGroupAdmin request type.
 */
export type CosmosGroupMsgUpdateGroupAdmin = {
    admin?: string | undefined;
    group_id?: CwUint64 | undefined;
    new_admin?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgUpdateGroupAdminResponse: (g_struct: CosmosGroupMsgUpdateGroupAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_ADMIN_RESPONSE = "/cosmos.group.v1.MsgUpdateGroupAdminResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupAdminResponse` - the Msg/UpdateGroupAdmin response type.
 */
export type CosmosGroupMsgUpdateGroupAdminResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: metadata - the updated group's metadata.
 */
export declare const destructCosmosGroupMsgUpdateGroupMetadata: (g_struct: CosmosGroupMsgUpdateGroupMetadata) => [admin?: string, group_id?: CwUint64, metadata?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_METADATA = "/cosmos.group.v1.MsgUpdateGroupMetadata";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupMetadata` - the Msg/UpdateGroupMetadata request type.
 */
export type CosmosGroupMsgUpdateGroupMetadata = {
    admin?: string | undefined;
    group_id?: CwUint64 | undefined;
    metadata?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgUpdateGroupMetadataResponse: (g_struct: CosmosGroupMsgUpdateGroupMetadataResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_METADATA_RESPONSE = "/cosmos.group.v1.MsgUpdateGroupMetadataResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupMetadataResponse` - the Msg/UpdateGroupMetadata response type.
 */
export type CosmosGroupMsgUpdateGroupMetadataResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: metadata - any arbitrary metadata attached to the group policy.
 *   - 3: decision_policy - specifies the group policy's decision policy.
 */
export declare const destructCosmosGroupMsgCreateGroupPolicy: (g_struct: CosmosGroupMsgCreateGroupPolicy) => [admin?: string, group_id?: CwUint64, metadata?: string, decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_POLICY = "/cosmos.group.v1.MsgCreateGroupPolicy";
/**
 * JSON serialization of `cosmos.group.v1.MsgCreateGroupPolicy` - the Msg/CreateGroupPolicy request type.
 */
export type CosmosGroupMsgCreateGroupPolicy = {
    admin?: string | undefined;
    group_id?: CwUint64 | undefined;
    metadata?: string | undefined;
    decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy> | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the newly created group policy.
 */
export declare const destructCosmosGroupMsgCreateGroupPolicyResponse: (g_struct: CosmosGroupMsgCreateGroupPolicyResponse) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_POLICY_RESPONSE = "/cosmos.group.v1.MsgCreateGroupPolicyResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgCreateGroupPolicyResponse` - the Msg/CreateGroupPolicy response type.
 */
export type CosmosGroupMsgCreateGroupPolicyResponse = {
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of the group policy.
 *   - 2: new_admin - the new group policy admin.
 */
export declare const destructCosmosGroupMsgUpdateGroupPolicyAdmin: (g_struct: CosmosGroupMsgUpdateGroupPolicyAdmin) => [admin?: string, group_policy_address?: CwAccountAddr, new_admin?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_ADMIN = "/cosmos.group.v1.MsgUpdateGroupPolicyAdmin";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupPolicyAdmin` - the Msg/UpdateGroupPolicyAdmin request type.
 */
export type CosmosGroupMsgUpdateGroupPolicyAdmin = {
    admin?: string | undefined;
    group_policy_address?: CwAccountAddr | undefined;
    new_admin?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgUpdateGroupPolicyAdminResponse: (g_struct: CosmosGroupMsgUpdateGroupPolicyAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_ADMIN_RESPONSE = "/cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse` - the Msg/UpdateGroupPolicyAdmin response type.
 */
export type CosmosGroupMsgUpdateGroupPolicyAdminResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupWithPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group and group policy admin.
 *   - 1: members - defines the group members.
 *   - 2: group_metadata - any arbitrary metadata attached to the group.
 *   - 3: group_policy_metadata - any arbitrary metadata attached to the group policy.
 *   - 4: group_policy_as_admin - a boolean field, if set to true, the group policy account address will be used as group and group policy admin.
 *   - 5: decision_policy - specifies the group policy's decision policy.
 */
export declare const destructCosmosGroupMsgCreateGroupWithPolicy: (g_struct: CosmosGroupMsgCreateGroupWithPolicy) => [admin?: string, members?: CosmosGroupMemberRequest[], group_metadata?: string, group_policy_metadata?: string, group_policy_as_admin?: boolean, decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_WITH_POLICY = "/cosmos.group.v1.MsgCreateGroupWithPolicy";
/**
 * JSON serialization of `cosmos.group.v1.MsgCreateGroupWithPolicy` - the Msg/CreateGroupWithPolicy request type.
 */
export type CosmosGroupMsgCreateGroupWithPolicy = {
    admin?: string | undefined;
    members?: CosmosGroupMemberRequest[] | undefined;
    group_metadata?: string | undefined;
    group_policy_metadata?: string | undefined;
    group_policy_as_admin?: boolean | undefined;
    decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy> | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupWithPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the newly created group with policy.
 *   - 1: group_policy_address - the account address of the newly created group policy.
 */
export declare const destructCosmosGroupMsgCreateGroupWithPolicyResponse: (g_struct: CosmosGroupMsgCreateGroupWithPolicyResponse) => [group_id?: CwUint64, group_policy_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_WITH_POLICY_RESPONSE = "/cosmos.group.v1.MsgCreateGroupWithPolicyResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgCreateGroupWithPolicyResponse` - the Msg/CreateGroupWithPolicy response type.
 */
export type CosmosGroupMsgCreateGroupWithPolicyResponse = {
    group_id?: CwUint64 | undefined;
    group_policy_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyDecisionPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: decision_policy - the updated group policy's decision policy.
 */
export declare const destructCosmosGroupMsgUpdateGroupPolicyDecisionPolicy: (g_struct: CosmosGroupMsgUpdateGroupPolicyDecisionPolicy) => [admin?: string, group_policy_address?: CwAccountAddr, decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_DECISION_POLICY = "/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy` - the Msg/UpdateGroupPolicyDecisionPolicy request type.
 */
export type CosmosGroupMsgUpdateGroupPolicyDecisionPolicy = {
    admin?: string | undefined;
    group_policy_address?: CwAccountAddr | undefined;
    decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy> | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse: (g_struct: CosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_DECISION_POLICY_RESPONSE = "/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse` - the Msg/UpdateGroupPolicyDecisionPolicy response type.
 */
export type CosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: metadata - the group policy metadata to be updated.
 */
export declare const destructCosmosGroupMsgUpdateGroupPolicyMetadata: (g_struct: CosmosGroupMsgUpdateGroupPolicyMetadata) => [admin?: string, group_policy_address?: CwAccountAddr, metadata?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_METADATA = "/cosmos.group.v1.MsgUpdateGroupPolicyMetadata";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupPolicyMetadata` - the Msg/UpdateGroupPolicyMetadata request type.
 */
export type CosmosGroupMsgUpdateGroupPolicyMetadata = {
    admin?: string | undefined;
    group_policy_address?: CwAccountAddr | undefined;
    metadata?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgUpdateGroupPolicyMetadataResponse: (g_struct: CosmosGroupMsgUpdateGroupPolicyMetadataResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_METADATA_RESPONSE = "/cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse` - the Msg/UpdateGroupPolicyMetadata response type.
 */
export type CosmosGroupMsgUpdateGroupPolicyMetadataResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_policy_address - the account address of group policy.
 *   - 1: proposers - the account addresses of the proposers. Proposers signatures will be counted as yes votes.
 *   - 2: metadata - any arbitrary metadata attached to the proposal.
 *   - 3: messages - a list of `sdk.Msg`s that will be executed if the proposal passes.
 *   - 4: exec - defines the mode of execution of the proposal, whether it should be executed immediately on creation or not. If so, proposers signatures are considered as Yes votes.
 *   - 5: title - the title of the proposal. Since: cosmos-sdk 0.47
 *   - 6: summary - the summary of the proposal. Since: cosmos-sdk 0.47
 */
export declare const destructCosmosGroupMsgSubmitProposal: (g_struct: CosmosGroupMsgSubmitProposal) => [group_policy_address?: CwAccountAddr, proposers?: string[], metadata?: string, messages?: JsonAny[], exec?: JsonEnumCosmosGroupExec, title?: string, summary?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_SUBMIT_PROPOSAL = "/cosmos.group.v1.MsgSubmitProposal";
/**
 * JSON serialization of `cosmos.group.v1.MsgSubmitProposal` - the Msg/SubmitProposal request type.
 */
export type CosmosGroupMsgSubmitProposal = {
    group_policy_address?: CwAccountAddr | undefined;
    proposers?: string[] | undefined;
    metadata?: string | undefined;
    messages?: JsonAny[] | undefined;
    exec?: JsonEnumCosmosGroupExec | undefined;
    title?: string | undefined;
    summary?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgSubmitProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 */
export declare const destructCosmosGroupMsgSubmitProposalResponse: (g_struct: CosmosGroupMsgSubmitProposalResponse) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_SUBMIT_PROPOSAL_RESPONSE = "/cosmos.group.v1.MsgSubmitProposalResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgSubmitProposalResponse` - the Msg/SubmitProposal response type.
 */
export type CosmosGroupMsgSubmitProposalResponse = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgWithdrawProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: address - the admin of the group policy or one of the proposer of the proposal.
 */
export declare const destructCosmosGroupMsgWithdrawProposal: (g_struct: CosmosGroupMsgWithdrawProposal) => [proposal_id?: CwUint64, address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_WITHDRAW_PROPOSAL = "/cosmos.group.v1.MsgWithdrawProposal";
/**
 * JSON serialization of `cosmos.group.v1.MsgWithdrawProposal` - the Msg/WithdrawProposal request type.
 */
export type CosmosGroupMsgWithdrawProposal = {
    proposal_id?: CwUint64 | undefined;
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgWithdrawProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgWithdrawProposalResponse: (g_struct: CosmosGroupMsgWithdrawProposalResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_WITHDRAW_PROPOSAL_RESPONSE = "/cosmos.group.v1.MsgWithdrawProposalResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgWithdrawProposalResponse` - the Msg/WithdrawProposal response type.
 */
export type CosmosGroupMsgWithdrawProposalResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: voter - the voter account address.
 *   - 2: option - the voter's choice on the proposal.
 *   - 3: metadata - any arbitrary metadata attached to the vote.
 *   - 4: exec - defines whether the proposal should be executed immediately after voting or not.
 */
export declare const destructCosmosGroupMsgVote: (g_struct: CosmosGroupMsgVote) => [proposal_id?: CwUint64, voter?: CwAccountAddr, option?: JsonEnumCosmosGroupVoteOption, metadata?: string, exec?: JsonEnumCosmosGroupExec];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_VOTE = "/cosmos.group.v1.MsgVote";
/**
 * JSON serialization of `cosmos.group.v1.MsgVote` - the Msg/Vote request type.
 */
export type CosmosGroupMsgVote = {
    proposal_id?: CwUint64 | undefined;
    voter?: CwAccountAddr | undefined;
    option?: JsonEnumCosmosGroupVoteOption | undefined;
    metadata?: string | undefined;
    exec?: JsonEnumCosmosGroupExec | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgVoteResponse: (g_struct: CosmosGroupMsgVoteResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_VOTE_RESPONSE = "/cosmos.group.v1.MsgVoteResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgVoteResponse` - the Msg/Vote response type.
 */
export type CosmosGroupMsgVoteResponse = {};
/**
 * Destructures the fields of a {@link CosmosGroupMsgExec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: executor - the account address used to execute the proposal.
 */
export declare const destructCosmosGroupMsgExec: (g_struct: CosmosGroupMsgExec) => [proposal_id?: CwUint64, executor?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_EXEC = "/cosmos.group.v1.MsgExec";
/**
 * JSON serialization of `cosmos.group.v1.MsgExec` - the Msg/Exec request type.
 */
export type CosmosGroupMsgExec = {
    proposal_id?: CwUint64 | undefined;
    executor?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgExecResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: result - the final result of the proposal execution.
 */
export declare const destructCosmosGroupMsgExecResponse: (g_struct: CosmosGroupMsgExecResponse) => [EMPTY?: void, result?: JsonEnumCosmosGroupProposalExecutorResult];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_EXEC_RESPONSE = "/cosmos.group.v1.MsgExecResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgExecResponse` - the Msg/Exec request type.
 */
export type CosmosGroupMsgExecResponse = {
    result?: JsonEnumCosmosGroupProposalExecutorResult | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgLeaveGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group member.
 *   - 1: group_id - the unique ID of the group.
 */
export declare const destructCosmosGroupMsgLeaveGroup: (g_struct: CosmosGroupMsgLeaveGroup) => [address?: CwAccountAddr, group_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_LEAVE_GROUP = "/cosmos.group.v1.MsgLeaveGroup";
/**
 * JSON serialization of `cosmos.group.v1.MsgLeaveGroup` - the Msg/LeaveGroup request type.
 */
export type CosmosGroupMsgLeaveGroup = {
    address?: CwAccountAddr | undefined;
    group_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMsgLeaveGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosGroupMsgLeaveGroupResponse: (g_struct: CosmosGroupMsgLeaveGroupResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_LEAVE_GROUP_RESPONSE = "/cosmos.group.v1.MsgLeaveGroupResponse";
/**
 * JSON serialization of `cosmos.group.v1.MsgLeaveGroupResponse` - the Msg/LeaveGroup response type.
 */
export type CosmosGroupMsgLeaveGroupResponse = {};
/**
 * Protobuf enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_UNSPECIFIED** - An empty value means that there should be a separate MsgExec request for the proposal to execute.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupExec}
 */
export declare const XC_PROTO_COSMOS_GROUP_EXEC_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_UNSPECIFIED** - An empty value means that there should be a separate MsgExec request for the proposal to execute.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupExec}
 */
export declare const SI_JSON_COSMOS_GROUP_EXEC_UNSPECIFIED = "EXEC_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_TRY** - Try to execute the proposal immediately. If the proposal is not allowed per the DecisionPolicy, the proposal will still be open and could be executed at a later point.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupExec}
 */
export declare const XC_PROTO_COSMOS_GROUP_EXEC_TRY = 1;
/**
 * JSON enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_TRY** - Try to execute the proposal immediately. If the proposal is not allowed per the DecisionPolicy, the proposal will still be open and could be executed at a later point.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupExec}
 */
export declare const SI_JSON_COSMOS_GROUP_EXEC_TRY = "EXEC_TRY";
/**
 * Raw protobuf enum values for `cosmos.group.v1.Exec` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_GROUP_EXEC_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_GROUP_EXEC_TRY}
 */
export type ProtoEnumCosmosGroupExec = typeof XC_PROTO_COSMOS_GROUP_EXEC_UNSPECIFIED | typeof XC_PROTO_COSMOS_GROUP_EXEC_TRY;
/**
 * JSON enum values for `cosmos.group.v1.Exec` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_GROUP_EXEC_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_GROUP_EXEC_TRY}
 */
export type JsonEnumCosmosGroupExec = typeof SI_JSON_COSMOS_GROUP_EXEC_UNSPECIFIED | typeof SI_JSON_COSMOS_GROUP_EXEC_TRY;
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.Exec` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosGroupExec: Record<ProtoEnumCosmosGroupExec, JsonEnumCosmosGroupExec>;
/**
 * Maps a JSON enum string value for `cosmos.group.v1.Exec` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosGroupExec: Record<JsonEnumCosmosGroupExec, ProtoEnumCosmosGroupExec>;
