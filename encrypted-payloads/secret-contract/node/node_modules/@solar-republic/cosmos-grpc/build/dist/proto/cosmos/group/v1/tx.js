import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeCosmosGroupMemberRequest } from './types.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `MsgCreateGroup` protobuf message: the Msg/CreateGroup request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param a_members - `members`: defines the group members.
 * @param s_metadata - `metadata`: any arbitrary metadata to attached to the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgCreateGroup = (s_admin, a_members, s_metadata) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .B(a_members) // MemberRequest[] members = 2
    .s(s_metadata) // string metadata = 3
    .o;
/**
 * Encodes a `MsgCreateGroupResponse` protobuf message: the Msg/CreateGroup response type.
 * @param sg_group_id - `group_id`: the unique ID of the newly created group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgCreateGroupResponse = (sg_group_id) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .o;
/**
 * Encodes a `MsgUpdateGroupMembers` protobuf message: the Msg/UpdateGroupMembers request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param a_member_updates - `member_updates`: the list of members to update, set weight to 0 to remove a member.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupMembers = (s_admin, sg_group_id, a_member_updates) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .g(sg_group_id) // uint64 group_id = 2
    .B(a_member_updates) // MemberRequest[] member_updates = 3
    .o;
/**
 * Encodes a `MsgUpdateGroupMembersResponse` protobuf message: the Msg/UpdateGroupMembers response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupMembersResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateGroupAdmin` protobuf message: the Msg/UpdateGroupAdmin request type.
 * @param s_admin - `admin`: the current account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_new_admin - `new_admin`: the group new admin account address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupAdmin = (s_admin, sg_group_id, s_new_admin) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .g(sg_group_id) // uint64 group_id = 2
    .s(s_new_admin) // string new_admin = 3
    .o;
/**
 * Encodes a `MsgUpdateGroupAdminResponse` protobuf message: the Msg/UpdateGroupAdmin response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateGroupMetadata` protobuf message: the Msg/UpdateGroupMetadata request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_metadata - `metadata`: the updated group's metadata.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupMetadata = (s_admin, sg_group_id, s_metadata) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .g(sg_group_id) // uint64 group_id = 2
    .s(s_metadata) // string metadata = 3
    .o;
/**
 * Encodes a `MsgUpdateGroupMetadataResponse` protobuf message: the Msg/UpdateGroupMetadata response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupMetadataResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCreateGroupPolicy` protobuf message: the Msg/CreateGroupPolicy request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the group policy.
 * @param atu8_decision_policy - `decision_policy`: specifies the group policy's decision policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgCreateGroupPolicy = (s_admin, sg_group_id, s_metadata, atu8_decision_policy) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .g(sg_group_id) // uint64 group_id = 2
    .s(s_metadata) // string metadata = 3
    .b(atu8_decision_policy) // Any decision_policy = 4
    .o;
/**
 * Encodes a `MsgCreateGroupPolicyResponse` protobuf message: the Msg/CreateGroupPolicy response type.
 * @param sa_address - `address`: the account address of the newly created group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgCreateGroupPolicyResponse = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Encodes a `MsgUpdateGroupPolicyAdmin` protobuf message: the Msg/UpdateGroupPolicyAdmin request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sa_group_policy - `group_policy_address`: the account address of the group policy.
 * @param s_new_admin - `new_admin`: the new group policy admin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupPolicyAdmin = (s_admin, sa_group_policy, s_new_admin) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .s(sa_group_policy) // string group_policy_address = 2
    .s(s_new_admin) // string new_admin = 3
    .o;
/**
 * Encodes a `MsgUpdateGroupPolicyAdminResponse` protobuf message: the Msg/UpdateGroupPolicyAdmin response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupPolicyAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCreateGroupWithPolicy` protobuf message: the Msg/CreateGroupWithPolicy request type.
 * @param s_admin - `admin`: the account address of the group and group policy admin.
 * @param a_members - `members`: defines the group members.
 * @param s_group_metadata - `group_metadata`: any arbitrary metadata attached to the group.
 * @param s_group_policy_metadata - `group_policy_metadata`: any arbitrary metadata attached to the group policy.
 * @param b_group_policy_as_admin - `group_policy_as_admin`: a boolean field, if set to true, the group policy account address will be used as group and group policy admin.
 * @param atu8_decision_policy - `decision_policy`: specifies the group policy's decision policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgCreateGroupWithPolicy = (s_admin, a_members, s_group_metadata, s_group_policy_metadata, b_group_policy_as_admin, atu8_decision_policy) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .B(a_members) // MemberRequest[] members = 2
    .s(s_group_metadata) // string group_metadata = 3
    .s(s_group_policy_metadata) // string group_policy_metadata = 4
    .v(b_group_policy_as_admin) // boolean group_policy_as_admin = 5
    .b(atu8_decision_policy) // Any decision_policy = 6
    .o;
/**
 * Encodes a `MsgCreateGroupWithPolicyResponse` protobuf message: the Msg/CreateGroupWithPolicy response type.
 * @param sg_group_id - `group_id`: the unique ID of the newly created group with policy.
 * @param sa_group_policy - `group_policy_address`: the account address of the newly created group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgCreateGroupWithPolicyResponse = (sg_group_id, sa_group_policy) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .s(sa_group_policy) // string group_policy_address = 2
    .o;
/**
 * Encodes a `MsgUpdateGroupPolicyDecisionPolicy` protobuf message: the Msg/UpdateGroupPolicyDecisionPolicy request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param atu8_decision_policy - `decision_policy`: the updated group policy's decision policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicy = (s_admin, sa_group_policy, atu8_decision_policy) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .s(sa_group_policy) // string group_policy_address = 2
    .b(atu8_decision_policy) // Any decision_policy = 3
    .o;
/**
 * Encodes a `MsgUpdateGroupPolicyDecisionPolicyResponse` protobuf message: the Msg/UpdateGroupPolicyDecisionPolicy response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateGroupPolicyMetadata` protobuf message: the Msg/UpdateGroupPolicyMetadata request type.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param s_metadata - `metadata`: the group policy metadata to be updated.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupPolicyMetadata = (s_admin, sa_group_policy, s_metadata) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .s(sa_group_policy) // string group_policy_address = 2
    .s(s_metadata) // string metadata = 3
    .o;
/**
 * Encodes a `MsgUpdateGroupPolicyMetadataResponse` protobuf message: the Msg/UpdateGroupPolicyMetadata response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgUpdateGroupPolicyMetadataResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSubmitProposal` protobuf message: the Msg/SubmitProposal request type.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param a_proposers - `proposers`: the account addresses of the proposers. Proposers signatures will be counted as yes votes.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the proposal.
 * @param a_messages - `messages`: a list of `sdk.Msg`s that will be executed if the proposal passes.
 * @param xc_exec - `exec`: defines the mode of execution of the proposal, whether it should be executed immediately on creation or not. If so, proposers signatures are considered as Yes votes.
 * @param s_title - `title`: the title of the proposal. Since: cosmos-sdk 0.47
 * @param s_summary - `summary`: the summary of the proposal. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgSubmitProposal = (sa_group_policy, a_proposers, s_metadata, a_messages, xc_exec, s_title, s_summary) => Protobuf() // ...
    .s(sa_group_policy) // string group_policy_address = 1
    .S(a_proposers) // string[] proposers = 2
    .s(s_metadata) // string metadata = 3
    .B(a_messages) // Any[] messages = 4
    .v(xc_exec) // Exec exec = 5
    .s(s_title) // string title = 6
    .s(s_summary) // string summary = 7
    .o;
/**
 * Encodes a `MsgSubmitProposalResponse` protobuf message: the Msg/SubmitProposal response type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgSubmitProposalResponse = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `MsgWithdrawProposal` protobuf message: the Msg/WithdrawProposal request type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param sa_address - `address`: the admin of the group policy or one of the proposer of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgWithdrawProposal = (sg_proposal_id, sa_address) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_address) // string address = 2
    .o;
/**
 * Encodes a `MsgWithdrawProposalResponse` protobuf message: the Msg/WithdrawProposal response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgWithdrawProposalResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgVote` protobuf message: the Msg/Vote request type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param sa_voter - `voter`: the voter account address.
 * @param xc_option - `option`: the voter's choice on the proposal.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the vote.
 * @param xc_exec - `exec`: defines whether the proposal should be executed immediately after voting or not.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgVote = (sg_proposal_id, sa_voter, xc_option, s_metadata, xc_exec) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .v(xc_option) // VoteOption option = 3
    .s(s_metadata) // string metadata = 4
    .v(xc_exec) // Exec exec = 5
    .o;
/**
 * Encodes a `MsgVoteResponse` protobuf message: the Msg/Vote response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgVoteResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgExec` protobuf message: the Msg/Exec request type.
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param s_executor - `executor`: the account address used to execute the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgExec = (sg_proposal_id, s_executor) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(s_executor) // string executor = 2
    .o;
/**
 * Encodes a `MsgExecResponse` protobuf message: the Msg/Exec request type.
 * @param xc_result - `result`: the final result of the proposal execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgExecResponse = (xc_result) => Protobuf() // ...
    .v(xc_result, 2) // ProposalExecutorResult result = 2
    .o;
/**
 * Encodes a `MsgLeaveGroup` protobuf message: the Msg/LeaveGroup request type.
 * @param sa_address - `address`: the account address of the group member.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgLeaveGroup = (sa_address, sg_group_id) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .g(sg_group_id) // uint64 group_id = 2
    .o;
/**
 * Encodes a `MsgLeaveGroupResponse` protobuf message: the Msg/LeaveGroup response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMsgLeaveGroupResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf CreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroup}
 */
export const decodeCosmosGroupMsgCreateGroup = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 5], [0, decodeCosmosGroupMemberRequest]);
/**
 * Decodes a protobuf CreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupResponse}
 */
export const decodeCosmosGroupMsgCreateGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf UpdateGroupMembers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMembers}
 */
export const decodeCosmosGroupMsgUpdateGroupMembers = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 0], [0, 0, decodeCosmosGroupMemberRequest]);
/**
 * Decodes a protobuf UpdateGroupMembers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMembersResponse}
 */
export const decodeCosmosGroupMsgUpdateGroupMembersResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateGroupAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupAdmin}
 */
export const decodeCosmosGroupMsgUpdateGroupAdmin = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5]);
/**
 * Decodes a protobuf UpdateGroupAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupAdminResponse}
 */
export const decodeCosmosGroupMsgUpdateGroupAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateGroupMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMetadata}
 */
export const decodeCosmosGroupMsgUpdateGroupMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5]);
/**
 * Decodes a protobuf UpdateGroupMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupMetadataResponse}
 */
export const decodeCosmosGroupMsgUpdateGroupMetadataResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CreateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupPolicy}
 */
export const decodeCosmosGroupMsgCreateGroupPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5, 1], [0, 0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf CreateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupPolicyResponse}
 */
export const decodeCosmosGroupMsgCreateGroupPolicyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf UpdateGroupPolicyAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyAdmin}
 */
export const decodeCosmosGroupMsgUpdateGroupPolicyAdmin = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf UpdateGroupPolicyAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyAdminResponse}
 */
export const decodeCosmosGroupMsgUpdateGroupPolicyAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CreateGroupWithPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupWithPolicy}
 */
export const decodeCosmosGroupMsgCreateGroupWithPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 5, 5, 1, 1], [0, decodeCosmosGroupMemberRequest, 0, 0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf CreateGroupWithPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgCreateGroupWithPolicyResponse}
 */
export const decodeCosmosGroupMsgCreateGroupWithPolicyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf UpdateGroupPolicyDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicy}
 */
export const decodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf UpdateGroupPolicyDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse}
 */
export const decodeCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateGroupPolicyMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyMetadata}
 */
export const decodeCosmosGroupMsgUpdateGroupPolicyMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf UpdateGroupPolicyMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgUpdateGroupPolicyMetadataResponse}
 */
export const decodeCosmosGroupMsgUpdateGroupPolicyMetadataResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgSubmitProposal}
 */
export const decodeCosmosGroupMsgSubmitProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4, 5, 0, 1, 5, 5], [0, 0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgSubmitProposalResponse}
 */
export const decodeCosmosGroupMsgSubmitProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf WithdrawProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgWithdrawProposal}
 */
export const decodeCosmosGroupMsgWithdrawProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf WithdrawProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgWithdrawProposalResponse}
 */
export const decodeCosmosGroupMsgWithdrawProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgVote}
 */
export const decodeCosmosGroupMsgVote = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 5, 1]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgVoteResponse}
 */
export const decodeCosmosGroupMsgVoteResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Exec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgExec}
 */
export const decodeCosmosGroupMsgExec = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf Exec message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosGroupMsgExecResponse}
 */
export const decodeCosmosGroupMsgExecResponse = ((atu8_payload, [, xc_result] = decode_protobuf(atu8_payload, [0, 1])) => [__UNDEFINED, xc_result]);
/**
 * Decodes a protobuf LeaveGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgLeaveGroup}
 */
export const decodeCosmosGroupMsgLeaveGroup = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf LeaveGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMsgLeaveGroupResponse}
 */
export const decodeCosmosGroupMsgLeaveGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: members - defines the group members.
 *   - 2: metadata - any arbitrary metadata to attached to the group.
 */
export const destructCosmosGroupMsgCreateGroup = (g_struct) => [g_struct.admin, g_struct.members, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP = '/cosmos.group.v1.MsgCreateGroup';
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the newly created group.
 */
export const destructCosmosGroupMsgCreateGroupResponse = (g_struct) => [g_struct.group_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_RESPONSE = '/cosmos.group.v1.MsgCreateGroupResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMembers} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: member_updates - the list of members to update, set weight to 0 to remove a member.
 */
export const destructCosmosGroupMsgUpdateGroupMembers = (g_struct) => [g_struct.admin, g_struct.group_id, g_struct.member_updates];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_MEMBERS = '/cosmos.group.v1.MsgUpdateGroupMembers';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMembersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgUpdateGroupMembersResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_MEMBERS_RESPONSE = '/cosmos.group.v1.MsgUpdateGroupMembersResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the current account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: new_admin - the group new admin account address.
 */
export const destructCosmosGroupMsgUpdateGroupAdmin = (g_struct) => [g_struct.admin, g_struct.group_id, g_struct.new_admin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_ADMIN = '/cosmos.group.v1.MsgUpdateGroupAdmin';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgUpdateGroupAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_ADMIN_RESPONSE = '/cosmos.group.v1.MsgUpdateGroupAdminResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: metadata - the updated group's metadata.
 */
export const destructCosmosGroupMsgUpdateGroupMetadata = (g_struct) => [g_struct.admin, g_struct.group_id, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_METADATA = '/cosmos.group.v1.MsgUpdateGroupMetadata';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgUpdateGroupMetadataResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_METADATA_RESPONSE = '/cosmos.group.v1.MsgUpdateGroupMetadataResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: metadata - any arbitrary metadata attached to the group policy.
 *   - 3: decision_policy - specifies the group policy's decision policy.
 */
export const destructCosmosGroupMsgCreateGroupPolicy = (g_struct) => [g_struct.admin, g_struct.group_id, g_struct.metadata, g_struct.decision_policy];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_POLICY = '/cosmos.group.v1.MsgCreateGroupPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the newly created group policy.
 */
export const destructCosmosGroupMsgCreateGroupPolicyResponse = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_POLICY_RESPONSE = '/cosmos.group.v1.MsgCreateGroupPolicyResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of the group policy.
 *   - 2: new_admin - the new group policy admin.
 */
export const destructCosmosGroupMsgUpdateGroupPolicyAdmin = (g_struct) => [g_struct.admin, g_struct.group_policy_address, g_struct.new_admin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_ADMIN = '/cosmos.group.v1.MsgUpdateGroupPolicyAdmin';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgUpdateGroupPolicyAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_ADMIN_RESPONSE = '/cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupWithPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group and group policy admin.
 *   - 1: members - defines the group members.
 *   - 2: group_metadata - any arbitrary metadata attached to the group.
 *   - 3: group_policy_metadata - any arbitrary metadata attached to the group policy.
 *   - 4: group_policy_as_admin - a boolean field, if set to true, the group policy account address will be used as group and group policy admin.
 *   - 5: decision_policy - specifies the group policy's decision policy.
 */
export const destructCosmosGroupMsgCreateGroupWithPolicy = (g_struct) => [g_struct.admin, g_struct.members, g_struct.group_metadata, g_struct.group_policy_metadata, g_struct.group_policy_as_admin, g_struct.decision_policy];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_WITH_POLICY = '/cosmos.group.v1.MsgCreateGroupWithPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupMsgCreateGroupWithPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the newly created group with policy.
 *   - 1: group_policy_address - the account address of the newly created group policy.
 */
export const destructCosmosGroupMsgCreateGroupWithPolicyResponse = (g_struct) => [g_struct.group_id, g_struct.group_policy_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_CREATE_GROUP_WITH_POLICY_RESPONSE = '/cosmos.group.v1.MsgCreateGroupWithPolicyResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyDecisionPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: decision_policy - the updated group policy's decision policy.
 */
export const destructCosmosGroupMsgUpdateGroupPolicyDecisionPolicy = (g_struct) => [g_struct.admin, g_struct.group_policy_address, g_struct.decision_policy];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_DECISION_POLICY = '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgUpdateGroupPolicyDecisionPolicyResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_DECISION_POLICY_RESPONSE = '/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of the group admin.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: metadata - the group policy metadata to be updated.
 */
export const destructCosmosGroupMsgUpdateGroupPolicyMetadata = (g_struct) => [g_struct.admin, g_struct.group_policy_address, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_METADATA = '/cosmos.group.v1.MsgUpdateGroupPolicyMetadata';
/**
 * Destructures the fields of a {@link CosmosGroupMsgUpdateGroupPolicyMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgUpdateGroupPolicyMetadataResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_UPDATE_GROUP_POLICY_METADATA_RESPONSE = '/cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_policy_address - the account address of group policy.
 *   - 1: proposers - the account addresses of the proposers. Proposers signatures will be counted as yes votes.
 *   - 2: metadata - any arbitrary metadata attached to the proposal.
 *   - 3: messages - a list of `sdk.Msg`s that will be executed if the proposal passes.
 *   - 4: exec - defines the mode of execution of the proposal, whether it should be executed immediately on creation or not. If so, proposers signatures are considered as Yes votes.
 *   - 5: title - the title of the proposal. Since: cosmos-sdk 0.47
 *   - 6: summary - the summary of the proposal. Since: cosmos-sdk 0.47
 */
export const destructCosmosGroupMsgSubmitProposal = (g_struct) => [g_struct.group_policy_address, g_struct.proposers, g_struct.metadata, g_struct.messages, g_struct.exec, g_struct.title, g_struct.summary];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_SUBMIT_PROPOSAL = '/cosmos.group.v1.MsgSubmitProposal';
/**
 * Destructures the fields of a {@link CosmosGroupMsgSubmitProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 */
export const destructCosmosGroupMsgSubmitProposalResponse = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_SUBMIT_PROPOSAL_RESPONSE = '/cosmos.group.v1.MsgSubmitProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgWithdrawProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: address - the admin of the group policy or one of the proposer of the proposal.
 */
export const destructCosmosGroupMsgWithdrawProposal = (g_struct) => [g_struct.proposal_id, g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_WITHDRAW_PROPOSAL = '/cosmos.group.v1.MsgWithdrawProposal';
/**
 * Destructures the fields of a {@link CosmosGroupMsgWithdrawProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgWithdrawProposalResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_WITHDRAW_PROPOSAL_RESPONSE = '/cosmos.group.v1.MsgWithdrawProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: voter - the voter account address.
 *   - 2: option - the voter's choice on the proposal.
 *   - 3: metadata - any arbitrary metadata attached to the vote.
 *   - 4: exec - defines whether the proposal should be executed immediately after voting or not.
 */
export const destructCosmosGroupMsgVote = (g_struct) => [g_struct.proposal_id, g_struct.voter, g_struct.option, g_struct.metadata, g_struct.exec];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_VOTE = '/cosmos.group.v1.MsgVote';
/**
 * Destructures the fields of a {@link CosmosGroupMsgVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgVoteResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_VOTE_RESPONSE = '/cosmos.group.v1.MsgVoteResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgExec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: executor - the account address used to execute the proposal.
 */
export const destructCosmosGroupMsgExec = (g_struct) => [g_struct.proposal_id, g_struct.executor];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_EXEC = '/cosmos.group.v1.MsgExec';
/**
 * Destructures the fields of a {@link CosmosGroupMsgExecResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: result - the final result of the proposal execution.
 */
export const destructCosmosGroupMsgExecResponse = (g_struct) => [__UNDEFINED, g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_EXEC_RESPONSE = '/cosmos.group.v1.MsgExecResponse';
/**
 * Destructures the fields of a {@link CosmosGroupMsgLeaveGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group member.
 *   - 1: group_id - the unique ID of the group.
 */
export const destructCosmosGroupMsgLeaveGroup = (g_struct) => [g_struct.address, g_struct.group_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_LEAVE_GROUP = '/cosmos.group.v1.MsgLeaveGroup';
/**
 * Destructures the fields of a {@link CosmosGroupMsgLeaveGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGroupMsgLeaveGroupResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MSG_LEAVE_GROUP_RESPONSE = '/cosmos.group.v1.MsgLeaveGroupResponse';
/**
 * Protobuf enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_UNSPECIFIED** - An empty value means that there should be a separate MsgExec request for the proposal to execute.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupExec}
 */
export const XC_PROTO_COSMOS_GROUP_EXEC_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_UNSPECIFIED** - An empty value means that there should be a separate MsgExec request for the proposal to execute.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupExec}
 */
export const SI_JSON_COSMOS_GROUP_EXEC_UNSPECIFIED = 'EXEC_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_TRY** - Try to execute the proposal immediately. If the proposal is not allowed per the DecisionPolicy, the proposal will still be open and could be executed at a later point.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupExec}
 */
export const XC_PROTO_COSMOS_GROUP_EXEC_TRY = 1;
/**
 * JSON enum value for `cosmos.group.v1.Exec`.
 *
 * **EXEC_TRY** - Try to execute the proposal immediately. If the proposal is not allowed per the DecisionPolicy, the proposal will still be open and could be executed at a later point.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupExec}
 */
export const SI_JSON_COSMOS_GROUP_EXEC_TRY = 'EXEC_TRY';
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.Exec` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosGroupExec = {
    [XC_PROTO_COSMOS_GROUP_EXEC_UNSPECIFIED]: SI_JSON_COSMOS_GROUP_EXEC_UNSPECIFIED,
    [XC_PROTO_COSMOS_GROUP_EXEC_TRY]: SI_JSON_COSMOS_GROUP_EXEC_TRY,
};
/**
 * Maps a JSON enum string value for `cosmos.group.v1.Exec` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosGroupExec = {
    [SI_JSON_COSMOS_GROUP_EXEC_UNSPECIFIED]: XC_PROTO_COSMOS_GROUP_EXEC_UNSPECIFIED,
    [SI_JSON_COSMOS_GROUP_EXEC_TRY]: XC_PROTO_COSMOS_GROUP_EXEC_TRY,
};
//# sourceMappingURL=tx.js.map