import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt, WeakTimestampStr, WeakDurationStr } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type AnyCosmosGroupThresholdDecisionPolicy = Encoded<'cosmos.group.v1.DecisionPolicy'>;
export type AnyCosmosGroupPercentageDecisionPolicy = Encoded<'cosmos.group.v1.DecisionPolicy'>;
export type EncodedCosmosGroupMember = Encoded<'/cosmos.group.v1.Member'>;
export type EncodedCosmosGroupMemberRequest = Encoded<'/cosmos.group.v1.MemberRequest'>;
export type EncodedCosmosGroupThresholdDecisionPolicy = Encoded<'/cosmos.group.v1.ThresholdDecisionPolicy' | 'cosmos.group.v1.DecisionPolicy'>;
export type EncodedCosmosGroupPercentageDecisionPolicy = Encoded<'/cosmos.group.v1.PercentageDecisionPolicy' | 'cosmos.group.v1.DecisionPolicy'>;
export type EncodedCosmosGroupDecisionPolicyWindows = Encoded<'/cosmos.group.v1.DecisionPolicyWindows'>;
export type EncodedCosmosGroupGroupInfo = Encoded<'/cosmos.group.v1.GroupInfo'>;
export type EncodedCosmosGroupGroupMember = Encoded<'/cosmos.group.v1.GroupMember'>;
export type EncodedCosmosGroupGroupPolicyInfo = Encoded<'/cosmos.group.v1.GroupPolicyInfo'>;
export type EncodedCosmosGroupProposal = Encoded<'/cosmos.group.v1.Proposal'>;
export type EncodedCosmosGroupTallyResult = Encoded<'/cosmos.group.v1.TallyResult'>;
export type EncodedCosmosGroupVote = Encoded<'/cosmos.group.v1.Vote'>;
/**
 * Encodes a `ThresholdDecisionPolicy` protobuf message wrapped in the `Any` container: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The sum of all `YES` voter's weights is greater or equal than the defined `threshold`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_threshold - `threshold`: the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyThresholdDecisionPolicy: (s_threshold?: Opt<string>, atu8_windows?: Opt<Encoded<'/cosmos.group.v1.DecisionPolicyWindows'>>) => AnyCosmosGroupThresholdDecisionPolicy;
/**
 * Encodes a `PercentageDecisionPolicy` protobuf message wrapped in the `Any` container: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The percentage of all `YES` voters' weights out of the total group weight is greater or equal than the given `percentage`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_percentage - `percentage`: the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyPercentageDecisionPolicy: (s_percentage?: Opt<string>, atu8_windows?: Opt<Encoded<'/cosmos.group.v1.DecisionPolicyWindows'>>) => AnyCosmosGroupPercentageDecisionPolicy;
/**
 * Encodes a `Member` protobuf message: represents a group member with an account address, non-zero weight, metadata and added_at timestamp.
 * @param sa_address - `address`: the member's account address.
 * @param s_weight - `weight`: the member's voting weight that should be greater than 0.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the member.
 * @param xt_added_at - `added_at`: a timestamp specifying when a member was added.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMember: (sa_address?: Opt<WeakAccountAddr>, s_weight?: Opt<string>, s_metadata?: Opt<string>, xt_added_at?: Opt<number>) => EncodedCosmosGroupMember;
/**
 * Encodes a `MemberRequest` protobuf message: represents a group member to be used in Msg server requests. Contrary to `Member`, it doesn't have any `added_at` field since this field cannot be set as part of requests.
 * @param sa_address - `address`: the member's account address.
 * @param s_weight - `weight`: the member's voting weight that should be greater than 0.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the member.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupMemberRequest: (sa_address?: Opt<WeakAccountAddr>, s_weight?: Opt<string>, s_metadata?: Opt<string>) => EncodedCosmosGroupMemberRequest;
/**
 * Encodes a `ThresholdDecisionPolicy` protobuf message: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The sum of all `YES` voter's weights is greater or equal than the defined `threshold`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_threshold - `threshold`: the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupThresholdDecisionPolicy: (s_threshold?: Opt<string>, atu8_windows?: Opt<Encoded<'/cosmos.group.v1.DecisionPolicyWindows'>>) => EncodedCosmosGroupThresholdDecisionPolicy;
/**
 * Encodes a `PercentageDecisionPolicy` protobuf message: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The percentage of all `YES` voters' weights out of the total group weight is greater or equal than the given `percentage`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_percentage - `percentage`: the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupPercentageDecisionPolicy: (s_percentage?: Opt<string>, atu8_windows?: Opt<Encoded<'/cosmos.group.v1.DecisionPolicyWindows'>>) => EncodedCosmosGroupPercentageDecisionPolicy;
/**
 * Encodes a `DecisionPolicyWindows` protobuf message: defines the different windows for voting and execution.
 * @param xt_voting_period - `voting_period`: the duration from submission of a proposal to the end of voting period Within this times votes can be submitted with MsgVote.
 * @param xt_min_execution_period - `min_execution_period`: the minimum duration after the proposal submission where members can start sending MsgExec. This means that the window for sending a MsgExec transaction is: `[ submission + min_execution_period ; submission + voting_period + max_execution_period]` where max_execution_period is a app-specific config, defined in the keeper. If not set, min_execution_period will default to 0. Please make sure to set a `min_execution_period` that is smaller than `voting_period + max_execution_period`, or else the above execution window is empty, meaning that all proposals created with this decision policy won't be able to be executed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupDecisionPolicyWindows: (xt_voting_period?: Opt<number>, xt_min_execution_period?: Opt<number>) => EncodedCosmosGroupDecisionPolicyWindows;
/**
 * Encodes a `GroupInfo` protobuf message: represents the high-level on-chain information for a group.
 * @param sg_id - `id`: the unique ID of the group.
 * @param s_admin - `admin`: the account address of the group's admin.
 * @param s_metadata - `metadata`: any arbitrary metadata to attached to the group. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
 * @param sg_version - `version`: used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail
 * @param s_total_weight - `total_weight`: the sum of the group members' weights.
 * @param xt_created_at - `created_at`: a timestamp specifying when a group was created.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupGroupInfo: (sg_id?: Opt<WeakUint64Str>, s_admin?: Opt<string>, s_metadata?: Opt<string>, sg_version?: Opt<WeakUint64Str>, s_total_weight?: Opt<string>, xt_created_at?: Opt<number>) => EncodedCosmosGroupGroupInfo;
/**
 * Encodes a `GroupMember` protobuf message: represents the relationship between a group and a member.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param g_member - `member`: the member data.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupGroupMember: (sg_group_id?: Opt<WeakUint64Str>, atu8_member?: Opt<Encoded<'/cosmos.group.v1.Member'>>) => EncodedCosmosGroupGroupMember;
/**
 * Encodes a `GroupPolicyInfo` protobuf message: represents the high-level on-chain information for a group policy.
 * @param sa_address - `address`: the account address of group policy.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the group policy. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
 * @param sg_version - `version`: used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal.
 * @param atu8_decision_policy - `decision_policy`: specifies the group policy's decision policy.
 * @param xt_created_at - `created_at`: a timestamp specifying when a group policy was created.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupGroupPolicyInfo: (sa_address?: Opt<WeakAccountAddr>, sg_group_id?: Opt<WeakUint64Str>, s_admin?: Opt<string>, s_metadata?: Opt<string>, sg_version?: Opt<WeakUint64Str>, atu8_decision_policy?: Opt<Encoded<'cosmos.group.v1.DecisionPolicy'>>, xt_created_at?: Opt<number>) => EncodedCosmosGroupGroupPolicyInfo;
/**
 * Encodes a `Proposal` protobuf message: defines a group proposal. Any member of a group can submit a proposal for a group policy to decide upon. A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal passes as well as some optional metadata associated with the proposal.
 * @param sg_id - `id`: the unique id of the proposal.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#proposal-4
 * @param a_proposers - `proposers`: the account addresses of the proposers.
 * @param xt_submit_time - `submit_time`: a timestamp specifying when a proposal was submitted.
 * @param sg_group_version - `group_version`: tracks the version of the group at proposal submission. This field is here for informational purposes only.
 * @param sg_group_policy_version - `group_policy_version`: tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.
 * @param xc_status - `status`: represents the high level position in the life cycle of the proposal. Initial value is Submitted.
 * @param g_final_tally_result - `final_tally_result`: contains the sums of all weighted votes for this proposal for each vote option. It is empty at submission, and only populated after tallying, at voting period end or at proposal execution, whichever happens first.
 * @param xt_voting_period_end - `voting_period_end`: the timestamp before which voting must be done. Unless a successful MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.
 * @param xc_executor_result - `executor_result`: the final result of the proposal execution. Initial value is NotRun.
 * @param a_messages - `messages`: a list of `sdk.Msg`s that will be executed if the proposal passes.
 * @param s_title - `title`: the title of the proposal Since: cosmos-sdk 0.47
 * @param s_summary - `summary`: a short summary of the proposal Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupProposal: (sg_id?: Opt<WeakUint64Str>, sa_group_policy?: Opt<WeakAccountAddr>, s_metadata?: Opt<string>, a_proposers?: Opt<string[]>, xt_submit_time?: Opt<number>, sg_group_version?: Opt<WeakUint64Str>, sg_group_policy_version?: Opt<WeakUint64Str>, xc_status?: Opt<ProtoEnumCosmosGroupProposalStatus>, atu8_final_tally_result?: Opt<Encoded<'/cosmos.group.v1.TallyResult'>>, xt_voting_period_end?: Opt<number>, xc_executor_result?: Opt<ProtoEnumCosmosGroupProposalExecutorResult>, a_messages?: Opt<Uint8Array[]>, s_title?: Opt<string>, s_summary?: Opt<string>) => EncodedCosmosGroupProposal;
/**
 * Encodes a `TallyResult` protobuf message: represents the sum of weighted votes for each vote option.
 * @param s_yes_count - `yes_count`: the weighted sum of yes votes.
 * @param s_abstain_count - `abstain_count`: the weighted sum of abstainers.
 * @param s_no_count - `no_count`: the weighted sum of no votes.
 * @param s_no_with_veto_count - `no_with_veto_count`: the weighted sum of veto.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupTallyResult: (s_yes_count?: Opt<string>, s_abstain_count?: Opt<string>, s_no_count?: Opt<string>, s_no_with_veto_count?: Opt<string>) => EncodedCosmosGroupTallyResult;
/**
 * Encodes a `Vote` protobuf message: represents a vote for a proposal.string metadata
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param sa_voter - `voter`: the account address of the voter.
 * @param xc_option - `option`: the voter's choice on the proposal.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
 * @param xt_submit_time - `submit_time`: the timestamp when the vote was submitted.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupVote: (sg_proposal_id?: Opt<WeakUint64Str>, sa_voter?: Opt<WeakAccountAddr>, xc_option?: Opt<ProtoEnumCosmosGroupVoteOption>, s_metadata?: Opt<string>, xt_submit_time?: Opt<number>) => EncodedCosmosGroupVote;
/**
 * A decoded protobuf Member message
 *
 * Tuple where:
 *   - 0: address - the member's account address.
 *   - 1: weight - the member's voting weight that should be greater than 0.
 *   - 2: metadata - any arbitrary metadata attached to the member.
 *   - 3: added_at - a timestamp specifying when a member was added.
 */
export type DecodedCosmosGroupMember = [
    sa_address?: CwAccountAddr,
    s_weight?: string,
    s_metadata?: string,
    a_added_at?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf Member message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMember}
 */
export declare const decodeCosmosGroupMember: (atu8_payload: Uint8Array) => DecodedCosmosGroupMember;
/**
 * A decoded protobuf MemberRequest message
 *
 * Tuple where:
 *   - 0: address - the member's account address.
 *   - 1: weight - the member's voting weight that should be greater than 0.
 *   - 2: metadata - any arbitrary metadata attached to the member.
 */
export type DecodedCosmosGroupMemberRequest = [
    sa_address?: CwAccountAddr,
    s_weight?: string,
    s_metadata?: string
];
/**
 * Decodes a protobuf MemberRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMemberRequest}
 */
export declare const decodeCosmosGroupMemberRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupMemberRequest;
/**
 * A decoded protobuf ThresholdDecisionPolicy message
 *
 * Tuple where:
 *   - 0: threshold - the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 *   - 1: windows - defines the different windows for voting and execution.
 */
export type DecodedCosmosGroupThresholdDecisionPolicy = [
    s_threshold?: string,
    a_windows?: DecodedCosmosGroupDecisionPolicyWindows
];
/**
 * Decodes a protobuf ThresholdDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupThresholdDecisionPolicy}
 */
export declare const decodeCosmosGroupThresholdDecisionPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupThresholdDecisionPolicy;
/**
 * A decoded protobuf PercentageDecisionPolicy message
 *
 * Tuple where:
 *   - 0: percentage - the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 *   - 1: windows - defines the different windows for voting and execution.
 */
export type DecodedCosmosGroupPercentageDecisionPolicy = [
    s_percentage?: string,
    a_windows?: DecodedCosmosGroupDecisionPolicyWindows
];
/**
 * Decodes a protobuf PercentageDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupPercentageDecisionPolicy}
 */
export declare const decodeCosmosGroupPercentageDecisionPolicy: (atu8_payload: Uint8Array) => DecodedCosmosGroupPercentageDecisionPolicy;
/**
 * A decoded protobuf DecisionPolicyWindows message
 *
 * Tuple where:
 *   - 0: voting_period - the duration from submission of a proposal to the end of voting period Within this times votes can be submitted with MsgVote.
 *   - 1: min_execution_period - the minimum duration after the proposal submission where members can start sending MsgExec. This means that the window for sending a MsgExec transaction is: `[ submission + min_execution_period ; submission + voting_period + max_execution_period]` where max_execution_period is a app-specific config, defined in the keeper. If not set, min_execution_period will default to 0. Please make sure to set a `min_execution_period` that is smaller than `voting_period + max_execution_period`, or else the above execution window is empty, meaning that all proposals created with this decision policy won't be able to be executed.
 */
export type DecodedCosmosGroupDecisionPolicyWindows = [
    a_voting_period?: [
        string,
        number
    ],
    a_min_execution_period?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf DecisionPolicyWindows message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupDecisionPolicyWindows}
 */
export declare const decodeCosmosGroupDecisionPolicyWindows: (atu8_payload: Uint8Array) => DecodedCosmosGroupDecisionPolicyWindows;
/**
 * A decoded protobuf GroupInfo message
 *
 * Tuple where:
 *   - 0: id - the unique ID of the group.
 *   - 1: admin - the account address of the group's admin.
 *   - 2: metadata - any arbitrary metadata to attached to the group. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
 *   - 3: version - used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail
 *   - 4: total_weight - the sum of the group members' weights.
 *   - 5: created_at - a timestamp specifying when a group was created.
 */
export type DecodedCosmosGroupGroupInfo = [
    sg_id?: CwUint64,
    s_admin?: string,
    s_metadata?: string,
    sg_version?: CwUint64,
    s_total_weight?: string,
    a_created_at?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf GroupInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGroupInfo}
 */
export declare const decodeCosmosGroupGroupInfo: (atu8_payload: Uint8Array) => DecodedCosmosGroupGroupInfo;
/**
 * A decoded protobuf GroupMember message
 *
 * Tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: member - the member data.
 */
export type DecodedCosmosGroupGroupMember = [
    sg_group_id?: CwUint64,
    a_member?: DecodedCosmosGroupMember
];
/**
 * Decodes a protobuf GroupMember message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGroupMember}
 */
export declare const decodeCosmosGroupGroupMember: (atu8_payload: Uint8Array) => DecodedCosmosGroupGroupMember;
/**
 * A decoded protobuf GroupPolicyInfo message
 *
 * Tuple where:
 *   - 0: address - the account address of group policy.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: admin - the account address of the group admin.
 *   - 3: metadata - any arbitrary metadata attached to the group policy. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
 *   - 4: version - used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal.
 *   - 5: decision_policy - specifies the group policy's decision policy.
 *   - 6: created_at - a timestamp specifying when a group policy was created.
 */
export type DecodedCosmosGroupGroupPolicyInfo = [
    sa_address?: CwAccountAddr,
    sg_group_id?: CwUint64,
    s_admin?: string,
    s_metadata?: string,
    sg_version?: CwUint64,
    a_decision_policy?: DecodedGoogleProtobufAny,
    a_created_at?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf GroupPolicyInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGroupPolicyInfo}
 */
export declare const decodeCosmosGroupGroupPolicyInfo: (atu8_payload: Uint8Array) => DecodedCosmosGroupGroupPolicyInfo;
/**
 * A decoded protobuf Proposal message
 *
 * Tuple where:
 *   - 0: id - the unique id of the proposal.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: metadata - any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#proposal-4
 *   - 3: proposers - the account addresses of the proposers.
 *   - 4: submit_time - a timestamp specifying when a proposal was submitted.
 *   - 5: group_version - tracks the version of the group at proposal submission. This field is here for informational purposes only.
 *   - 6: group_policy_version - tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.
 *   - 7: status - represents the high level position in the life cycle of the proposal. Initial value is Submitted.
 *   - 8: final_tally_result - contains the sums of all weighted votes for this proposal for each vote option. It is empty at submission, and only populated after tallying, at voting period end or at proposal execution, whichever happens first.
 *   - 9: voting_period_end - the timestamp before which voting must be done. Unless a successful MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.
 *   - 10: executor_result - the final result of the proposal execution. Initial value is NotRun.
 *   - 11: messages - a list of `sdk.Msg`s that will be executed if the proposal passes.
 *   - 12: title - the title of the proposal Since: cosmos-sdk 0.47
 *   - 13: summary - a short summary of the proposal Since: cosmos-sdk 0.47
 */
export type DecodedCosmosGroupProposal = [
    sg_id?: CwUint64,
    sa_group_policy?: CwAccountAddr,
    s_metadata?: string,
    a_proposers?: string[],
    a_submit_time?: [
        string,
        number
    ],
    sg_group_version?: CwUint64,
    sg_group_policy_version?: CwUint64,
    xc_status?: ProtoEnumCosmosGroupProposalStatus,
    a_final_tally_result?: DecodedCosmosGroupTallyResult,
    a_voting_period_end?: [
        string,
        number
    ],
    xc_executor_result?: ProtoEnumCosmosGroupProposalExecutorResult,
    a_messages?: DecodedGoogleProtobufAny[],
    s_title?: string,
    s_summary?: string
];
/**
 * Decodes a protobuf Proposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupProposal}
 */
export declare const decodeCosmosGroupProposal: (atu8_payload: Uint8Array) => DecodedCosmosGroupProposal;
/**
 * A decoded protobuf TallyResult message
 *
 * Tuple where:
 *   - 0: yes_count - the weighted sum of yes votes.
 *   - 1: abstain_count - the weighted sum of abstainers.
 *   - 2: no_count - the weighted sum of no votes.
 *   - 3: no_with_veto_count - the weighted sum of veto.
 */
export type DecodedCosmosGroupTallyResult = [
    s_yes_count?: string,
    s_abstain_count?: string,
    s_no_count?: string,
    s_no_with_veto_count?: string
];
/**
 * Decodes a protobuf TallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupTallyResult}
 */
export declare const decodeCosmosGroupTallyResult: (atu8_payload: Uint8Array) => DecodedCosmosGroupTallyResult;
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: voter - the account address of the voter.
 *   - 2: option - the voter's choice on the proposal.
 *   - 3: metadata - any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
 *   - 4: submit_time - the timestamp when the vote was submitted.
 */
export type DecodedCosmosGroupVote = [
    sg_proposal_id?: CwUint64,
    sa_voter?: CwAccountAddr,
    xc_option?: ProtoEnumCosmosGroupVoteOption,
    s_metadata?: string,
    a_submit_time?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupVote}
 */
export declare const decodeCosmosGroupVote: (atu8_payload: Uint8Array) => DecodedCosmosGroupVote;
/**
 * Destructures the fields of a {@link CosmosGroupMemberRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the member's account address.
 *   - 1: weight - the member's voting weight that should be greater than 0.
 *   - 2: metadata - any arbitrary metadata attached to the member.
 */
export declare const destructCosmosGroupMemberRequest: (g_struct: CosmosGroupMemberRequest) => [address?: CwAccountAddr, weight?: string, metadata?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MEMBER_REQUEST = "/cosmos.group.v1.MemberRequest";
/**
 * JSON serialization of `cosmos.group.v1.MemberRequest` - represents a group member to be used in Msg server requests. Contrary to `Member`, it doesn't have any `added_at` field since this field cannot be set as part of requests.
 */
export type CosmosGroupMemberRequest = {
    address?: CwAccountAddr | undefined;
    weight?: string | undefined;
    metadata?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupTallyResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: yes_count - the weighted sum of yes votes.
 *   - 1: abstain_count - the weighted sum of abstainers.
 *   - 2: no_count - the weighted sum of no votes.
 *   - 3: no_with_veto_count - the weighted sum of veto.
 */
export declare const destructCosmosGroupTallyResult: (g_struct: CosmosGroupTallyResult) => [yes_count?: string, abstain_count?: string, no_count?: string, no_with_veto_count?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_TALLY_RESULT = "/cosmos.group.v1.TallyResult";
/**
 * JSON serialization of `cosmos.group.v1.TallyResult` - represents the sum of weighted votes for each vote option.
 */
export type CosmosGroupTallyResult = {
    yes_count?: string | undefined;
    abstain_count?: string | undefined;
    no_count?: string | undefined;
    no_with_veto_count?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupMember} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the member's account address.
 *   - 1: weight - the member's voting weight that should be greater than 0.
 *   - 2: metadata - any arbitrary metadata attached to the member.
 *   - 3: added_at - a timestamp specifying when a member was added.
 */
export declare const destructCosmosGroupMember: (g_struct: CosmosGroupMember) => [address?: CwAccountAddr, weight?: string, metadata?: string, added_at?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_MEMBER = "/cosmos.group.v1.Member";
/**
 * JSON serialization of `cosmos.group.v1.Member` - represents a group member with an account address, non-zero weight, metadata and added_at timestamp.
 */
export type CosmosGroupMember = {
    address?: CwAccountAddr | undefined;
    weight?: string | undefined;
    metadata?: string | undefined;
    added_at?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupThresholdDecisionPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: threshold - the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 *   - 1: windows - defines the different windows for voting and execution.
 */
export declare const destructCosmosGroupThresholdDecisionPolicy: (g_struct: CosmosGroupThresholdDecisionPolicy) => [threshold?: string, windows?: CosmosGroupDecisionPolicyWindows];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_THRESHOLD_DECISION_POLICY = "/cosmos.group.v1.ThresholdDecisionPolicy";
/**
 * JSON serialization of `cosmos.group.v1.ThresholdDecisionPolicy` - a decision policy where a proposal passes when it satisfies the two following conditions: 1. The sum of all `YES` voter's weights is greater or equal than the defined `threshold`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 */
export type CosmosGroupThresholdDecisionPolicy = {
    threshold?: string | undefined;
    windows?: CosmosGroupDecisionPolicyWindows | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupDecisionPolicyWindows} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voting_period - the duration from submission of a proposal to the end of voting period Within this times votes can be submitted with MsgVote.
 *   - 1: min_execution_period - the minimum duration after the proposal submission where members can start sending MsgExec. This means that the window for sending a MsgExec transaction is: `[ submission + min_execution_period ; submission + voting_period + max_execution_period]` where max_execution_period is a app-specific config, defined in the keeper. If not set, min_execution_period will default to 0. Please make sure to set a `min_execution_period` that is smaller than `voting_period + max_execution_period`, or else the above execution window is empty, meaning that all proposals created with this decision policy won't be able to be executed.
 */
export declare const destructCosmosGroupDecisionPolicyWindows: (g_struct: CosmosGroupDecisionPolicyWindows) => [voting_period?: number, min_execution_period?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_DECISION_POLICY_WINDOWS = "/cosmos.group.v1.DecisionPolicyWindows";
/**
 * JSON serialization of `cosmos.group.v1.DecisionPolicyWindows` - defines the different windows for voting and execution.
 */
export type CosmosGroupDecisionPolicyWindows = {
    voting_period?: WeakDurationStr | undefined;
    min_execution_period?: WeakDurationStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupPercentageDecisionPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: percentage - the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 *   - 1: windows - defines the different windows for voting and execution.
 */
export declare const destructCosmosGroupPercentageDecisionPolicy: (g_struct: CosmosGroupPercentageDecisionPolicy) => [percentage?: string, windows?: CosmosGroupDecisionPolicyWindows];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_PERCENTAGE_DECISION_POLICY = "/cosmos.group.v1.PercentageDecisionPolicy";
/**
 * JSON serialization of `cosmos.group.v1.PercentageDecisionPolicy` - a decision policy where a proposal passes when it satisfies the two following conditions: 1. The percentage of all `YES` voters' weights out of the total group weight is greater or equal than the given `percentage`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 */
export type CosmosGroupPercentageDecisionPolicy = {
    percentage?: string | undefined;
    windows?: CosmosGroupDecisionPolicyWindows | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupGroupInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - the unique ID of the group.
 *   - 1: admin - the account address of the group's admin.
 *   - 2: metadata - any arbitrary metadata to attached to the group. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
 *   - 3: version - used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail
 *   - 4: total_weight - the sum of the group members' weights.
 *   - 5: created_at - a timestamp specifying when a group was created.
 */
export declare const destructCosmosGroupGroupInfo: (g_struct: CosmosGroupGroupInfo) => [id?: CwUint64, admin?: string, metadata?: string, version?: CwUint64, total_weight?: string, created_at?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_GROUP_INFO = "/cosmos.group.v1.GroupInfo";
/**
 * JSON serialization of `cosmos.group.v1.GroupInfo` - represents the high-level on-chain information for a group.
 */
export type CosmosGroupGroupInfo = {
    id?: CwUint64 | undefined;
    admin?: string | undefined;
    metadata?: string | undefined;
    version?: CwUint64 | undefined;
    total_weight?: string | undefined;
    created_at?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupGroupMember} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: member - the member data.
 */
export declare const destructCosmosGroupGroupMember: (g_struct: CosmosGroupGroupMember) => [group_id?: CwUint64, member?: CosmosGroupMember];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_GROUP_MEMBER = "/cosmos.group.v1.GroupMember";
/**
 * JSON serialization of `cosmos.group.v1.GroupMember` - represents the relationship between a group and a member.
 */
export type CosmosGroupGroupMember = {
    group_id?: CwUint64 | undefined;
    member?: CosmosGroupMember | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupGroupPolicyInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of group policy.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: admin - the account address of the group admin.
 *   - 3: metadata - any arbitrary metadata attached to the group policy. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
 *   - 4: version - used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal.
 *   - 5: decision_policy - specifies the group policy's decision policy.
 *   - 6: created_at - a timestamp specifying when a group policy was created.
 */
export declare const destructCosmosGroupGroupPolicyInfo: (g_struct: CosmosGroupGroupPolicyInfo) => [address?: CwAccountAddr, group_id?: CwUint64, admin?: string, metadata?: string, version?: CwUint64, decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy>, created_at?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_GROUP_POLICY_INFO = "/cosmos.group.v1.GroupPolicyInfo";
/**
 * JSON serialization of `cosmos.group.v1.GroupPolicyInfo` - represents the high-level on-chain information for a group policy.
 */
export type CosmosGroupGroupPolicyInfo = {
    address?: CwAccountAddr | undefined;
    group_id?: CwUint64 | undefined;
    admin?: string | undefined;
    metadata?: string | undefined;
    version?: CwUint64 | undefined;
    decision_policy?: JsonAny<string, CosmosGroupThresholdDecisionPolicy | CosmosGroupPercentageDecisionPolicy> | undefined;
    created_at?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - the unique id of the proposal.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: metadata - any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#proposal-4
 *   - 3: proposers - the account addresses of the proposers.
 *   - 4: submit_time - a timestamp specifying when a proposal was submitted.
 *   - 5: group_version - tracks the version of the group at proposal submission. This field is here for informational purposes only.
 *   - 6: group_policy_version - tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.
 *   - 7: status - represents the high level position in the life cycle of the proposal. Initial value is Submitted.
 *   - 8: final_tally_result - contains the sums of all weighted votes for this proposal for each vote option. It is empty at submission, and only populated after tallying, at voting period end or at proposal execution, whichever happens first.
 *   - 9: voting_period_end - the timestamp before which voting must be done. Unless a successful MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.
 *   - 10: executor_result - the final result of the proposal execution. Initial value is NotRun.
 *   - 11: messages - a list of `sdk.Msg`s that will be executed if the proposal passes.
 *   - 12: title - the title of the proposal Since: cosmos-sdk 0.47
 *   - 13: summary - a short summary of the proposal Since: cosmos-sdk 0.47
 */
export declare const destructCosmosGroupProposal: (g_struct: CosmosGroupProposal) => [id?: CwUint64, group_policy_address?: CwAccountAddr, metadata?: string, proposers?: string[], submit_time?: number, group_version?: CwUint64, group_policy_version?: CwUint64, status?: JsonEnumCosmosGroupProposalStatus, final_tally_result?: CosmosGroupTallyResult, voting_period_end?: number, executor_result?: JsonEnumCosmosGroupProposalExecutorResult, messages?: JsonAny[], title?: string, summary?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_PROPOSAL = "/cosmos.group.v1.Proposal";
/**
 * JSON serialization of `cosmos.group.v1.Proposal` - defines a group proposal. Any member of a group can submit a proposal for a group policy to decide upon. A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal passes as well as some optional metadata associated with the proposal.
 */
export type CosmosGroupProposal = {
    id?: CwUint64 | undefined;
    group_policy_address?: CwAccountAddr | undefined;
    metadata?: string | undefined;
    proposers?: string[] | undefined;
    submit_time?: WeakTimestampStr | undefined;
    group_version?: CwUint64 | undefined;
    group_policy_version?: CwUint64 | undefined;
    status?: JsonEnumCosmosGroupProposalStatus | undefined;
    final_tally_result?: CosmosGroupTallyResult | undefined;
    voting_period_end?: WeakTimestampStr | undefined;
    executor_result?: JsonEnumCosmosGroupProposalExecutorResult | undefined;
    messages?: JsonAny[] | undefined;
    title?: string | undefined;
    summary?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: voter - the account address of the voter.
 *   - 2: option - the voter's choice on the proposal.
 *   - 3: metadata - any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
 *   - 4: submit_time - the timestamp when the vote was submitted.
 */
export declare const destructCosmosGroupVote: (g_struct: CosmosGroupVote) => [proposal_id?: CwUint64, voter?: CwAccountAddr, option?: JsonEnumCosmosGroupVoteOption, metadata?: string, submit_time?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_VOTE = "/cosmos.group.v1.Vote";
/**
 * JSON serialization of `cosmos.group.v1.Vote` - represents a vote for a proposal.string metadata
 */
export type CosmosGroupVote = {
    proposal_id?: CwUint64 | undefined;
    voter?: CwAccountAddr | undefined;
    option?: JsonEnumCosmosGroupVoteOption | undefined;
    metadata?: string | undefined;
    submit_time?: WeakTimestampStr | undefined;
};
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines an unspecified vote option which will return an error.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export declare const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines an unspecified vote option which will return an error.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export declare const SI_JSON_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED = "VOTE_OPTION_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export declare const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_YES = 1;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export declare const SI_JSON_COSMOS_GROUP_VOTE_OPTION_YES = "VOTE_OPTION_YES";
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export declare const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_ABSTAIN = 2;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export declare const SI_JSON_COSMOS_GROUP_VOTE_OPTION_ABSTAIN = "VOTE_OPTION_ABSTAIN";
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export declare const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO = 3;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export declare const SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO = "VOTE_OPTION_NO";
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export declare const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO = 4;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export declare const SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO = "VOTE_OPTION_NO_WITH_VETO";
/**
 * Raw protobuf enum values for `cosmos.group.v1.VoteOption` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_GROUP_VOTE_OPTION_YES}
 *   - {@link XC_PROTO_COSMOS_GROUP_VOTE_OPTION_ABSTAIN}
 *   - {@link XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO}
 *   - {@link XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO}
 */
export type ProtoEnumCosmosGroupVoteOption = typeof XC_PROTO_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED | typeof XC_PROTO_COSMOS_GROUP_VOTE_OPTION_YES | typeof XC_PROTO_COSMOS_GROUP_VOTE_OPTION_ABSTAIN | typeof XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO | typeof XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO;
/**
 * JSON enum values for `cosmos.group.v1.VoteOption` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_GROUP_VOTE_OPTION_YES}
 *   - {@link SI_JSON_COSMOS_GROUP_VOTE_OPTION_ABSTAIN}
 *   - {@link SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO}
 *   - {@link SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO}
 */
export type JsonEnumCosmosGroupVoteOption = typeof SI_JSON_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED | typeof SI_JSON_COSMOS_GROUP_VOTE_OPTION_YES | typeof SI_JSON_COSMOS_GROUP_VOTE_OPTION_ABSTAIN | typeof SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO | typeof SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO;
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.VoteOption` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosGroupVoteOption: Record<ProtoEnumCosmosGroupVoteOption, JsonEnumCosmosGroupVoteOption>;
/**
 * Maps a JSON enum string value for `cosmos.group.v1.VoteOption` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosGroupVoteOption: Record<JsonEnumCosmosGroupVoteOption, ProtoEnumCosmosGroupVoteOption>;
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED** - An empty value is not allowed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED** - An empty value is not allowed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_NOT_RUN** - We have not yet run the executor.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_NOT_RUN** - We have not yet run the executor.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN = "PROPOSAL_EXECUTOR_RESULT_NOT_RUN";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_SUCCESS** - The executor was successful and proposed action updated state.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_SUCCESS** - The executor was successful and proposed action updated state.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS = "PROPOSAL_EXECUTOR_RESULT_SUCCESS";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_FAILURE** - The executor returned an error and proposed action didn't update state.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE = 3;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_FAILURE** - The executor returned an error and proposed action didn't update state.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE = "PROPOSAL_EXECUTOR_RESULT_FAILURE";
/**
 * Raw protobuf enum values for `cosmos.group.v1.ProposalExecutorResult` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE}
 */
export type ProtoEnumCosmosGroupProposalExecutorResult = typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE;
/**
 * JSON enum values for `cosmos.group.v1.ProposalExecutorResult` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE}
 */
export type JsonEnumCosmosGroupProposalExecutorResult = typeof SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE;
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.ProposalExecutorResult` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosGroupProposalExecutorResult: Record<ProtoEnumCosmosGroupProposalExecutorResult, JsonEnumCosmosGroupProposalExecutorResult>;
/**
 * Maps a JSON enum string value for `cosmos.group.v1.ProposalExecutorResult` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosGroupProposalExecutorResult: Record<JsonEnumCosmosGroupProposalExecutorResult, ProtoEnumCosmosGroupProposalExecutorResult>;
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - An empty value is invalid and not allowed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - An empty value is invalid and not allowed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED = "PROPOSAL_STATUS_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_SUBMITTED** - Initial status of a proposal when submitted.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED = 1;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_SUBMITTED** - Initial status of a proposal when submitted.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED = "PROPOSAL_STATUS_SUBMITTED";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ACCEPTED** - Final status of a proposal when the final tally is done and the outcome passes the group policy's decision policy.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED = 2;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ACCEPTED** - Final status of a proposal when the final tally is done and the outcome passes the group policy's decision policy.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED = "PROPOSAL_STATUS_ACCEPTED";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - Final status of a proposal when the final tally is done and the outcome is rejected by the group policy's decision policy.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED = 3;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - Final status of a proposal when the final tally is done and the outcome is rejected by the group policy's decision policy.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED = "PROPOSAL_STATUS_REJECTED";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ABORTED** - Final status of a proposal when the group policy is modified before the final tally.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED = 4;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ABORTED** - Final status of a proposal when the group policy is modified before the final tally.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED = "PROPOSAL_STATUS_ABORTED";
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_WITHDRAWN** - A proposal can be withdrawn before the voting start time by the owner. When this happens the final status is Withdrawn.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN = 5;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_WITHDRAWN** - A proposal can be withdrawn before the voting start time by the owner. When this happens the final status is Withdrawn.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export declare const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN = "PROPOSAL_STATUS_WITHDRAWN";
/**
 * Raw protobuf enum values for `cosmos.group.v1.ProposalStatus` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED}
 *   - {@link XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN}
 */
export type ProtoEnumCosmosGroupProposalStatus = typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED | typeof XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN;
/**
 * JSON enum values for `cosmos.group.v1.ProposalStatus` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED}
 *   - {@link SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN}
 */
export type JsonEnumCosmosGroupProposalStatus = typeof SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED | typeof SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN;
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.ProposalStatus` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosGroupProposalStatus: Record<ProtoEnumCosmosGroupProposalStatus, JsonEnumCosmosGroupProposalStatus>;
/**
 * Maps a JSON enum string value for `cosmos.group.v1.ProposalStatus` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosGroupProposalStatus: Record<JsonEnumCosmosGroupProposalStatus, ProtoEnumCosmosGroupProposalStatus>;
