import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Minter` protobuf message: represents the minting state.
 * @param s_inflation - `inflation`: current annual inflation rate
 * @param s_annual_provisions - `annual_provisions`: current annual expected provisions
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosMintMinter = (s_inflation, s_annual_provisions) => Protobuf() // ...
    .s(s_inflation) // string inflation = 1
    .s(s_annual_provisions) // string annual_provisions = 2
    .o;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/mint module.
 * @param s_mint_denom - `mint_denom`: type of coin to mint
 * @param s_inflation_rate_change - `inflation_rate_change`: maximum annual change in inflation rate
 * @param s_inflation_max - `inflation_max`: maximum inflation rate
 * @param s_inflation_min - `inflation_min`: minimum inflation rate
 * @param s_goal_bonded - `goal_bonded`: goal of percent bonded atoms
 * @param sg_blocks_per_year - `blocks_per_year`: expected blocks per year
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosMintParams = (s_mint_denom, s_inflation_rate_change, s_inflation_max, s_inflation_min, s_goal_bonded, sg_blocks_per_year) => Protobuf() // ...
    .s(s_mint_denom) // string mint_denom = 1
    .s(s_inflation_rate_change) // string inflation_rate_change = 2
    .s(s_inflation_max) // string inflation_max = 3
    .s(s_inflation_min) // string inflation_min = 4
    .s(s_goal_bonded) // string goal_bonded = 5
    .g(sg_blocks_per_year) // uint64 blocks_per_year = 6
    .o;
/**
 * Decodes a protobuf Minter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosMintMinter}
 */
export const decodeCosmosMintMinter = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosMintParams}
 */
export const decodeCosmosMintParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5, 3]);
/**
 * Destructures the fields of a {@link CosmosMintParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mint_denom - type of coin to mint
 *   - 1: inflation_rate_change - maximum annual change in inflation rate
 *   - 2: inflation_max - maximum inflation rate
 *   - 3: inflation_min - minimum inflation rate
 *   - 4: goal_bonded - goal of percent bonded atoms
 *   - 5: blocks_per_year - expected blocks per year
 */
export const destructCosmosMintParams = (g_struct) => [g_struct.mint_denom, g_struct.inflation_rate_change, g_struct.inflation_max, g_struct.inflation_min, g_struct.goal_bonded, g_struct.blocks_per_year];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_MINT_PARAMS = '/cosmos.mint.v1beta1.Params';
/**
 * Destructures the fields of a {@link CosmosMintMinter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: inflation - current annual inflation rate
 *   - 1: annual_provisions - current annual expected provisions
 */
export const destructCosmosMintMinter = (g_struct) => [g_struct.inflation, g_struct.annual_provisions];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_MINT_MINTER = '/cosmos.mint.v1beta1.Minter';
//# sourceMappingURL=mint.js.map