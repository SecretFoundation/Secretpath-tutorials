import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosNftEventSend = Encoded<'/cosmos.nft.v1beta1.EventSend'>;
export type EncodedCosmosNftEventMint = Encoded<'/cosmos.nft.v1beta1.EventMint'>;
export type EncodedCosmosNftEventBurn = Encoded<'/cosmos.nft.v1beta1.EventBurn'>;
/**
 * Encodes a `EventSend` protobuf message: emitted on Msg/Send
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the nft
 * @param sa_sender - `sender`: the address of the owner of nft
 * @param sa_receiver - `receiver`: the receiver address of nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftEventSend: (si_class?: Opt<string>, s_id?: Opt<string>, sa_sender?: Opt<WeakAccountAddr>, sa_receiver?: Opt<WeakAccountAddr>) => EncodedCosmosNftEventSend;
/**
 * Encodes a `EventMint` protobuf message: emitted on Mint
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftEventMint: (si_class?: Opt<string>, s_id?: Opt<string>, sa_owner?: Opt<WeakAccountAddr>) => EncodedCosmosNftEventMint;
/**
 * Encodes a `EventBurn` protobuf message: emitted on Burn
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftEventBurn: (si_class?: Opt<string>, s_id?: Opt<string>, sa_owner?: Opt<WeakAccountAddr>) => EncodedCosmosNftEventBurn;
/**
 * A decoded protobuf EventSend message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: sender - the address of the owner of nft
 *   - 3: receiver - the receiver address of nft
 */
export type DecodedCosmosNftEventSend = [
    si_class?: string,
    s_id?: string,
    sa_sender?: CwAccountAddr,
    sa_receiver?: CwAccountAddr
];
/**
 * Decodes a protobuf EventSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEventSend}
 */
export declare const decodeCosmosNftEventSend: (atu8_payload: Uint8Array) => DecodedCosmosNftEventSend;
/**
 * A decoded protobuf EventMint message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: owner - the owner address of the nft
 */
export type DecodedCosmosNftEventMint = [
    si_class?: string,
    s_id?: string,
    sa_owner?: CwAccountAddr
];
/**
 * Decodes a protobuf EventMint message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEventMint}
 */
export declare const decodeCosmosNftEventMint: (atu8_payload: Uint8Array) => DecodedCosmosNftEventMint;
/**
 * A decoded protobuf EventBurn message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: owner - the owner address of the nft
 */
export type DecodedCosmosNftEventBurn = [
    si_class?: string,
    s_id?: string,
    sa_owner?: CwAccountAddr
];
/**
 * Decodes a protobuf EventBurn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEventBurn}
 */
export declare const decodeCosmosNftEventBurn: (atu8_payload: Uint8Array) => DecodedCosmosNftEventBurn;
/**
 * Destructures the fields of a {@link CosmosNftEventSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: sender - the address of the owner of nft
 *   - 3: receiver - the receiver address of nft
 */
export declare const destructCosmosNftEventSend: (g_struct: CosmosNftEventSend) => [class_id?: string, id?: string, sender?: CwAccountAddr, receiver?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_EVENT_SEND = "/cosmos.nft.v1beta1.EventSend";
/**
 * JSON serialization of `cosmos.nft.v1beta1.EventSend` - emitted on Msg/Send
 */
export type CosmosNftEventSend = {
    class_id?: string | undefined;
    id?: string | undefined;
    sender?: CwAccountAddr | undefined;
    receiver?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftEventMint} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: owner - the owner address of the nft
 */
export declare const destructCosmosNftEventMint: (g_struct: CosmosNftEventMint) => [class_id?: string, id?: string, owner?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_EVENT_MINT = "/cosmos.nft.v1beta1.EventMint";
/**
 * JSON serialization of `cosmos.nft.v1beta1.EventMint` - emitted on Mint
 */
export type CosmosNftEventMint = {
    class_id?: string | undefined;
    id?: string | undefined;
    owner?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftEventBurn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: owner - the owner address of the nft
 */
export declare const destructCosmosNftEventBurn: (g_struct: CosmosNftEventBurn) => [class_id?: string, id?: string, owner?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_EVENT_BURN = "/cosmos.nft.v1beta1.EventBurn";
/**
 * JSON serialization of `cosmos.nft.v1beta1.EventBurn` - emitted on Burn
 */
export type CosmosNftEventBurn = {
    class_id?: string | undefined;
    id?: string | undefined;
    owner?: CwAccountAddr | undefined;
};
