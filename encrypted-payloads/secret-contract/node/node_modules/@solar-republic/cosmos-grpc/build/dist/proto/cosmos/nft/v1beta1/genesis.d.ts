import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosNftClass, DecodedCosmosNftClass, CosmosNftNFT, DecodedCosmosNftNFT } from './nft.js';
export type EncodedCosmosNftGenesisState = Encoded<'/cosmos.nft.v1beta1.GenesisState'>;
export type EncodedCosmosNftEntry = Encoded<'/cosmos.nft.v1beta1.Entry'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the nft module's genesis state.
 * @param a_classes - `classes`: class defines the class of the nft type.
 * @param a_entries - `entries`: entry defines all nft owned by a person.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftGenesisState: (a_classes?: Opt<Encoded<'/cosmos.nft.v1beta1.Class'>[]>, a_entries?: Opt<Encoded<'/cosmos.nft.v1beta1.Entry'>[]>) => EncodedCosmosNftGenesisState;
/**
 * Encodes a `Entry` protobuf message: Defines all nft owned by a person
 * @param sa_owner - `owner`: the owner address of the following nft
 * @param a_nfts - `nfts`: a group of nfts of the same owner
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftEntry: (sa_owner?: Opt<WeakAccountAddr>, a_nfts?: Opt<Encoded<'/cosmos.nft.v1beta1.NFT'>[]>) => EncodedCosmosNftEntry;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: entries - entry defines all nft owned by a person.
 */
export type DecodedCosmosNftGenesisState = [
    a_classes?: DecodedCosmosNftClass[],
    a_entries?: DecodedCosmosNftEntry[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftGenesisState}
 */
export declare const decodeCosmosNftGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosNftGenesisState;
/**
 * A decoded protobuf Entry message
 *
 * Tuple where:
 *   - 0: owner - the owner address of the following nft
 *   - 1: nfts - a group of nfts of the same owner
 */
export type DecodedCosmosNftEntry = [
    sa_owner?: CwAccountAddr,
    a_nfts?: DecodedCosmosNftNFT[]
];
/**
 * Decodes a protobuf Entry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEntry}
 */
export declare const decodeCosmosNftEntry: (atu8_payload: Uint8Array) => DecodedCosmosNftEntry;
/**
 * Destructures the fields of a {@link CosmosNftGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: entries - entry defines all nft owned by a person.
 */
export declare const destructCosmosNftGenesisState: (g_struct: CosmosNftGenesisState) => [classes?: CosmosNftClass[], entries?: CosmosNftEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_GENESIS_STATE = "/cosmos.nft.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.nft.v1beta1.GenesisState` - defines the nft module's genesis state.
 */
export type CosmosNftGenesisState = {
    classes?: CosmosNftClass[] | undefined;
    entries?: CosmosNftEntry[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner - the owner address of the following nft
 *   - 1: nfts - a group of nfts of the same owner
 */
export declare const destructCosmosNftEntry: (g_struct: CosmosNftEntry) => [owner?: CwAccountAddr, nfts?: CosmosNftNFT[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_ENTRY = "/cosmos.nft.v1beta1.Entry";
/**
 * JSON serialization of `cosmos.nft.v1beta1.Entry` - Defines all nft owned by a person
 */
export type CosmosNftEntry = {
    owner?: CwAccountAddr | undefined;
    nfts?: CosmosNftNFT[] | undefined;
};
