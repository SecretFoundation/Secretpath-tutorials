import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeCosmosNftClass, decodeCosmosNftNFT } from './nft.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the nft module's genesis state.
 * @param a_classes - `classes`: class defines the class of the nft type.
 * @param a_entries - `entries`: entry defines all nft owned by a person.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftGenesisState = (a_classes, a_entries) => Protobuf() // ...
    .B(a_classes) // Class[] classes = 1
    .B(a_entries) // Entry[] entries = 2
    .o;
/**
 * Encodes a `Entry` protobuf message: Defines all nft owned by a person
 * @param sa_owner - `owner`: the owner address of the following nft
 * @param a_nfts - `nfts`: a group of nfts of the same owner
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftEntry = (sa_owner, a_nfts) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .B(a_nfts) // NFT[] nfts = 2
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftGenesisState}
 */
export const decodeCosmosNftGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0], [decodeCosmosNftClass, decodeCosmosNftEntry]);
/**
 * Decodes a protobuf Entry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEntry}
 */
export const decodeCosmosNftEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeCosmosNftNFT]);
/**
 * Destructures the fields of a {@link CosmosNftGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: entries - entry defines all nft owned by a person.
 */
export const destructCosmosNftGenesisState = (g_struct) => [g_struct.classes, g_struct.entries];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_GENESIS_STATE = '/cosmos.nft.v1beta1.GenesisState';
/**
 * Destructures the fields of a {@link CosmosNftEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner - the owner address of the following nft
 *   - 1: nfts - a group of nfts of the same owner
 */
export const destructCosmosNftEntry = (g_struct) => [g_struct.owner, g_struct.nfts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_ENTRY = '/cosmos.nft.v1beta1.Entry';
//# sourceMappingURL=genesis.js.map