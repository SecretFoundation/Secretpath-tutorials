import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedCosmosNftClass = Encoded<'/cosmos.nft.v1beta1.Class'>;
export type EncodedCosmosNftNFT = Encoded<'/cosmos.nft.v1beta1.NFT'>;
/**
 * Encodes a `Class` protobuf message: defines the class of the nft type.
 * @param s_id - `id`: defines the unique identifier of the NFT classification, similar to the contract address of ERC721
 * @param s_name - `name`: defines the human-readable name of the NFT classification. Optional
 * @param s_symbol - `symbol`: an abbreviated name for nft classification. Optional
 * @param s_description - `description`: a brief description of nft classification. Optional
 * @param s_uri - `uri`: for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
 * @param s_uri_hash - `uri_hash`: a hash of the document pointed by uri. Optional
 * @param atu8_data - `data`: the app specific metadata of the NFT class. Optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftClass: (s_id?: Opt<string>, s_name?: Opt<string>, s_symbol?: Opt<string>, s_description?: Opt<string>, s_uri?: Opt<string>, s_uri_hash?: Opt<string>, atu8_data?: Opt<Uint8Array>) => EncodedCosmosNftClass;
/**
 * Encodes a `NFT` protobuf message: defines the NFT.
 * @param si_class - `class_id`: associated with the NFT, similar to the contract address of ERC721
 * @param s_id - `id`: a unique identifier of the NFT
 * @param s_uri - `uri`: for the NFT metadata stored off chain
 * @param s_uri_hash - `uri_hash`: a hash of the document pointed by uri
 * @param atu8_data - `data`: an app specific data of the NFT. Optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftNFT: (si_class?: Opt<string>, s_id?: Opt<string>, s_uri?: Opt<string>, s_uri_hash?: Opt<string>, atu8_data?: Opt<Uint8Array>) => EncodedCosmosNftNFT;
/**
 * A decoded protobuf Class message
 *
 * Tuple where:
 *   - 0: id - defines the unique identifier of the NFT classification, similar to the contract address of ERC721
 *   - 1: name - defines the human-readable name of the NFT classification. Optional
 *   - 2: symbol - an abbreviated name for nft classification. Optional
 *   - 3: description - a brief description of nft classification. Optional
 *   - 4: uri - for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
 *   - 5: uri_hash - a hash of the document pointed by uri. Optional
 *   - 6: data - the app specific metadata of the NFT class. Optional
 */
export type DecodedCosmosNftClass = [
    s_id?: string,
    s_name?: string,
    s_symbol?: string,
    s_description?: string,
    s_uri?: string,
    s_uri_hash?: string,
    a_data?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf Class message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftClass}
 */
export declare const decodeCosmosNftClass: (atu8_payload: Uint8Array) => DecodedCosmosNftClass;
/**
 * A decoded protobuf NFT message
 *
 * Tuple where:
 *   - 0: class_id - associated with the NFT, similar to the contract address of ERC721
 *   - 1: id - a unique identifier of the NFT
 *   - 2: uri - for the NFT metadata stored off chain
 *   - 3: uri_hash - a hash of the document pointed by uri
 *   - 9: data - an app specific data of the NFT. Optional
 */
export type DecodedCosmosNftNFT = [
    si_class?: string,
    s_id?: string,
    s_uri?: string,
    s_uri_hash?: string,
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    w_3?: undefined,
    w_4?: undefined,
    a_data?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf NFT message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosNftNFT}
 */
export declare const decodeCosmosNftNFT: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosNftNFT;
/**
 * Destructures the fields of a {@link CosmosNftNFT} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the NFT, similar to the contract address of ERC721
 *   - 1: id - a unique identifier of the NFT
 *   - 2: uri - for the NFT metadata stored off chain
 *   - 3: uri_hash - a hash of the document pointed by uri
 *   - 9: data - an app specific data of the NFT. Optional
 */
export declare const destructCosmosNftNFT: (g_struct: CosmosNftNFT) => [class_id?: string, id?: string, uri?: string, uri_hash?: string, EMPTY?: void, EMPTY?: void, EMPTY?: void, EMPTY?: void, EMPTY?: void, data?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_N_F_T = "/cosmos.nft.v1beta1.NFT";
/**
 * JSON serialization of `cosmos.nft.v1beta1.NFT` - defines the NFT.
 */
export type CosmosNftNFT = {
    class_id?: string | undefined;
    id?: string | undefined;
    uri?: string | undefined;
    uri_hash?: string | undefined;
    data?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftClass} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - defines the unique identifier of the NFT classification, similar to the contract address of ERC721
 *   - 1: name - defines the human-readable name of the NFT classification. Optional
 *   - 2: symbol - an abbreviated name for nft classification. Optional
 *   - 3: description - a brief description of nft classification. Optional
 *   - 4: uri - for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
 *   - 5: uri_hash - a hash of the document pointed by uri. Optional
 *   - 6: data - the app specific metadata of the NFT class. Optional
 */
export declare const destructCosmosNftClass: (g_struct: CosmosNftClass) => [id?: string, name?: string, symbol?: string, description?: string, uri?: string, uri_hash?: string, data?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_CLASS = "/cosmos.nft.v1beta1.Class";
/**
 * JSON serialization of `cosmos.nft.v1beta1.Class` - defines the class of the nft type.
 */
export type CosmosNftClass = {
    id?: string | undefined;
    name?: string | undefined;
    symbol?: string | undefined;
    description?: string | undefined;
    uri?: string | undefined;
    uri_hash?: string | undefined;
    data?: JsonAny | undefined;
};
