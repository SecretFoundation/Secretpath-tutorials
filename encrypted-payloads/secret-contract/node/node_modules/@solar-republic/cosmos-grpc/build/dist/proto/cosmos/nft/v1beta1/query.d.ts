/// <reference types="node" />
import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import type { CosmosNftNFT, DecodedCosmosNftNFT, CosmosNftClass, DecodedCosmosNftClass } from './nft.js';
export type EncodedCosmosNftQueryBalanceRequest = Encoded<'/cosmos.nft.v1beta1.QueryBalanceRequest'>;
export type EncodedCosmosNftQueryBalanceResponse = Encoded<'/cosmos.nft.v1beta1.QueryBalanceResponse'>;
export type EncodedCosmosNftQueryOwnerRequest = Encoded<'/cosmos.nft.v1beta1.QueryOwnerRequest'>;
export type EncodedCosmosNftQueryOwnerResponse = Encoded<'/cosmos.nft.v1beta1.QueryOwnerResponse'>;
export type EncodedCosmosNftQuerySupplyRequest = Encoded<'/cosmos.nft.v1beta1.QuerySupplyRequest'>;
export type EncodedCosmosNftQuerySupplyResponse = Encoded<'/cosmos.nft.v1beta1.QuerySupplyResponse'>;
export type EncodedCosmosNftQueryNFTsRequest = Encoded<'/cosmos.nft.v1beta1.QueryNFTsRequest'>;
export type EncodedCosmosNftQueryNFTsResponse = Encoded<'/cosmos.nft.v1beta1.QueryNFTsResponse'>;
export type EncodedCosmosNftQueryNFTRequest = Encoded<'/cosmos.nft.v1beta1.QueryNFTRequest'>;
export type EncodedCosmosNftQueryNFTResponse = Encoded<'/cosmos.nft.v1beta1.QueryNFTResponse'>;
export type EncodedCosmosNftQueryClassRequest = Encoded<'/cosmos.nft.v1beta1.QueryClassRequest'>;
export type EncodedCosmosNftQueryClassResponse = Encoded<'/cosmos.nft.v1beta1.QueryClassResponse'>;
export type EncodedCosmosNftQueryClassesRequest = Encoded<'/cosmos.nft.v1beta1.QueryClassesRequest'>;
export type EncodedCosmosNftQueryClassesResponse = Encoded<'/cosmos.nft.v1beta1.QueryClassesResponse'>;
/**
 * Queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param sa_owner - the owner address of the nft
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs of a given class owned by the owner
 */
export declare const queryCosmosNftBalance: (z_req: string | ({
    origin: string;
} & RequestInit), si_class?: Opt<string>, sa_owner?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQueryBalanceResponse>>;
/**
 * Queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param s_id - a unique identifier of the NFT
 * @returns a tuple where:
 *   - 0: owner - the owner address of the nft
 */
export declare const queryCosmosNftOwner: (z_req: string | ({
    origin: string;
} & RequestInit), si_class?: Opt<string>, s_id?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQueryOwnerResponse>>;
/**
 * Queries the number of NFTs from the given class, same as totalSupply of ERC721.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs from the given class
 */
export declare const queryCosmosNftSupply: (z_req: string | ({
    origin: string;
} & RequestInit), si_class?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQuerySupplyResponse>>;
/**
 * Queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param sa_owner - the owner address of the nft
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: nfts - NFT defines the NFT
 *   - 1: pagination - NFT defines the NFT
 */
export declare const queryCosmosNftNFTs: (z_req: string | ({
    origin: string;
} & RequestInit), si_class?: Opt<string>, sa_owner?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQueryNFTsResponse>>;
/**
 * Queries an NFT based on its class and id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param s_id - a unique identifier of the NFT
 * @returns a tuple where:
 *   - 0: nft - owner is the owner address of the nft
 */
export declare const queryCosmosNftNFT: (z_req: string | ({
    origin: string;
} & RequestInit), si_class?: Opt<string>, s_id?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQueryNFTResponse>>;
/**
 * Queries an NFT class based on its id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @returns a tuple where:
 *   - 0: class - defines the class of the nft type.
 */
export declare const queryCosmosNftClass: (z_req: string | ({
    origin: string;
} & RequestInit), si_class?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQueryClassResponse>>;
/**
 * Queries all NFT classes
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: pagination - class defines the class of the nft type.
 */
export declare const queryCosmosNftClasses: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosNftQueryClassesResponse>>;
/**
 * Encodes a `QueryBalanceRequest` protobuf message: the request type for the Query/Balance RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryBalanceRequest: (si_class?: Opt<string>, sa_owner?: Opt<WeakAccountAddr>) => EncodedCosmosNftQueryBalanceRequest;
/**
 * Encodes a `QueryBalanceResponse` protobuf message: the response type for the Query/Balance RPC method
 * @param sg_amount - `amount`: the number of all NFTs of a given class owned by the owner
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryBalanceResponse: (sg_amount?: Opt<WeakUint64Str>) => EncodedCosmosNftQueryBalanceResponse;
/**
 * Encodes a `QueryOwnerRequest` protobuf message: the request type for the Query/Owner RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the NFT
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryOwnerRequest: (si_class?: Opt<string>, s_id?: Opt<string>) => EncodedCosmosNftQueryOwnerRequest;
/**
 * Encodes a `QueryOwnerResponse` protobuf message: the response type for the Query/Owner RPC method
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryOwnerResponse: (sa_owner?: Opt<WeakAccountAddr>) => EncodedCosmosNftQueryOwnerResponse;
/**
 * Encodes a `QuerySupplyRequest` protobuf message: the request type for the Query/Supply RPC method
 * @param si_class - `class_id`: associated with the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQuerySupplyRequest: (si_class?: Opt<string>) => EncodedCosmosNftQuerySupplyRequest;
/**
 * Encodes a `QuerySupplyResponse` protobuf message: the response type for the Query/Supply RPC method
 * @param sg_amount - `amount`: the number of all NFTs from the given class
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQuerySupplyResponse: (sg_amount?: Opt<WeakUint64Str>) => EncodedCosmosNftQuerySupplyResponse;
/**
 * Encodes a `QueryNFTsRequest` protobuf message: QueryNFTstRequest is the request type for the Query/NFTs RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryNFTsRequest: (si_class?: Opt<string>, sa_owner?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosNftQueryNFTsRequest;
/**
 * Encodes a `QueryNFTsResponse` protobuf message: the response type for the Query/NFTs RPC methods
 * @param a_nfts - `nfts`: NFT defines the NFT
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryNFTsResponse: (a_nfts?: Opt<Encoded<'/cosmos.nft.v1beta1.NFT'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosNftQueryNFTsResponse;
/**
 * Encodes a `QueryNFTRequest` protobuf message: the request type for the Query/NFT RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the NFT
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryNFTRequest: (si_class?: Opt<string>, s_id?: Opt<string>) => EncodedCosmosNftQueryNFTRequest;
/**
 * Encodes a `QueryNFTResponse` protobuf message: the response type for the Query/NFT RPC method
 * @param g_nft - `nft`: owner is the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryNFTResponse: (atu8_nft?: Opt<Encoded<'/cosmos.nft.v1beta1.NFT'>>) => EncodedCosmosNftQueryNFTResponse;
/**
 * Encodes a `QueryClassRequest` protobuf message: the request type for the Query/Class RPC method
 * @param si_class - `class_id`: associated with the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryClassRequest: (si_class?: Opt<string>) => EncodedCosmosNftQueryClassRequest;
/**
 * Encodes a `QueryClassResponse` protobuf message: the response type for the Query/Class RPC method
 * @param g_class - `class`: defines the class of the nft type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryClassResponse: (atu8_class?: Opt<Encoded<'/cosmos.nft.v1beta1.Class'>>) => EncodedCosmosNftQueryClassResponse;
/**
 * Encodes a `QueryClassesRequest` protobuf message: the request type for the Query/Classes RPC method
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryClassesRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosNftQueryClassesRequest;
/**
 * Encodes a `QueryClassesResponse` protobuf message: the response type for the Query/Classes RPC method
 * @param a_classes - `classes`: class defines the class of the nft type.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftQueryClassesResponse: (a_classes?: Opt<Encoded<'/cosmos.nft.v1beta1.Class'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosNftQueryClassesResponse;
/**
 * A decoded protobuf QueryBalanceRequest message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: owner - the owner address of the nft
 */
export type DecodedCosmosNftQueryBalanceRequest = [
    si_class?: string,
    sa_owner?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryBalanceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryBalanceRequest}
 */
export declare const decodeCosmosNftQueryBalanceRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryBalanceRequest;
/**
 * A decoded protobuf QueryBalance message
 *
 * Alias for: amount - the number of all NFTs of a given class owned by the owner
 */
export type DecodedCosmosNftQueryBalanceResponse = [
    sg_amount?: CwUint64
];
/**
 * Decodes a protobuf QueryBalance message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryBalanceResponse}
 */
export declare const decodeCosmosNftQueryBalanceResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryBalanceResponse;
/**
 * A decoded protobuf QueryOwnerRequest message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the NFT
 */
export type DecodedCosmosNftQueryOwnerRequest = [
    si_class?: string,
    s_id?: string
];
/**
 * Decodes a protobuf QueryOwnerRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryOwnerRequest}
 */
export declare const decodeCosmosNftQueryOwnerRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryOwnerRequest;
/**
 * A decoded protobuf QueryOwner message
 *
 * Alias for: owner - the owner address of the nft
 */
export type DecodedCosmosNftQueryOwnerResponse = [
    sa_owner?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryOwner message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryOwnerResponse}
 */
export declare const decodeCosmosNftQueryOwnerResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryOwnerResponse;
/**
 * A decoded protobuf QuerySupplyRequest message
 *
 * Alias for: class_id - associated with the nft
 */
export type DecodedCosmosNftQuerySupplyRequest = [
    si_class?: string
];
/**
 * Decodes a protobuf QuerySupplyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQuerySupplyRequest}
 */
export declare const decodeCosmosNftQuerySupplyRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQuerySupplyRequest;
/**
 * A decoded protobuf QuerySupply message
 *
 * Alias for: amount - the number of all NFTs from the given class
 */
export type DecodedCosmosNftQuerySupplyResponse = [
    sg_amount?: CwUint64
];
/**
 * Decodes a protobuf QuerySupply message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQuerySupplyResponse}
 */
export declare const decodeCosmosNftQuerySupplyResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQuerySupplyResponse;
/**
 * A decoded protobuf QueryNFTsRequest message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: owner - the owner address of the nft
 *   - 2: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosNftQueryNFTsRequest = [
    si_class?: string,
    sa_owner?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryNFTsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTsRequest}
 */
export declare const decodeCosmosNftQueryNFTsRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryNFTsRequest;
/**
 * A decoded protobuf QueryNFTs message
 *
 * Tuple where:
 *   - 0: nfts - NFT defines the NFT
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosNftQueryNFTsResponse = [
    a_nfts?: DecodedCosmosNftNFT[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryNFTs message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTsResponse}
 */
export declare const decodeCosmosNftQueryNFTsResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryNFTsResponse;
/**
 * A decoded protobuf QueryNFTRequest message
 *
 * Tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the NFT
 */
export type DecodedCosmosNftQueryNFTRequest = [
    si_class?: string,
    s_id?: string
];
/**
 * Decodes a protobuf QueryNFTRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTRequest}
 */
export declare const decodeCosmosNftQueryNFTRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryNFTRequest;
/**
 * A decoded protobuf QueryNFT message
 *
 * Alias for: nft - owner is the owner address of the nft
 */
export type DecodedCosmosNftQueryNFTResponse = [
    a_nft?: DecodedCosmosNftNFT
];
/**
 * Decodes a protobuf QueryNFT message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTResponse}
 */
export declare const decodeCosmosNftQueryNFTResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryNFTResponse;
/**
 * A decoded protobuf QueryClassRequest message
 *
 * Alias for: class_id - associated with the nft
 */
export type DecodedCosmosNftQueryClassRequest = [
    si_class?: string
];
/**
 * Decodes a protobuf QueryClassRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassRequest}
 */
export declare const decodeCosmosNftQueryClassRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryClassRequest;
/**
 * A decoded protobuf QueryClass message
 *
 * Alias for: class - defines the class of the nft type.
 */
export type DecodedCosmosNftQueryClassResponse = [
    a_class?: DecodedCosmosNftClass
];
/**
 * Decodes a protobuf QueryClass message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassResponse}
 */
export declare const decodeCosmosNftQueryClassResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryClassResponse;
/**
 * A decoded protobuf QueryClassesRequest message
 *
 * Alias for: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosNftQueryClassesRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryClassesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassesRequest}
 */
export declare const decodeCosmosNftQueryClassesRequest: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryClassesRequest;
/**
 * A decoded protobuf QueryClasses message
 *
 * Tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosNftQueryClassesResponse = [
    a_classes?: DecodedCosmosNftClass[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryClasses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassesResponse}
 */
export declare const decodeCosmosNftQueryClassesResponse: (atu8_payload: Uint8Array) => DecodedCosmosNftQueryClassesResponse;
/**
 * Destructures the fields of a {@link CosmosNftQueryBalanceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: owner - the owner address of the nft
 */
export declare const destructCosmosNftQueryBalanceRequest: (g_struct: CosmosNftQueryBalanceRequest) => [class_id?: string, owner?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_BALANCE_REQUEST = "/cosmos.nft.v1beta1.QueryBalanceRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryBalanceRequest` - the request type for the Query/Balance RPC method
 */
export type CosmosNftQueryBalanceRequest = {
    class_id?: string | undefined;
    owner?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryBalanceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs of a given class owned by the owner
 */
export declare const destructCosmosNftQueryBalanceResponse: (g_struct: CosmosNftQueryBalanceResponse) => [amount?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_BALANCE_RESPONSE = "/cosmos.nft.v1beta1.QueryBalanceResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryBalanceResponse` - the response type for the Query/Balance RPC method
 */
export type CosmosNftQueryBalanceResponse = {
    amount?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryOwnerRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the NFT
 */
export declare const destructCosmosNftQueryOwnerRequest: (g_struct: CosmosNftQueryOwnerRequest) => [class_id?: string, id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_OWNER_REQUEST = "/cosmos.nft.v1beta1.QueryOwnerRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryOwnerRequest` - the request type for the Query/Owner RPC method
 */
export type CosmosNftQueryOwnerRequest = {
    class_id?: string | undefined;
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryOwnerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner - the owner address of the nft
 */
export declare const destructCosmosNftQueryOwnerResponse: (g_struct: CosmosNftQueryOwnerResponse) => [owner?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_OWNER_RESPONSE = "/cosmos.nft.v1beta1.QueryOwnerResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryOwnerResponse` - the response type for the Query/Owner RPC method
 */
export type CosmosNftQueryOwnerResponse = {
    owner?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQuerySupplyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 */
export declare const destructCosmosNftQuerySupplyRequest: (g_struct: CosmosNftQuerySupplyRequest) => [class_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_SUPPLY_REQUEST = "/cosmos.nft.v1beta1.QuerySupplyRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QuerySupplyRequest` - the request type for the Query/Supply RPC method
 */
export type CosmosNftQuerySupplyRequest = {
    class_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQuerySupplyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs from the given class
 */
export declare const destructCosmosNftQuerySupplyResponse: (g_struct: CosmosNftQuerySupplyResponse) => [amount?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_SUPPLY_RESPONSE = "/cosmos.nft.v1beta1.QuerySupplyResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QuerySupplyResponse` - the response type for the Query/Supply RPC method
 */
export type CosmosNftQuerySupplyResponse = {
    amount?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: owner - the owner address of the nft
 *   - 2: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosNftQueryNFTsRequest: (g_struct: CosmosNftQueryNFTsRequest) => [class_id?: string, owner?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_TS_REQUEST = "/cosmos.nft.v1beta1.QueryNFTsRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryNFTsRequest` - QueryNFTstRequest is the request type for the Query/NFTs RPC method
 */
export type CosmosNftQueryNFTsRequest = {
    class_id?: string | undefined;
    owner?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: nfts - NFT defines the NFT
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosNftQueryNFTsResponse: (g_struct: CosmosNftQueryNFTsResponse) => [nfts?: CosmosNftNFT[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_TS_RESPONSE = "/cosmos.nft.v1beta1.QueryNFTsResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryNFTsResponse` - the response type for the Query/NFTs RPC methods
 */
export type CosmosNftQueryNFTsResponse = {
    nfts?: CosmosNftNFT[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the NFT
 */
export declare const destructCosmosNftQueryNFTRequest: (g_struct: CosmosNftQueryNFTRequest) => [class_id?: string, id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_T_REQUEST = "/cosmos.nft.v1beta1.QueryNFTRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryNFTRequest` - the request type for the Query/NFT RPC method
 */
export type CosmosNftQueryNFTRequest = {
    class_id?: string | undefined;
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: nft - owner is the owner address of the nft
 */
export declare const destructCosmosNftQueryNFTResponse: (g_struct: CosmosNftQueryNFTResponse) => [nft?: CosmosNftNFT];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_T_RESPONSE = "/cosmos.nft.v1beta1.QueryNFTResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryNFTResponse` - the response type for the Query/NFT RPC method
 */
export type CosmosNftQueryNFTResponse = {
    nft?: CosmosNftNFT | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryClassRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 */
export declare const destructCosmosNftQueryClassRequest: (g_struct: CosmosNftQueryClassRequest) => [class_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASS_REQUEST = "/cosmos.nft.v1beta1.QueryClassRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryClassRequest` - the request type for the Query/Class RPC method
 */
export type CosmosNftQueryClassRequest = {
    class_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryClassResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class - defines the class of the nft type.
 */
export declare const destructCosmosNftQueryClassResponse: (g_struct: CosmosNftQueryClassResponse) => [class_?: CosmosNftClass];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASS_RESPONSE = "/cosmos.nft.v1beta1.QueryClassResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryClassResponse` - the response type for the Query/Class RPC method
 */
export type CosmosNftQueryClassResponse = {
    class?: CosmosNftClass | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryClassesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosNftQueryClassesRequest: (g_struct: CosmosNftQueryClassesRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASSES_REQUEST = "/cosmos.nft.v1beta1.QueryClassesRequest";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryClassesRequest` - the request type for the Query/Classes RPC method
 */
export type CosmosNftQueryClassesRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftQueryClassesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosNftQueryClassesResponse: (g_struct: CosmosNftQueryClassesResponse) => [classes?: CosmosNftClass[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASSES_RESPONSE = "/cosmos.nft.v1beta1.QueryClassesResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.QueryClassesResponse` - the response type for the Query/Classes RPC method
 */
export type CosmosNftQueryClassesResponse = {
    classes?: CosmosNftClass[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
