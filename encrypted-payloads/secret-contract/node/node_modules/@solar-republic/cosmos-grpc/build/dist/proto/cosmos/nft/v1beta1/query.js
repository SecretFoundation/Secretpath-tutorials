import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeCosmosNftNFT, decodeCosmosNftClass } from './nft.js';
const SR_LCD_COSMOS_NFT_QUERY = '/cosmos/nft/v1beta1/';
/**
 * Queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param sa_owner - the owner address of the nft
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs of a given class owned by the owner
 */
export const queryCosmosNftBalance = restful_grpc((si_class, sa_owner) => [SR_LCD_COSMOS_NFT_QUERY + 'balance/' + sa_owner + '/' + si_class]);
/**
 * Queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param s_id - a unique identifier of the NFT
 * @returns a tuple where:
 *   - 0: owner - the owner address of the nft
 */
export const queryCosmosNftOwner = restful_grpc((si_class, s_id) => [SR_LCD_COSMOS_NFT_QUERY + 'owner/' + si_class + '/' + s_id]);
/**
 * Queries the number of NFTs from the given class, same as totalSupply of ERC721.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs from the given class
 */
export const queryCosmosNftSupply = restful_grpc(si_class => [SR_LCD_COSMOS_NFT_QUERY + 'supply/' + si_class]);
/**
 * Queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param sa_owner - the owner address of the nft
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: nfts - NFT defines the NFT
 *   - 1: pagination - NFT defines the NFT
 */
export const queryCosmosNftNFTs = restful_grpc((si_class, sa_owner, g_pagination) => [SR_LCD_COSMOS_NFT_QUERY + 'nfts', {
        class_id: si_class,
        owner: sa_owner,
        pagination: g_pagination,
    }]);
/**
 * Queries an NFT based on its class and id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @param s_id - a unique identifier of the NFT
 * @returns a tuple where:
 *   - 0: nft - owner is the owner address of the nft
 */
export const queryCosmosNftNFT = restful_grpc((si_class, s_id) => [SR_LCD_COSMOS_NFT_QUERY + 'nfts/' + si_class + '/' + s_id]);
/**
 * Queries an NFT class based on its id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_class - associated with the nft
 * @returns a tuple where:
 *   - 0: class - defines the class of the nft type.
 */
export const queryCosmosNftClass = restful_grpc(si_class => [SR_LCD_COSMOS_NFT_QUERY + 'classes/' + si_class]);
/**
 * Queries all NFT classes
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: pagination - class defines the class of the nft type.
 */
export const queryCosmosNftClasses = restful_grpc(g_pagination => [SR_LCD_COSMOS_NFT_QUERY + 'classes', {
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryBalanceRequest` protobuf message: the request type for the Query/Balance RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryBalanceRequest = (si_class, sa_owner) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(sa_owner) // string owner = 2
    .o;
/**
 * Encodes a `QueryBalanceResponse` protobuf message: the response type for the Query/Balance RPC method
 * @param sg_amount - `amount`: the number of all NFTs of a given class owned by the owner
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryBalanceResponse = (sg_amount) => Protobuf() // ...
    .g(sg_amount) // uint64 amount = 1
    .o;
/**
 * Encodes a `QueryOwnerRequest` protobuf message: the request type for the Query/Owner RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the NFT
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryOwnerRequest = (si_class, s_id) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(s_id) // string id = 2
    .o;
/**
 * Encodes a `QueryOwnerResponse` protobuf message: the response type for the Query/Owner RPC method
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryOwnerResponse = (sa_owner) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .o;
/**
 * Encodes a `QuerySupplyRequest` protobuf message: the request type for the Query/Supply RPC method
 * @param si_class - `class_id`: associated with the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQuerySupplyRequest = (si_class) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .o;
/**
 * Encodes a `QuerySupplyResponse` protobuf message: the response type for the Query/Supply RPC method
 * @param sg_amount - `amount`: the number of all NFTs from the given class
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQuerySupplyResponse = (sg_amount) => Protobuf() // ...
    .g(sg_amount) // uint64 amount = 1
    .o;
/**
 * Encodes a `QueryNFTsRequest` protobuf message: QueryNFTstRequest is the request type for the Query/NFTs RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryNFTsRequest = (si_class, sa_owner, atu8_pagination) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(sa_owner) // string owner = 2
    .b(atu8_pagination) // PageRequest pagination = 3
    .o;
/**
 * Encodes a `QueryNFTsResponse` protobuf message: the response type for the Query/NFTs RPC methods
 * @param a_nfts - `nfts`: NFT defines the NFT
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryNFTsResponse = (a_nfts, atu8_pagination) => Protobuf() // ...
    .B(a_nfts) // NFT[] nfts = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryNFTRequest` protobuf message: the request type for the Query/NFT RPC method
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the NFT
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryNFTRequest = (si_class, s_id) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(s_id) // string id = 2
    .o;
/**
 * Encodes a `QueryNFTResponse` protobuf message: the response type for the Query/NFT RPC method
 * @param g_nft - `nft`: owner is the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryNFTResponse = (atu8_nft) => Protobuf() // ...
    .b(atu8_nft) // NFT nft = 1
    .o;
/**
 * Encodes a `QueryClassRequest` protobuf message: the request type for the Query/Class RPC method
 * @param si_class - `class_id`: associated with the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryClassRequest = (si_class) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .o;
/**
 * Encodes a `QueryClassResponse` protobuf message: the response type for the Query/Class RPC method
 * @param g_class - `class`: defines the class of the nft type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryClassResponse = (atu8_class) => Protobuf() // ...
    .b(atu8_class) // Class class = 1
    .o;
/**
 * Encodes a `QueryClassesRequest` protobuf message: the request type for the Query/Classes RPC method
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryClassesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryClassesResponse` protobuf message: the response type for the Query/Classes RPC method
 * @param a_classes - `classes`: class defines the class of the nft type.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftQueryClassesResponse = (a_classes, atu8_pagination) => Protobuf() // ...
    .B(a_classes) // Class[] classes = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Decodes a protobuf QueryBalanceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryBalanceRequest}
 */
export const decodeCosmosNftQueryBalanceRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryBalance message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryBalanceResponse}
 */
export const decodeCosmosNftQueryBalanceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryOwnerRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryOwnerRequest}
 */
export const decodeCosmosNftQueryOwnerRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryOwner message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryOwnerResponse}
 */
export const decodeCosmosNftQueryOwnerResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QuerySupplyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQuerySupplyRequest}
 */
export const decodeCosmosNftQuerySupplyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QuerySupply message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQuerySupplyResponse}
 */
export const decodeCosmosNftQuerySupplyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryNFTsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTsRequest}
 */
export const decodeCosmosNftQueryNFTsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryNFTs message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTsResponse}
 */
export const decodeCosmosNftQueryNFTsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosNftNFT, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryNFTRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTRequest}
 */
export const decodeCosmosNftQueryNFTRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryNFT message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryNFTResponse}
 */
export const decodeCosmosNftQueryNFTResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosNftNFT]);
/**
 * Decodes a protobuf QueryClassRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassRequest}
 */
export const decodeCosmosNftQueryClassRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryClass message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassResponse}
 */
export const decodeCosmosNftQueryClassResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosNftClass]);
/**
 * Decodes a protobuf QueryClassesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassesRequest}
 */
export const decodeCosmosNftQueryClassesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryClasses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftQueryClassesResponse}
 */
export const decodeCosmosNftQueryClassesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosNftClass, decodeCosmosBaseQueryPageResponse]);
/**
 * Destructures the fields of a {@link CosmosNftQueryBalanceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: owner - the owner address of the nft
 */
export const destructCosmosNftQueryBalanceRequest = (g_struct) => [g_struct.class_id, g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_BALANCE_REQUEST = '/cosmos.nft.v1beta1.QueryBalanceRequest';
/**
 * Destructures the fields of a {@link CosmosNftQueryBalanceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs of a given class owned by the owner
 */
export const destructCosmosNftQueryBalanceResponse = (g_struct) => [g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_BALANCE_RESPONSE = '/cosmos.nft.v1beta1.QueryBalanceResponse';
/**
 * Destructures the fields of a {@link CosmosNftQueryOwnerRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the NFT
 */
export const destructCosmosNftQueryOwnerRequest = (g_struct) => [g_struct.class_id, g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_OWNER_REQUEST = '/cosmos.nft.v1beta1.QueryOwnerRequest';
/**
 * Destructures the fields of a {@link CosmosNftQueryOwnerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner - the owner address of the nft
 */
export const destructCosmosNftQueryOwnerResponse = (g_struct) => [g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_OWNER_RESPONSE = '/cosmos.nft.v1beta1.QueryOwnerResponse';
/**
 * Destructures the fields of a {@link CosmosNftQuerySupplyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 */
export const destructCosmosNftQuerySupplyRequest = (g_struct) => [g_struct.class_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_SUPPLY_REQUEST = '/cosmos.nft.v1beta1.QuerySupplyRequest';
/**
 * Destructures the fields of a {@link CosmosNftQuerySupplyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount - the number of all NFTs from the given class
 */
export const destructCosmosNftQuerySupplyResponse = (g_struct) => [g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_SUPPLY_RESPONSE = '/cosmos.nft.v1beta1.QuerySupplyResponse';
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: owner - the owner address of the nft
 *   - 2: pagination - defines an optional pagination for the request.
 */
export const destructCosmosNftQueryNFTsRequest = (g_struct) => [g_struct.class_id, g_struct.owner, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_TS_REQUEST = '/cosmos.nft.v1beta1.QueryNFTsRequest';
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: nfts - NFT defines the NFT
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosNftQueryNFTsResponse = (g_struct) => [g_struct.nfts, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_TS_RESPONSE = '/cosmos.nft.v1beta1.QueryNFTsResponse';
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the NFT
 */
export const destructCosmosNftQueryNFTRequest = (g_struct) => [g_struct.class_id, g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_T_REQUEST = '/cosmos.nft.v1beta1.QueryNFTRequest';
/**
 * Destructures the fields of a {@link CosmosNftQueryNFTResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: nft - owner is the owner address of the nft
 */
export const destructCosmosNftQueryNFTResponse = (g_struct) => [g_struct.nft];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_N_F_T_RESPONSE = '/cosmos.nft.v1beta1.QueryNFTResponse';
/**
 * Destructures the fields of a {@link CosmosNftQueryClassRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 */
export const destructCosmosNftQueryClassRequest = (g_struct) => [g_struct.class_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASS_REQUEST = '/cosmos.nft.v1beta1.QueryClassRequest';
/**
 * Destructures the fields of a {@link CosmosNftQueryClassResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class - defines the class of the nft type.
 */
export const destructCosmosNftQueryClassResponse = (g_struct) => [g_struct.class];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASS_RESPONSE = '/cosmos.nft.v1beta1.QueryClassResponse';
/**
 * Destructures the fields of a {@link CosmosNftQueryClassesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export const destructCosmosNftQueryClassesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASSES_REQUEST = '/cosmos.nft.v1beta1.QueryClassesRequest';
/**
 * Destructures the fields of a {@link CosmosNftQueryClassesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: classes - class defines the class of the nft type.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosNftQueryClassesResponse = (g_struct) => [g_struct.classes, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_QUERY_CLASSES_RESPONSE = '/cosmos.nft.v1beta1.QueryClassesResponse';
//# sourceMappingURL=query.js.map