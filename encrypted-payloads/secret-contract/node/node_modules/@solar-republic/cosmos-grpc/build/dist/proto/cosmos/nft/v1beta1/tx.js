import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `MsgSend` protobuf message: represents a message to send a nft from one account to another account.
 * @param si_class - `class_id`: defines the unique identifier of the nft classification, similar to the contract address of ERC721
 * @param s_id - `id`: defines the unique identification of nft
 * @param sa_sender - `sender`: the address of the owner of nft
 * @param sa_receiver - `receiver`: the receiver address of nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftMsgSend = (si_class, s_id, sa_sender, sa_receiver) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(s_id) // string id = 2
    .s(sa_sender) // string sender = 3
    .s(sa_receiver) // string receiver = 4
    .o;
/**
 * Encodes a `MsgSendResponse` protobuf message: defines the Msg/Send response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftMsgSendResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf Send message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftMsgSend}
 */
export const decodeCosmosNftMsgSend = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf Send message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftMsgSendResponse}
 */
export const decodeCosmosNftMsgSendResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmosNftMsgSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - defines the unique identifier of the nft classification, similar to the contract address of ERC721
 *   - 1: id - defines the unique identification of nft
 *   - 2: sender - the address of the owner of nft
 *   - 3: receiver - the receiver address of nft
 */
export const destructCosmosNftMsgSend = (g_struct) => [g_struct.class_id, g_struct.id, g_struct.sender, g_struct.receiver];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_MSG_SEND = '/cosmos.nft.v1beta1.MsgSend';
/**
 * Destructures the fields of a {@link CosmosNftMsgSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosNftMsgSendResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_MSG_SEND_RESPONSE = '/cosmos.nft.v1beta1.MsgSendResponse';
//# sourceMappingURL=tx.js.map