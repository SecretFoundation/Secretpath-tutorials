import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosOrmModuleSchemaDescriptor = Encoded<'/cosmos.orm.v1alpha1.ModuleSchemaDescriptor'>;
export type EncodedCosmosOrmModuleSchemaDescriptorFileEntry = Encoded<'/cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry'>;
/**
 * Encodes a `ModuleSchemaDescriptor` protobuf message: describe's a module's ORM schema.
 * @param a_schema_files - `schema_file`:
 * @param atu8_prefix - `prefix`: an optional prefix that precedes all keys in this module's store.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmModuleSchemaDescriptor: (a_schema_files?: Opt<Encoded<'/cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry'>[]>, atu8_prefix?: Opt<Uint8Array>) => EncodedCosmosOrmModuleSchemaDescriptor;
/**
 * Encodes a `FileEntry` protobuf message:
 * @param n_id - `id`:
 * @param s_proto_file_name - `proto_file_name`:
 * @param xc_storage_type - `storage_type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmModuleSchemaDescriptorFileEntry: (n_id?: Opt<number>, s_proto_file_name?: Opt<string>, xc_storage_type?: Opt<ProtoEnumCosmosOrmStorageType>) => EncodedCosmosOrmModuleSchemaDescriptorFileEntry;
/**
 * A decoded protobuf ModuleSchemaDescriptor message
 *
 * Tuple where:
 *   - 0: schema_file -
 *   - 1: prefix - an optional prefix that precedes all keys in this module's store.
 */
export type DecodedCosmosOrmModuleSchemaDescriptor = [
    a_schema_file?: DecodedCosmosOrmModuleSchemaDescriptorFileEntry[],
    atu8_prefix?: Uint8Array
];
/**
 * Decodes a protobuf ModuleSchemaDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmModuleSchemaDescriptor}
 */
export declare const decodeCosmosOrmModuleSchemaDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosOrmModuleSchemaDescriptor;
/**
 * A decoded protobuf FileEntry message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: proto_file_name -
 *   - 2: storage_type -
 */
export type DecodedCosmosOrmModuleSchemaDescriptorFileEntry = [
    n_id?: number,
    s_proto_file_name?: string,
    xc_storage_type?: ProtoEnumCosmosOrmStorageType
];
/**
 * Decodes a protobuf FileEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmModuleSchemaDescriptorFileEntry}
 */
export declare const decodeCosmosOrmModuleSchemaDescriptorFileEntry: (atu8_payload: Uint8Array) => DecodedCosmosOrmModuleSchemaDescriptorFileEntry;
/**
 * Destructures the fields of a {@link CosmosOrmModuleSchemaDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: schema_file -
 *   - 1: prefix - an optional prefix that precedes all keys in this module's store.
 */
export declare const destructCosmosOrmModuleSchemaDescriptor: (g_struct: CosmosOrmModuleSchemaDescriptor) => [schema_file?: CosmosOrmModuleSchemaDescriptorFileEntry[], prefix?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_MODULE_SCHEMA_DESCRIPTOR = "/cosmos.orm.v1alpha1.ModuleSchemaDescriptor";
/**
 * JSON serialization of `cosmos.orm.v1alpha1.ModuleSchemaDescriptor` - describe's a module's ORM schema.
 */
export type CosmosOrmModuleSchemaDescriptor = {
    schema_file?: CosmosOrmModuleSchemaDescriptorFileEntry[] | undefined;
    prefix?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmModuleSchemaDescriptorFileEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: proto_file_name -
 *   - 2: storage_type -
 */
export declare const destructCosmosOrmModuleSchemaDescriptorFileEntry: (g_struct: CosmosOrmModuleSchemaDescriptorFileEntry) => [id?: number, proto_file_name?: string, storage_type?: JsonEnumCosmosOrmStorageType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_MODULE_SCHEMA_DESCRIPTOR_FILE_ENTRY = "/cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry";
/**
 * JSON serialization of `cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry` -
 */
export type CosmosOrmModuleSchemaDescriptorFileEntry = {
    id?: number | undefined;
    proto_file_name?: string | undefined;
    storage_type?: JsonEnumCosmosOrmStorageType | undefined;
};
/**
 * Protobuf enum value for `cosmos.orm.v1alpha1.StorageType`.
 *
 * **STORAGE_TYPE_DEFAULT_UNSPECIFIED** - indicates the persistent storage where all data is stored in the regular Merkle-tree backed KV-store.
 *
 * Belongs to enum type {@link ProtoEnumCosmosOrmStorageType}
 */
export declare const XC_PROTO_COSMOS_ORM_STORAGE_TYPE_DEFAULT_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.orm.v1alpha1.StorageType`.
 *
 * **STORAGE_TYPE_DEFAULT_UNSPECIFIED** - indicates the persistent storage where all data is stored in the regular Merkle-tree backed KV-store.
 *
 * Belongs to enum type {@link JsonEnumCosmosOrmStorageType}
 */
export declare const SI_JSON_COSMOS_ORM_STORAGE_TYPE_DEFAULT_UNSPECIFIED = "STORAGE_TYPE_DEFAULT_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.orm.v1alpha1.StorageType`.
 *
 * **STORAGE_TYPE_MEMORY** - indicates in-memory storage that will be reloaded every time an app restarts. Tables with this type of storage will by default be ignored when importing and exporting a module's state from JSON.
 *
 * Belongs to enum type {@link ProtoEnumCosmosOrmStorageType}
 */
export declare const XC_PROTO_COSMOS_ORM_STORAGE_TYPE_MEMORY = 1;
/**
 * JSON enum value for `cosmos.orm.v1alpha1.StorageType`.
 *
 * **STORAGE_TYPE_MEMORY** - indicates in-memory storage that will be reloaded every time an app restarts. Tables with this type of storage will by default be ignored when importing and exporting a module's state from JSON.
 *
 * Belongs to enum type {@link JsonEnumCosmosOrmStorageType}
 */
export declare const SI_JSON_COSMOS_ORM_STORAGE_TYPE_MEMORY = "STORAGE_TYPE_MEMORY";
/**
 * Protobuf enum value for `cosmos.orm.v1alpha1.StorageType`.
 *
 * **STORAGE_TYPE_TRANSIENT** - indicates transient storage that is reset at the end of every block. Tables with this type of storage will by default be ignored when importing and exporting a module's state from JSON.
 *
 * Belongs to enum type {@link ProtoEnumCosmosOrmStorageType}
 */
export declare const XC_PROTO_COSMOS_ORM_STORAGE_TYPE_TRANSIENT = 2;
/**
 * JSON enum value for `cosmos.orm.v1alpha1.StorageType`.
 *
 * **STORAGE_TYPE_TRANSIENT** - indicates transient storage that is reset at the end of every block. Tables with this type of storage will by default be ignored when importing and exporting a module's state from JSON.
 *
 * Belongs to enum type {@link JsonEnumCosmosOrmStorageType}
 */
export declare const SI_JSON_COSMOS_ORM_STORAGE_TYPE_TRANSIENT = "STORAGE_TYPE_TRANSIENT";
/**
 * Raw protobuf enum values for `cosmos.orm.v1alpha1.StorageType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_ORM_STORAGE_TYPE_DEFAULT_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_ORM_STORAGE_TYPE_MEMORY}
 *   - {@link XC_PROTO_COSMOS_ORM_STORAGE_TYPE_TRANSIENT}
 */
export type ProtoEnumCosmosOrmStorageType = typeof XC_PROTO_COSMOS_ORM_STORAGE_TYPE_DEFAULT_UNSPECIFIED | typeof XC_PROTO_COSMOS_ORM_STORAGE_TYPE_MEMORY | typeof XC_PROTO_COSMOS_ORM_STORAGE_TYPE_TRANSIENT;
/**
 * JSON enum values for `cosmos.orm.v1alpha1.StorageType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_ORM_STORAGE_TYPE_DEFAULT_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_ORM_STORAGE_TYPE_MEMORY}
 *   - {@link SI_JSON_COSMOS_ORM_STORAGE_TYPE_TRANSIENT}
 */
export type JsonEnumCosmosOrmStorageType = typeof SI_JSON_COSMOS_ORM_STORAGE_TYPE_DEFAULT_UNSPECIFIED | typeof SI_JSON_COSMOS_ORM_STORAGE_TYPE_MEMORY | typeof SI_JSON_COSMOS_ORM_STORAGE_TYPE_TRANSIENT;
/**
 * Maps a protobuf enum int value for `cosmos.orm.v1alpha1.StorageType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosOrmStorageType: Record<ProtoEnumCosmosOrmStorageType, JsonEnumCosmosOrmStorageType>;
/**
 * Maps a JSON enum string value for `cosmos.orm.v1alpha1.StorageType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosOrmStorageType: Record<JsonEnumCosmosOrmStorageType, ProtoEnumCosmosOrmStorageType>;
