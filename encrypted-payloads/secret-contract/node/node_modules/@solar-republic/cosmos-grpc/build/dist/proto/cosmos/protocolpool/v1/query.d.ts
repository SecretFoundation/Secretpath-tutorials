/// <reference types="node" />
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin } from '../../base/v1beta1/coin.js';
export type EncodedCosmosProtocolpoolQueryCommunityPoolRequest = Encoded<'/cosmos.protocolpool.v1.QueryCommunityPoolRequest'>;
export type EncodedCosmosProtocolpoolQueryCommunityPoolResponse = Encoded<'/cosmos.protocolpool.v1.QueryCommunityPoolResponse'>;
/**
 * Queries the community pool coins.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: pool - defines community pool's coins.
 */
export declare const queryCosmosProtocolpoolCommunityPool: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosProtocolpoolQueryCommunityPoolResponse>>;
/**
 * Encodes a `QueryCommunityPoolRequest` protobuf message: the request type for the Query/CommunityPool RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosProtocolpoolQueryCommunityPoolRequest: () => EncodedCosmosProtocolpoolQueryCommunityPoolRequest;
/**
 * Encodes a `QueryCommunityPoolResponse` protobuf message: the response type for the Query/CommunityPool RPC method.
 * @param a_pools - `pool`: defines community pool's coins.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosProtocolpoolQueryCommunityPoolResponse: (a_pools?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>) => EncodedCosmosProtocolpoolQueryCommunityPoolResponse;
/**
 * A decoded protobuf QueryCommunityPoolRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosProtocolpoolQueryCommunityPoolRequest = [];
/**
 * Decodes a protobuf QueryCommunityPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolQueryCommunityPoolRequest}
 */
export declare const decodeCosmosProtocolpoolQueryCommunityPoolRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryCommunityPool message
 *
 * Alias for: pool - defines community pool's coins.
 */
export type DecodedCosmosProtocolpoolQueryCommunityPoolResponse = [
    a_pool?: DecodedCosmosBaseDecCoin[]
];
/**
 * Decodes a protobuf QueryCommunityPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolQueryCommunityPoolResponse}
 */
export declare const decodeCosmosProtocolpoolQueryCommunityPoolResponse: (atu8_payload: Uint8Array) => DecodedCosmosProtocolpoolQueryCommunityPoolResponse;
/**
 * Destructures the fields of a {@link CosmosProtocolpoolQueryCommunityPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosProtocolpoolQueryCommunityPoolRequest: (g_struct: CosmosProtocolpoolQueryCommunityPoolRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_QUERY_COMMUNITY_POOL_REQUEST = "/cosmos.protocolpool.v1.QueryCommunityPoolRequest";
/**
 * JSON serialization of `cosmos.protocolpool.v1.QueryCommunityPoolRequest` - the request type for the Query/CommunityPool RPC method.
 */
export type CosmosProtocolpoolQueryCommunityPoolRequest = {};
/**
 * Destructures the fields of a {@link CosmosProtocolpoolQueryCommunityPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - defines community pool's coins.
 */
export declare const destructCosmosProtocolpoolQueryCommunityPoolResponse: (g_struct: CosmosProtocolpoolQueryCommunityPoolResponse) => [pool?: CosmosBaseDecCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_QUERY_COMMUNITY_POOL_RESPONSE = "/cosmos.protocolpool.v1.QueryCommunityPoolResponse";
/**
 * JSON serialization of `cosmos.protocolpool.v1.QueryCommunityPoolResponse` - the response type for the Query/CommunityPool RPC method.
 */
export type CosmosProtocolpoolQueryCommunityPoolResponse = {
    pool?: CosmosBaseDecCoin[] | undefined;
};
