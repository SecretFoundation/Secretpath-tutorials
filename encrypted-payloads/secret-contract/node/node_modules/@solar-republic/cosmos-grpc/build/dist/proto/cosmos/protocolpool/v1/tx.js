import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `MsgFundCommunityPool` protobuf message: allows an account to directly fund the community pool.
 * @param a_amounts - `amount`:
 * @param sa_depositor - `depositor`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosProtocolpoolMsgFundCommunityPool = (a_amounts, sa_depositor) => Protobuf() // ...
    .B(coins(a_amounts)) // Coin[] amount = 1
    .s(sa_depositor) // string depositor = 2
    .o;
/**
 * Encodes a `MsgFundCommunityPoolResponse` protobuf message: defines the Msg/FundCommunityPool response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosProtocolpoolMsgFundCommunityPoolResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCommunityPoolSpend` protobuf message: defines a message for sending tokens from the community pool to another account. This message is typically executed via a governance proposal with the governance module being the executing authority. Since: cosmos-sdk 0.50
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param sa_recipient - `recipient`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosProtocolpoolMsgCommunityPoolSpend = (s_authority, sa_recipient, a_amounts) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .s(sa_recipient) // string recipient = 2
    .B(coins(a_amounts)) // Coin[] amount = 3
    .o;
/**
 * Encodes a `MsgCommunityPoolSpendResponse` protobuf message: defines the response to executing a MsgCommunityPoolSpend message. Since: cosmos-sdk 0.50
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosProtocolpoolMsgCommunityPoolSpendResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf FundCommunityPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolMsgFundCommunityPool}
 */
export const decodeCosmosProtocolpoolMsgFundCommunityPool = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5], [decode_coin]);
/**
 * Decodes a protobuf FundCommunityPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolMsgFundCommunityPoolResponse}
 */
export const decodeCosmosProtocolpoolMsgFundCommunityPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CommunityPoolSpend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolMsgCommunityPoolSpend}
 */
export const decodeCosmosProtocolpoolMsgCommunityPoolSpend = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf CommunityPoolSpend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolMsgCommunityPoolSpendResponse}
 */
export const decodeCosmosProtocolpoolMsgCommunityPoolSpendResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmosProtocolpoolMsgFundCommunityPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 *   - 1: depositor -
 */
export const destructCosmosProtocolpoolMsgFundCommunityPool = (g_struct) => [g_struct.amount, g_struct.depositor];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_MSG_FUND_COMMUNITY_POOL = '/cosmos.protocolpool.v1.MsgFundCommunityPool';
/**
 * Destructures the fields of a {@link CosmosProtocolpoolMsgFundCommunityPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosProtocolpoolMsgFundCommunityPoolResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_MSG_FUND_COMMUNITY_POOL_RESPONSE = '/cosmos.protocolpool.v1.MsgFundCommunityPoolResponse';
/**
 * Destructures the fields of a {@link CosmosProtocolpoolMsgCommunityPoolSpend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: recipient -
 *   - 2: amount -
 */
export const destructCosmosProtocolpoolMsgCommunityPoolSpend = (g_struct) => [g_struct.authority, g_struct.recipient, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_MSG_COMMUNITY_POOL_SPEND = '/cosmos.protocolpool.v1.MsgCommunityPoolSpend';
/**
 * Destructures the fields of a {@link CosmosProtocolpoolMsgCommunityPoolSpendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosProtocolpoolMsgCommunityPoolSpendResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_MSG_COMMUNITY_POOL_SPEND_RESPONSE = '/cosmos.protocolpool.v1.MsgCommunityPoolSpendResponse';
//# sourceMappingURL=tx.js.map