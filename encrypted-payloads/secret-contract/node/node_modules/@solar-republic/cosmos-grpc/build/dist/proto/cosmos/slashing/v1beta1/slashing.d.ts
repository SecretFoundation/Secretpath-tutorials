import type { WeakInt64Str, WeakAccountAddr, CwInt64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr, WeakDurationStr } from '../../../../api/types.js';
export type EncodedCosmosSlashingValidatorSigningInfo = Encoded<'/cosmos.slashing.v1beta1.ValidatorSigningInfo'>;
export type EncodedCosmosSlashingParams = Encoded<'/cosmos.slashing.v1beta1.Params'>;
/**
 * Encodes a `ValidatorSigningInfo` protobuf message: defines a validator's signing info for monitoring their liveness activity.
 * @param sa_address - `address`:
 * @param sg_start_height - `start_height`: Height at which validator was first a candidate OR was un-jailed
 * @param sg_index_offset - `index_offset`: Index which is incremented every time a validator is bonded in a block and _may_ have signed a pre-commit or not. This in conjunction with the signed_blocks_window param determines the index in the missed block bitmap.
 * @param xt_jailed_until - `jailed_until`: Timestamp until which the validator is jailed due to liveness downtime.
 * @param b_tombstoned - `tombstoned`: Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehavior.
 * @param sg_missed_blocks_counter - `missed_blocks_counter`: A counter of missed (unsigned) blocks. It is used to avoid unnecessary reads in the missed block bitmap.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosSlashingValidatorSigningInfo: (sa_address?: Opt<WeakAccountAddr>, sg_start_height?: Opt<WeakInt64Str>, sg_index_offset?: Opt<WeakInt64Str>, xt_jailed_until?: Opt<number>, b_tombstoned?: Opt<boolean | 0 | 1>, sg_missed_blocks_counter?: Opt<WeakInt64Str>) => EncodedCosmosSlashingValidatorSigningInfo;
/**
 * Encodes a `Params` protobuf message: represents the parameters used for by the slashing module.
 * @param sg_signed_blocks_window - `signed_blocks_window`:
 * @param atu8_min_signed_per_window - `min_signed_per_window`:
 * @param xt_downtime_jail_duration - `downtime_jail_duration`:
 * @param atu8_slash_fraction_double_sign - `slash_fraction_double_sign`:
 * @param atu8_slash_fraction_downtime - `slash_fraction_downtime`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosSlashingParams: (sg_signed_blocks_window?: Opt<WeakInt64Str>, atu8_min_signed_per_window?: Opt<Uint8Array>, xt_downtime_jail_duration?: Opt<number>, atu8_slash_fraction_double_sign?: Opt<Uint8Array>, atu8_slash_fraction_downtime?: Opt<Uint8Array>) => EncodedCosmosSlashingParams;
/**
 * A decoded protobuf ValidatorSigningInfo message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: start_height - Height at which validator was first a candidate OR was un-jailed
 *   - 2: index_offset - Index which is incremented every time a validator is bonded in a block and _may_ have signed a pre-commit or not. This in conjunction with the signed_blocks_window param determines the index in the missed block bitmap.
 *   - 3: jailed_until - Timestamp until which the validator is jailed due to liveness downtime.
 *   - 4: tombstoned - Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehavior.
 *   - 5: missed_blocks_counter - A counter of missed (unsigned) blocks. It is used to avoid unnecessary reads in the missed block bitmap.
 */
export type DecodedCosmosSlashingValidatorSigningInfo = [
    sa_address?: CwAccountAddr,
    sg_start_height?: CwInt64,
    sg_index_offset?: CwInt64,
    a_jailed_until?: [
        string,
        number
    ],
    b_tombstoned?: 0 | 1,
    sg_missed_blocks_counter?: CwInt64
];
/**
 * Decodes a protobuf ValidatorSigningInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosSlashingValidatorSigningInfo}
 */
export declare const decodeCosmosSlashingValidatorSigningInfo: (atu8_payload: Uint8Array) => DecodedCosmosSlashingValidatorSigningInfo;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: signed_blocks_window -
 *   - 1: min_signed_per_window -
 *   - 2: downtime_jail_duration -
 *   - 3: slash_fraction_double_sign -
 *   - 4: slash_fraction_downtime -
 */
export type DecodedCosmosSlashingParams = [
    sg_signed_blocks_window?: CwInt64,
    atu8_min_signed_per_window?: Uint8Array,
    a_downtime_jail_duration?: [
        string,
        number
    ],
    atu8_slash_fraction_double_sign?: Uint8Array,
    atu8_slash_fraction_downtime?: Uint8Array
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosSlashingParams}
 */
export declare const decodeCosmosSlashingParams: (atu8_payload: Uint8Array) => DecodedCosmosSlashingParams;
/**
 * Destructures the fields of a {@link CosmosSlashingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signed_blocks_window -
 *   - 1: min_signed_per_window -
 *   - 2: downtime_jail_duration -
 *   - 3: slash_fraction_double_sign -
 *   - 4: slash_fraction_downtime -
 */
export declare const destructCosmosSlashingParams: (g_struct: CosmosSlashingParams) => [signed_blocks_window?: CwInt64, min_signed_per_window?: Uint8Array, downtime_jail_duration?: number, slash_fraction_double_sign?: Uint8Array, slash_fraction_downtime?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_SLASHING_PARAMS = "/cosmos.slashing.v1beta1.Params";
/**
 * JSON serialization of `cosmos.slashing.v1beta1.Params` - represents the parameters used for by the slashing module.
 */
export type CosmosSlashingParams = {
    signed_blocks_window?: CwInt64 | undefined;
    min_signed_per_window?: CwBase64 | undefined;
    downtime_jail_duration?: WeakDurationStr | undefined;
    slash_fraction_double_sign?: CwBase64 | undefined;
    slash_fraction_downtime?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosSlashingValidatorSigningInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: start_height - Height at which validator was first a candidate OR was un-jailed
 *   - 2: index_offset - Index which is incremented every time a validator is bonded in a block and _may_ have signed a pre-commit or not. This in conjunction with the signed_blocks_window param determines the index in the missed block bitmap.
 *   - 3: jailed_until - Timestamp until which the validator is jailed due to liveness downtime.
 *   - 4: tombstoned - Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehavior.
 *   - 5: missed_blocks_counter - A counter of missed (unsigned) blocks. It is used to avoid unnecessary reads in the missed block bitmap.
 */
export declare const destructCosmosSlashingValidatorSigningInfo: (g_struct: CosmosSlashingValidatorSigningInfo) => [address?: CwAccountAddr, start_height?: CwInt64, index_offset?: CwInt64, jailed_until?: number, tombstoned?: boolean, missed_blocks_counter?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_SLASHING_VALIDATOR_SIGNING_INFO = "/cosmos.slashing.v1beta1.ValidatorSigningInfo";
/**
 * JSON serialization of `cosmos.slashing.v1beta1.ValidatorSigningInfo` - defines a validator's signing info for monitoring their liveness activity.
 */
export type CosmosSlashingValidatorSigningInfo = {
    address?: CwAccountAddr | undefined;
    start_height?: CwInt64 | undefined;
    index_offset?: CwInt64 | undefined;
    jailed_until?: WeakTimestampStr | undefined;
    tombstoned?: boolean | undefined;
    missed_blocks_counter?: CwInt64 | undefined;
};
