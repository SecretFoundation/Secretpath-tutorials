import { parse_duration, parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `ValidatorSigningInfo` protobuf message: defines a validator's signing info for monitoring their liveness activity.
 * @param sa_address - `address`:
 * @param sg_start_height - `start_height`: Height at which validator was first a candidate OR was un-jailed
 * @param sg_index_offset - `index_offset`: Index which is incremented every time a validator is bonded in a block and _may_ have signed a pre-commit or not. This in conjunction with the signed_blocks_window param determines the index in the missed block bitmap.
 * @param xt_jailed_until - `jailed_until`: Timestamp until which the validator is jailed due to liveness downtime.
 * @param b_tombstoned - `tombstoned`: Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehavior.
 * @param sg_missed_blocks_counter - `missed_blocks_counter`: A counter of missed (unsigned) blocks. It is used to avoid unnecessary reads in the missed block bitmap.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosSlashingValidatorSigningInfo = (sa_address, sg_start_height, sg_index_offset, xt_jailed_until, b_tombstoned, sg_missed_blocks_counter) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .g(sg_start_height) // int32 start_height = 2
    .g(sg_index_offset) // int32 index_offset = 3
    .b(temporal(xt_jailed_until)) // Timestamp jailed_until = 4
    .v(b_tombstoned) // boolean tombstoned = 5
    .g(sg_missed_blocks_counter) // int32 missed_blocks_counter = 6
    .o;
/**
 * Encodes a `Params` protobuf message: represents the parameters used for by the slashing module.
 * @param sg_signed_blocks_window - `signed_blocks_window`:
 * @param atu8_min_signed_per_window - `min_signed_per_window`:
 * @param xt_downtime_jail_duration - `downtime_jail_duration`:
 * @param atu8_slash_fraction_double_sign - `slash_fraction_double_sign`:
 * @param atu8_slash_fraction_downtime - `slash_fraction_downtime`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosSlashingParams = (sg_signed_blocks_window, atu8_min_signed_per_window, xt_downtime_jail_duration, atu8_slash_fraction_double_sign, atu8_slash_fraction_downtime) => Protobuf() // ...
    .g(sg_signed_blocks_window) // int32 signed_blocks_window = 1
    .b(atu8_min_signed_per_window) // bytes min_signed_per_window = 2
    .b(temporal(xt_downtime_jail_duration)) // Duration downtime_jail_duration = 3
    .b(atu8_slash_fraction_double_sign) // bytes slash_fraction_double_sign = 4
    .b(atu8_slash_fraction_downtime) // bytes slash_fraction_downtime = 5
    .o;
/**
 * Decodes a protobuf ValidatorSigningInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosSlashingValidatorSigningInfo}
 */
export const decodeCosmosSlashingValidatorSigningInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, [3, 1], 1, 3], [0, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosSlashingParams}
 */
export const decodeCosmosSlashingParams = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, [3, 1], 1, 1], [0, 0, decode_temporal]);
/**
 * Destructures the fields of a {@link CosmosSlashingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signed_blocks_window -
 *   - 1: min_signed_per_window -
 *   - 2: downtime_jail_duration -
 *   - 3: slash_fraction_double_sign -
 *   - 4: slash_fraction_downtime -
 */
export const destructCosmosSlashingParams = (g_struct) => [g_struct.signed_blocks_window, safe_base64_to_bytes(g_struct.min_signed_per_window), parse_duration(g_struct.downtime_jail_duration), safe_base64_to_bytes(g_struct.slash_fraction_double_sign), safe_base64_to_bytes(g_struct.slash_fraction_downtime)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_SLASHING_PARAMS = '/cosmos.slashing.v1beta1.Params';
/**
 * Destructures the fields of a {@link CosmosSlashingValidatorSigningInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: start_height - Height at which validator was first a candidate OR was un-jailed
 *   - 2: index_offset - Index which is incremented every time a validator is bonded in a block and _may_ have signed a pre-commit or not. This in conjunction with the signed_blocks_window param determines the index in the missed block bitmap.
 *   - 3: jailed_until - Timestamp until which the validator is jailed due to liveness downtime.
 *   - 4: tombstoned - Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehavior.
 *   - 5: missed_blocks_counter - A counter of missed (unsigned) blocks. It is used to avoid unnecessary reads in the missed block bitmap.
 */
export const destructCosmosSlashingValidatorSigningInfo = (g_struct) => [g_struct.address, g_struct.start_height, g_struct.index_offset, parse_timestamp(g_struct.jailed_until), g_struct.tombstoned, g_struct.missed_blocks_counter];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_SLASHING_VALIDATOR_SIGNING_INFO = '/cosmos.slashing.v1beta1.ValidatorSigningInfo';
//# sourceMappingURL=slashing.js.map