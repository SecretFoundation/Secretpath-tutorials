/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
/**
 * Encodes a `Module` protobuf message: the config object of the staking module.
 * @param a_hooks_orders - `hooks_order`: specifies the order of staking hooks and should be a list of module names which provide a staking hooks instance. If no order is provided, then hooks will be applied in alphabetical order of module names.
 * @param s_authority - `authority`: defines the custom module authority. If not set, defaults to the governance module.
 * @param s_bech32_prefix_validator - `bech32_prefix_validator`: the bech32 validator prefix for the app.
 * @param s_bech32_prefix_consensus - `bech32_prefix_consensus`: the bech32 consensus node prefix for the app.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingModuleModule = (a_hooks_orders, s_authority, s_bech32_prefix_validator, s_bech32_prefix_consensus) => Protobuf() // ...
    .S(a_hooks_orders) // string[] hooks_order = 1
    .s(s_authority) // string authority = 2
    .s(s_bech32_prefix_validator) // string bech32_prefix_validator = 3
    .s(s_bech32_prefix_consensus) // string bech32_prefix_consensus = 4
    .o;
/**
 * Decodes a protobuf Module message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingModuleModule}
 */
export const decodeCosmosStakingModuleModule = (atu8_payload) => decode_protobuf(atu8_payload, [4, 5, 5, 5]);
/**
 * Destructures the fields of a {@link CosmosStakingModuleModule} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hooks_order - specifies the order of staking hooks and should be a list of module names which provide a staking hooks instance. If no order is provided, then hooks will be applied in alphabetical order of module names.
 *   - 1: authority - defines the custom module authority. If not set, defaults to the governance module.
 *   - 2: bech32_prefix_validator - the bech32 validator prefix for the app.
 *   - 3: bech32_prefix_consensus - the bech32 consensus node prefix for the app.
 */
export const destructCosmosStakingModuleModule = (g_struct) => [g_struct.hooks_order, g_struct.authority, g_struct.bech32_prefix_validator, g_struct.bech32_prefix_consensus];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_MODULE_MODULE = '/cosmos.staking.module.v1.Module';
//# sourceMappingURL=module.js.map