import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type AnyCosmosStakingStakeAuthorization = Encoded<'cosmos.authz.v1beta1.Authorization'>;
export type EncodedCosmosStakingStakeAuthorization = Encoded<'/cosmos.staking.v1beta1.StakeAuthorization' | 'cosmos.authz.v1beta1.Authorization'>;
export type EncodedCosmosStakingStakeAuthorizationValidators = Encoded<'/cosmos.staking.v1beta1.StakeAuthorization.Validators'>;
/**
 * Encodes a `StakeAuthorization` protobuf message wrapped in the `Any` container: defines authorization for delegate/undelegate/redelegate. Since: cosmos-sdk 0.43
 * @param a_max_tokens - `max_tokens`: specifies the maximum amount of tokens can be delegate to a validator. If it is empty, there is no spend limit and any amount of coins can be delegated.
 * @param g_allow_list - `allow_list`: specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's account.
 * @param g_deny_list - `deny_list`: specifies list of validator addresses to whom grantee can not delegate tokens.
 * @param xc_authorization_type - `authorization_type`: defines one of AuthorizationType.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyStakeAuthorization: (a_max_tokens?: Opt<SlimCoin>, atu8_allow_list?: Opt<Encoded<'/cosmos.staking.v1beta1.StakeAuthorization.Validators'>>, atu8_deny_list?: Opt<Encoded<'/cosmos.staking.v1beta1.StakeAuthorization.Validators'>>, xc_authorization_type?: Opt<ProtoEnumCosmosStakingAuthorizationType>) => AnyCosmosStakingStakeAuthorization;
/**
 * Encodes a `StakeAuthorization` protobuf message: defines authorization for delegate/undelegate/redelegate. Since: cosmos-sdk 0.43
 * @param a_max_tokens - `max_tokens`: specifies the maximum amount of tokens can be delegate to a validator. If it is empty, there is no spend limit and any amount of coins can be delegated.
 * @param g_allow_list - `allow_list`: specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's account.
 * @param g_deny_list - `deny_list`: specifies list of validator addresses to whom grantee can not delegate tokens.
 * @param xc_authorization_type - `authorization_type`: defines one of AuthorizationType.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingStakeAuthorization: (a_max_tokens?: Opt<SlimCoin>, atu8_allow_list?: Opt<Encoded<'/cosmos.staking.v1beta1.StakeAuthorization.Validators'>>, atu8_deny_list?: Opt<Encoded<'/cosmos.staking.v1beta1.StakeAuthorization.Validators'>>, xc_authorization_type?: Opt<ProtoEnumCosmosStakingAuthorizationType>) => EncodedCosmosStakingStakeAuthorization;
/**
 * Encodes a `Validators` protobuf message:
 * @param a_addresses - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingStakeAuthorizationValidators: (a_addresses?: Opt<WeakAccountAddr[]>) => EncodedCosmosStakingStakeAuthorizationValidators;
/**
 * A decoded protobuf StakeAuthorization message
 *
 * Tuple where:
 *   - 0: max_tokens - specifies the maximum amount of tokens can be delegate to a validator. If it is empty, there is no spend limit and any amount of coins can be delegated.
 *   - 1: allow_list - specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's account.
 *   - 2: deny_list - specifies list of validator addresses to whom grantee can not delegate tokens.
 *   - 3: authorization_type - defines one of AuthorizationType.
 */
export type DecodedCosmosStakingStakeAuthorization = [
    a_max_tokens?: [
        string,
        string
    ],
    a_allow_list?: DecodedCosmosStakingStakeAuthorizationValidators,
    a_deny_list?: DecodedCosmosStakingStakeAuthorizationValidators,
    xc_authorization_type?: ProtoEnumCosmosStakingAuthorizationType
];
/**
 * Decodes a protobuf StakeAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingStakeAuthorization}
 */
export declare const decodeCosmosStakingStakeAuthorization: (atu8_payload: Uint8Array) => DecodedCosmosStakingStakeAuthorization;
/**
 * A decoded protobuf Validators message
 *
 * Alias for: address -
 */
export type DecodedCosmosStakingStakeAuthorizationValidators = [
    a_addresses?: CwAccountAddr[]
];
/**
 * Decodes a protobuf Validators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingStakeAuthorizationValidators}
 */
export declare const decodeCosmosStakingStakeAuthorizationValidators: (atu8_payload: Uint8Array) => DecodedCosmosStakingStakeAuthorizationValidators;
/**
 * Destructures the fields of a {@link CosmosStakingStakeAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_tokens - specifies the maximum amount of tokens can be delegate to a validator. If it is empty, there is no spend limit and any amount of coins can be delegated.
 *   - 1: allow_list - specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's account.
 *   - 2: deny_list - specifies list of validator addresses to whom grantee can not delegate tokens.
 *   - 3: authorization_type - defines one of AuthorizationType.
 */
export declare const destructCosmosStakingStakeAuthorization: (g_struct: CosmosStakingStakeAuthorization) => [max_tokens?: CosmosBaseCoin, allow_list?: CosmosStakingStakeAuthorizationValidators, deny_list?: CosmosStakingStakeAuthorizationValidators, authorization_type?: JsonEnumCosmosStakingAuthorizationType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_STAKE_AUTHORIZATION = "/cosmos.staking.v1beta1.StakeAuthorization";
/**
 * JSON serialization of `cosmos.staking.v1beta1.StakeAuthorization` - defines authorization for delegate/undelegate/redelegate. Since: cosmos-sdk 0.43
 */
export type CosmosStakingStakeAuthorization = {
    max_tokens?: CosmosBaseCoin | undefined;
    allow_list?: CosmosStakingStakeAuthorizationValidators | undefined;
    deny_list?: CosmosStakingStakeAuthorizationValidators | undefined;
    authorization_type?: JsonEnumCosmosStakingAuthorizationType | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingStakeAuthorizationValidators} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export declare const destructCosmosStakingStakeAuthorizationValidators: (g_struct: CosmosStakingStakeAuthorizationValidators) => [address?: CwAccountAddr[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_STAKE_AUTHORIZATION_VALIDATORS = "/cosmos.staking.v1beta1.StakeAuthorization.Validators";
/**
 * JSON serialization of `cosmos.staking.v1beta1.StakeAuthorization.Validators` -
 */
export type CosmosStakingStakeAuthorizationValidators = {
    address?: CwAccountAddr[] | undefined;
};
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_UNSPECIFIED** - specifies an unknown authorization type
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingAuthorizationType}
 */
export declare const XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_UNSPECIFIED** - specifies an unknown authorization type
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingAuthorizationType}
 */
export declare const SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_UNSPECIFIED = "AUTHORIZATION_TYPE_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_DELEGATE** - defines an authorization type for Msg/Delegate
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingAuthorizationType}
 */
export declare const XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_DELEGATE = 1;
/**
 * JSON enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_DELEGATE** - defines an authorization type for Msg/Delegate
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingAuthorizationType}
 */
export declare const SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_DELEGATE = "AUTHORIZATION_TYPE_DELEGATE";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_UNDELEGATE** - defines an authorization type for Msg/Undelegate
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingAuthorizationType}
 */
export declare const XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_UNDELEGATE = 2;
/**
 * JSON enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_UNDELEGATE** - defines an authorization type for Msg/Undelegate
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingAuthorizationType}
 */
export declare const SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_UNDELEGATE = "AUTHORIZATION_TYPE_UNDELEGATE";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_REDELEGATE** - defines an authorization type for Msg/BeginRedelegate
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingAuthorizationType}
 */
export declare const XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_REDELEGATE = 3;
/**
 * JSON enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_REDELEGATE** - defines an authorization type for Msg/BeginRedelegate
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingAuthorizationType}
 */
export declare const SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_REDELEGATE = "AUTHORIZATION_TYPE_REDELEGATE";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION** - defines an authorization type for Msg/MsgCancelUnbondingDelegation
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingAuthorizationType}
 */
export declare const XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION = 4;
/**
 * JSON enum value for `cosmos.staking.v1beta1.AuthorizationType`.
 *
 * **AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION** - defines an authorization type for Msg/MsgCancelUnbondingDelegation
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingAuthorizationType}
 */
export declare const SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION = "AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION";
/**
 * Raw protobuf enum values for `cosmos.staking.v1beta1.AuthorizationType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_DELEGATE}
 *   - {@link XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_UNDELEGATE}
 *   - {@link XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_REDELEGATE}
 *   - {@link XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION}
 */
export type ProtoEnumCosmosStakingAuthorizationType = typeof XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_UNSPECIFIED | typeof XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_DELEGATE | typeof XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_UNDELEGATE | typeof XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_REDELEGATE | typeof XC_PROTO_COSMOS_STAKING_AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION;
/**
 * JSON enum values for `cosmos.staking.v1beta1.AuthorizationType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_DELEGATE}
 *   - {@link SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_UNDELEGATE}
 *   - {@link SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_REDELEGATE}
 *   - {@link SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION}
 */
export type JsonEnumCosmosStakingAuthorizationType = typeof SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_UNSPECIFIED | typeof SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_DELEGATE | typeof SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_UNDELEGATE | typeof SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_REDELEGATE | typeof SI_JSON_COSMOS_STAKING_AUTHORIZATION_TYPE_CANCEL_UNBONDING_DELEGATION;
/**
 * Maps a protobuf enum int value for `cosmos.staking.v1beta1.AuthorizationType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosStakingAuthorizationType: Record<ProtoEnumCosmosStakingAuthorizationType, JsonEnumCosmosStakingAuthorizationType>;
/**
 * Maps a JSON enum string value for `cosmos.staking.v1beta1.AuthorizationType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosStakingAuthorizationType: Record<JsonEnumCosmosStakingAuthorizationType, ProtoEnumCosmosStakingAuthorizationType>;
