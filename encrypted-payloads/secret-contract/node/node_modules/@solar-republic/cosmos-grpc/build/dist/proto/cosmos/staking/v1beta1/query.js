import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeCosmosStakingValidator, decodeCosmosStakingDelegationResponse, decodeCosmosStakingUnbondingDelegation, decodeCosmosStakingRedelegationResponse, decodeCosmosStakingHistoricalInfo, decodeCosmosStakingHistoricalRecord, decodeCosmosStakingPool, decodeCosmosStakingParams } from './staking.js';
const SR_LCD_COSMOS_STAKING_QUERY = '/cosmos/staking/v1beta1/';
/**
 * Queries all validators that match the given status. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_status - enables to query for validators matching a given status.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: validators - contains all the queried validators.
 *   - 1: pagination - contains all the queried validators.
 */
export const queryCosmosStakingValidators = restful_grpc((s_status, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'validators', {
        status: s_status,
        pagination: g_pagination,
    }]);
/**
 * Queries validator info for given validator address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export const queryCosmosStakingValidator = restful_grpc(sa_validator => [SR_LCD_COSMOS_STAKING_QUERY + 'validators/' + sa_validator]);
/**
 * Queries delegate info for given validator. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: delegation_responses - the 'delegation_responses' response property
 *   - 1: pagination - the 'delegation_responses' response property
 */
export const queryCosmosStakingValidatorDelegations = restful_grpc((sa_validator, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'validators/' + sa_validator + '/delegations', {
        pagination: g_pagination,
    }]);
/**
 * Queries unbonding delegations of a validator. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: unbonding_responses - the 'unbonding_responses' response property
 *   - 1: pagination - the 'unbonding_responses' response property
 */
export const queryCosmosStakingValidatorUnbondingDelegations = restful_grpc((sa_validator, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'validators/' + sa_validator + '/unbonding_delegations', {
        pagination: g_pagination,
    }]);
/**
 * Queries delegate info for given validator delegator pair.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: delegation_response - s defines the delegation info of a delegation.
 */
export const queryCosmosStakingDelegation = restful_grpc((sa_delegator_addr, sa_validator) => [SR_LCD_COSMOS_STAKING_QUERY + 'validators/' + sa_validator + '/delegations/' + sa_delegator_addr]);
/**
 * Queries unbonding info for given validator delegator pair.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: unbond - defines the unbonding information of a delegation.
 */
export const queryCosmosStakingUnbondingDelegation = restful_grpc((sa_delegator_addr, sa_validator) => [SR_LCD_COSMOS_STAKING_QUERY + 'validators/' + sa_validator + '/delegations/' + sa_delegator_addr + '/unbonding_delegation']);
/**
 * Queries all delegations of a given delegator address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: delegation_responses - defines all the delegations' info of a delegator.
 *   - 1: pagination - defines all the delegations' info of a delegator.
 */
export const queryCosmosStakingDelegatorDelegations = restful_grpc((sa_delegator_addr, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'delegations/' + sa_delegator_addr, {
        pagination: g_pagination,
    }]);
/**
 * Queries all unbonding delegations of a given delegator address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: unbonding_responses - the 'unbonding_responses' response property
 *   - 1: pagination - the 'unbonding_responses' response property
 */
export const queryCosmosStakingDelegatorUnbondingDelegations = restful_grpc((sa_delegator_addr, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'delegators/' + sa_delegator_addr + '/unbonding_delegations', {
        pagination: g_pagination,
    }]);
/**
 * Queries redelegations of given address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_src_validator - defines the validator address to redelegate from.
 * @param sa_dst_validator - defines the validator address to redelegate to.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: redelegation_responses - the 'redelegation_responses' response property
 *   - 1: pagination - the 'redelegation_responses' response property
 */
export const queryCosmosStakingRedelegations = restful_grpc((sa_delegator_addr, sa_src_validator, sa_dst_validator, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'delegators/' + sa_delegator_addr + '/redelegations', {
        src_validator_addr: sa_src_validator,
        dst_validator_addr: sa_dst_validator,
        pagination: g_pagination,
    }]);
/**
 * Queries all validators info for given delegator address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: validators - defines the validators' info of a delegator.
 *   - 1: pagination - defines the validators' info of a delegator.
 */
export const queryCosmosStakingDelegatorValidators = restful_grpc((sa_delegator_addr, g_pagination) => [SR_LCD_COSMOS_STAKING_QUERY + 'delegators/' + sa_delegator_addr + '/validators', {
        pagination: g_pagination,
    }]);
/**
 * Queries validator info for given delegator validator pair.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export const queryCosmosStakingDelegatorValidator = restful_grpc((sa_delegator_addr, sa_validator) => [SR_LCD_COSMOS_STAKING_QUERY + 'delegators/' + sa_delegator_addr + '/validators/' + sa_validator]);
/**
 * Queries the historical info for given height.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_height - defines at which height to query the historical info.
 * @returns a tuple where:
 *   - 0: hist - defines the historical info at the given height.
 *   - 1: historical_record - defines the historical info at the given height.
 */
export const queryCosmosStakingHistoricalInfo = restful_grpc(sg_height => [SR_LCD_COSMOS_STAKING_QUERY + 'historical_info/' + sg_height]);
/**
 * Queries the pool info.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: pool - defines the pool info.
 */
export const queryCosmosStakingPool = restful_grpc(() => [SR_LCD_COSMOS_STAKING_QUERY + 'pool']);
/**
 * Parameters queries the staking parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export const queryCosmosStakingParams = restful_grpc(() => [SR_LCD_COSMOS_STAKING_QUERY + 'params']);
/**
 * Encodes a `QueryValidatorsRequest` protobuf message: request type for Query/Validators RPC method.
 * @param s_status - `status`: enables to query for validators matching a given status.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorsRequest = (s_status, atu8_pagination) => Protobuf() // ...
    .s(s_status) // string status = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryValidatorsResponse` protobuf message: response type for the Query/Validators RPC method
 * @param a_validators - `validators`: contains all the queried validators.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorsResponse = (a_validators, atu8_pagination) => Protobuf() // ...
    .B(a_validators) // Validator[] validators = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryValidatorRequest` protobuf message: response type for the Query/Validator RPC method
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorRequest = (sa_validator) => Protobuf() // ...
    .s(sa_validator) // string validator_addr = 1
    .o;
/**
 * Encodes a `QueryValidatorResponse` protobuf message: response type for the Query/Validator RPC method
 * @param g_validator - `validator`: defines the validator info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorResponse = (atu8_validator) => Protobuf() // ...
    .b(atu8_validator) // Validator validator = 1
    .o;
/**
 * Encodes a `QueryValidatorDelegationsRequest` protobuf message: request type for the Query/ValidatorDelegations RPC method
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorDelegationsRequest = (sa_validator, atu8_pagination) => Protobuf() // ...
    .s(sa_validator) // string validator_addr = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryValidatorDelegationsResponse` protobuf message: response type for the Query/ValidatorDelegations RPC method
 * @param a_delegation_responses - `delegation_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorDelegationsResponse = (a_delegation_responses, atu8_pagination) => Protobuf() // ...
    .B(a_delegation_responses) // DelegationResponse[] delegation_responses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryValidatorUnbondingDelegationsRequest` protobuf message: required type for the Query/ValidatorUnbondingDelegations RPC method
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorUnbondingDelegationsRequest = (sa_validator, atu8_pagination) => Protobuf() // ...
    .s(sa_validator) // string validator_addr = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryValidatorUnbondingDelegationsResponse` protobuf message: response type for the Query/ValidatorUnbondingDelegations RPC method.
 * @param a_unbonding_responses - `unbonding_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryValidatorUnbondingDelegationsResponse = (a_unbonding_responses, atu8_pagination) => Protobuf() // ...
    .B(a_unbonding_responses) // UnbondingDelegation[] unbonding_responses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDelegationRequest` protobuf message: request type for the Query/Delegation RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegationRequest = (sa_delegator_addr, sa_validator) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .s(sa_validator) // string validator_addr = 2
    .o;
/**
 * Encodes a `QueryDelegationResponse` protobuf message: response type for the Query/Delegation RPC method.
 * @param g_delegation_response - `delegation_response`: s defines the delegation info of a delegation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegationResponse = (atu8_delegation_response) => Protobuf() // ...
    .b(atu8_delegation_response) // DelegationResponse delegation_response = 1
    .o;
/**
 * Encodes a `QueryUnbondingDelegationRequest` protobuf message: request type for the Query/UnbondingDelegation RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryUnbondingDelegationRequest = (sa_delegator_addr, sa_validator) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .s(sa_validator) // string validator_addr = 2
    .o;
/**
 * Encodes a `QueryUnbondingDelegationResponse` protobuf message: QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 * @param g_unbond - `unbond`: defines the unbonding information of a delegation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryUnbondingDelegationResponse = (atu8_unbond) => Protobuf() // ...
    .b(atu8_unbond) // UnbondingDelegation unbond = 1
    .o;
/**
 * Encodes a `QueryDelegatorDelegationsRequest` protobuf message: request type for the Query/DelegatorDelegations RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorDelegationsRequest = (sa_delegator_addr, atu8_pagination) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryDelegatorDelegationsResponse` protobuf message: response type for the Query/DelegatorDelegations RPC method.
 * @param a_delegation_responses - `delegation_responses`: defines all the delegations' info of a delegator.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorDelegationsResponse = (a_delegation_responses, atu8_pagination) => Protobuf() // ...
    .B(a_delegation_responses) // DelegationResponse[] delegation_responses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDelegatorUnbondingDelegationsRequest` protobuf message: request type for the Query/DelegatorUnbondingDelegations RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorUnbondingDelegationsRequest = (sa_delegator_addr, atu8_pagination) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryDelegatorUnbondingDelegationsResponse` protobuf message: QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 * @param a_unbonding_responses - `unbonding_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorUnbondingDelegationsResponse = (a_unbonding_responses, atu8_pagination) => Protobuf() // ...
    .B(a_unbonding_responses) // UnbondingDelegation[] unbonding_responses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryRedelegationsRequest` protobuf message: request type for the Query/Redelegations RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_src_validator - `src_validator_addr`: defines the validator address to redelegate from.
 * @param sa_dst_validator - `dst_validator_addr`: defines the validator address to redelegate to.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryRedelegationsRequest = (sa_delegator_addr, sa_src_validator, sa_dst_validator, atu8_pagination) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .s(sa_src_validator) // string src_validator_addr = 2
    .s(sa_dst_validator) // string dst_validator_addr = 3
    .b(atu8_pagination) // PageRequest pagination = 4
    .o;
/**
 * Encodes a `QueryRedelegationsResponse` protobuf message: response type for the Query/Redelegations RPC method.
 * @param a_redelegation_responses - `redelegation_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryRedelegationsResponse = (a_redelegation_responses, atu8_pagination) => Protobuf() // ...
    .B(a_redelegation_responses) // RedelegationResponse[] redelegation_responses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDelegatorValidatorsRequest` protobuf message: request type for the Query/DelegatorValidators RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorValidatorsRequest = (sa_delegator_addr, atu8_pagination) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryDelegatorValidatorsResponse` protobuf message: response type for the Query/DelegatorValidators RPC method.
 * @param a_validators - `validators`: defines the validators' info of a delegator.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorValidatorsResponse = (a_validators, atu8_pagination) => Protobuf() // ...
    .B(a_validators) // Validator[] validators = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDelegatorValidatorRequest` protobuf message: request type for the Query/DelegatorValidator RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorValidatorRequest = (sa_delegator_addr, sa_validator) => Protobuf() // ...
    .s(sa_delegator_addr) // string delegator_addr = 1
    .s(sa_validator) // string validator_addr = 2
    .o;
/**
 * Encodes a `QueryDelegatorValidatorResponse` protobuf message: response type for the Query/DelegatorValidator RPC method.
 * @param g_validator - `validator`: defines the validator info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryDelegatorValidatorResponse = (atu8_validator) => Protobuf() // ...
    .b(atu8_validator) // Validator validator = 1
    .o;
/**
 * Encodes a `QueryHistoricalInfoRequest` protobuf message: request type for the Query/HistoricalInfo RPC method.
 * @param sg_height - `height`: defines at which height to query the historical info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryHistoricalInfoRequest = (sg_height) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .o;
/**
 * Encodes a `QueryHistoricalInfoResponse` protobuf message: response type for the Query/HistoricalInfo RPC method.
 * @param g_hist - `hist`: defines the historical info at the given height.
 * @param g_historical_record - `historical_record`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryHistoricalInfoResponse = (atu8_hist, atu8_historical_record) => Protobuf() // ...
    .b(atu8_hist) // HistoricalInfo hist = 1
    .b(atu8_historical_record) // HistoricalRecord historical_record = 2
    .o;
/**
 * Encodes a `QueryPoolRequest` protobuf message: request type for the Query/Pool RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryPoolRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryPoolResponse` protobuf message: response type for the Query/Pool RPC method.
 * @param g_pool - `pool`: defines the pool info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryPoolResponse = (atu8_pool) => Protobuf() // ...
    .b(atu8_pool) // Pool pool = 1
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: response type for the Query/Params RPC method.
 * @param g_params - `params`: holds all the parameters of this module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf QueryValidatorsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorsRequest}
 */
export const decodeCosmosStakingQueryValidatorsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorsResponse}
 */
export const decodeCosmosStakingQueryValidatorsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingValidator, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryValidatorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorRequest}
 */
export const decodeCosmosStakingQueryValidatorRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryValidator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorResponse}
 */
export const decodeCosmosStakingQueryValidatorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosStakingValidator]);
/**
 * Decodes a protobuf QueryValidatorDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorDelegationsRequest}
 */
export const decodeCosmosStakingQueryValidatorDelegationsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryValidatorDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorDelegationsResponse}
 */
export const decodeCosmosStakingQueryValidatorDelegationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingDelegationResponse, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryValidatorUnbondingDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorUnbondingDelegationsRequest}
 */
export const decodeCosmosStakingQueryValidatorUnbondingDelegationsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryValidatorUnbondingDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorUnbondingDelegationsResponse}
 */
export const decodeCosmosStakingQueryValidatorUnbondingDelegationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingUnbondingDelegation, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDelegationRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegationRequest}
 */
export const decodeCosmosStakingQueryDelegationRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryDelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegationResponse}
 */
export const decodeCosmosStakingQueryDelegationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosStakingDelegationResponse]);
/**
 * Decodes a protobuf QueryUnbondingDelegationRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryUnbondingDelegationRequest}
 */
export const decodeCosmosStakingQueryUnbondingDelegationRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryUnbondingDelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryUnbondingDelegationResponse}
 */
export const decodeCosmosStakingQueryUnbondingDelegationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosStakingUnbondingDelegation]);
/**
 * Decodes a protobuf QueryDelegatorDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorDelegationsRequest}
 */
export const decodeCosmosStakingQueryDelegatorDelegationsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDelegatorDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorDelegationsResponse}
 */
export const decodeCosmosStakingQueryDelegatorDelegationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingDelegationResponse, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDelegatorUnbondingDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorUnbondingDelegationsRequest}
 */
export const decodeCosmosStakingQueryDelegatorUnbondingDelegationsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDelegatorUnbondingDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorUnbondingDelegationsResponse}
 */
export const decodeCosmosStakingQueryDelegatorUnbondingDelegationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingUnbondingDelegation, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryRedelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryRedelegationsRequest}
 */
export const decodeCosmosStakingQueryRedelegationsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 1], [0, 0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryRedelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryRedelegationsResponse}
 */
export const decodeCosmosStakingQueryRedelegationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingRedelegationResponse, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDelegatorValidatorsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorsRequest}
 */
export const decodeCosmosStakingQueryDelegatorValidatorsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDelegatorValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorsResponse}
 */
export const decodeCosmosStakingQueryDelegatorValidatorsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosStakingValidator, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDelegatorValidatorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorRequest}
 */
export const decodeCosmosStakingQueryDelegatorValidatorRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryDelegatorValidator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorResponse}
 */
export const decodeCosmosStakingQueryDelegatorValidatorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosStakingValidator]);
/**
 * Decodes a protobuf QueryHistoricalInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryHistoricalInfoRequest}
 */
export const decodeCosmosStakingQueryHistoricalInfoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryHistoricalInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryHistoricalInfoResponse}
 */
export const decodeCosmosStakingQueryHistoricalInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosStakingHistoricalInfo, decodeCosmosStakingHistoricalRecord]);
/**
 * Decodes a protobuf QueryPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryPoolRequest}
 */
export const decodeCosmosStakingQueryPoolRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryPoolResponse}
 */
export const decodeCosmosStakingQueryPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosStakingPool]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryParamsRequest}
 */
export const decodeCosmosStakingQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryParamsResponse}
 */
export const decodeCosmosStakingQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosStakingParams]);
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: status - enables to query for validators matching a given status.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryValidatorsRequest = (g_struct) => [g_struct.status, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATORS_REQUEST = '/cosmos.staking.v1beta1.QueryValidatorsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators - contains all the queried validators.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryValidatorsResponse = (g_struct) => [g_struct.validators, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATORS_RESPONSE = '/cosmos.staking.v1beta1.QueryValidatorsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 */
export const destructCosmosStakingQueryValidatorRequest = (g_struct) => [g_struct.validator_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_REQUEST = '/cosmos.staking.v1beta1.QueryValidatorRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export const destructCosmosStakingQueryValidatorResponse = (g_struct) => [g_struct.validator];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_RESPONSE = '/cosmos.staking.v1beta1.QueryValidatorResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryValidatorDelegationsRequest = (g_struct) => [g_struct.validator_addr, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_DELEGATIONS_REQUEST = '/cosmos.staking.v1beta1.QueryValidatorDelegationsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryValidatorDelegationsResponse = (g_struct) => [g_struct.delegation_responses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_DELEGATIONS_RESPONSE = '/cosmos.staking.v1beta1.QueryValidatorDelegationsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorUnbondingDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryValidatorUnbondingDelegationsRequest = (g_struct) => [g_struct.validator_addr, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_UNBONDING_DELEGATIONS_REQUEST = '/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorUnbondingDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbonding_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryValidatorUnbondingDelegationsResponse = (g_struct) => [g_struct.unbonding_responses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_UNBONDING_DELEGATIONS_RESPONSE = '/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegationRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export const destructCosmosStakingQueryDelegationRequest = (g_struct) => [g_struct.delegator_addr, g_struct.validator_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATION_REQUEST = '/cosmos.staking.v1beta1.QueryDelegationRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation_response - s defines the delegation info of a delegation.
 */
export const destructCosmosStakingQueryDelegationResponse = (g_struct) => [g_struct.delegation_response];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATION_RESPONSE = '/cosmos.staking.v1beta1.QueryDelegationResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryUnbondingDelegationRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export const destructCosmosStakingQueryUnbondingDelegationRequest = (g_struct) => [g_struct.delegator_addr, g_struct.validator_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_UNBONDING_DELEGATION_REQUEST = '/cosmos.staking.v1beta1.QueryUnbondingDelegationRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryUnbondingDelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbond - defines the unbonding information of a delegation.
 */
export const destructCosmosStakingQueryUnbondingDelegationResponse = (g_struct) => [g_struct.unbond];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_UNBONDING_DELEGATION_RESPONSE = '/cosmos.staking.v1beta1.QueryUnbondingDelegationResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryDelegatorDelegationsRequest = (g_struct) => [g_struct.delegator_addr, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_DELEGATIONS_REQUEST = '/cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation_responses - defines all the delegations' info of a delegator.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryDelegatorDelegationsResponse = (g_struct) => [g_struct.delegation_responses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_DELEGATIONS_RESPONSE = '/cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorUnbondingDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryDelegatorUnbondingDelegationsRequest = (g_struct) => [g_struct.delegator_addr, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_UNBONDING_DELEGATIONS_REQUEST = '/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorUnbondingDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbonding_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryDelegatorUnbondingDelegationsResponse = (g_struct) => [g_struct.unbonding_responses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_UNBONDING_DELEGATIONS_RESPONSE = '/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryRedelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: src_validator_addr - defines the validator address to redelegate from.
 *   - 2: dst_validator_addr - defines the validator address to redelegate to.
 *   - 3: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryRedelegationsRequest = (g_struct) => [g_struct.delegator_addr, g_struct.src_validator_addr, g_struct.dst_validator_addr, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_REDELEGATIONS_REQUEST = '/cosmos.staking.v1beta1.QueryRedelegationsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryRedelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: redelegation_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryRedelegationsResponse = (g_struct) => [g_struct.redelegation_responses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_REDELEGATIONS_RESPONSE = '/cosmos.staking.v1beta1.QueryRedelegationsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosStakingQueryDelegatorValidatorsRequest = (g_struct) => [g_struct.delegator_addr, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATORS_REQUEST = '/cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators - defines the validators' info of a delegator.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosStakingQueryDelegatorValidatorsResponse = (g_struct) => [g_struct.validators, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATORS_RESPONSE = '/cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export const destructCosmosStakingQueryDelegatorValidatorRequest = (g_struct) => [g_struct.delegator_addr, g_struct.validator_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATOR_REQUEST = '/cosmos.staking.v1beta1.QueryDelegatorValidatorRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export const destructCosmosStakingQueryDelegatorValidatorResponse = (g_struct) => [g_struct.validator];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATOR_RESPONSE = '/cosmos.staking.v1beta1.QueryDelegatorValidatorResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryHistoricalInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - defines at which height to query the historical info.
 */
export const destructCosmosStakingQueryHistoricalInfoRequest = (g_struct) => [g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_HISTORICAL_INFO_REQUEST = '/cosmos.staking.v1beta1.QueryHistoricalInfoRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryHistoricalInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hist - defines the historical info at the given height.
 *   - 1: historical_record -
 */
export const destructCosmosStakingQueryHistoricalInfoResponse = (g_struct) => [g_struct.hist, g_struct.historical_record];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_HISTORICAL_INFO_RESPONSE = '/cosmos.staking.v1beta1.QueryHistoricalInfoResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosStakingQueryPoolRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_POOL_REQUEST = '/cosmos.staking.v1beta1.QueryPoolRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - defines the pool info.
 */
export const destructCosmosStakingQueryPoolResponse = (g_struct) => [g_struct.pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_POOL_RESPONSE = '/cosmos.staking.v1beta1.QueryPoolResponse';
/**
 * Destructures the fields of a {@link CosmosStakingQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosStakingQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_PARAMS_REQUEST = '/cosmos.staking.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link CosmosStakingQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export const destructCosmosStakingQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_PARAMS_RESPONSE = '/cosmos.staking.v1beta1.QueryParamsResponse';
//# sourceMappingURL=query.js.map