import type { WeakInt64Str, CwInt64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../../api/types.js';
export type EncodedCosmosStoreCommitInfo = Encoded<'/cosmos.store.v1beta1.CommitInfo'>;
export type EncodedCosmosStoreStoreInfo = Encoded<'/cosmos.store.v1beta1.StoreInfo'>;
export type EncodedCosmosStoreCommitID = Encoded<'/cosmos.store.v1beta1.CommitID'>;
/**
 * Encodes a `CommitInfo` protobuf message: defines commit information used by the multi-store when committing a version/height.
 * @param sg_version - `version`:
 * @param a_store_infos - `store_infos`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStoreCommitInfo: (sg_version?: Opt<WeakInt64Str>, a_store_infos?: Opt<Encoded<'/cosmos.store.v1beta1.StoreInfo'>[]>, xt_timestamp?: Opt<number>) => EncodedCosmosStoreCommitInfo;
/**
 * Encodes a `StoreInfo` protobuf message: defines store-specific commit information. It contains a reference between a store name and the commit ID.
 * @param s_name - `name`:
 * @param g_commit_id - `commit_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStoreStoreInfo: (s_name?: Opt<string>, atu8_commit_id?: Opt<Encoded<'/cosmos.store.v1beta1.CommitID'>>) => EncodedCosmosStoreStoreInfo;
/**
 * Encodes a `CommitID` protobuf message: defines the commitment information when a specific store is committed.
 * @param sg_version - `version`:
 * @param atu8_hash - `hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStoreCommitID: (sg_version?: Opt<WeakInt64Str>, atu8_hash?: Opt<Uint8Array>) => EncodedCosmosStoreCommitID;
/**
 * A decoded protobuf CommitInfo message
 *
 * Tuple where:
 *   - 0: version -
 *   - 1: store_infos -
 *   - 2: timestamp -
 */
export type DecodedCosmosStoreCommitInfo = [
    sg_version?: CwInt64,
    a_store_infos?: DecodedCosmosStoreStoreInfo[],
    a_timestamp?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf CommitInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreCommitInfo}
 */
export declare const decodeCosmosStoreCommitInfo: (atu8_payload: Uint8Array) => DecodedCosmosStoreCommitInfo;
/**
 * A decoded protobuf StoreInfo message
 *
 * Tuple where:
 *   - 0: name -
 *   - 1: commit_id -
 */
export type DecodedCosmosStoreStoreInfo = [
    s_name?: string,
    a_commit_id?: DecodedCosmosStoreCommitID
];
/**
 * Decodes a protobuf StoreInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreStoreInfo}
 */
export declare const decodeCosmosStoreStoreInfo: (atu8_payload: Uint8Array) => DecodedCosmosStoreStoreInfo;
/**
 * A decoded protobuf CommitID message
 *
 * Tuple where:
 *   - 0: version -
 *   - 1: hash -
 */
export type DecodedCosmosStoreCommitID = [
    sg_version?: CwInt64,
    atu8_hash?: Uint8Array
];
/**
 * Decodes a protobuf CommitID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreCommitID}
 */
export declare const decodeCosmosStoreCommitID: (atu8_payload: Uint8Array) => DecodedCosmosStoreCommitID;
/**
 * Destructures the fields of a {@link CosmosStoreCommitInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: store_infos -
 *   - 2: timestamp -
 */
export declare const destructCosmosStoreCommitInfo: (g_struct: CosmosStoreCommitInfo) => [version?: CwInt64, store_infos?: CosmosStoreStoreInfo[], timestamp?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STORE_COMMIT_INFO = "/cosmos.store.v1beta1.CommitInfo";
/**
 * JSON serialization of `cosmos.store.v1beta1.CommitInfo` - defines commit information used by the multi-store when committing a version/height.
 */
export type CosmosStoreCommitInfo = {
    version?: CwInt64 | undefined;
    store_infos?: CosmosStoreStoreInfo[] | undefined;
    timestamp?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStoreStoreInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: commit_id -
 */
export declare const destructCosmosStoreStoreInfo: (g_struct: CosmosStoreStoreInfo) => [name?: string, commit_id?: CosmosStoreCommitID];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STORE_STORE_INFO = "/cosmos.store.v1beta1.StoreInfo";
/**
 * JSON serialization of `cosmos.store.v1beta1.StoreInfo` - defines store-specific commit information. It contains a reference between a store name and the commit ID.
 */
export type CosmosStoreStoreInfo = {
    name?: string | undefined;
    commit_id?: CosmosStoreCommitID | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStoreCommitID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: hash -
 */
export declare const destructCosmosStoreCommitID: (g_struct: CosmosStoreCommitID) => [version?: CwInt64, hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STORE_COMMIT_I_D = "/cosmos.store.v1beta1.CommitID";
/**
 * JSON serialization of `cosmos.store.v1beta1.CommitID` - defines the commitment information when a specific store is committed.
 */
export type CosmosStoreCommitID = {
    version?: CwInt64 | undefined;
    hash?: CwBase64 | undefined;
};
