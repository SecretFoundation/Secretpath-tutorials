import { parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `CommitInfo` protobuf message: defines commit information used by the multi-store when committing a version/height.
 * @param sg_version - `version`:
 * @param a_store_infos - `store_infos`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStoreCommitInfo = (sg_version, a_store_infos, xt_timestamp) => Protobuf() // ...
    .g(sg_version) // int32 version = 1
    .B(a_store_infos) // StoreInfo[] store_infos = 2
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 3
    .o;
/**
 * Encodes a `StoreInfo` protobuf message: defines store-specific commit information. It contains a reference between a store name and the commit ID.
 * @param s_name - `name`:
 * @param g_commit_id - `commit_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStoreStoreInfo = (s_name, atu8_commit_id) => Protobuf() // ...
    .s(s_name) // string name = 1
    .b(atu8_commit_id) // CommitID commit_id = 2
    .o;
/**
 * Encodes a `CommitID` protobuf message: defines the commitment information when a specific store is committed.
 * @param sg_version - `version`:
 * @param atu8_hash - `hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStoreCommitID = (sg_version, atu8_hash) => Protobuf() // ...
    .g(sg_version) // int32 version = 1
    .b(atu8_hash) // bytes hash = 2
    .o;
/**
 * Decodes a protobuf CommitInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreCommitInfo}
 */
export const decodeCosmosStoreCommitInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0, [3, 1]], [0, decodeCosmosStoreStoreInfo, decode_temporal]);
/**
 * Decodes a protobuf StoreInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreStoreInfo}
 */
export const decodeCosmosStoreStoreInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosStoreCommitID]);
/**
 * Decodes a protobuf CommitID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreCommitID}
 */
export const decodeCosmosStoreCommitID = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1]);
/**
 * Destructures the fields of a {@link CosmosStoreCommitInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: store_infos -
 *   - 2: timestamp -
 */
export const destructCosmosStoreCommitInfo = (g_struct) => [g_struct.version, g_struct.store_infos, parse_timestamp(g_struct.timestamp)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STORE_COMMIT_INFO = '/cosmos.store.v1beta1.CommitInfo';
/**
 * Destructures the fields of a {@link CosmosStoreStoreInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: commit_id -
 */
export const destructCosmosStoreStoreInfo = (g_struct) => [g_struct.name, g_struct.commit_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STORE_STORE_INFO = '/cosmos.store.v1beta1.StoreInfo';
/**
 * Destructures the fields of a {@link CosmosStoreCommitID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: hash -
 */
export const destructCosmosStoreCommitID = (g_struct) => [g_struct.version, safe_base64_to_bytes(g_struct.hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STORE_COMMIT_I_D = '/cosmos.store.v1beta1.CommitID';
//# sourceMappingURL=commit_info.js.map