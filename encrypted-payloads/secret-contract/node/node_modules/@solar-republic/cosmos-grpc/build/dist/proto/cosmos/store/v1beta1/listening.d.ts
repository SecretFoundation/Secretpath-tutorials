import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { TendermintAbciResponseCommit, DecodedTendermintAbciResponseCommit, TendermintAbciRequestFinalizeBlock, DecodedTendermintAbciRequestFinalizeBlock, TendermintAbciResponseFinalizeBlock, DecodedTendermintAbciResponseFinalizeBlock } from '../../../tendermint/abci/types.js';
export type EncodedCosmosStoreStoreKVPair = Encoded<'/cosmos.store.v1beta1.StoreKVPair'>;
export type EncodedCosmosStoreBlockMetadata = Encoded<'/cosmos.store.v1beta1.BlockMetadata'>;
/**
 * Encodes a `StoreKVPair` protobuf message: a KVStore KVPair used for listening to state changes (Sets and Deletes) It optionally includes the StoreKey for the originating KVStore and a Boolean flag to distinguish between Sets and Deletes Since: cosmos-sdk 0.43
 * @param s_store_key - `store_key`:
 * @param b_delete - `delete`:
 * @param atu8_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStoreStoreKVPair: (s_store_key?: Opt<string>, b_delete?: Opt<boolean | 0 | 1>, atu8_key?: Opt<Uint8Array>, atu8_value?: Opt<Uint8Array>) => EncodedCosmosStoreStoreKVPair;
/**
 * Encodes a `BlockMetadata` protobuf message: contains all the abci event data of a block the file streamer dump them into files together with the state changes.
 * @param g_response_commit - `response_commit`:
 * @param g_request_finalize_block - `request_finalize_block`:
 * @param g_response_finalize_block - `response_finalize_block`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStoreBlockMetadata: (atu8_response_commit?: Opt<Encoded<'/tendermint.abci.ResponseCommit'>>, atu8_request_finalize_block?: Opt<Encoded<'/tendermint.abci.RequestFinalizeBlock'>>, atu8_response_finalize_block?: Opt<Encoded<'/tendermint.abci.ResponseFinalizeBlock'>>) => EncodedCosmosStoreBlockMetadata;
/**
 * A decoded protobuf StoreKVPair message
 *
 * Tuple where:
 *   - 0: store_key -
 *   - 1: delete -
 *   - 2: key -
 *   - 3: value -
 */
export type DecodedCosmosStoreStoreKVPair = [
    s_store_key?: string,
    b_delete?: 0 | 1,
    atu8_key?: Uint8Array,
    atu8_value?: Uint8Array
];
/**
 * Decodes a protobuf StoreKVPair message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStoreStoreKVPair}
 */
export declare const decodeCosmosStoreStoreKVPair: (atu8_payload: Uint8Array) => DecodedCosmosStoreStoreKVPair;
/**
 * A decoded protobuf BlockMetadata message
 *
 * Tuple where:
 *   - 5: response_commit -
 *   - 6: request_finalize_block -
 *   - 7: response_finalize_block -
 */
export type DecodedCosmosStoreBlockMetadata = [
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    w_3?: undefined,
    w_4?: undefined,
    a_response_commit?: DecodedTendermintAbciResponseCommit,
    a_request_finalize_block?: DecodedTendermintAbciRequestFinalizeBlock,
    a_response_finalize_block?: DecodedTendermintAbciResponseFinalizeBlock
];
/**
 * Decodes a protobuf BlockMetadata message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosStoreBlockMetadata}
 */
export declare const decodeCosmosStoreBlockMetadata: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosStoreBlockMetadata;
/**
 * Destructures the fields of a {@link CosmosStoreStoreKVPair} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: store_key -
 *   - 1: delete -
 *   - 2: key -
 *   - 3: value -
 */
export declare const destructCosmosStoreStoreKVPair: (g_struct: CosmosStoreStoreKVPair) => [store_key?: string, delete_?: boolean, key?: Uint8Array, value?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STORE_STORE_K_V_PAIR = "/cosmos.store.v1beta1.StoreKVPair";
/**
 * JSON serialization of `cosmos.store.v1beta1.StoreKVPair` - a KVStore KVPair used for listening to state changes (Sets and Deletes) It optionally includes the StoreKey for the originating KVStore and a Boolean flag to distinguish between Sets and Deletes Since: cosmos-sdk 0.43
 */
export type CosmosStoreStoreKVPair = {
    store_key?: string | undefined;
    delete?: boolean | undefined;
    key?: CwBase64 | undefined;
    value?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStoreBlockMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 5: response_commit -
 *   - 6: request_finalize_block -
 *   - 7: response_finalize_block -
 */
export declare const destructCosmosStoreBlockMetadata: (g_struct: CosmosStoreBlockMetadata) => [EMPTY?: void, EMPTY?: void, EMPTY?: void, EMPTY?: void, EMPTY?: void, response_commit?: TendermintAbciResponseCommit, request_finalize_block?: TendermintAbciRequestFinalizeBlock, response_finalize_block?: TendermintAbciResponseFinalizeBlock];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STORE_BLOCK_METADATA = "/cosmos.store.v1beta1.BlockMetadata";
/**
 * JSON serialization of `cosmos.store.v1beta1.BlockMetadata` - contains all the abci event data of a block the file streamer dump them into files together with the state changes.
 */
export type CosmosStoreBlockMetadata = {
    response_commit?: TendermintAbciResponseCommit | undefined;
    request_finalize_block?: TendermintAbciRequestFinalizeBlock | undefined;
    response_finalize_block?: TendermintAbciResponseFinalizeBlock | undefined;
};
