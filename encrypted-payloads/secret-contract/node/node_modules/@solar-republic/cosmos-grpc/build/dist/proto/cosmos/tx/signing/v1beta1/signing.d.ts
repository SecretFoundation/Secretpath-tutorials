import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { CosmosCryptoMultisigCompactBitArray, DecodedCosmosCryptoMultisigCompactBitArray } from '../../../crypto/multisig/v1beta1/multisig.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
export type EncodedCosmosTxSigningSignatureDescriptors = Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptors'>;
export type EncodedCosmosTxSigningSignatureDescriptor = Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor'>;
export type EncodedCosmosTxSigningSignatureDescriptorData = Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data'>;
export type EncodedCosmosTxSigningSignatureDescriptorDataSingle = Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single'>;
export type EncodedCosmosTxSigningSignatureDescriptorDataMulti = Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi'>;
/**
 * Encodes a `SignatureDescriptors` protobuf message: wraps multiple SignatureDescriptor's.
 * @param a_signatures - `signatures`: the signature descriptors
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosTxSigningSignatureDescriptors: (a_signatures?: Opt<Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor'>[]>) => EncodedCosmosTxSigningSignatureDescriptors;
/**
 * Encodes a `SignatureDescriptor` protobuf message: a convenience type which represents the full data for a signature including the public key of the signer, signing modes and the signature itself. It is primarily used for coordinating signatures between clients.
 * @param atu8_public_key - `public_key`: the public key of the signer
 * @param g_data - `data`:
 * @param sg_sequence - `sequence`: the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosTxSigningSignatureDescriptor: (atu8_public_key?: Opt<Uint8Array>, atu8_data?: Opt<Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data'>>, sg_sequence?: Opt<WeakUint64Str>) => EncodedCosmosTxSigningSignatureDescriptor;
/**
 * Encodes a `Data` protobuf message:
 * @param g_single - `single`:
 * @param g_multi - `multi`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosTxSigningSignatureDescriptorData: (atu8_single?: Opt<Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single'>>, atu8_multi?: Opt<Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi'>>) => EncodedCosmosTxSigningSignatureDescriptorData;
/**
 * Encodes a `Single` protobuf message:
 * @param xc_mode - `mode`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosTxSigningSignatureDescriptorDataSingle: (xc_mode?: Opt<ProtoEnumCosmosTxSigningSignMode>, atu8_signature?: Opt<Uint8Array>) => EncodedCosmosTxSigningSignatureDescriptorDataSingle;
/**
 * Encodes a `Multi` protobuf message:
 * @param g_bitarray - `bitarray`:
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosTxSigningSignatureDescriptorDataMulti: (atu8_bitarray?: Opt<Encoded<'/cosmos.crypto.multisig.v1beta1.CompactBitArray'>>, a_signatures?: Opt<Encoded<'/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data'>[]>) => EncodedCosmosTxSigningSignatureDescriptorDataMulti;
/**
 * A decoded protobuf SignatureDescriptors message
 *
 * Alias for: signatures - the signature descriptors
 */
export type DecodedCosmosTxSigningSignatureDescriptors = [
    a_signatures?: DecodedCosmosTxSigningSignatureDescriptor[]
];
/**
 * Decodes a protobuf SignatureDescriptors message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptors}
 */
export declare const decodeCosmosTxSigningSignatureDescriptors: (atu8_payload: Uint8Array) => DecodedCosmosTxSigningSignatureDescriptors;
/**
 * A decoded protobuf SignatureDescriptor message
 *
 * Tuple where:
 *   - 0: public_key - the public key of the signer
 *   - 1: data -
 *   - 2: sequence - the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
 */
export type DecodedCosmosTxSigningSignatureDescriptor = [
    a_public_key?: DecodedGoogleProtobufAny,
    a_data?: DecodedCosmosTxSigningSignatureDescriptorData,
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf SignatureDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptor}
 */
export declare const decodeCosmosTxSigningSignatureDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosTxSigningSignatureDescriptor;
/**
 * A decoded protobuf Data message
 *
 * Tuple where:
 *   - 0: single -
 *   - 1: multi -
 */
export type DecodedCosmosTxSigningSignatureDescriptorData = [
    a_single?: DecodedCosmosTxSigningSignatureDescriptorDataSingle,
    a_multi?: DecodedCosmosTxSigningSignatureDescriptorDataMulti
];
/**
 * Decodes a protobuf Data message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptorData}
 */
export declare const decodeCosmosTxSigningSignatureDescriptorData: (atu8_payload: Uint8Array) => DecodedCosmosTxSigningSignatureDescriptorData;
/**
 * A decoded protobuf Single message
 *
 * Tuple where:
 *   - 0: mode -
 *   - 1: signature -
 */
export type DecodedCosmosTxSigningSignatureDescriptorDataSingle = [
    xc_mode?: ProtoEnumCosmosTxSigningSignMode,
    atu8_signature?: Uint8Array
];
/**
 * Decodes a protobuf Single message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptorDataSingle}
 */
export declare const decodeCosmosTxSigningSignatureDescriptorDataSingle: (atu8_payload: Uint8Array) => DecodedCosmosTxSigningSignatureDescriptorDataSingle;
/**
 * A decoded protobuf Multi message
 *
 * Tuple where:
 *   - 0: bitarray -
 *   - 1: signatures -
 */
export type DecodedCosmosTxSigningSignatureDescriptorDataMulti = [
    a_bitarray?: DecodedCosmosCryptoMultisigCompactBitArray,
    a_signatures?: DecodedCosmosTxSigningSignatureDescriptorData[]
];
/**
 * Decodes a protobuf Multi message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptorDataMulti}
 */
export declare const decodeCosmosTxSigningSignatureDescriptorDataMulti: (atu8_payload: Uint8Array) => DecodedCosmosTxSigningSignatureDescriptorDataMulti;
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptors} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signatures - the signature descriptors
 */
export declare const destructCosmosTxSigningSignatureDescriptors: (g_struct: CosmosTxSigningSignatureDescriptors) => [signatures?: CosmosTxSigningSignatureDescriptor[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTORS = "/cosmos.tx.signing.v1beta1.SignatureDescriptors";
/**
 * JSON serialization of `cosmos.tx.signing.v1beta1.SignatureDescriptors` - wraps multiple SignatureDescriptor's.
 */
export type CosmosTxSigningSignatureDescriptors = {
    signatures?: CosmosTxSigningSignatureDescriptor[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: public_key - the public key of the signer
 *   - 1: data -
 *   - 2: sequence - the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
 */
export declare const destructCosmosTxSigningSignatureDescriptor: (g_struct: CosmosTxSigningSignatureDescriptor) => [public_key?: JsonAny, data?: CosmosTxSigningSignatureDescriptorData, sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR = "/cosmos.tx.signing.v1beta1.SignatureDescriptor";
/**
 * JSON serialization of `cosmos.tx.signing.v1beta1.SignatureDescriptor` - a convenience type which represents the full data for a signature including the public key of the signer, signing modes and the signature itself. It is primarily used for coordinating signatures between clients.
 */
export type CosmosTxSigningSignatureDescriptor = {
    public_key?: JsonAny | undefined;
    data?: CosmosTxSigningSignatureDescriptorData | undefined;
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptorData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: single -
 *   - 1: multi -
 */
export declare const destructCosmosTxSigningSignatureDescriptorData: (g_struct: CosmosTxSigningSignatureDescriptorData) => [single?: CosmosTxSigningSignatureDescriptorDataSingle, multi?: CosmosTxSigningSignatureDescriptorDataMulti];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR_DATA = "/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data";
/**
 * JSON serialization of `cosmos.tx.signing.v1beta1.SignatureDescriptor.Data` -
 */
export type CosmosTxSigningSignatureDescriptorData = {
    single?: CosmosTxSigningSignatureDescriptorDataSingle | undefined;
    multi?: CosmosTxSigningSignatureDescriptorDataMulti | undefined;
};
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptorDataSingle} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mode -
 *   - 1: signature -
 */
export declare const destructCosmosTxSigningSignatureDescriptorDataSingle: (g_struct: CosmosTxSigningSignatureDescriptorDataSingle) => [mode?: JsonEnumCosmosTxSigningSignMode, signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR_DATA_SINGLE = "/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single";
/**
 * JSON serialization of `cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single` -
 */
export type CosmosTxSigningSignatureDescriptorDataSingle = {
    mode?: JsonEnumCosmosTxSigningSignMode | undefined;
    signature?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptorDataMulti} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bitarray -
 *   - 1: signatures -
 */
export declare const destructCosmosTxSigningSignatureDescriptorDataMulti: (g_struct: CosmosTxSigningSignatureDescriptorDataMulti) => [bitarray?: CosmosCryptoMultisigCompactBitArray, signatures?: CosmosTxSigningSignatureDescriptorData[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR_DATA_MULTI = "/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi";
/**
 * JSON serialization of `cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi` -
 */
export type CosmosTxSigningSignatureDescriptorDataMulti = {
    bitarray?: CosmosCryptoMultisigCompactBitArray | undefined;
    signatures?: CosmosTxSigningSignatureDescriptorData[] | undefined;
};
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_UNSPECIFIED** - specifies an unknown signing mode and will be rejected.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export declare const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_UNSPECIFIED** - specifies an unknown signing mode and will be rejected.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export declare const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED = "SIGN_MODE_UNSPECIFIED";
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT** - specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export declare const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT = 1;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT** - specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export declare const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT = "SIGN_MODE_DIRECT";
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_TEXTUAL** - a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT. Since: cosmos-sdk 0.50
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export declare const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL = 2;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_TEXTUAL** - a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT. Since: cosmos-sdk 0.50
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export declare const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL = "SIGN_MODE_TEXTUAL";
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT_AUX** - specifies a signing mode which uses SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not require signers signing over other signers' `signer_info`. Since: cosmos-sdk 0.46
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export declare const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX = 3;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT_AUX** - specifies a signing mode which uses SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not require signers signing over other signers' `signer_info`. Since: cosmos-sdk 0.46
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export declare const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX = "SIGN_MODE_DIRECT_AUX";
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_LEGACY_AMINO_JSON** - a backwards compatibility mode which uses Amino JSON and will be removed in the future.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export declare const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON = 127;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_LEGACY_AMINO_JSON** - a backwards compatibility mode which uses Amino JSON and will be removed in the future.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export declare const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON = "SIGN_MODE_LEGACY_AMINO_JSON";
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_EIP_191** - specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191 Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future. Since: cosmos-sdk 0.45.2 Deprecated: post 0.47.x Sign mode refers to a method of encoding string data for signing, but in the SDK, it also refers to how to encode a transaction into a string. This opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL, SIGN_MODE_EIP_191_LEGACY_JSON, and more. Each new EIP191 sign mode should be accompanied by an associated ADR.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export declare const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191 = 191;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_EIP_191** - specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191 Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future. Since: cosmos-sdk 0.45.2 Deprecated: post 0.47.x Sign mode refers to a method of encoding string data for signing, but in the SDK, it also refers to how to encode a transaction into a string. This opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL, SIGN_MODE_EIP_191_LEGACY_JSON, and more. Each new EIP191 sign mode should be accompanied by an associated ADR.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export declare const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191 = "SIGN_MODE_EIP_191";
/**
 * Raw protobuf enum values for `cosmos.tx.signing.v1beta1.SignMode` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT}
 *   - {@link XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL}
 *   - {@link XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX}
 *   - {@link XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON}
 *   - {@link XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191}
 */
export type ProtoEnumCosmosTxSigningSignMode = typeof XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED | typeof XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT | typeof XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL | typeof XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX | typeof XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON | typeof XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191;
/**
 * JSON enum values for `cosmos.tx.signing.v1beta1.SignMode` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT}
 *   - {@link SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL}
 *   - {@link SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX}
 *   - {@link SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON}
 *   - {@link SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191}
 */
export type JsonEnumCosmosTxSigningSignMode = typeof SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED | typeof SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT | typeof SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL | typeof SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX | typeof SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON | typeof SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191;
/**
 * Maps a protobuf enum int value for `cosmos.tx.signing.v1beta1.SignMode` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosTxSigningSignMode: Record<ProtoEnumCosmosTxSigningSignMode, JsonEnumCosmosTxSigningSignMode>;
/**
 * Maps a JSON enum string value for `cosmos.tx.signing.v1beta1.SignMode` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosTxSigningSignMode: Record<JsonEnumCosmosTxSigningSignMode, ProtoEnumCosmosTxSigningSignMode>;
