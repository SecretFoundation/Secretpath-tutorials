import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeCosmosCryptoMultisigCompactBitArray } from '../../../crypto/multisig/v1beta1/multisig.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
/**
 * Encodes a `SignatureDescriptors` protobuf message: wraps multiple SignatureDescriptor's.
 * @param a_signatures - `signatures`: the signature descriptors
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSigningSignatureDescriptors = (a_signatures) => Protobuf() // ...
    .B(a_signatures) // SignatureDescriptor[] signatures = 1
    .o;
/**
 * Encodes a `SignatureDescriptor` protobuf message: a convenience type which represents the full data for a signature including the public key of the signer, signing modes and the signature itself. It is primarily used for coordinating signatures between clients.
 * @param atu8_public_key - `public_key`: the public key of the signer
 * @param g_data - `data`:
 * @param sg_sequence - `sequence`: the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSigningSignatureDescriptor = (atu8_public_key, atu8_data, sg_sequence) => Protobuf() // ...
    .b(atu8_public_key) // Any public_key = 1
    .b(atu8_data) // Data data = 2
    .g(sg_sequence) // uint64 sequence = 3
    .o;
/**
 * Encodes a `Data` protobuf message:
 * @param g_single - `single`:
 * @param g_multi - `multi`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSigningSignatureDescriptorData = (atu8_single, atu8_multi) => Protobuf() // ...
    .b(atu8_single) // Single single = 1
    .b(atu8_multi) // Multi multi = 2
    .o;
/**
 * Encodes a `Single` protobuf message:
 * @param xc_mode - `mode`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSigningSignatureDescriptorDataSingle = (xc_mode, atu8_signature) => Protobuf() // ...
    .v(xc_mode) // SignMode mode = 1
    .b(atu8_signature) // bytes signature = 2
    .o;
/**
 * Encodes a `Multi` protobuf message:
 * @param g_bitarray - `bitarray`:
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSigningSignatureDescriptorDataMulti = (atu8_bitarray, a_signatures) => Protobuf() // ...
    .b(atu8_bitarray) // CompactBitArray bitarray = 1
    .B(a_signatures) // Data[] signatures = 2
    .o;
/**
 * Decodes a protobuf SignatureDescriptors message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptors}
 */
export const decodeCosmosTxSigningSignatureDescriptors = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosTxSigningSignatureDescriptor]);
/**
 * Decodes a protobuf SignatureDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptor}
 */
export const decodeCosmosTxSigningSignatureDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3], [decodeGoogleProtobufAny, decodeCosmosTxSigningSignatureDescriptorData]);
/**
 * Decodes a protobuf Data message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptorData}
 */
export const decodeCosmosTxSigningSignatureDescriptorData = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosTxSigningSignatureDescriptorDataSingle, decodeCosmosTxSigningSignatureDescriptorDataMulti]);
/**
 * Decodes a protobuf Single message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptorDataSingle}
 */
export const decodeCosmosTxSigningSignatureDescriptorDataSingle = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf Multi message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSigningSignatureDescriptorDataMulti}
 */
export const decodeCosmosTxSigningSignatureDescriptorDataMulti = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [decodeCosmosCryptoMultisigCompactBitArray, decodeCosmosTxSigningSignatureDescriptorData]);
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptors} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signatures - the signature descriptors
 */
export const destructCosmosTxSigningSignatureDescriptors = (g_struct) => [g_struct.signatures];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTORS = '/cosmos.tx.signing.v1beta1.SignatureDescriptors';
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: public_key - the public key of the signer
 *   - 1: data -
 *   - 2: sequence - the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
 */
export const destructCosmosTxSigningSignatureDescriptor = (g_struct) => [g_struct.public_key, g_struct.data, g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR = '/cosmos.tx.signing.v1beta1.SignatureDescriptor';
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptorData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: single -
 *   - 1: multi -
 */
export const destructCosmosTxSigningSignatureDescriptorData = (g_struct) => [g_struct.single, g_struct.multi];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR_DATA = '/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data';
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptorDataSingle} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mode -
 *   - 1: signature -
 */
export const destructCosmosTxSigningSignatureDescriptorDataSingle = (g_struct) => [g_struct.mode, safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR_DATA_SINGLE = '/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single';
/**
 * Destructures the fields of a {@link CosmosTxSigningSignatureDescriptorDataMulti} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bitarray -
 *   - 1: signatures -
 */
export const destructCosmosTxSigningSignatureDescriptorDataMulti = (g_struct) => [g_struct.bitarray, g_struct.signatures];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIGNING_SIGNATURE_DESCRIPTOR_DATA_MULTI = '/cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi';
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_UNSPECIFIED** - specifies an unknown signing mode and will be rejected.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_UNSPECIFIED** - specifies an unknown signing mode and will be rejected.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED = 'SIGN_MODE_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT** - specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT = 1;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT** - specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT = 'SIGN_MODE_DIRECT';
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_TEXTUAL** - a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT. Since: cosmos-sdk 0.50
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL = 2;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_TEXTUAL** - a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT. Since: cosmos-sdk 0.50
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL = 'SIGN_MODE_TEXTUAL';
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT_AUX** - specifies a signing mode which uses SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not require signers signing over other signers' `signer_info`. Since: cosmos-sdk 0.46
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX = 3;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_DIRECT_AUX** - specifies a signing mode which uses SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not require signers signing over other signers' `signer_info`. Since: cosmos-sdk 0.46
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX = 'SIGN_MODE_DIRECT_AUX';
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_LEGACY_AMINO_JSON** - a backwards compatibility mode which uses Amino JSON and will be removed in the future.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON = 127;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_LEGACY_AMINO_JSON** - a backwards compatibility mode which uses Amino JSON and will be removed in the future.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON = 'SIGN_MODE_LEGACY_AMINO_JSON';
/**
 * Protobuf enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_EIP_191** - specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191 Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future. Since: cosmos-sdk 0.45.2 Deprecated: post 0.47.x Sign mode refers to a method of encoding string data for signing, but in the SDK, it also refers to how to encode a transaction into a string. This opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL, SIGN_MODE_EIP_191_LEGACY_JSON, and more. Each new EIP191 sign mode should be accompanied by an associated ADR.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxSigningSignMode}
 */
export const XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191 = 191;
/**
 * JSON enum value for `cosmos.tx.signing.v1beta1.SignMode`.
 *
 * **SIGN_MODE_EIP_191** - specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191 Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future. Since: cosmos-sdk 0.45.2 Deprecated: post 0.47.x Sign mode refers to a method of encoding string data for signing, but in the SDK, it also refers to how to encode a transaction into a string. This opens the possibility for additional EIP191 sign modes, like SIGN_MODE_EIP_191_TEXTUAL, SIGN_MODE_EIP_191_LEGACY_JSON, and more. Each new EIP191 sign mode should be accompanied by an associated ADR.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxSigningSignMode}
 */
export const SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191 = 'SIGN_MODE_EIP_191';
/**
 * Maps a protobuf enum int value for `cosmos.tx.signing.v1beta1.SignMode` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosTxSigningSignMode = {
    [XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED]: SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED,
    [XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT]: SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT,
    [XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL]: SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL,
    [XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX]: SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX,
    [XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON]: SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON,
    [XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191]: SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191,
};
/**
 * Maps a JSON enum string value for `cosmos.tx.signing.v1beta1.SignMode` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosTxSigningSignMode = {
    [SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED]: XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_UNSPECIFIED,
    [SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT]: XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT,
    [SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL]: XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_TEXTUAL,
    [SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX]: XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_DIRECT_AUX,
    [SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON]: XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_LEGACY_AMINO_JSON,
    [SI_JSON_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191]: XC_PROTO_COSMOS_TX_SIGNING_SIGN_MODE_EIP_191,
};
//# sourceMappingURL=signing.js.map