import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64, safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosBaseAbciTxResponse, decodeCosmosBaseAbciGasInfo, decodeCosmosBaseAbciResult } from '../../base/abci/v1beta1/abci.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeCosmosTxTx } from './tx.js';
import { decodeTendermintTypesBlock } from '../../../tendermint/types/block.js';
import { decodeTendermintTypesBlockID } from '../../../tendermint/types/types.js';
const SR_LCD_COSMOS_TX_SERVICE = '/cosmos/tx/v1beta1/';
/**
 * Simulates executing a transaction for estimating gas usage.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_tx - the transaction to simulate. Deprecated. Send raw tx bytes instead.
 * @param atu8_tx_bytes - the raw transaction. Since: cosmos-sdk 0.43
 * @returns a tuple where:
 *   - 0: gas_info - the information about gas used in the simulation.
 *   - 1: result - the information about gas used in the simulation.
 */
export const submitCosmosTxSimulate = restful_grpc((g_tx, atu8_tx_bytes) => [SR_LCD_COSMOS_TX_SERVICE + 'simulate', {
        tx: g_tx,
        tx_bytes: safe_bytes_to_base64(atu8_tx_bytes),
    }], 1);
/**
 * Fetches a tx by hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_hash - the tx hash to query, encoded as a hex string.
 * @returns a tuple where:
 *   - 0: tx - the queried transaction.
 *   - 1: tx_response - the queried transaction.
 */
export const queryCosmosTxGetTx = restful_grpc(s_hash => [SR_LCD_COSMOS_TX_SERVICE + 'txs/' + s_hash]);
/**
 * Broadcast transaction.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_tx_bytes - the raw transaction.
 * @param xc_mode -
 * @returns a tuple where:
 *   - 0: tx_response - the queried TxResponses.
 */
export const submitCosmosTxBroadcastTx = restful_grpc((atu8_tx_bytes, xc_mode) => [SR_LCD_COSMOS_TX_SERVICE + 'txs', {
        tx_bytes: safe_bytes_to_base64(atu8_tx_bytes),
        mode: xc_mode,
    }], 1);
/**
 * Fetches txs by event.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param a_events - the list of transaction event type. Deprecated: post v0.47.x use query instead, which should contain a valid events query.
 * @param g_pagination - defines a pagination for the request. Deprecated: post v0.46.x use page and limit instead.
 * @param xc_order_by -
 * @param sg_page - the page number to query, starts at 1. If not provided, will default to first page.
 * @param sg_limit - the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 * @param s_query - defines the transaction event query that is proxied to Tendermint's TxSearch RPC method. The query must be valid. Since cosmos-sdk 0.50
 * @returns a tuple where:
 *   - 0: txs - the list of queried transactions.
 *   - 1: tx_responses - the list of queried transactions.
 *   - 2: pagination - the list of queried transactions.
 *   - 3: total - the list of queried transactions.
 */
export const queryCosmosTxGetTxsEvent = restful_grpc((a_events, g_pagination, xc_order_by, sg_page, sg_limit, s_query) => [SR_LCD_COSMOS_TX_SERVICE + 'txs', {
        events: a_events,
        pagination: g_pagination,
        order_by: xc_order_by,
        page: sg_page,
        limit: sg_limit,
        query: s_query,
    }]);
/**
 * Fetches a block with decoded txs. Since: cosmos-sdk 0.45.2
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_height - the height of the block to query.
 * @param g_pagination - defines a pagination for the request.
 * @returns a tuple where:
 *   - 0: txs - the transactions in the block.
 *   - 1: block_id - the transactions in the block.
 *   - 2: block - the transactions in the block.
 *   - 3: pagination - the transactions in the block.
 */
export const queryCosmosTxGetBlockWithTxs = restful_grpc((sg_height, g_pagination) => [SR_LCD_COSMOS_TX_SERVICE + 'txs/block/' + sg_height, {
        pagination: g_pagination,
    }]);
/**
 * Decodes the transaction. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_tx_bytes - the raw transaction.
 * @returns a tuple where:
 *   - 0: tx - the decoded transaction.
 */
export const submitCosmosTxTxDecode = restful_grpc(atu8_tx_bytes => [SR_LCD_COSMOS_TX_SERVICE + 'decode', {
        tx_bytes: safe_bytes_to_base64(atu8_tx_bytes),
    }], 1);
/**
 * Encodes the transaction. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_tx - the transaction to encode.
 * @returns a tuple where:
 *   - 0: tx_bytes - the encoded transaction bytes.
 */
export const submitCosmosTxTxEncode = restful_grpc(g_tx => [SR_LCD_COSMOS_TX_SERVICE + 'encode', {
        tx: g_tx,
    }], 1);
/**
 * Encodes an Amino transaction from JSON to encoded bytes. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_amino_json -
 * @returns a tuple where:
 *   - 0: amino_binary - the 'amino_binary' response property
 */
export const submitCosmosTxTxEncodeAmino = restful_grpc(s_amino_json => [SR_LCD_COSMOS_TX_SERVICE + 'encode/amino', {
        amino_json: s_amino_json,
    }], 1);
/**
 * Decodes an Amino transaction from encoded bytes to JSON. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_amino_binary -
 * @returns a tuple where:
 *   - 0: amino_json - the 'amino_json' response property
 */
export const submitCosmosTxTxDecodeAmino = restful_grpc(atu8_amino_binary => [SR_LCD_COSMOS_TX_SERVICE + 'decode/amino', {
        amino_binary: safe_bytes_to_base64(atu8_amino_binary),
    }], 1);
/**
 * Encodes a `GetTxsEventRequest` protobuf message: the request type for the Service.TxsByEvents RPC method.
 * @param a_events - `events`: the list of transaction event type. Deprecated: post v0.47.x use query instead, which should contain a valid events query.
 * @param g_pagination - `pagination`: defines a pagination for the request. Deprecated: post v0.46.x use page and limit instead.
 * @param xc_order_by - `order_by`:
 * @param sg_page - `page`: the page number to query, starts at 1. If not provided, will default to first page.
 * @param sg_limit - `limit`: the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 * @param s_query - `query`: defines the transaction event query that is proxied to Tendermint's TxSearch RPC method. The query must be valid. Since cosmos-sdk 0.50
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxGetTxsEventRequest = (a_events, atu8_pagination, xc_order_by, sg_page, sg_limit, s_query) => Protobuf() // ...
    .S(a_events) // string[] events = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .v(xc_order_by) // OrderBy order_by = 3
    .g(sg_page) // uint64 page = 4
    .g(sg_limit) // uint64 limit = 5
    .s(s_query) // string query = 6
    .o;
/**
 * Encodes a `GetTxsEventResponse` protobuf message: the response type for the Service.TxsByEvents RPC method.
 * @param a_txs - `txs`: the list of queried transactions.
 * @param a_tx_responses - `tx_responses`: the list of queried TxResponses.
 * @param g_pagination - `pagination`: defines a pagination for the response. Deprecated: post v0.46.x use total instead.
 * @param sg_total - `total`: total number of results available
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxGetTxsEventResponse = (a_txs, a_tx_responses, atu8_pagination, sg_total) => Protobuf() // ...
    .B(a_txs) // Tx[] txs = 1
    .B(a_tx_responses) // TxResponse[] tx_responses = 2
    .b(atu8_pagination) // PageResponse pagination = 3
    .g(sg_total) // uint64 total = 4
    .o;
/**
 * Encodes a `BroadcastTxRequest` protobuf message: the request type for the Service.BroadcastTxRequest RPC method.
 * @param atu8_tx_bytes - `tx_bytes`: the raw transaction.
 * @param xc_mode - `mode`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxBroadcastTxRequest = (atu8_tx_bytes, xc_mode) => Protobuf() // ...
    .b(atu8_tx_bytes) // bytes tx_bytes = 1
    .v(xc_mode) // BroadcastMode mode = 2
    .o;
/**
 * Encodes a `BroadcastTxResponse` protobuf message: the response type for the Service.BroadcastTx method.
 * @param g_tx_response - `tx_response`: the queried TxResponses.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxBroadcastTxResponse = (atu8_tx_response) => Protobuf() // ...
    .b(atu8_tx_response) // TxResponse tx_response = 1
    .o;
/**
 * Encodes a `SimulateRequest` protobuf message: the request type for the Service.Simulate RPC method.
 * @param g_tx - `tx`: the transaction to simulate. Deprecated. Send raw tx bytes instead.
 * @param atu8_tx_bytes - `tx_bytes`: the raw transaction. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSimulateRequest = (atu8_tx, atu8_tx_bytes) => Protobuf() // ...
    .b(atu8_tx) // Tx tx = 1
    .b(atu8_tx_bytes) // bytes tx_bytes = 2
    .o;
/**
 * Encodes a `SimulateResponse` protobuf message: the response type for the Service.SimulateRPC method.
 * @param g_gas_info - `gas_info`: the information about gas used in the simulation.
 * @param g_result - `result`: the result of the simulation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxSimulateResponse = (atu8_gas_info, atu8_result) => Protobuf() // ...
    .b(atu8_gas_info) // GasInfo gas_info = 1
    .b(atu8_result) // Result result = 2
    .o;
/**
 * Encodes a `GetTxRequest` protobuf message: the request type for the Service.GetTx RPC method.
 * @param s_hash - `hash`: the tx hash to query, encoded as a hex string.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxGetTxRequest = (s_hash) => Protobuf() // ...
    .s(s_hash) // string hash = 1
    .o;
/**
 * Encodes a `GetTxResponse` protobuf message: the response type for the Service.GetTx method.
 * @param g_tx - `tx`: the queried transaction.
 * @param g_tx_response - `tx_response`: the queried TxResponses.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxGetTxResponse = (atu8_tx, atu8_tx_response) => Protobuf() // ...
    .b(atu8_tx) // Tx tx = 1
    .b(atu8_tx_response) // TxResponse tx_response = 2
    .o;
/**
 * Encodes a `GetBlockWithTxsRequest` protobuf message: the request type for the Service.GetBlockWithTxs RPC method. Since: cosmos-sdk 0.45.2
 * @param sg_height - `height`: the height of the block to query.
 * @param g_pagination - `pagination`: defines a pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxGetBlockWithTxsRequest = (sg_height, atu8_pagination) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `GetBlockWithTxsResponse` protobuf message: the response type for the Service.GetBlockWithTxs method. Since: cosmos-sdk 0.45.2
 * @param a_txs - `txs`: the transactions in the block.
 * @param g_block_id - `block_id`:
 * @param g_block - `block`:
 * @param g_pagination - `pagination`: defines a pagination for the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxGetBlockWithTxsResponse = (a_txs, atu8_block_id, atu8_block, atu8_pagination) => Protobuf() // ...
    .B(a_txs) // Tx[] txs = 1
    .b(atu8_block_id) // BlockID block_id = 2
    .b(atu8_block) // Block block = 3
    .b(atu8_pagination) // PageResponse pagination = 4
    .o;
/**
 * Encodes a `TxDecodeRequest` protobuf message: the request type for the Service.TxDecode RPC method. Since: cosmos-sdk 0.47
 * @param atu8_tx_bytes - `tx_bytes`: the raw transaction.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxDecodeRequest = (atu8_tx_bytes) => Protobuf() // ...
    .b(atu8_tx_bytes) // bytes tx_bytes = 1
    .o;
/**
 * Encodes a `TxDecodeResponse` protobuf message: the response type for the Service.TxDecode method. Since: cosmos-sdk 0.47
 * @param g_tx - `tx`: the decoded transaction.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxDecodeResponse = (atu8_tx) => Protobuf() // ...
    .b(atu8_tx) // Tx tx = 1
    .o;
/**
 * Encodes a `TxEncodeRequest` protobuf message: the request type for the Service.TxEncode RPC method. Since: cosmos-sdk 0.47
 * @param g_tx - `tx`: the transaction to encode.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxEncodeRequest = (atu8_tx) => Protobuf() // ...
    .b(atu8_tx) // Tx tx = 1
    .o;
/**
 * Encodes a `TxEncodeResponse` protobuf message: the response type for the Service.TxEncode method. Since: cosmos-sdk 0.47
 * @param atu8_tx_bytes - `tx_bytes`: the encoded transaction bytes.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxEncodeResponse = (atu8_tx_bytes) => Protobuf() // ...
    .b(atu8_tx_bytes) // bytes tx_bytes = 1
    .o;
/**
 * Encodes a `TxEncodeAminoRequest` protobuf message: the request type for the Service.TxEncodeAmino RPC method. Since: cosmos-sdk 0.47
 * @param s_amino_json - `amino_json`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxEncodeAminoRequest = (s_amino_json) => Protobuf() // ...
    .s(s_amino_json) // string amino_json = 1
    .o;
/**
 * Encodes a `TxEncodeAminoResponse` protobuf message: the response type for the Service.TxEncodeAmino RPC method. Since: cosmos-sdk 0.47
 * @param atu8_amino_binary - `amino_binary`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxEncodeAminoResponse = (atu8_amino_binary) => Protobuf() // ...
    .b(atu8_amino_binary) // bytes amino_binary = 1
    .o;
/**
 * Encodes a `TxDecodeAminoRequest` protobuf message: the request type for the Service.TxDecodeAmino RPC method. Since: cosmos-sdk 0.47
 * @param atu8_amino_binary - `amino_binary`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxDecodeAminoRequest = (atu8_amino_binary) => Protobuf() // ...
    .b(atu8_amino_binary) // bytes amino_binary = 1
    .o;
/**
 * Encodes a `TxDecodeAminoResponse` protobuf message: the response type for the Service.TxDecodeAmino RPC method. Since: cosmos-sdk 0.47
 * @param s_amino_json - `amino_json`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosTxTxDecodeAminoResponse = (s_amino_json) => Protobuf() // ...
    .s(s_amino_json) // string amino_json = 1
    .o;
/**
 * Decodes a protobuf GetTxsEventRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxGetTxsEventRequest}
 */
export const decodeCosmosTxGetTxsEventRequest = (atu8_payload) => decode_protobuf(atu8_payload, [4, 1, 1, 3, 3, 5], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf GetTxsEvent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxGetTxsEventResponse}
 */
export const decodeCosmosTxGetTxsEventResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 1, 3], [decodeCosmosTxTx, decodeCosmosBaseAbciTxResponse, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf BroadcastTxRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxBroadcastTxRequest}
 */
export const decodeCosmosTxBroadcastTxRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf BroadcastTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxBroadcastTxResponse}
 */
export const decodeCosmosTxBroadcastTxResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseAbciTxResponse]);
/**
 * Decodes a protobuf SimulateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSimulateRequest}
 */
export const decodeCosmosTxSimulateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosTxTx]);
/**
 * Decodes a protobuf Simulate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxSimulateResponse}
 */
export const decodeCosmosTxSimulateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosBaseAbciGasInfo, decodeCosmosBaseAbciResult]);
/**
 * Decodes a protobuf GetTxRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxGetTxRequest}
 */
export const decodeCosmosTxGetTxRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf GetTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxGetTxResponse}
 */
export const decodeCosmosTxGetTxResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosTxTx, decodeCosmosBaseAbciTxResponse]);
/**
 * Decodes a protobuf GetBlockWithTxsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxGetBlockWithTxsRequest}
 */
export const decodeCosmosTxGetBlockWithTxsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf GetBlockWithTxs message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxGetBlockWithTxsResponse}
 */
export const decodeCosmosTxGetBlockWithTxsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 1, 1], [decodeCosmosTxTx, decodeTendermintTypesBlockID, decodeTendermintTypesBlock, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf TxDecodeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxDecodeRequest}
 */
export const decodeCosmosTxTxDecodeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf TxDecode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxDecodeResponse}
 */
export const decodeCosmosTxTxDecodeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosTxTx]);
/**
 * Decodes a protobuf TxEncodeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxEncodeRequest}
 */
export const decodeCosmosTxTxEncodeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosTxTx]);
/**
 * Decodes a protobuf TxEncode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxEncodeResponse}
 */
export const decodeCosmosTxTxEncodeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf TxEncodeAminoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxEncodeAminoRequest}
 */
export const decodeCosmosTxTxEncodeAminoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf TxEncodeAmino message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxEncodeAminoResponse}
 */
export const decodeCosmosTxTxEncodeAminoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf TxDecodeAminoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxDecodeAminoRequest}
 */
export const decodeCosmosTxTxDecodeAminoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf TxDecodeAmino message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosTxTxDecodeAminoResponse}
 */
export const decodeCosmosTxTxDecodeAminoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link CosmosTxGetTxsEventRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: events - the list of transaction event type. Deprecated: post v0.47.x use query instead, which should contain a valid events query.
 *   - 1: pagination - defines a pagination for the request. Deprecated: post v0.46.x use page and limit instead.
 *   - 2: order_by -
 *   - 3: page - the page number to query, starts at 1. If not provided, will default to first page.
 *   - 4: limit - the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 *   - 5: query - defines the transaction event query that is proxied to Tendermint's TxSearch RPC method. The query must be valid. Since cosmos-sdk 0.50
 */
export const destructCosmosTxGetTxsEventRequest = (g_struct) => [g_struct.events, g_struct.pagination, g_struct.order_by, g_struct.page, g_struct.limit, g_struct.query];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_GET_TXS_EVENT_REQUEST = '/cosmos.tx.v1beta1.GetTxsEventRequest';
/**
 * Destructures the fields of a {@link CosmosTxGetTxsEventResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs - the list of queried transactions.
 *   - 1: tx_responses - the list of queried TxResponses.
 *   - 2: pagination - defines a pagination for the response. Deprecated: post v0.46.x use total instead.
 *   - 3: total - total number of results available
 */
export const destructCosmosTxGetTxsEventResponse = (g_struct) => [g_struct.txs, g_struct.tx_responses, g_struct.pagination, g_struct.total];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_GET_TXS_EVENT_RESPONSE = '/cosmos.tx.v1beta1.GetTxsEventResponse';
/**
 * Destructures the fields of a {@link CosmosTxBroadcastTxRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_bytes - the raw transaction.
 *   - 1: mode -
 */
export const destructCosmosTxBroadcastTxRequest = (g_struct) => [safe_base64_to_bytes(g_struct.tx_bytes), g_struct.mode];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_BROADCAST_TX_REQUEST = '/cosmos.tx.v1beta1.BroadcastTxRequest';
/**
 * Destructures the fields of a {@link CosmosTxBroadcastTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_response - the queried TxResponses.
 */
export const destructCosmosTxBroadcastTxResponse = (g_struct) => [g_struct.tx_response];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_BROADCAST_TX_RESPONSE = '/cosmos.tx.v1beta1.BroadcastTxResponse';
/**
 * Destructures the fields of a {@link CosmosTxSimulateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - the transaction to simulate. Deprecated. Send raw tx bytes instead.
 *   - 1: tx_bytes - the raw transaction. Since: cosmos-sdk 0.43
 */
export const destructCosmosTxSimulateRequest = (g_struct) => [g_struct.tx, safe_base64_to_bytes(g_struct.tx_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIMULATE_REQUEST = '/cosmos.tx.v1beta1.SimulateRequest';
/**
 * Destructures the fields of a {@link CosmosTxSimulateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gas_info - the information about gas used in the simulation.
 *   - 1: result - the result of the simulation.
 */
export const destructCosmosTxSimulateResponse = (g_struct) => [g_struct.gas_info, g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_SIMULATE_RESPONSE = '/cosmos.tx.v1beta1.SimulateResponse';
/**
 * Destructures the fields of a {@link CosmosTxGetTxRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - the tx hash to query, encoded as a hex string.
 */
export const destructCosmosTxGetTxRequest = (g_struct) => [g_struct.hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_GET_TX_REQUEST = '/cosmos.tx.v1beta1.GetTxRequest';
/**
 * Destructures the fields of a {@link CosmosTxGetTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - the queried transaction.
 *   - 1: tx_response - the queried TxResponses.
 */
export const destructCosmosTxGetTxResponse = (g_struct) => [g_struct.tx, g_struct.tx_response];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_GET_TX_RESPONSE = '/cosmos.tx.v1beta1.GetTxResponse';
/**
 * Destructures the fields of a {@link CosmosTxGetBlockWithTxsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - the height of the block to query.
 *   - 1: pagination - defines a pagination for the request.
 */
export const destructCosmosTxGetBlockWithTxsRequest = (g_struct) => [g_struct.height, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_GET_BLOCK_WITH_TXS_REQUEST = '/cosmos.tx.v1beta1.GetBlockWithTxsRequest';
/**
 * Destructures the fields of a {@link CosmosTxGetBlockWithTxsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs - the transactions in the block.
 *   - 1: block_id -
 *   - 2: block -
 *   - 3: pagination - defines a pagination for the response.
 */
export const destructCosmosTxGetBlockWithTxsResponse = (g_struct) => [g_struct.txs, g_struct.block_id, g_struct.block, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_GET_BLOCK_WITH_TXS_RESPONSE = '/cosmos.tx.v1beta1.GetBlockWithTxsResponse';
/**
 * Destructures the fields of a {@link CosmosTxTxDecodeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_bytes - the raw transaction.
 */
export const destructCosmosTxTxDecodeRequest = (g_struct) => [safe_base64_to_bytes(g_struct.tx_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_DECODE_REQUEST = '/cosmos.tx.v1beta1.TxDecodeRequest';
/**
 * Destructures the fields of a {@link CosmosTxTxDecodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - the decoded transaction.
 */
export const destructCosmosTxTxDecodeResponse = (g_struct) => [g_struct.tx];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_DECODE_RESPONSE = '/cosmos.tx.v1beta1.TxDecodeResponse';
/**
 * Destructures the fields of a {@link CosmosTxTxEncodeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - the transaction to encode.
 */
export const destructCosmosTxTxEncodeRequest = (g_struct) => [g_struct.tx];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_ENCODE_REQUEST = '/cosmos.tx.v1beta1.TxEncodeRequest';
/**
 * Destructures the fields of a {@link CosmosTxTxEncodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_bytes - the encoded transaction bytes.
 */
export const destructCosmosTxTxEncodeResponse = (g_struct) => [safe_base64_to_bytes(g_struct.tx_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_ENCODE_RESPONSE = '/cosmos.tx.v1beta1.TxEncodeResponse';
/**
 * Destructures the fields of a {@link CosmosTxTxEncodeAminoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amino_json -
 */
export const destructCosmosTxTxEncodeAminoRequest = (g_struct) => [g_struct.amino_json];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_ENCODE_AMINO_REQUEST = '/cosmos.tx.v1beta1.TxEncodeAminoRequest';
/**
 * Destructures the fields of a {@link CosmosTxTxEncodeAminoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amino_binary -
 */
export const destructCosmosTxTxEncodeAminoResponse = (g_struct) => [safe_base64_to_bytes(g_struct.amino_binary)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_ENCODE_AMINO_RESPONSE = '/cosmos.tx.v1beta1.TxEncodeAminoResponse';
/**
 * Destructures the fields of a {@link CosmosTxTxDecodeAminoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amino_binary -
 */
export const destructCosmosTxTxDecodeAminoRequest = (g_struct) => [safe_base64_to_bytes(g_struct.amino_binary)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_DECODE_AMINO_REQUEST = '/cosmos.tx.v1beta1.TxDecodeAminoRequest';
/**
 * Destructures the fields of a {@link CosmosTxTxDecodeAminoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amino_json -
 */
export const destructCosmosTxTxDecodeAminoResponse = (g_struct) => [g_struct.amino_json];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_TX_TX_DECODE_AMINO_RESPONSE = '/cosmos.tx.v1beta1.TxDecodeAminoResponse';
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.OrderBy`.
 *
 * **ORDER_BY_UNSPECIFIED** - specifies an unknown sorting order. OrderBy defaults to ASC in this case.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxOrderBy}
 */
export const XC_PROTO_COSMOS_TX_ORDER_BY_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.tx.v1beta1.OrderBy`.
 *
 * **ORDER_BY_UNSPECIFIED** - specifies an unknown sorting order. OrderBy defaults to ASC in this case.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxOrderBy}
 */
export const SI_JSON_COSMOS_TX_ORDER_BY_UNSPECIFIED = 'ORDER_BY_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.OrderBy`.
 *
 * **ORDER_BY_ASC** - defines ascending order
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxOrderBy}
 */
export const XC_PROTO_COSMOS_TX_ORDER_BY_ASC = 1;
/**
 * JSON enum value for `cosmos.tx.v1beta1.OrderBy`.
 *
 * **ORDER_BY_ASC** - defines ascending order
 *
 * Belongs to enum type {@link JsonEnumCosmosTxOrderBy}
 */
export const SI_JSON_COSMOS_TX_ORDER_BY_ASC = 'ORDER_BY_ASC';
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.OrderBy`.
 *
 * **ORDER_BY_DESC** - defines descending order
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxOrderBy}
 */
export const XC_PROTO_COSMOS_TX_ORDER_BY_DESC = 2;
/**
 * JSON enum value for `cosmos.tx.v1beta1.OrderBy`.
 *
 * **ORDER_BY_DESC** - defines descending order
 *
 * Belongs to enum type {@link JsonEnumCosmosTxOrderBy}
 */
export const SI_JSON_COSMOS_TX_ORDER_BY_DESC = 'ORDER_BY_DESC';
/**
 * Maps a protobuf enum int value for `cosmos.tx.v1beta1.OrderBy` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosTxOrderBy = {
    [XC_PROTO_COSMOS_TX_ORDER_BY_UNSPECIFIED]: SI_JSON_COSMOS_TX_ORDER_BY_UNSPECIFIED,
    [XC_PROTO_COSMOS_TX_ORDER_BY_ASC]: SI_JSON_COSMOS_TX_ORDER_BY_ASC,
    [XC_PROTO_COSMOS_TX_ORDER_BY_DESC]: SI_JSON_COSMOS_TX_ORDER_BY_DESC,
};
/**
 * Maps a JSON enum string value for `cosmos.tx.v1beta1.OrderBy` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosTxOrderBy = {
    [SI_JSON_COSMOS_TX_ORDER_BY_UNSPECIFIED]: XC_PROTO_COSMOS_TX_ORDER_BY_UNSPECIFIED,
    [SI_JSON_COSMOS_TX_ORDER_BY_ASC]: XC_PROTO_COSMOS_TX_ORDER_BY_ASC,
    [SI_JSON_COSMOS_TX_ORDER_BY_DESC]: XC_PROTO_COSMOS_TX_ORDER_BY_DESC,
};
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_UNSPECIFIED** - zero-value for mode ordering
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxBroadcastMode}
 */
export const XC_PROTO_COSMOS_TX_BROADCAST_MODE_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_UNSPECIFIED** - zero-value for mode ordering
 *
 * Belongs to enum type {@link JsonEnumCosmosTxBroadcastMode}
 */
export const SI_JSON_COSMOS_TX_BROADCAST_MODE_UNSPECIFIED = 'BROADCAST_MODE_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_BLOCK** - Deprecated: use BROADCAST_MODE_SYNC instead, BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxBroadcastMode}
 */
export const XC_PROTO_COSMOS_TX_BROADCAST_MODE_BLOCK = 1;
/**
 * JSON enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_BLOCK** - Deprecated: use BROADCAST_MODE_SYNC instead, BROADCAST_MODE_BLOCK is not supported by the SDK from v0.47.x onwards.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxBroadcastMode}
 */
export const SI_JSON_COSMOS_TX_BROADCAST_MODE_BLOCK = 'BROADCAST_MODE_BLOCK';
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_SYNC** - defines a tx broadcasting mode where the client waits for a CheckTx execution response only.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxBroadcastMode}
 */
export const XC_PROTO_COSMOS_TX_BROADCAST_MODE_SYNC = 2;
/**
 * JSON enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_SYNC** - defines a tx broadcasting mode where the client waits for a CheckTx execution response only.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxBroadcastMode}
 */
export const SI_JSON_COSMOS_TX_BROADCAST_MODE_SYNC = 'BROADCAST_MODE_SYNC';
/**
 * Protobuf enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_ASYNC** - defines a tx broadcasting mode where the client returns immediately.
 *
 * Belongs to enum type {@link ProtoEnumCosmosTxBroadcastMode}
 */
export const XC_PROTO_COSMOS_TX_BROADCAST_MODE_ASYNC = 3;
/**
 * JSON enum value for `cosmos.tx.v1beta1.BroadcastMode`.
 *
 * **BROADCAST_MODE_ASYNC** - defines a tx broadcasting mode where the client returns immediately.
 *
 * Belongs to enum type {@link JsonEnumCosmosTxBroadcastMode}
 */
export const SI_JSON_COSMOS_TX_BROADCAST_MODE_ASYNC = 'BROADCAST_MODE_ASYNC';
/**
 * Maps a protobuf enum int value for `cosmos.tx.v1beta1.BroadcastMode` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosTxBroadcastMode = {
    [XC_PROTO_COSMOS_TX_BROADCAST_MODE_UNSPECIFIED]: SI_JSON_COSMOS_TX_BROADCAST_MODE_UNSPECIFIED,
    [XC_PROTO_COSMOS_TX_BROADCAST_MODE_BLOCK]: SI_JSON_COSMOS_TX_BROADCAST_MODE_BLOCK,
    [XC_PROTO_COSMOS_TX_BROADCAST_MODE_SYNC]: SI_JSON_COSMOS_TX_BROADCAST_MODE_SYNC,
    [XC_PROTO_COSMOS_TX_BROADCAST_MODE_ASYNC]: SI_JSON_COSMOS_TX_BROADCAST_MODE_ASYNC,
};
/**
 * Maps a JSON enum string value for `cosmos.tx.v1beta1.BroadcastMode` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosTxBroadcastMode = {
    [SI_JSON_COSMOS_TX_BROADCAST_MODE_UNSPECIFIED]: XC_PROTO_COSMOS_TX_BROADCAST_MODE_UNSPECIFIED,
    [SI_JSON_COSMOS_TX_BROADCAST_MODE_BLOCK]: XC_PROTO_COSMOS_TX_BROADCAST_MODE_BLOCK,
    [SI_JSON_COSMOS_TX_BROADCAST_MODE_SYNC]: XC_PROTO_COSMOS_TX_BROADCAST_MODE_SYNC,
    [SI_JSON_COSMOS_TX_BROADCAST_MODE_ASYNC]: XC_PROTO_COSMOS_TX_BROADCAST_MODE_ASYNC,
};
//# sourceMappingURL=service.js.map