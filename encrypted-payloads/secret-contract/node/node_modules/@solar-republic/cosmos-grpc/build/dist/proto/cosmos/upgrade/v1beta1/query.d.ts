/// <reference types="node" />
import type { WeakInt64Str, WeakAccountAddr, CwInt64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosUpgradePlan, DecodedCosmosUpgradePlan, CosmosUpgradeModuleVersion, DecodedCosmosUpgradeModuleVersion } from './upgrade.js';
export type EncodedCosmosUpgradeQueryCurrentPlanRequest = Encoded<'/cosmos.upgrade.v1beta1.QueryCurrentPlanRequest'>;
export type EncodedCosmosUpgradeQueryCurrentPlanResponse = Encoded<'/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse'>;
export type EncodedCosmosUpgradeQueryAppliedPlanRequest = Encoded<'/cosmos.upgrade.v1beta1.QueryAppliedPlanRequest'>;
export type EncodedCosmosUpgradeQueryAppliedPlanResponse = Encoded<'/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse'>;
export type EncodedCosmosUpgradeQueryUpgradedConsensusStateRequest = Encoded<'/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest'>;
export type EncodedCosmosUpgradeQueryUpgradedConsensusStateResponse = Encoded<'/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse'>;
export type EncodedCosmosUpgradeQueryModuleVersionsRequest = Encoded<'/cosmos.upgrade.v1beta1.QueryModuleVersionsRequest'>;
export type EncodedCosmosUpgradeQueryModuleVersionsResponse = Encoded<'/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse'>;
export type EncodedCosmosUpgradeQueryAuthorityRequest = Encoded<'/cosmos.upgrade.v1beta1.QueryAuthorityRequest'>;
export type EncodedCosmosUpgradeQueryAuthorityResponse = Encoded<'/cosmos.upgrade.v1beta1.QueryAuthorityResponse'>;
/**
 * Queries the current upgrade plan.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: plan - the current upgrade plan.
 */
export declare const queryCosmosUpgradeCurrentPlan: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosUpgradeQueryCurrentPlanResponse>>;
/**
 * Queries a previously applied upgrade plan by its name.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_name - the name of the applied plan to query for.
 * @returns a tuple where:
 *   - 0: height - the block height at which the plan was applied.
 */
export declare const queryCosmosUpgradeAppliedPlan: (z_req: string | ({
    origin: string;
} & RequestInit), s_name?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosUpgradeQueryAppliedPlanResponse>>;
/**
 * Queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_last_height - last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 * @returns a tuple where:
 *   - 0: upgraded_consensus_state - Since: cosmos-sdk 0.43
 */
export declare const queryCosmosUpgradeUpgradedConsensusState: (z_req: string | ({
    origin: string;
} & RequestInit), sg_last_height?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosUpgradeQueryUpgradedConsensusStateResponse>>;
/**
 * Queries the list of module versions from state. Since: cosmos-sdk 0.43
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_module_name - a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 * @returns a tuple where:
 *   - 0: module_versions - a list of module names with their consensus versions.
 */
export declare const queryCosmosUpgradeModuleVersions: (z_req: string | ({
    origin: string;
} & RequestInit), s_module_name?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosUpgradeQueryModuleVersionsResponse>>;
/**
 * Returns the account with authority to conduct upgrades Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: address - the 'address' response property
 */
export declare const queryCosmosUpgradeAuthority: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosUpgradeQueryAuthorityResponse>>;
/**
 * Encodes a `QueryCurrentPlanRequest` protobuf message: the request type for the Query/CurrentPlan RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryCurrentPlanRequest: () => EncodedCosmosUpgradeQueryCurrentPlanRequest;
/**
 * Encodes a `QueryCurrentPlanResponse` protobuf message: the response type for the Query/CurrentPlan RPC method.
 * @param g_plan - `plan`: the current upgrade plan.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryCurrentPlanResponse: (atu8_plan?: Opt<Encoded<'/cosmos.upgrade.v1beta1.Plan'>>) => EncodedCosmosUpgradeQueryCurrentPlanResponse;
/**
 * Encodes a `QueryAppliedPlanRequest` protobuf message: QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC method.
 * @param s_name - `name`: the name of the applied plan to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryAppliedPlanRequest: (s_name?: Opt<string>) => EncodedCosmosUpgradeQueryAppliedPlanRequest;
/**
 * Encodes a `QueryAppliedPlanResponse` protobuf message: the response type for the Query/AppliedPlan RPC method.
 * @param sg_height - `height`: the block height at which the plan was applied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryAppliedPlanResponse: (sg_height?: Opt<WeakInt64Str>) => EncodedCosmosUpgradeQueryAppliedPlanResponse;
/**
 * Encodes a `QueryUpgradedConsensusStateRequest` protobuf message: the request type for the Query/UpgradedConsensusState RPC method.
 * @param sg_last_height - `last_height`: last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryUpgradedConsensusStateRequest: (sg_last_height?: Opt<WeakInt64Str>) => EncodedCosmosUpgradeQueryUpgradedConsensusStateRequest;
/**
 * Encodes a `QueryUpgradedConsensusStateResponse` protobuf message: the response type for the Query/UpgradedConsensusState RPC method.
 * @param atu8_upgraded_consensus_state - `upgraded_consensus_state`: Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryUpgradedConsensusStateResponse: (atu8_upgraded_consensus_state?: Opt<Uint8Array>) => EncodedCosmosUpgradeQueryUpgradedConsensusStateResponse;
/**
 * Encodes a `QueryModuleVersionsRequest` protobuf message: the request type for the Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
 * @param s_module_name - `module_name`: a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryModuleVersionsRequest: (s_module_name?: Opt<string>) => EncodedCosmosUpgradeQueryModuleVersionsRequest;
/**
 * Encodes a `QueryModuleVersionsResponse` protobuf message: the response type for the Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
 * @param a_module_versions - `module_versions`: a list of module names with their consensus versions.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryModuleVersionsResponse: (a_module_versions?: Opt<Encoded<'/cosmos.upgrade.v1beta1.ModuleVersion'>[]>) => EncodedCosmosUpgradeQueryModuleVersionsResponse;
/**
 * Encodes a `QueryAuthorityRequest` protobuf message: the request type for Query/Authority Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryAuthorityRequest: () => EncodedCosmosUpgradeQueryAuthorityRequest;
/**
 * Encodes a `QueryAuthorityResponse` protobuf message: the response type for Query/Authority Since: cosmos-sdk 0.46
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeQueryAuthorityResponse: (sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosUpgradeQueryAuthorityResponse;
/**
 * A decoded protobuf QueryCurrentPlanRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosUpgradeQueryCurrentPlanRequest = [];
/**
 * Decodes a protobuf QueryCurrentPlanRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryCurrentPlanRequest}
 */
export declare const decodeCosmosUpgradeQueryCurrentPlanRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryCurrentPlan message
 *
 * Alias for: plan - the current upgrade plan.
 */
export type DecodedCosmosUpgradeQueryCurrentPlanResponse = [
    a_plan?: DecodedCosmosUpgradePlan
];
/**
 * Decodes a protobuf QueryCurrentPlan message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryCurrentPlanResponse}
 */
export declare const decodeCosmosUpgradeQueryCurrentPlanResponse: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryCurrentPlanResponse;
/**
 * A decoded protobuf QueryAppliedPlanRequest message
 *
 * Alias for: name - the name of the applied plan to query for.
 */
export type DecodedCosmosUpgradeQueryAppliedPlanRequest = [
    s_name?: string
];
/**
 * Decodes a protobuf QueryAppliedPlanRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAppliedPlanRequest}
 */
export declare const decodeCosmosUpgradeQueryAppliedPlanRequest: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryAppliedPlanRequest;
/**
 * A decoded protobuf QueryAppliedPlan message
 *
 * Alias for: height - the block height at which the plan was applied.
 */
export type DecodedCosmosUpgradeQueryAppliedPlanResponse = [
    sg_height?: CwInt64
];
/**
 * Decodes a protobuf QueryAppliedPlan message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAppliedPlanResponse}
 */
export declare const decodeCosmosUpgradeQueryAppliedPlanResponse: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryAppliedPlanResponse;
/**
 * A decoded protobuf QueryUpgradedConsensusStateRequest message
 *
 * Alias for: last_height - last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 */
export type DecodedCosmosUpgradeQueryUpgradedConsensusStateRequest = [
    sg_last_height?: CwInt64
];
/**
 * Decodes a protobuf QueryUpgradedConsensusStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryUpgradedConsensusStateRequest}
 */
export declare const decodeCosmosUpgradeQueryUpgradedConsensusStateRequest: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryUpgradedConsensusStateRequest;
/**
 * A decoded protobuf QueryUpgradedConsensusState message
 *
 * Alias for: upgraded_consensus_state - Since: cosmos-sdk 0.43
 */
export type DecodedCosmosUpgradeQueryUpgradedConsensusStateResponse = [
    w_0?: undefined,
    atu8_upgraded_consensus_state?: Uint8Array
];
/**
 * Decodes a protobuf QueryUpgradedConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosUpgradeQueryUpgradedConsensusStateResponse}
 */
export declare const decodeCosmosUpgradeQueryUpgradedConsensusStateResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosUpgradeQueryUpgradedConsensusStateResponse;
/**
 * A decoded protobuf QueryModuleVersionsRequest message
 *
 * Alias for: module_name - a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 */
export type DecodedCosmosUpgradeQueryModuleVersionsRequest = [
    s_module_name?: string
];
/**
 * Decodes a protobuf QueryModuleVersionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryModuleVersionsRequest}
 */
export declare const decodeCosmosUpgradeQueryModuleVersionsRequest: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryModuleVersionsRequest;
/**
 * A decoded protobuf QueryModuleVersions message
 *
 * Alias for: module_versions - a list of module names with their consensus versions.
 */
export type DecodedCosmosUpgradeQueryModuleVersionsResponse = [
    a_module_versions?: DecodedCosmosUpgradeModuleVersion[]
];
/**
 * Decodes a protobuf QueryModuleVersions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryModuleVersionsResponse}
 */
export declare const decodeCosmosUpgradeQueryModuleVersionsResponse: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryModuleVersionsResponse;
/**
 * A decoded protobuf QueryAuthorityRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosUpgradeQueryAuthorityRequest = [];
/**
 * Decodes a protobuf QueryAuthorityRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAuthorityRequest}
 */
export declare const decodeCosmosUpgradeQueryAuthorityRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryAuthority message
 *
 * Alias for: address -
 */
export type DecodedCosmosUpgradeQueryAuthorityResponse = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryAuthority message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAuthorityResponse}
 */
export declare const decodeCosmosUpgradeQueryAuthorityResponse: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeQueryAuthorityResponse;
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryCurrentPlanRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosUpgradeQueryCurrentPlanRequest: (g_struct: CosmosUpgradeQueryCurrentPlanRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_CURRENT_PLAN_REQUEST = "/cosmos.upgrade.v1beta1.QueryCurrentPlanRequest";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryCurrentPlanRequest` - the request type for the Query/CurrentPlan RPC method.
 */
export type CosmosUpgradeQueryCurrentPlanRequest = {};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryCurrentPlanResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: plan - the current upgrade plan.
 */
export declare const destructCosmosUpgradeQueryCurrentPlanResponse: (g_struct: CosmosUpgradeQueryCurrentPlanResponse) => [plan?: CosmosUpgradePlan];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_CURRENT_PLAN_RESPONSE = "/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryCurrentPlanResponse` - the response type for the Query/CurrentPlan RPC method.
 */
export type CosmosUpgradeQueryCurrentPlanResponse = {
    plan?: CosmosUpgradePlan | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAppliedPlanRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - the name of the applied plan to query for.
 */
export declare const destructCosmosUpgradeQueryAppliedPlanRequest: (g_struct: CosmosUpgradeQueryAppliedPlanRequest) => [name?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_APPLIED_PLAN_REQUEST = "/cosmos.upgrade.v1beta1.QueryAppliedPlanRequest";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryAppliedPlanRequest` - QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC method.
 */
export type CosmosUpgradeQueryAppliedPlanRequest = {
    name?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAppliedPlanResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - the block height at which the plan was applied.
 */
export declare const destructCosmosUpgradeQueryAppliedPlanResponse: (g_struct: CosmosUpgradeQueryAppliedPlanResponse) => [height?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_APPLIED_PLAN_RESPONSE = "/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryAppliedPlanResponse` - the response type for the Query/AppliedPlan RPC method.
 */
export type CosmosUpgradeQueryAppliedPlanResponse = {
    height?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryUpgradedConsensusStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: last_height - last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 */
export declare const destructCosmosUpgradeQueryUpgradedConsensusStateRequest: (g_struct: CosmosUpgradeQueryUpgradedConsensusStateRequest) => [last_height?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_UPGRADED_CONSENSUS_STATE_REQUEST = "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest` - the request type for the Query/UpgradedConsensusState RPC method.
 */
export type CosmosUpgradeQueryUpgradedConsensusStateRequest = {
    last_height?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryUpgradedConsensusStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: upgraded_consensus_state - Since: cosmos-sdk 0.43
 */
export declare const destructCosmosUpgradeQueryUpgradedConsensusStateResponse: (g_struct: CosmosUpgradeQueryUpgradedConsensusStateResponse) => [EMPTY?: void, upgraded_consensus_state?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_UPGRADED_CONSENSUS_STATE_RESPONSE = "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse` - the response type for the Query/UpgradedConsensusState RPC method.
 */
export type CosmosUpgradeQueryUpgradedConsensusStateResponse = {
    upgraded_consensus_state?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryModuleVersionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module_name - a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 */
export declare const destructCosmosUpgradeQueryModuleVersionsRequest: (g_struct: CosmosUpgradeQueryModuleVersionsRequest) => [module_name?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_MODULE_VERSIONS_REQUEST = "/cosmos.upgrade.v1beta1.QueryModuleVersionsRequest";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryModuleVersionsRequest` - the request type for the Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
 */
export type CosmosUpgradeQueryModuleVersionsRequest = {
    module_name?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryModuleVersionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module_versions - a list of module names with their consensus versions.
 */
export declare const destructCosmosUpgradeQueryModuleVersionsResponse: (g_struct: CosmosUpgradeQueryModuleVersionsResponse) => [module_versions?: CosmosUpgradeModuleVersion[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_MODULE_VERSIONS_RESPONSE = "/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryModuleVersionsResponse` - the response type for the Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
 */
export type CosmosUpgradeQueryModuleVersionsResponse = {
    module_versions?: CosmosUpgradeModuleVersion[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAuthorityRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosUpgradeQueryAuthorityRequest: (g_struct: CosmosUpgradeQueryAuthorityRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_AUTHORITY_REQUEST = "/cosmos.upgrade.v1beta1.QueryAuthorityRequest";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryAuthorityRequest` - the request type for Query/Authority Since: cosmos-sdk 0.46
 */
export type CosmosUpgradeQueryAuthorityRequest = {};
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAuthorityResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export declare const destructCosmosUpgradeQueryAuthorityResponse: (g_struct: CosmosUpgradeQueryAuthorityResponse) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_AUTHORITY_RESPONSE = "/cosmos.upgrade.v1beta1.QueryAuthorityResponse";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.QueryAuthorityResponse` - the response type for Query/Authority Since: cosmos-sdk 0.46
 */
export type CosmosUpgradeQueryAuthorityResponse = {
    address?: CwAccountAddr | undefined;
};
