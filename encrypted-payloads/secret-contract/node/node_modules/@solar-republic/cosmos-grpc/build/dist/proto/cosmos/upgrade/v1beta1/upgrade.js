import { parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, any } from '../../../../api/protobuf-writer.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `SoftwareUpgradeProposal` protobuf message wrapped in the `Any` container: a gov Content type for initiating a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgSoftwareUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @param g_plan - `plan`: of the proposal
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anySoftwareUpgradeProposal = (s_title, s_description, atu8_plan) => any('/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .b(atu8_plan) // Plan plan = 3
    .o);
/**
 * Encodes a `CancelSoftwareUpgradeProposal` protobuf message wrapped in the `Any` container: a gov Content type for cancelling a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgCancelUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyCancelSoftwareUpgradeProposal = (s_title, s_description) => any('/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .o);
/**
 * Encodes a `Plan` protobuf message: specifies information about a planned upgrade and when it should occur.
 * @param s_name - `name`: Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special "on-upgrade" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
 * @param xt_time - `time`: Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
 * @param sg_height - `height`: The height at which the upgrade must be performed.
 * @param s_info - `info`: Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to
 * @param atu8_upgraded_client_state - `upgraded_client_state`: Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradePlan = (s_name, xt_time, sg_height, s_info, atu8_upgraded_client_state) => Protobuf() // ...
    .s(s_name) // string name = 1
    .b(temporal(xt_time)) // Timestamp time = 2
    .g(sg_height) // int32 height = 3
    .s(s_info) // string info = 4
    .b(atu8_upgraded_client_state) // Any upgraded_client_state = 5
    .o;
/**
 * Encodes a `SoftwareUpgradeProposal` protobuf message: a gov Content type for initiating a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgSoftwareUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @param g_plan - `plan`: of the proposal
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeSoftwareUpgradeProposal = (s_title, s_description, atu8_plan) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .b(atu8_plan) // Plan plan = 3
    .o;
/**
 * Encodes a `CancelSoftwareUpgradeProposal` protobuf message: a gov Content type for cancelling a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgCancelUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeCancelSoftwareUpgradeProposal = (s_title, s_description) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .o;
/**
 * Encodes a `ModuleVersion` protobuf message: specifies a module and its consensus version. Since: cosmos-sdk 0.43
 * @param s_name - `name`: of the app module
 * @param sg_version - `version`: consensus version of the app module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeModuleVersion = (s_name, sg_version) => Protobuf() // ...
    .s(s_name) // string name = 1
    .g(sg_version) // uint64 version = 2
    .o;
/**
 * Decodes a protobuf Plan message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradePlan}
 */
export const decodeCosmosUpgradePlan = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1], 3, 5, 1], [0, decode_temporal, 0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SoftwareUpgradeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeSoftwareUpgradeProposal}
 */
export const decodeCosmosUpgradeSoftwareUpgradeProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeCosmosUpgradePlan]);
/**
 * Decodes a protobuf CancelSoftwareUpgradeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeCancelSoftwareUpgradeProposal}
 */
export const decodeCosmosUpgradeCancelSoftwareUpgradeProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ModuleVersion message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeModuleVersion}
 */
export const decodeCosmosUpgradeModuleVersion = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Destructures the fields of a {@link CosmosUpgradePlan} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special "on-upgrade" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
 *   - 1: time - Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
 *   - 2: height - The height at which the upgrade must be performed.
 *   - 3: info - Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to
 *   - 4: upgraded_client_state - Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.
 */
export const destructCosmosUpgradePlan = (g_struct) => [g_struct.name, parse_timestamp(g_struct.time), g_struct.height, g_struct.info, g_struct.upgraded_client_state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_PLAN = '/cosmos.upgrade.v1beta1.Plan';
/**
 * Destructures the fields of a {@link CosmosUpgradeSoftwareUpgradeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - of the proposal
 *   - 1: description - of the proposal
 *   - 2: plan - of the proposal
 */
export const destructCosmosUpgradeSoftwareUpgradeProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.plan];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_SOFTWARE_UPGRADE_PROPOSAL = '/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal';
/**
 * Destructures the fields of a {@link CosmosUpgradeCancelSoftwareUpgradeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - of the proposal
 *   - 1: description - of the proposal
 */
export const destructCosmosUpgradeCancelSoftwareUpgradeProposal = (g_struct) => [g_struct.title, g_struct.description];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_CANCEL_SOFTWARE_UPGRADE_PROPOSAL = '/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal';
/**
 * Destructures the fields of a {@link CosmosUpgradeModuleVersion} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - of the app module
 *   - 1: version - consensus version of the app module
 */
export const destructCosmosUpgradeModuleVersion = (g_struct) => [g_struct.name, g_struct.version];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_MODULE_VERSION = '/cosmos.upgrade.v1beta1.ModuleVersion';
//# sourceMappingURL=upgrade.js.map