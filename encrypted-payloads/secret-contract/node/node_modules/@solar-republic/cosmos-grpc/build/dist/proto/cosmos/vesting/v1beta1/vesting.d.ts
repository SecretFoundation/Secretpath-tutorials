import type { WeakInt64Str, SlimCoin, CwInt64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosAuthBaseAccount, DecodedCosmosAuthBaseAccount } from '../../auth/v1beta1/auth.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type EncodedCosmosVestingBaseVestingAccount = Encoded<'/cosmos.vesting.v1beta1.BaseVestingAccount'>;
export type EncodedCosmosVestingContinuousVestingAccount = Encoded<'/cosmos.vesting.v1beta1.ContinuousVestingAccount'>;
export type EncodedCosmosVestingDelayedVestingAccount = Encoded<'/cosmos.vesting.v1beta1.DelayedVestingAccount'>;
export type EncodedCosmosVestingPeriod = Encoded<'/cosmos.vesting.v1beta1.Period'>;
export type EncodedCosmosVestingPeriodicVestingAccount = Encoded<'/cosmos.vesting.v1beta1.PeriodicVestingAccount'>;
export type EncodedCosmosVestingPermanentLockedAccount = Encoded<'/cosmos.vesting.v1beta1.PermanentLockedAccount'>;
/**
 * Encodes a `BaseVestingAccount` protobuf message: implements the VestingAccount interface. It contains all the necessary fields needed for any vesting account implementation.
 * @param g_base_account - `base_account`:
 * @param a_original_vestings - `original_vesting`:
 * @param a_delegated_frees - `delegated_free`:
 * @param a_delegated_vestings - `delegated_vesting`:
 * @param sg_end_time - `end_time`: Vesting end time, as unix timestamp (in seconds).
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosVestingBaseVestingAccount: (atu8_base_account?: Opt<Encoded<'/cosmos.auth.v1beta1.BaseAccount'>>, a_original_vestings?: Opt<SlimCoin[]>, a_delegated_frees?: Opt<SlimCoin[]>, a_delegated_vestings?: Opt<SlimCoin[]>, sg_end_time?: Opt<WeakInt64Str>) => EncodedCosmosVestingBaseVestingAccount;
/**
 * Encodes a `ContinuousVestingAccount` protobuf message: implements the VestingAccount interface. It continuously vests by unlocking coins linearly with respect to time.
 * @param g_base_vesting_account - `base_vesting_account`:
 * @param sg_start_time - `start_time`: Vesting start time, as unix timestamp (in seconds).
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosVestingContinuousVestingAccount: (atu8_base_vesting_account?: Opt<Encoded<'/cosmos.vesting.v1beta1.BaseVestingAccount'>>, sg_start_time?: Opt<WeakInt64Str>) => EncodedCosmosVestingContinuousVestingAccount;
/**
 * Encodes a `DelayedVestingAccount` protobuf message: implements the VestingAccount interface. It vests all coins after a specific time, but non prior. In other words, it keeps them locked until a specified time.
 * @param g_base_vesting_account - `base_vesting_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosVestingDelayedVestingAccount: (atu8_base_vesting_account?: Opt<Encoded<'/cosmos.vesting.v1beta1.BaseVestingAccount'>>) => EncodedCosmosVestingDelayedVestingAccount;
/**
 * Encodes a `Period` protobuf message: defines a length of time and amount of coins that will vest.
 * @param sg_length - `length`: Period duration in seconds.
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosVestingPeriod: (sg_length?: Opt<WeakInt64Str>, a_amounts?: Opt<SlimCoin[]>) => EncodedCosmosVestingPeriod;
/**
 * Encodes a `PeriodicVestingAccount` protobuf message: implements the VestingAccount interface. It periodically vests by unlocking coins during each specified period.
 * @param g_base_vesting_account - `base_vesting_account`:
 * @param sg_start_time - `start_time`:
 * @param a_vesting_periods - `vesting_periods`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosVestingPeriodicVestingAccount: (atu8_base_vesting_account?: Opt<Encoded<'/cosmos.vesting.v1beta1.BaseVestingAccount'>>, sg_start_time?: Opt<WeakInt64Str>, a_vesting_periods?: Opt<Encoded<'/cosmos.vesting.v1beta1.Period'>[]>) => EncodedCosmosVestingPeriodicVestingAccount;
/**
 * Encodes a `PermanentLockedAccount` protobuf message: implements the VestingAccount interface. It does not ever release coins, locking them indefinitely. Coins in this account can still be used for delegating and for governance votes even while locked. Since: cosmos-sdk 0.43
 * @param g_base_vesting_account - `base_vesting_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosVestingPermanentLockedAccount: (atu8_base_vesting_account?: Opt<Encoded<'/cosmos.vesting.v1beta1.BaseVestingAccount'>>) => EncodedCosmosVestingPermanentLockedAccount;
/**
 * A decoded protobuf BaseVestingAccount message
 *
 * Tuple where:
 *   - 0: base_account -
 *   - 1: original_vesting -
 *   - 2: delegated_free -
 *   - 3: delegated_vesting -
 *   - 4: end_time - Vesting end time, as unix timestamp (in seconds).
 */
export type DecodedCosmosVestingBaseVestingAccount = [
    a_base_account?: DecodedCosmosAuthBaseAccount,
    a_original_vesting?: [
        string,
        string
    ][],
    a_delegated_free?: [
        string,
        string
    ][],
    a_delegated_vesting?: [
        string,
        string
    ][],
    sg_end_time?: CwInt64
];
/**
 * Decodes a protobuf BaseVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingBaseVestingAccount}
 */
export declare const decodeCosmosVestingBaseVestingAccount: (atu8_payload: Uint8Array) => DecodedCosmosVestingBaseVestingAccount;
/**
 * A decoded protobuf ContinuousVestingAccount message
 *
 * Tuple where:
 *   - 0: base_vesting_account -
 *   - 1: start_time - Vesting start time, as unix timestamp (in seconds).
 */
export type DecodedCosmosVestingContinuousVestingAccount = [
    a_base_vesting_account?: DecodedCosmosVestingBaseVestingAccount,
    sg_start_time?: CwInt64
];
/**
 * Decodes a protobuf ContinuousVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingContinuousVestingAccount}
 */
export declare const decodeCosmosVestingContinuousVestingAccount: (atu8_payload: Uint8Array) => DecodedCosmosVestingContinuousVestingAccount;
/**
 * A decoded protobuf DelayedVestingAccount message
 *
 * Alias for: base_vesting_account -
 */
export type DecodedCosmosVestingDelayedVestingAccount = [
    a_base_vesting_account?: DecodedCosmosVestingBaseVestingAccount
];
/**
 * Decodes a protobuf DelayedVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingDelayedVestingAccount}
 */
export declare const decodeCosmosVestingDelayedVestingAccount: (atu8_payload: Uint8Array) => DecodedCosmosVestingDelayedVestingAccount;
/**
 * A decoded protobuf Period message
 *
 * Tuple where:
 *   - 0: length - Period duration in seconds.
 *   - 1: amount -
 */
export type DecodedCosmosVestingPeriod = [
    sg_length?: CwInt64,
    a_amount?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Period message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingPeriod}
 */
export declare const decodeCosmosVestingPeriod: (atu8_payload: Uint8Array) => DecodedCosmosVestingPeriod;
/**
 * A decoded protobuf PeriodicVestingAccount message
 *
 * Tuple where:
 *   - 0: base_vesting_account -
 *   - 1: start_time -
 *   - 2: vesting_periods -
 */
export type DecodedCosmosVestingPeriodicVestingAccount = [
    a_base_vesting_account?: DecodedCosmosVestingBaseVestingAccount,
    sg_start_time?: CwInt64,
    a_vesting_periods?: DecodedCosmosVestingPeriod[]
];
/**
 * Decodes a protobuf PeriodicVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingPeriodicVestingAccount}
 */
export declare const decodeCosmosVestingPeriodicVestingAccount: (atu8_payload: Uint8Array) => DecodedCosmosVestingPeriodicVestingAccount;
/**
 * A decoded protobuf PermanentLockedAccount message
 *
 * Alias for: base_vesting_account -
 */
export type DecodedCosmosVestingPermanentLockedAccount = [
    a_base_vesting_account?: DecodedCosmosVestingBaseVestingAccount
];
/**
 * Decodes a protobuf PermanentLockedAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingPermanentLockedAccount}
 */
export declare const decodeCosmosVestingPermanentLockedAccount: (atu8_payload: Uint8Array) => DecodedCosmosVestingPermanentLockedAccount;
/**
 * Destructures the fields of a {@link CosmosVestingPeriod} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: length - Period duration in seconds.
 *   - 1: amount -
 */
export declare const destructCosmosVestingPeriod: (g_struct: CosmosVestingPeriod) => [length?: CwInt64, amount?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_VESTING_PERIOD = "/cosmos.vesting.v1beta1.Period";
/**
 * JSON serialization of `cosmos.vesting.v1beta1.Period` - defines a length of time and amount of coins that will vest.
 */
export type CosmosVestingPeriod = {
    length?: CwInt64 | undefined;
    amount?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosVestingBaseVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_account -
 *   - 1: original_vesting -
 *   - 2: delegated_free -
 *   - 3: delegated_vesting -
 *   - 4: end_time - Vesting end time, as unix timestamp (in seconds).
 */
export declare const destructCosmosVestingBaseVestingAccount: (g_struct: CosmosVestingBaseVestingAccount) => [base_account?: CosmosAuthBaseAccount, original_vesting?: CosmosBaseCoin[], delegated_free?: CosmosBaseCoin[], delegated_vesting?: CosmosBaseCoin[], end_time?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_VESTING_BASE_VESTING_ACCOUNT = "/cosmos.vesting.v1beta1.BaseVestingAccount";
/**
 * JSON serialization of `cosmos.vesting.v1beta1.BaseVestingAccount` - implements the VestingAccount interface. It contains all the necessary fields needed for any vesting account implementation.
 */
export type CosmosVestingBaseVestingAccount = {
    base_account?: CosmosAuthBaseAccount | undefined;
    original_vesting?: CosmosBaseCoin[] | undefined;
    delegated_free?: CosmosBaseCoin[] | undefined;
    delegated_vesting?: CosmosBaseCoin[] | undefined;
    end_time?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosVestingContinuousVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 *   - 1: start_time - Vesting start time, as unix timestamp (in seconds).
 */
export declare const destructCosmosVestingContinuousVestingAccount: (g_struct: CosmosVestingContinuousVestingAccount) => [base_vesting_account?: CosmosVestingBaseVestingAccount, start_time?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_VESTING_CONTINUOUS_VESTING_ACCOUNT = "/cosmos.vesting.v1beta1.ContinuousVestingAccount";
/**
 * JSON serialization of `cosmos.vesting.v1beta1.ContinuousVestingAccount` - implements the VestingAccount interface. It continuously vests by unlocking coins linearly with respect to time.
 */
export type CosmosVestingContinuousVestingAccount = {
    base_vesting_account?: CosmosVestingBaseVestingAccount | undefined;
    start_time?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosVestingDelayedVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 */
export declare const destructCosmosVestingDelayedVestingAccount: (g_struct: CosmosVestingDelayedVestingAccount) => [base_vesting_account?: CosmosVestingBaseVestingAccount];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_VESTING_DELAYED_VESTING_ACCOUNT = "/cosmos.vesting.v1beta1.DelayedVestingAccount";
/**
 * JSON serialization of `cosmos.vesting.v1beta1.DelayedVestingAccount` - implements the VestingAccount interface. It vests all coins after a specific time, but non prior. In other words, it keeps them locked until a specified time.
 */
export type CosmosVestingDelayedVestingAccount = {
    base_vesting_account?: CosmosVestingBaseVestingAccount | undefined;
};
/**
 * Destructures the fields of a {@link CosmosVestingPeriodicVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 *   - 1: start_time -
 *   - 2: vesting_periods -
 */
export declare const destructCosmosVestingPeriodicVestingAccount: (g_struct: CosmosVestingPeriodicVestingAccount) => [base_vesting_account?: CosmosVestingBaseVestingAccount, start_time?: CwInt64, vesting_periods?: CosmosVestingPeriod[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_VESTING_PERIODIC_VESTING_ACCOUNT = "/cosmos.vesting.v1beta1.PeriodicVestingAccount";
/**
 * JSON serialization of `cosmos.vesting.v1beta1.PeriodicVestingAccount` - implements the VestingAccount interface. It periodically vests by unlocking coins during each specified period.
 */
export type CosmosVestingPeriodicVestingAccount = {
    base_vesting_account?: CosmosVestingBaseVestingAccount | undefined;
    start_time?: CwInt64 | undefined;
    vesting_periods?: CosmosVestingPeriod[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosVestingPermanentLockedAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 */
export declare const destructCosmosVestingPermanentLockedAccount: (g_struct: CosmosVestingPermanentLockedAccount) => [base_vesting_account?: CosmosVestingBaseVestingAccount];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_VESTING_PERMANENT_LOCKED_ACCOUNT = "/cosmos.vesting.v1beta1.PermanentLockedAccount";
/**
 * JSON serialization of `cosmos.vesting.v1beta1.PermanentLockedAccount` - implements the VestingAccount interface. It does not ever release coins, locking them indefinitely. Coins in this account can still be used for delegating and for governance votes even while locked. Since: cosmos-sdk 0.43
 */
export type CosmosVestingPermanentLockedAccount = {
    base_vesting_account?: CosmosVestingBaseVestingAccount | undefined;
};
