import type { WeakUint64Str, SlimCoin, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
import type { CosmwasmWasmAccessConfig, DecodedCosmwasmWasmAccessConfig } from './types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type AnyCosmwasmWasmStoreCodeAuthorization = Encoded<'cosmos.authz.v1beta1.Authorization'>;
export type AnyCosmwasmWasmContractExecutionAuthorization = Encoded<'cosmos.authz.v1beta1.Authorization'>;
export type AnyCosmwasmWasmContractMigrationAuthorization = Encoded<'cosmos.authz.v1beta1.Authorization'>;
export type AnyCosmwasmWasmMaxCallsLimit = Encoded<'cosmwasm.wasm.v1.ContractAuthzLimitX'>;
export type AnyCosmwasmWasmMaxFundsLimit = Encoded<'cosmwasm.wasm.v1.ContractAuthzLimitX'>;
export type AnyCosmwasmWasmCombinedLimit = Encoded<'cosmwasm.wasm.v1.ContractAuthzLimitX'>;
export type AnyCosmwasmWasmAllowAllMessagesFilter = Encoded<'cosmwasm.wasm.v1.ContractAuthzFilterX'>;
export type AnyCosmwasmWasmAcceptedMessageKeysFilter = Encoded<'cosmwasm.wasm.v1.ContractAuthzFilterX'>;
export type AnyCosmwasmWasmAcceptedMessagesFilter = Encoded<'cosmwasm.wasm.v1.ContractAuthzFilterX'>;
export type EncodedCosmwasmWasmStoreCodeAuthorization = Encoded<'/cosmwasm.wasm.v1.StoreCodeAuthorization' | 'cosmos.authz.v1beta1.Authorization'>;
export type EncodedCosmwasmWasmContractExecutionAuthorization = Encoded<'/cosmwasm.wasm.v1.ContractExecutionAuthorization' | 'cosmos.authz.v1beta1.Authorization'>;
export type EncodedCosmwasmWasmContractMigrationAuthorization = Encoded<'/cosmwasm.wasm.v1.ContractMigrationAuthorization' | 'cosmos.authz.v1beta1.Authorization'>;
export type EncodedCosmwasmWasmCodeGrant = Encoded<'/cosmwasm.wasm.v1.CodeGrant'>;
export type EncodedCosmwasmWasmContractGrant = Encoded<'/cosmwasm.wasm.v1.ContractGrant'>;
export type EncodedCosmwasmWasmMaxCallsLimit = Encoded<'/cosmwasm.wasm.v1.MaxCallsLimit' | 'cosmwasm.wasm.v1.ContractAuthzLimitX'>;
export type EncodedCosmwasmWasmMaxFundsLimit = Encoded<'/cosmwasm.wasm.v1.MaxFundsLimit' | 'cosmwasm.wasm.v1.ContractAuthzLimitX'>;
export type EncodedCosmwasmWasmCombinedLimit = Encoded<'/cosmwasm.wasm.v1.CombinedLimit' | 'cosmwasm.wasm.v1.ContractAuthzLimitX'>;
export type EncodedCosmwasmWasmAllowAllMessagesFilter = Encoded<'/cosmwasm.wasm.v1.AllowAllMessagesFilter' | 'cosmwasm.wasm.v1.ContractAuthzFilterX'>;
export type EncodedCosmwasmWasmAcceptedMessageKeysFilter = Encoded<'/cosmwasm.wasm.v1.AcceptedMessageKeysFilter' | 'cosmwasm.wasm.v1.ContractAuthzFilterX'>;
export type EncodedCosmwasmWasmAcceptedMessagesFilter = Encoded<'/cosmwasm.wasm.v1.AcceptedMessagesFilter' | 'cosmwasm.wasm.v1.ContractAuthzFilterX'>;
/**
 * Encodes a `StoreCodeAuthorization` protobuf message wrapped in the `Any` container: defines authorization for wasm code upload. Since: wasmd 0.42
 * @param a_grants - `grants`: Grants for code upload
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyStoreCodeAuthorization: (a_grants?: Opt<Encoded<'/cosmwasm.wasm.v1.CodeGrant'>[]>) => AnyCosmwasmWasmStoreCodeAuthorization;
/**
 * Encodes a `ContractExecutionAuthorization` protobuf message wrapped in the `Any` container: defines authorization for wasm execute. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract executions
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyContractExecutionAuthorization: (a_grants?: Opt<Encoded<'/cosmwasm.wasm.v1.ContractGrant'>[]>) => AnyCosmwasmWasmContractExecutionAuthorization;
/**
 * Encodes a `ContractMigrationAuthorization` protobuf message wrapped in the `Any` container: defines authorization for wasm contract migration. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract migrations
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyContractMigrationAuthorization: (a_grants?: Opt<Encoded<'/cosmwasm.wasm.v1.ContractGrant'>[]>) => AnyCosmwasmWasmContractMigrationAuthorization;
/**
 * Encodes a `MaxCallsLimit` protobuf message wrapped in the `Any` container: limited number of calls to the contract. No funds transferable. Since: wasmd 0.30
 * @param sg_remaining - `remaining`: Remaining number that is decremented on each execution
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyMaxCallsLimit: (sg_remaining?: Opt<WeakUint64Str>) => AnyCosmwasmWasmMaxCallsLimit;
/**
 * Encodes a `MaxFundsLimit` protobuf message wrapped in the `Any` container: defines the maximal amounts that can be sent to the contract. Since: wasmd 0.30
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyMaxFundsLimit: (a_amounts?: Opt<SlimCoin[]>) => AnyCosmwasmWasmMaxFundsLimit;
/**
 * Encodes a `CombinedLimit` protobuf message wrapped in the `Any` container: defines the maximal amounts that can be sent to a contract and the maximal number of calls executable. Both need to remain >0 to be valid. Since: wasmd 0.30
 * @param sg_calls_remaining - `calls_remaining`: Remaining number that is decremented on each execution
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyCombinedLimit: (sg_calls_remaining?: Opt<WeakUint64Str>, a_amounts?: Opt<SlimCoin[]>) => AnyCosmwasmWasmCombinedLimit;
/**
 * Encodes a `AllowAllMessagesFilter` protobuf message wrapped in the `Any` container: a wildcard to allow any type of contract payload message. Since: wasmd 0.30
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyAllowAllMessagesFilter: () => AnyCosmwasmWasmAllowAllMessagesFilter;
/**
 * Encodes a `AcceptedMessageKeysFilter` protobuf message wrapped in the `Any` container: accept only the specific contract message keys in the json object to be executed. Since: wasmd 0.30
 * @param a_keys - `keys`: Messages is the list of unique keys
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyAcceptedMessageKeysFilter: (a_keys?: Opt<string[]>) => AnyCosmwasmWasmAcceptedMessageKeysFilter;
/**
 * Encodes a `AcceptedMessagesFilter` protobuf message wrapped in the `Any` container: accept only the specific raw contract messages to be executed. Since: wasmd 0.30
 * @param a_messages - `messages`: Messages is the list of raw contract messages
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyAcceptedMessagesFilter: (a_messages?: Opt<Uint8Array[]>) => AnyCosmwasmWasmAcceptedMessagesFilter;
/**
 * Encodes a `StoreCodeAuthorization` protobuf message: defines authorization for wasm code upload. Since: wasmd 0.42
 * @param a_grants - `grants`: Grants for code upload
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmStoreCodeAuthorization: (a_grants?: Opt<Encoded<'/cosmwasm.wasm.v1.CodeGrant'>[]>) => EncodedCosmwasmWasmStoreCodeAuthorization;
/**
 * Encodes a `ContractExecutionAuthorization` protobuf message: defines authorization for wasm execute. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract executions
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmContractExecutionAuthorization: (a_grants?: Opt<Encoded<'/cosmwasm.wasm.v1.ContractGrant'>[]>) => EncodedCosmwasmWasmContractExecutionAuthorization;
/**
 * Encodes a `ContractMigrationAuthorization` protobuf message: defines authorization for wasm contract migration. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract migrations
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmContractMigrationAuthorization: (a_grants?: Opt<Encoded<'/cosmwasm.wasm.v1.ContractGrant'>[]>) => EncodedCosmwasmWasmContractMigrationAuthorization;
/**
 * Encodes a `CodeGrant` protobuf message: a granted permission for a single code
 * @param atu8_code_hash - `code_hash`: CodeHash is the unique identifier created by wasmvm Wildcard "*" is used to specify any kind of grant.
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission is the superset access control to apply on contract creation. Optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmCodeGrant: (atu8_code_hash?: Opt<Uint8Array>, atu8_instantiate_permission?: Opt<Encoded<'/cosmwasm.wasm.v1.AccessConfig'>>) => EncodedCosmwasmWasmCodeGrant;
/**
 * Encodes a `ContractGrant` protobuf message: a granted permission for a single contract Since: wasmd 0.30
 * @param s_contract - `contract`: Contract is the bech32 address of the smart contract
 * @param atu8_limit - `limit`: Limit defines execution limits that are enforced and updated when the grant is applied. When the limit lapsed the grant is removed.
 * @param atu8_filter - `filter`: Filter define more fine-grained control on the message payload passed to the contract in the operation. When no filter applies on execution, the operation is prohibited.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmContractGrant: (s_contract?: Opt<string>, atu8_limit?: Opt<Encoded<'cosmwasm.wasm.v1.ContractAuthzLimitX'>>, atu8_filter?: Opt<Encoded<'cosmwasm.wasm.v1.ContractAuthzFilterX'>>) => EncodedCosmwasmWasmContractGrant;
/**
 * Encodes a `MaxCallsLimit` protobuf message: limited number of calls to the contract. No funds transferable. Since: wasmd 0.30
 * @param sg_remaining - `remaining`: Remaining number that is decremented on each execution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMaxCallsLimit: (sg_remaining?: Opt<WeakUint64Str>) => EncodedCosmwasmWasmMaxCallsLimit;
/**
 * Encodes a `MaxFundsLimit` protobuf message: defines the maximal amounts that can be sent to the contract. Since: wasmd 0.30
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMaxFundsLimit: (a_amounts?: Opt<SlimCoin[]>) => EncodedCosmwasmWasmMaxFundsLimit;
/**
 * Encodes a `CombinedLimit` protobuf message: defines the maximal amounts that can be sent to a contract and the maximal number of calls executable. Both need to remain >0 to be valid. Since: wasmd 0.30
 * @param sg_calls_remaining - `calls_remaining`: Remaining number that is decremented on each execution
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmCombinedLimit: (sg_calls_remaining?: Opt<WeakUint64Str>, a_amounts?: Opt<SlimCoin[]>) => EncodedCosmwasmWasmCombinedLimit;
/**
 * Encodes a `AllowAllMessagesFilter` protobuf message: a wildcard to allow any type of contract payload message. Since: wasmd 0.30
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmAllowAllMessagesFilter: () => EncodedCosmwasmWasmAllowAllMessagesFilter;
/**
 * Encodes a `AcceptedMessageKeysFilter` protobuf message: accept only the specific contract message keys in the json object to be executed. Since: wasmd 0.30
 * @param a_keys - `keys`: Messages is the list of unique keys
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmAcceptedMessageKeysFilter: (a_keys?: Opt<string[]>) => EncodedCosmwasmWasmAcceptedMessageKeysFilter;
/**
 * Encodes a `AcceptedMessagesFilter` protobuf message: accept only the specific raw contract messages to be executed. Since: wasmd 0.30
 * @param a_messages - `messages`: Messages is the list of raw contract messages
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmAcceptedMessagesFilter: (a_messages?: Opt<Uint8Array[]>) => EncodedCosmwasmWasmAcceptedMessagesFilter;
/**
 * A decoded protobuf StoreCodeAuthorization message
 *
 * Alias for: grants - Grants for code upload
 */
export type DecodedCosmwasmWasmStoreCodeAuthorization = [
    a_grants?: DecodedCosmwasmWasmCodeGrant[]
];
/**
 * Decodes a protobuf StoreCodeAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmStoreCodeAuthorization}
 */
export declare const decodeCosmwasmWasmStoreCodeAuthorization: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmStoreCodeAuthorization;
/**
 * A decoded protobuf ContractExecutionAuthorization message
 *
 * Alias for: grants - Grants for contract executions
 */
export type DecodedCosmwasmWasmContractExecutionAuthorization = [
    a_grants?: DecodedCosmwasmWasmContractGrant[]
];
/**
 * Decodes a protobuf ContractExecutionAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContractExecutionAuthorization}
 */
export declare const decodeCosmwasmWasmContractExecutionAuthorization: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmContractExecutionAuthorization;
/**
 * A decoded protobuf ContractMigrationAuthorization message
 *
 * Alias for: grants - Grants for contract migrations
 */
export type DecodedCosmwasmWasmContractMigrationAuthorization = [
    a_grants?: DecodedCosmwasmWasmContractGrant[]
];
/**
 * Decodes a protobuf ContractMigrationAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContractMigrationAuthorization}
 */
export declare const decodeCosmwasmWasmContractMigrationAuthorization: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmContractMigrationAuthorization;
/**
 * A decoded protobuf CodeGrant message
 *
 * Tuple where:
 *   - 0: code_hash - CodeHash is the unique identifier created by wasmvm Wildcard "*" is used to specify any kind of grant.
 *   - 1: instantiate_permission - InstantiatePermission is the superset access control to apply on contract creation. Optional
 */
export type DecodedCosmwasmWasmCodeGrant = [
    atu8_code_hash?: Uint8Array,
    a_instantiate_permission?: DecodedCosmwasmWasmAccessConfig
];
/**
 * Decodes a protobuf CodeGrant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmCodeGrant}
 */
export declare const decodeCosmwasmWasmCodeGrant: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmCodeGrant;
/**
 * A decoded protobuf ContractGrant message
 *
 * Tuple where:
 *   - 0: contract - Contract is the bech32 address of the smart contract
 *   - 1: limit - Limit defines execution limits that are enforced and updated when the grant is applied. When the limit lapsed the grant is removed.
 *   - 2: filter - Filter define more fine-grained control on the message payload passed to the contract in the operation. When no filter applies on execution, the operation is prohibited.
 */
export type DecodedCosmwasmWasmContractGrant = [
    s_contract?: string,
    a_limit?: DecodedGoogleProtobufAny,
    a_filter?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf ContractGrant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContractGrant}
 */
export declare const decodeCosmwasmWasmContractGrant: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmContractGrant;
/**
 * A decoded protobuf MaxCallsLimit message
 *
 * Alias for: remaining - Remaining number that is decremented on each execution
 */
export type DecodedCosmwasmWasmMaxCallsLimit = [
    sg_remaining?: CwUint64
];
/**
 * Decodes a protobuf MaxCallsLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMaxCallsLimit}
 */
export declare const decodeCosmwasmWasmMaxCallsLimit: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMaxCallsLimit;
/**
 * A decoded protobuf MaxFundsLimit message
 *
 * Alias for: amounts - Amounts is the maximal amount of tokens transferable to the contract.
 */
export type DecodedCosmwasmWasmMaxFundsLimit = [
    a_amounts?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf MaxFundsLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMaxFundsLimit}
 */
export declare const decodeCosmwasmWasmMaxFundsLimit: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMaxFundsLimit;
/**
 * A decoded protobuf CombinedLimit message
 *
 * Tuple where:
 *   - 0: calls_remaining - Remaining number that is decremented on each execution
 *   - 1: amounts - Amounts is the maximal amount of tokens transferable to the contract.
 */
export type DecodedCosmwasmWasmCombinedLimit = [
    sg_calls_remaining?: CwUint64,
    a_amounts?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf CombinedLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmCombinedLimit}
 */
export declare const decodeCosmwasmWasmCombinedLimit: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmCombinedLimit;
/**
 * A decoded protobuf AllowAllMessagesFilter message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmAllowAllMessagesFilter = [];
/**
 * Decodes a protobuf AllowAllMessagesFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAllowAllMessagesFilter}
 */
export declare const decodeCosmwasmWasmAllowAllMessagesFilter: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf AcceptedMessageKeysFilter message
 *
 * Alias for: keys - Messages is the list of unique keys
 */
export type DecodedCosmwasmWasmAcceptedMessageKeysFilter = [
    a_keys?: string[]
];
/**
 * Decodes a protobuf AcceptedMessageKeysFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAcceptedMessageKeysFilter}
 */
export declare const decodeCosmwasmWasmAcceptedMessageKeysFilter: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmAcceptedMessageKeysFilter;
/**
 * A decoded protobuf AcceptedMessagesFilter message
 *
 * Alias for: messages - Messages is the list of raw contract messages
 */
export type DecodedCosmwasmWasmAcceptedMessagesFilter = [
    a_messages?: Uint8Array[]
];
/**
 * Decodes a protobuf AcceptedMessagesFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAcceptedMessagesFilter}
 */
export declare const decodeCosmwasmWasmAcceptedMessagesFilter: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmAcceptedMessagesFilter;
/**
 * Destructures the fields of a {@link CosmwasmWasmStoreCodeAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grants - Grants for code upload
 */
export declare const destructCosmwasmWasmStoreCodeAuthorization: (g_struct: CosmwasmWasmStoreCodeAuthorization) => [grants?: CosmwasmWasmCodeGrant[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_STORE_CODE_AUTHORIZATION = "/cosmwasm.wasm.v1.StoreCodeAuthorization";
/**
 * JSON serialization of `cosmwasm.wasm.v1.StoreCodeAuthorization` - defines authorization for wasm code upload. Since: wasmd 0.42
 */
export type CosmwasmWasmStoreCodeAuthorization = {
    grants?: CosmwasmWasmCodeGrant[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmCodeGrant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_hash - CodeHash is the unique identifier created by wasmvm Wildcard "*" is used to specify any kind of grant.
 *   - 1: instantiate_permission - InstantiatePermission is the superset access control to apply on contract creation. Optional
 */
export declare const destructCosmwasmWasmCodeGrant: (g_struct: CosmwasmWasmCodeGrant) => [code_hash?: Uint8Array, instantiate_permission?: CosmwasmWasmAccessConfig];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_CODE_GRANT = "/cosmwasm.wasm.v1.CodeGrant";
/**
 * JSON serialization of `cosmwasm.wasm.v1.CodeGrant` - a granted permission for a single code
 */
export type CosmwasmWasmCodeGrant = {
    code_hash?: CwBase64 | undefined;
    instantiate_permission?: CosmwasmWasmAccessConfig | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmContractExecutionAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grants - Grants for contract executions
 */
export declare const destructCosmwasmWasmContractExecutionAuthorization: (g_struct: CosmwasmWasmContractExecutionAuthorization) => [grants?: CosmwasmWasmContractGrant[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT_EXECUTION_AUTHORIZATION = "/cosmwasm.wasm.v1.ContractExecutionAuthorization";
/**
 * JSON serialization of `cosmwasm.wasm.v1.ContractExecutionAuthorization` - defines authorization for wasm execute. Since: wasmd 0.30
 */
export type CosmwasmWasmContractExecutionAuthorization = {
    grants?: CosmwasmWasmContractGrant[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmContractGrant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract - Contract is the bech32 address of the smart contract
 *   - 1: limit - Limit defines execution limits that are enforced and updated when the grant is applied. When the limit lapsed the grant is removed.
 *   - 2: filter - Filter define more fine-grained control on the message payload passed to the contract in the operation. When no filter applies on execution, the operation is prohibited.
 */
export declare const destructCosmwasmWasmContractGrant: (g_struct: CosmwasmWasmContractGrant) => [contract?: string, limit?: JsonAny<string, CosmwasmWasmMaxCallsLimit | CosmwasmWasmMaxFundsLimit | CosmwasmWasmCombinedLimit>, filter?: JsonAny<string, CosmwasmWasmAllowAllMessagesFilter | CosmwasmWasmAcceptedMessageKeysFilter | CosmwasmWasmAcceptedMessagesFilter>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT_GRANT = "/cosmwasm.wasm.v1.ContractGrant";
/**
 * JSON serialization of `cosmwasm.wasm.v1.ContractGrant` - a granted permission for a single contract Since: wasmd 0.30
 */
export type CosmwasmWasmContractGrant = {
    contract?: string | undefined;
    limit?: JsonAny<string, CosmwasmWasmMaxCallsLimit | CosmwasmWasmMaxFundsLimit | CosmwasmWasmCombinedLimit> | undefined;
    filter?: JsonAny<string, CosmwasmWasmAllowAllMessagesFilter | CosmwasmWasmAcceptedMessageKeysFilter | CosmwasmWasmAcceptedMessagesFilter> | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmContractMigrationAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grants - Grants for contract migrations
 */
export declare const destructCosmwasmWasmContractMigrationAuthorization: (g_struct: CosmwasmWasmContractMigrationAuthorization) => [grants?: CosmwasmWasmContractGrant[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT_MIGRATION_AUTHORIZATION = "/cosmwasm.wasm.v1.ContractMigrationAuthorization";
/**
 * JSON serialization of `cosmwasm.wasm.v1.ContractMigrationAuthorization` - defines authorization for wasm contract migration. Since: wasmd 0.30
 */
export type CosmwasmWasmContractMigrationAuthorization = {
    grants?: CosmwasmWasmContractGrant[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMaxCallsLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: remaining - Remaining number that is decremented on each execution
 */
export declare const destructCosmwasmWasmMaxCallsLimit: (g_struct: CosmwasmWasmMaxCallsLimit) => [remaining?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MAX_CALLS_LIMIT = "/cosmwasm.wasm.v1.MaxCallsLimit";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MaxCallsLimit` - limited number of calls to the contract. No funds transferable. Since: wasmd 0.30
 */
export type CosmwasmWasmMaxCallsLimit = {
    remaining?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMaxFundsLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amounts - Amounts is the maximal amount of tokens transferable to the contract.
 */
export declare const destructCosmwasmWasmMaxFundsLimit: (g_struct: CosmwasmWasmMaxFundsLimit) => [amounts?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MAX_FUNDS_LIMIT = "/cosmwasm.wasm.v1.MaxFundsLimit";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MaxFundsLimit` - defines the maximal amounts that can be sent to the contract. Since: wasmd 0.30
 */
export type CosmwasmWasmMaxFundsLimit = {
    amounts?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmCombinedLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: calls_remaining - Remaining number that is decremented on each execution
 *   - 1: amounts - Amounts is the maximal amount of tokens transferable to the contract.
 */
export declare const destructCosmwasmWasmCombinedLimit: (g_struct: CosmwasmWasmCombinedLimit) => [calls_remaining?: CwUint64, amounts?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_COMBINED_LIMIT = "/cosmwasm.wasm.v1.CombinedLimit";
/**
 * JSON serialization of `cosmwasm.wasm.v1.CombinedLimit` - defines the maximal amounts that can be sent to a contract and the maximal number of calls executable. Both need to remain >0 to be valid. Since: wasmd 0.30
 */
export type CosmwasmWasmCombinedLimit = {
    calls_remaining?: CwUint64 | undefined;
    amounts?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmAllowAllMessagesFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmAllowAllMessagesFilter: (g_struct: CosmwasmWasmAllowAllMessagesFilter) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_ALLOW_ALL_MESSAGES_FILTER = "/cosmwasm.wasm.v1.AllowAllMessagesFilter";
/**
 * JSON serialization of `cosmwasm.wasm.v1.AllowAllMessagesFilter` - a wildcard to allow any type of contract payload message. Since: wasmd 0.30
 */
export type CosmwasmWasmAllowAllMessagesFilter = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmAcceptedMessageKeysFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keys - Messages is the list of unique keys
 */
export declare const destructCosmwasmWasmAcceptedMessageKeysFilter: (g_struct: CosmwasmWasmAcceptedMessageKeysFilter) => [keys?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_ACCEPTED_MESSAGE_KEYS_FILTER = "/cosmwasm.wasm.v1.AcceptedMessageKeysFilter";
/**
 * JSON serialization of `cosmwasm.wasm.v1.AcceptedMessageKeysFilter` - accept only the specific contract message keys in the json object to be executed. Since: wasmd 0.30
 */
export type CosmwasmWasmAcceptedMessageKeysFilter = {
    keys?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmAcceptedMessagesFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: messages - Messages is the list of raw contract messages
 */
export declare const destructCosmwasmWasmAcceptedMessagesFilter: (g_struct: CosmwasmWasmAcceptedMessagesFilter) => [messages?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_ACCEPTED_MESSAGES_FILTER = "/cosmwasm.wasm.v1.AcceptedMessagesFilter";
/**
 * JSON serialization of `cosmwasm.wasm.v1.AcceptedMessagesFilter` - accept only the specific raw contract messages to be executed. Since: wasmd 0.30
 */
export type CosmwasmWasmAcceptedMessagesFilter = {
    messages?: CwBase64[] | undefined;
};
