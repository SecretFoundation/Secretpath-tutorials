import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, any, coins } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmwasmWasmAccessConfig } from './types.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `StoreCodeAuthorization` protobuf message wrapped in the `Any` container: defines authorization for wasm code upload. Since: wasmd 0.42
 * @param a_grants - `grants`: Grants for code upload
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyStoreCodeAuthorization = (a_grants) => any('/cosmwasm.wasm.v1.StoreCodeAuthorization', Protobuf() // ...
    .B(a_grants) // CodeGrant[] grants = 1
    .o);
/**
 * Encodes a `ContractExecutionAuthorization` protobuf message wrapped in the `Any` container: defines authorization for wasm execute. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract executions
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyContractExecutionAuthorization = (a_grants) => any('/cosmwasm.wasm.v1.ContractExecutionAuthorization', Protobuf() // ...
    .B(a_grants) // ContractGrant[] grants = 1
    .o);
/**
 * Encodes a `ContractMigrationAuthorization` protobuf message wrapped in the `Any` container: defines authorization for wasm contract migration. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract migrations
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyContractMigrationAuthorization = (a_grants) => any('/cosmwasm.wasm.v1.ContractMigrationAuthorization', Protobuf() // ...
    .B(a_grants) // ContractGrant[] grants = 1
    .o);
/**
 * Encodes a `MaxCallsLimit` protobuf message wrapped in the `Any` container: limited number of calls to the contract. No funds transferable. Since: wasmd 0.30
 * @param sg_remaining - `remaining`: Remaining number that is decremented on each execution
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyMaxCallsLimit = (sg_remaining) => any('/cosmwasm.wasm.v1.MaxCallsLimit', Protobuf() // ...
    .g(sg_remaining) // uint64 remaining = 1
    .o);
/**
 * Encodes a `MaxFundsLimit` protobuf message wrapped in the `Any` container: defines the maximal amounts that can be sent to the contract. Since: wasmd 0.30
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyMaxFundsLimit = (a_amounts) => any('/cosmwasm.wasm.v1.MaxFundsLimit', Protobuf() // ...
    .B(coins(a_amounts)) // Coin[] amounts = 1
    .o);
/**
 * Encodes a `CombinedLimit` protobuf message wrapped in the `Any` container: defines the maximal amounts that can be sent to a contract and the maximal number of calls executable. Both need to remain >0 to be valid. Since: wasmd 0.30
 * @param sg_calls_remaining - `calls_remaining`: Remaining number that is decremented on each execution
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyCombinedLimit = (sg_calls_remaining, a_amounts) => any('/cosmwasm.wasm.v1.CombinedLimit', Protobuf() // ...
    .g(sg_calls_remaining) // uint64 calls_remaining = 1
    .B(coins(a_amounts)) // Coin[] amounts = 2
    .o);
/**
 * Encodes a `AllowAllMessagesFilter` protobuf message wrapped in the `Any` container: a wildcard to allow any type of contract payload message. Since: wasmd 0.30
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyAllowAllMessagesFilter = () => any('/cosmwasm.wasm.v1.AllowAllMessagesFilter', Protobuf() // ...
    .o);
/**
 * Encodes a `AcceptedMessageKeysFilter` protobuf message wrapped in the `Any` container: accept only the specific contract message keys in the json object to be executed. Since: wasmd 0.30
 * @param a_keys - `keys`: Messages is the list of unique keys
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyAcceptedMessageKeysFilter = (a_keys) => any('/cosmwasm.wasm.v1.AcceptedMessageKeysFilter', Protobuf() // ...
    .S(a_keys) // string[] keys = 1
    .o);
/**
 * Encodes a `AcceptedMessagesFilter` protobuf message wrapped in the `Any` container: accept only the specific raw contract messages to be executed. Since: wasmd 0.30
 * @param a_messages - `messages`: Messages is the list of raw contract messages
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyAcceptedMessagesFilter = (a_messages) => any('/cosmwasm.wasm.v1.AcceptedMessagesFilter', Protobuf() // ...
    .B(a_messages) // bytes[] messages = 1
    .o);
/**
 * Encodes a `StoreCodeAuthorization` protobuf message: defines authorization for wasm code upload. Since: wasmd 0.42
 * @param a_grants - `grants`: Grants for code upload
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmStoreCodeAuthorization = (a_grants) => Protobuf() // ...
    .B(a_grants) // CodeGrant[] grants = 1
    .o;
/**
 * Encodes a `ContractExecutionAuthorization` protobuf message: defines authorization for wasm execute. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract executions
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmContractExecutionAuthorization = (a_grants) => Protobuf() // ...
    .B(a_grants) // ContractGrant[] grants = 1
    .o;
/**
 * Encodes a `ContractMigrationAuthorization` protobuf message: defines authorization for wasm contract migration. Since: wasmd 0.30
 * @param a_grants - `grants`: Grants for contract migrations
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmContractMigrationAuthorization = (a_grants) => Protobuf() // ...
    .B(a_grants) // ContractGrant[] grants = 1
    .o;
/**
 * Encodes a `CodeGrant` protobuf message: a granted permission for a single code
 * @param atu8_code_hash - `code_hash`: CodeHash is the unique identifier created by wasmvm Wildcard "*" is used to specify any kind of grant.
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission is the superset access control to apply on contract creation. Optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmCodeGrant = (atu8_code_hash, atu8_instantiate_permission) => Protobuf() // ...
    .b(atu8_code_hash) // bytes code_hash = 1
    .b(atu8_instantiate_permission) // AccessConfig instantiate_permission = 2
    .o;
/**
 * Encodes a `ContractGrant` protobuf message: a granted permission for a single contract Since: wasmd 0.30
 * @param s_contract - `contract`: Contract is the bech32 address of the smart contract
 * @param atu8_limit - `limit`: Limit defines execution limits that are enforced and updated when the grant is applied. When the limit lapsed the grant is removed.
 * @param atu8_filter - `filter`: Filter define more fine-grained control on the message payload passed to the contract in the operation. When no filter applies on execution, the operation is prohibited.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmContractGrant = (s_contract, atu8_limit, atu8_filter) => Protobuf() // ...
    .s(s_contract) // string contract = 1
    .b(atu8_limit) // Any limit = 2
    .b(atu8_filter) // Any filter = 3
    .o;
/**
 * Encodes a `MaxCallsLimit` protobuf message: limited number of calls to the contract. No funds transferable. Since: wasmd 0.30
 * @param sg_remaining - `remaining`: Remaining number that is decremented on each execution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMaxCallsLimit = (sg_remaining) => Protobuf() // ...
    .g(sg_remaining) // uint64 remaining = 1
    .o;
/**
 * Encodes a `MaxFundsLimit` protobuf message: defines the maximal amounts that can be sent to the contract. Since: wasmd 0.30
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMaxFundsLimit = (a_amounts) => Protobuf() // ...
    .B(coins(a_amounts)) // Coin[] amounts = 1
    .o;
/**
 * Encodes a `CombinedLimit` protobuf message: defines the maximal amounts that can be sent to a contract and the maximal number of calls executable. Both need to remain >0 to be valid. Since: wasmd 0.30
 * @param sg_calls_remaining - `calls_remaining`: Remaining number that is decremented on each execution
 * @param a_amounts - `amounts`: Amounts is the maximal amount of tokens transferable to the contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmCombinedLimit = (sg_calls_remaining, a_amounts) => Protobuf() // ...
    .g(sg_calls_remaining) // uint64 calls_remaining = 1
    .B(coins(a_amounts)) // Coin[] amounts = 2
    .o;
/**
 * Encodes a `AllowAllMessagesFilter` protobuf message: a wildcard to allow any type of contract payload message. Since: wasmd 0.30
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmAllowAllMessagesFilter = () => Protobuf() // ...
    .o;
/**
 * Encodes a `AcceptedMessageKeysFilter` protobuf message: accept only the specific contract message keys in the json object to be executed. Since: wasmd 0.30
 * @param a_keys - `keys`: Messages is the list of unique keys
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmAcceptedMessageKeysFilter = (a_keys) => Protobuf() // ...
    .S(a_keys) // string[] keys = 1
    .o;
/**
 * Encodes a `AcceptedMessagesFilter` protobuf message: accept only the specific raw contract messages to be executed. Since: wasmd 0.30
 * @param a_messages - `messages`: Messages is the list of raw contract messages
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmAcceptedMessagesFilter = (a_messages) => Protobuf() // ...
    .B(a_messages) // bytes[] messages = 1
    .o;
/**
 * Decodes a protobuf StoreCodeAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmStoreCodeAuthorization}
 */
export const decodeCosmwasmWasmStoreCodeAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmwasmWasmCodeGrant]);
/**
 * Decodes a protobuf ContractExecutionAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContractExecutionAuthorization}
 */
export const decodeCosmwasmWasmContractExecutionAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmwasmWasmContractGrant]);
/**
 * Decodes a protobuf ContractMigrationAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContractMigrationAuthorization}
 */
export const decodeCosmwasmWasmContractMigrationAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmwasmWasmContractGrant]);
/**
 * Decodes a protobuf CodeGrant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmCodeGrant}
 */
export const decodeCosmwasmWasmCodeGrant = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [0, decodeCosmwasmWasmAccessConfig]);
/**
 * Decodes a protobuf ContractGrant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContractGrant}
 */
export const decodeCosmwasmWasmContractGrant = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1], [0, decodeGoogleProtobufAny, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf MaxCallsLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMaxCallsLimit}
 */
export const decodeCosmwasmWasmMaxCallsLimit = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf MaxFundsLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMaxFundsLimit}
 */
export const decodeCosmwasmWasmMaxFundsLimit = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf CombinedLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmCombinedLimit}
 */
export const decodeCosmwasmWasmCombinedLimit = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0], [0, decode_coin]);
/**
 * Decodes a protobuf AllowAllMessagesFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAllowAllMessagesFilter}
 */
export const decodeCosmwasmWasmAllowAllMessagesFilter = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf AcceptedMessageKeysFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAcceptedMessageKeysFilter}
 */
export const decodeCosmwasmWasmAcceptedMessageKeysFilter = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf AcceptedMessagesFilter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAcceptedMessagesFilter}
 */
export const decodeCosmwasmWasmAcceptedMessagesFilter = (atu8_payload) => decode_protobuf(atu8_payload, [0]);
/**
 * Destructures the fields of a {@link CosmwasmWasmStoreCodeAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grants - Grants for code upload
 */
export const destructCosmwasmWasmStoreCodeAuthorization = (g_struct) => [g_struct.grants];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_STORE_CODE_AUTHORIZATION = '/cosmwasm.wasm.v1.StoreCodeAuthorization';
/**
 * Destructures the fields of a {@link CosmwasmWasmCodeGrant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_hash - CodeHash is the unique identifier created by wasmvm Wildcard "*" is used to specify any kind of grant.
 *   - 1: instantiate_permission - InstantiatePermission is the superset access control to apply on contract creation. Optional
 */
export const destructCosmwasmWasmCodeGrant = (g_struct) => [safe_base64_to_bytes(g_struct.code_hash), g_struct.instantiate_permission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_CODE_GRANT = '/cosmwasm.wasm.v1.CodeGrant';
/**
 * Destructures the fields of a {@link CosmwasmWasmContractExecutionAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grants - Grants for contract executions
 */
export const destructCosmwasmWasmContractExecutionAuthorization = (g_struct) => [g_struct.grants];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT_EXECUTION_AUTHORIZATION = '/cosmwasm.wasm.v1.ContractExecutionAuthorization';
/**
 * Destructures the fields of a {@link CosmwasmWasmContractGrant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract - Contract is the bech32 address of the smart contract
 *   - 1: limit - Limit defines execution limits that are enforced and updated when the grant is applied. When the limit lapsed the grant is removed.
 *   - 2: filter - Filter define more fine-grained control on the message payload passed to the contract in the operation. When no filter applies on execution, the operation is prohibited.
 */
export const destructCosmwasmWasmContractGrant = (g_struct) => [g_struct.contract, g_struct.limit, g_struct.filter];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT_GRANT = '/cosmwasm.wasm.v1.ContractGrant';
/**
 * Destructures the fields of a {@link CosmwasmWasmContractMigrationAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: grants - Grants for contract migrations
 */
export const destructCosmwasmWasmContractMigrationAuthorization = (g_struct) => [g_struct.grants];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT_MIGRATION_AUTHORIZATION = '/cosmwasm.wasm.v1.ContractMigrationAuthorization';
/**
 * Destructures the fields of a {@link CosmwasmWasmMaxCallsLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: remaining - Remaining number that is decremented on each execution
 */
export const destructCosmwasmWasmMaxCallsLimit = (g_struct) => [g_struct.remaining];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MAX_CALLS_LIMIT = '/cosmwasm.wasm.v1.MaxCallsLimit';
/**
 * Destructures the fields of a {@link CosmwasmWasmMaxFundsLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amounts - Amounts is the maximal amount of tokens transferable to the contract.
 */
export const destructCosmwasmWasmMaxFundsLimit = (g_struct) => [g_struct.amounts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MAX_FUNDS_LIMIT = '/cosmwasm.wasm.v1.MaxFundsLimit';
/**
 * Destructures the fields of a {@link CosmwasmWasmCombinedLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: calls_remaining - Remaining number that is decremented on each execution
 *   - 1: amounts - Amounts is the maximal amount of tokens transferable to the contract.
 */
export const destructCosmwasmWasmCombinedLimit = (g_struct) => [g_struct.calls_remaining, g_struct.amounts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_COMBINED_LIMIT = '/cosmwasm.wasm.v1.CombinedLimit';
/**
 * Destructures the fields of a {@link CosmwasmWasmAllowAllMessagesFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmAllowAllMessagesFilter = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_ALLOW_ALL_MESSAGES_FILTER = '/cosmwasm.wasm.v1.AllowAllMessagesFilter';
/**
 * Destructures the fields of a {@link CosmwasmWasmAcceptedMessageKeysFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keys - Messages is the list of unique keys
 */
export const destructCosmwasmWasmAcceptedMessageKeysFilter = (g_struct) => [g_struct.keys];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_ACCEPTED_MESSAGE_KEYS_FILTER = '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter';
/**
 * Destructures the fields of a {@link CosmwasmWasmAcceptedMessagesFilter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: messages - Messages is the list of raw contract messages
 */
export const destructCosmwasmWasmAcceptedMessagesFilter = (g_struct) => [map(g_struct.messages, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_ACCEPTED_MESSAGES_FILTER = '/cosmwasm.wasm.v1.AcceptedMessagesFilter';
//# sourceMappingURL=authz.js.map