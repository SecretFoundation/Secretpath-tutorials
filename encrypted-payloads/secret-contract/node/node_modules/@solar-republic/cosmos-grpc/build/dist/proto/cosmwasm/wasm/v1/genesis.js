import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmwasmWasmParams, decodeCosmwasmWasmCodeInfo, decodeCosmwasmWasmContractInfo, decodeCosmwasmWasmModel, decodeCosmwasmWasmContractCodeHistoryEntry } from './types.js';
/**
 * Encodes a `GenesisState` protobuf message: - genesis state of x/wasm
 * @param g_params - `params`:
 * @param a_codes - `codes`:
 * @param a_contracts - `contracts`:
 * @param a_sequences - `sequences`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmGenesisState = (atu8_params, a_codes, a_contracts, a_sequences) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_codes) // Code[] codes = 2
    .B(a_contracts) // Contract[] contracts = 3
    .B(a_sequences) // Sequence[] sequences = 4
    .o;
/**
 * Encodes a `Code` protobuf message: struct encompasses CodeInfo and CodeBytes
 * @param sg_code_id - `code_id`:
 * @param g_code_info - `code_info`:
 * @param atu8_code_bytes - `code_bytes`:
 * @param b_pinned - `pinned`: Pinned to wasmvm cache
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmCode = (sg_code_id, atu8_code_info, atu8_code_bytes, b_pinned) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .b(atu8_code_info) // CodeInfo code_info = 2
    .b(atu8_code_bytes) // bytes code_bytes = 3
    .v(b_pinned) // boolean pinned = 4
    .o;
/**
 * Encodes a `Contract` protobuf message: struct encompasses ContractAddress, ContractInfo, and ContractState
 * @param sa_contract - `contract_address`:
 * @param g_contract_info - `contract_info`:
 * @param a_contract_states - `contract_state`:
 * @param a_contract_code_historys - `contract_code_history`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmContract = (sa_contract, atu8_contract_info, a_contract_states, a_contract_code_historys) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .b(atu8_contract_info) // ContractInfo contract_info = 2
    .B(a_contract_states) // Model[] contract_state = 3
    .B(a_contract_code_historys) // ContractCodeHistoryEntry[] contract_code_history = 4
    .o;
/**
 * Encodes a `Sequence` protobuf message: key and value of an id generation counter
 * @param atu8_id_key - `id_key`:
 * @param sg_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmSequence = (atu8_id_key, sg_value) => Protobuf() // ...
    .b(atu8_id_key) // bytes id_key = 1
    .g(sg_value) // uint64 value = 2
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmGenesisState}
 */
export const decodeCosmwasmWasmGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 0, 0], [decodeCosmwasmWasmParams, decodeCosmwasmWasmCode, decodeCosmwasmWasmContract, decodeCosmwasmWasmSequence]);
/**
 * Decodes a protobuf Code message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmCode}
 */
export const decodeCosmwasmWasmCode = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1, 1], [0, decodeCosmwasmWasmCodeInfo]);
/**
 * Decodes a protobuf Contract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmContract}
 */
export const decodeCosmwasmWasmContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0, 0], [0, decodeCosmwasmWasmContractInfo, decodeCosmwasmWasmModel, decodeCosmwasmWasmContractCodeHistoryEntry]);
/**
 * Decodes a protobuf Sequence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmSequence}
 */
export const decodeCosmwasmWasmSequence = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3]);
/**
 * Destructures the fields of a {@link CosmwasmWasmGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: codes -
 *   - 2: contracts -
 *   - 3: sequences -
 */
export const destructCosmwasmWasmGenesisState = (g_struct) => [g_struct.params, g_struct.codes, g_struct.contracts, g_struct.sequences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_GENESIS_STATE = '/cosmwasm.wasm.v1.GenesisState';
/**
 * Destructures the fields of a {@link CosmwasmWasmCode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id -
 *   - 1: code_info -
 *   - 2: code_bytes -
 *   - 3: pinned - Pinned to wasmvm cache
 */
export const destructCosmwasmWasmCode = (g_struct) => [g_struct.code_id, g_struct.code_info, safe_base64_to_bytes(g_struct.code_bytes), g_struct.pinned];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_CODE = '/cosmwasm.wasm.v1.Code';
/**
 * Destructures the fields of a {@link CosmwasmWasmContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address -
 *   - 1: contract_info -
 *   - 2: contract_state -
 *   - 3: contract_code_history -
 */
export const destructCosmwasmWasmContract = (g_struct) => [g_struct.contract_address, g_struct.contract_info, g_struct.contract_state, g_struct.contract_code_history];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_CONTRACT = '/cosmwasm.wasm.v1.Contract';
/**
 * Destructures the fields of a {@link CosmwasmWasmSequence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id_key -
 *   - 1: value -
 */
export const destructCosmwasmWasmSequence = (g_struct) => [safe_base64_to_bytes(g_struct.id_key), g_struct.value];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_SEQUENCE = '/cosmwasm.wasm.v1.Sequence';
//# sourceMappingURL=genesis.js.map