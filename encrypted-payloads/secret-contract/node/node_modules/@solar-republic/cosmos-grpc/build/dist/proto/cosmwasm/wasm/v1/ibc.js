import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `MsgIBCSend` protobuf message:
 * @param s_channel - `channel`: the channel by which the packet will be sent
 * @param sg_timeout_height - `timeout_height`: Timeout height relative to the current block height. The timeout is disabled when set to 0.
 * @param sg_timeout_timestamp - `timeout_timestamp`: Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0.
 * @param atu8_data - `data`: Data is the payload to transfer. We must not make assumption what format or content is in here.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgIBCSend = (s_channel, sg_timeout_height, sg_timeout_timestamp, atu8_data) => Protobuf() // ...
    .s(s_channel, 2) // string channel = 2
    .g(sg_timeout_height, 4) // uint64 timeout_height = 4
    .g(sg_timeout_timestamp, 5) // uint64 timeout_timestamp = 5
    .b(atu8_data, 6) // bytes data = 6
    .o;
/**
 * Encodes a `MsgIBCSendResponse` protobuf message:
 * @param sg_sequence - `sequence`: Sequence number of the IBC packet sent
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgIBCSendResponse = (sg_sequence) => Protobuf() // ...
    .g(sg_sequence) // uint64 sequence = 1
    .o;
/**
 * Encodes a `MsgIBCCloseChannel` protobuf message: port and channel need to be owned by the contract
 * @param s_channel - `channel`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgIBCCloseChannel = (s_channel) => Protobuf() // ...
    .s(s_channel, 2) // string channel = 2
    .o;
/**
 * Decodes a protobuf IBCSend message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgIBCSend}
 */
export const decodeCosmwasmWasmMsgIBCSend = ((atu8_payload, [, s_channel, , sg_timeout_height, sg_timeout_timestamp, atu8_data] = decode_protobuf(atu8_payload, [0, 5, 0, 3, 3, 1])) => [__UNDEFINED, s_channel, __UNDEFINED, sg_timeout_height, sg_timeout_timestamp, atu8_data]);
/**
 * Decodes a protobuf IBCSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgIBCSendResponse}
 */
export const decodeCosmwasmWasmMsgIBCSendResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf IBCCloseChannel message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgIBCCloseChannel}
 */
export const decodeCosmwasmWasmMsgIBCCloseChannel = ((atu8_payload, [, s_channel] = decode_protobuf(atu8_payload, [0, 5])) => [__UNDEFINED, s_channel]);
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgIBCSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: channel - the channel by which the packet will be sent
 *   - 3: timeout_height - Timeout height relative to the current block height. The timeout is disabled when set to 0.
 *   - 4: timeout_timestamp - Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0.
 *   - 5: data - Data is the payload to transfer. We must not make assumption what format or content is in here.
 */
export const destructCosmwasmWasmMsgIBCSend = (g_struct) => [__UNDEFINED, g_struct.channel, __UNDEFINED, g_struct.timeout_height, g_struct.timeout_timestamp, safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_I_B_C_SEND = '/cosmwasm.wasm.v1.MsgIBCSend';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgIBCSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - Sequence number of the IBC packet sent
 */
export const destructCosmwasmWasmMsgIBCSendResponse = (g_struct) => [g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_I_B_C_SEND_RESPONSE = '/cosmwasm.wasm.v1.MsgIBCSendResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgIBCCloseChannel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: channel -
 */
export const destructCosmwasmWasmMsgIBCCloseChannel = (g_struct) => [__UNDEFINED, g_struct.channel];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_I_B_C_CLOSE_CHANNEL = '/cosmwasm.wasm.v1.MsgIBCCloseChannel';
//# sourceMappingURL=ibc.js.map