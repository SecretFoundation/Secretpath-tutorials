import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedGaiaGlobalfeeGenesisState = Encoded<'/gaia.globalfee.v1beta1.GenesisState'>;
export type EncodedGaiaGlobalfeeParams = Encoded<'/gaia.globalfee.v1beta1.Params'>;
/**
 * Encodes a `GenesisState` protobuf message: - initial state of module
 * @param g_params - `params`: Params of this module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeGaiaGlobalfeeGenesisState: (atu8_params?: Opt<Encoded<'/gaia.globalfee.v1beta1.Params'>>) => EncodedGaiaGlobalfeeGenesisState;
/**
 * Encodes a `Params` protobuf message: defines the set of module parameters.
 * @param a_minimum_gas_prices - `minimum_gas_prices`: stores the minimum gas price(s) for all TX on the chain. When multiple coins are defined then they are accepted alternatively. The list must be sorted by denoms asc. No duplicate denoms or zero amount values allowed. For more information see https://docs.cosmos.network/main/modules/auth#concepts
 * @param a_bypass_min_fee_msg_types - `bypass_min_fee_msg_types`: defines a list of message type urls that are free of fee charge.
 * @param sg_max_total_bypass_min_fee_msg_gas_usage - `max_total_bypass_min_fee_msg_gas_usage`: defines the total maximum gas usage allowed for a transaction containing only messages of types in bypass_min_fee_msg_types to bypass fee charge.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeGaiaGlobalfeeParams: (a_minimum_gas_prices?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>, a_bypass_min_fee_msg_types?: Opt<string[]>, sg_max_total_bypass_min_fee_msg_gas_usage?: Opt<WeakUint64Str>) => EncodedGaiaGlobalfeeParams;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: params - Params of this module
 */
export type DecodedGaiaGlobalfeeGenesisState = [
    a_params?: DecodedGaiaGlobalfeeParams
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedGaiaGlobalfeeGenesisState}
 */
export declare const decodeGaiaGlobalfeeGenesisState: (atu8_payload: Uint8Array) => DecodedGaiaGlobalfeeGenesisState;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: minimum_gas_prices - stores the minimum gas price(s) for all TX on the chain. When multiple coins are defined then they are accepted alternatively. The list must be sorted by denoms asc. No duplicate denoms or zero amount values allowed. For more information see https://docs.cosmos.network/main/modules/auth#concepts
 *   - 1: bypass_min_fee_msg_types - defines a list of message type urls that are free of fee charge.
 *   - 2: max_total_bypass_min_fee_msg_gas_usage - defines the total maximum gas usage allowed for a transaction containing only messages of types in bypass_min_fee_msg_types to bypass fee charge.
 */
export type DecodedGaiaGlobalfeeParams = [
    a_minimum_gas_prices?: DecodedCosmosBaseDecCoin[],
    a_bypass_min_fee_msg_types?: string[],
    sg_max_total_bypass_min_fee_msg_gas_usage?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedGaiaGlobalfeeParams}
 */
export declare const decodeGaiaGlobalfeeParams: (atu8_payload: Uint8Array) => DecodedGaiaGlobalfeeParams;
/**
 * Destructures the fields of a {@link GaiaGlobalfeeParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: minimum_gas_prices - stores the minimum gas price(s) for all TX on the chain. When multiple coins are defined then they are accepted alternatively. The list must be sorted by denoms asc. No duplicate denoms or zero amount values allowed. For more information see https://docs.cosmos.network/main/modules/auth#concepts
 *   - 1: bypass_min_fee_msg_types - defines a list of message type urls that are free of fee charge.
 *   - 2: max_total_bypass_min_fee_msg_gas_usage - defines the total maximum gas usage allowed for a transaction containing only messages of types in bypass_min_fee_msg_types to bypass fee charge.
 */
export declare const destructGaiaGlobalfeeParams: (g_struct: GaiaGlobalfeeParams) => [minimum_gas_prices?: CosmosBaseDecCoin[], bypass_min_fee_msg_types?: string[], max_total_bypass_min_fee_msg_gas_usage?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_GAIA_GLOBALFEE_PARAMS = "/gaia.globalfee.v1beta1.Params";
/**
 * JSON serialization of `gaia.globalfee.v1beta1.Params` - defines the set of module parameters.
 */
export type GaiaGlobalfeeParams = {
    minimum_gas_prices?: CosmosBaseDecCoin[] | undefined;
    bypass_min_fee_msg_types?: string[] | undefined;
    max_total_bypass_min_fee_msg_gas_usage?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link GaiaGlobalfeeGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - Params of this module
 */
export declare const destructGaiaGlobalfeeGenesisState: (g_struct: GaiaGlobalfeeGenesisState) => [params?: GaiaGlobalfeeParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_GAIA_GLOBALFEE_GENESIS_STATE = "/gaia.globalfee.v1beta1.GenesisState";
/**
 * JSON serialization of `gaia.globalfee.v1beta1.GenesisState` - - initial state of module
 */
export type GaiaGlobalfeeGenesisState = {
    params?: GaiaGlobalfeeParams | undefined;
};
