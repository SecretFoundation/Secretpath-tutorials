import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `IncentivizedAcknowledgement` protobuf message: the acknowledgement format to be used by applications wrapped in the fee middleware
 * @param atu8_app_acknowledgement - `app_acknowledgement`: the underlying app acknowledgement bytes
 * @param sa_forward_relayer - `forward_relayer_address`: the relayer address which submits the recv packet message
 * @param b_underlying_app_success - `underlying_app_success`: success flag of the base application callback
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeIncentivizedAcknowledgement = (atu8_app_acknowledgement, sa_forward_relayer, b_underlying_app_success) => Protobuf() // ...
    .b(atu8_app_acknowledgement) // bytes app_acknowledgement = 1
    .s(sa_forward_relayer) // string forward_relayer_address = 2
    .v(b_underlying_app_success) // boolean underlying_app_success = 3
    .o;
/**
 * Decodes a protobuf IncentivizedAcknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeIncentivizedAcknowledgement}
 */
export const decodeIbcApplicationsFeeIncentivizedAcknowledgement = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1]);
/**
 * Destructures the fields of a {@link IbcApplicationsFeeIncentivizedAcknowledgement} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: app_acknowledgement - the underlying app acknowledgement bytes
 *   - 1: forward_relayer_address - the relayer address which submits the recv packet message
 *   - 2: underlying_app_success - success flag of the base application callback
 */
export const destructIbcApplicationsFeeIncentivizedAcknowledgement = (g_struct) => [safe_base64_to_bytes(g_struct.app_acknowledgement), g_struct.forward_relayer_address, g_struct.underlying_app_success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_INCENTIVIZED_ACKNOWLEDGEMENT = '/ibc.applications.fee.v1.IncentivizedAcknowledgement';
//# sourceMappingURL=ack.js.map