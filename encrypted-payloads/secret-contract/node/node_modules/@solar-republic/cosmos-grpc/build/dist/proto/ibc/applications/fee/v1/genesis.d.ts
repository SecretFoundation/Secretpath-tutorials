import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { IbcApplicationsFeeIdentifiedPacketFees, DecodedIbcApplicationsFeeIdentifiedPacketFees } from './fee.js';
import type { IbcCoreChannelPacketId, DecodedIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
export type EncodedIbcApplicationsFeeGenesisState = Encoded<'/ibc.applications.fee.v1.GenesisState'>;
export type EncodedIbcApplicationsFeeFeeEnabledChannel = Encoded<'/ibc.applications.fee.v1.FeeEnabledChannel'>;
export type EncodedIbcApplicationsFeeRegisteredPayee = Encoded<'/ibc.applications.fee.v1.RegisteredPayee'>;
export type EncodedIbcApplicationsFeeRegisteredCounterpartyPayee = Encoded<'/ibc.applications.fee.v1.RegisteredCounterpartyPayee'>;
export type EncodedIbcApplicationsFeeForwardRelayerAddress = Encoded<'/ibc.applications.fee.v1.ForwardRelayerAddress'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the ICS29 fee middleware genesis state
 * @param a_identified_fees - `identified_fees`: list of identified packet fees
 * @param a_fee_enabled_channels - `fee_enabled_channels`: list of fee enabled channels
 * @param a_registered_payees - `registered_payees`: list of registered payees
 * @param a_registered_counterparty_payees - `registered_counterparty_payees`: list of registered counterparty payees
 * @param a_forward_relayers - `forward_relayers`: list of forward relayer addresses
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeGenesisState: (a_identified_fees?: Opt<Encoded<'/ibc.applications.fee.v1.IdentifiedPacketFees'>[]>, a_fee_enabled_channels?: Opt<Encoded<'/ibc.applications.fee.v1.FeeEnabledChannel'>[]>, a_registered_payees?: Opt<Encoded<'/ibc.applications.fee.v1.RegisteredPayee'>[]>, a_registered_counterparty_payees?: Opt<Encoded<'/ibc.applications.fee.v1.RegisteredCounterpartyPayee'>[]>, a_forward_relayers?: Opt<Encoded<'/ibc.applications.fee.v1.ForwardRelayerAddress'>[]>) => EncodedIbcApplicationsFeeGenesisState;
/**
 * Encodes a `FeeEnabledChannel` protobuf message: contains the PortID & ChannelID for a fee enabled channel
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeFeeEnabledChannel: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcApplicationsFeeFeeEnabledChannel;
/**
 * Encodes a `RegisteredPayee` protobuf message: contains the relayer address and payee address for a specific channel
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_payee - `payee`: the payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeRegisteredPayee: (si_channel?: Opt<string>, s_relayer?: Opt<string>, s_payee?: Opt<string>) => EncodedIbcApplicationsFeeRegisteredPayee;
/**
 * Encodes a `RegisteredCounterpartyPayee` protobuf message: contains the relayer address and counterparty payee address for a specific channel (used for recv fee distribution)
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_counterparty_payee - `counterparty_payee`: the counterparty payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeRegisteredCounterpartyPayee: (si_channel?: Opt<string>, s_relayer?: Opt<string>, s_counterparty_payee?: Opt<string>) => EncodedIbcApplicationsFeeRegisteredCounterpartyPayee;
/**
 * Encodes a `ForwardRelayerAddress` protobuf message: contains the forward relayer address and PacketId used for async acknowledgements
 * @param sa_address - `address`: the forward relayer address
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of the channel ID, port ID and sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeForwardRelayerAddress: (sa_address?: Opt<WeakAccountAddr>, atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>) => EncodedIbcApplicationsFeeForwardRelayerAddress;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: identified_fees - list of identified packet fees
 *   - 1: fee_enabled_channels - list of fee enabled channels
 *   - 2: registered_payees - list of registered payees
 *   - 3: registered_counterparty_payees - list of registered counterparty payees
 *   - 4: forward_relayers - list of forward relayer addresses
 */
export type DecodedIbcApplicationsFeeGenesisState = [
    a_identified_fees?: DecodedIbcApplicationsFeeIdentifiedPacketFees[],
    a_fee_enabled_channels?: DecodedIbcApplicationsFeeFeeEnabledChannel[],
    a_registered_payees?: DecodedIbcApplicationsFeeRegisteredPayee[],
    a_registered_counterparty_payees?: DecodedIbcApplicationsFeeRegisteredCounterpartyPayee[],
    a_forward_relayers?: DecodedIbcApplicationsFeeForwardRelayerAddress[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeGenesisState}
 */
export declare const decodeIbcApplicationsFeeGenesisState: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeGenesisState;
/**
 * A decoded protobuf FeeEnabledChannel message
 *
 * Tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export type DecodedIbcApplicationsFeeFeeEnabledChannel = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf FeeEnabledChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeFeeEnabledChannel}
 */
export declare const decodeIbcApplicationsFeeFeeEnabledChannel: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeFeeEnabledChannel;
/**
 * A decoded protobuf RegisteredPayee message
 *
 * Tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address
 *   - 2: payee - the payee address
 */
export type DecodedIbcApplicationsFeeRegisteredPayee = [
    si_channel?: string,
    s_relayer?: string,
    s_payee?: string
];
/**
 * Decodes a protobuf RegisteredPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeRegisteredPayee}
 */
export declare const decodeIbcApplicationsFeeRegisteredPayee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeRegisteredPayee;
/**
 * A decoded protobuf RegisteredCounterpartyPayee message
 *
 * Tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address
 *   - 2: counterparty_payee - the counterparty payee address
 */
export type DecodedIbcApplicationsFeeRegisteredCounterpartyPayee = [
    si_channel?: string,
    s_relayer?: string,
    s_counterparty_payee?: string
];
/**
 * Decodes a protobuf RegisteredCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeRegisteredCounterpartyPayee}
 */
export declare const decodeIbcApplicationsFeeRegisteredCounterpartyPayee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeRegisteredCounterpartyPayee;
/**
 * A decoded protobuf ForwardRelayerAddress message
 *
 * Tuple where:
 *   - 0: address - the forward relayer address
 *   - 1: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 */
export type DecodedIbcApplicationsFeeForwardRelayerAddress = [
    sa_address?: CwAccountAddr,
    a_packet_id?: DecodedIbcCoreChannelPacketId
];
/**
 * Decodes a protobuf ForwardRelayerAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeForwardRelayerAddress}
 */
export declare const decodeIbcApplicationsFeeForwardRelayerAddress: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeForwardRelayerAddress;
/**
 * Destructures the fields of a {@link IbcApplicationsFeeFeeEnabledChannel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export declare const destructIbcApplicationsFeeFeeEnabledChannel: (g_struct: IbcApplicationsFeeFeeEnabledChannel) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_FEE_ENABLED_CHANNEL = "/ibc.applications.fee.v1.FeeEnabledChannel";
/**
 * JSON serialization of `ibc.applications.fee.v1.FeeEnabledChannel` - contains the PortID & ChannelID for a fee enabled channel
 */
export type IbcApplicationsFeeFeeEnabledChannel = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identified_fees - list of identified packet fees
 *   - 1: fee_enabled_channels - list of fee enabled channels
 *   - 2: registered_payees - list of registered payees
 *   - 3: registered_counterparty_payees - list of registered counterparty payees
 *   - 4: forward_relayers - list of forward relayer addresses
 */
export declare const destructIbcApplicationsFeeGenesisState: (g_struct: IbcApplicationsFeeGenesisState) => [identified_fees?: IbcApplicationsFeeIdentifiedPacketFees[], fee_enabled_channels?: IbcApplicationsFeeFeeEnabledChannel[], registered_payees?: IbcApplicationsFeeRegisteredPayee[], registered_counterparty_payees?: IbcApplicationsFeeRegisteredCounterpartyPayee[], forward_relayers?: IbcApplicationsFeeForwardRelayerAddress[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_GENESIS_STATE = "/ibc.applications.fee.v1.GenesisState";
/**
 * JSON serialization of `ibc.applications.fee.v1.GenesisState` - defines the ICS29 fee middleware genesis state
 */
export type IbcApplicationsFeeGenesisState = {
    identified_fees?: IbcApplicationsFeeIdentifiedPacketFees[] | undefined;
    fee_enabled_channels?: IbcApplicationsFeeFeeEnabledChannel[] | undefined;
    registered_payees?: IbcApplicationsFeeRegisteredPayee[] | undefined;
    registered_counterparty_payees?: IbcApplicationsFeeRegisteredCounterpartyPayee[] | undefined;
    forward_relayers?: IbcApplicationsFeeForwardRelayerAddress[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeRegisteredPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address
 *   - 2: payee - the payee address
 */
export declare const destructIbcApplicationsFeeRegisteredPayee: (g_struct: IbcApplicationsFeeRegisteredPayee) => [channel_id?: string, relayer?: string, payee?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_REGISTERED_PAYEE = "/ibc.applications.fee.v1.RegisteredPayee";
/**
 * JSON serialization of `ibc.applications.fee.v1.RegisteredPayee` - contains the relayer address and payee address for a specific channel
 */
export type IbcApplicationsFeeRegisteredPayee = {
    channel_id?: string | undefined;
    relayer?: string | undefined;
    payee?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeRegisteredCounterpartyPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address
 *   - 2: counterparty_payee - the counterparty payee address
 */
export declare const destructIbcApplicationsFeeRegisteredCounterpartyPayee: (g_struct: IbcApplicationsFeeRegisteredCounterpartyPayee) => [channel_id?: string, relayer?: string, counterparty_payee?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_REGISTERED_COUNTERPARTY_PAYEE = "/ibc.applications.fee.v1.RegisteredCounterpartyPayee";
/**
 * JSON serialization of `ibc.applications.fee.v1.RegisteredCounterpartyPayee` - contains the relayer address and counterparty payee address for a specific channel (used for recv fee distribution)
 */
export type IbcApplicationsFeeRegisteredCounterpartyPayee = {
    channel_id?: string | undefined;
    relayer?: string | undefined;
    counterparty_payee?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeForwardRelayerAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the forward relayer address
 *   - 1: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 */
export declare const destructIbcApplicationsFeeForwardRelayerAddress: (g_struct: IbcApplicationsFeeForwardRelayerAddress) => [address?: CwAccountAddr, packet_id?: IbcCoreChannelPacketId];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_FORWARD_RELAYER_ADDRESS = "/ibc.applications.fee.v1.ForwardRelayerAddress";
/**
 * JSON serialization of `ibc.applications.fee.v1.ForwardRelayerAddress` - contains the forward relayer address and PacketId used for async acknowledgements
 */
export type IbcApplicationsFeeForwardRelayerAddress = {
    address?: CwAccountAddr | undefined;
    packet_id?: IbcCoreChannelPacketId | undefined;
};
