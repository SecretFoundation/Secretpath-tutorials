import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { decodeIbcApplicationsFeeIdentifiedPacketFees } from './fee.js';
import { decodeIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the ICS29 fee middleware genesis state
 * @param a_identified_fees - `identified_fees`: list of identified packet fees
 * @param a_fee_enabled_channels - `fee_enabled_channels`: list of fee enabled channels
 * @param a_registered_payees - `registered_payees`: list of registered payees
 * @param a_registered_counterparty_payees - `registered_counterparty_payees`: list of registered counterparty payees
 * @param a_forward_relayers - `forward_relayers`: list of forward relayer addresses
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeGenesisState = (a_identified_fees, a_fee_enabled_channels, a_registered_payees, a_registered_counterparty_payees, a_forward_relayers) => Protobuf() // ...
    .B(a_identified_fees) // IdentifiedPacketFees[] identified_fees = 1
    .B(a_fee_enabled_channels) // FeeEnabledChannel[] fee_enabled_channels = 2
    .B(a_registered_payees) // RegisteredPayee[] registered_payees = 3
    .B(a_registered_counterparty_payees) // RegisteredCounterpartyPayee[] registered_counterparty_payees = 4
    .B(a_forward_relayers) // ForwardRelayerAddress[] forward_relayers = 5
    .o;
/**
 * Encodes a `FeeEnabledChannel` protobuf message: contains the PortID & ChannelID for a fee enabled channel
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeFeeEnabledChannel = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `RegisteredPayee` protobuf message: contains the relayer address and payee address for a specific channel
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_payee - `payee`: the payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeRegisteredPayee = (si_channel, s_relayer, s_payee) => Protobuf() // ...
    .s(si_channel) // string channel_id = 1
    .s(s_relayer) // string relayer = 2
    .s(s_payee) // string payee = 3
    .o;
/**
 * Encodes a `RegisteredCounterpartyPayee` protobuf message: contains the relayer address and counterparty payee address for a specific channel (used for recv fee distribution)
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_counterparty_payee - `counterparty_payee`: the counterparty payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeRegisteredCounterpartyPayee = (si_channel, s_relayer, s_counterparty_payee) => Protobuf() // ...
    .s(si_channel) // string channel_id = 1
    .s(s_relayer) // string relayer = 2
    .s(s_counterparty_payee) // string counterparty_payee = 3
    .o;
/**
 * Encodes a `ForwardRelayerAddress` protobuf message: contains the forward relayer address and PacketId used for async acknowledgements
 * @param sa_address - `address`: the forward relayer address
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of the channel ID, port ID and sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeForwardRelayerAddress = (sa_address, atu8_packet_id) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_packet_id) // PacketId packet_id = 2
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeGenesisState}
 */
export const decodeIbcApplicationsFeeGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 0, 0, 0], [decodeIbcApplicationsFeeIdentifiedPacketFees, decodeIbcApplicationsFeeFeeEnabledChannel, decodeIbcApplicationsFeeRegisteredPayee, decodeIbcApplicationsFeeRegisteredCounterpartyPayee, decodeIbcApplicationsFeeForwardRelayerAddress]);
/**
 * Decodes a protobuf FeeEnabledChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeFeeEnabledChannel}
 */
export const decodeIbcApplicationsFeeFeeEnabledChannel = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf RegisteredPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeRegisteredPayee}
 */
export const decodeIbcApplicationsFeeRegisteredPayee = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf RegisteredCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeRegisteredCounterpartyPayee}
 */
export const decodeIbcApplicationsFeeRegisteredCounterpartyPayee = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf ForwardRelayerAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeForwardRelayerAddress}
 */
export const decodeIbcApplicationsFeeForwardRelayerAddress = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeIbcCoreChannelPacketId]);
/**
 * Destructures the fields of a {@link IbcApplicationsFeeFeeEnabledChannel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export const destructIbcApplicationsFeeFeeEnabledChannel = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_FEE_ENABLED_CHANNEL = '/ibc.applications.fee.v1.FeeEnabledChannel';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identified_fees - list of identified packet fees
 *   - 1: fee_enabled_channels - list of fee enabled channels
 *   - 2: registered_payees - list of registered payees
 *   - 3: registered_counterparty_payees - list of registered counterparty payees
 *   - 4: forward_relayers - list of forward relayer addresses
 */
export const destructIbcApplicationsFeeGenesisState = (g_struct) => [g_struct.identified_fees, g_struct.fee_enabled_channels, g_struct.registered_payees, g_struct.registered_counterparty_payees, g_struct.forward_relayers];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_GENESIS_STATE = '/ibc.applications.fee.v1.GenesisState';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeRegisteredPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address
 *   - 2: payee - the payee address
 */
export const destructIbcApplicationsFeeRegisteredPayee = (g_struct) => [g_struct.channel_id, g_struct.relayer, g_struct.payee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_REGISTERED_PAYEE = '/ibc.applications.fee.v1.RegisteredPayee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeRegisteredCounterpartyPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address
 *   - 2: counterparty_payee - the counterparty payee address
 */
export const destructIbcApplicationsFeeRegisteredCounterpartyPayee = (g_struct) => [g_struct.channel_id, g_struct.relayer, g_struct.counterparty_payee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_REGISTERED_COUNTERPARTY_PAYEE = '/ibc.applications.fee.v1.RegisteredCounterpartyPayee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeForwardRelayerAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the forward relayer address
 *   - 1: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 */
export const destructIbcApplicationsFeeForwardRelayerAddress = (g_struct) => [g_struct.address, g_struct.packet_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_FORWARD_RELAYER_ADDRESS = '/ibc.applications.fee.v1.ForwardRelayerAddress';
//# sourceMappingURL=genesis.js.map