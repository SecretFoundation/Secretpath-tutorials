import type { Encoded, Opt } from '../../../../../api/types.js';
import type { IbcApplicationsFeeFee, DecodedIbcApplicationsFeeFee, IbcApplicationsFeePacketFee, DecodedIbcApplicationsFeePacketFee } from './fee.js';
import type { IbcCoreChannelPacketId, DecodedIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
export type EncodedIbcApplicationsFeeMsgRegisterPayee = Encoded<'/ibc.applications.fee.v1.MsgRegisterPayee'>;
export type EncodedIbcApplicationsFeeMsgRegisterPayeeResponse = Encoded<'/ibc.applications.fee.v1.MsgRegisterPayeeResponse'>;
export type EncodedIbcApplicationsFeeMsgRegisterCounterpartyPayee = Encoded<'/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee'>;
export type EncodedIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse = Encoded<'/ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse'>;
export type EncodedIbcApplicationsFeeMsgPayPacketFee = Encoded<'/ibc.applications.fee.v1.MsgPayPacketFee'>;
export type EncodedIbcApplicationsFeeMsgPayPacketFeeResponse = Encoded<'/ibc.applications.fee.v1.MsgPayPacketFeeResponse'>;
export type EncodedIbcApplicationsFeeMsgPayPacketFeeAsync = Encoded<'/ibc.applications.fee.v1.MsgPayPacketFeeAsync'>;
export type EncodedIbcApplicationsFeeMsgPayPacketFeeAsyncResponse = Encoded<'/ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse'>;
/**
 * Encodes a `MsgRegisterPayee` protobuf message: defines the request type for the RegisterPayee rpc
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_payee - `payee`: the payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgRegisterPayee: (si_port?: Opt<string>, si_channel?: Opt<string>, s_relayer?: Opt<string>, s_payee?: Opt<string>) => EncodedIbcApplicationsFeeMsgRegisterPayee;
/**
 * Encodes a `MsgRegisterPayeeResponse` protobuf message: defines the response type for the RegisterPayee rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgRegisterPayeeResponse: () => EncodedIbcApplicationsFeeMsgRegisterPayeeResponse;
/**
 * Encodes a `MsgRegisterCounterpartyPayee` protobuf message: defines the request type for the RegisterCounterpartyPayee rpc
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_counterparty_payee - `counterparty_payee`: the counterparty payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgRegisterCounterpartyPayee: (si_port?: Opt<string>, si_channel?: Opt<string>, s_relayer?: Opt<string>, s_counterparty_payee?: Opt<string>) => EncodedIbcApplicationsFeeMsgRegisterCounterpartyPayee;
/**
 * Encodes a `MsgRegisterCounterpartyPayeeResponse` protobuf message: defines the response type for the RegisterCounterpartyPayee rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse: () => EncodedIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse;
/**
 * Encodes a `MsgPayPacketFee` protobuf message: defines the request type for the PayPacketFee rpc This Msg can be used to pay for a packet at the next sequence send & should be combined with the Msg that will be paid for
 * @param g_fee - `fee`: encapsulates the recv, ack and timeout fees associated with an IBC packet
 * @param si_source_port - `source_port_id`: the source port unique identifier
 * @param si_source_channel - `source_channel_id`: the source channel unique identifier
 * @param s_signer - `signer`: account address to refund fee if necessary
 * @param a_relayers - `relayers`: optional list of relayers permitted to the receive packet fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgPayPacketFee: (atu8_fee?: Opt<Encoded<'/ibc.applications.fee.v1.Fee'>>, si_source_port?: Opt<string>, si_source_channel?: Opt<string>, s_signer?: Opt<string>, a_relayers?: Opt<string[]>) => EncodedIbcApplicationsFeeMsgPayPacketFee;
/**
 * Encodes a `MsgPayPacketFeeResponse` protobuf message: defines the response type for the PayPacketFee rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgPayPacketFeeResponse: () => EncodedIbcApplicationsFeeMsgPayPacketFeeResponse;
/**
 * Encodes a `MsgPayPacketFeeAsync` protobuf message: defines the request type for the PayPacketFeeAsync rpc This Msg can be used to pay for a packet at a specified sequence (instead of the next sequence send)
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of the channel ID, port ID and sequence
 * @param g_packet_fee - `packet_fee`: the packet fee associated with a particular IBC packet
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgPayPacketFeeAsync: (atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>, atu8_packet_fee?: Opt<Encoded<'/ibc.applications.fee.v1.PacketFee'>>) => EncodedIbcApplicationsFeeMsgPayPacketFeeAsync;
/**
 * Encodes a `MsgPayPacketFeeAsyncResponse` protobuf message: defines the response type for the PayPacketFeeAsync rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeMsgPayPacketFeeAsyncResponse: () => EncodedIbcApplicationsFeeMsgPayPacketFeeAsyncResponse;
/**
 * A decoded protobuf RegisterPayee message
 *
 * Tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 *   - 2: relayer - the relayer address
 *   - 3: payee - the payee address
 */
export type DecodedIbcApplicationsFeeMsgRegisterPayee = [
    si_port?: string,
    si_channel?: string,
    s_relayer?: string,
    s_payee?: string
];
/**
 * Decodes a protobuf RegisterPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterPayee}
 */
export declare const decodeIbcApplicationsFeeMsgRegisterPayee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeMsgRegisterPayee;
/**
 * A decoded protobuf RegisterPayee message
 *
 * Tuple where:
 */
export type DecodedIbcApplicationsFeeMsgRegisterPayeeResponse = [];
/**
 * Decodes a protobuf RegisterPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterPayeeResponse}
 */
export declare const decodeIbcApplicationsFeeMsgRegisterPayeeResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RegisterCounterpartyPayee message
 *
 * Tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 *   - 2: relayer - the relayer address
 *   - 3: counterparty_payee - the counterparty payee address
 */
export type DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayee = [
    si_port?: string,
    si_channel?: string,
    s_relayer?: string,
    s_counterparty_payee?: string
];
/**
 * Decodes a protobuf RegisterCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayee}
 */
export declare const decodeIbcApplicationsFeeMsgRegisterCounterpartyPayee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayee;
/**
 * A decoded protobuf RegisterCounterpartyPayee message
 *
 * Tuple where:
 */
export type DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse = [];
/**
 * Decodes a protobuf RegisterCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse}
 */
export declare const decodeIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf PayPacketFee message
 *
 * Tuple where:
 *   - 0: fee - encapsulates the recv, ack and timeout fees associated with an IBC packet
 *   - 1: source_port_id - the source port unique identifier
 *   - 2: source_channel_id - the source channel unique identifier
 *   - 3: signer - account address to refund fee if necessary
 *   - 4: relayers - optional list of relayers permitted to the receive packet fees
 */
export type DecodedIbcApplicationsFeeMsgPayPacketFee = [
    a_fee?: DecodedIbcApplicationsFeeFee,
    si_source_port?: string,
    si_source_channel?: string,
    s_signer?: string,
    a_relayers?: string[]
];
/**
 * Decodes a protobuf PayPacketFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFee}
 */
export declare const decodeIbcApplicationsFeeMsgPayPacketFee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeMsgPayPacketFee;
/**
 * A decoded protobuf PayPacketFee message
 *
 * Tuple where:
 */
export type DecodedIbcApplicationsFeeMsgPayPacketFeeResponse = [];
/**
 * Decodes a protobuf PayPacketFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFeeResponse}
 */
export declare const decodeIbcApplicationsFeeMsgPayPacketFeeResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf PayPacketFeeAsync message
 *
 * Tuple where:
 *   - 0: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 *   - 1: packet_fee - the packet fee associated with a particular IBC packet
 */
export type DecodedIbcApplicationsFeeMsgPayPacketFeeAsync = [
    a_packet_id?: DecodedIbcCoreChannelPacketId,
    a_packet_fee?: DecodedIbcApplicationsFeePacketFee
];
/**
 * Decodes a protobuf PayPacketFeeAsync message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFeeAsync}
 */
export declare const decodeIbcApplicationsFeeMsgPayPacketFeeAsync: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeMsgPayPacketFeeAsync;
/**
 * A decoded protobuf PayPacketFeeAsync message
 *
 * Tuple where:
 */
export type DecodedIbcApplicationsFeeMsgPayPacketFeeAsyncResponse = [];
/**
 * Decodes a protobuf PayPacketFeeAsync message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFeeAsyncResponse}
 */
export declare const decodeIbcApplicationsFeeMsgPayPacketFeeAsyncResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 *   - 2: relayer - the relayer address
 *   - 3: payee - the payee address
 */
export declare const destructIbcApplicationsFeeMsgRegisterPayee: (g_struct: IbcApplicationsFeeMsgRegisterPayee) => [port_id?: string, channel_id?: string, relayer?: string, payee?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_PAYEE = "/ibc.applications.fee.v1.MsgRegisterPayee";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgRegisterPayee` - defines the request type for the RegisterPayee rpc
 */
export type IbcApplicationsFeeMsgRegisterPayee = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    relayer?: string | undefined;
    payee?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcApplicationsFeeMsgRegisterPayeeResponse: (g_struct: IbcApplicationsFeeMsgRegisterPayeeResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_PAYEE_RESPONSE = "/ibc.applications.fee.v1.MsgRegisterPayeeResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgRegisterPayeeResponse` - defines the response type for the RegisterPayee rpc
 */
export type IbcApplicationsFeeMsgRegisterPayeeResponse = {};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterCounterpartyPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 *   - 2: relayer - the relayer address
 *   - 3: counterparty_payee - the counterparty payee address
 */
export declare const destructIbcApplicationsFeeMsgRegisterCounterpartyPayee: (g_struct: IbcApplicationsFeeMsgRegisterCounterpartyPayee) => [port_id?: string, channel_id?: string, relayer?: string, counterparty_payee?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_COUNTERPARTY_PAYEE = "/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgRegisterCounterpartyPayee` - defines the request type for the RegisterCounterpartyPayee rpc
 */
export type IbcApplicationsFeeMsgRegisterCounterpartyPayee = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    relayer?: string | undefined;
    counterparty_payee?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse: (g_struct: IbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_COUNTERPARTY_PAYEE_RESPONSE = "/ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse` - defines the response type for the RegisterCounterpartyPayee rpc
 */
export type IbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse = {};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee - encapsulates the recv, ack and timeout fees associated with an IBC packet
 *   - 1: source_port_id - the source port unique identifier
 *   - 2: source_channel_id - the source channel unique identifier
 *   - 3: signer - account address to refund fee if necessary
 *   - 4: relayers - optional list of relayers permitted to the receive packet fees
 */
export declare const destructIbcApplicationsFeeMsgPayPacketFee: (g_struct: IbcApplicationsFeeMsgPayPacketFee) => [fee?: IbcApplicationsFeeFee, source_port_id?: string, source_channel_id?: string, signer?: string, relayers?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE = "/ibc.applications.fee.v1.MsgPayPacketFee";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgPayPacketFee` - defines the request type for the PayPacketFee rpc This Msg can be used to pay for a packet at the next sequence send & should be combined with the Msg that will be paid for
 */
export type IbcApplicationsFeeMsgPayPacketFee = {
    fee?: IbcApplicationsFeeFee | undefined;
    source_port_id?: string | undefined;
    source_channel_id?: string | undefined;
    signer?: string | undefined;
    relayers?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcApplicationsFeeMsgPayPacketFeeResponse: (g_struct: IbcApplicationsFeeMsgPayPacketFeeResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE_RESPONSE = "/ibc.applications.fee.v1.MsgPayPacketFeeResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgPayPacketFeeResponse` - defines the response type for the PayPacketFee rpc
 */
export type IbcApplicationsFeeMsgPayPacketFeeResponse = {};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFeeAsync} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 *   - 1: packet_fee - the packet fee associated with a particular IBC packet
 */
export declare const destructIbcApplicationsFeeMsgPayPacketFeeAsync: (g_struct: IbcApplicationsFeeMsgPayPacketFeeAsync) => [packet_id?: IbcCoreChannelPacketId, packet_fee?: IbcApplicationsFeePacketFee];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE_ASYNC = "/ibc.applications.fee.v1.MsgPayPacketFeeAsync";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgPayPacketFeeAsync` - defines the request type for the PayPacketFeeAsync rpc This Msg can be used to pay for a packet at a specified sequence (instead of the next sequence send)
 */
export type IbcApplicationsFeeMsgPayPacketFeeAsync = {
    packet_id?: IbcCoreChannelPacketId | undefined;
    packet_fee?: IbcApplicationsFeePacketFee | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFeeAsyncResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcApplicationsFeeMsgPayPacketFeeAsyncResponse: (g_struct: IbcApplicationsFeeMsgPayPacketFeeAsyncResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE_ASYNC_RESPONSE = "/ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse` - defines the response type for the PayPacketFeeAsync rpc
 */
export type IbcApplicationsFeeMsgPayPacketFeeAsyncResponse = {};
