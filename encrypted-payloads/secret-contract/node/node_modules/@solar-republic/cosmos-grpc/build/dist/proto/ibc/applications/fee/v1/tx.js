/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { decodeIbcApplicationsFeeFee, decodeIbcApplicationsFeePacketFee } from './fee.js';
import { decodeIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
/**
 * Encodes a `MsgRegisterPayee` protobuf message: defines the request type for the RegisterPayee rpc
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_payee - `payee`: the payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgRegisterPayee = (si_port, si_channel, s_relayer, s_payee) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .s(s_relayer) // string relayer = 3
    .s(s_payee) // string payee = 4
    .o;
/**
 * Encodes a `MsgRegisterPayeeResponse` protobuf message: defines the response type for the RegisterPayee rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgRegisterPayeeResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgRegisterCounterpartyPayee` protobuf message: defines the request type for the RegisterCounterpartyPayee rpc
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address
 * @param s_counterparty_payee - `counterparty_payee`: the counterparty payee address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgRegisterCounterpartyPayee = (si_port, si_channel, s_relayer, s_counterparty_payee) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .s(s_relayer) // string relayer = 3
    .s(s_counterparty_payee) // string counterparty_payee = 4
    .o;
/**
 * Encodes a `MsgRegisterCounterpartyPayeeResponse` protobuf message: defines the response type for the RegisterCounterpartyPayee rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgPayPacketFee` protobuf message: defines the request type for the PayPacketFee rpc This Msg can be used to pay for a packet at the next sequence send & should be combined with the Msg that will be paid for
 * @param g_fee - `fee`: encapsulates the recv, ack and timeout fees associated with an IBC packet
 * @param si_source_port - `source_port_id`: the source port unique identifier
 * @param si_source_channel - `source_channel_id`: the source channel unique identifier
 * @param s_signer - `signer`: account address to refund fee if necessary
 * @param a_relayers - `relayers`: optional list of relayers permitted to the receive packet fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgPayPacketFee = (atu8_fee, si_source_port, si_source_channel, s_signer, a_relayers) => Protobuf() // ...
    .b(atu8_fee) // Fee fee = 1
    .s(si_source_port) // string source_port_id = 2
    .s(si_source_channel) // string source_channel_id = 3
    .s(s_signer) // string signer = 4
    .S(a_relayers) // string[] relayers = 5
    .o;
/**
 * Encodes a `MsgPayPacketFeeResponse` protobuf message: defines the response type for the PayPacketFee rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgPayPacketFeeResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgPayPacketFeeAsync` protobuf message: defines the request type for the PayPacketFeeAsync rpc This Msg can be used to pay for a packet at a specified sequence (instead of the next sequence send)
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of the channel ID, port ID and sequence
 * @param g_packet_fee - `packet_fee`: the packet fee associated with a particular IBC packet
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgPayPacketFeeAsync = (atu8_packet_id, atu8_packet_fee) => Protobuf() // ...
    .b(atu8_packet_id) // PacketId packet_id = 1
    .b(atu8_packet_fee) // PacketFee packet_fee = 2
    .o;
/**
 * Encodes a `MsgPayPacketFeeAsyncResponse` protobuf message: defines the response type for the PayPacketFeeAsync rpc
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeMsgPayPacketFeeAsyncResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf RegisterPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterPayee}
 */
export const decodeIbcApplicationsFeeMsgRegisterPayee = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf RegisterPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterPayeeResponse}
 */
export const decodeIbcApplicationsFeeMsgRegisterPayeeResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RegisterCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayee}
 */
export const decodeIbcApplicationsFeeMsgRegisterCounterpartyPayee = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf RegisterCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse}
 */
export const decodeIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf PayPacketFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFee}
 */
export const decodeIbcApplicationsFeeMsgPayPacketFee = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 5, 4], [decodeIbcApplicationsFeeFee]);
/**
 * Decodes a protobuf PayPacketFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFeeResponse}
 */
export const decodeIbcApplicationsFeeMsgPayPacketFeeResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf PayPacketFeeAsync message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFeeAsync}
 */
export const decodeIbcApplicationsFeeMsgPayPacketFeeAsync = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeIbcCoreChannelPacketId, decodeIbcApplicationsFeePacketFee]);
/**
 * Decodes a protobuf PayPacketFeeAsync message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeMsgPayPacketFeeAsyncResponse}
 */
export const decodeIbcApplicationsFeeMsgPayPacketFeeAsyncResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 *   - 2: relayer - the relayer address
 *   - 3: payee - the payee address
 */
export const destructIbcApplicationsFeeMsgRegisterPayee = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.relayer, g_struct.payee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_PAYEE = '/ibc.applications.fee.v1.MsgRegisterPayee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcApplicationsFeeMsgRegisterPayeeResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_PAYEE_RESPONSE = '/ibc.applications.fee.v1.MsgRegisterPayeeResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterCounterpartyPayee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 *   - 2: relayer - the relayer address
 *   - 3: counterparty_payee - the counterparty payee address
 */
export const destructIbcApplicationsFeeMsgRegisterCounterpartyPayee = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.relayer, g_struct.counterparty_payee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_COUNTERPARTY_PAYEE = '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcApplicationsFeeMsgRegisterCounterpartyPayeeResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_REGISTER_COUNTERPARTY_PAYEE_RESPONSE = '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee - encapsulates the recv, ack and timeout fees associated with an IBC packet
 *   - 1: source_port_id - the source port unique identifier
 *   - 2: source_channel_id - the source channel unique identifier
 *   - 3: signer - account address to refund fee if necessary
 *   - 4: relayers - optional list of relayers permitted to the receive packet fees
 */
export const destructIbcApplicationsFeeMsgPayPacketFee = (g_struct) => [g_struct.fee, g_struct.source_port_id, g_struct.source_channel_id, g_struct.signer, g_struct.relayers];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE = '/ibc.applications.fee.v1.MsgPayPacketFee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcApplicationsFeeMsgPayPacketFeeResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE_RESPONSE = '/ibc.applications.fee.v1.MsgPayPacketFeeResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFeeAsync} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 *   - 1: packet_fee - the packet fee associated with a particular IBC packet
 */
export const destructIbcApplicationsFeeMsgPayPacketFeeAsync = (g_struct) => [g_struct.packet_id, g_struct.packet_fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE_ASYNC = '/ibc.applications.fee.v1.MsgPayPacketFeeAsync';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeMsgPayPacketFeeAsyncResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcApplicationsFeeMsgPayPacketFeeAsyncResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_MSG_PAY_PACKET_FEE_ASYNC_RESPONSE = '/ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse';
//# sourceMappingURL=tx.js.map