/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf, any } from '../../../../../api/protobuf-writer.js';
import { decodeCosmosAuthBaseAccount } from '../../../../cosmos/auth/v1beta1/auth.js';
/**
 * Encodes a `InterchainAccount` protobuf message wrapped in the `Any` container: An InterchainAccount is defined as a BaseAccount & the address of the account owner on the controller chain
 * @param g_base_account - `base_account`:
 * @param s_account_owner - `account_owner`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyInterchainAccount = (atu8_base_account, s_account_owner) => any('/ibc.applications.interchain_accounts.v1.InterchainAccount', Protobuf() // ...
    .b(atu8_base_account) // BaseAccount base_account = 1
    .s(s_account_owner) // string account_owner = 2
    .o);
/**
 * Encodes a `InterchainAccount` protobuf message: An InterchainAccount is defined as a BaseAccount & the address of the account owner on the controller chain
 * @param g_base_account - `base_account`:
 * @param s_account_owner - `account_owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsInterchainAccountsInterchainAccount = (atu8_base_account, s_account_owner) => Protobuf() // ...
    .b(atu8_base_account) // BaseAccount base_account = 1
    .s(s_account_owner) // string account_owner = 2
    .o;
/**
 * Decodes a protobuf InterchainAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsInterchainAccountsInterchainAccount}
 */
export const decodeIbcApplicationsInterchainAccountsInterchainAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5], [decodeCosmosAuthBaseAccount]);
/**
 * Destructures the fields of a {@link IbcApplicationsInterchainAccountsInterchainAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_account -
 *   - 1: account_owner -
 */
export const destructIbcApplicationsInterchainAccountsInterchainAccount = (g_struct) => [g_struct.base_account, g_struct.account_owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_INTERCHAIN_ACCOUNTS_INTERCHAIN_ACCOUNT = '/ibc.applications.interchain_accounts.v1.InterchainAccount';
//# sourceMappingURL=account.js.map