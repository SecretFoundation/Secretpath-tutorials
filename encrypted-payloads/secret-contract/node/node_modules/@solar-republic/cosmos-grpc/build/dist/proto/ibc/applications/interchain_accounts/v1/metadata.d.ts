import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedIbcApplicationsInterchainAccountsMetadata = Encoded<'/ibc.applications.interchain_accounts.v1.Metadata'>;
/**
 * Encodes a `Metadata` protobuf message: defines a set of protocol specific data encoded into the ICS27 channel version bytestring See ICS004: https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
 * @param s_version - `version`: defines the ICS27 protocol version
 * @param si_controller_connection - `controller_connection_id`: the connection identifier associated with the controller chain
 * @param si_host_connection - `host_connection_id`: the connection identifier associated with the host chain
 * @param sa_address - `address`: defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step NOTE: the address field is empty on the OnChanOpenInit handshake step
 * @param s_encoding - `encoding`: defines the supported codec format
 * @param s_tx_type - `tx_type`: defines the type of transactions the interchain account can execute
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsInterchainAccountsMetadata: (s_version?: Opt<string>, si_controller_connection?: Opt<string>, si_host_connection?: Opt<string>, sa_address?: Opt<WeakAccountAddr>, s_encoding?: Opt<string>, s_tx_type?: Opt<string>) => EncodedIbcApplicationsInterchainAccountsMetadata;
/**
 * A decoded protobuf Metadata message
 *
 * Tuple where:
 *   - 0: version - defines the ICS27 protocol version
 *   - 1: controller_connection_id - the connection identifier associated with the controller chain
 *   - 2: host_connection_id - the connection identifier associated with the host chain
 *   - 3: address - defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step NOTE: the address field is empty on the OnChanOpenInit handshake step
 *   - 4: encoding - defines the supported codec format
 *   - 5: tx_type - defines the type of transactions the interchain account can execute
 */
export type DecodedIbcApplicationsInterchainAccountsMetadata = [
    s_version?: string,
    si_controller_connection?: string,
    si_host_connection?: string,
    sa_address?: CwAccountAddr,
    s_encoding?: string,
    s_tx_type?: string
];
/**
 * Decodes a protobuf Metadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsInterchainAccountsMetadata}
 */
export declare const decodeIbcApplicationsInterchainAccountsMetadata: (atu8_payload: Uint8Array) => DecodedIbcApplicationsInterchainAccountsMetadata;
/**
 * Destructures the fields of a {@link IbcApplicationsInterchainAccountsMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version - defines the ICS27 protocol version
 *   - 1: controller_connection_id - the connection identifier associated with the controller chain
 *   - 2: host_connection_id - the connection identifier associated with the host chain
 *   - 3: address - defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step NOTE: the address field is empty on the OnChanOpenInit handshake step
 *   - 4: encoding - defines the supported codec format
 *   - 5: tx_type - defines the type of transactions the interchain account can execute
 */
export declare const destructIbcApplicationsInterchainAccountsMetadata: (g_struct: IbcApplicationsInterchainAccountsMetadata) => [version?: string, controller_connection_id?: string, host_connection_id?: string, address?: CwAccountAddr, encoding?: string, tx_type?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_INTERCHAIN_ACCOUNTS_METADATA = "/ibc.applications.interchain_accounts.v1.Metadata";
/**
 * JSON serialization of `ibc.applications.interchain_accounts.v1.Metadata` - defines a set of protocol specific data encoded into the ICS27 channel version bytestring See ICS004: https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
 */
export type IbcApplicationsInterchainAccountsMetadata = {
    version?: string | undefined;
    controller_connection_id?: string | undefined;
    host_connection_id?: string | undefined;
    address?: CwAccountAddr | undefined;
    encoding?: string | undefined;
    tx_type?: string | undefined;
};
