import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
/**
 * Encodes a `Metadata` protobuf message: defines a set of protocol specific data encoded into the ICS27 channel version bytestring See ICS004: https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
 * @param s_version - `version`: defines the ICS27 protocol version
 * @param si_controller_connection - `controller_connection_id`: the connection identifier associated with the controller chain
 * @param si_host_connection - `host_connection_id`: the connection identifier associated with the host chain
 * @param sa_address - `address`: defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step NOTE: the address field is empty on the OnChanOpenInit handshake step
 * @param s_encoding - `encoding`: defines the supported codec format
 * @param s_tx_type - `tx_type`: defines the type of transactions the interchain account can execute
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsInterchainAccountsMetadata = (s_version, si_controller_connection, si_host_connection, sa_address, s_encoding, s_tx_type) => Protobuf() // ...
    .s(s_version) // string version = 1
    .s(si_controller_connection) // string controller_connection_id = 2
    .s(si_host_connection) // string host_connection_id = 3
    .s(sa_address) // string address = 4
    .s(s_encoding) // string encoding = 5
    .s(s_tx_type) // string tx_type = 6
    .o;
/**
 * Decodes a protobuf Metadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsInterchainAccountsMetadata}
 */
export const decodeIbcApplicationsInterchainAccountsMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5, 5]);
/**
 * Destructures the fields of a {@link IbcApplicationsInterchainAccountsMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version - defines the ICS27 protocol version
 *   - 1: controller_connection_id - the connection identifier associated with the controller chain
 *   - 2: host_connection_id - the connection identifier associated with the host chain
 *   - 3: address - defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step NOTE: the address field is empty on the OnChanOpenInit handshake step
 *   - 4: encoding - defines the supported codec format
 *   - 5: tx_type - defines the type of transactions the interchain account can execute
 */
export const destructIbcApplicationsInterchainAccountsMetadata = (g_struct) => [g_struct.version, g_struct.controller_connection_id, g_struct.host_connection_id, g_struct.address, g_struct.encoding, g_struct.tx_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_INTERCHAIN_ACCOUNTS_METADATA = '/ibc.applications.interchain_accounts.v1.Metadata';
//# sourceMappingURL=metadata.js.map