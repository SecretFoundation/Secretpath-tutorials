import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
export type AnyIbcApplicationsTransferTransferAuthorization = Encoded<'cosmos.authz.v1beta1.Authorization'>;
export type EncodedIbcApplicationsTransferAllocation = Encoded<'/ibc.applications.transfer.v1.Allocation'>;
export type EncodedIbcApplicationsTransferTransferAuthorization = Encoded<'/ibc.applications.transfer.v1.TransferAuthorization' | 'cosmos.authz.v1beta1.Authorization'>;
/**
 * Encodes a `TransferAuthorization` protobuf message wrapped in the `Any` container: allows the grantee to spend up to spend_limit coins from the granter's account for ibc transfer on a specific channel
 * @param a_allocations - `allocations`: port and channel amounts
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyTransferAuthorization: (a_allocations?: Opt<Encoded<'/ibc.applications.transfer.v1.Allocation'>[]>) => AnyIbcApplicationsTransferTransferAuthorization;
/**
 * Encodes a `Allocation` protobuf message: defines the spend limit for a particular port and channel
 * @param s_source_port - `source_port`: the port on which the packet will be sent
 * @param s_source_channel - `source_channel`: the channel by which the packet will be sent
 * @param a_spend_limits - `spend_limit`: spend limitation on the channel
 * @param a_allow_lists - `allow_list`: allow list of receivers, an empty allow list permits any receiver address
 * @param a_allowed_packet_datas - `allowed_packet_data`: allow list of packet data keys, an empty list prohibits all packet data keys; a list only with "*" permits any packet data key
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferAllocation: (s_source_port?: Opt<string>, s_source_channel?: Opt<string>, a_spend_limits?: Opt<SlimCoin[]>, a_allow_lists?: Opt<string[]>, a_allowed_packet_datas?: Opt<string[]>) => EncodedIbcApplicationsTransferAllocation;
/**
 * Encodes a `TransferAuthorization` protobuf message: allows the grantee to spend up to spend_limit coins from the granter's account for ibc transfer on a specific channel
 * @param a_allocations - `allocations`: port and channel amounts
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferTransferAuthorization: (a_allocations?: Opt<Encoded<'/ibc.applications.transfer.v1.Allocation'>[]>) => EncodedIbcApplicationsTransferTransferAuthorization;
/**
 * A decoded protobuf Allocation message
 *
 * Tuple where:
 *   - 0: source_port - the port on which the packet will be sent
 *   - 1: source_channel - the channel by which the packet will be sent
 *   - 2: spend_limit - spend limitation on the channel
 *   - 3: allow_list - allow list of receivers, an empty allow list permits any receiver address
 *   - 4: allowed_packet_data - allow list of packet data keys, an empty list prohibits all packet data keys; a list only with "*" permits any packet data key
 */
export type DecodedIbcApplicationsTransferAllocation = [
    s_source_port?: string,
    s_source_channel?: string,
    a_spend_limit?: [
        string,
        string
    ][],
    a_allow_lists?: string[],
    a_allowed_packet_datas?: string[]
];
/**
 * Decodes a protobuf Allocation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferAllocation}
 */
export declare const decodeIbcApplicationsTransferAllocation: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferAllocation;
/**
 * A decoded protobuf TransferAuthorization message
 *
 * Alias for: allocations - port and channel amounts
 */
export type DecodedIbcApplicationsTransferTransferAuthorization = [
    a_allocations?: DecodedIbcApplicationsTransferAllocation[]
];
/**
 * Decodes a protobuf TransferAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferTransferAuthorization}
 */
export declare const decodeIbcApplicationsTransferTransferAuthorization: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferTransferAuthorization;
/**
 * Destructures the fields of a {@link IbcApplicationsTransferAllocation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: source_port - the port on which the packet will be sent
 *   - 1: source_channel - the channel by which the packet will be sent
 *   - 2: spend_limit - spend limitation on the channel
 *   - 3: allow_list - allow list of receivers, an empty allow list permits any receiver address
 *   - 4: allowed_packet_data - allow list of packet data keys, an empty list prohibits all packet data keys; a list only with "*" permits any packet data key
 */
export declare const destructIbcApplicationsTransferAllocation: (g_struct: IbcApplicationsTransferAllocation) => [source_port?: string, source_channel?: string, spend_limit?: CosmosBaseCoin[], allow_list?: string[], allowed_packet_data?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_ALLOCATION = "/ibc.applications.transfer.v1.Allocation";
/**
 * JSON serialization of `ibc.applications.transfer.v1.Allocation` - defines the spend limit for a particular port and channel
 */
export type IbcApplicationsTransferAllocation = {
    source_port?: string | undefined;
    source_channel?: string | undefined;
    spend_limit?: CosmosBaseCoin[] | undefined;
    allow_list?: string[] | undefined;
    allowed_packet_data?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferTransferAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: allocations - port and channel amounts
 */
export declare const destructIbcApplicationsTransferTransferAuthorization: (g_struct: IbcApplicationsTransferTransferAuthorization) => [allocations?: IbcApplicationsTransferAllocation[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_TRANSFER_AUTHORIZATION = "/ibc.applications.transfer.v1.TransferAuthorization";
/**
 * JSON serialization of `ibc.applications.transfer.v1.TransferAuthorization` - allows the grantee to spend up to spend_limit coins from the granter's account for ibc transfer on a specific channel
 */
export type IbcApplicationsTransferTransferAuthorization = {
    allocations?: IbcApplicationsTransferAllocation[] | undefined;
};
