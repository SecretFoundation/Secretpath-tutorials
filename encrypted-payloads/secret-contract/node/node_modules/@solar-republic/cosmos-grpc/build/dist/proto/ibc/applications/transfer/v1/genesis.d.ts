import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
import type { IbcApplicationsTransferDenomTrace, DecodedIbcApplicationsTransferDenomTrace, IbcApplicationsTransferParams, DecodedIbcApplicationsTransferParams } from './transfer.js';
export type EncodedIbcApplicationsTransferGenesisState = Encoded<'/ibc.applications.transfer.v1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the ibc-transfer genesis state
 * @param si_port - `port_id`:
 * @param a_denom_traces - `denom_traces`:
 * @param g_params - `params`:
 * @param a_total_escroweds - `total_escrowed`: contains the total amount of tokens escrowed by the transfer module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferGenesisState: (si_port?: Opt<string>, a_denom_traces?: Opt<Encoded<'/ibc.applications.transfer.v1.DenomTrace'>[]>, atu8_params?: Opt<Encoded<'/ibc.applications.transfer.v1.Params'>>, a_total_escroweds?: Opt<SlimCoin[]>) => EncodedIbcApplicationsTransferGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: denom_traces -
 *   - 2: params -
 *   - 3: total_escrowed - contains the total amount of tokens escrowed by the transfer module
 */
export type DecodedIbcApplicationsTransferGenesisState = [
    si_port?: string,
    a_denom_traces?: DecodedIbcApplicationsTransferDenomTrace[],
    a_params?: DecodedIbcApplicationsTransferParams,
    a_total_escrowed?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferGenesisState}
 */
export declare const decodeIbcApplicationsTransferGenesisState: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferGenesisState;
/**
 * Destructures the fields of a {@link IbcApplicationsTransferGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: denom_traces -
 *   - 2: params -
 *   - 3: total_escrowed - contains the total amount of tokens escrowed by the transfer module
 */
export declare const destructIbcApplicationsTransferGenesisState: (g_struct: IbcApplicationsTransferGenesisState) => [port_id?: string, denom_traces?: IbcApplicationsTransferDenomTrace[], params?: IbcApplicationsTransferParams, total_escrowed?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_GENESIS_STATE = "/ibc.applications.transfer.v1.GenesisState";
/**
 * JSON serialization of `ibc.applications.transfer.v1.GenesisState` - defines the ibc-transfer genesis state
 */
export type IbcApplicationsTransferGenesisState = {
    port_id?: string | undefined;
    denom_traces?: IbcApplicationsTransferDenomTrace[] | undefined;
    params?: IbcApplicationsTransferParams | undefined;
    total_escrowed?: CosmosBaseCoin[] | undefined;
};
