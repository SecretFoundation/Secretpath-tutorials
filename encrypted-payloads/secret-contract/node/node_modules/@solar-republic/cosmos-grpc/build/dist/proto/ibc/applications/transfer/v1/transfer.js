/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
/**
 * Encodes a `DenomTrace` protobuf message: contains the base denomination for ICS20 fungible tokens and the source tracing information path.
 * @param s_path - `path`: defines the chain of port/channel identifiers used for tracing the source of the fungible token.
 * @param s_base_denom - `base_denom`: base denomination of the relayed fungible token.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferDenomTrace = (s_path, s_base_denom) => Protobuf() // ...
    .s(s_path) // string path = 1
    .s(s_base_denom) // string base_denom = 2
    .o;
/**
 * Encodes a `Params` protobuf message: defines the set of IBC transfer parameters. NOTE: To prevent a single token from being transferred, set the TransfersEnabled parameter to true and then set the bank module's SendEnabled parameter for the denomination to false.
 * @param b_send_enabled - `send_enabled`: enables or disables all cross-chain token transfers from this chain.
 * @param b_receive_enabled - `receive_enabled`: enables or disables all cross-chain token transfers to this chain.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferParams = (b_send_enabled, b_receive_enabled) => Protobuf() // ...
    .v(b_send_enabled) // boolean send_enabled = 1
    .v(b_receive_enabled) // boolean receive_enabled = 2
    .o;
/**
 * Decodes a protobuf DenomTrace message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferDenomTrace}
 */
export const decodeIbcApplicationsTransferDenomTrace = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferParams}
 */
export const decodeIbcApplicationsTransferParams = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link IbcApplicationsTransferParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: send_enabled - enables or disables all cross-chain token transfers from this chain.
 *   - 1: receive_enabled - enables or disables all cross-chain token transfers to this chain.
 */
export const destructIbcApplicationsTransferParams = (g_struct) => [g_struct.send_enabled, g_struct.receive_enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_PARAMS = '/ibc.applications.transfer.v1.Params';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferDenomTrace} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path - defines the chain of port/channel identifiers used for tracing the source of the fungible token.
 *   - 1: base_denom - base denomination of the relayed fungible token.
 */
export const destructIbcApplicationsTransferDenomTrace = (g_struct) => [g_struct.path, g_struct.base_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_DENOM_TRACE = '/ibc.applications.transfer.v1.DenomTrace';
//# sourceMappingURL=transfer.js.map