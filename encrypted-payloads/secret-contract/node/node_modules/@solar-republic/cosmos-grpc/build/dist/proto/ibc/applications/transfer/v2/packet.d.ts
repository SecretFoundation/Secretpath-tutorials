import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedIbcApplicationsTransferFungibleTokenPacketData = Encoded<'/ibc.applications.transfer.v2.FungibleTokenPacketData'>;
/**
 * Encodes a `FungibleTokenPacketData` protobuf message: defines a struct for the packet payload See FungibleTokenPacketData spec: https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
 * @param s_denom - `denom`: the token denomination to be transferred
 * @param s_amount - `amount`: the token amount to be transferred
 * @param sa_sender - `sender`: the sender address
 * @param sa_receiver - `receiver`: the recipient address on the destination chain
 * @param s_memo - `memo`: optional memo
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferFungibleTokenPacketData: (s_denom?: Opt<string>, s_amount?: Opt<string>, sa_sender?: Opt<WeakAccountAddr>, sa_receiver?: Opt<WeakAccountAddr>, s_memo?: Opt<string>) => EncodedIbcApplicationsTransferFungibleTokenPacketData;
/**
 * A decoded protobuf FungibleTokenPacketData message
 *
 * Tuple where:
 *   - 0: denom - the token denomination to be transferred
 *   - 1: amount - the token amount to be transferred
 *   - 2: sender - the sender address
 *   - 3: receiver - the recipient address on the destination chain
 *   - 4: memo - optional memo
 */
export type DecodedIbcApplicationsTransferFungibleTokenPacketData = [
    s_denom?: string,
    s_amount?: string,
    sa_sender?: CwAccountAddr,
    sa_receiver?: CwAccountAddr,
    s_memo?: string
];
/**
 * Decodes a protobuf FungibleTokenPacketData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferFungibleTokenPacketData}
 */
export declare const decodeIbcApplicationsTransferFungibleTokenPacketData: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferFungibleTokenPacketData;
/**
 * Destructures the fields of a {@link IbcApplicationsTransferFungibleTokenPacketData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - the token denomination to be transferred
 *   - 1: amount - the token amount to be transferred
 *   - 2: sender - the sender address
 *   - 3: receiver - the recipient address on the destination chain
 *   - 4: memo - optional memo
 */
export declare const destructIbcApplicationsTransferFungibleTokenPacketData: (g_struct: IbcApplicationsTransferFungibleTokenPacketData) => [denom?: string, amount?: string, sender?: CwAccountAddr, receiver?: CwAccountAddr, memo?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_FUNGIBLE_TOKEN_PACKET_DATA = "/ibc.applications.transfer.v2.FungibleTokenPacketData";
/**
 * JSON serialization of `ibc.applications.transfer.v2.FungibleTokenPacketData` - defines a struct for the packet payload See FungibleTokenPacketData spec: https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
 */
export type IbcApplicationsTransferFungibleTokenPacketData = {
    denom?: string | undefined;
    amount?: string | undefined;
    sender?: CwAccountAddr | undefined;
    receiver?: CwAccountAddr | undefined;
    memo?: string | undefined;
};
