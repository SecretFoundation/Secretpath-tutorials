import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../../api/transport.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import { decodeIbcCoreChannelChannel, decodeIbcCoreChannelIdentifiedChannel, decodeIbcCoreChannelPacketState, decodeIbcCoreChannelParams } from './channel.js';
import { decodeIbcCoreChannelErrorReceipt, decodeIbcCoreChannelUpgrade } from './upgrade.js';
import { decodeIbcCoreClientHeight, decodeIbcCoreClientIdentifiedClientState } from '../../client/v1/client.js';
const SR_LCD_IBC_CORE_CHANNEL_QUERY = '/ibc/core/channel/v1/';
/**
 * Queries an IBC Channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: channel - associated with the request identifiers
 *   - 1: proof - associated with the request identifiers
 *   - 2: proof_height - associated with the request identifiers
 */
export const queryIbcCoreChannelChannel = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port]);
/**
 * Queries all the IBC channels of a chain.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - request
 * @returns a tuple where:
 *   - 0: channels - list of stored channels of the chain.
 *   - 1: pagination - list of stored channels of the chain.
 *   - 2: height - list of stored channels of the chain.
 */
export const queryIbcCoreChannelChannels = restful_grpc(g_pagination => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels', {
        pagination: g_pagination,
    }]);
/**
 * Queries all the channels associated with a connection end.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_connection - unique identifier
 * @param g_pagination - request
 * @returns a tuple where:
 *   - 0: channels - list of channels associated with a connection.
 *   - 1: pagination - list of channels associated with a connection.
 *   - 2: height - list of channels associated with a connection.
 */
export const queryIbcCoreChannelConnectionChannels = restful_grpc((s_connection, g_pagination) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'connections/' + s_connection + '/channels', {
        pagination: g_pagination,
    }]);
/**
 * Queries for the client state for the channel associated with the provided channel identifiers.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - client state associated with the channel
 *   - 2: proof_height - client state associated with the channel
 */
export const queryIbcCoreChannelChannelClientState = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/client_state']);
/**
 * Queries for the consensus state for the channel associated with the provided channel identifiers.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_revision_number - revision number of the consensus state
 * @param sg_revision_height - revision height of the consensus state
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - consensus state associated with the channel
 *   - 2: proof - consensus state associated with the channel
 *   - 3: proof_height - consensus state associated with the channel
 */
export const queryIbcCoreChannelChannelConsensusState = restful_grpc((si_port, si_channel, sg_revision_number, sg_revision_height) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/consensus_state/revision/' + sg_revision_number + '/height/' + sg_revision_height]);
/**
 * Queries a stored packet commitment hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_sequence - packet sequence
 * @returns a tuple where:
 *   - 0: commitment - packet associated with the request fields
 *   - 1: proof - packet associated with the request fields
 *   - 2: proof_height - packet associated with the request fields
 */
export const queryIbcCoreChannelPacketCommitment = restful_grpc((si_port, si_channel, sg_sequence) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_commitments/' + sg_sequence]);
/**
 * Returns all the packet commitments hashes associated with a channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param g_pagination - request
 * @returns a tuple where:
 *   - 0: commitments - the 'commitments' response property
 *   - 1: pagination - the 'commitments' response property
 *   - 2: height - the 'commitments' response property
 */
export const queryIbcCoreChannelPacketCommitments = restful_grpc((si_port, si_channel, g_pagination) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_commitments', {
        pagination: g_pagination,
    }]);
/**
 * Queries if a given packet sequence has been received on the queried chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_sequence - packet sequence
 * @returns a tuple where:
 *   - 0: received - success flag for if receipt exists
 *   - 1: proof - success flag for if receipt exists
 *   - 2: proof_height - success flag for if receipt exists
 */
export const queryIbcCoreChannelPacketReceipt = restful_grpc((si_port, si_channel, sg_sequence) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_receipts/' + sg_sequence]);
/**
 * Queries a stored packet acknowledgement hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_sequence - packet sequence
 * @returns a tuple where:
 *   - 0: acknowledgement - packet associated with the request fields
 *   - 1: proof - packet associated with the request fields
 *   - 2: proof_height - packet associated with the request fields
 */
export const queryIbcCoreChannelPacketAcknowledgement = restful_grpc((si_port, si_channel, sg_sequence) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_acks/' + sg_sequence]);
/**
 * Returns all the packet acknowledgements associated with a channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param g_pagination - request
 * @param a_packet_commitment_sequences - list of packet sequences
 * @returns a tuple where:
 *   - 0: acknowledgements - the 'acknowledgements' response property
 *   - 1: pagination - the 'acknowledgements' response property
 *   - 2: height - the 'acknowledgements' response property
 */
export const queryIbcCoreChannelPacketAcknowledgements = restful_grpc((si_port, si_channel, g_pagination, a_packet_commitment_sequences) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_acknowledgements', {
        pagination: g_pagination,
        packet_commitment_sequences: a_packet_commitment_sequences,
    }]);
/**
 * Returns all the unreceived IBC packets associated with a channel and sequences.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param a_packet_commitment_sequences - list of packet sequences
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived packet sequences
 *   - 1: height - list of unreceived packet sequences
 */
export const queryIbcCoreChannelUnreceivedPackets = restful_grpc((si_port, si_channel, a_packet_commitment_sequences) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_commitments/' + a_packet_commitment_sequences + '/unreceived_packets']);
/**
 * Returns all the unreceived IBC acknowledgements associated with a channel and sequences.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param a_packet_ack_sequences - list of acknowledgement sequences
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived acknowledgement sequences
 *   - 1: height - list of unreceived acknowledgement sequences
 */
export const queryIbcCoreChannelUnreceivedAcks = restful_grpc((si_port, si_channel, a_packet_ack_sequences) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/packet_commitments/' + a_packet_ack_sequences + '/unreceived_acks']);
/**
 * Returns the next receive sequence for a given channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: next_sequence_receive - next sequence receive number
 *   - 1: proof - next sequence receive number
 *   - 2: proof_height - next sequence receive number
 */
export const queryIbcCoreChannelNextSequenceReceive = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/next_sequence']);
/**
 * Returns the next send sequence for a given channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: next_sequence_send - next sequence send number
 *   - 1: proof - next sequence send number
 *   - 2: proof_height - next sequence send number
 */
export const queryIbcCoreChannelNextSequenceSend = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/next_sequence_send']);
/**
 * Returns the error receipt if the upgrade handshake failed.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port -
 * @param si_channel -
 * @returns a tuple where:
 *   - 0: error_receipt - the 'error_receipt' response property
 *   - 1: proof - the 'error_receipt' response property
 *   - 2: proof_height - the 'error_receipt' response property
 */
export const queryIbcCoreChannelUpgradeError = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/upgrade_error']);
/**
 * Returns the upgrade for a given port and channel id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port -
 * @param si_channel -
 * @returns a tuple where:
 *   - 0: upgrade - the 'upgrade' response property
 *   - 1: proof - the 'upgrade' response property
 *   - 2: proof_height - the 'upgrade' response property
 */
export const queryIbcCoreChannelUpgrade = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/upgrade']);
/**
 * Queries all parameters of the ibc channel submodule.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryIbcCoreChannelChannelParams = restful_grpc(() => [SR_LCD_IBC_CORE_CHANNEL_QUERY + 'params']);
/**
 * Encodes a `QueryChannelRequest` protobuf message: the request type for the Query/Channel RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryChannelResponse` protobuf message: the response type for the Query/Channel RPC method. Besides the Channel end, it includes a proof and the height from which the proof was retrieved.
 * @param g_channel - `channel`: associated with the request identifiers
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelResponse = (atu8_channel, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_channel) // Channel channel = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryChannelsRequest` protobuf message: the request type for the Query/Channels RPC method
 * @param g_pagination - `pagination`: request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelsRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryChannelsResponse` protobuf message: the response type for the Query/Channels RPC method.
 * @param a_channels - `channels`: list of stored channels of the chain.
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelsResponse = (a_channels, atu8_pagination, atu8_height) => Protobuf() // ...
    .B(a_channels) // IdentifiedChannel[] channels = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .b(atu8_height) // Height height = 3
    .o;
/**
 * Encodes a `QueryConnectionChannelsRequest` protobuf message: the request type for the Query/QueryConnectionChannels RPC method
 * @param s_connection - `connection`: unique identifier
 * @param g_pagination - `pagination`: request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryConnectionChannelsRequest = (s_connection, atu8_pagination) => Protobuf() // ...
    .s(s_connection) // string connection = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryConnectionChannelsResponse` protobuf message: the Response type for the Query/QueryConnectionChannels RPC method
 * @param a_channels - `channels`: list of channels associated with a connection.
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryConnectionChannelsResponse = (a_channels, atu8_pagination, atu8_height) => Protobuf() // ...
    .B(a_channels) // IdentifiedChannel[] channels = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .b(atu8_height) // Height height = 3
    .o;
/**
 * Encodes a `QueryChannelClientStateRequest` protobuf message: the request type for the Query/ClientState RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelClientStateRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryChannelClientStateResponse` protobuf message: the Response type for the Query/QueryChannelClientState RPC method
 * @param g_identified_client_state - `identified_client_state`: client state associated with the channel
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelClientStateResponse = (atu8_identified_client_state, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_identified_client_state) // IdentifiedClientState identified_client_state = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryChannelConsensusStateRequest` protobuf message: the request type for the Query/ConsensusState RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_revision_number - `revision_number`: revision number of the consensus state
 * @param sg_revision_height - `revision_height`: revision height of the consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelConsensusStateRequest = (si_port, si_channel, sg_revision_number, sg_revision_height) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .g(sg_revision_number) // uint64 revision_number = 3
    .g(sg_revision_height) // uint64 revision_height = 4
    .o;
/**
 * Encodes a `QueryChannelConsensusStateResponse` protobuf message: QueryChannelClientStateResponse is the Response type for the Query/QueryChannelClientState RPC method
 * @param atu8_consensus_state - `consensus_state`: consensus state associated with the channel
 * @param si_client - `client_id`: client ID associated with the consensus state
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelConsensusStateResponse = (atu8_consensus_state, si_client, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_consensus_state) // Any consensus_state = 1
    .s(si_client) // string client_id = 2
    .b(atu8_proof) // bytes proof = 3
    .b(atu8_proof_height) // Height proof_height = 4
    .o;
/**
 * Encodes a `QueryPacketCommitmentRequest` protobuf message: the request type for the Query/PacketCommitment RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_sequence - `sequence`: packet sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketCommitmentRequest = (si_port, si_channel, sg_sequence) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .g(sg_sequence) // uint64 sequence = 3
    .o;
/**
 * Encodes a `QueryPacketCommitmentResponse` protobuf message: defines the client query response for a packet which also includes a proof and the height from which the proof was retrieved
 * @param atu8_commitment - `commitment`: packet associated with the request fields
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketCommitmentResponse = (atu8_commitment, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_commitment) // bytes commitment = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryPacketCommitmentsRequest` protobuf message: the request type for the Query/QueryPacketCommitments RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param g_pagination - `pagination`: request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketCommitmentsRequest = (si_port, si_channel, atu8_pagination) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_pagination) // PageRequest pagination = 3
    .o;
/**
 * Encodes a `QueryPacketCommitmentsResponse` protobuf message: the request type for the Query/QueryPacketCommitments RPC method
 * @param a_commitments - `commitments`:
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketCommitmentsResponse = (a_commitments, atu8_pagination, atu8_height) => Protobuf() // ...
    .B(a_commitments) // PacketState[] commitments = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .b(atu8_height) // Height height = 3
    .o;
/**
 * Encodes a `QueryPacketReceiptRequest` protobuf message: the request type for the Query/PacketReceipt RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_sequence - `sequence`: packet sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketReceiptRequest = (si_port, si_channel, sg_sequence) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .g(sg_sequence) // uint64 sequence = 3
    .o;
/**
 * Encodes a `QueryPacketReceiptResponse` protobuf message: defines the client query response for a packet receipt which also includes a proof, and the height from which the proof was retrieved
 * @param b_received - `received`: success flag for if receipt exists
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketReceiptResponse = (b_received, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .v(b_received, 2) // boolean received = 2
    .b(atu8_proof, 3) // bytes proof = 3
    .b(atu8_proof_height, 4) // Height proof_height = 4
    .o;
/**
 * Encodes a `QueryPacketAcknowledgementRequest` protobuf message: the request type for the Query/PacketAcknowledgement RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_sequence - `sequence`: packet sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketAcknowledgementRequest = (si_port, si_channel, sg_sequence) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .g(sg_sequence) // uint64 sequence = 3
    .o;
/**
 * Encodes a `QueryPacketAcknowledgementResponse` protobuf message: defines the client query response for a packet which also includes a proof and the height from which the proof was retrieved
 * @param atu8_acknowledgement - `acknowledgement`: packet associated with the request fields
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketAcknowledgementResponse = (atu8_acknowledgement, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_acknowledgement) // bytes acknowledgement = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryPacketAcknowledgementsRequest` protobuf message: the request type for the Query/QueryPacketCommitments RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param g_pagination - `pagination`: request
 * @param a_packet_commitment_sequences - `packet_commitment_sequences`: list of packet sequences
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketAcknowledgementsRequest = (si_port, si_channel, atu8_pagination, a_packet_commitment_sequences) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_pagination) // PageRequest pagination = 3
    .G(a_packet_commitment_sequences) // uint64[] packet_commitment_sequences = 4
    .o;
/**
 * Encodes a `QueryPacketAcknowledgementsResponse` protobuf message: QueryPacketAcknowledgemetsResponse is the request type for the Query/QueryPacketAcknowledgements RPC method
 * @param a_acknowledgements - `acknowledgements`:
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryPacketAcknowledgementsResponse = (a_acknowledgements, atu8_pagination, atu8_height) => Protobuf() // ...
    .B(a_acknowledgements) // PacketState[] acknowledgements = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .b(atu8_height) // Height height = 3
    .o;
/**
 * Encodes a `QueryUnreceivedPacketsRequest` protobuf message: the request type for the Query/UnreceivedPackets RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param a_packet_commitment_sequences - `packet_commitment_sequences`: list of packet sequences
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUnreceivedPacketsRequest = (si_port, si_channel, a_packet_commitment_sequences) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .G(a_packet_commitment_sequences) // uint64[] packet_commitment_sequences = 3
    .o;
/**
 * Encodes a `QueryUnreceivedPacketsResponse` protobuf message: the response type for the Query/UnreceivedPacketCommitments RPC method
 * @param a_sequences - `sequences`: list of unreceived packet sequences
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUnreceivedPacketsResponse = (a_sequences, atu8_height) => Protobuf() // ...
    .G(a_sequences) // uint64[] sequences = 1
    .b(atu8_height) // Height height = 2
    .o;
/**
 * Encodes a `QueryUnreceivedAcksRequest` protobuf message: QueryUnreceivedAcks is the request type for the Query/UnreceivedAcks RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param a_packet_ack_sequences - `packet_ack_sequences`: list of acknowledgement sequences
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUnreceivedAcksRequest = (si_port, si_channel, a_packet_ack_sequences) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .G(a_packet_ack_sequences) // uint64[] packet_ack_sequences = 3
    .o;
/**
 * Encodes a `QueryUnreceivedAcksResponse` protobuf message: the response type for the Query/UnreceivedAcks RPC method
 * @param a_sequences - `sequences`: list of unreceived acknowledgement sequences
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUnreceivedAcksResponse = (a_sequences, atu8_height) => Protobuf() // ...
    .G(a_sequences) // uint64[] sequences = 1
    .b(atu8_height) // Height height = 2
    .o;
/**
 * Encodes a `QueryNextSequenceReceiveRequest` protobuf message: the request type for the Query/QueryNextSequenceReceiveRequest RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryNextSequenceReceiveRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryNextSequenceReceiveResponse` protobuf message: QuerySequenceResponse is the response type for the Query/QueryNextSequenceReceiveResponse RPC method
 * @param sg_next_sequence_receive - `next_sequence_receive`: next sequence receive number
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryNextSequenceReceiveResponse = (sg_next_sequence_receive, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .g(sg_next_sequence_receive) // uint64 next_sequence_receive = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryNextSequenceSendRequest` protobuf message: the request type for the Query/QueryNextSequenceSend RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryNextSequenceSendRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryNextSequenceSendResponse` protobuf message: the request type for the Query/QueryNextSequenceSend RPC method
 * @param sg_next_sequence_send - `next_sequence_send`: next sequence send number
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryNextSequenceSendResponse = (sg_next_sequence_send, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .g(sg_next_sequence_send) // uint64 next_sequence_send = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryUpgradeErrorRequest` protobuf message: the request type for the Query/QueryUpgradeError RPC method
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUpgradeErrorRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryUpgradeErrorResponse` protobuf message: the response type for the Query/QueryUpgradeError RPC method
 * @param g_error_receipt - `error_receipt`:
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUpgradeErrorResponse = (atu8_error_receipt, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_error_receipt) // ErrorReceipt error_receipt = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryUpgradeRequest` protobuf message: the request type for the QueryUpgradeRequest RPC method
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUpgradeRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryUpgradeResponse` protobuf message: the response type for the QueryUpgradeResponse RPC method
 * @param g_upgrade - `upgrade`:
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryUpgradeResponse = (atu8_upgrade, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_upgrade) // Upgrade upgrade = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryChannelParamsRequest` protobuf message: the request type for the Query/ChannelParams RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryChannelParamsResponse` protobuf message: the response type for the Query/ChannelParams RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelQueryChannelParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf QueryChannelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelRequest}
 */
export const decodeIbcCoreChannelQueryChannelRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelResponse}
 */
export const decodeIbcCoreChannelQueryChannelResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeIbcCoreChannelChannel, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryChannelsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelsRequest}
 */
export const decodeIbcCoreChannelQueryChannelsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryChannels message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelsResponse}
 */
export const decodeIbcCoreChannelQueryChannelsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 1], [decodeIbcCoreChannelIdentifiedChannel, decodeCosmosBaseQueryPageResponse, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryConnectionChannelsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryConnectionChannelsRequest}
 */
export const decodeIbcCoreChannelQueryConnectionChannelsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryConnectionChannels message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryConnectionChannelsResponse}
 */
export const decodeIbcCoreChannelQueryConnectionChannelsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 1], [decodeIbcCoreChannelIdentifiedChannel, decodeCosmosBaseQueryPageResponse, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryChannelClientStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelClientStateRequest}
 */
export const decodeIbcCoreChannelQueryChannelClientStateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryChannelClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelClientStateResponse}
 */
export const decodeIbcCoreChannelQueryChannelClientStateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeIbcCoreClientIdentifiedClientState, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryChannelConsensusStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelConsensusStateRequest}
 */
export const decodeIbcCoreChannelQueryChannelConsensusStateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 3]);
/**
 * Decodes a protobuf QueryChannelConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelConsensusStateResponse}
 */
export const decodeIbcCoreChannelQueryChannelConsensusStateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1], [decodeGoogleProtobufAny, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryPacketCommitmentRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentRequest}
 */
export const decodeIbcCoreChannelQueryPacketCommitmentRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Decodes a protobuf QueryPacketCommitment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentResponse}
 */
export const decodeIbcCoreChannelQueryPacketCommitmentResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryPacketCommitmentsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentsRequest}
 */
export const decodeIbcCoreChannelQueryPacketCommitmentsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryPacketCommitments message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentsResponse}
 */
export const decodeIbcCoreChannelQueryPacketCommitmentsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 1], [decodeIbcCoreChannelPacketState, decodeCosmosBaseQueryPageResponse, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryPacketReceiptRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketReceiptRequest}
 */
export const decodeIbcCoreChannelQueryPacketReceiptRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Decodes a protobuf QueryPacketReceipt message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedIbcCoreChannelQueryPacketReceiptResponse}
 */
export const decodeIbcCoreChannelQueryPacketReceiptResponse = ((atu8_payload, [, b_received, atu8_proof, a_proof_height] = decode_protobuf(atu8_payload, [0, 1, 1, 1], [0, 0, 0, decodeIbcCoreClientHeight])) => [__UNDEFINED, b_received, atu8_proof, a_proof_height]);
/**
 * Decodes a protobuf QueryPacketAcknowledgementRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementRequest}
 */
export const decodeIbcCoreChannelQueryPacketAcknowledgementRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Decodes a protobuf QueryPacketAcknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementResponse}
 */
export const decodeIbcCoreChannelQueryPacketAcknowledgementResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryPacketAcknowledgementsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementsRequest}
 */
export const decodeIbcCoreChannelQueryPacketAcknowledgementsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 2], [0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryPacketAcknowledgements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementsResponse}
 */
export const decodeIbcCoreChannelQueryPacketAcknowledgementsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 1], [decodeIbcCoreChannelPacketState, decodeCosmosBaseQueryPageResponse, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryUnreceivedPacketsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedPacketsRequest}
 */
export const decodeIbcCoreChannelQueryUnreceivedPacketsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 2]);
/**
 * Decodes a protobuf QueryUnreceivedPackets message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedPacketsResponse}
 */
export const decodeIbcCoreChannelQueryUnreceivedPacketsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [2, 1], [0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryUnreceivedAcksRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedAcksRequest}
 */
export const decodeIbcCoreChannelQueryUnreceivedAcksRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 2]);
/**
 * Decodes a protobuf QueryUnreceivedAcks message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedAcksResponse}
 */
export const decodeIbcCoreChannelQueryUnreceivedAcksResponse = (atu8_payload) => decode_protobuf(atu8_payload, [2, 1], [0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryNextSequenceReceiveRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceReceiveRequest}
 */
export const decodeIbcCoreChannelQueryNextSequenceReceiveRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryNextSequenceReceive message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceReceiveResponse}
 */
export const decodeIbcCoreChannelQueryNextSequenceReceiveResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryNextSequenceSendRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceSendRequest}
 */
export const decodeIbcCoreChannelQueryNextSequenceSendRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryNextSequenceSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceSendResponse}
 */
export const decodeIbcCoreChannelQueryNextSequenceSendResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryUpgradeErrorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeErrorRequest}
 */
export const decodeIbcCoreChannelQueryUpgradeErrorRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryUpgradeError message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeErrorResponse}
 */
export const decodeIbcCoreChannelQueryUpgradeErrorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeIbcCoreChannelErrorReceipt, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryUpgradeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeRequest}
 */
export const decodeIbcCoreChannelQueryUpgradeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryUpgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeResponse}
 */
export const decodeIbcCoreChannelQueryUpgradeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeIbcCoreChannelUpgrade, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryChannelParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelParamsRequest}
 */
export const decodeIbcCoreChannelQueryChannelParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryChannelParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelParamsResponse}
 */
export const decodeIbcCoreChannelQueryChannelParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcCoreChannelParams]);
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export const destructIbcCoreChannelQueryChannelRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_REQUEST = '/ibc.core.channel.v1.QueryChannelRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel - associated with the request identifiers
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryChannelResponse = (g_struct) => [g_struct.channel, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_RESPONSE = '/ibc.core.channel.v1.QueryChannelResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - request
 */
export const destructIbcCoreChannelQueryChannelsRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNELS_REQUEST = '/ibc.core.channel.v1.QueryChannelsRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channels - list of stored channels of the chain.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export const destructIbcCoreChannelQueryChannelsResponse = (g_struct) => [g_struct.channels, g_struct.pagination, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNELS_RESPONSE = '/ibc.core.channel.v1.QueryChannelsResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryConnectionChannelsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection - unique identifier
 *   - 1: pagination - request
 */
export const destructIbcCoreChannelQueryConnectionChannelsRequest = (g_struct) => [g_struct.connection, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CONNECTION_CHANNELS_REQUEST = '/ibc.core.channel.v1.QueryConnectionChannelsRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryConnectionChannelsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channels - list of channels associated with a connection.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export const destructIbcCoreChannelQueryConnectionChannelsResponse = (g_struct) => [g_struct.channels, g_struct.pagination, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CONNECTION_CHANNELS_RESPONSE = '/ibc.core.channel.v1.QueryConnectionChannelsResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelClientStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export const destructIbcCoreChannelQueryChannelClientStateRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CLIENT_STATE_REQUEST = '/ibc.core.channel.v1.QueryChannelClientStateRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelClientStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryChannelClientStateResponse = (g_struct) => [g_struct.identified_client_state, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CLIENT_STATE_RESPONSE = '/ibc.core.channel.v1.QueryChannelClientStateResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelConsensusStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: revision_number - revision number of the consensus state
 *   - 3: revision_height - revision height of the consensus state
 */
export const destructIbcCoreChannelQueryChannelConsensusStateRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.revision_number, g_struct.revision_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CONSENSUS_STATE_REQUEST = '/ibc.core.channel.v1.QueryChannelConsensusStateRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelConsensusStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - client ID associated with the consensus state
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryChannelConsensusStateResponse = (g_struct) => [g_struct.consensus_state, g_struct.client_id, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CONSENSUS_STATE_RESPONSE = '/ibc.core.channel.v1.QueryChannelConsensusStateResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export const destructIbcCoreChannelQueryPacketCommitmentRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENT_REQUEST = '/ibc.core.channel.v1.QueryPacketCommitmentRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commitment - packet associated with the request fields
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryPacketCommitmentResponse = (g_struct) => [safe_base64_to_bytes(g_struct.commitment), safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENT_RESPONSE = '/ibc.core.channel.v1.QueryPacketCommitmentResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: pagination - request
 */
export const destructIbcCoreChannelQueryPacketCommitmentsRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENTS_REQUEST = '/ibc.core.channel.v1.QueryPacketCommitmentsRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commitments -
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export const destructIbcCoreChannelQueryPacketCommitmentsResponse = (g_struct) => [g_struct.commitments, g_struct.pagination, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENTS_RESPONSE = '/ibc.core.channel.v1.QueryPacketCommitmentsResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketReceiptRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export const destructIbcCoreChannelQueryPacketReceiptRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_RECEIPT_REQUEST = '/ibc.core.channel.v1.QueryPacketReceiptRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketReceiptResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: received - success flag for if receipt exists
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryPacketReceiptResponse = (g_struct) => [__UNDEFINED, g_struct.received, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_RECEIPT_RESPONSE = '/ibc.core.channel.v1.QueryPacketReceiptResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export const destructIbcCoreChannelQueryPacketAcknowledgementRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENT_REQUEST = '/ibc.core.channel.v1.QueryPacketAcknowledgementRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: acknowledgement - packet associated with the request fields
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryPacketAcknowledgementResponse = (g_struct) => [safe_base64_to_bytes(g_struct.acknowledgement), safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENT_RESPONSE = '/ibc.core.channel.v1.QueryPacketAcknowledgementResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: pagination - request
 *   - 3: packet_commitment_sequences - list of packet sequences
 */
export const destructIbcCoreChannelQueryPacketAcknowledgementsRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.pagination, g_struct.packet_commitment_sequences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENTS_REQUEST = '/ibc.core.channel.v1.QueryPacketAcknowledgementsRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: acknowledgements -
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export const destructIbcCoreChannelQueryPacketAcknowledgementsResponse = (g_struct) => [g_struct.acknowledgements, g_struct.pagination, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENTS_RESPONSE = '/ibc.core.channel.v1.QueryPacketAcknowledgementsResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedPacketsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: packet_commitment_sequences - list of packet sequences
 */
export const destructIbcCoreChannelQueryUnreceivedPacketsRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.packet_commitment_sequences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_PACKETS_REQUEST = '/ibc.core.channel.v1.QueryUnreceivedPacketsRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedPacketsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived packet sequences
 *   - 1: height - query block height
 */
export const destructIbcCoreChannelQueryUnreceivedPacketsResponse = (g_struct) => [g_struct.sequences, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_PACKETS_RESPONSE = '/ibc.core.channel.v1.QueryUnreceivedPacketsResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedAcksRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: packet_ack_sequences - list of acknowledgement sequences
 */
export const destructIbcCoreChannelQueryUnreceivedAcksRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.packet_ack_sequences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_ACKS_REQUEST = '/ibc.core.channel.v1.QueryUnreceivedAcksRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedAcksResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived acknowledgement sequences
 *   - 1: height - query block height
 */
export const destructIbcCoreChannelQueryUnreceivedAcksResponse = (g_struct) => [g_struct.sequences, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_ACKS_RESPONSE = '/ibc.core.channel.v1.QueryUnreceivedAcksResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceReceiveRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export const destructIbcCoreChannelQueryNextSequenceReceiveRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_RECEIVE_REQUEST = '/ibc.core.channel.v1.QueryNextSequenceReceiveRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceReceiveResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_sequence_receive - next sequence receive number
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryNextSequenceReceiveResponse = (g_struct) => [g_struct.next_sequence_receive, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_RECEIVE_RESPONSE = '/ibc.core.channel.v1.QueryNextSequenceReceiveResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceSendRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export const destructIbcCoreChannelQueryNextSequenceSendRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_SEND_REQUEST = '/ibc.core.channel.v1.QueryNextSequenceSendRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_sequence_send - next sequence send number
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryNextSequenceSendResponse = (g_struct) => [g_struct.next_sequence_send, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_SEND_RESPONSE = '/ibc.core.channel.v1.QueryNextSequenceSendResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeErrorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 */
export const destructIbcCoreChannelQueryUpgradeErrorRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_ERROR_REQUEST = '/ibc.core.channel.v1.QueryUpgradeErrorRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeErrorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: error_receipt -
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryUpgradeErrorResponse = (g_struct) => [g_struct.error_receipt, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_ERROR_RESPONSE = '/ibc.core.channel.v1.QueryUpgradeErrorResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 */
export const destructIbcCoreChannelQueryUpgradeRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_REQUEST = '/ibc.core.channel.v1.QueryUpgradeRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upgrade -
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreChannelQueryUpgradeResponse = (g_struct) => [g_struct.upgrade, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_RESPONSE = '/ibc.core.channel.v1.QueryUpgradeResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelQueryChannelParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_PARAMS_REQUEST = '/ibc.core.channel.v1.QueryChannelParamsRequest';
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructIbcCoreChannelQueryChannelParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_PARAMS_RESPONSE = '/ibc.core.channel.v1.QueryChannelParamsResponse';
//# sourceMappingURL=query.js.map