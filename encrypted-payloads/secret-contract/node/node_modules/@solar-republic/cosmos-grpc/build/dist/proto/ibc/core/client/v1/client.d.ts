import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { CosmosUpgradePlan, DecodedCosmosUpgradePlan } from '../../../../cosmos/upgrade/v1beta1/upgrade.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
export type AnyIbcCoreClientClientUpdateProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type AnyIbcCoreClientUpgradeProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedIbcCoreClientIdentifiedClientState = Encoded<'/ibc.core.client.v1.IdentifiedClientState'>;
export type EncodedIbcCoreClientConsensusStateWithHeight = Encoded<'/ibc.core.client.v1.ConsensusStateWithHeight'>;
export type EncodedIbcCoreClientClientConsensusStates = Encoded<'/ibc.core.client.v1.ClientConsensusStates'>;
export type EncodedIbcCoreClientHeight = Encoded<'/ibc.core.client.v1.Height'>;
export type EncodedIbcCoreClientParams = Encoded<'/ibc.core.client.v1.Params'>;
export type EncodedIbcCoreClientClientUpdateProposal = Encoded<'/ibc.core.client.v1.ClientUpdateProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedIbcCoreClientUpgradeProposal = Encoded<'/ibc.core.client.v1.UpgradeProposal' | 'cosmos.gov.v1beta1.Content'>;
/**
 * Encodes a `ClientUpdateProposal` protobuf message wrapped in the `Any` container: a legacy governance proposal. If it passes, the substitute client's latest consensus state is copied over to the subject client. The proposal handler may fail if the subject and the substitute do not match in client and chain parameters (with exception to latest height, frozen height, and chain-id). Deprecated: Please use MsgRecoverClient in favour of this message type.
 * @param s_title - `title`: the title of the update proposal
 * @param s_description - `description`: the description of the proposal
 * @param si_subject_client - `subject_client_id`: the client identifier for the client to be updated if the proposal passes
 * @param si_substitute_client - `substitute_client_id`: the substitute client identifier for the client standing in for the subject client
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyClientUpdateProposal: (s_title?: Opt<string>, s_description?: Opt<string>, si_subject_client?: Opt<string>, si_substitute_client?: Opt<string>) => AnyIbcCoreClientClientUpdateProposal;
/**
 * Encodes a `UpgradeProposal` protobuf message wrapped in the `Any` container: a gov Content type for initiating an IBC breaking upgrade. Deprecated: Please use MsgIBCSoftwareUpgrade in favour of this message type.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param g_plan - `plan`:
 * @param atu8_upgraded_client_state - `upgraded_client_state`: An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyUpgradeProposal: (s_title?: Opt<string>, s_description?: Opt<string>, atu8_plan?: Opt<Encoded<'/cosmos.upgrade.v1beta1.Plan'>>, atu8_upgraded_client_state?: Opt<Uint8Array>) => AnyIbcCoreClientUpgradeProposal;
/**
 * Encodes a `IdentifiedClientState` protobuf message: defines a client state with an additional client identifier field.
 * @param si_client - `client_id`: client identifier
 * @param atu8_client_state - `client_state`: client state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientIdentifiedClientState: (si_client?: Opt<string>, atu8_client_state?: Opt<Uint8Array>) => EncodedIbcCoreClientIdentifiedClientState;
/**
 * Encodes a `ConsensusStateWithHeight` protobuf message: defines a consensus state with an additional height field.
 * @param g_height - `height`: consensus state height
 * @param atu8_consensus_state - `consensus_state`: consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientConsensusStateWithHeight: (atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, atu8_consensus_state?: Opt<Uint8Array>) => EncodedIbcCoreClientConsensusStateWithHeight;
/**
 * Encodes a `ClientConsensusStates` protobuf message: defines all the stored consensus states for a given client.
 * @param si_client - `client_id`: client identifier
 * @param a_consensus_states - `consensus_states`: consensus states and their heights associated with the client
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientClientConsensusStates: (si_client?: Opt<string>, a_consensus_states?: Opt<Encoded<'/ibc.core.client.v1.ConsensusStateWithHeight'>[]>) => EncodedIbcCoreClientClientConsensusStates;
/**
 * Encodes a `Height` protobuf message: a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @param sg_revision_number - `revision_number`: the revision that the client is currently on
 * @param sg_revision_height - `revision_height`: the height within the given revision
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientHeight: (sg_revision_number?: Opt<WeakUint64Str>, sg_revision_height?: Opt<WeakUint64Str>) => EncodedIbcCoreClientHeight;
/**
 * Encodes a `Params` protobuf message: defines the set of IBC light client parameters.
 * @param a_allowed_clients - `allowed_clients`: defines the list of allowed client state types which can be created and interacted with. If a client type is removed from the allowed clients list, usage of this client will be disabled until it is added again to the list.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientParams: (a_allowed_clients?: Opt<string[]>) => EncodedIbcCoreClientParams;
/**
 * Encodes a `ClientUpdateProposal` protobuf message: a legacy governance proposal. If it passes, the substitute client's latest consensus state is copied over to the subject client. The proposal handler may fail if the subject and the substitute do not match in client and chain parameters (with exception to latest height, frozen height, and chain-id). Deprecated: Please use MsgRecoverClient in favour of this message type.
 * @param s_title - `title`: the title of the update proposal
 * @param s_description - `description`: the description of the proposal
 * @param si_subject_client - `subject_client_id`: the client identifier for the client to be updated if the proposal passes
 * @param si_substitute_client - `substitute_client_id`: the substitute client identifier for the client standing in for the subject client
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientClientUpdateProposal: (s_title?: Opt<string>, s_description?: Opt<string>, si_subject_client?: Opt<string>, si_substitute_client?: Opt<string>) => EncodedIbcCoreClientClientUpdateProposal;
/**
 * Encodes a `UpgradeProposal` protobuf message: a gov Content type for initiating an IBC breaking upgrade. Deprecated: Please use MsgIBCSoftwareUpgrade in favour of this message type.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param g_plan - `plan`:
 * @param atu8_upgraded_client_state - `upgraded_client_state`: An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientUpgradeProposal: (s_title?: Opt<string>, s_description?: Opt<string>, atu8_plan?: Opt<Encoded<'/cosmos.upgrade.v1beta1.Plan'>>, atu8_upgraded_client_state?: Opt<Uint8Array>) => EncodedIbcCoreClientUpgradeProposal;
/**
 * A decoded protobuf IdentifiedClientState message
 *
 * Tuple where:
 *   - 0: client_id - client identifier
 *   - 1: client_state - client state
 */
export type DecodedIbcCoreClientIdentifiedClientState = [
    si_client?: string,
    a_client_state?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf IdentifiedClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientIdentifiedClientState}
 */
export declare const decodeIbcCoreClientIdentifiedClientState: (atu8_payload: Uint8Array) => DecodedIbcCoreClientIdentifiedClientState;
/**
 * A decoded protobuf ConsensusStateWithHeight message
 *
 * Tuple where:
 *   - 0: height - consensus state height
 *   - 1: consensus_state - consensus state
 */
export type DecodedIbcCoreClientConsensusStateWithHeight = [
    a_height?: DecodedIbcCoreClientHeight,
    a_consensus_state?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf ConsensusStateWithHeight message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientConsensusStateWithHeight}
 */
export declare const decodeIbcCoreClientConsensusStateWithHeight: (atu8_payload: Uint8Array) => DecodedIbcCoreClientConsensusStateWithHeight;
/**
 * A decoded protobuf ClientConsensusStates message
 *
 * Tuple where:
 *   - 0: client_id - client identifier
 *   - 1: consensus_states - consensus states and their heights associated with the client
 */
export type DecodedIbcCoreClientClientConsensusStates = [
    si_client?: string,
    a_consensus_states?: DecodedIbcCoreClientConsensusStateWithHeight[]
];
/**
 * Decodes a protobuf ClientConsensusStates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientClientConsensusStates}
 */
export declare const decodeIbcCoreClientClientConsensusStates: (atu8_payload: Uint8Array) => DecodedIbcCoreClientClientConsensusStates;
/**
 * A decoded protobuf Height message
 *
 * Tuple where:
 *   - 0: revision_number - the revision that the client is currently on
 *   - 1: revision_height - the height within the given revision
 */
export type DecodedIbcCoreClientHeight = [
    sg_revision_number?: CwUint64,
    sg_revision_height?: CwUint64
];
/**
 * Decodes a protobuf Height message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientHeight}
 */
export declare const decodeIbcCoreClientHeight: (atu8_payload: Uint8Array) => DecodedIbcCoreClientHeight;
/**
 * A decoded protobuf Params message
 *
 * Alias for: allowed_clients - defines the list of allowed client state types which can be created and interacted with. If a client type is removed from the allowed clients list, usage of this client will be disabled until it is added again to the list.
 */
export type DecodedIbcCoreClientParams = [
    a_allowed_clients?: string[]
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientParams}
 */
export declare const decodeIbcCoreClientParams: (atu8_payload: Uint8Array) => DecodedIbcCoreClientParams;
/**
 * A decoded protobuf ClientUpdateProposal message
 *
 * Tuple where:
 *   - 0: title - the title of the update proposal
 *   - 1: description - the description of the proposal
 *   - 2: subject_client_id - the client identifier for the client to be updated if the proposal passes
 *   - 3: substitute_client_id - the substitute client identifier for the client standing in for the subject client
 */
export type DecodedIbcCoreClientClientUpdateProposal = [
    s_title?: string,
    s_description?: string,
    si_subject_client?: string,
    si_substitute_client?: string
];
/**
 * Decodes a protobuf ClientUpdateProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientClientUpdateProposal}
 */
export declare const decodeIbcCoreClientClientUpdateProposal: (atu8_payload: Uint8Array) => DecodedIbcCoreClientClientUpdateProposal;
/**
 * A decoded protobuf UpgradeProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: plan -
 *   - 3: upgraded_client_state - An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 */
export type DecodedIbcCoreClientUpgradeProposal = [
    s_title?: string,
    s_description?: string,
    a_plan?: DecodedCosmosUpgradePlan,
    a_upgraded_client_state?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf UpgradeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientUpgradeProposal}
 */
export declare const decodeIbcCoreClientUpgradeProposal: (atu8_payload: Uint8Array) => DecodedIbcCoreClientUpgradeProposal;
/**
 * Destructures the fields of a {@link IbcCoreClientIdentifiedClientState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client identifier
 *   - 1: client_state - client state
 */
export declare const destructIbcCoreClientIdentifiedClientState: (g_struct: IbcCoreClientIdentifiedClientState) => [client_id?: string, client_state?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_IDENTIFIED_CLIENT_STATE = "/ibc.core.client.v1.IdentifiedClientState";
/**
 * JSON serialization of `ibc.core.client.v1.IdentifiedClientState` - defines a client state with an additional client identifier field.
 */
export type IbcCoreClientIdentifiedClientState = {
    client_id?: string | undefined;
    client_state?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientClientConsensusStates} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client identifier
 *   - 1: consensus_states - consensus states and their heights associated with the client
 */
export declare const destructIbcCoreClientClientConsensusStates: (g_struct: IbcCoreClientClientConsensusStates) => [client_id?: string, consensus_states?: IbcCoreClientConsensusStateWithHeight[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_CLIENT_CONSENSUS_STATES = "/ibc.core.client.v1.ClientConsensusStates";
/**
 * JSON serialization of `ibc.core.client.v1.ClientConsensusStates` - defines all the stored consensus states for a given client.
 */
export type IbcCoreClientClientConsensusStates = {
    client_id?: string | undefined;
    consensus_states?: IbcCoreClientConsensusStateWithHeight[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientConsensusStateWithHeight} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - consensus state height
 *   - 1: consensus_state - consensus state
 */
export declare const destructIbcCoreClientConsensusStateWithHeight: (g_struct: IbcCoreClientConsensusStateWithHeight) => [height?: IbcCoreClientHeight, consensus_state?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_CONSENSUS_STATE_WITH_HEIGHT = "/ibc.core.client.v1.ConsensusStateWithHeight";
/**
 * JSON serialization of `ibc.core.client.v1.ConsensusStateWithHeight` - defines a consensus state with an additional height field.
 */
export type IbcCoreClientConsensusStateWithHeight = {
    height?: IbcCoreClientHeight | undefined;
    consensus_state?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientHeight} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: revision_number - the revision that the client is currently on
 *   - 1: revision_height - the height within the given revision
 */
export declare const destructIbcCoreClientHeight: (g_struct: IbcCoreClientHeight) => [revision_number?: CwUint64, revision_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_HEIGHT = "/ibc.core.client.v1.Height";
/**
 * JSON serialization of `ibc.core.client.v1.Height` - a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 */
export type IbcCoreClientHeight = {
    revision_number?: CwUint64 | undefined;
    revision_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: allowed_clients - defines the list of allowed client state types which can be created and interacted with. If a client type is removed from the allowed clients list, usage of this client will be disabled until it is added again to the list.
 */
export declare const destructIbcCoreClientParams: (g_struct: IbcCoreClientParams) => [allowed_clients?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_PARAMS = "/ibc.core.client.v1.Params";
/**
 * JSON serialization of `ibc.core.client.v1.Params` - defines the set of IBC light client parameters.
 */
export type IbcCoreClientParams = {
    allowed_clients?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientClientUpdateProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - the title of the update proposal
 *   - 1: description - the description of the proposal
 *   - 2: subject_client_id - the client identifier for the client to be updated if the proposal passes
 *   - 3: substitute_client_id - the substitute client identifier for the client standing in for the subject client
 */
export declare const destructIbcCoreClientClientUpdateProposal: (g_struct: IbcCoreClientClientUpdateProposal) => [title?: string, description?: string, subject_client_id?: string, substitute_client_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_CLIENT_UPDATE_PROPOSAL = "/ibc.core.client.v1.ClientUpdateProposal";
/**
 * JSON serialization of `ibc.core.client.v1.ClientUpdateProposal` - a legacy governance proposal. If it passes, the substitute client's latest consensus state is copied over to the subject client. The proposal handler may fail if the subject and the substitute do not match in client and chain parameters (with exception to latest height, frozen height, and chain-id). Deprecated: Please use MsgRecoverClient in favour of this message type.
 */
export type IbcCoreClientClientUpdateProposal = {
    title?: string | undefined;
    description?: string | undefined;
    subject_client_id?: string | undefined;
    substitute_client_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientUpgradeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: plan -
 *   - 3: upgraded_client_state - An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 */
export declare const destructIbcCoreClientUpgradeProposal: (g_struct: IbcCoreClientUpgradeProposal) => [title?: string, description?: string, plan?: CosmosUpgradePlan, upgraded_client_state?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_UPGRADE_PROPOSAL = "/ibc.core.client.v1.UpgradeProposal";
/**
 * JSON serialization of `ibc.core.client.v1.UpgradeProposal` - a gov Content type for initiating an IBC breaking upgrade. Deprecated: Please use MsgIBCSoftwareUpgrade in favour of this message type.
 */
export type IbcCoreClientUpgradeProposal = {
    title?: string | undefined;
    description?: string | undefined;
    plan?: CosmosUpgradePlan | undefined;
    upgraded_client_state?: JsonAny | undefined;
};
