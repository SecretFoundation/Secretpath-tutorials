import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeCosmosUpgradePlan } from '../../../../cosmos/upgrade/v1beta1/upgrade.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import { decodeIbcCoreClientParams } from './client.js';
/**
 * Encodes a `MsgCreateClient` protobuf message: defines a message to create an IBC client
 * @param atu8_client_state - `client_state`: light client state
 * @param atu8_consensus_state - `consensus_state`: consensus state associated with the client that corresponds to a given height.
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgCreateClient = (atu8_client_state, atu8_consensus_state, s_signer) => Protobuf() // ...
    .b(atu8_client_state) // Any client_state = 1
    .b(atu8_consensus_state) // Any consensus_state = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgCreateClientResponse` protobuf message: defines the Msg/CreateClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgCreateClientResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateClient` protobuf message: defines an sdk.Msg to update a IBC client state using the given client message.
 * @param si_client - `client_id`: client unique identifier
 * @param atu8_client_message - `client_message`: client message to update the light client
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgUpdateClient = (si_client, atu8_client_message, s_signer) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .b(atu8_client_message) // Any client_message = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgUpdateClientResponse` protobuf message: defines the Msg/UpdateClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgUpdateClientResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpgradeClient` protobuf message: defines an sdk.Msg to upgrade an IBC client to a new client state
 * @param si_client - `client_id`: client unique identifier
 * @param atu8_client_state - `client_state`: upgraded client state
 * @param atu8_consensus_state - `consensus_state`: upgraded consensus state, only contains enough information to serve as a basis of trust in update logic
 * @param atu8_proof_upgrade_client - `proof_upgrade_client`: proof that old chain committed to new client
 * @param atu8_proof_upgrade_consensus_state - `proof_upgrade_consensus_state`: proof that old chain committed to new consensus state
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgUpgradeClient = (si_client, atu8_client_state, atu8_consensus_state, atu8_proof_upgrade_client, atu8_proof_upgrade_consensus_state, s_signer) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .b(atu8_client_state) // Any client_state = 2
    .b(atu8_consensus_state) // Any consensus_state = 3
    .b(atu8_proof_upgrade_client) // bytes proof_upgrade_client = 4
    .b(atu8_proof_upgrade_consensus_state) // bytes proof_upgrade_consensus_state = 5
    .s(s_signer) // string signer = 6
    .o;
/**
 * Encodes a `MsgUpgradeClientResponse` protobuf message: defines the Msg/UpgradeClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgUpgradeClientResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSubmitMisbehaviour` protobuf message: defines an sdk.Msg type that submits Evidence for light client misbehaviour. This message has been deprecated. Use MsgUpdateClient instead.
 * @param si_client - `client_id`: client unique identifier
 * @param atu8_misbehaviour - `misbehaviour`: used for freezing the light client
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgSubmitMisbehaviour = (si_client, atu8_misbehaviour, s_signer) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .b(atu8_misbehaviour) // Any misbehaviour = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgSubmitMisbehaviourResponse` protobuf message: defines the Msg/SubmitMisbehaviour response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgSubmitMisbehaviourResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgRecoverClient` protobuf message: defines the message used to recover a frozen or expired client.
 * @param si_subject_client - `subject_client_id`: the client identifier for the client to be updated if the proposal passes
 * @param si_substitute_client - `substitute_client_id`: the substitute client identifier for the client which will replace the subject client
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgRecoverClient = (si_subject_client, si_substitute_client, s_signer) => Protobuf() // ...
    .s(si_subject_client) // string subject_client_id = 1
    .s(si_substitute_client) // string substitute_client_id = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgRecoverClientResponse` protobuf message: defines the Msg/RecoverClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgRecoverClientResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgIBCSoftwareUpgrade` protobuf message: defines the message used to schedule an upgrade of an IBC client using a v1 governance proposal
 * @param g_plan - `plan`:
 * @param atu8_upgraded_client_state - `upgraded_client_state`: An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades. Correspondingly, the UpgradedClientState field has been deprecated in the Cosmos SDK to allow for this logic to exist solely in the 02-client module.
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgIBCSoftwareUpgrade = (atu8_plan, atu8_upgraded_client_state, s_signer) => Protobuf() // ...
    .b(atu8_plan) // Plan plan = 1
    .b(atu8_upgraded_client_state) // Any upgraded_client_state = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgIBCSoftwareUpgradeResponse` protobuf message: defines the Msg/IBCSoftwareUpgrade response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgIBCSoftwareUpgradeResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: defines the sdk.Msg type to update the client parameters.
 * @param s_signer - `signer`: address
 * @param g_params - `params`: defines the client parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgUpdateParams = (s_signer, atu8_params) => Protobuf() // ...
    .s(s_signer) // string signer = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the MsgUpdateParams response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf CreateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgCreateClient}
 */
export const decodeIbcCoreClientMsgCreateClient = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5], [decodeGoogleProtobufAny, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf CreateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgCreateClientResponse}
 */
export const decodeIbcCoreClientMsgCreateClientResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateClient}
 */
export const decodeIbcCoreClientMsgUpdateClient = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf UpdateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateClientResponse}
 */
export const decodeIbcCoreClientMsgUpdateClientResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpgradeClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpgradeClient}
 */
export const decodeIbcCoreClientMsgUpgradeClient = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 1, 1, 5], [0, decodeGoogleProtobufAny, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf UpgradeClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpgradeClientResponse}
 */
export const decodeIbcCoreClientMsgUpgradeClientResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitMisbehaviour message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgSubmitMisbehaviour}
 */
export const decodeIbcCoreClientMsgSubmitMisbehaviour = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SubmitMisbehaviour message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgSubmitMisbehaviourResponse}
 */
export const decodeIbcCoreClientMsgSubmitMisbehaviourResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RecoverClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgRecoverClient}
 */
export const decodeIbcCoreClientMsgRecoverClient = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf RecoverClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgRecoverClientResponse}
 */
export const decodeIbcCoreClientMsgRecoverClientResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf IBCSoftwareUpgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgIBCSoftwareUpgrade}
 */
export const decodeIbcCoreClientMsgIBCSoftwareUpgrade = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5], [decodeCosmosUpgradePlan, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf IBCSoftwareUpgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgIBCSoftwareUpgradeResponse}
 */
export const decodeIbcCoreClientMsgIBCSoftwareUpgradeResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateParams}
 */
export const decodeIbcCoreClientMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeIbcCoreClientParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateParamsResponse}
 */
export const decodeIbcCoreClientMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link IbcCoreClientMsgCreateClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_state - light client state
 *   - 1: consensus_state - consensus state associated with the client that corresponds to a given height.
 *   - 2: signer - address
 */
export const destructIbcCoreClientMsgCreateClient = (g_struct) => [g_struct.client_state, g_struct.consensus_state, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_CREATE_CLIENT = '/ibc.core.client.v1.MsgCreateClient';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgCreateClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgCreateClientResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_CREATE_CLIENT_RESPONSE = '/ibc.core.client.v1.MsgCreateClientResponse';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: client_message - client message to update the light client
 *   - 2: signer - address
 */
export const destructIbcCoreClientMsgUpdateClient = (g_struct) => [g_struct.client_id, g_struct.client_message, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_CLIENT = '/ibc.core.client.v1.MsgUpdateClient';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgUpdateClientResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_CLIENT_RESPONSE = '/ibc.core.client.v1.MsgUpdateClientResponse';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpgradeClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: client_state - upgraded client state
 *   - 2: consensus_state - upgraded consensus state, only contains enough information to serve as a basis of trust in update logic
 *   - 3: proof_upgrade_client - proof that old chain committed to new client
 *   - 4: proof_upgrade_consensus_state - proof that old chain committed to new consensus state
 *   - 5: signer - address
 */
export const destructIbcCoreClientMsgUpgradeClient = (g_struct) => [g_struct.client_id, g_struct.client_state, g_struct.consensus_state, safe_base64_to_bytes(g_struct.proof_upgrade_client), safe_base64_to_bytes(g_struct.proof_upgrade_consensus_state), g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPGRADE_CLIENT = '/ibc.core.client.v1.MsgUpgradeClient';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpgradeClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgUpgradeClientResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPGRADE_CLIENT_RESPONSE = '/ibc.core.client.v1.MsgUpgradeClientResponse';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgSubmitMisbehaviour} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: misbehaviour - used for freezing the light client
 *   - 2: signer - address
 */
export const destructIbcCoreClientMsgSubmitMisbehaviour = (g_struct) => [g_struct.client_id, g_struct.misbehaviour, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_SUBMIT_MISBEHAVIOUR = '/ibc.core.client.v1.MsgSubmitMisbehaviour';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgSubmitMisbehaviourResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgSubmitMisbehaviourResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_SUBMIT_MISBEHAVIOUR_RESPONSE = '/ibc.core.client.v1.MsgSubmitMisbehaviourResponse';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgRecoverClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subject_client_id - the client identifier for the client to be updated if the proposal passes
 *   - 1: substitute_client_id - the substitute client identifier for the client which will replace the subject client
 *   - 2: signer - address
 */
export const destructIbcCoreClientMsgRecoverClient = (g_struct) => [g_struct.subject_client_id, g_struct.substitute_client_id, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_RECOVER_CLIENT = '/ibc.core.client.v1.MsgRecoverClient';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgRecoverClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgRecoverClientResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_RECOVER_CLIENT_RESPONSE = '/ibc.core.client.v1.MsgRecoverClientResponse';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgIBCSoftwareUpgrade} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: plan -
 *   - 1: upgraded_client_state - An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades. Correspondingly, the UpgradedClientState field has been deprecated in the Cosmos SDK to allow for this logic to exist solely in the 02-client module.
 *   - 2: signer - address
 */
export const destructIbcCoreClientMsgIBCSoftwareUpgrade = (g_struct) => [g_struct.plan, g_struct.upgraded_client_state, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_I_B_C_SOFTWARE_UPGRADE = '/ibc.core.client.v1.MsgIBCSoftwareUpgrade';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgIBCSoftwareUpgradeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgIBCSoftwareUpgradeResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_I_B_C_SOFTWARE_UPGRADE_RESPONSE = '/ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the client parameters to update. NOTE: All parameters must be supplied.
 */
export const destructIbcCoreClientMsgUpdateParams = (g_struct) => [g_struct.signer, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_PARAMS = '/ibc.core.client.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreClientMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_PARAMS_RESPONSE = '/ibc.core.client.v1.MsgUpdateParamsResponse';
//# sourceMappingURL=tx.js.map