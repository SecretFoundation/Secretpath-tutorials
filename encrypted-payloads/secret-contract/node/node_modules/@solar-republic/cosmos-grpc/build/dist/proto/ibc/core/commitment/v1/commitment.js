import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeCosmosIcs23CommitmentProof } from '../../../../cosmos/ics23/v1/proofs.js';
/**
 * Encodes a `MerkleRoot` protobuf message: defines a merkle root hash. In the Cosmos SDK, the AppHash of a block header becomes the root.
 * @param atu8_hash - `hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreCommitmentMerkleRoot = (atu8_hash) => Protobuf() // ...
    .b(atu8_hash) // bytes hash = 1
    .o;
/**
 * Encodes a `MerklePrefix` protobuf message: merkle path prefixed to the key. The constructed key from the Path and the key will be append(Path.KeyPath, append(Path.KeyPrefix, key...))
 * @param atu8_key_prefix - `key_prefix`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreCommitmentMerklePrefix = (atu8_key_prefix) => Protobuf() // ...
    .b(atu8_key_prefix) // bytes key_prefix = 1
    .o;
/**
 * Encodes a `MerklePath` protobuf message: the path used to verify commitment proofs, which can be an arbitrary structured object (defined by a commitment type). MerklePath is represented from root-to-leaf
 * @param a_key_paths - `key_path`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreCommitmentMerklePath = (a_key_paths) => Protobuf() // ...
    .S(a_key_paths) // string[] key_path = 1
    .o;
/**
 * Encodes a `MerkleProof` protobuf message: a wrapper type over a chain of CommitmentProofs. It demonstrates membership or non-membership for an element or set of elements, verifiable in conjunction with a known commitment root. Proofs should be succinct. MerkleProofs are ordered from leaf-to-root
 * @param a_proofs - `proofs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreCommitmentMerkleProof = (a_proofs) => Protobuf() // ...
    .B(a_proofs) // CommitmentProof[] proofs = 1
    .o;
/**
 * Decodes a protobuf MerkleRoot message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreCommitmentMerkleRoot}
 */
export const decodeIbcCoreCommitmentMerkleRoot = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf MerklePrefix message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreCommitmentMerklePrefix}
 */
export const decodeIbcCoreCommitmentMerklePrefix = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf MerklePath message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreCommitmentMerklePath}
 */
export const decodeIbcCoreCommitmentMerklePath = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf MerkleProof message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreCommitmentMerkleProof}
 */
export const decodeIbcCoreCommitmentMerkleProof = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosIcs23CommitmentProof]);
/**
 * Destructures the fields of a {@link IbcCoreCommitmentMerklePrefix} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_prefix -
 */
export const destructIbcCoreCommitmentMerklePrefix = (g_struct) => [safe_base64_to_bytes(g_struct.key_prefix)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_COMMITMENT_MERKLE_PREFIX = '/ibc.core.commitment.v1.MerklePrefix';
/**
 * Destructures the fields of a {@link IbcCoreCommitmentMerkleRoot} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash -
 */
export const destructIbcCoreCommitmentMerkleRoot = (g_struct) => [safe_base64_to_bytes(g_struct.hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_COMMITMENT_MERKLE_ROOT = '/ibc.core.commitment.v1.MerkleRoot';
/**
 * Destructures the fields of a {@link IbcCoreCommitmentMerklePath} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_path -
 */
export const destructIbcCoreCommitmentMerklePath = (g_struct) => [g_struct.key_path];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_COMMITMENT_MERKLE_PATH = '/ibc.core.commitment.v1.MerklePath';
/**
 * Destructures the fields of a {@link IbcCoreCommitmentMerkleProof} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proofs -
 */
export const destructIbcCoreCommitmentMerkleProof = (g_struct) => [g_struct.proofs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_COMMITMENT_MERKLE_PROOF = '/ibc.core.commitment.v1.MerkleProof';
//# sourceMappingURL=commitment.js.map