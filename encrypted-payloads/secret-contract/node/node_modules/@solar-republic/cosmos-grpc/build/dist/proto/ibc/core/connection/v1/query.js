import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../../api/transport.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import { decodeIbcCoreClientHeight, decodeIbcCoreClientIdentifiedClientState } from '../../client/v1/client.js';
import { decodeIbcCoreConnectionConnectionEnd, decodeIbcCoreConnectionIdentifiedConnection, decodeIbcCoreConnectionParams } from './connection.js';
const SR_LCD_IBC_CORE_CONNECTION_QUERY = '/ibc/core/connection/v1/';
/**
 * Queries an IBC connection end.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_connection - connection unique identifier
 * @returns a tuple where:
 *   - 0: connection - associated with the request identifier
 *   - 1: proof - associated with the request identifier
 *   - 2: proof_height - associated with the request identifier
 */
export const queryIbcCoreConnectionConnection = restful_grpc(si_connection => [SR_LCD_IBC_CORE_CONNECTION_QUERY + 'connections/' + si_connection]);
/**
 * Queries all the IBC connections of a chain.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: connections - list of stored connections of the chain.
 *   - 1: pagination - list of stored connections of the chain.
 *   - 2: height - list of stored connections of the chain.
 */
export const queryIbcCoreConnectionConnections = restful_grpc(g_pagination => [SR_LCD_IBC_CORE_CONNECTION_QUERY + 'connections', {
        pagination: g_pagination,
    }]);
/**
 * Queries the connection paths associated with a client state.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_client - client identifier associated with a connection
 * @returns a tuple where:
 *   - 0: connection_paths - slice of all the connection paths associated with a client.
 *   - 1: proof - slice of all the connection paths associated with a client.
 *   - 2: proof_height - slice of all the connection paths associated with a client.
 */
export const queryIbcCoreConnectionClientConnections = restful_grpc(si_client => [SR_LCD_IBC_CORE_CONNECTION_QUERY + 'client_connections/' + si_client]);
/**
 * Queries the client state associated with the connection.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_connection - connection identifier
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - client state associated with the channel
 *   - 2: proof_height - client state associated with the channel
 */
export const queryIbcCoreConnectionConnectionClientState = restful_grpc(si_connection => [SR_LCD_IBC_CORE_CONNECTION_QUERY + 'connections/' + si_connection + '/client_state']);
/**
 * Queries the consensus state associated with the connection.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_connection - connection identifier
 * @param sg_revision_number -
 * @param sg_revision_height -
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - consensus state associated with the channel
 *   - 2: proof - consensus state associated with the channel
 *   - 3: proof_height - consensus state associated with the channel
 */
export const queryIbcCoreConnectionConnectionConsensusState = restful_grpc((si_connection, sg_revision_number, sg_revision_height) => [SR_LCD_IBC_CORE_CONNECTION_QUERY + 'connections/' + si_connection + '/consensus_state/revision/' + sg_revision_number + '/height/' + sg_revision_height]);
/**
 * Queries all parameters of the ibc connection submodule.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryIbcCoreConnectionConnectionParams = restful_grpc(() => [SR_LCD_IBC_CORE_CONNECTION_QUERY + 'params']);
/**
 * Encodes a `QueryConnectionRequest` protobuf message: the request type for the Query/Connection RPC method
 * @param si_connection - `connection_id`: connection unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionRequest = (si_connection) => Protobuf() // ...
    .s(si_connection) // string connection_id = 1
    .o;
/**
 * Encodes a `QueryConnectionResponse` protobuf message: the response type for the Query/Connection RPC method. Besides the connection end, it includes a proof and the height from which the proof was retrieved.
 * @param g_connection - `connection`: associated with the request identifier
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionResponse = (atu8_connection, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_connection) // ConnectionEnd connection = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryConnectionsRequest` protobuf message: the request type for the Query/Connections RPC method
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionsRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryConnectionsResponse` protobuf message: the response type for the Query/Connections RPC method.
 * @param a_connections - `connections`: list of stored connections of the chain.
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionsResponse = (a_connections, atu8_pagination, atu8_height) => Protobuf() // ...
    .B(a_connections) // IdentifiedConnection[] connections = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .b(atu8_height) // Height height = 3
    .o;
/**
 * Encodes a `QueryClientConnectionsRequest` protobuf message: the request type for the Query/ClientConnections RPC method
 * @param si_client - `client_id`: client identifier associated with a connection
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryClientConnectionsRequest = (si_client) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .o;
/**
 * Encodes a `QueryClientConnectionsResponse` protobuf message: the response type for the Query/ClientConnections RPC method
 * @param a_connection_paths - `connection_paths`: slice of all the connection paths associated with a client.
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was generated
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryClientConnectionsResponse = (a_connection_paths, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .S(a_connection_paths) // string[] connection_paths = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryConnectionClientStateRequest` protobuf message: the request type for the Query/ConnectionClientState RPC method
 * @param si_connection - `connection_id`: connection identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionClientStateRequest = (si_connection) => Protobuf() // ...
    .s(si_connection) // string connection_id = 1
    .o;
/**
 * Encodes a `QueryConnectionClientStateResponse` protobuf message: the response type for the Query/ConnectionClientState RPC method
 * @param g_identified_client_state - `identified_client_state`: client state associated with the channel
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionClientStateResponse = (atu8_identified_client_state, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_identified_client_state) // IdentifiedClientState identified_client_state = 1
    .b(atu8_proof) // bytes proof = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .o;
/**
 * Encodes a `QueryConnectionConsensusStateRequest` protobuf message: the request type for the Query/ConnectionConsensusState RPC method
 * @param si_connection - `connection_id`: connection identifier
 * @param sg_revision_number - `revision_number`:
 * @param sg_revision_height - `revision_height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionConsensusStateRequest = (si_connection, sg_revision_number, sg_revision_height) => Protobuf() // ...
    .s(si_connection) // string connection_id = 1
    .g(sg_revision_number) // uint64 revision_number = 2
    .g(sg_revision_height) // uint64 revision_height = 3
    .o;
/**
 * Encodes a `QueryConnectionConsensusStateResponse` protobuf message: the response type for the Query/ConnectionConsensusState RPC method
 * @param atu8_consensus_state - `consensus_state`: consensus state associated with the channel
 * @param si_client - `client_id`: client ID associated with the consensus state
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionConsensusStateResponse = (atu8_consensus_state, si_client, atu8_proof, atu8_proof_height) => Protobuf() // ...
    .b(atu8_consensus_state) // Any consensus_state = 1
    .s(si_client) // string client_id = 2
    .b(atu8_proof) // bytes proof = 3
    .b(atu8_proof_height) // Height proof_height = 4
    .o;
/**
 * Encodes a `QueryConnectionParamsRequest` protobuf message: the request type for the Query/ConnectionParams RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryConnectionParamsResponse` protobuf message: the response type for the Query/ConnectionParams RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionQueryConnectionParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf QueryConnectionRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionRequest}
 */
export const decodeIbcCoreConnectionQueryConnectionRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryConnection message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionResponse}
 */
export const decodeIbcCoreConnectionQueryConnectionResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeIbcCoreConnectionConnectionEnd, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryConnectionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionsRequest}
 */
export const decodeIbcCoreConnectionQueryConnectionsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryConnections message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionsResponse}
 */
export const decodeIbcCoreConnectionQueryConnectionsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 1], [decodeIbcCoreConnectionIdentifiedConnection, decodeCosmosBaseQueryPageResponse, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryClientConnectionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryClientConnectionsRequest}
 */
export const decodeIbcCoreConnectionQueryClientConnectionsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryClientConnections message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryClientConnectionsResponse}
 */
export const decodeIbcCoreConnectionQueryClientConnectionsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4, 1, 1], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryConnectionClientStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionClientStateRequest}
 */
export const decodeIbcCoreConnectionQueryConnectionClientStateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryConnectionClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionClientStateResponse}
 */
export const decodeIbcCoreConnectionQueryConnectionClientStateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeIbcCoreClientIdentifiedClientState, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryConnectionConsensusStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionConsensusStateRequest}
 */
export const decodeIbcCoreConnectionQueryConnectionConsensusStateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3]);
/**
 * Decodes a protobuf QueryConnectionConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionConsensusStateResponse}
 */
export const decodeIbcCoreConnectionQueryConnectionConsensusStateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1], [decodeGoogleProtobufAny, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf QueryConnectionParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionParamsRequest}
 */
export const decodeIbcCoreConnectionQueryConnectionParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryConnectionParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionParamsResponse}
 */
export const decodeIbcCoreConnectionQueryConnectionParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcCoreConnectionParams]);
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id - connection unique identifier
 */
export const destructIbcCoreConnectionQueryConnectionRequest = (g_struct) => [g_struct.connection_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_REQUEST = '/ibc.core.connection.v1.QueryConnectionRequest';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection - associated with the request identifier
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreConnectionQueryConnectionResponse = (g_struct) => [g_struct.connection, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_RESPONSE = '/ibc.core.connection.v1.QueryConnectionResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination -
 */
export const destructIbcCoreConnectionQueryConnectionsRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTIONS_REQUEST = '/ibc.core.connection.v1.QueryConnectionsRequest';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connections - list of stored connections of the chain.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export const destructIbcCoreConnectionQueryConnectionsResponse = (g_struct) => [g_struct.connections, g_struct.pagination, g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTIONS_RESPONSE = '/ibc.core.connection.v1.QueryConnectionsResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryClientConnectionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client identifier associated with a connection
 */
export const destructIbcCoreConnectionQueryClientConnectionsRequest = (g_struct) => [g_struct.client_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CLIENT_CONNECTIONS_REQUEST = '/ibc.core.connection.v1.QueryClientConnectionsRequest';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryClientConnectionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_paths - slice of all the connection paths associated with a client.
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was generated
 */
export const destructIbcCoreConnectionQueryClientConnectionsResponse = (g_struct) => [g_struct.connection_paths, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CLIENT_CONNECTIONS_RESPONSE = '/ibc.core.connection.v1.QueryClientConnectionsResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionClientStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id - connection identifier
 */
export const destructIbcCoreConnectionQueryConnectionClientStateRequest = (g_struct) => [g_struct.connection_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CLIENT_STATE_REQUEST = '/ibc.core.connection.v1.QueryConnectionClientStateRequest';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionClientStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreConnectionQueryConnectionClientStateResponse = (g_struct) => [g_struct.identified_client_state, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CLIENT_STATE_RESPONSE = '/ibc.core.connection.v1.QueryConnectionClientStateResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionConsensusStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id - connection identifier
 *   - 1: revision_number -
 *   - 2: revision_height -
 */
export const destructIbcCoreConnectionQueryConnectionConsensusStateRequest = (g_struct) => [g_struct.connection_id, g_struct.revision_number, g_struct.revision_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CONSENSUS_STATE_REQUEST = '/ibc.core.connection.v1.QueryConnectionConsensusStateRequest';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionConsensusStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - client ID associated with the consensus state
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export const destructIbcCoreConnectionQueryConnectionConsensusStateResponse = (g_struct) => [g_struct.consensus_state, g_struct.client_id, safe_base64_to_bytes(g_struct.proof), g_struct.proof_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CONSENSUS_STATE_RESPONSE = '/ibc.core.connection.v1.QueryConnectionConsensusStateResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreConnectionQueryConnectionParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_PARAMS_REQUEST = '/ibc.core.connection.v1.QueryConnectionParamsRequest';
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructIbcCoreConnectionQueryConnectionParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_PARAMS_RESPONSE = '/ibc.core.connection.v1.QueryConnectionParamsResponse';
//# sourceMappingURL=query.js.map