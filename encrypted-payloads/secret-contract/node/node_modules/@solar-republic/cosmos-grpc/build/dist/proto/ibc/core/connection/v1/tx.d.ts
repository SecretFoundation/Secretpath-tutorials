import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import type { IbcCoreClientHeight, DecodedIbcCoreClientHeight } from '../../client/v1/client.js';
import type { IbcCoreConnectionCounterparty, DecodedIbcCoreConnectionCounterparty, IbcCoreConnectionVersion, DecodedIbcCoreConnectionVersion, IbcCoreConnectionParams, DecodedIbcCoreConnectionParams } from './connection.js';
export type EncodedIbcCoreConnectionMsgConnectionOpenInit = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenInit'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenInitResponse = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenInitResponse'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenTry = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenTry'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenTryResponse = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenTryResponse'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenAck = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenAck'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenAckResponse = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenAckResponse'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenConfirm = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenConfirm'>;
export type EncodedIbcCoreConnectionMsgConnectionOpenConfirmResponse = Encoded<'/ibc.core.connection.v1.MsgConnectionOpenConfirmResponse'>;
export type EncodedIbcCoreConnectionMsgUpdateParams = Encoded<'/ibc.core.connection.v1.MsgUpdateParams'>;
export type EncodedIbcCoreConnectionMsgUpdateParamsResponse = Encoded<'/ibc.core.connection.v1.MsgUpdateParamsResponse'>;
/**
 * Encodes a `MsgConnectionOpenInit` protobuf message: defines the msg sent by an account on Chain A to initialize a connection with Chain B.
 * @param si_client - `client_id`:
 * @param g_counterparty - `counterparty`:
 * @param g_version - `version`:
 * @param sg_delay_period - `delay_period`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenInit: (si_client?: Opt<string>, atu8_counterparty?: Opt<Encoded<'/ibc.core.connection.v1.Counterparty'>>, atu8_version?: Opt<Encoded<'/ibc.core.connection.v1.Version'>>, sg_delay_period?: Opt<WeakUint64Str>, s_signer?: Opt<string>) => EncodedIbcCoreConnectionMsgConnectionOpenInit;
/**
 * Encodes a `MsgConnectionOpenInitResponse` protobuf message: defines the Msg/ConnectionOpenInit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenInitResponse: () => EncodedIbcCoreConnectionMsgConnectionOpenInitResponse;
/**
 * Encodes a `MsgConnectionOpenTry` protobuf message: defines a msg sent by a Relayer to try to open a connection on Chain B.
 * @param si_client - `client_id`:
 * @param si_previous_connection - `previous_connection_id`: Deprecated: this field is unused. Crossing hellos are no longer supported in core IBC.
 * @param atu8_client_state - `client_state`:
 * @param g_counterparty - `counterparty`:
 * @param sg_delay_period - `delay_period`:
 * @param a_counterparty_versions - `counterparty_versions`:
 * @param g_proof_height - `proof_height`:
 * @param atu8_proof_init - `proof_init`: proof of the initialization the connection on Chain A: `UNINITIALIZED -> INIT`
 * @param atu8_proof_client - `proof_client`: proof of client state included in message
 * @param atu8_proof_consensus - `proof_consensus`: proof of client consensus state
 * @param g_consensus_height - `consensus_height`:
 * @param s_signer - `signer`:
 * @param atu8_host_consensus_state_proof - `host_consensus_state_proof`: optional proof data for host state machines that are unable to introspect their own consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenTry: (si_client?: Opt<string>, si_previous_connection?: Opt<string>, atu8_client_state?: Opt<Uint8Array>, atu8_counterparty?: Opt<Encoded<'/ibc.core.connection.v1.Counterparty'>>, sg_delay_period?: Opt<WeakUint64Str>, a_counterparty_versions?: Opt<Encoded<'/ibc.core.connection.v1.Version'>[]>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, atu8_proof_init?: Opt<Uint8Array>, atu8_proof_client?: Opt<Uint8Array>, atu8_proof_consensus?: Opt<Uint8Array>, atu8_consensus_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>, atu8_host_consensus_state_proof?: Opt<Uint8Array>) => EncodedIbcCoreConnectionMsgConnectionOpenTry;
/**
 * Encodes a `MsgConnectionOpenTryResponse` protobuf message: defines the Msg/ConnectionOpenTry response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenTryResponse: () => EncodedIbcCoreConnectionMsgConnectionOpenTryResponse;
/**
 * Encodes a `MsgConnectionOpenAck` protobuf message: defines a msg sent by a Relayer to Chain A to acknowledge the change of connection state to TRYOPEN on Chain B.
 * @param si_connection - `connection_id`:
 * @param si_counterparty_connection - `counterparty_connection_id`:
 * @param g_version - `version`:
 * @param atu8_client_state - `client_state`:
 * @param g_proof_height - `proof_height`:
 * @param atu8_proof_try - `proof_try`: proof of the initialization the connection on Chain B: `UNINITIALIZED -> TRYOPEN`
 * @param atu8_proof_client - `proof_client`: proof of client state included in message
 * @param atu8_proof_consensus - `proof_consensus`: proof of client consensus state
 * @param g_consensus_height - `consensus_height`:
 * @param s_signer - `signer`:
 * @param atu8_host_consensus_state_proof - `host_consensus_state_proof`: optional proof data for host state machines that are unable to introspect their own consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenAck: (si_connection?: Opt<string>, si_counterparty_connection?: Opt<string>, atu8_version?: Opt<Encoded<'/ibc.core.connection.v1.Version'>>, atu8_client_state?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, atu8_proof_try?: Opt<Uint8Array>, atu8_proof_client?: Opt<Uint8Array>, atu8_proof_consensus?: Opt<Uint8Array>, atu8_consensus_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>, atu8_host_consensus_state_proof?: Opt<Uint8Array>) => EncodedIbcCoreConnectionMsgConnectionOpenAck;
/**
 * Encodes a `MsgConnectionOpenAckResponse` protobuf message: defines the Msg/ConnectionOpenAck response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenAckResponse: () => EncodedIbcCoreConnectionMsgConnectionOpenAckResponse;
/**
 * Encodes a `MsgConnectionOpenConfirm` protobuf message: defines a msg sent by a Relayer to Chain B to acknowledge the change of connection state to OPEN on Chain A.
 * @param si_connection - `connection_id`:
 * @param atu8_proof_ack - `proof_ack`: proof for the change of the connection state on Chain A: `INIT -> OPEN`
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenConfirm: (si_connection?: Opt<string>, atu8_proof_ack?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreConnectionMsgConnectionOpenConfirm;
/**
 * Encodes a `MsgConnectionOpenConfirmResponse` protobuf message: defines the Msg/ConnectionOpenConfirm response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgConnectionOpenConfirmResponse: () => EncodedIbcCoreConnectionMsgConnectionOpenConfirmResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: defines the sdk.Msg type to update the connection parameters.
 * @param s_signer - `signer`: address
 * @param g_params - `params`: defines the connection parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgUpdateParams: (s_signer?: Opt<string>, atu8_params?: Opt<Encoded<'/ibc.core.connection.v1.Params'>>) => EncodedIbcCoreConnectionMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the MsgUpdateParams response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionMsgUpdateParamsResponse: () => EncodedIbcCoreConnectionMsgUpdateParamsResponse;
/**
 * A decoded protobuf ConnectionOpenInit message
 *
 * Tuple where:
 *   - 0: client_id -
 *   - 1: counterparty -
 *   - 2: version -
 *   - 3: delay_period -
 *   - 4: signer -
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenInit = [
    si_client?: string,
    a_counterparty?: DecodedIbcCoreConnectionCounterparty,
    a_version?: DecodedIbcCoreConnectionVersion,
    sg_delay_period?: CwUint64,
    s_signer?: string
];
/**
 * Decodes a protobuf ConnectionOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenInit}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenInit: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionMsgConnectionOpenInit;
/**
 * A decoded protobuf ConnectionOpenInit message
 *
 * Tuple where:
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenInitResponse = [];
/**
 * Decodes a protobuf ConnectionOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenInitResponse}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenInitResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ConnectionOpenTry message
 *
 * Tuple where:
 *   - 0: client_id -
 *   - 1: previous_connection_id - Deprecated: this field is unused. Crossing hellos are no longer supported in core IBC.
 *   - 2: client_state -
 *   - 3: counterparty -
 *   - 4: delay_period -
 *   - 5: counterparty_versions -
 *   - 6: proof_height -
 *   - 7: proof_init - proof of the initialization the connection on Chain A: `UNINITIALIZED -> INIT`
 *   - 8: proof_client - proof of client state included in message
 *   - 9: proof_consensus - proof of client consensus state
 *   - 10: consensus_height -
 *   - 11: signer -
 *   - 12: host_consensus_state_proof - optional proof data for host state machines that are unable to introspect their own consensus state
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenTry = [
    si_client?: string,
    si_previous_connection?: string,
    a_client_state?: DecodedGoogleProtobufAny,
    a_counterparty?: DecodedIbcCoreConnectionCounterparty,
    sg_delay_period?: CwUint64,
    a_counterparty_versions?: DecodedIbcCoreConnectionVersion[],
    a_proof_height?: DecodedIbcCoreClientHeight,
    atu8_proof_init?: Uint8Array,
    atu8_proof_client?: Uint8Array,
    atu8_proof_consensus?: Uint8Array,
    a_consensus_height?: DecodedIbcCoreClientHeight,
    s_signer?: string,
    atu8_host_consensus_state_proof?: Uint8Array
];
/**
 * Decodes a protobuf ConnectionOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenTry}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenTry: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionMsgConnectionOpenTry;
/**
 * A decoded protobuf ConnectionOpenTry message
 *
 * Tuple where:
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenTryResponse = [];
/**
 * Decodes a protobuf ConnectionOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenTryResponse}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenTryResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ConnectionOpenAck message
 *
 * Tuple where:
 *   - 0: connection_id -
 *   - 1: counterparty_connection_id -
 *   - 2: version -
 *   - 3: client_state -
 *   - 4: proof_height -
 *   - 5: proof_try - proof of the initialization the connection on Chain B: `UNINITIALIZED -> TRYOPEN`
 *   - 6: proof_client - proof of client state included in message
 *   - 7: proof_consensus - proof of client consensus state
 *   - 8: consensus_height -
 *   - 9: signer -
 *   - 10: host_consensus_state_proof - optional proof data for host state machines that are unable to introspect their own consensus state
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenAck = [
    si_connection?: string,
    si_counterparty_connection?: string,
    a_version?: DecodedIbcCoreConnectionVersion,
    a_client_state?: DecodedGoogleProtobufAny,
    a_proof_height?: DecodedIbcCoreClientHeight,
    atu8_proof_try?: Uint8Array,
    atu8_proof_client?: Uint8Array,
    atu8_proof_consensus?: Uint8Array,
    a_consensus_height?: DecodedIbcCoreClientHeight,
    s_signer?: string,
    atu8_host_consensus_state_proof?: Uint8Array
];
/**
 * Decodes a protobuf ConnectionOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenAck}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenAck: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionMsgConnectionOpenAck;
/**
 * A decoded protobuf ConnectionOpenAck message
 *
 * Tuple where:
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenAckResponse = [];
/**
 * Decodes a protobuf ConnectionOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenAckResponse}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenAckResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ConnectionOpenConfirm message
 *
 * Tuple where:
 *   - 0: connection_id -
 *   - 1: proof_ack - proof for the change of the connection state on Chain A: `INIT -> OPEN`
 *   - 2: proof_height -
 *   - 3: signer -
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenConfirm = [
    si_connection?: string,
    atu8_proof_ack?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ConnectionOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenConfirm}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenConfirm: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionMsgConnectionOpenConfirm;
/**
 * A decoded protobuf ConnectionOpenConfirm message
 *
 * Tuple where:
 */
export type DecodedIbcCoreConnectionMsgConnectionOpenConfirmResponse = [];
/**
 * Decodes a protobuf ConnectionOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenConfirmResponse}
 */
export declare const decodeIbcCoreConnectionMsgConnectionOpenConfirmResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the connection parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedIbcCoreConnectionMsgUpdateParams = [
    s_signer?: string,
    a_params?: DecodedIbcCoreConnectionParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgUpdateParams}
 */
export declare const decodeIbcCoreConnectionMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedIbcCoreConnectionMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgUpdateParamsResponse}
 */
export declare const decodeIbcCoreConnectionMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id -
 *   - 1: counterparty -
 *   - 2: version -
 *   - 3: delay_period -
 *   - 4: signer -
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenInit: (g_struct: IbcCoreConnectionMsgConnectionOpenInit) => [client_id?: string, counterparty?: IbcCoreConnectionCounterparty, version?: IbcCoreConnectionVersion, delay_period?: CwUint64, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_INIT = "/ibc.core.connection.v1.MsgConnectionOpenInit";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenInit` - defines the msg sent by an account on Chain A to initialize a connection with Chain B.
 */
export type IbcCoreConnectionMsgConnectionOpenInit = {
    client_id?: string | undefined;
    counterparty?: IbcCoreConnectionCounterparty | undefined;
    version?: IbcCoreConnectionVersion | undefined;
    delay_period?: CwUint64 | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenInitResponse: (g_struct: IbcCoreConnectionMsgConnectionOpenInitResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_INIT_RESPONSE = "/ibc.core.connection.v1.MsgConnectionOpenInitResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenInitResponse` - defines the Msg/ConnectionOpenInit response type.
 */
export type IbcCoreConnectionMsgConnectionOpenInitResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenTry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id -
 *   - 1: previous_connection_id - Deprecated: this field is unused. Crossing hellos are no longer supported in core IBC.
 *   - 2: client_state -
 *   - 3: counterparty -
 *   - 4: delay_period -
 *   - 5: counterparty_versions -
 *   - 6: proof_height -
 *   - 7: proof_init - proof of the initialization the connection on Chain A: `UNINITIALIZED -> INIT`
 *   - 8: proof_client - proof of client state included in message
 *   - 9: proof_consensus - proof of client consensus state
 *   - 10: consensus_height -
 *   - 11: signer -
 *   - 12: host_consensus_state_proof - optional proof data for host state machines that are unable to introspect their own consensus state
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenTry: (g_struct: IbcCoreConnectionMsgConnectionOpenTry) => [client_id?: string, previous_connection_id?: string, client_state?: JsonAny, counterparty?: IbcCoreConnectionCounterparty, delay_period?: CwUint64, counterparty_versions?: IbcCoreConnectionVersion[], proof_height?: IbcCoreClientHeight, proof_init?: Uint8Array, proof_client?: Uint8Array, proof_consensus?: Uint8Array, consensus_height?: IbcCoreClientHeight, signer?: string, host_consensus_state_proof?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_TRY = "/ibc.core.connection.v1.MsgConnectionOpenTry";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenTry` - defines a msg sent by a Relayer to try to open a connection on Chain B.
 */
export type IbcCoreConnectionMsgConnectionOpenTry = {
    client_id?: string | undefined;
    previous_connection_id?: string | undefined;
    client_state?: JsonAny | undefined;
    counterparty?: IbcCoreConnectionCounterparty | undefined;
    delay_period?: CwUint64 | undefined;
    counterparty_versions?: IbcCoreConnectionVersion[] | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    proof_init?: CwBase64 | undefined;
    proof_client?: CwBase64 | undefined;
    proof_consensus?: CwBase64 | undefined;
    consensus_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
    host_consensus_state_proof?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenTryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenTryResponse: (g_struct: IbcCoreConnectionMsgConnectionOpenTryResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_TRY_RESPONSE = "/ibc.core.connection.v1.MsgConnectionOpenTryResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenTryResponse` - defines the Msg/ConnectionOpenTry response type.
 */
export type IbcCoreConnectionMsgConnectionOpenTryResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id -
 *   - 1: counterparty_connection_id -
 *   - 2: version -
 *   - 3: client_state -
 *   - 4: proof_height -
 *   - 5: proof_try - proof of the initialization the connection on Chain B: `UNINITIALIZED -> TRYOPEN`
 *   - 6: proof_client - proof of client state included in message
 *   - 7: proof_consensus - proof of client consensus state
 *   - 8: consensus_height -
 *   - 9: signer -
 *   - 10: host_consensus_state_proof - optional proof data for host state machines that are unable to introspect their own consensus state
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenAck: (g_struct: IbcCoreConnectionMsgConnectionOpenAck) => [connection_id?: string, counterparty_connection_id?: string, version?: IbcCoreConnectionVersion, client_state?: JsonAny, proof_height?: IbcCoreClientHeight, proof_try?: Uint8Array, proof_client?: Uint8Array, proof_consensus?: Uint8Array, consensus_height?: IbcCoreClientHeight, signer?: string, host_consensus_state_proof?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_ACK = "/ibc.core.connection.v1.MsgConnectionOpenAck";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenAck` - defines a msg sent by a Relayer to Chain A to acknowledge the change of connection state to TRYOPEN on Chain B.
 */
export type IbcCoreConnectionMsgConnectionOpenAck = {
    connection_id?: string | undefined;
    counterparty_connection_id?: string | undefined;
    version?: IbcCoreConnectionVersion | undefined;
    client_state?: JsonAny | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    proof_try?: CwBase64 | undefined;
    proof_client?: CwBase64 | undefined;
    proof_consensus?: CwBase64 | undefined;
    consensus_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
    host_consensus_state_proof?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenAckResponse: (g_struct: IbcCoreConnectionMsgConnectionOpenAckResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_ACK_RESPONSE = "/ibc.core.connection.v1.MsgConnectionOpenAckResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenAckResponse` - defines the Msg/ConnectionOpenAck response type.
 */
export type IbcCoreConnectionMsgConnectionOpenAckResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id -
 *   - 1: proof_ack - proof for the change of the connection state on Chain A: `INIT -> OPEN`
 *   - 2: proof_height -
 *   - 3: signer -
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenConfirm: (g_struct: IbcCoreConnectionMsgConnectionOpenConfirm) => [connection_id?: string, proof_ack?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_CONFIRM = "/ibc.core.connection.v1.MsgConnectionOpenConfirm";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenConfirm` - defines a msg sent by a Relayer to Chain B to acknowledge the change of connection state to OPEN on Chain A.
 */
export type IbcCoreConnectionMsgConnectionOpenConfirm = {
    connection_id?: string | undefined;
    proof_ack?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreConnectionMsgConnectionOpenConfirmResponse: (g_struct: IbcCoreConnectionMsgConnectionOpenConfirmResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_CONFIRM_RESPONSE = "/ibc.core.connection.v1.MsgConnectionOpenConfirmResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgConnectionOpenConfirmResponse` - defines the Msg/ConnectionOpenConfirm response type.
 */
export type IbcCoreConnectionMsgConnectionOpenConfirmResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the connection parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructIbcCoreConnectionMsgUpdateParams: (g_struct: IbcCoreConnectionMsgUpdateParams) => [signer?: string, params?: IbcCoreConnectionParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_UPDATE_PARAMS = "/ibc.core.connection.v1.MsgUpdateParams";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgUpdateParams` - defines the sdk.Msg type to update the connection parameters.
 */
export type IbcCoreConnectionMsgUpdateParams = {
    signer?: string | undefined;
    params?: IbcCoreConnectionParams | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreConnectionMsgUpdateParamsResponse: (g_struct: IbcCoreConnectionMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_UPDATE_PARAMS_RESPONSE = "/ibc.core.connection.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.MsgUpdateParamsResponse` - defines the MsgUpdateParams response type.
 */
export type IbcCoreConnectionMsgUpdateParamsResponse = {};
