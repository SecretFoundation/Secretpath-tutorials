import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr, WeakDurationStr } from '../../../../../api/types.js';
import type { CosmosIcs23ProofSpec, DecodedCosmosIcs23ProofSpec } from '../../../../cosmos/ics23/v1/proofs.js';
import type { IbcCoreClientHeight, DecodedIbcCoreClientHeight } from '../../../core/client/v1/client.js';
import type { IbcCoreCommitmentMerkleRoot, DecodedIbcCoreCommitmentMerkleRoot } from '../../../core/commitment/v1/commitment.js';
import type { TendermintTypesSignedHeader, DecodedTendermintTypesSignedHeader } from '../../../../tendermint/types/types.js';
import type { TendermintTypesValidatorSet, DecodedTendermintTypesValidatorSet } from '../../../../tendermint/types/validator.js';
export type EncodedIbcLightclientsTendermintClientState = Encoded<'/ibc.lightclients.tendermint.v1.ClientState'>;
export type EncodedIbcLightclientsTendermintConsensusState = Encoded<'/ibc.lightclients.tendermint.v1.ConsensusState'>;
export type EncodedIbcLightclientsTendermintMisbehaviour = Encoded<'/ibc.lightclients.tendermint.v1.Misbehaviour'>;
export type EncodedIbcLightclientsTendermintHeader = Encoded<'/ibc.lightclients.tendermint.v1.Header'>;
export type EncodedIbcLightclientsTendermintFraction = Encoded<'/ibc.lightclients.tendermint.v1.Fraction'>;
/**
 * Encodes a `ClientState` protobuf message: from Tendermint tracks the current validator set, latest height, and a possible frozen height.
 * @param si_chain - `chain_id`:
 * @param g_trust_level - `trust_level`:
 * @param xt_trusting_period - `trusting_period`: duration of the period since the LatestTimestamp during which the submitted headers are valid for upgrade
 * @param xt_unbonding_period - `unbonding_period`: duration of the staking unbonding period
 * @param xt_max_clock_drift - `max_clock_drift`: defines how much new (untrusted) header's Time can drift into the future.
 * @param g_frozen_height - `frozen_height`: Block height when the client was frozen due to a misbehaviour
 * @param g_latest_height - `latest_height`: Latest height the client was updated to
 * @param a_proof_specs - `proof_specs`: Proof specifications used in verifying counterparty state
 * @param a_upgrade_paths - `upgrade_path`: Path at which next upgraded client will be committed. Each element corresponds to the key for a single CommitmentProof in the chained proof. NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
 * @param b_allow_update_after_expiry - `allow_update_after_expiry`: deprecated
 * @param b_allow_update_after_misbehaviour - `allow_update_after_misbehaviour`: deprecated
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsTendermintClientState: (si_chain?: Opt<string>, atu8_trust_level?: Opt<Encoded<'/ibc.lightclients.tendermint.v1.Fraction'>>, xt_trusting_period?: Opt<number>, xt_unbonding_period?: Opt<number>, xt_max_clock_drift?: Opt<number>, atu8_frozen_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, atu8_latest_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, a_proof_specs?: Opt<Encoded<'/cosmos.ics23.v1.ProofSpec'>[]>, a_upgrade_paths?: Opt<string[]>, b_allow_update_after_expiry?: Opt<boolean | 0 | 1>, b_allow_update_after_misbehaviour?: Opt<boolean | 0 | 1>) => EncodedIbcLightclientsTendermintClientState;
/**
 * Encodes a `ConsensusState` protobuf message: defines the consensus state from Tendermint.
 * @param xt_timestamp - `timestamp`: that corresponds to the block height in which the ConsensusState was stored.
 * @param g_root - `root`: commitment root (i.e app hash)
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsTendermintConsensusState: (xt_timestamp?: Opt<number>, atu8_root?: Opt<Encoded<'/ibc.core.commitment.v1.MerkleRoot'>>, atu8_next_validators_hash?: Opt<Uint8Array>) => EncodedIbcLightclientsTendermintConsensusState;
/**
 * Encodes a `Misbehaviour` protobuf message: a wrapper over two conflicting Headers that implements Misbehaviour interface expected by ICS-02
 * @param si_client - `client_id`: ClientID is deprecated
 * @param g_header_1 - `header_1`:
 * @param g_header_2 - `header_2`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsTendermintMisbehaviour: (si_client?: Opt<string>, atu8_header_1?: Opt<Encoded<'/ibc.lightclients.tendermint.v1.Header'>>, atu8_header_2?: Opt<Encoded<'/ibc.lightclients.tendermint.v1.Header'>>) => EncodedIbcLightclientsTendermintMisbehaviour;
/**
 * Encodes a `Header` protobuf message: defines the Tendermint client consensus Header. It encapsulates all the information necessary to update from a trusted Tendermint ConsensusState. The inclusion of TrustedHeight and TrustedValidators allows this update to process correctly, so long as the ConsensusState for the TrustedHeight exists, this removes race conditions among relayers The SignedHeader and ValidatorSet are the new untrusted update fields for the client. The TrustedHeight is the height of a stored ConsensusState on the client that will be used to verify the new untrusted header. The Trusted ConsensusState must be within the unbonding period of current time in order to correctly verify, and the TrustedValidators must hash to TrustedConsensusState.NextValidatorsHash since that is the last trusted validator set at the TrustedHeight.
 * @param g_signed_header - `signed_header`:
 * @param g_validator_set - `validator_set`:
 * @param g_trusted_height - `trusted_height`:
 * @param g_trusted_validators - `trusted_validators`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsTendermintHeader: (atu8_signed_header?: Opt<Encoded<'/tendermint.types.SignedHeader'>>, atu8_validator_set?: Opt<Encoded<'/tendermint.types.ValidatorSet'>>, atu8_trusted_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, atu8_trusted_validators?: Opt<Encoded<'/tendermint.types.ValidatorSet'>>) => EncodedIbcLightclientsTendermintHeader;
/**
 * Encodes a `Fraction` protobuf message: defines the protobuf message type for tmmath.Fraction that only supports positive values.
 * @param sg_numerator - `numerator`:
 * @param sg_denominator - `denominator`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsTendermintFraction: (sg_numerator?: Opt<WeakUint64Str>, sg_denominator?: Opt<WeakUint64Str>) => EncodedIbcLightclientsTendermintFraction;
/**
 * A decoded protobuf ClientState message
 *
 * Tuple where:
 *   - 0: chain_id -
 *   - 1: trust_level -
 *   - 2: trusting_period - duration of the period since the LatestTimestamp during which the submitted headers are valid for upgrade
 *   - 3: unbonding_period - duration of the staking unbonding period
 *   - 4: max_clock_drift - defines how much new (untrusted) header's Time can drift into the future.
 *   - 5: frozen_height - Block height when the client was frozen due to a misbehaviour
 *   - 6: latest_height - Latest height the client was updated to
 *   - 7: proof_specs - Proof specifications used in verifying counterparty state
 *   - 8: upgrade_path - Path at which next upgraded client will be committed. Each element corresponds to the key for a single CommitmentProof in the chained proof. NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
 *   - 9: allow_update_after_expiry - deprecated
 *   - 10: allow_update_after_misbehaviour - deprecated
 */
export type DecodedIbcLightclientsTendermintClientState = [
    si_chain?: string,
    a_trust_level?: DecodedIbcLightclientsTendermintFraction,
    a_trusting_period?: [
        string,
        number
    ],
    a_unbonding_period?: [
        string,
        number
    ],
    a_max_clock_drift?: [
        string,
        number
    ],
    a_frozen_height?: DecodedIbcCoreClientHeight,
    a_latest_height?: DecodedIbcCoreClientHeight,
    a_proof_specs?: DecodedCosmosIcs23ProofSpec[],
    a_upgrade_paths?: string[],
    b_allow_update_after_expiry?: 0 | 1,
    b_allow_update_after_misbehaviour?: 0 | 1
];
/**
 * Decodes a protobuf ClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsTendermintClientState}
 */
export declare const decodeIbcLightclientsTendermintClientState: (atu8_payload: Uint8Array) => DecodedIbcLightclientsTendermintClientState;
/**
 * A decoded protobuf ConsensusState message
 *
 * Tuple where:
 *   - 0: timestamp - that corresponds to the block height in which the ConsensusState was stored.
 *   - 1: root - commitment root (i.e app hash)
 *   - 2: next_validators_hash -
 */
export type DecodedIbcLightclientsTendermintConsensusState = [
    a_timestamp?: [
        string,
        number
    ],
    a_root?: DecodedIbcCoreCommitmentMerkleRoot,
    atu8_next_validators_hash?: Uint8Array
];
/**
 * Decodes a protobuf ConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsTendermintConsensusState}
 */
export declare const decodeIbcLightclientsTendermintConsensusState: (atu8_payload: Uint8Array) => DecodedIbcLightclientsTendermintConsensusState;
/**
 * A decoded protobuf Misbehaviour message
 *
 * Tuple where:
 *   - 0: client_id - ClientID is deprecated
 *   - 1: header_1 -
 *   - 2: header_2 -
 */
export type DecodedIbcLightclientsTendermintMisbehaviour = [
    si_client?: string,
    a_header_1?: DecodedIbcLightclientsTendermintHeader,
    a_header_2?: DecodedIbcLightclientsTendermintHeader
];
/**
 * Decodes a protobuf Misbehaviour message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsTendermintMisbehaviour}
 */
export declare const decodeIbcLightclientsTendermintMisbehaviour: (atu8_payload: Uint8Array) => DecodedIbcLightclientsTendermintMisbehaviour;
/**
 * A decoded protobuf Header message
 *
 * Tuple where:
 *   - 0: signed_header -
 *   - 1: validator_set -
 *   - 2: trusted_height -
 *   - 3: trusted_validators -
 */
export type DecodedIbcLightclientsTendermintHeader = [
    a_signed_header?: DecodedTendermintTypesSignedHeader,
    a_validator_set?: DecodedTendermintTypesValidatorSet,
    a_trusted_height?: DecodedIbcCoreClientHeight,
    a_trusted_validators?: DecodedTendermintTypesValidatorSet
];
/**
 * Decodes a protobuf Header message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsTendermintHeader}
 */
export declare const decodeIbcLightclientsTendermintHeader: (atu8_payload: Uint8Array) => DecodedIbcLightclientsTendermintHeader;
/**
 * A decoded protobuf Fraction message
 *
 * Tuple where:
 *   - 0: numerator -
 *   - 1: denominator -
 */
export type DecodedIbcLightclientsTendermintFraction = [
    sg_numerator?: CwUint64,
    sg_denominator?: CwUint64
];
/**
 * Decodes a protobuf Fraction message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsTendermintFraction}
 */
export declare const decodeIbcLightclientsTendermintFraction: (atu8_payload: Uint8Array) => DecodedIbcLightclientsTendermintFraction;
/**
 * Destructures the fields of a {@link IbcLightclientsTendermintClientState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain_id -
 *   - 1: trust_level -
 *   - 2: trusting_period - duration of the period since the LatestTimestamp during which the submitted headers are valid for upgrade
 *   - 3: unbonding_period - duration of the staking unbonding period
 *   - 4: max_clock_drift - defines how much new (untrusted) header's Time can drift into the future.
 *   - 5: frozen_height - Block height when the client was frozen due to a misbehaviour
 *   - 6: latest_height - Latest height the client was updated to
 *   - 7: proof_specs - Proof specifications used in verifying counterparty state
 *   - 8: upgrade_path - Path at which next upgraded client will be committed. Each element corresponds to the key for a single CommitmentProof in the chained proof. NOTE: ClientState must stored under `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be stored under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains using the default upgrade module, upgrade_path should be []string{"upgrade", "upgradedIBCState"}`
 *   - 9: allow_update_after_expiry - deprecated
 *   - 10: allow_update_after_misbehaviour - deprecated
 */
export declare const destructIbcLightclientsTendermintClientState: (g_struct: IbcLightclientsTendermintClientState) => [chain_id?: string, trust_level?: IbcLightclientsTendermintFraction, trusting_period?: number, unbonding_period?: number, max_clock_drift?: number, frozen_height?: IbcCoreClientHeight, latest_height?: IbcCoreClientHeight, proof_specs?: CosmosIcs23ProofSpec[], upgrade_path?: string[], allow_update_after_expiry?: boolean, allow_update_after_misbehaviour?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_TENDERMINT_CLIENT_STATE = "/ibc.lightclients.tendermint.v1.ClientState";
/**
 * JSON serialization of `ibc.lightclients.tendermint.v1.ClientState` - from Tendermint tracks the current validator set, latest height, and a possible frozen height.
 */
export type IbcLightclientsTendermintClientState = {
    chain_id?: string | undefined;
    trust_level?: IbcLightclientsTendermintFraction | undefined;
    trusting_period?: WeakDurationStr | undefined;
    unbonding_period?: WeakDurationStr | undefined;
    max_clock_drift?: WeakDurationStr | undefined;
    frozen_height?: IbcCoreClientHeight | undefined;
    latest_height?: IbcCoreClientHeight | undefined;
    proof_specs?: CosmosIcs23ProofSpec[] | undefined;
    upgrade_path?: string[] | undefined;
    allow_update_after_expiry?: boolean | undefined;
    allow_update_after_misbehaviour?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsTendermintFraction} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: numerator -
 *   - 1: denominator -
 */
export declare const destructIbcLightclientsTendermintFraction: (g_struct: IbcLightclientsTendermintFraction) => [numerator?: CwUint64, denominator?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_TENDERMINT_FRACTION = "/ibc.lightclients.tendermint.v1.Fraction";
/**
 * JSON serialization of `ibc.lightclients.tendermint.v1.Fraction` - defines the protobuf message type for tmmath.Fraction that only supports positive values.
 */
export type IbcLightclientsTendermintFraction = {
    numerator?: CwUint64 | undefined;
    denominator?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsTendermintConsensusState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: timestamp - that corresponds to the block height in which the ConsensusState was stored.
 *   - 1: root - commitment root (i.e app hash)
 *   - 2: next_validators_hash -
 */
export declare const destructIbcLightclientsTendermintConsensusState: (g_struct: IbcLightclientsTendermintConsensusState) => [timestamp?: number, root?: IbcCoreCommitmentMerkleRoot, next_validators_hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_TENDERMINT_CONSENSUS_STATE = "/ibc.lightclients.tendermint.v1.ConsensusState";
/**
 * JSON serialization of `ibc.lightclients.tendermint.v1.ConsensusState` - defines the consensus state from Tendermint.
 */
export type IbcLightclientsTendermintConsensusState = {
    timestamp?: WeakTimestampStr | undefined;
    root?: IbcCoreCommitmentMerkleRoot | undefined;
    next_validators_hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsTendermintMisbehaviour} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - ClientID is deprecated
 *   - 1: header_1 -
 *   - 2: header_2 -
 */
export declare const destructIbcLightclientsTendermintMisbehaviour: (g_struct: IbcLightclientsTendermintMisbehaviour) => [client_id?: string, header_1?: IbcLightclientsTendermintHeader, header_2?: IbcLightclientsTendermintHeader];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_TENDERMINT_MISBEHAVIOUR = "/ibc.lightclients.tendermint.v1.Misbehaviour";
/**
 * JSON serialization of `ibc.lightclients.tendermint.v1.Misbehaviour` - a wrapper over two conflicting Headers that implements Misbehaviour interface expected by ICS-02
 */
export type IbcLightclientsTendermintMisbehaviour = {
    client_id?: string | undefined;
    header_1?: IbcLightclientsTendermintHeader | undefined;
    header_2?: IbcLightclientsTendermintHeader | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsTendermintHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signed_header -
 *   - 1: validator_set -
 *   - 2: trusted_height -
 *   - 3: trusted_validators -
 */
export declare const destructIbcLightclientsTendermintHeader: (g_struct: IbcLightclientsTendermintHeader) => [signed_header?: TendermintTypesSignedHeader, validator_set?: TendermintTypesValidatorSet, trusted_height?: IbcCoreClientHeight, trusted_validators?: TendermintTypesValidatorSet];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_TENDERMINT_HEADER = "/ibc.lightclients.tendermint.v1.Header";
/**
 * JSON serialization of `ibc.lightclients.tendermint.v1.Header` - defines the Tendermint client consensus Header. It encapsulates all the information necessary to update from a trusted Tendermint ConsensusState. The inclusion of TrustedHeight and TrustedValidators allows this update to process correctly, so long as the ConsensusState for the TrustedHeight exists, this removes race conditions among relayers The SignedHeader and ValidatorSet are the new untrusted update fields for the client. The TrustedHeight is the height of a stored ConsensusState on the client that will be used to verify the new untrusted header. The Trusted ConsensusState must be within the unbonding period of current time in order to correctly verify, and the TrustedValidators must hash to TrustedConsensusState.NextValidatorsHash since that is the last trusted validator set at the TrustedHeight.
 */
export type IbcLightclientsTendermintHeader = {
    signed_header?: TendermintTypesSignedHeader | undefined;
    validator_set?: TendermintTypesValidatorSet | undefined;
    trusted_height?: IbcCoreClientHeight | undefined;
    trusted_validators?: TendermintTypesValidatorSet | undefined;
};
