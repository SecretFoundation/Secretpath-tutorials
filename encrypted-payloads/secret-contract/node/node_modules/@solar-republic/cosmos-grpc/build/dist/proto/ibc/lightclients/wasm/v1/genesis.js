import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `GenesisState` protobuf message: defines 08-wasm's keeper genesis state
 * @param a_contracts - `contracts`: uploaded light client wasm contracts
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcLightclientsWasmGenesisState = (a_contracts) => Protobuf() // ...
    .B(a_contracts) // Contract[] contracts = 1
    .o;
/**
 * Encodes a `Contract` protobuf message: stores contract code
 * @param atu8_code_bytes - `code_bytes`: contract byte code
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcLightclientsWasmContract = (atu8_code_bytes) => Protobuf() // ...
    .b(atu8_code_bytes) // bytes code_bytes = 1
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsWasmGenesisState}
 */
export const decodeIbcLightclientsWasmGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeIbcLightclientsWasmContract]);
/**
 * Decodes a protobuf Contract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsWasmContract}
 */
export const decodeIbcLightclientsWasmContract = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link IbcLightclientsWasmGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contracts - uploaded light client wasm contracts
 */
export const destructIbcLightclientsWasmGenesisState = (g_struct) => [g_struct.contracts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_WASM_GENESIS_STATE = '/ibc.lightclients.wasm.v1.GenesisState';
/**
 * Destructures the fields of a {@link IbcLightclientsWasmContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_bytes - contract byte code
 */
export const destructIbcLightclientsWasmContract = (g_struct) => [safe_base64_to_bytes(g_struct.code_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_WASM_CONTRACT = '/ibc.lightclients.wasm.v1.Contract';
//# sourceMappingURL=genesis.js.map