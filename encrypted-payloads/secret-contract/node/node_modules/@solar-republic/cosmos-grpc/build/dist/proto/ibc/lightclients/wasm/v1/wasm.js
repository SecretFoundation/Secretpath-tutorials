import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeIbcCoreClientHeight } from '../../../core/client/v1/client.js';
/**
 * Encodes a `ClientState` protobuf message: Wasm light client's Client state
 * @param atu8_data - `data`: bytes encoding the client state of the underlying light client implemented as a Wasm contract.
 * @param atu8_checksum - `checksum`:
 * @param g_latest_height - `latest_height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcLightclientsWasmClientState = (atu8_data, atu8_checksum, atu8_latest_height) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .b(atu8_checksum) // bytes checksum = 2
    .b(atu8_latest_height) // Height latest_height = 3
    .o;
/**
 * Encodes a `ConsensusState` protobuf message: Wasm light client's ConsensusState
 * @param atu8_data - `data`: bytes encoding the consensus state of the underlying light client implemented as a Wasm contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcLightclientsWasmConsensusState = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `ClientMessage` protobuf message: Wasm light client message (either header(s) or misbehaviour)
 * @param atu8_data - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcLightclientsWasmClientMessage = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `Checksums` protobuf message: defines a list of all checksums that are stored Deprecated: This message is deprecated in favor of storing the checksums using a Collections.KeySet.
 * @param a_checksums - `checksums`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcLightclientsWasmChecksums = (a_checksums) => Protobuf() // ...
    .B(a_checksums) // bytes[] checksums = 1
    .o;
/**
 * Decodes a protobuf ClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsWasmClientState}
 */
export const decodeIbcLightclientsWasmClientState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsWasmConsensusState}
 */
export const decodeIbcLightclientsWasmConsensusState = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ClientMessage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsWasmClientMessage}
 */
export const decodeIbcLightclientsWasmClientMessage = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf Checksums message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsWasmChecksums}
 */
export const decodeIbcLightclientsWasmChecksums = (atu8_payload) => decode_protobuf(atu8_payload, [0]);
/**
 * Destructures the fields of a {@link IbcLightclientsWasmClientState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - bytes encoding the client state of the underlying light client implemented as a Wasm contract.
 *   - 1: checksum -
 *   - 2: latest_height -
 */
export const destructIbcLightclientsWasmClientState = (g_struct) => [safe_base64_to_bytes(g_struct.data), safe_base64_to_bytes(g_struct.checksum), g_struct.latest_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_WASM_CLIENT_STATE = '/ibc.lightclients.wasm.v1.ClientState';
/**
 * Destructures the fields of a {@link IbcLightclientsWasmConsensusState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - bytes encoding the consensus state of the underlying light client implemented as a Wasm contract.
 */
export const destructIbcLightclientsWasmConsensusState = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_WASM_CONSENSUS_STATE = '/ibc.lightclients.wasm.v1.ConsensusState';
/**
 * Destructures the fields of a {@link IbcLightclientsWasmClientMessage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 */
export const destructIbcLightclientsWasmClientMessage = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_WASM_CLIENT_MESSAGE = '/ibc.lightclients.wasm.v1.ClientMessage';
/**
 * Destructures the fields of a {@link IbcLightclientsWasmChecksums} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: checksums -
 */
export const destructIbcLightclientsWasmChecksums = (g_struct) => [map(g_struct.checksums, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_WASM_CHECKSUMS = '/ibc.lightclients.wasm.v1.Checksums';
//# sourceMappingURL=wasm.js.map