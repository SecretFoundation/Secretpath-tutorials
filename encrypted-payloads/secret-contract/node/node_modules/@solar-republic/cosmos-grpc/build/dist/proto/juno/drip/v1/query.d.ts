/// <reference types="node" />
import type { Encoded, Opt } from '../../../../api/types.js';
import type { JunoDripParams, DecodedJunoDripParams } from './genesis.js';
export type EncodedJunoDripQueryParamsRequest = Encoded<'/juno.drip.v1.QueryParamsRequest'>;
export type EncodedJunoDripQueryParamsResponse = Encoded<'/juno.drip.v1.QueryParamsResponse'>;
/**
 * Retrieves the Drip module params
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the returned parameter from the module
 */
export declare const queryJunoDripParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoDripQueryParamsResponse>>;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoDripQueryParamsRequest: () => EncodedJunoDripQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: the returned parameter from the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoDripQueryParamsResponse: (atu8_params?: Opt<Encoded<'/juno.drip.v1.Params'>>) => EncodedJunoDripQueryParamsResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedJunoDripQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripQueryParamsRequest}
 */
export declare const decodeJunoDripQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - the returned parameter from the module
 */
export type DecodedJunoDripQueryParamsResponse = [
    a_params?: DecodedJunoDripParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripQueryParamsResponse}
 */
export declare const decodeJunoDripQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedJunoDripQueryParamsResponse;
/**
 * Destructures the fields of a {@link JunoDripQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoDripQueryParamsRequest: (g_struct: JunoDripQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_DRIP_QUERY_PARAMS_REQUEST = "/juno.drip.v1.QueryParamsRequest";
/**
 * JSON serialization of `juno.drip.v1.QueryParamsRequest` - the request type for the Query/Params RPC method.
 */
export type JunoDripQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link JunoDripQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - the returned parameter from the module
 */
export declare const destructJunoDripQueryParamsResponse: (g_struct: JunoDripQueryParamsResponse) => [params?: JunoDripParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_DRIP_QUERY_PARAMS_RESPONSE = "/juno.drip.v1.QueryParamsResponse";
/**
 * JSON serialization of `juno.drip.v1.QueryParamsResponse` - the response type for the Query/Params RPC method.
 */
export type JunoDripQueryParamsResponse = {
    params?: JunoDripParams | undefined;
};
