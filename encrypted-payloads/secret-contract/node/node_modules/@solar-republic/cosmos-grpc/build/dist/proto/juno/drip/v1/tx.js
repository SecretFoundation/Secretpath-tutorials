import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, coins } from '../../../../api/protobuf-writer.js';
import { restful_grpc, restruct_coin } from '../../../../api/transport.js';
import { decodeJunoDripParams } from './genesis.js';
const SR_LCD_JUNO_DRIP_MSG = '/juno/drip/v1/tx/distribute_tokens';
/**
 * Distribute the sent tokens to all stakers in the next block
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender - the bech32 address of message sender.
 * @param a_amounts - the amount being airdropped to stakers
 * @returns an empty tuple
 */
export const submitJunoDripDistributeTokens = restful_grpc((sa_sender, a_amounts) => [SR_LCD_JUNO_DRIP_MSG, {
        sender_address: sa_sender,
        amount: map(a_amounts, restruct_coin),
    }], 1);
/**
 * Encodes a `MsgDistributeTokens` protobuf message: defines a message that registers a Distribution of tokens.
 * @param sa_sender - `sender_address`: the bech32 address of message sender.
 * @param a_amounts - `amount`: the amount being airdropped to stakers
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoDripMsgDistributeTokens = (sa_sender, a_amounts) => Protobuf() // ...
    .s(sa_sender) // string sender_address = 1
    .B(coins(a_amounts)) // Coin[] amount = 2
    .o;
/**
 * Encodes a `MsgDistributeTokensResponse` protobuf message: defines the MsgDistributeTokens response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoDripMsgDistributeTokensResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/auth parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoDripMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoDripMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf DistributeTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgDistributeTokens}
 */
export const decodeJunoDripMsgDistributeTokens = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decode_coin]);
/**
 * Decodes a protobuf DistributeTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgDistributeTokensResponse}
 */
export const decodeJunoDripMsgDistributeTokensResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgUpdateParams}
 */
export const decodeJunoDripMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeJunoDripParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgUpdateParamsResponse}
 */
export const decodeJunoDripMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link JunoDripMsgDistributeTokens} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender_address - the bech32 address of message sender.
 *   - 1: amount - the amount being airdropped to stakers
 */
export const destructJunoDripMsgDistributeTokens = (g_struct) => [g_struct.sender_address, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_DISTRIBUTE_TOKENS = '/juno.drip.v1.MsgDistributeTokens';
/**
 * Destructures the fields of a {@link JunoDripMsgDistributeTokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoDripMsgDistributeTokensResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_DISTRIBUTE_TOKENS_RESPONSE = '/juno.drip.v1.MsgDistributeTokensResponse';
/**
 * Destructures the fields of a {@link JunoDripMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/auth parameters to update. NOTE: All parameters must be supplied.
 */
export const destructJunoDripMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_UPDATE_PARAMS = '/juno.drip.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link JunoDripMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoDripMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_UPDATE_PARAMS_RESPONSE = '/juno.drip.v1.MsgUpdateParamsResponse';
//# sourceMappingURL=tx.js.map