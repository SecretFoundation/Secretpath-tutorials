import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `FeePayContract` protobuf message: This defines the address, balance, and wallet limit of a fee pay contract.
 * @param sa_contract - `contract_address`: The address of the contract.
 * @param sg_balance - `balance`: The ledger balance of the contract.
 * @param sg_wallet_limit - `wallet_limit`: The number of times a wallet may interact with the contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayFeePayContract = (sa_contract, sg_balance, sg_wallet_limit) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .g(sg_balance) // uint64 balance = 2
    .g(sg_wallet_limit) // uint64 wallet_limit = 3
    .o;
/**
 * Encodes a `FeePayWalletUsage` protobuf message: This object is used to store the number of times a wallet has interacted with a contract.
 * @param sa_contract - `contract_address`: The contract address.
 * @param sa_wallet - `wallet_address`: The wallet address.
 * @param sg_uses - `uses`: The number of uses corresponding to a wallet.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayFeePayWalletUsage = (sa_contract, sa_wallet, sg_uses) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_wallet) // string wallet_address = 2
    .g(sg_uses) // uint64 uses = 3
    .o;
/**
 * Decodes a protobuf FeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayFeePayContract}
 */
export const decodeJunoFeepayFeePayContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3]);
/**
 * Decodes a protobuf FeePayWalletUsage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayFeePayWalletUsage}
 */
export const decodeJunoFeepayFeePayWalletUsage = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Destructures the fields of a {@link JunoFeepayFeePayContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - The address of the contract.
 *   - 1: balance - The ledger balance of the contract.
 *   - 2: wallet_limit - The number of times a wallet may interact with the contract.
 */
export const destructJunoFeepayFeePayContract = (g_struct) => [g_struct.contract_address, g_struct.balance, g_struct.wallet_limit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_FEE_PAY_CONTRACT = '/juno.feepay.v1.FeePayContract';
/**
 * Destructures the fields of a {@link JunoFeepayFeePayWalletUsage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - The contract address.
 *   - 1: wallet_address - The wallet address.
 *   - 2: uses - The number of uses corresponding to a wallet.
 */
export const destructJunoFeepayFeePayWalletUsage = (g_struct) => [g_struct.contract_address, g_struct.wallet_address, g_struct.uses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_FEE_PAY_WALLET_USAGE = '/juno.feepay.v1.FeePayWalletUsage';
//# sourceMappingURL=feepay.js.map