import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `FeeShare` protobuf message: defines an instance that organizes fee distribution conditions for the owner of a given smart contract
 * @param sa_contract - `contract_address`: the bech32 address of a registered contract in string form
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same as the contracts admin address.
 * @param sa_withdrawer - `withdrawer_address`: the bech32 address of account receiving the transaction fees.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareFeeShare = (sa_contract, sa_deployer, sa_withdrawer) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_deployer) // string deployer_address = 2
    .s(sa_withdrawer) // string withdrawer_address = 3
    .o;
/**
 * Decodes a protobuf FeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareFeeShare}
 */
export const decodeJunoFeeshareFeeShare = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Destructures the fields of a {@link JunoFeeshareFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 address of a registered contract in string form
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same as the contracts admin address.
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees.
 */
export const destructJunoFeeshareFeeShare = (g_struct) => [g_struct.contract_address, g_struct.deployer_address, g_struct.withdrawer_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_FEE_SHARE = '/juno.feeshare.v1.FeeShare';
//# sourceMappingURL=feeshare.js.map