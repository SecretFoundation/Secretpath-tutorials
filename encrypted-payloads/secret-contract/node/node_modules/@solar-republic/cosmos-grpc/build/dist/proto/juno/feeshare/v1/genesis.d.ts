import type { Encoded, Opt } from '../../../../api/types.js';
import type { JunoFeeshareFeeShare, DecodedJunoFeeshareFeeShare } from './feeshare.js';
export type EncodedJunoFeeshareGenesisState = Encoded<'/juno.feeshare.v1.GenesisState'>;
export type EncodedJunoFeeshareParams = Encoded<'/juno.feeshare.v1.Params'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the module's genesis state.
 * @param g_params - `params`: the feeshare module parameters
 * @param a_fee_shares - `fee_share`: FeeShare is a slice of active registered contracts for fee distribution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareGenesisState: (atu8_params?: Opt<Encoded<'/juno.feeshare.v1.Params'>>, a_fee_shares?: Opt<Encoded<'/juno.feeshare.v1.FeeShare'>[]>) => EncodedJunoFeeshareGenesisState;
/**
 * Encodes a `Params` protobuf message: defines the feeshare module params
 * @param b_enable_fee_share - `enable_fee_share`: enable_feeshare defines a parameter to enable the feeshare module
 * @param s_developer_shares - `developer_shares`: defines the proportion of the transaction fees to be distributed to the registered contract owner
 * @param a_allowed_denoms - `allowed_denoms`: defines the list of denoms that are allowed to be paid to the contract withdraw addresses. If said denom is not in the list, the fees will ONLY be sent to the community pool. If this list is empty, all denoms are allowed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareParams: (b_enable_fee_share?: Opt<boolean | 0 | 1>, s_developer_shares?: Opt<string>, a_allowed_denoms?: Opt<string[]>) => EncodedJunoFeeshareParams;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - the feeshare module parameters
 *   - 1: fee_share - FeeShare is a slice of active registered contracts for fee distribution
 */
export type DecodedJunoFeeshareGenesisState = [
    a_params?: DecodedJunoFeeshareParams,
    a_fee_share?: DecodedJunoFeeshareFeeShare[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareGenesisState}
 */
export declare const decodeJunoFeeshareGenesisState: (atu8_payload: Uint8Array) => DecodedJunoFeeshareGenesisState;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: enable_fee_share - enable_feeshare defines a parameter to enable the feeshare module
 *   - 1: developer_shares - defines the proportion of the transaction fees to be distributed to the registered contract owner
 *   - 2: allowed_denoms - defines the list of denoms that are allowed to be paid to the contract withdraw addresses. If said denom is not in the list, the fees will ONLY be sent to the community pool. If this list is empty, all denoms are allowed.
 */
export type DecodedJunoFeeshareParams = [
    b_enable_fee_share?: 0 | 1,
    s_developer_shares?: string,
    a_allowed_denoms?: string[]
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareParams}
 */
export declare const decodeJunoFeeshareParams: (atu8_payload: Uint8Array) => DecodedJunoFeeshareParams;
/**
 * Destructures the fields of a {@link JunoFeeshareParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: enable_fee_share - enable_feeshare defines a parameter to enable the feeshare module
 *   - 1: developer_shares - defines the proportion of the transaction fees to be distributed to the registered contract owner
 *   - 2: allowed_denoms - defines the list of denoms that are allowed to be paid to the contract withdraw addresses. If said denom is not in the list, the fees will ONLY be sent to the community pool. If this list is empty, all denoms are allowed.
 */
export declare const destructJunoFeeshareParams: (g_struct: JunoFeeshareParams) => [enable_fee_share?: boolean, developer_shares?: string, allowed_denoms?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_PARAMS = "/juno.feeshare.v1.Params";
/**
 * JSON serialization of `juno.feeshare.v1.Params` - defines the feeshare module params
 */
export type JunoFeeshareParams = {
    enable_fee_share?: boolean | undefined;
    developer_shares?: string | undefined;
    allowed_denoms?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - the feeshare module parameters
 *   - 1: fee_share - FeeShare is a slice of active registered contracts for fee distribution
 */
export declare const destructJunoFeeshareGenesisState: (g_struct: JunoFeeshareGenesisState) => [params?: JunoFeeshareParams, fee_share?: JunoFeeshareFeeShare[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_GENESIS_STATE = "/juno.feeshare.v1.GenesisState";
/**
 * JSON serialization of `juno.feeshare.v1.GenesisState` - defines the module's genesis state.
 */
export type JunoFeeshareGenesisState = {
    params?: JunoFeeshareParams | undefined;
    fee_share?: JunoFeeshareFeeShare[] | undefined;
};
