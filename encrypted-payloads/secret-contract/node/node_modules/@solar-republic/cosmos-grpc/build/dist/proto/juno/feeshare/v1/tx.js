import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeJunoFeeshareParams } from './genesis.js';
const SR_LCD_JUNO_FEESHARE_MSG = '/juno/feeshare/v1/tx/';
/**
 * Registers a new contract for receiving transaction fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - in bech32 format
 * @param sa_deployer - the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - the bech32 address of account receiving the transaction fees
 * @returns an empty tuple
 */
export const submitJunoFeeshareRegisterFeeShare = restful_grpc((sa_contract, sa_deployer, sa_withdrawer) => [SR_LCD_JUNO_FEESHARE_MSG + 'register_FeeShare', {
        contract_address: sa_contract,
        deployer_address: sa_deployer,
        withdrawer_address: sa_withdrawer,
    }], 1);
/**
 * Updates the withdrawer address of a FeeShare
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - in bech32 format
 * @param sa_deployer - the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - the bech32 address of account receiving the transaction fees
 * @returns an empty tuple
 */
export const submitJunoFeeshareUpdateFeeShare = restful_grpc((sa_contract, sa_deployer, sa_withdrawer) => [SR_LCD_JUNO_FEESHARE_MSG + 'update_FeeShare', {
        contract_address: sa_contract,
        deployer_address: sa_deployer,
        withdrawer_address: sa_withdrawer,
    }], 1);
/**
 * Cancels a contract's fee registration and further receival of transaction fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - in bech32 format
 * @param sa_deployer - the bech32 address of message sender. It must be the same the contract's admin address
 * @returns an empty tuple
 */
export const submitJunoFeeshareCancelFeeShare = restful_grpc((sa_contract, sa_deployer) => [SR_LCD_JUNO_FEESHARE_MSG + 'cancel_FeeShare', {
        contract_address: sa_contract,
        deployer_address: sa_deployer,
    }], 1);
/**
 * Encodes a `MsgRegisterFeeShare` protobuf message: defines a message that registers a FeeShare
 * @param sa_contract - `contract_address`: in bech32 format
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - `withdrawer_address`: the bech32 address of account receiving the transaction fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgRegisterFeeShare = (sa_contract, sa_deployer, sa_withdrawer) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_deployer) // string deployer_address = 2
    .s(sa_withdrawer) // string withdrawer_address = 3
    .o;
/**
 * Encodes a `MsgRegisterFeeShareResponse` protobuf message: defines the MsgRegisterFeeShare response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgRegisterFeeShareResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateFeeShare` protobuf message: defines a message that updates the withdrawer address for a registered FeeShare
 * @param sa_contract - `contract_address`: in bech32 format
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - `withdrawer_address`: the bech32 address of account receiving the transaction fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgUpdateFeeShare = (sa_contract, sa_deployer, sa_withdrawer) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_deployer) // string deployer_address = 2
    .s(sa_withdrawer) // string withdrawer_address = 3
    .o;
/**
 * Encodes a `MsgUpdateFeeShareResponse` protobuf message: defines the MsgUpdateFeeShare response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgUpdateFeeShareResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCancelFeeShare` protobuf message: defines a message that cancels a registered FeeShare
 * @param sa_contract - `contract_address`: in bech32 format
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same the contract's admin address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgCancelFeeShare = (sa_contract, sa_deployer) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_deployer) // string deployer_address = 2
    .o;
/**
 * Encodes a `MsgCancelFeeShareResponse` protobuf message: defines the MsgCancelFeeShare response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgCancelFeeShareResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/feeshare parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf RegisterFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgRegisterFeeShare}
 */
export const decodeJunoFeeshareMsgRegisterFeeShare = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf RegisterFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgRegisterFeeShareResponse}
 */
export const decodeJunoFeeshareMsgRegisterFeeShareResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateFeeShare}
 */
export const decodeJunoFeeshareMsgUpdateFeeShare = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf UpdateFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateFeeShareResponse}
 */
export const decodeJunoFeeshareMsgUpdateFeeShareResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CancelFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgCancelFeeShare}
 */
export const decodeJunoFeeshareMsgCancelFeeShare = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf CancelFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgCancelFeeShareResponse}
 */
export const decodeJunoFeeshareMsgCancelFeeShareResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateParams}
 */
export const decodeJunoFeeshareMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeJunoFeeshareParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateParamsResponse}
 */
export const decodeJunoFeeshareMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link JunoFeeshareMsgRegisterFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees
 */
export const destructJunoFeeshareMsgRegisterFeeShare = (g_struct) => [g_struct.contract_address, g_struct.deployer_address, g_struct.withdrawer_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_REGISTER_FEE_SHARE = '/juno.feeshare.v1.MsgRegisterFeeShare';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgRegisterFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeeshareMsgRegisterFeeShareResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_REGISTER_FEE_SHARE_RESPONSE = '/juno.feeshare.v1.MsgRegisterFeeShareResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees
 */
export const destructJunoFeeshareMsgUpdateFeeShare = (g_struct) => [g_struct.contract_address, g_struct.deployer_address, g_struct.withdrawer_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_FEE_SHARE = '/juno.feeshare.v1.MsgUpdateFeeShare';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeeshareMsgUpdateFeeShareResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_FEE_SHARE_RESPONSE = '/juno.feeshare.v1.MsgUpdateFeeShareResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgCancelFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 */
export const destructJunoFeeshareMsgCancelFeeShare = (g_struct) => [g_struct.contract_address, g_struct.deployer_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_CANCEL_FEE_SHARE = '/juno.feeshare.v1.MsgCancelFeeShare';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgCancelFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeeshareMsgCancelFeeShareResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_CANCEL_FEE_SHARE_RESPONSE = '/juno.feeshare.v1.MsgCancelFeeShareResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/feeshare parameters to update. NOTE: All parameters must be supplied.
 */
export const destructJunoFeeshareMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_PARAMS = '/juno.feeshare.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeeshareMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_PARAMS_RESPONSE = '/juno.feeshare.v1.MsgUpdateParamsResponse';
//# sourceMappingURL=tx.js.map