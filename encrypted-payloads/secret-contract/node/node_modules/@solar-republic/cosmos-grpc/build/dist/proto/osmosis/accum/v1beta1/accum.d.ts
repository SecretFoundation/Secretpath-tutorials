import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisAccumAccumulatorContent = Encoded<'/osmosis.accum.v1beta1.AccumulatorContent'>;
export type EncodedOsmosisAccumOptions = Encoded<'/osmosis.accum.v1beta1.Options'>;
export type EncodedOsmosisAccumRecord = Encoded<'/osmosis.accum.v1beta1.Record'>;
/**
 * Encodes a `AccumulatorContent` protobuf message: the state-entry for the global accumulator. It contains the name of the global accumulator and the total value of shares belonging to it from all positions.
 * @param a_accum_values - `accum_value`:
 * @param s_total_shares - `total_shares`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisAccumAccumulatorContent: (a_accum_values?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>, s_total_shares?: Opt<string>) => EncodedOsmosisAccumAccumulatorContent;
/**
 * Encodes a `Options` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisAccumOptions: () => EncodedOsmosisAccumOptions;
/**
 * Encodes a `Record` protobuf message: corresponds to an individual position value belonging to the global accumulator.
 * @param s_num_shares - `num_shares`: the number of shares belonging to the position associated with this record.
 * @param a_accum_value_per_shares - `accum_value_per_share`: the subset of coins per shar of the global accumulator value that allows to infer how much a position is entitled to per share that it owns. In the default case with no intervals, this value equals to the global accumulator value at the time of the position creation, the last update or reward claim. In the interval case such as concentrated liquidity, this value equals to the global growth of rewards inside the interval during one of: the time of the position creation, the last update or reward claim. Note, that immediately prior to claiming or updating rewards, this value must be updated to "the growth inside at the time of last update + the growth outside at the time of the current block". This is so that the claiming logic can subtract this updated value from the global accumulator value to get the growth inside the interval from the time of last update up until the current block time.
 * @param a_unclaimed_rewards_totals - `unclaimed_rewards_total`: the total amount of unclaimed rewards that the position is entitled to. This value is updated whenever shares are added or removed from an existing position. We also expose API for manually updating this value for some custom use cases such as merging pre-existing positions into a single one.
 * @param g_options - `options`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisAccumRecord: (s_num_shares?: Opt<string>, a_accum_value_per_shares?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>, a_unclaimed_rewards_totals?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>, atu8_options?: Opt<Encoded<'/osmosis.accum.v1beta1.Options'>>) => EncodedOsmosisAccumRecord;
/**
 * A decoded protobuf AccumulatorContent message
 *
 * Tuple where:
 *   - 0: accum_value -
 *   - 1: total_shares -
 */
export type DecodedOsmosisAccumAccumulatorContent = [
    a_accum_value?: DecodedCosmosBaseDecCoin[],
    s_total_shares?: string
];
/**
 * Decodes a protobuf AccumulatorContent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisAccumAccumulatorContent}
 */
export declare const decodeOsmosisAccumAccumulatorContent: (atu8_payload: Uint8Array) => DecodedOsmosisAccumAccumulatorContent;
/**
 * A decoded protobuf Options message
 *
 * Tuple where:
 */
export type DecodedOsmosisAccumOptions = [];
/**
 * Decodes a protobuf Options message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisAccumOptions}
 */
export declare const decodeOsmosisAccumOptions: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Record message
 *
 * Tuple where:
 *   - 0: num_shares - the number of shares belonging to the position associated with this record.
 *   - 1: accum_value_per_share - the subset of coins per shar of the global accumulator value that allows to infer how much a position is entitled to per share that it owns. In the default case with no intervals, this value equals to the global accumulator value at the time of the position creation, the last update or reward claim. In the interval case such as concentrated liquidity, this value equals to the global growth of rewards inside the interval during one of: the time of the position creation, the last update or reward claim. Note, that immediately prior to claiming or updating rewards, this value must be updated to "the growth inside at the time of last update + the growth outside at the time of the current block". This is so that the claiming logic can subtract this updated value from the global accumulator value to get the growth inside the interval from the time of last update up until the current block time.
 *   - 2: unclaimed_rewards_total - the total amount of unclaimed rewards that the position is entitled to. This value is updated whenever shares are added or removed from an existing position. We also expose API for manually updating this value for some custom use cases such as merging pre-existing positions into a single one.
 *   - 3: options -
 */
export type DecodedOsmosisAccumRecord = [
    s_num_shares?: string,
    a_accum_value_per_share?: DecodedCosmosBaseDecCoin[],
    a_unclaimed_rewards_total?: DecodedCosmosBaseDecCoin[],
    a_options?: DecodedOsmosisAccumOptions
];
/**
 * Decodes a protobuf Record message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisAccumRecord}
 */
export declare const decodeOsmosisAccumRecord: (atu8_payload: Uint8Array) => DecodedOsmosisAccumRecord;
/**
 * Destructures the fields of a {@link OsmosisAccumAccumulatorContent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: accum_value -
 *   - 1: total_shares -
 */
export declare const destructOsmosisAccumAccumulatorContent: (g_struct: OsmosisAccumAccumulatorContent) => [accum_value?: CosmosBaseDecCoin[], total_shares?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_ACCUM_ACCUMULATOR_CONTENT = "/osmosis.accum.v1beta1.AccumulatorContent";
/**
 * JSON serialization of `osmosis.accum.v1beta1.AccumulatorContent` - the state-entry for the global accumulator. It contains the name of the global accumulator and the total value of shares belonging to it from all positions.
 */
export type OsmosisAccumAccumulatorContent = {
    accum_value?: CosmosBaseDecCoin[] | undefined;
    total_shares?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisAccumOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisAccumOptions: (g_struct: OsmosisAccumOptions) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_ACCUM_OPTIONS = "/osmosis.accum.v1beta1.Options";
/**
 * JSON serialization of `osmosis.accum.v1beta1.Options` -
 */
export type OsmosisAccumOptions = {};
/**
 * Destructures the fields of a {@link OsmosisAccumRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: num_shares - the number of shares belonging to the position associated with this record.
 *   - 1: accum_value_per_share - the subset of coins per shar of the global accumulator value that allows to infer how much a position is entitled to per share that it owns. In the default case with no intervals, this value equals to the global accumulator value at the time of the position creation, the last update or reward claim. In the interval case such as concentrated liquidity, this value equals to the global growth of rewards inside the interval during one of: the time of the position creation, the last update or reward claim. Note, that immediately prior to claiming or updating rewards, this value must be updated to "the growth inside at the time of last update + the growth outside at the time of the current block". This is so that the claiming logic can subtract this updated value from the global accumulator value to get the growth inside the interval from the time of last update up until the current block time.
 *   - 2: unclaimed_rewards_total - the total amount of unclaimed rewards that the position is entitled to. This value is updated whenever shares are added or removed from an existing position. We also expose API for manually updating this value for some custom use cases such as merging pre-existing positions into a single one.
 *   - 3: options -
 */
export declare const destructOsmosisAccumRecord: (g_struct: OsmosisAccumRecord) => [num_shares?: string, accum_value_per_share?: CosmosBaseDecCoin[], unclaimed_rewards_total?: CosmosBaseDecCoin[], options?: OsmosisAccumOptions];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_ACCUM_RECORD = "/osmosis.accum.v1beta1.Record";
/**
 * JSON serialization of `osmosis.accum.v1beta1.Record` - corresponds to an individual position value belonging to the global accumulator.
 */
export type OsmosisAccumRecord = {
    num_shares?: string | undefined;
    accum_value_per_share?: CosmosBaseDecCoin[] | undefined;
    unclaimed_rewards_total?: CosmosBaseDecCoin[] | undefined;
    options?: OsmosisAccumOptions | undefined;
};
