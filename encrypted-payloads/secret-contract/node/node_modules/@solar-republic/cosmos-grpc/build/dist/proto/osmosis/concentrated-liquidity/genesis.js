import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { decodeGoogleProtobufAny } from '../../google/protobuf/any.js';
import { decodeOsmosisAccumRecord, decodeOsmosisAccumAccumulatorContent } from '../accum/v1beta1/accum.js';
import { decodeOsmosisConcentratedliquidityIncentiveRecord } from './incentive_record.js';
import { decodeOsmosisConcentratedliquidityParams } from './params.js';
import { decodeOsmosisConcentratedliquidityPosition } from './position.js';
import { decodeOsmosisConcentratedliquidityTickInfo } from './tickInfo.js';
/**
 * Encodes a `FullTick` protobuf message: contains tick index and pool id along with other tick model information.
 * @param sg_pool_id - `pool_id`: pool id associated with the tick.
 * @param sg_tick_index - `tick_index`: tick's index.
 * @param g_info - `info`: tick's info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityFullTick = (sg_pool_id, sg_tick_index, atu8_info) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .g(sg_tick_index) // int32 tick_index = 2
    .b(atu8_info) // TickInfo info = 3
    .o;
/**
 * Encodes a `PoolData` protobuf message: represents a serialized pool along with its ticks for genesis state.
 * @param atu8_pool - `pool`: struct
 * @param a_ticks - `ticks`: pool's ticks
 * @param g_spread_reward_accumulator - `spread_reward_accumulator`:
 * @param a_incentives_accumulators - `incentives_accumulators`:
 * @param a_incentive_records - `incentive_records`: incentive records to be set
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityPoolData = (atu8_pool, a_ticks, atu8_spread_reward_accumulator, a_incentives_accumulators, a_incentive_records) => Protobuf() // ...
    .b(atu8_pool) // Any pool = 1
    .B(a_ticks) // FullTick[] ticks = 2
    .b(atu8_spread_reward_accumulator) // AccumObject spread_reward_accumulator = 3
    .B(a_incentives_accumulators) // AccumObject[] incentives_accumulators = 4
    .B(a_incentive_records) // IncentiveRecord[] incentive_records = 5
    .o;
/**
 * Encodes a `PositionData` protobuf message:
 * @param g_position - `position`:
 * @param sg_lock_id - `lock_id`:
 * @param g_spread_reward_accum_record - `spread_reward_accum_record`:
 * @param a_uptime_accum_records - `uptime_accum_records`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityPositionData = (atu8_position, sg_lock_id, atu8_spread_reward_accum_record, a_uptime_accum_records) => Protobuf() // ...
    .b(atu8_position) // Position position = 1
    .g(sg_lock_id) // uint64 lock_id = 2
    .b(atu8_spread_reward_accum_record) // Record spread_reward_accum_record = 3
    .B(a_uptime_accum_records) // Record[] uptime_accum_records = 4
    .o;
/**
 * Encodes a `GenesisState` protobuf message: defines the concentrated liquidity module's genesis state.
 * @param g_params - `params`: all the parameters of the module
 * @param a_pool_datas - `pool_data`: pool data containining serialized pool struct and ticks.
 * @param a_position_datas - `position_data`:
 * @param sg_next_position_id - `next_position_id`:
 * @param sg_next_incentive_record_id - `next_incentive_record_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityGenesisState = (atu8_params, a_pool_datas, a_position_datas, sg_next_position_id, sg_next_incentive_record_id) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_pool_datas) // PoolData[] pool_data = 2
    .B(a_position_datas) // PositionData[] position_data = 3
    .g(sg_next_position_id) // uint64 next_position_id = 4
    .g(sg_next_incentive_record_id) // uint64 next_incentive_record_id = 5
    .o;
/**
 * Encodes a `AccumObject` protobuf message:
 * @param s_name - `name`: Accumulator's name (pulled from AccumulatorContent)
 * @param g_accum_content - `accum_content`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityAccumObject = (s_name, atu8_accum_content) => Protobuf() // ...
    .s(s_name) // string name = 1
    .b(atu8_accum_content) // AccumulatorContent accum_content = 2
    .o;
/**
 * Decodes a protobuf FullTick message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityFullTick}
 */
export const decodeOsmosisConcentratedliquidityFullTick = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 1], [0, 0, decodeOsmosisConcentratedliquidityTickInfo]);
/**
 * Decodes a protobuf PoolData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPoolData}
 */
export const decodeOsmosisConcentratedliquidityPoolData = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 1, 0, 0], [decodeGoogleProtobufAny, decodeOsmosisConcentratedliquidityFullTick, decodeOsmosisConcentratedliquidityAccumObject, decodeOsmosisConcentratedliquidityAccumObject, decodeOsmosisConcentratedliquidityIncentiveRecord]);
/**
 * Decodes a protobuf PositionData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPositionData}
 */
export const decodeOsmosisConcentratedliquidityPositionData = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 1, 0], [decodeOsmosisConcentratedliquidityPosition, 0, decodeOsmosisAccumRecord, decodeOsmosisAccumRecord]);
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityGenesisState}
 */
export const decodeOsmosisConcentratedliquidityGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 0, 3, 3], [decodeOsmosisConcentratedliquidityParams, decodeOsmosisConcentratedliquidityPoolData, decodeOsmosisConcentratedliquidityPositionData]);
/**
 * Decodes a protobuf AccumObject message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityAccumObject}
 */
export const decodeOsmosisConcentratedliquidityAccumObject = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeOsmosisAccumAccumulatorContent]);
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityFullTick} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id - pool id associated with the tick.
 *   - 1: tick_index - tick's index.
 *   - 2: info - tick's info.
 */
export const destructOsmosisConcentratedliquidityFullTick = (g_struct) => [g_struct.pool_id, g_struct.tick_index, g_struct.info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_FULL_TICK = '/osmosis.concentratedliquidity.v1beta1.FullTick';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPoolData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - struct
 *   - 1: ticks - pool's ticks
 *   - 2: spread_reward_accumulator -
 *   - 3: incentives_accumulators -
 *   - 4: incentive_records - incentive records to be set
 */
export const destructOsmosisConcentratedliquidityPoolData = (g_struct) => [g_struct.pool, g_struct.ticks, g_struct.spread_reward_accumulator, g_struct.incentives_accumulators, g_struct.incentive_records];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POOL_DATA = '/osmosis.concentratedliquidity.v1beta1.PoolData';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityAccumObject} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - Accumulator's name (pulled from AccumulatorContent)
 *   - 1: accum_content -
 */
export const destructOsmosisConcentratedliquidityAccumObject = (g_struct) => [g_struct.name, g_struct.accum_content];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_ACCUM_OBJECT = '/osmosis.concentratedliquidity.v1beta1.AccumObject';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPositionData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position -
 *   - 1: lock_id -
 *   - 2: spread_reward_accum_record -
 *   - 3: uptime_accum_records -
 */
export const destructOsmosisConcentratedliquidityPositionData = (g_struct) => [g_struct.position, g_struct.lock_id, g_struct.spread_reward_accum_record, g_struct.uptime_accum_records];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POSITION_DATA = '/osmosis.concentratedliquidity.v1beta1.PositionData';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - all the parameters of the module
 *   - 1: pool_data - pool data containining serialized pool struct and ticks.
 *   - 2: position_data -
 *   - 3: next_position_id -
 *   - 4: next_incentive_record_id -
 */
export const destructOsmosisConcentratedliquidityGenesisState = (g_struct) => [g_struct.params, g_struct.pool_data, g_struct.position_data, g_struct.next_position_id, g_struct.next_incentive_record_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_GENESIS_STATE = '/osmosis.concentratedliquidity.v1beta1.GenesisState';
//# sourceMappingURL=genesis.js.map