import { parse_duration } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, map, temporal } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message:
 * @param a_authorized_tick_spacings - `authorized_tick_spacing`: an array of uint64s that represents the tick spacing values concentrated-liquidity pools can be created with. For example, an authorized_tick_spacing of [1, 10, 30] allows for pools to be created with tick spacing of 1, 10, or 30.
 * @param a_authorized_spread_factors - `authorized_spread_factors`:
 * @param s_balancer_shares_reward_discount - `balancer_shares_reward_discount`: the rate by which incentives flowing from CL to Balancer pools will be discounted to encourage LPs to migrate. e.g. a rate of 0.05 means Balancer LPs get 5% less incentives than full range CL LPs. This field can range from (0,1]. If set to 1, it indicates that all incentives stay at cl pool.
 * @param a_authorized_quote_denoms - `authorized_quote_denoms`: a list of quote denoms that can be used as token1 when creating a pool. We limit the quote assets to a small set for the purposes of having convinient price increments stemming from tick to price conversion. These increments are in a human readable magnitude only for token1 as a quote. For limit orders in the future, this will be a desirable property in terms of UX as to allow users to set limit orders at prices in terms of token1 (quote asset) that are easy to reason about.
 * @param a_authorized_uptimes - `authorized_uptimes`:
 * @param b_is_permissionless_pool_creation_enabled - `is_permissionless_pool_creation_enabled`: a boolean that determines if concentrated liquidity pools can be created via message. At launch, we consider allowing only governance to create pools, and then later allowing permissionless pool creation by switching this flag to true with a governance proposal.
 * @param a_unrestricted_pool_creator_whitelists - `unrestricted_pool_creator_whitelist`: a list of addresses that are allowed to bypass restrictions on permissionless supercharged pool creation, like pool_creation_enabled, restricted quote assets, no double creation of pools, etc.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityParams = (a_authorized_tick_spacings, a_authorized_spread_factors, s_balancer_shares_reward_discount, a_authorized_quote_denoms, a_authorized_uptimes, b_is_permissionless_pool_creation_enabled, a_unrestricted_pool_creator_whitelists) => Protobuf() // ...
    .G(a_authorized_tick_spacings) // uint64[] authorized_tick_spacing = 1
    .S(a_authorized_spread_factors) // string[] authorized_spread_factors = 2
    .s(s_balancer_shares_reward_discount) // string balancer_shares_reward_discount = 3
    .S(a_authorized_quote_denoms) // string[] authorized_quote_denoms = 4
    .B(map(a_authorized_uptimes, temporal)) // Duration[] authorized_uptimes = 5
    .v(b_is_permissionless_pool_creation_enabled) // boolean is_permissionless_pool_creation_enabled = 6
    .S(a_unrestricted_pool_creator_whitelists) // string[] unrestricted_pool_creator_whitelist = 7
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityParams}
 */
export const decodeOsmosisConcentratedliquidityParams = (atu8_payload) => decode_protobuf(atu8_payload, [2, 4, 5, 4, [3, 1], 1, 4], [0, 0, 0, 0, decode_temporal]);
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authorized_tick_spacing - an array of uint64s that represents the tick spacing values concentrated-liquidity pools can be created with. For example, an authorized_tick_spacing of [1, 10, 30] allows for pools to be created with tick spacing of 1, 10, or 30.
 *   - 1: authorized_spread_factors -
 *   - 2: balancer_shares_reward_discount - the rate by which incentives flowing from CL to Balancer pools will be discounted to encourage LPs to migrate. e.g. a rate of 0.05 means Balancer LPs get 5% less incentives than full range CL LPs. This field can range from (0,1]. If set to 1, it indicates that all incentives stay at cl pool.
 *   - 3: authorized_quote_denoms - a list of quote denoms that can be used as token1 when creating a pool. We limit the quote assets to a small set for the purposes of having convinient price increments stemming from tick to price conversion. These increments are in a human readable magnitude only for token1 as a quote. For limit orders in the future, this will be a desirable property in terms of UX as to allow users to set limit orders at prices in terms of token1 (quote asset) that are easy to reason about.
 *   - 4: authorized_uptimes -
 *   - 5: is_permissionless_pool_creation_enabled - a boolean that determines if concentrated liquidity pools can be created via message. At launch, we consider allowing only governance to create pools, and then later allowing permissionless pool creation by switching this flag to true with a governance proposal.
 *   - 6: unrestricted_pool_creator_whitelist - a list of addresses that are allowed to bypass restrictions on permissionless supercharged pool creation, like pool_creation_enabled, restricted quote assets, no double creation of pools, etc.
 */
export const destructOsmosisConcentratedliquidityParams = (g_struct) => [g_struct.authorized_tick_spacing, g_struct.authorized_spread_factors, g_struct.balancer_shares_reward_discount, g_struct.authorized_quote_denoms, map(g_struct.authorized_uptimes, parse_duration), g_struct.is_permissionless_pool_creation_enabled, g_struct.unrestricted_pool_creator_whitelist];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_PARAMS = '/osmosis.concentratedliquidity.Params';
//# sourceMappingURL=params.js.map