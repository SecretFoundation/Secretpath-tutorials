import { parse_timestamp } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal, any } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `Pool` protobuf message wrapped in the `Any` container:
 * @param sa_address - `address`: pool's address holding all liquidity tokens.
 * @param sa_incentives - `incentives_address`: address holding the incentives liquidity.
 * @param sa_spread_rewards - `spread_rewards_address`: address holding spread rewards from swaps.
 * @param sg_id - `id`:
 * @param s_current_tick_liquidity - `current_tick_liquidity`: Amount of total liquidity
 * @param s_token0 - `token0`:
 * @param s_token1 - `token1`:
 * @param s_current_sqrt_price - `current_sqrt_price`:
 * @param sg_current_tick - `current_tick`:
 * @param sg_tick_spacing - `tick_spacing`: must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 * @param sg_exponent_at_price_one - `exponent_at_price_one`:
 * @param s_spread_factor - `spread_factor`: the ratio that is charged on the amount of token in.
 * @param xt_last_liquidity_update - `last_liquidity_update`: the last time either the pool liquidity or the active tick changed
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyPool = (sa_address, sa_incentives, sa_spread_rewards, sg_id, s_current_tick_liquidity, s_token0, s_token1, s_current_sqrt_price, sg_current_tick, sg_tick_spacing, sg_exponent_at_price_one, s_spread_factor, xt_last_liquidity_update) => any('/osmosis.concentratedliquidity.v1beta1.Pool', Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(sa_incentives) // string incentives_address = 2
    .s(sa_spread_rewards) // string spread_rewards_address = 3
    .g(sg_id) // uint64 id = 4
    .s(s_current_tick_liquidity) // string current_tick_liquidity = 5
    .s(s_token0) // string token0 = 6
    .s(s_token1) // string token1 = 7
    .s(s_current_sqrt_price) // string current_sqrt_price = 8
    .g(sg_current_tick) // int32 current_tick = 9
    .g(sg_tick_spacing) // uint64 tick_spacing = 10
    .g(sg_exponent_at_price_one) // int32 exponent_at_price_one = 11
    .s(s_spread_factor) // string spread_factor = 12
    .b(temporal(xt_last_liquidity_update)) // Timestamp last_liquidity_update = 13
    .o);
/**
 * Encodes a `Pool` protobuf message:
 * @param sa_address - `address`: pool's address holding all liquidity tokens.
 * @param sa_incentives - `incentives_address`: address holding the incentives liquidity.
 * @param sa_spread_rewards - `spread_rewards_address`: address holding spread rewards from swaps.
 * @param sg_id - `id`:
 * @param s_current_tick_liquidity - `current_tick_liquidity`: Amount of total liquidity
 * @param s_token0 - `token0`:
 * @param s_token1 - `token1`:
 * @param s_current_sqrt_price - `current_sqrt_price`:
 * @param sg_current_tick - `current_tick`:
 * @param sg_tick_spacing - `tick_spacing`: must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 * @param sg_exponent_at_price_one - `exponent_at_price_one`:
 * @param s_spread_factor - `spread_factor`: the ratio that is charged on the amount of token in.
 * @param xt_last_liquidity_update - `last_liquidity_update`: the last time either the pool liquidity or the active tick changed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityPool = (sa_address, sa_incentives, sa_spread_rewards, sg_id, s_current_tick_liquidity, s_token0, s_token1, s_current_sqrt_price, sg_current_tick, sg_tick_spacing, sg_exponent_at_price_one, s_spread_factor, xt_last_liquidity_update) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(sa_incentives) // string incentives_address = 2
    .s(sa_spread_rewards) // string spread_rewards_address = 3
    .g(sg_id) // uint64 id = 4
    .s(s_current_tick_liquidity) // string current_tick_liquidity = 5
    .s(s_token0) // string token0 = 6
    .s(s_token1) // string token1 = 7
    .s(s_current_sqrt_price) // string current_sqrt_price = 8
    .g(sg_current_tick) // int32 current_tick = 9
    .g(sg_tick_spacing) // uint64 tick_spacing = 10
    .g(sg_exponent_at_price_one) // int32 exponent_at_price_one = 11
    .s(s_spread_factor) // string spread_factor = 12
    .b(temporal(xt_last_liquidity_update)) // Timestamp last_liquidity_update = 13
    .o;
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPool}
 */
export const decodeOsmosisConcentratedliquidityPool = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 3, 5, 5, 5, 5, 3, 3, 3, 5, [3, 1]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, decode_temporal]);
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - pool's address holding all liquidity tokens.
 *   - 1: incentives_address - address holding the incentives liquidity.
 *   - 2: spread_rewards_address - address holding spread rewards from swaps.
 *   - 3: id -
 *   - 4: current_tick_liquidity - Amount of total liquidity
 *   - 5: token0 -
 *   - 6: token1 -
 *   - 7: current_sqrt_price -
 *   - 8: current_tick -
 *   - 9: tick_spacing - must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 *   - 10: exponent_at_price_one -
 *   - 11: spread_factor - the ratio that is charged on the amount of token in.
 *   - 12: last_liquidity_update - the last time either the pool liquidity or the active tick changed
 */
export const destructOsmosisConcentratedliquidityPool = (g_struct) => [g_struct.address, g_struct.incentives_address, g_struct.spread_rewards_address, g_struct.id, g_struct.current_tick_liquidity, g_struct.token0, g_struct.token1, g_struct.current_sqrt_price, g_struct.current_tick, g_struct.tick_spacing, g_struct.exponent_at_price_one, g_struct.spread_factor, parse_timestamp(g_struct.last_liquidity_update)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POOL = '/osmosis.concentratedliquidity.v1beta1.Pool';
//# sourceMappingURL=pool.js.map