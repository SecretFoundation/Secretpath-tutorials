import type { WeakInt64Str, WeakUint64Str, WeakAccountAddr, SlimCoin, CwInt64, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../api/types.js';
import type { CosmosBaseCoin } from '../../cosmos/base/v1beta1/coin.js';
import type { OsmosisLockupPeriodLock, DecodedOsmosisLockupPeriodLock } from '../lockup/lock.js';
export type EncodedOsmosisConcentratedliquidityPosition = Encoded<'/osmosis.concentratedliquidity.v1beta1.Position'>;
export type EncodedOsmosisConcentratedliquidityFullPositionBreakdown = Encoded<'/osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown'>;
export type EncodedOsmosisConcentratedliquidityPositionWithPeriodLock = Encoded<'/osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock'>;
/**
 * Encodes a `Position` protobuf message: contains position's id, address, pool id, lower tick, upper tick join time, and liquidity.
 * @param sg_position_id - `position_id`:
 * @param sa_address - `address`:
 * @param sg_pool_id - `pool_id`:
 * @param sg_lower_tick - `lower_tick`:
 * @param sg_upper_tick - `upper_tick`:
 * @param xt_join_time - `join_time`:
 * @param s_liquidity - `liquidity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityPosition: (sg_position_id?: Opt<WeakUint64Str>, sa_address?: Opt<WeakAccountAddr>, sg_pool_id?: Opt<WeakUint64Str>, sg_lower_tick?: Opt<WeakInt64Str>, sg_upper_tick?: Opt<WeakInt64Str>, xt_join_time?: Opt<number>, s_liquidity?: Opt<string>) => EncodedOsmosisConcentratedliquidityPosition;
/**
 * Encodes a `FullPositionBreakdown` protobuf message: returns: - the position itself - the amount the position translates in terms of asset0 and asset1 - the amount of claimable fees - the amount of claimable incentives - the amount of incentives that would be forfeited if the position was closed now
 * @param g_position - `position`:
 * @param a_asset0 - `asset0`:
 * @param a_asset1 - `asset1`:
 * @param a_claimable_spread_rewards - `claimable_spread_rewards`:
 * @param a_claimable_incentives - `claimable_incentives`:
 * @param a_forfeited_incentives - `forfeited_incentives`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityFullPositionBreakdown: (atu8_position?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.Position'>>, a_asset0?: Opt<SlimCoin>, a_asset1?: Opt<SlimCoin>, a_claimable_spread_rewards?: Opt<SlimCoin[]>, a_claimable_incentives?: Opt<SlimCoin[]>, a_forfeited_incentives?: Opt<SlimCoin[]>) => EncodedOsmosisConcentratedliquidityFullPositionBreakdown;
/**
 * Encodes a `PositionWithPeriodLock` protobuf message:
 * @param g_position - `position`:
 * @param g_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityPositionWithPeriodLock: (atu8_position?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.Position'>>, atu8_locks?: Opt<Encoded<'/osmosis.lockup.PeriodLock'>>) => EncodedOsmosisConcentratedliquidityPositionWithPeriodLock;
/**
 * A decoded protobuf Position message
 *
 * Tuple where:
 *   - 0: position_id -
 *   - 1: address -
 *   - 2: pool_id -
 *   - 3: lower_tick -
 *   - 4: upper_tick -
 *   - 5: join_time -
 *   - 6: liquidity -
 */
export type DecodedOsmosisConcentratedliquidityPosition = [
    sg_position_id?: CwUint64,
    sa_address?: CwAccountAddr,
    sg_pool_id?: CwUint64,
    sg_lower_tick?: CwInt64,
    sg_upper_tick?: CwInt64,
    a_join_time?: [
        string,
        number
    ],
    s_liquidity?: string
];
/**
 * Decodes a protobuf Position message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPosition}
 */
export declare const decodeOsmosisConcentratedliquidityPosition: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityPosition;
/**
 * A decoded protobuf FullPositionBreakdown message
 *
 * Tuple where:
 *   - 0: position -
 *   - 1: asset0 -
 *   - 2: asset1 -
 *   - 3: claimable_spread_rewards -
 *   - 4: claimable_incentives -
 *   - 5: forfeited_incentives -
 */
export type DecodedOsmosisConcentratedliquidityFullPositionBreakdown = [
    a_position?: DecodedOsmosisConcentratedliquidityPosition,
    a_asset0?: [
        string,
        string
    ],
    a_asset1?: [
        string,
        string
    ],
    a_claimable_spread_rewards?: [
        string,
        string
    ][],
    a_claimable_incentives?: [
        string,
        string
    ][],
    a_forfeited_incentives?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf FullPositionBreakdown message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityFullPositionBreakdown}
 */
export declare const decodeOsmosisConcentratedliquidityFullPositionBreakdown: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityFullPositionBreakdown;
/**
 * A decoded protobuf PositionWithPeriodLock message
 *
 * Tuple where:
 *   - 0: position -
 *   - 1: locks -
 */
export type DecodedOsmosisConcentratedliquidityPositionWithPeriodLock = [
    a_position?: DecodedOsmosisConcentratedliquidityPosition,
    a_locks?: DecodedOsmosisLockupPeriodLock
];
/**
 * Decodes a protobuf PositionWithPeriodLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPositionWithPeriodLock}
 */
export declare const decodeOsmosisConcentratedliquidityPositionWithPeriodLock: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityPositionWithPeriodLock;
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: address -
 *   - 2: pool_id -
 *   - 3: lower_tick -
 *   - 4: upper_tick -
 *   - 5: join_time -
 *   - 6: liquidity -
 */
export declare const destructOsmosisConcentratedliquidityPosition: (g_struct: OsmosisConcentratedliquidityPosition) => [position_id?: CwUint64, address?: CwAccountAddr, pool_id?: CwUint64, lower_tick?: CwInt64, upper_tick?: CwInt64, join_time?: number, liquidity?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POSITION = "/osmosis.concentratedliquidity.v1beta1.Position";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.Position` - contains position's id, address, pool id, lower tick, upper tick join time, and liquidity.
 */
export type OsmosisConcentratedliquidityPosition = {
    position_id?: CwUint64 | undefined;
    address?: CwAccountAddr | undefined;
    pool_id?: CwUint64 | undefined;
    lower_tick?: CwInt64 | undefined;
    upper_tick?: CwInt64 | undefined;
    join_time?: WeakTimestampStr | undefined;
    liquidity?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityFullPositionBreakdown} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position -
 *   - 1: asset0 -
 *   - 2: asset1 -
 *   - 3: claimable_spread_rewards -
 *   - 4: claimable_incentives -
 *   - 5: forfeited_incentives -
 */
export declare const destructOsmosisConcentratedliquidityFullPositionBreakdown: (g_struct: OsmosisConcentratedliquidityFullPositionBreakdown) => [position?: OsmosisConcentratedliquidityPosition, asset0?: CosmosBaseCoin, asset1?: CosmosBaseCoin, claimable_spread_rewards?: CosmosBaseCoin[], claimable_incentives?: CosmosBaseCoin[], forfeited_incentives?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_FULL_POSITION_BREAKDOWN = "/osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown` - returns: - the position itself - the amount the position translates in terms of asset0 and asset1 - the amount of claimable fees - the amount of claimable incentives - the amount of incentives that would be forfeited if the position was closed now
 */
export type OsmosisConcentratedliquidityFullPositionBreakdown = {
    position?: OsmosisConcentratedliquidityPosition | undefined;
    asset0?: CosmosBaseCoin | undefined;
    asset1?: CosmosBaseCoin | undefined;
    claimable_spread_rewards?: CosmosBaseCoin[] | undefined;
    claimable_incentives?: CosmosBaseCoin[] | undefined;
    forfeited_incentives?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPositionWithPeriodLock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position -
 *   - 1: locks -
 */
export declare const destructOsmosisConcentratedliquidityPositionWithPeriodLock: (g_struct: OsmosisConcentratedliquidityPositionWithPeriodLock) => [position?: OsmosisConcentratedliquidityPosition, locks?: OsmosisLockupPeriodLock];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POSITION_WITH_PERIOD_LOCK = "/osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock` -
 */
export type OsmosisConcentratedliquidityPositionWithPeriodLock = {
    position?: OsmosisConcentratedliquidityPosition | undefined;
    locks?: OsmosisLockupPeriodLock | undefined;
};
