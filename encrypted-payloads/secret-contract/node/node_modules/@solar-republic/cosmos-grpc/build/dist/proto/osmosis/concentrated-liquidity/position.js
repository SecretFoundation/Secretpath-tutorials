import { parse_timestamp } from '../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal, coin, coins } from '../../../api/protobuf-writer.js';
import { decodeOsmosisLockupPeriodLock } from '../lockup/lock.js';
/**
 * Encodes a `Position` protobuf message: contains position's id, address, pool id, lower tick, upper tick join time, and liquidity.
 * @param sg_position_id - `position_id`:
 * @param sa_address - `address`:
 * @param sg_pool_id - `pool_id`:
 * @param sg_lower_tick - `lower_tick`:
 * @param sg_upper_tick - `upper_tick`:
 * @param xt_join_time - `join_time`:
 * @param s_liquidity - `liquidity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityPosition = (sg_position_id, sa_address, sg_pool_id, sg_lower_tick, sg_upper_tick, xt_join_time, s_liquidity) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(sa_address) // string address = 2
    .g(sg_pool_id) // uint64 pool_id = 3
    .g(sg_lower_tick) // int32 lower_tick = 4
    .g(sg_upper_tick) // int32 upper_tick = 5
    .b(temporal(xt_join_time)) // Timestamp join_time = 6
    .s(s_liquidity) // string liquidity = 7
    .o;
/**
 * Encodes a `FullPositionBreakdown` protobuf message: returns: - the position itself - the amount the position translates in terms of asset0 and asset1 - the amount of claimable fees - the amount of claimable incentives - the amount of incentives that would be forfeited if the position was closed now
 * @param g_position - `position`:
 * @param a_asset0 - `asset0`:
 * @param a_asset1 - `asset1`:
 * @param a_claimable_spread_rewards - `claimable_spread_rewards`:
 * @param a_claimable_incentives - `claimable_incentives`:
 * @param a_forfeited_incentives - `forfeited_incentives`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityFullPositionBreakdown = (atu8_position, a_asset0, a_asset1, a_claimable_spread_rewards, a_claimable_incentives, a_forfeited_incentives) => Protobuf() // ...
    .b(atu8_position) // Position position = 1
    .b(coin(a_asset0)) // Coin asset0 = 2
    .b(coin(a_asset1)) // Coin asset1 = 3
    .B(coins(a_claimable_spread_rewards)) // Coin[] claimable_spread_rewards = 4
    .B(coins(a_claimable_incentives)) // Coin[] claimable_incentives = 5
    .B(coins(a_forfeited_incentives)) // Coin[] forfeited_incentives = 6
    .o;
/**
 * Encodes a `PositionWithPeriodLock` protobuf message:
 * @param g_position - `position`:
 * @param g_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityPositionWithPeriodLock = (atu8_position, atu8_locks) => Protobuf() // ...
    .b(atu8_position) // Position position = 1
    .b(atu8_locks) // PeriodLock locks = 2
    .o;
/**
 * Decodes a protobuf Position message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPosition}
 */
export const decodeOsmosisConcentratedliquidityPosition = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 3, 3, 3, [3, 1], 5], [0, 0, 0, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf FullPositionBreakdown message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityFullPositionBreakdown}
 */
export const decodeOsmosisConcentratedliquidityFullPositionBreakdown = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 0, 0, 0], [decodeOsmosisConcentratedliquidityPosition, decode_coin, decode_coin, decode_coin, decode_coin, decode_coin]);
/**
 * Decodes a protobuf PositionWithPeriodLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPositionWithPeriodLock}
 */
export const decodeOsmosisConcentratedliquidityPositionWithPeriodLock = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeOsmosisConcentratedliquidityPosition, decodeOsmosisLockupPeriodLock]);
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: address -
 *   - 2: pool_id -
 *   - 3: lower_tick -
 *   - 4: upper_tick -
 *   - 5: join_time -
 *   - 6: liquidity -
 */
export const destructOsmosisConcentratedliquidityPosition = (g_struct) => [g_struct.position_id, g_struct.address, g_struct.pool_id, g_struct.lower_tick, g_struct.upper_tick, parse_timestamp(g_struct.join_time), g_struct.liquidity];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POSITION = '/osmosis.concentratedliquidity.v1beta1.Position';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityFullPositionBreakdown} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position -
 *   - 1: asset0 -
 *   - 2: asset1 -
 *   - 3: claimable_spread_rewards -
 *   - 4: claimable_incentives -
 *   - 5: forfeited_incentives -
 */
export const destructOsmosisConcentratedliquidityFullPositionBreakdown = (g_struct) => [g_struct.position, g_struct.asset0, g_struct.asset1, g_struct.claimable_spread_rewards, g_struct.claimable_incentives, g_struct.forfeited_incentives];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_FULL_POSITION_BREAKDOWN = '/osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPositionWithPeriodLock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position -
 *   - 1: locks -
 */
export const destructOsmosisConcentratedliquidityPositionWithPeriodLock = (g_struct) => [g_struct.position, g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POSITION_WITH_PERIOD_LOCK = '/osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock';
//# sourceMappingURL=position.js.map