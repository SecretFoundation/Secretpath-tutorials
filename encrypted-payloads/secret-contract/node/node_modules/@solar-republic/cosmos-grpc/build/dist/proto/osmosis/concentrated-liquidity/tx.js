import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `MsgCreatePosition` protobuf message: ===================== MsgCreatePosition
 * @param sg_pool_id - `pool_id`:
 * @param sa_sender - `sender`:
 * @param sg_lower_tick - `lower_tick`:
 * @param sg_upper_tick - `upper_tick`:
 * @param a_tokens_provideds - `tokens_provided`: the amount of tokens provided for the position. It must at a minimum be of length 1 (for a single sided position) and at a maximum be of length 2 (for a position that straddles the current tick).
 * @param s_token_min_amount0 - `token_min_amount0`:
 * @param s_token_min_amount1 - `token_min_amount1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgCreatePosition = (sg_pool_id, sa_sender, sg_lower_tick, sg_upper_tick, a_tokens_provideds, s_token_min_amount0, s_token_min_amount1) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(sa_sender) // string sender = 2
    .g(sg_lower_tick) // int32 lower_tick = 3
    .g(sg_upper_tick) // int32 upper_tick = 4
    .B(coins(a_tokens_provideds)) // Coin[] tokens_provided = 5
    .s(s_token_min_amount0) // string token_min_amount0 = 6
    .s(s_token_min_amount1) // string token_min_amount1 = 7
    .o;
/**
 * Encodes a `MsgCreatePositionResponse` protobuf message:
 * @param sg_position_id - `position_id`:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @param s_liquidity_created - `liquidity_created`:
 * @param sg_lower_tick - `lower_tick`: the lower and upper tick are in the response because there are instances in which multiple ticks represent the same price, so we may move their provided tick to the canonical tick that represents the same price.
 * @param sg_upper_tick - `upper_tick`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgCreatePositionResponse = (sg_position_id, s_amount0, s_amount1, s_liquidity_created, sg_lower_tick, sg_upper_tick) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(s_amount0) // string amount0 = 2
    .s(s_amount1) // string amount1 = 3
    .s(s_liquidity_created, 5) // string liquidity_created = 5
    .g(sg_lower_tick, 6) // int32 lower_tick = 6
    .g(sg_upper_tick, 7) // int32 upper_tick = 7
    .o;
/**
 * Encodes a `MsgAddToPosition` protobuf message: ===================== MsgAddToPosition
 * @param sg_position_id - `position_id`:
 * @param sa_sender - `sender`:
 * @param s_amount0 - `amount0`: represents the amount of token0 willing to put in.
 * @param s_amount1 - `amount1`: represents the amount of token1 willing to put in.
 * @param s_token_min_amount0 - `token_min_amount0`: represents the minimum amount of token0 desired from the new position being created. Note that this field indicates the min amount0 corresponding to the liquidity that is being added, not the total liquidity of the position.
 * @param s_token_min_amount1 - `token_min_amount1`: represents the minimum amount of token1 desired from the new position being created. Note that this field indicates the min amount1 corresponding to the liquidity that is being added, not the total liquidity of the position.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgAddToPosition = (sg_position_id, sa_sender, s_amount0, s_amount1, s_token_min_amount0, s_token_min_amount1) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(sa_sender) // string sender = 2
    .s(s_amount0) // string amount0 = 3
    .s(s_amount1) // string amount1 = 4
    .s(s_token_min_amount0) // string token_min_amount0 = 5
    .s(s_token_min_amount1) // string token_min_amount1 = 6
    .o;
/**
 * Encodes a `MsgAddToPositionResponse` protobuf message:
 * @param sg_position_id - `position_id`:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgAddToPositionResponse = (sg_position_id, s_amount0, s_amount1) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(s_amount0) // string amount0 = 2
    .s(s_amount1) // string amount1 = 3
    .o;
/**
 * Encodes a `MsgWithdrawPosition` protobuf message: ===================== MsgWithdrawPosition
 * @param sg_position_id - `position_id`:
 * @param sa_sender - `sender`:
 * @param s_liquidity_amount - `liquidity_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgWithdrawPosition = (sg_position_id, sa_sender, s_liquidity_amount) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(sa_sender) // string sender = 2
    .s(s_liquidity_amount) // string liquidity_amount = 3
    .o;
/**
 * Encodes a `MsgWithdrawPositionResponse` protobuf message:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgWithdrawPositionResponse = (s_amount0, s_amount1) => Protobuf() // ...
    .s(s_amount0) // string amount0 = 1
    .s(s_amount1) // string amount1 = 2
    .o;
/**
 * Encodes a `MsgCollectSpreadRewards` protobuf message: ===================== MsgCollectSpreadRewards
 * @param a_position_ids - `position_ids`:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgCollectSpreadRewards = (a_position_ids, sa_sender) => Protobuf() // ...
    .G(a_position_ids) // uint64[] position_ids = 1
    .s(sa_sender) // string sender = 2
    .o;
/**
 * Encodes a `MsgCollectSpreadRewardsResponse` protobuf message:
 * @param a_collected_spread_rewards - `collected_spread_rewards`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgCollectSpreadRewardsResponse = (a_collected_spread_rewards) => Protobuf() // ...
    .B(coins(a_collected_spread_rewards)) // Coin[] collected_spread_rewards = 1
    .o;
/**
 * Encodes a `MsgCollectIncentives` protobuf message: ===================== MsgCollectIncentives
 * @param a_position_ids - `position_ids`:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgCollectIncentives = (a_position_ids, sa_sender) => Protobuf() // ...
    .G(a_position_ids) // uint64[] position_ids = 1
    .s(sa_sender) // string sender = 2
    .o;
/**
 * Encodes a `MsgCollectIncentivesResponse` protobuf message:
 * @param a_collected_incentives - `collected_incentives`:
 * @param a_forfeited_incentives - `forfeited_incentives`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgCollectIncentivesResponse = (a_collected_incentives, a_forfeited_incentives) => Protobuf() // ...
    .B(coins(a_collected_incentives)) // Coin[] collected_incentives = 1
    .B(coins(a_forfeited_incentives)) // Coin[] forfeited_incentives = 2
    .o;
/**
 * Encodes a `MsgFungifyChargedPositions` protobuf message: ===================== MsgFungifyChargedPositions
 * @param a_position_ids - `position_ids`:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgFungifyChargedPositions = (a_position_ids, sa_sender) => Protobuf() // ...
    .G(a_position_ids) // uint64[] position_ids = 1
    .s(sa_sender) // string sender = 2
    .o;
/**
 * Encodes a `MsgFungifyChargedPositionsResponse` protobuf message:
 * @param sg_new_position_id - `new_position_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgFungifyChargedPositionsResponse = (sg_new_position_id) => Protobuf() // ...
    .g(sg_new_position_id) // uint64 new_position_id = 1
    .o;
/**
 * Encodes a `MsgTransferPositions` protobuf message: ===================== MsgTransferPositions
 * @param a_position_ids - `position_ids`:
 * @param sa_sender - `sender`:
 * @param sa_new_owner - `new_owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgTransferPositions = (a_position_ids, sa_sender, sa_new_owner) => Protobuf() // ...
    .G(a_position_ids) // uint64[] position_ids = 1
    .s(sa_sender) // string sender = 2
    .s(sa_new_owner) // string new_owner = 3
    .o;
/**
 * Encodes a `MsgTransferPositionsResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityMsgTransferPositionsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf CreatePosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgCreatePosition}
 */
export const decodeOsmosisConcentratedliquidityMsgCreatePosition = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 3, 3, 0, 5, 5], [0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf CreatePosition message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgCreatePositionResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgCreatePositionResponse = ((atu8_payload, [sg_position_id, s_amount0, s_amount1, , s_liquidity_created, sg_lower_tick, sg_upper_tick] = decode_protobuf(atu8_payload, [3, 5, 5, 0, 5, 3, 3])) => [sg_position_id, s_amount0, s_amount1, __UNDEFINED, s_liquidity_created, sg_lower_tick, sg_upper_tick]);
/**
 * Decodes a protobuf AddToPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgAddToPosition}
 */
export const decodeOsmosisConcentratedliquidityMsgAddToPosition = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 5, 5, 5]);
/**
 * Decodes a protobuf AddToPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgAddToPositionResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgAddToPositionResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf WithdrawPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgWithdrawPosition}
 */
export const decodeOsmosisConcentratedliquidityMsgWithdrawPosition = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf WithdrawPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgWithdrawPositionResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgWithdrawPositionResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf CollectSpreadRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgCollectSpreadRewards}
 */
export const decodeOsmosisConcentratedliquidityMsgCollectSpreadRewards = (atu8_payload) => decode_protobuf(atu8_payload, [2, 5]);
/**
 * Decodes a protobuf CollectSpreadRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgCollectSpreadRewardsResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgCollectSpreadRewardsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf CollectIncentives message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgCollectIncentives}
 */
export const decodeOsmosisConcentratedliquidityMsgCollectIncentives = (atu8_payload) => decode_protobuf(atu8_payload, [2, 5]);
/**
 * Decodes a protobuf CollectIncentives message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgCollectIncentivesResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgCollectIncentivesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0], [decode_coin, decode_coin]);
/**
 * Decodes a protobuf FungifyChargedPositions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgFungifyChargedPositions}
 */
export const decodeOsmosisConcentratedliquidityMsgFungifyChargedPositions = (atu8_payload) => decode_protobuf(atu8_payload, [2, 5]);
/**
 * Decodes a protobuf FungifyChargedPositions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgFungifyChargedPositionsResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgFungifyChargedPositionsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf TransferPositions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgTransferPositions}
 */
export const decodeOsmosisConcentratedliquidityMsgTransferPositions = (atu8_payload) => decode_protobuf(atu8_payload, [2, 5, 5]);
/**
 * Decodes a protobuf TransferPositions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityMsgTransferPositionsResponse}
 */
export const decodeOsmosisConcentratedliquidityMsgTransferPositionsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgCreatePosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: sender -
 *   - 2: lower_tick -
 *   - 3: upper_tick -
 *   - 4: tokens_provided - the amount of tokens provided for the position. It must at a minimum be of length 1 (for a single sided position) and at a maximum be of length 2 (for a position that straddles the current tick).
 *   - 5: token_min_amount0 -
 *   - 6: token_min_amount1 -
 */
export const destructOsmosisConcentratedliquidityMsgCreatePosition = (g_struct) => [g_struct.pool_id, g_struct.sender, g_struct.lower_tick, g_struct.upper_tick, g_struct.tokens_provided, g_struct.token_min_amount0, g_struct.token_min_amount1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_CREATE_POSITION = '/osmosis.concentratedliquidity.v1beta1.MsgCreatePosition';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgCreatePositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: amount0 -
 *   - 2: amount1 -
 *   - 4: liquidity_created -
 *   - 5: lower_tick - the lower and upper tick are in the response because there are instances in which multiple ticks represent the same price, so we may move their provided tick to the canonical tick that represents the same price.
 *   - 6: upper_tick -
 */
export const destructOsmosisConcentratedliquidityMsgCreatePositionResponse = (g_struct) => [g_struct.position_id, g_struct.amount0, g_struct.amount1, __UNDEFINED, g_struct.liquidity_created, g_struct.lower_tick, g_struct.upper_tick];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_CREATE_POSITION_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgAddToPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: sender -
 *   - 2: amount0 - represents the amount of token0 willing to put in.
 *   - 3: amount1 - represents the amount of token1 willing to put in.
 *   - 4: token_min_amount0 - represents the minimum amount of token0 desired from the new position being created. Note that this field indicates the min amount0 corresponding to the liquidity that is being added, not the total liquidity of the position.
 *   - 5: token_min_amount1 - represents the minimum amount of token1 desired from the new position being created. Note that this field indicates the min amount1 corresponding to the liquidity that is being added, not the total liquidity of the position.
 */
export const destructOsmosisConcentratedliquidityMsgAddToPosition = (g_struct) => [g_struct.position_id, g_struct.sender, g_struct.amount0, g_struct.amount1, g_struct.token_min_amount0, g_struct.token_min_amount1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_ADD_TO_POSITION = '/osmosis.concentratedliquidity.v1beta1.MsgAddToPosition';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgAddToPositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: amount0 -
 *   - 2: amount1 -
 */
export const destructOsmosisConcentratedliquidityMsgAddToPositionResponse = (g_struct) => [g_struct.position_id, g_struct.amount0, g_struct.amount1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_ADD_TO_POSITION_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgWithdrawPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: sender -
 *   - 2: liquidity_amount -
 */
export const destructOsmosisConcentratedliquidityMsgWithdrawPosition = (g_struct) => [g_struct.position_id, g_struct.sender, g_struct.liquidity_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_WITHDRAW_POSITION = '/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgWithdrawPositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount0 -
 *   - 1: amount1 -
 */
export const destructOsmosisConcentratedliquidityMsgWithdrawPositionResponse = (g_struct) => [g_struct.amount0, g_struct.amount1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_WITHDRAW_POSITION_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgCollectSpreadRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_ids -
 *   - 1: sender -
 */
export const destructOsmosisConcentratedliquidityMsgCollectSpreadRewards = (g_struct) => [g_struct.position_ids, g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_COLLECT_SPREAD_REWARDS = '/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgCollectSpreadRewardsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: collected_spread_rewards -
 */
export const destructOsmosisConcentratedliquidityMsgCollectSpreadRewardsResponse = (g_struct) => [g_struct.collected_spread_rewards];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_COLLECT_SPREAD_REWARDS_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgCollectIncentives} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_ids -
 *   - 1: sender -
 */
export const destructOsmosisConcentratedliquidityMsgCollectIncentives = (g_struct) => [g_struct.position_ids, g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_COLLECT_INCENTIVES = '/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgCollectIncentivesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: collected_incentives -
 *   - 1: forfeited_incentives -
 */
export const destructOsmosisConcentratedliquidityMsgCollectIncentivesResponse = (g_struct) => [g_struct.collected_incentives, g_struct.forfeited_incentives];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_COLLECT_INCENTIVES_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgFungifyChargedPositions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_ids -
 *   - 1: sender -
 */
export const destructOsmosisConcentratedliquidityMsgFungifyChargedPositions = (g_struct) => [g_struct.position_ids, g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_FUNGIFY_CHARGED_POSITIONS = '/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgFungifyChargedPositionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_position_id -
 */
export const destructOsmosisConcentratedliquidityMsgFungifyChargedPositionsResponse = (g_struct) => [g_struct.new_position_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_FUNGIFY_CHARGED_POSITIONS_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgTransferPositions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_ids -
 *   - 1: sender -
 *   - 2: new_owner -
 */
export const destructOsmosisConcentratedliquidityMsgTransferPositions = (g_struct) => [g_struct.position_ids, g_struct.sender, g_struct.new_owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_TRANSFER_POSITIONS = '/osmosis.concentratedliquidity.v1beta1.MsgTransferPositions';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityMsgTransferPositionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisConcentratedliquidityMsgTransferPositionsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_MSG_TRANSFER_POSITIONS_RESPONSE = '/osmosis.concentratedliquidity.v1beta1.MsgTransferPositionsResponse';
//# sourceMappingURL=tx.js.map