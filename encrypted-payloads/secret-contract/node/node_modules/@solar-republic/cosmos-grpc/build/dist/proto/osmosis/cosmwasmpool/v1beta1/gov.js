import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `UploadCosmWasmPoolCodeAndWhiteListProposal` protobuf message: a gov Content type for uploading coswasm pool code and adding it to internal whitelist. Only the code ids created by this message are eligible for being x/cosmwasmpool pools.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisCosmwasmpoolUploadCosmWasmPoolCodeAndWhiteListProposal = (s_title, s_description, atu8_wasm_byte_code) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .b(atu8_wasm_byte_code) // bytes wasm_byte_code = 3
    .o;
/**
 * Encodes a `MigratePoolContractsProposal` protobuf message: a gov Content type for migrating  given pools to the new contract code and adding to internal whitelist if needed. It has two options to perform the migration: 1. If the codeID is non-zero, it will migrate the pool contracts to a given codeID assuming that it has already been uploaded. uploadByteCode must be empty in such a case. Fails if codeID does not exist. Fails if uploadByteCode is not empty. 2. If the codeID is zero, it will upload the given uploadByteCode and use the new resulting code id to migrate the pool to. Errors if uploadByteCode is empty or invalid. In both cases, if one of the pools specified by the given poolID does not exist, the proposal fails. The reason for having poolIDs be a slice of ids is to account for the potential need for emergency migration of all old code ids associated with particular pools to new code ids, or simply having the flexibility of migrating multiple older pool contracts to a new one at once when there is a release. poolD count to be submitted at once is gated by a governance paramets (20 at launch). The proposal fails if more. Note that 20 was chosen arbitrarily to have a constant bound on the number of pools migrated at once. This size will be configured by a module parameter so it can be changed by a constant.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_pool_ids - `pool_ids`: the pool ids of the contracts to be migrated either to the new_code_id that is already uploaded to chain or to the given wasm_byte_code.
 * @param sg_new_code_id - `new_code_id`: the code id of the contract code to migrate to. Assumes that the code is already uploaded to chain. Only one of new_code_id and wasm_byte_code should be set.
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed. Assumes that the code id has not been uploaded yet so uploads the given code and migrates to it. Only one of new_code_id and wasm_byte_code should be set.
 * @param atu8_migrate_msg - `migrate_msg`: MigrateMsg migrate message to be used for migrating the pool contracts.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisCosmwasmpoolMigratePoolContractsProposal = (s_title, s_description, a_pool_ids, sg_new_code_id, atu8_wasm_byte_code, atu8_migrate_msg) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .G(a_pool_ids) // uint64[] pool_ids = 3
    .g(sg_new_code_id) // uint64 new_code_id = 4
    .b(atu8_wasm_byte_code) // bytes wasm_byte_code = 5
    .b(atu8_migrate_msg) // bytes migrate_msg = 6
    .o;
/**
 * Decodes a protobuf UploadCosmWasmPoolCodeAndWhiteListProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisCosmwasmpoolUploadCosmWasmPoolCodeAndWhiteListProposal}
 */
export const decodeOsmosisCosmwasmpoolUploadCosmWasmPoolCodeAndWhiteListProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf MigratePoolContractsProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisCosmwasmpoolMigratePoolContractsProposal}
 */
export const decodeOsmosisCosmwasmpoolMigratePoolContractsProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 2, 3, 1, 1]);
/**
 * Destructures the fields of a {@link OsmosisCosmwasmpoolUploadCosmWasmPoolCodeAndWhiteListProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 */
export const destructOsmosisCosmwasmpoolUploadCosmWasmPoolCodeAndWhiteListProposal = (g_struct) => [g_struct.title, g_struct.description, safe_base64_to_bytes(g_struct.wasm_byte_code)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_COSMWASMPOOL_UPLOAD_COSM_WASM_POOL_CODE_AND_WHITE_LIST_PROPOSAL = '/osmosis.cosmwasmpool.v1beta1.UploadCosmWasmPoolCodeAndWhiteListProposal';
/**
 * Destructures the fields of a {@link OsmosisCosmwasmpoolMigratePoolContractsProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: pool_ids - the pool ids of the contracts to be migrated either to the new_code_id that is already uploaded to chain or to the given wasm_byte_code.
 *   - 3: new_code_id - the code id of the contract code to migrate to. Assumes that the code is already uploaded to chain. Only one of new_code_id and wasm_byte_code should be set.
 *   - 4: wasm_byte_code - WASMByteCode can be raw or gzip compressed. Assumes that the code id has not been uploaded yet so uploads the given code and migrates to it. Only one of new_code_id and wasm_byte_code should be set.
 *   - 5: migrate_msg - MigrateMsg migrate message to be used for migrating the pool contracts.
 */
export const destructOsmosisCosmwasmpoolMigratePoolContractsProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.pool_ids, g_struct.new_code_id, safe_base64_to_bytes(g_struct.wasm_byte_code), safe_base64_to_bytes(g_struct.migrate_msg)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_COSMWASMPOOL_MIGRATE_POOL_CONTRACTS_PROPOSAL = '/osmosis.cosmwasmpool.v1beta1.MigratePoolContractsProposal';
//# sourceMappingURL=gov.js.map