import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type AnyOsmosisCosmwasmpoolCosmWasmPool = Encoded<'PoolI'>;
export type EncodedOsmosisCosmwasmpoolCosmWasmPool = Encoded<'/osmosis.cosmwasmpool.v1beta1.CosmWasmPool' | 'PoolI'>;
/**
 * Encodes a `CosmWasmPool` protobuf message wrapped in the `Any` container: represents the data serialized into state for each CW pool. Note: CW Pool has 2 pool models: - CosmWasmPool which is a proto-generated store model used for serialization into state. - Pool struct that encapsulates the CosmWasmPool and wasmKeeper for calling the contract. CosmWasmPool implements the poolmanager.PoolI interface but it panics on all methods. The reason is that access to wasmKeeper is required to call the contract. Instead, all interactions and poolmanager.PoolI methods are to be performed on the Pool struct. The reason why we cannot have a Pool struct only is because it cannot be serialized into state due to having a non-serializable wasmKeeper field.
 * @param sa_contract - `contract_address`:
 * @param sg_pool_id - `pool_id`:
 * @param sg_code_id - `code_id`:
 * @param atu8_instantiate_msg - `instantiate_msg`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyCosmWasmPool: (sa_contract?: Opt<WeakAccountAddr>, sg_pool_id?: Opt<WeakUint64Str>, sg_code_id?: Opt<WeakUint64Str>, atu8_instantiate_msg?: Opt<Uint8Array>) => AnyOsmosisCosmwasmpoolCosmWasmPool;
/**
 * Encodes a `CosmWasmPool` protobuf message: represents the data serialized into state for each CW pool. Note: CW Pool has 2 pool models: - CosmWasmPool which is a proto-generated store model used for serialization into state. - Pool struct that encapsulates the CosmWasmPool and wasmKeeper for calling the contract. CosmWasmPool implements the poolmanager.PoolI interface but it panics on all methods. The reason is that access to wasmKeeper is required to call the contract. Instead, all interactions and poolmanager.PoolI methods are to be performed on the Pool struct. The reason why we cannot have a Pool struct only is because it cannot be serialized into state due to having a non-serializable wasmKeeper field.
 * @param sa_contract - `contract_address`:
 * @param sg_pool_id - `pool_id`:
 * @param sg_code_id - `code_id`:
 * @param atu8_instantiate_msg - `instantiate_msg`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisCosmwasmpoolCosmWasmPool: (sa_contract?: Opt<WeakAccountAddr>, sg_pool_id?: Opt<WeakUint64Str>, sg_code_id?: Opt<WeakUint64Str>, atu8_instantiate_msg?: Opt<Uint8Array>) => EncodedOsmosisCosmwasmpoolCosmWasmPool;
/**
 * A decoded protobuf CosmWasmPool message
 *
 * Tuple where:
 *   - 0: contract_address -
 *   - 1: pool_id -
 *   - 2: code_id -
 *   - 3: instantiate_msg -
 */
export type DecodedOsmosisCosmwasmpoolCosmWasmPool = [
    sa_contract?: CwAccountAddr,
    sg_pool_id?: CwUint64,
    sg_code_id?: CwUint64,
    atu8_instantiate_msg?: Uint8Array
];
/**
 * Decodes a protobuf CosmWasmPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisCosmwasmpoolCosmWasmPool}
 */
export declare const decodeOsmosisCosmwasmpoolCosmWasmPool: (atu8_payload: Uint8Array) => DecodedOsmosisCosmwasmpoolCosmWasmPool;
/**
 * Destructures the fields of a {@link OsmosisCosmwasmpoolCosmWasmPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address -
 *   - 1: pool_id -
 *   - 2: code_id -
 *   - 3: instantiate_msg -
 */
export declare const destructOsmosisCosmwasmpoolCosmWasmPool: (g_struct: OsmosisCosmwasmpoolCosmWasmPool) => [contract_address?: CwAccountAddr, pool_id?: CwUint64, code_id?: CwUint64, instantiate_msg?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_COSMWASMPOOL_COSM_WASM_POOL = "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool";
/**
 * JSON serialization of `osmosis.cosmwasmpool.v1beta1.CosmWasmPool` - represents the data serialized into state for each CW pool. Note: CW Pool has 2 pool models: - CosmWasmPool which is a proto-generated store model used for serialization into state. - Pool struct that encapsulates the CosmWasmPool and wasmKeeper for calling the contract. CosmWasmPool implements the poolmanager.PoolI interface but it panics on all methods. The reason is that access to wasmKeeper is required to call the contract. Instead, all interactions and poolmanager.PoolI methods are to be performed on the Pool struct. The reason why we cannot have a Pool struct only is because it cannot be serialized into state due to having a non-serializable wasmKeeper field.
 */
export type OsmosisCosmwasmpoolCosmWasmPool = {
    contract_address?: CwAccountAddr | undefined;
    pool_id?: CwUint64 | undefined;
    code_id?: CwUint64 | undefined;
    instantiate_msg?: CwBase64 | undefined;
};
