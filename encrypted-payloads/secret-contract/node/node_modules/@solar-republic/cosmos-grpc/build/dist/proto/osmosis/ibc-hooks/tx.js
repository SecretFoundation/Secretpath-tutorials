import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `MsgEmitIBCAck` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_packet_sequence - `packet_sequence`:
 * @param s_channel - `channel`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIbchooksMsgEmitIBCAck = (sa_sender, sg_packet_sequence, s_channel) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_packet_sequence) // uint64 packet_sequence = 2
    .s(s_channel) // string channel = 3
    .o;
/**
 * Encodes a `MsgEmitIBCAckResponse` protobuf message:
 * @param s_contract_result - `contract_result`:
 * @param s_ibc_ack - `ibc_ack`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIbchooksMsgEmitIBCAckResponse = (s_contract_result, s_ibc_ack) => Protobuf() // ...
    .s(s_contract_result) // string contract_result = 1
    .s(s_ibc_ack) // string ibc_ack = 2
    .o;
/**
 * Decodes a protobuf EmitIBCAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbchooksMsgEmitIBCAck}
 */
export const decodeOsmosisIbchooksMsgEmitIBCAck = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5]);
/**
 * Decodes a protobuf EmitIBCAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbchooksMsgEmitIBCAckResponse}
 */
export const decodeOsmosisIbchooksMsgEmitIBCAckResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Destructures the fields of a {@link OsmosisIbchooksMsgEmitIBCAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: packet_sequence -
 *   - 2: channel -
 */
export const destructOsmosisIbchooksMsgEmitIBCAck = (g_struct) => [g_struct.sender, g_struct.packet_sequence, g_struct.channel];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_IBCHOOKS_MSG_EMIT_I_B_C_ACK = '/osmosis.ibchooks.MsgEmitIBCAck';
/**
 * Destructures the fields of a {@link OsmosisIbchooksMsgEmitIBCAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_result -
 *   - 1: ibc_ack -
 */
export const destructOsmosisIbchooksMsgEmitIBCAckResponse = (g_struct) => [g_struct.contract_result, g_struct.ibc_ack];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_IBCHOOKS_MSG_EMIT_I_B_C_ACK_RESPONSE = '/osmosis.ibchooks.MsgEmitIBCAckResponse';
//# sourceMappingURL=tx.js.map