/// <reference types="node" />
import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisIbcratelimitParams, DecodedOsmosisIbcratelimitParams } from './params.js';
export type EncodedOsmosisIbcratelimitParamsRequest = Encoded<'/osmosis.ibcratelimit.v1beta1.ParamsRequest'>;
export type EncodedOsmosisIbcratelimitParamsResponse = Encoded<'/osmosis.ibcratelimit.v1beta1.ParamsResponse'>;
/**
 * Defines a gRPC query method that returns the ibc-rate-limit module's parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const queryOsmosisIbcratelimitParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisIbcratelimitParamsResponse>>;
/**
 * Encodes a `ParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIbcratelimitParamsRequest: () => EncodedOsmosisIbcratelimitParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message: aramsResponse is the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIbcratelimitParamsResponse: (atu8_params?: Opt<Encoded<'/osmosis.ibcratelimit.v1beta1.Params'>>) => EncodedOsmosisIbcratelimitParamsResponse;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisIbcratelimitParamsRequest = [];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbcratelimitParamsRequest}
 */
export declare const decodeOsmosisIbcratelimitParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Params message
 *
 * Alias for: params - defines the parameters of the module.
 */
export type DecodedOsmosisIbcratelimitParamsResponse = [
    a_params?: DecodedOsmosisIbcratelimitParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbcratelimitParamsResponse}
 */
export declare const decodeOsmosisIbcratelimitParamsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIbcratelimitParamsResponse;
/**
 * Destructures the fields of a {@link OsmosisIbcratelimitParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisIbcratelimitParamsRequest: (g_struct: OsmosisIbcratelimitParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_IBCRATELIMIT_PARAMS_REQUEST = "/osmosis.ibcratelimit.v1beta1.ParamsRequest";
/**
 * JSON serialization of `osmosis.ibcratelimit.v1beta1.ParamsRequest` - the request type for the Query/Params RPC method.
 */
export type OsmosisIbcratelimitParamsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisIbcratelimitParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const destructOsmosisIbcratelimitParamsResponse: (g_struct: OsmosisIbcratelimitParamsResponse) => [params?: OsmosisIbcratelimitParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_IBCRATELIMIT_PARAMS_RESPONSE = "/osmosis.ibcratelimit.v1beta1.ParamsResponse";
/**
 * JSON serialization of `osmosis.ibcratelimit.v1beta1.ParamsResponse` - aramsResponse is the response type for the Query/Params RPC method.
 */
export type OsmosisIbcratelimitParamsResponse = {
    params?: OsmosisIbcratelimitParams | undefined;
};
