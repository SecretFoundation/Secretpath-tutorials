import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakDurationStr } from '../../../api/types.js';
import type { OsmosisIncentivesGauge, DecodedOsmosisIncentivesGauge } from './gauge.js';
import type { OsmosisIncentivesGroup, DecodedOsmosisIncentivesGroup } from './group.js';
import type { OsmosisIncentivesParams, DecodedOsmosisIncentivesParams } from './params.js';
export type EncodedOsmosisIncentivesGenesisState = Encoded<'/osmosis.incentives.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the incentives module's various parameters when first initialized
 * @param g_params - `params`: all the parameters of the module
 * @param a_gauges - `gauges`: all gauges (not including group gauges) that should exist at genesis
 * @param a_lockable_durations - `lockable_durations`: all lockup durations that gauges can be locked for in order to recieve incentives
 * @param sg_last_gauge_id - `last_gauge_id`: what the gauge number will increment from when creating the next gauge after genesis
 * @param a_group_gauges - `group_gauges`: gauges are all group gauges that should exist at genesis
 * @param a_groups - `groups`: all the groups that should exist at genesis
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesGenesisState: (atu8_params?: Opt<Encoded<'/osmosis.incentives.Params'>>, a_gauges?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, a_lockable_durations?: Opt<number[]>, sg_last_gauge_id?: Opt<WeakUint64Str>, a_group_gauges?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, a_groups?: Opt<Encoded<'/osmosis.incentives.Group'>[]>) => EncodedOsmosisIncentivesGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - all the parameters of the module
 *   - 1: gauges - all gauges (not including group gauges) that should exist at genesis
 *   - 2: lockable_durations - all lockup durations that gauges can be locked for in order to recieve incentives
 *   - 3: last_gauge_id - what the gauge number will increment from when creating the next gauge after genesis
 *   - 4: group_gauges - gauges are all group gauges that should exist at genesis
 *   - 5: groups - all the groups that should exist at genesis
 */
export type DecodedOsmosisIncentivesGenesisState = [
    a_params?: DecodedOsmosisIncentivesParams,
    a_gauges?: DecodedOsmosisIncentivesGauge[],
    a_lockable_durations?: [
        string,
        number
    ][],
    sg_last_gauge_id?: CwUint64,
    a_group_gauges?: DecodedOsmosisIncentivesGauge[],
    a_groups?: DecodedOsmosisIncentivesGroup[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGenesisState}
 */
export declare const decodeOsmosisIncentivesGenesisState: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesGenesisState;
/**
 * Destructures the fields of a {@link OsmosisIncentivesGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - all the parameters of the module
 *   - 1: gauges - all gauges (not including group gauges) that should exist at genesis
 *   - 2: lockable_durations - all lockup durations that gauges can be locked for in order to recieve incentives
 *   - 3: last_gauge_id - what the gauge number will increment from when creating the next gauge after genesis
 *   - 4: group_gauges - gauges are all group gauges that should exist at genesis
 *   - 5: groups - all the groups that should exist at genesis
 */
export declare const destructOsmosisIncentivesGenesisState: (g_struct: OsmosisIncentivesGenesisState) => [params?: OsmosisIncentivesParams, gauges?: OsmosisIncentivesGauge[], lockable_durations?: number[], last_gauge_id?: CwUint64, group_gauges?: OsmosisIncentivesGauge[], groups?: OsmosisIncentivesGroup[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GENESIS_STATE = "/osmosis.incentives.GenesisState";
/**
 * JSON serialization of `osmosis.incentives.GenesisState` - defines the incentives module's various parameters when first initialized
 */
export type OsmosisIncentivesGenesisState = {
    params?: OsmosisIncentivesParams | undefined;
    gauges?: OsmosisIncentivesGauge[] | undefined;
    lockable_durations?: WeakDurationStr[] | undefined;
    last_gauge_id?: CwUint64 | undefined;
    group_gauges?: OsmosisIncentivesGauge[] | undefined;
    groups?: OsmosisIncentivesGroup[] | undefined;
};
