import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
import type { CosmosBaseCoin } from '../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisIncentivesParams = Encoded<'/osmosis.incentives.Params'>;
/**
 * Encodes a `Params` protobuf message: holds parameters for the incentives module
 * @param s_distr_epoch_identifier - `distr_epoch_identifier`: what epoch type distribution will be triggered by (day, week, etc.)
 * @param a_group_creation_fees - `group_creation_fee`: the fee required to create a new group It is only charged to all addresses other than incentive module account or addresses in the unrestricted_creator_whitelist
 * @param a_unrestricted_creator_whitelists - `unrestricted_creator_whitelist`: a list of addresses that are allowed to bypass restrictions on permissionless Group creation. In the future, we might expand these to creating gauges as well. The goal of this is to allow a subdao to manage incentives efficiently without being stopped by 5 day governance process or a high fee. At the same time, it prevents spam by having a fee for all other users.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesParams: (s_distr_epoch_identifier?: Opt<string>, a_group_creation_fees?: Opt<SlimCoin[]>, a_unrestricted_creator_whitelists?: Opt<string[]>) => EncodedOsmosisIncentivesParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: distr_epoch_identifier - what epoch type distribution will be triggered by (day, week, etc.)
 *   - 1: group_creation_fee - the fee required to create a new group It is only charged to all addresses other than incentive module account or addresses in the unrestricted_creator_whitelist
 *   - 2: unrestricted_creator_whitelist - a list of addresses that are allowed to bypass restrictions on permissionless Group creation. In the future, we might expand these to creating gauges as well. The goal of this is to allow a subdao to manage incentives efficiently without being stopped by 5 day governance process or a high fee. At the same time, it prevents spam by having a fee for all other users.
 */
export type DecodedOsmosisIncentivesParams = [
    s_distr_epoch_identifier?: string,
    a_group_creation_fee?: [
        string,
        string
    ][],
    a_unrestricted_creator_whitelists?: string[]
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesParams}
 */
export declare const decodeOsmosisIncentivesParams: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesParams;
/**
 * Destructures the fields of a {@link OsmosisIncentivesParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: distr_epoch_identifier - what epoch type distribution will be triggered by (day, week, etc.)
 *   - 1: group_creation_fee - the fee required to create a new group It is only charged to all addresses other than incentive module account or addresses in the unrestricted_creator_whitelist
 *   - 2: unrestricted_creator_whitelist - a list of addresses that are allowed to bypass restrictions on permissionless Group creation. In the future, we might expand these to creating gauges as well. The goal of this is to allow a subdao to manage incentives efficiently without being stopped by 5 day governance process or a high fee. At the same time, it prevents spam by having a fee for all other users.
 */
export declare const destructOsmosisIncentivesParams: (g_struct: OsmosisIncentivesParams) => [distr_epoch_identifier?: string, group_creation_fee?: CosmosBaseCoin[], unrestricted_creator_whitelist?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_PARAMS = "/osmosis.incentives.Params";
/**
 * JSON serialization of `osmosis.incentives.Params` - holds parameters for the incentives module
 */
export type OsmosisIncentivesParams = {
    distr_epoch_identifier?: string | undefined;
    group_creation_fee?: CosmosBaseCoin[] | undefined;
    unrestricted_creator_whitelist?: string[] | undefined;
};
