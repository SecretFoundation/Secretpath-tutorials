import { parse_duration, parse_timestamp, duration_to_json, timestamp_to_json } from '../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal, coins } from '../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../api/transport.js';
import { decodeOsmosisLockupPeriodLock, decodeOsmosisLockupSyntheticLock } from './lock.js';
import { decodeOsmosisLockupParams } from './params.js';
const SR_LCD_OSMOSIS_LOCKUP_QUERY = '/osmosis/lockup/v1beta1/';
/**
 * Return full balance of the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: coins - the 'coins' response property
 */
export const queryOsmosisLockupModuleBalance = restful_grpc(() => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'module_balance']);
/**
 * Return locked balance of the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: coins - the 'coins' response property
 */
export const queryOsmosisLockupModuleLockedAmount = restful_grpc(() => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'module_locked_amount']);
/**
 * Returns unlockable coins which are not withdrawn yet
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @returns a tuple where:
 *   - 0: coins - the 'coins' response property
 */
export const queryOsmosisLockupAccountUnlockableCoins = restful_grpc(sa_owner => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_unlockable_coins/' + sa_owner]);
/**
 * Returns unlocking coins
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @returns a tuple where:
 *   - 0: coins - the 'coins' response property
 */
export const queryOsmosisLockupAccountUnlockingCoins = restful_grpc(sa_owner => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_unlocking_coins/' + sa_owner]);
/**
 * Return a locked coins that can't be withdrawn
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @returns a tuple where:
 *   - 0: coins - the 'coins' response property
 */
export const queryOsmosisLockupAccountLockedCoins = restful_grpc(sa_owner => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_coins/' + sa_owner]);
/**
 * Returns locked records of an account with unlock time beyond timestamp
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_timestamp -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedPastTime = restful_grpc((sa_owner, xt_timestamp) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_pasttime/' + sa_owner, {
        timestamp: timestamp_to_json(xt_timestamp),
    }]);
/**
 * Returns locked records of an account with unlock time beyond timestamp excluding tokens started unlocking
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_timestamp -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedPastTimeNotUnlockingOnly = restful_grpc((sa_owner, xt_timestamp) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_pasttime_not_unlocking_only/' + sa_owner, {
        timestamp: timestamp_to_json(xt_timestamp),
    }]);
/**
 * Returns unlocked records with unlock time before timestamp
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_timestamp -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountUnlockedBeforeTime = restful_grpc((sa_owner, xt_timestamp) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_unlocked_before_time/' + sa_owner, {
        timestamp: timestamp_to_json(xt_timestamp),
    }]);
/**
 * Returns lock records by address, timestamp, denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_timestamp -
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedPastTimeDenom = restful_grpc((sa_owner, xt_timestamp, s_denom) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_pasttime_denom/' + sa_owner, {
        timestamp: timestamp_to_json(xt_timestamp),
        denom: s_denom,
    }]);
/**
 * Returns total locked per denom with longer past given time
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @param xt_duration -
 * @returns a tuple where:
 *   - 0: amount - the 'amount' response property
 */
export const queryOsmosisLockupLockedDenom = restful_grpc((s_denom, xt_duration) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'locked_denom', {
        denom: s_denom,
        duration: duration_to_json(xt_duration),
    }]);
/**
 * Returns lock record by id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_lock_id -
 * @returns a tuple where:
 *   - 0: lock - the 'lock' response property
 */
export const queryOsmosisLockupLockedByID = restful_grpc(sg_lock_id => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'locked_by_id/' + sg_lock_id]);
/**
 * Returns lock record by id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_lock_id -
 * @returns a tuple where:
 *   - 0: reward_receiver - the 'reward_receiver' response property
 */
export const queryOsmosisLockupLockRewardReceiver = restful_grpc(sg_lock_id => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'lock_reward_receiver/' + sg_lock_id]);
/**
 * Returns next lock ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: lock_id - the 'lock_id' response property
 */
export const queryOsmosisLockupNextLockID = restful_grpc(() => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'next_lock_id']);
/**
 * Returns synthetic lockup by native lockup id Deprecated: use SyntheticLockupByLockupID instead
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_lock_id -
 * @returns a tuple where:
 *   - 0: synthetic_locks - the 'synthetic_locks' response property
 */
export const queryOsmosisLockupSyntheticLockupsByLockupID = restful_grpc(sg_lock_id => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'synthetic_lockups_by_lock_id/' + sg_lock_id]);
/**
 * Returns synthetic lockup by native lockup id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_lock_id -
 * @returns a tuple where:
 *   - 0: synthetic_lock - the 'synthetic_lock' response property
 */
export const queryOsmosisLockupSyntheticLockupByLockupID = restful_grpc(sg_lock_id => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'synthetic_lockup_by_lock_id/' + sg_lock_id]);
/**
 * Returns account locked records with longer duration
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_duration -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedLongerDuration = restful_grpc((sa_owner, xt_duration) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_longer_duration/' + sa_owner, {
        duration: duration_to_json(xt_duration),
    }]);
/**
 * Returns account locked records with a specific duration
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_duration -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedDuration = restful_grpc((sa_owner, xt_duration) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_duration/' + sa_owner, {
        duration: duration_to_json(xt_duration),
    }]);
/**
 * Returns account locked records with longer duration excluding tokens started unlocking
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_duration -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedLongerDurationNotUnlockingOnly = restful_grpc((sa_owner, xt_duration) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_longer_duration_not_unlocking_only/' + sa_owner, {
        duration: duration_to_json(xt_duration),
    }]);
/**
 * Returns account's locked records for a denom with longer duration
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param xt_duration -
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: locks - the 'locks' response property
 */
export const queryOsmosisLockupAccountLockedLongerDurationDenom = restful_grpc((sa_owner, xt_duration, s_denom) => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'account_locked_longer_duration_denom/' + sa_owner, {
        duration: duration_to_json(xt_duration),
        denom: s_denom,
    }]);
/**
 * Returns lockup params.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryOsmosisLockupParams = restful_grpc(() => [SR_LCD_OSMOSIS_LOCKUP_QUERY + 'params']);
/**
 * Encodes a `ModuleBalanceRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupModuleBalanceRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ModuleBalanceResponse` protobuf message:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupModuleBalanceResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `ModuleLockedAmountRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupModuleLockedAmountRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ModuleLockedAmountResponse` protobuf message:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupModuleLockedAmountResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `AccountUnlockableCoinsRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountUnlockableCoinsRequest = (sa_owner) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .o;
/**
 * Encodes a `AccountUnlockableCoinsResponse` protobuf message:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountUnlockableCoinsResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `AccountUnlockingCoinsRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountUnlockingCoinsRequest = (sa_owner) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .o;
/**
 * Encodes a `AccountUnlockingCoinsResponse` protobuf message:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountUnlockingCoinsResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `AccountLockedCoinsRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedCoinsRequest = (sa_owner) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .o;
/**
 * Encodes a `AccountLockedCoinsResponse` protobuf message:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedCoinsResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `AccountLockedPastTimeRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedPastTimeRequest = (sa_owner, xt_timestamp) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 2
    .o;
/**
 * Encodes a `AccountLockedPastTimeResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedPastTimeResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `AccountLockedPastTimeNotUnlockingOnlyRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyRequest = (sa_owner, xt_timestamp) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 2
    .o;
/**
 * Encodes a `AccountLockedPastTimeNotUnlockingOnlyResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `AccountUnlockedBeforeTimeRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountUnlockedBeforeTimeRequest = (sa_owner, xt_timestamp) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 2
    .o;
/**
 * Encodes a `AccountUnlockedBeforeTimeResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountUnlockedBeforeTimeResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `AccountLockedPastTimeDenomRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_timestamp - `timestamp`:
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedPastTimeDenomRequest = (sa_owner, xt_timestamp, s_denom) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 2
    .s(s_denom) // string denom = 3
    .o;
/**
 * Encodes a `AccountLockedPastTimeDenomResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedPastTimeDenomResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `LockedDenomRequest` protobuf message:
 * @param s_denom - `denom`:
 * @param xt_duration - `duration`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupLockedDenomRequest = (s_denom, xt_duration) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .b(temporal(xt_duration)) // Duration duration = 2
    .o;
/**
 * Encodes a `LockedDenomResponse` protobuf message:
 * @param s_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupLockedDenomResponse = (s_amount) => Protobuf() // ...
    .s(s_amount) // string amount = 1
    .o;
/**
 * Encodes a `LockedRequest` protobuf message:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupLockedRequest = (sg_lock_id) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .o;
/**
 * Encodes a `LockedResponse` protobuf message:
 * @param g_lock - `lock`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupLockedResponse = (atu8_lock) => Protobuf() // ...
    .b(atu8_lock) // PeriodLock lock = 1
    .o;
/**
 * Encodes a `LockRewardReceiverRequest` protobuf message:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupLockRewardReceiverRequest = (sg_lock_id) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .o;
/**
 * Encodes a `LockRewardReceiverResponse` protobuf message:
 * @param sa_reward_receiver - `reward_receiver`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupLockRewardReceiverResponse = (sa_reward_receiver) => Protobuf() // ...
    .s(sa_reward_receiver) // string reward_receiver = 1
    .o;
/**
 * Encodes a `NextLockIDRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupNextLockIDRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `NextLockIDResponse` protobuf message:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupNextLockIDResponse = (sg_lock_id) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .o;
/**
 * Encodes a `SyntheticLockupsByLockupIDRequest` protobuf message:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupSyntheticLockupsByLockupIDRequest = (sg_lock_id) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .o;
/**
 * Encodes a `SyntheticLockupsByLockupIDResponse` protobuf message:
 * @param a_synthetic_locks - `synthetic_locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupSyntheticLockupsByLockupIDResponse = (a_synthetic_locks) => Protobuf() // ...
    .B(a_synthetic_locks) // SyntheticLock[] synthetic_locks = 1
    .o;
/**
 * Encodes a `SyntheticLockupByLockupIDRequest` protobuf message:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupSyntheticLockupByLockupIDRequest = (sg_lock_id) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .o;
/**
 * Encodes a `SyntheticLockupByLockupIDResponse` protobuf message:
 * @param g_synthetic_lock - `synthetic_lock`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupSyntheticLockupByLockupIDResponse = (atu8_synthetic_lock) => Protobuf() // ...
    .b(atu8_synthetic_lock) // SyntheticLock synthetic_lock = 1
    .o;
/**
 * Encodes a `AccountLockedLongerDurationRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_duration - `duration`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedLongerDurationRequest = (sa_owner, xt_duration) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_duration)) // Duration duration = 2
    .o;
/**
 * Encodes a `AccountLockedLongerDurationResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedLongerDurationResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `AccountLockedDurationRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_duration - `duration`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedDurationRequest = (sa_owner, xt_duration) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_duration)) // Duration duration = 2
    .o;
/**
 * Encodes a `AccountLockedDurationResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedDurationResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `AccountLockedLongerDurationNotUnlockingOnlyRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_duration - `duration`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyRequest = (sa_owner, xt_duration) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_duration)) // Duration duration = 2
    .o;
/**
 * Encodes a `AccountLockedLongerDurationNotUnlockingOnlyResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `AccountLockedLongerDurationDenomRequest` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_duration - `duration`:
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedLongerDurationDenomRequest = (sa_owner, xt_duration, s_denom) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_duration)) // Duration duration = 2
    .s(s_denom) // string denom = 3
    .o;
/**
 * Encodes a `AccountLockedLongerDurationDenomResponse` protobuf message:
 * @param a_locks - `locks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupAccountLockedLongerDurationDenomResponse = (a_locks) => Protobuf() // ...
    .B(a_locks) // PeriodLock[] locks = 1
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf ModuleBalanceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupModuleBalanceRequest}
 */
export const decodeOsmosisLockupModuleBalanceRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ModuleBalance message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupModuleBalanceResponse}
 */
export const decodeOsmosisLockupModuleBalanceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf ModuleLockedAmountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupModuleLockedAmountRequest}
 */
export const decodeOsmosisLockupModuleLockedAmountRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ModuleLockedAmount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupModuleLockedAmountResponse}
 */
export const decodeOsmosisLockupModuleLockedAmountResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf AccountUnlockableCoinsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountUnlockableCoinsRequest}
 */
export const decodeOsmosisLockupAccountUnlockableCoinsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf AccountUnlockableCoins message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountUnlockableCoinsResponse}
 */
export const decodeOsmosisLockupAccountUnlockableCoinsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf AccountUnlockingCoinsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountUnlockingCoinsRequest}
 */
export const decodeOsmosisLockupAccountUnlockingCoinsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf AccountUnlockingCoins message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountUnlockingCoinsResponse}
 */
export const decodeOsmosisLockupAccountUnlockingCoinsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf AccountLockedCoinsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedCoinsRequest}
 */
export const decodeOsmosisLockupAccountLockedCoinsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf AccountLockedCoins message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedCoinsResponse}
 */
export const decodeOsmosisLockupAccountLockedCoinsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf AccountLockedPastTimeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedPastTimeRequest}
 */
export const decodeOsmosisLockupAccountLockedPastTimeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedPastTime message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedPastTimeResponse}
 */
export const decodeOsmosisLockupAccountLockedPastTimeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf AccountLockedPastTimeNotUnlockingOnlyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyRequest}
 */
export const decodeOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedPastTimeNotUnlockingOnly message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyResponse}
 */
export const decodeOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf AccountUnlockedBeforeTimeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountUnlockedBeforeTimeRequest}
 */
export const decodeOsmosisLockupAccountUnlockedBeforeTimeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountUnlockedBeforeTime message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountUnlockedBeforeTimeResponse}
 */
export const decodeOsmosisLockupAccountUnlockedBeforeTimeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf AccountLockedPastTimeDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedPastTimeDenomRequest}
 */
export const decodeOsmosisLockupAccountLockedPastTimeDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1], 5], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedPastTimeDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedPastTimeDenomResponse}
 */
export const decodeOsmosisLockupAccountLockedPastTimeDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf LockedDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupLockedDenomRequest}
 */
export const decodeOsmosisLockupLockedDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf LockedDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupLockedDenomResponse}
 */
export const decodeOsmosisLockupLockedDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf LockedRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupLockedRequest}
 */
export const decodeOsmosisLockupLockedRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf Locked message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupLockedResponse}
 */
export const decodeOsmosisLockupLockedResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf LockRewardReceiverRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupLockRewardReceiverRequest}
 */
export const decodeOsmosisLockupLockRewardReceiverRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf LockRewardReceiver message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupLockRewardReceiverResponse}
 */
export const decodeOsmosisLockupLockRewardReceiverResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf NextLockIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupNextLockIDRequest}
 */
export const decodeOsmosisLockupNextLockIDRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf NextLockID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupNextLockIDResponse}
 */
export const decodeOsmosisLockupNextLockIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf SyntheticLockupsByLockupIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupSyntheticLockupsByLockupIDRequest}
 */
export const decodeOsmosisLockupSyntheticLockupsByLockupIDRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf SyntheticLockupsByLockupID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupSyntheticLockupsByLockupIDResponse}
 */
export const decodeOsmosisLockupSyntheticLockupsByLockupIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupSyntheticLock]);
/**
 * Decodes a protobuf SyntheticLockupByLockupIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupSyntheticLockupByLockupIDRequest}
 */
export const decodeOsmosisLockupSyntheticLockupByLockupIDRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf SyntheticLockupByLockupID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupSyntheticLockupByLockupIDResponse}
 */
export const decodeOsmosisLockupSyntheticLockupByLockupIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisLockupSyntheticLock]);
/**
 * Decodes a protobuf AccountLockedLongerDurationRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedLongerDurationRequest}
 */
export const decodeOsmosisLockupAccountLockedLongerDurationRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedLongerDuration message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedLongerDurationResponse}
 */
export const decodeOsmosisLockupAccountLockedLongerDurationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf AccountLockedDurationRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedDurationRequest}
 */
export const decodeOsmosisLockupAccountLockedDurationRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedDuration message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedDurationResponse}
 */
export const decodeOsmosisLockupAccountLockedDurationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf AccountLockedLongerDurationNotUnlockingOnlyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyRequest}
 */
export const decodeOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1]], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedLongerDurationNotUnlockingOnly message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyResponse}
 */
export const decodeOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf AccountLockedLongerDurationDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedLongerDurationDenomRequest}
 */
export const decodeOsmosisLockupAccountLockedLongerDurationDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1], 5], [0, decode_temporal]);
/**
 * Decodes a protobuf AccountLockedLongerDurationDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupAccountLockedLongerDurationDenomResponse}
 */
export const decodeOsmosisLockupAccountLockedLongerDurationDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupQueryParamsRequest}
 */
export const decodeOsmosisLockupQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupQueryParamsResponse}
 */
export const decodeOsmosisLockupQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisLockupParams]);
/**
 * Destructures the fields of a {@link OsmosisLockupModuleBalanceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisLockupModuleBalanceRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MODULE_BALANCE_REQUEST = '/osmosis.lockup.ModuleBalanceRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupModuleBalanceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export const destructOsmosisLockupModuleBalanceResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MODULE_BALANCE_RESPONSE = '/osmosis.lockup.ModuleBalanceResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupModuleLockedAmountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisLockupModuleLockedAmountRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MODULE_LOCKED_AMOUNT_REQUEST = '/osmosis.lockup.ModuleLockedAmountRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupModuleLockedAmountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export const destructOsmosisLockupModuleLockedAmountResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MODULE_LOCKED_AMOUNT_RESPONSE = '/osmosis.lockup.ModuleLockedAmountResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountUnlockableCoinsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 */
export const destructOsmosisLockupAccountUnlockableCoinsRequest = (g_struct) => [g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_UNLOCKABLE_COINS_REQUEST = '/osmosis.lockup.AccountUnlockableCoinsRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountUnlockableCoinsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export const destructOsmosisLockupAccountUnlockableCoinsResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_UNLOCKABLE_COINS_RESPONSE = '/osmosis.lockup.AccountUnlockableCoinsResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountUnlockingCoinsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 */
export const destructOsmosisLockupAccountUnlockingCoinsRequest = (g_struct) => [g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_UNLOCKING_COINS_REQUEST = '/osmosis.lockup.AccountUnlockingCoinsRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountUnlockingCoinsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export const destructOsmosisLockupAccountUnlockingCoinsResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_UNLOCKING_COINS_RESPONSE = '/osmosis.lockup.AccountUnlockingCoinsResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedCoinsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 */
export const destructOsmosisLockupAccountLockedCoinsRequest = (g_struct) => [g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_COINS_REQUEST = '/osmosis.lockup.AccountLockedCoinsRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedCoinsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export const destructOsmosisLockupAccountLockedCoinsResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_COINS_RESPONSE = '/osmosis.lockup.AccountLockedCoinsResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedPastTimeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: timestamp -
 */
export const destructOsmosisLockupAccountLockedPastTimeRequest = (g_struct) => [g_struct.owner, parse_timestamp(g_struct.timestamp)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_PAST_TIME_REQUEST = '/osmosis.lockup.AccountLockedPastTimeRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedPastTimeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedPastTimeResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_PAST_TIME_RESPONSE = '/osmosis.lockup.AccountLockedPastTimeResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedPastTimeNotUnlockingOnlyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: timestamp -
 */
export const destructOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyRequest = (g_struct) => [g_struct.owner, parse_timestamp(g_struct.timestamp)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_PAST_TIME_NOT_UNLOCKING_ONLY_REQUEST = '/osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedPastTimeNotUnlockingOnlyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedPastTimeNotUnlockingOnlyResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_PAST_TIME_NOT_UNLOCKING_ONLY_RESPONSE = '/osmosis.lockup.AccountLockedPastTimeNotUnlockingOnlyResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountUnlockedBeforeTimeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: timestamp -
 */
export const destructOsmosisLockupAccountUnlockedBeforeTimeRequest = (g_struct) => [g_struct.owner, parse_timestamp(g_struct.timestamp)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_UNLOCKED_BEFORE_TIME_REQUEST = '/osmosis.lockup.AccountUnlockedBeforeTimeRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountUnlockedBeforeTimeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountUnlockedBeforeTimeResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_UNLOCKED_BEFORE_TIME_RESPONSE = '/osmosis.lockup.AccountUnlockedBeforeTimeResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedPastTimeDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: timestamp -
 *   - 2: denom -
 */
export const destructOsmosisLockupAccountLockedPastTimeDenomRequest = (g_struct) => [g_struct.owner, parse_timestamp(g_struct.timestamp), g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_PAST_TIME_DENOM_REQUEST = '/osmosis.lockup.AccountLockedPastTimeDenomRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedPastTimeDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedPastTimeDenomResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_PAST_TIME_DENOM_RESPONSE = '/osmosis.lockup.AccountLockedPastTimeDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupLockedDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: duration -
 */
export const destructOsmosisLockupLockedDenomRequest = (g_struct) => [g_struct.denom, parse_duration(g_struct.duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_LOCKED_DENOM_REQUEST = '/osmosis.lockup.LockedDenomRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupLockedDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 */
export const destructOsmosisLockupLockedDenomResponse = (g_struct) => [g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_LOCKED_DENOM_RESPONSE = '/osmosis.lockup.LockedDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupLockedRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 */
export const destructOsmosisLockupLockedRequest = (g_struct) => [g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_LOCKED_REQUEST = '/osmosis.lockup.LockedRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupLockedResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock -
 */
export const destructOsmosisLockupLockedResponse = (g_struct) => [g_struct.lock];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_LOCKED_RESPONSE = '/osmosis.lockup.LockedResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupLockRewardReceiverRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 */
export const destructOsmosisLockupLockRewardReceiverRequest = (g_struct) => [g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_LOCK_REWARD_RECEIVER_REQUEST = '/osmosis.lockup.LockRewardReceiverRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupLockRewardReceiverResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: reward_receiver -
 */
export const destructOsmosisLockupLockRewardReceiverResponse = (g_struct) => [g_struct.reward_receiver];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_LOCK_REWARD_RECEIVER_RESPONSE = '/osmosis.lockup.LockRewardReceiverResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupNextLockIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisLockupNextLockIDRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_NEXT_LOCK_I_D_REQUEST = '/osmosis.lockup.NextLockIDRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupNextLockIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 */
export const destructOsmosisLockupNextLockIDResponse = (g_struct) => [g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_NEXT_LOCK_I_D_RESPONSE = '/osmosis.lockup.NextLockIDResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupSyntheticLockupsByLockupIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 */
export const destructOsmosisLockupSyntheticLockupsByLockupIDRequest = (g_struct) => [g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_SYNTHETIC_LOCKUPS_BY_LOCKUP_I_D_REQUEST = '/osmosis.lockup.SyntheticLockupsByLockupIDRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupSyntheticLockupsByLockupIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: synthetic_locks -
 */
export const destructOsmosisLockupSyntheticLockupsByLockupIDResponse = (g_struct) => [g_struct.synthetic_locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_SYNTHETIC_LOCKUPS_BY_LOCKUP_I_D_RESPONSE = '/osmosis.lockup.SyntheticLockupsByLockupIDResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupSyntheticLockupByLockupIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 */
export const destructOsmosisLockupSyntheticLockupByLockupIDRequest = (g_struct) => [g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_SYNTHETIC_LOCKUP_BY_LOCKUP_I_D_REQUEST = '/osmosis.lockup.SyntheticLockupByLockupIDRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupSyntheticLockupByLockupIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: synthetic_lock -
 */
export const destructOsmosisLockupSyntheticLockupByLockupIDResponse = (g_struct) => [g_struct.synthetic_lock];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_SYNTHETIC_LOCKUP_BY_LOCKUP_I_D_RESPONSE = '/osmosis.lockup.SyntheticLockupByLockupIDResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedLongerDurationRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: duration -
 */
export const destructOsmosisLockupAccountLockedLongerDurationRequest = (g_struct) => [g_struct.owner, parse_duration(g_struct.duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_LONGER_DURATION_REQUEST = '/osmosis.lockup.AccountLockedLongerDurationRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedLongerDurationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedLongerDurationResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_LONGER_DURATION_RESPONSE = '/osmosis.lockup.AccountLockedLongerDurationResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedDurationRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: duration -
 */
export const destructOsmosisLockupAccountLockedDurationRequest = (g_struct) => [g_struct.owner, parse_duration(g_struct.duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_DURATION_REQUEST = '/osmosis.lockup.AccountLockedDurationRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedDurationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedDurationResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_DURATION_RESPONSE = '/osmosis.lockup.AccountLockedDurationResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: duration -
 */
export const destructOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyRequest = (g_struct) => [g_struct.owner, parse_duration(g_struct.duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_LONGER_DURATION_NOT_UNLOCKING_ONLY_REQUEST = '/osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedLongerDurationNotUnlockingOnlyResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_LONGER_DURATION_NOT_UNLOCKING_ONLY_RESPONSE = '/osmosis.lockup.AccountLockedLongerDurationNotUnlockingOnlyResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedLongerDurationDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: duration -
 *   - 2: denom -
 */
export const destructOsmosisLockupAccountLockedLongerDurationDenomRequest = (g_struct) => [g_struct.owner, parse_duration(g_struct.duration), g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_LONGER_DURATION_DENOM_REQUEST = '/osmosis.lockup.AccountLockedLongerDurationDenomRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupAccountLockedLongerDurationDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: locks -
 */
export const destructOsmosisLockupAccountLockedLongerDurationDenomResponse = (g_struct) => [g_struct.locks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_ACCOUNT_LOCKED_LONGER_DURATION_DENOM_RESPONSE = '/osmosis.lockup.AccountLockedLongerDurationDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisLockupQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_QUERY_PARAMS_REQUEST = '/osmosis.lockup.QueryParamsRequest';
/**
 * Destructures the fields of a {@link OsmosisLockupQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export const destructOsmosisLockupQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_QUERY_PARAMS_RESPONSE = '/osmosis.lockup.QueryParamsResponse';
//# sourceMappingURL=query.js.map