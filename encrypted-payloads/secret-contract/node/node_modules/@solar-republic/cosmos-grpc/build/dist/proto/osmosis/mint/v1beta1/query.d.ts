/// <reference types="node" />
import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisMintParams, DecodedOsmosisMintParams } from './mint.js';
export type EncodedOsmosisMintQueryParamsRequest = Encoded<'/osmosis.mint.v1beta1.QueryParamsRequest'>;
export type EncodedOsmosisMintQueryParamsResponse = Encoded<'/osmosis.mint.v1beta1.QueryParamsResponse'>;
export type EncodedOsmosisMintQueryEpochProvisionsRequest = Encoded<'/osmosis.mint.v1beta1.QueryEpochProvisionsRequest'>;
export type EncodedOsmosisMintQueryEpochProvisionsResponse = Encoded<'/osmosis.mint.v1beta1.QueryEpochProvisionsResponse'>;
/**
 * Returns the total set of minting parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const queryOsmosisMintParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisMintQueryParamsResponse>>;
/**
 * Returns the current minting epoch provisions value.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: epoch_provisions - the current minting per epoch provisions value.
 */
export declare const queryOsmosisMintEpochProvisions: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisMintQueryEpochProvisionsResponse>>;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintQueryParamsRequest: () => EncodedOsmosisMintQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintQueryParamsResponse: (atu8_params?: Opt<Encoded<'/osmosis.mint.v1beta1.Params'>>) => EncodedOsmosisMintQueryParamsResponse;
/**
 * Encodes a `QueryEpochProvisionsRequest` protobuf message: the request type for the Query/EpochProvisions RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintQueryEpochProvisionsRequest: () => EncodedOsmosisMintQueryEpochProvisionsRequest;
/**
 * Encodes a `QueryEpochProvisionsResponse` protobuf message: the response type for the Query/EpochProvisions RPC method.
 * @param atu8_epoch_provisions - `epoch_provisions`: the current minting per epoch provisions value.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintQueryEpochProvisionsResponse: (atu8_epoch_provisions?: Opt<Uint8Array>) => EncodedOsmosisMintQueryEpochProvisionsResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisMintQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryParamsRequest}
 */
export declare const decodeOsmosisMintQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - defines the parameters of the module.
 */
export type DecodedOsmosisMintQueryParamsResponse = [
    a_params?: DecodedOsmosisMintParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryParamsResponse}
 */
export declare const decodeOsmosisMintQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisMintQueryParamsResponse;
/**
 * A decoded protobuf QueryEpochProvisionsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisMintQueryEpochProvisionsRequest = [];
/**
 * Decodes a protobuf QueryEpochProvisionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryEpochProvisionsRequest}
 */
export declare const decodeOsmosisMintQueryEpochProvisionsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryEpochProvisions message
 *
 * Alias for: epoch_provisions - the current minting per epoch provisions value.
 */
export type DecodedOsmosisMintQueryEpochProvisionsResponse = [
    atu8_epoch_provisions?: Uint8Array
];
/**
 * Decodes a protobuf QueryEpochProvisions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryEpochProvisionsResponse}
 */
export declare const decodeOsmosisMintQueryEpochProvisionsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisMintQueryEpochProvisionsResponse;
/**
 * Destructures the fields of a {@link OsmosisMintQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisMintQueryParamsRequest: (g_struct: OsmosisMintQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_PARAMS_REQUEST = "/osmosis.mint.v1beta1.QueryParamsRequest";
/**
 * JSON serialization of `osmosis.mint.v1beta1.QueryParamsRequest` - the request type for the Query/Params RPC method.
 */
export type OsmosisMintQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisMintQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const destructOsmosisMintQueryParamsResponse: (g_struct: OsmosisMintQueryParamsResponse) => [params?: OsmosisMintParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_PARAMS_RESPONSE = "/osmosis.mint.v1beta1.QueryParamsResponse";
/**
 * JSON serialization of `osmosis.mint.v1beta1.QueryParamsResponse` - the response type for the Query/Params RPC method.
 */
export type OsmosisMintQueryParamsResponse = {
    params?: OsmosisMintParams | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisMintQueryEpochProvisionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisMintQueryEpochProvisionsRequest: (g_struct: OsmosisMintQueryEpochProvisionsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_EPOCH_PROVISIONS_REQUEST = "/osmosis.mint.v1beta1.QueryEpochProvisionsRequest";
/**
 * JSON serialization of `osmosis.mint.v1beta1.QueryEpochProvisionsRequest` - the request type for the Query/EpochProvisions RPC method.
 */
export type OsmosisMintQueryEpochProvisionsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisMintQueryEpochProvisionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch_provisions - the current minting per epoch provisions value.
 */
export declare const destructOsmosisMintQueryEpochProvisionsResponse: (g_struct: OsmosisMintQueryEpochProvisionsResponse) => [epoch_provisions?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_EPOCH_PROVISIONS_RESPONSE = "/osmosis.mint.v1beta1.QueryEpochProvisionsResponse";
/**
 * JSON serialization of `osmosis.mint.v1beta1.QueryEpochProvisionsResponse` - the response type for the Query/EpochProvisions RPC method.
 */
export type OsmosisMintQueryEpochProvisionsResponse = {
    epoch_provisions?: CwBase64 | undefined;
};
