/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { parse_duration } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, temporal } from '../../../../api/protobuf-writer.js';
import { decodeOsmosisPoolincentivesParams, decodeOsmosisPoolincentivesDistrInfo, decodeOsmosisPoolincentivesAnyPoolToInternalGauges, decodeOsmosisPoolincentivesConcentratedPoolToNoLockGauges } from './incentives.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the pool incentives module's genesis state.
 * @param g_params - `params`: defines all the paramaters of the module.
 * @param a_lockable_durations - `lockable_durations`:
 * @param g_distr_info - `distr_info`:
 * @param g_any_pool_to_internal_gauges - `any_pool_to_internal_gauges`: defines the gauges for any pool to internal pool. For every pool type (e.g. LP, Concentrated, etc), there is one such link
 * @param g_concentrated_pool_to_no_lock_gauges - `concentrated_pool_to_no_lock_gauges`: defines the no lock gauges for concentrated pool. This only exists between concentrated pool and no lock gauges. Both external and internal gauges are included.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesGenesisState = (atu8_params, a_lockable_durations, atu8_distr_info, atu8_any_pool_to_internal_gauges, atu8_concentrated_pool_to_no_lock_gauges) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(map(a_lockable_durations, temporal)) // Duration[] lockable_durations = 2
    .b(atu8_distr_info) // DistrInfo distr_info = 3
    .b(atu8_any_pool_to_internal_gauges) // AnyPoolToInternalGauges any_pool_to_internal_gauges = 4
    .b(atu8_concentrated_pool_to_no_lock_gauges) // ConcentratedPoolToNoLockGauges concentrated_pool_to_no_lock_gauges = 5
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesGenesisState}
 */
export const decodeOsmosisPoolincentivesGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, [3, 1], 1, 1, 1], [decodeOsmosisPoolincentivesParams, decode_temporal, decodeOsmosisPoolincentivesDistrInfo, decodeOsmosisPoolincentivesAnyPoolToInternalGauges, decodeOsmosisPoolincentivesConcentratedPoolToNoLockGauges]);
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines all the paramaters of the module.
 *   - 1: lockable_durations -
 *   - 2: distr_info -
 *   - 3: any_pool_to_internal_gauges - defines the gauges for any pool to internal pool. For every pool type (e.g. LP, Concentrated, etc), there is one such link
 *   - 4: concentrated_pool_to_no_lock_gauges - defines the no lock gauges for concentrated pool. This only exists between concentrated pool and no lock gauges. Both external and internal gauges are included.
 */
export const destructOsmosisPoolincentivesGenesisState = (g_struct) => [g_struct.params, map(g_struct.lockable_durations, parse_duration), g_struct.distr_info, g_struct.any_pool_to_internal_gauges, g_struct.concentrated_pool_to_no_lock_gauges];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_GENESIS_STATE = '/osmosis.poolincentives.v1beta1.GenesisState';
//# sourceMappingURL=genesis.js.map