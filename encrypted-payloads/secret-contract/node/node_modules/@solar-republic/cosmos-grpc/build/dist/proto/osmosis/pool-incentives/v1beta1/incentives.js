import { __UNDEFINED } from '@blake.regalia/belt';
import { parse_duration } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, temporal } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message:
 * @param s_minted_denom - `minted_denom`: the denomination of the coin expected to be minted by the minting module. Pool-incentives module doesn’t actually mint the coin itself, but rather manages the distribution of coins that matches the defined minted_denom.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesParams = (s_minted_denom) => Protobuf() // ...
    .s(s_minted_denom) // string minted_denom = 1
    .o;
/**
 * Encodes a `LockableDurationsInfo` protobuf message:
 * @param a_lockable_durations - `lockable_durations`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesLockableDurationsInfo = (a_lockable_durations) => Protobuf() // ...
    .B(map(a_lockable_durations, temporal)) // Duration[] lockable_durations = 1
    .o;
/**
 * Encodes a `DistrInfo` protobuf message:
 * @param s_total_weight - `total_weight`:
 * @param a_records - `records`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesDistrInfo = (s_total_weight, a_records) => Protobuf() // ...
    .s(s_total_weight) // string total_weight = 1
    .B(a_records) // DistrRecord[] records = 2
    .o;
/**
 * Encodes a `DistrRecord` protobuf message:
 * @param sg_gauge_id - `gauge_id`:
 * @param s_weight - `weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesDistrRecord = (sg_gauge_id, s_weight) => Protobuf() // ...
    .g(sg_gauge_id) // uint64 gauge_id = 1
    .s(s_weight) // string weight = 2
    .o;
/**
 * Encodes a `PoolToGauge` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param sg_gauge_id - `gauge_id`:
 * @param xt_duration - `duration`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesPoolToGauge = (sg_pool_id, sg_gauge_id, xt_duration) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .g(sg_gauge_id) // uint64 gauge_id = 2
    .b(temporal(xt_duration)) // Duration duration = 3
    .o;
/**
 * Encodes a `AnyPoolToInternalGauges` protobuf message:
 * @param a_pool_to_gauges - `pool_to_gauge`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesAnyPoolToInternalGauges = (a_pool_to_gauges) => Protobuf() // ...
    .B(a_pool_to_gauges, 2) // PoolToGauge[] pool_to_gauge = 2
    .o;
/**
 * Encodes a `ConcentratedPoolToNoLockGauges` protobuf message:
 * @param a_pool_to_gauges - `pool_to_gauge`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolincentivesConcentratedPoolToNoLockGauges = (a_pool_to_gauges) => Protobuf() // ...
    .B(a_pool_to_gauges) // PoolToGauge[] pool_to_gauge = 1
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesParams}
 */
export const decodeOsmosisPoolincentivesParams = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf LockableDurationsInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesLockableDurationsInfo}
 */
export const decodeOsmosisPoolincentivesLockableDurationsInfo = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1]], [decode_temporal]);
/**
 * Decodes a protobuf DistrInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesDistrInfo}
 */
export const decodeOsmosisPoolincentivesDistrInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeOsmosisPoolincentivesDistrRecord]);
/**
 * Decodes a protobuf DistrRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesDistrRecord}
 */
export const decodeOsmosisPoolincentivesDistrRecord = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf PoolToGauge message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesPoolToGauge}
 */
export const decodeOsmosisPoolincentivesPoolToGauge = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, [3, 1]], [0, 0, decode_temporal]);
/**
 * Decodes a protobuf AnyPoolToInternalGauges message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisPoolincentivesAnyPoolToInternalGauges}
 */
export const decodeOsmosisPoolincentivesAnyPoolToInternalGauges = ((atu8_payload, [, a_pool_to_gauge] = decode_protobuf(atu8_payload, [0, 0], [0, decodeOsmosisPoolincentivesPoolToGauge])) => [__UNDEFINED, a_pool_to_gauge]);
/**
 * Decodes a protobuf ConcentratedPoolToNoLockGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesConcentratedPoolToNoLockGauges}
 */
export const decodeOsmosisPoolincentivesConcentratedPoolToNoLockGauges = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisPoolincentivesPoolToGauge]);
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesDistrRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge_id -
 *   - 1: weight -
 */
export const destructOsmosisPoolincentivesDistrRecord = (g_struct) => [g_struct.gauge_id, g_struct.weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_DISTR_RECORD = '/osmosis.poolincentives.v1beta1.DistrRecord';
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: minted_denom - the denomination of the coin expected to be minted by the minting module. Pool-incentives module doesn’t actually mint the coin itself, but rather manages the distribution of coins that matches the defined minted_denom.
 */
export const destructOsmosisPoolincentivesParams = (g_struct) => [g_struct.minted_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_PARAMS = '/osmosis.poolincentives.v1beta1.Params';
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesLockableDurationsInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lockable_durations -
 */
export const destructOsmosisPoolincentivesLockableDurationsInfo = (g_struct) => [map(g_struct.lockable_durations, parse_duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_LOCKABLE_DURATIONS_INFO = '/osmosis.poolincentives.v1beta1.LockableDurationsInfo';
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesDistrInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_weight -
 *   - 1: records -
 */
export const destructOsmosisPoolincentivesDistrInfo = (g_struct) => [g_struct.total_weight, g_struct.records];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_DISTR_INFO = '/osmosis.poolincentives.v1beta1.DistrInfo';
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesPoolToGauge} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: gauge_id -
 *   - 2: duration -
 */
export const destructOsmosisPoolincentivesPoolToGauge = (g_struct) => [g_struct.pool_id, g_struct.gauge_id, parse_duration(g_struct.duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_POOL_TO_GAUGE = '/osmosis.poolincentives.v1beta1.PoolToGauge';
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesAnyPoolToInternalGauges} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: pool_to_gauge -
 */
export const destructOsmosisPoolincentivesAnyPoolToInternalGauges = (g_struct) => [__UNDEFINED, g_struct.pool_to_gauge];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_ANY_POOL_TO_INTERNAL_GAUGES = '/osmosis.poolincentives.v1beta1.AnyPoolToInternalGauges';
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesConcentratedPoolToNoLockGauges} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_to_gauge -
 */
export const destructOsmosisPoolincentivesConcentratedPoolToNoLockGauges = (g_struct) => [g_struct.pool_to_gauge];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_CONCENTRATED_POOL_TO_NO_LOCK_GAUGES = '/osmosis.poolincentives.v1beta1.ConcentratedPoolToNoLockGauges';
//# sourceMappingURL=incentives.js.map