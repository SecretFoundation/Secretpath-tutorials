import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { decodeOsmosisPoolmanagerModuleRoute } from './module_route.js';
/**
 * Encodes a `Params` protobuf message: holds parameters for the poolmanager module
 * @param a_pool_creation_fees - `pool_creation_fee`:
 * @param g_taker_fee_params - `taker_fee_params`: the container of taker fee parameters.
 * @param a_authorized_quote_denoms - `authorized_quote_denoms`: a list of quote denoms that can be used as token1 when creating a concentrated pool. We limit the quote assets to a small set for the purposes of having convinient price increments stemming from tick to price conversion. These increments are in a human readable magnitude only for token1 as a quote. For limit orders in the future, this will be a desirable property in terms of UX as to allow users to set limit orders at prices in terms of token1 (quote asset) that are easy to reason about.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerParams = (a_pool_creation_fees, atu8_taker_fee_params, a_authorized_quote_denoms) => Protobuf() // ...
    .B(coins(a_pool_creation_fees)) // Coin[] pool_creation_fee = 1
    .b(atu8_taker_fee_params) // TakerFeeParams taker_fee_params = 2
    .S(a_authorized_quote_denoms) // string[] authorized_quote_denoms = 3
    .o;
/**
 * Encodes a `GenesisState` protobuf message: defines the poolmanager module's genesis state.
 * @param sg_next_pool_id - `next_pool_id`: the next_pool_id
 * @param g_params - `params`: the container of poolmanager parameters.
 * @param a_pool_routes - `pool_routes`: the container of the mappings from pool id to pool type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerGenesisState = (sg_next_pool_id, atu8_params, a_pool_routes) => Protobuf() // ...
    .g(sg_next_pool_id) // uint64 next_pool_id = 1
    .b(atu8_params) // Params params = 2
    .B(a_pool_routes) // ModuleRoute[] pool_routes = 3
    .o;
/**
 * Encodes a `TakerFeeParams` protobuf message: consolidates the taker fee parameters for the poolmanager.
 * @param s_default_taker_fee - `default_taker_fee`: the fee used when creating a new pool that doesn't fall under a custom pool taker fee or stableswap taker fee category.
 * @param g_osmo_taker_fee_distribution - `osmo_taker_fee_distribution`: defines the distribution of taker fees generated in OSMO. As of this writing, it has two catagories: - staking_rewards: the percent of the taker fee that gets distributed to stakers. - community_pool: the percent of the taker fee that gets sent to the community pool.
 * @param g_non_osmo_taker_fee_distribution - `non_osmo_taker_fee_distribution`: defines the distribution of taker fees generated in non-OSMO. As of this writing, it has two categories: - staking_rewards: the percent of the taker fee that gets swapped to OSMO and then distirbuted to stakers. - community_pool: the percent of the taker fee that gets sent to the community pool. Note: If the non-OSMO asset is an authorized_quote_denom, that denom is sent directly to the community pool. Otherwise, it is swapped to the community_pool_denom_to_swap_non_whitelisted_assets_to and then sent to the community pool as that denom.
 * @param a_admin_addresses - `admin_addresses`: a list of addresses that are allowed to set and remove custom taker fees for denom pairs. Governance also has the ability to set and remove custom taker fees for denom pairs, but with the normal governance delay.
 * @param s_community_pool_denom_to_swap_non_whitelisted_assets_to - `community_pool_denom_to_swap_non_whitelisted_assets_to`: the denom that non-whitelisted taker fees will be swapped to before being sent to the community pool.
 * @param a_reduced_fee_whitelists - `reduced_fee_whitelist`: a list of addresses that are allowed to pay a reduce taker fee when performing a swap (i.e. swap without paying the taker fee). It is intended to be used for integrators who meet qualifying factors that are approved by governance. Initially, the taker fee is allowed to be bypassed completely. However In the future, we will charge a reduced taker fee instead of no fee at all.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTakerFeeParams = (s_default_taker_fee, atu8_osmo_taker_fee_distribution, atu8_non_osmo_taker_fee_distribution, a_admin_addresses, s_community_pool_denom_to_swap_non_whitelisted_assets_to, a_reduced_fee_whitelists) => Protobuf() // ...
    .s(s_default_taker_fee) // string default_taker_fee = 1
    .b(atu8_osmo_taker_fee_distribution) // TakerFeeDistributionPercentage osmo_taker_fee_distribution = 2
    .b(atu8_non_osmo_taker_fee_distribution) // TakerFeeDistributionPercentage non_osmo_taker_fee_distribution = 3
    .S(a_admin_addresses) // string[] admin_addresses = 4
    .s(s_community_pool_denom_to_swap_non_whitelisted_assets_to) // string community_pool_denom_to_swap_non_whitelisted_assets_to = 5
    .S(a_reduced_fee_whitelists) // string[] reduced_fee_whitelist = 6
    .o;
/**
 * Encodes a `TakerFeeDistributionPercentage` protobuf message: defines what percent of the taker fee category gets distributed to the available categories.
 * @param s_staking_rewards - `staking_rewards`:
 * @param s_community_pool - `community_pool`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTakerFeeDistributionPercentage = (s_staking_rewards, s_community_pool) => Protobuf() // ...
    .s(s_staking_rewards) // string staking_rewards = 1
    .s(s_community_pool) // string community_pool = 2
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerParams}
 */
export const decodeOsmosisPoolmanagerParams = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 4], [decode_coin, decodeOsmosisPoolmanagerTakerFeeParams]);
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerGenesisState}
 */
export const decodeOsmosisPoolmanagerGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 0], [0, decodeOsmosisPoolmanagerParams, decodeOsmosisPoolmanagerModuleRoute]);
/**
 * Decodes a protobuf TakerFeeParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTakerFeeParams}
 */
export const decodeOsmosisPoolmanagerTakerFeeParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 4, 5, 4], [0, decodeOsmosisPoolmanagerTakerFeeDistributionPercentage, decodeOsmosisPoolmanagerTakerFeeDistributionPercentage]);
/**
 * Decodes a protobuf TakerFeeDistributionPercentage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTakerFeeDistributionPercentage}
 */
export const decodeOsmosisPoolmanagerTakerFeeDistributionPercentage = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_creation_fee -
 *   - 1: taker_fee_params - the container of taker fee parameters.
 *   - 2: authorized_quote_denoms - a list of quote denoms that can be used as token1 when creating a concentrated pool. We limit the quote assets to a small set for the purposes of having convinient price increments stemming from tick to price conversion. These increments are in a human readable magnitude only for token1 as a quote. For limit orders in the future, this will be a desirable property in terms of UX as to allow users to set limit orders at prices in terms of token1 (quote asset) that are easy to reason about.
 */
export const destructOsmosisPoolmanagerParams = (g_struct) => [g_struct.pool_creation_fee, g_struct.taker_fee_params, g_struct.authorized_quote_denoms];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_PARAMS = '/osmosis.poolmanager.v1beta1.Params';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTakerFeeParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: default_taker_fee - the fee used when creating a new pool that doesn't fall under a custom pool taker fee or stableswap taker fee category.
 *   - 1: osmo_taker_fee_distribution - defines the distribution of taker fees generated in OSMO. As of this writing, it has two catagories: - staking_rewards: the percent of the taker fee that gets distributed to stakers. - community_pool: the percent of the taker fee that gets sent to the community pool.
 *   - 2: non_osmo_taker_fee_distribution - defines the distribution of taker fees generated in non-OSMO. As of this writing, it has two categories: - staking_rewards: the percent of the taker fee that gets swapped to OSMO and then distirbuted to stakers. - community_pool: the percent of the taker fee that gets sent to the community pool. Note: If the non-OSMO asset is an authorized_quote_denom, that denom is sent directly to the community pool. Otherwise, it is swapped to the community_pool_denom_to_swap_non_whitelisted_assets_to and then sent to the community pool as that denom.
 *   - 3: admin_addresses - a list of addresses that are allowed to set and remove custom taker fees for denom pairs. Governance also has the ability to set and remove custom taker fees for denom pairs, but with the normal governance delay.
 *   - 4: community_pool_denom_to_swap_non_whitelisted_assets_to - the denom that non-whitelisted taker fees will be swapped to before being sent to the community pool.
 *   - 5: reduced_fee_whitelist - a list of addresses that are allowed to pay a reduce taker fee when performing a swap (i.e. swap without paying the taker fee). It is intended to be used for integrators who meet qualifying factors that are approved by governance. Initially, the taker fee is allowed to be bypassed completely. However In the future, we will charge a reduced taker fee instead of no fee at all.
 */
export const destructOsmosisPoolmanagerTakerFeeParams = (g_struct) => [g_struct.default_taker_fee, g_struct.osmo_taker_fee_distribution, g_struct.non_osmo_taker_fee_distribution, g_struct.admin_addresses, g_struct.community_pool_denom_to_swap_non_whitelisted_assets_to, g_struct.reduced_fee_whitelist];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TAKER_FEE_PARAMS = '/osmosis.poolmanager.v1beta1.TakerFeeParams';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTakerFeeDistributionPercentage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: staking_rewards -
 *   - 1: community_pool -
 */
export const destructOsmosisPoolmanagerTakerFeeDistributionPercentage = (g_struct) => [g_struct.staking_rewards, g_struct.community_pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TAKER_FEE_DISTRIBUTION_PERCENTAGE = '/osmosis.poolmanager.v1beta1.TakerFeeDistributionPercentage';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_pool_id - the next_pool_id
 *   - 1: params - the container of poolmanager parameters.
 *   - 2: pool_routes - the container of the mappings from pool id to pool type.
 */
export const destructOsmosisPoolmanagerGenesisState = (g_struct) => [g_struct.next_pool_id, g_struct.params, g_struct.pool_routes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_GENESIS_STATE = '/osmosis.poolmanager.v1beta1.GenesisState';
//# sourceMappingURL=genesis.js.map