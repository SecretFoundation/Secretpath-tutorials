/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin, coins } from '../../../../api/protobuf-writer.js';
import { restful_grpc, restruct_coin } from '../../../../api/transport.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
import { decodeOsmosisPoolmanagerParams } from './genesis.js';
import { decodeOsmosisPoolmanagerSwapAmountInRoute, decodeOsmosisPoolmanagerSwapAmountOutRoute } from './swap_route.js';
const SR_LCD_OSMOSIS_POOLMANAGER_QUERY = '/osmosis/poolmanager/';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryOsmosisPoolmanagerParams = restful_grpc(() => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/Params']);
/**
 * Estimates swap amount out given in.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param s_token_in -
 * @param a_routes -
 * @returns a tuple where:
 *   - 0: token_out_amount - the 'token_out_amount' response property
 */
export const queryOsmosisPoolmanagerEstimateSwapExactAmountIn = restful_grpc((sg_pool_id, s_token_in, a_routes) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate/swap_exact_amount_in', {
        token_in: s_token_in,
        routes: a_routes,
    }]);
/**
 * An alternative query for EstimateSwapExactAmountIn. Supports query via GRPC-Gateway by using primitive types instead of repeated structs. Each index in the routes_pool_id field corresponds to the respective routes_token_out_denom value, thus they are required to have the same length and are grouped together as pairs. example usage: http://0.0.0.0:1317/osmosis/poolmanager/v1beta1/1/estimate/ swap_exact_amount_in_with_primitive_types?token_in=100000stake&routes_token_out_denom=uatom &routes_token_out_denom=uion&routes_pool_id=1&routes_pool_id=2
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param s_token_in -
 * @param a_routes_pool_ids -
 * @param a_routes_token_out_denoms -
 * @returns a tuple where:
 *   - 0: token_out_amount - the 'token_out_amount' response property
 */
export const queryOsmosisPoolmanagerEstimateSwapExactAmountInWithPrimitiveTypes = restful_grpc((sg_pool_id, s_token_in, a_routes_pool_ids, a_routes_token_out_denoms) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate/swap_exact_amount_in_with_primitive_types', {
        token_in: s_token_in,
        routes_pool_id: a_routes_pool_ids,
        routes_token_out_denom: a_routes_token_out_denoms,
    }]);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param s_token_in -
 * @param s_token_out_denom -
 * @returns a tuple where:
 *   - 0: token_out_amount - the 'token_out_amount' response property
 */
export const queryOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountIn = restful_grpc((sg_pool_id, s_token_in, s_token_out_denom) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate/single_pool_swap_exact_amount_in', {
        token_in: s_token_in,
        token_out_denom: s_token_out_denom,
    }]);
/**
 * Estimates swap amount in given out.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param a_routes -
 * @param s_token_out -
 * @returns a tuple where:
 *   - 0: token_in_amount - the 'token_in_amount' response property
 */
export const queryOsmosisPoolmanagerEstimateSwapExactAmountOut = restful_grpc((sg_pool_id, a_routes, s_token_out) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate/swap_exact_amount_out', {
        routes: a_routes,
        token_out: s_token_out,
    }]);
/**
 * Estimates swap amount in given out.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param a_routes_pool_ids -
 * @param a_routes_token_in_denoms -
 * @param s_token_out -
 * @returns a tuple where:
 *   - 0: token_in_amount - the 'token_in_amount' response property
 */
export const queryOsmosisPoolmanagerEstimateSwapExactAmountOutWithPrimitiveTypes = restful_grpc((sg_pool_id, a_routes_pool_ids, a_routes_token_in_denoms, s_token_out) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate/swap_exact_amount_out_with_primitive_types', {
        routes_pool_id: a_routes_pool_ids,
        routes_token_in_denom: a_routes_token_in_denoms,
        token_out: s_token_out,
    }]);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param s_token_in_denom -
 * @param s_token_out -
 * @returns a tuple where:
 *   - 0: token_in_amount - the 'token_in_amount' response property
 */
export const queryOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountOut = restful_grpc((sg_pool_id, s_token_in_denom, s_token_out) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate_out/single_pool_swap_exact_amount_out', {
        token_in_denom: s_token_in_denom,
        token_out: s_token_out,
    }]);
/**
 * Returns the total number of pools existing in Osmosis.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: num_pools - the 'num_pools' response property
 */
export const queryOsmosisPoolmanagerNumPools = restful_grpc(() => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/num_pools']);
/**
 * Returns the Pool specified by the pool id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @returns a tuple where:
 *   - 0: pool - the 'pool' response property
 */
export const queryOsmosisPoolmanagerPool = restful_grpc(sg_pool_id => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/pools/' + sg_pool_id]);
/**
 * Returns all pools on the Osmosis chain sorted by IDs.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: pools - the 'pools' response property
 */
export const queryOsmosisPoolmanagerAllPools = restful_grpc(() => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/all-pools']);
/**
 * Defines a gRPC query handler that returns the spot price given a base denomination and a quote denomination.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @param s_base_asset_denom -
 * @param s_quote_asset_denom -
 * @returns a tuple where:
 *   - 0: spot_price - String of the Dec. Ex) 10.203uatom
 */
export const queryOsmosisPoolmanagerSpotPrice = restful_grpc((sg_pool_id, s_base_asset_denom, s_quote_asset_denom) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'pools/' + sg_pool_id + '/prices', {
        base_asset_denom: s_base_asset_denom,
        quote_asset_denom: s_quote_asset_denom,
    }]);
/**
 * Returns the total liquidity of the specified pool.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @returns a tuple where:
 *   - 0: liquidity - the 'liquidity' response property
 */
export const queryOsmosisPoolmanagerTotalPoolLiquidity = restful_grpc(sg_pool_id => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/pools/' + sg_pool_id + '/total_pool_liquidity']);
/**
 * Returns the total liquidity across all pools.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: liquidity - the 'liquidity' response property
 */
export const queryOsmosisPoolmanagerTotalLiquidity = restful_grpc(() => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/pools/total_liquidity']);
/**
 * Returns the total volume of the specified pool.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_pool_id -
 * @returns a tuple where:
 *   - 0: volume - the 'volume' response property
 */
export const queryOsmosisPoolmanagerTotalVolumeForPool = restful_grpc(sg_pool_id => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/pools/' + sg_pool_id + '/total_volume']);
/**
 * Returns the taker fee for a given set of denoms
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom_0 -
 * @param s_denom_1 -
 * @returns a tuple where:
 *   - 0: taker_fee - the 'taker_fee' response property
 */
export const queryOsmosisPoolmanagerTradingPairTakerFee = restful_grpc((s_denom_0, s_denom_1) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/pools/trading_pair_takerfee', {
        denom_0: s_denom_0,
        denom_1: s_denom_1,
    }]);
/**
 * Returns an estimated trade based on price impact, if a trade cannot be estimated a 0 input and 0 output would be returned.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param a_from_coin - the total amount of tokens that the user wants to sell.
 * @param s_to_coin_denom - the denom identifier of the token that the user wants to buy.
 * @param sg_pool_id - the identifier of the liquidity pool that the trade will occur on.
 * @param s_max_price_impact - the maximum percentage that the user is willing to affect the price of the liquidity pool.
 * @param s_external_price - an optional external price that the user can enter. It adjusts the MaxPriceImpact as the SpotPrice of a pool can be changed at any time.
 * @returns a tuple where:
 *   - 0: input_coin - the actual input amount that would be tradeable under the specified price impact.
 *   - 1: output_coin - the actual input amount that would be tradeable under the specified price impact.
 */
export const queryOsmosisPoolmanagerEstimateTradeBasedOnPriceImpact = restful_grpc((a_from_coin, s_to_coin_denom, sg_pool_id, s_max_price_impact, s_external_price) => [SR_LCD_OSMOSIS_POOLMANAGER_QUERY + 'v1beta1/' + sg_pool_id + '/estimate_trade', {
        from_coin: restruct_coin(a_from_coin),
        to_coin_denom: s_to_coin_denom,
        max_price_impact: s_max_price_impact,
        external_price: s_external_price,
    }]);
/**
 * Encodes a `ParamsRequest` protobuf message: =============================== Params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `EstimateSwapExactAmountInRequest` protobuf message: =============================== EstimateSwapExactAmountIn
 * @param sg_pool_id - `pool_id`:
 * @param s_token_in - `token_in`:
 * @param a_routes - `routes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSwapExactAmountInRequest = (sg_pool_id, s_token_in, a_routes) => Protobuf() // ...
    .g(sg_pool_id, 2) // uint64 pool_id = 2
    .s(s_token_in, 3) // string token_in = 3
    .B(a_routes, 4) // SwapAmountInRoute[] routes = 4
    .o;
/**
 * Encodes a `EstimateSwapExactAmountInWithPrimitiveTypesRequest` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param s_token_in - `token_in`:
 * @param a_routes_pool_ids - `routes_pool_id`:
 * @param a_routes_token_out_denoms - `routes_token_out_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSwapExactAmountInWithPrimitiveTypesRequest = (sg_pool_id, s_token_in, a_routes_pool_ids, a_routes_token_out_denoms) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(s_token_in) // string token_in = 2
    .G(a_routes_pool_ids) // uint64[] routes_pool_id = 3
    .S(a_routes_token_out_denoms) // string[] routes_token_out_denom = 4
    .o;
/**
 * Encodes a `EstimateSinglePoolSwapExactAmountInRequest` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param s_token_in - `token_in`:
 * @param s_token_out_denom - `token_out_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountInRequest = (sg_pool_id, s_token_in, s_token_out_denom) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(s_token_in) // string token_in = 2
    .s(s_token_out_denom) // string token_out_denom = 3
    .o;
/**
 * Encodes a `EstimateSwapExactAmountInResponse` protobuf message:
 * @param s_token_out_amount - `token_out_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSwapExactAmountInResponse = (s_token_out_amount) => Protobuf() // ...
    .s(s_token_out_amount) // string token_out_amount = 1
    .o;
/**
 * Encodes a `EstimateSwapExactAmountOutRequest` protobuf message: =============================== EstimateSwapExactAmountOut
 * @param sg_pool_id - `pool_id`:
 * @param a_routes - `routes`:
 * @param s_token_out - `token_out`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSwapExactAmountOutRequest = (sg_pool_id, a_routes, s_token_out) => Protobuf() // ...
    .g(sg_pool_id, 2) // uint64 pool_id = 2
    .B(a_routes, 3) // SwapAmountOutRoute[] routes = 3
    .s(s_token_out, 4) // string token_out = 4
    .o;
/**
 * Encodes a `EstimateSwapExactAmountOutWithPrimitiveTypesRequest` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param a_routes_pool_ids - `routes_pool_id`:
 * @param a_routes_token_in_denoms - `routes_token_in_denom`:
 * @param s_token_out - `token_out`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSwapExactAmountOutWithPrimitiveTypesRequest = (sg_pool_id, a_routes_pool_ids, a_routes_token_in_denoms, s_token_out) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .G(a_routes_pool_ids) // uint64[] routes_pool_id = 2
    .S(a_routes_token_in_denoms) // string[] routes_token_in_denom = 3
    .s(s_token_out) // string token_out = 4
    .o;
/**
 * Encodes a `EstimateSinglePoolSwapExactAmountOutRequest` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param s_token_in_denom - `token_in_denom`:
 * @param s_token_out - `token_out`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountOutRequest = (sg_pool_id, s_token_in_denom, s_token_out) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(s_token_in_denom) // string token_in_denom = 2
    .s(s_token_out) // string token_out = 3
    .o;
/**
 * Encodes a `EstimateSwapExactAmountOutResponse` protobuf message:
 * @param s_token_in_amount - `token_in_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateSwapExactAmountOutResponse = (s_token_in_amount) => Protobuf() // ...
    .s(s_token_in_amount) // string token_in_amount = 1
    .o;
/**
 * Encodes a `NumPoolsRequest` protobuf message: =============================== NumPools
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerNumPoolsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `NumPoolsResponse` protobuf message:
 * @param sg_num_pools - `num_pools`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerNumPoolsResponse = (sg_num_pools) => Protobuf() // ...
    .g(sg_num_pools) // uint64 num_pools = 1
    .o;
/**
 * Encodes a `PoolRequest` protobuf message: =============================== Pool
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerPoolRequest = (sg_pool_id) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .o;
/**
 * Encodes a `PoolResponse` protobuf message:
 * @param atu8_pool - `pool`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerPoolResponse = (atu8_pool) => Protobuf() // ...
    .b(atu8_pool) // Any pool = 1
    .o;
/**
 * Encodes a `AllPoolsRequest` protobuf message: =============================== AllPools
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerAllPoolsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `AllPoolsResponse` protobuf message:
 * @param a_pools - `pools`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerAllPoolsResponse = (a_pools) => Protobuf() // ...
    .B(a_pools) // Any[] pools = 1
    .o;
/**
 * Encodes a `SpotPriceRequest` protobuf message: defines the gRPC request structure for a SpotPrice query.
 * @param sg_pool_id - `pool_id`:
 * @param s_base_asset_denom - `base_asset_denom`:
 * @param s_quote_asset_denom - `quote_asset_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerSpotPriceRequest = (sg_pool_id, s_base_asset_denom, s_quote_asset_denom) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(s_base_asset_denom) // string base_asset_denom = 2
    .s(s_quote_asset_denom) // string quote_asset_denom = 3
    .o;
/**
 * Encodes a `SpotPriceResponse` protobuf message: defines the gRPC response structure for a SpotPrice query.
 * @param s_spot_price - `spot_price`: String of the Dec. Ex) 10.203uatom
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerSpotPriceResponse = (s_spot_price) => Protobuf() // ...
    .s(s_spot_price) // string spot_price = 1
    .o;
/**
 * Encodes a `TotalPoolLiquidityRequest` protobuf message: =============================== TotalPoolLiquidity
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTotalPoolLiquidityRequest = (sg_pool_id) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .o;
/**
 * Encodes a `TotalPoolLiquidityResponse` protobuf message:
 * @param a_liquiditys - `liquidity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTotalPoolLiquidityResponse = (a_liquiditys) => Protobuf() // ...
    .B(coins(a_liquiditys)) // Coin[] liquidity = 1
    .o;
/**
 * Encodes a `TotalLiquidityRequest` protobuf message: =============================== TotalLiquidity
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTotalLiquidityRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `TotalLiquidityResponse` protobuf message:
 * @param a_liquiditys - `liquidity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTotalLiquidityResponse = (a_liquiditys) => Protobuf() // ...
    .B(coins(a_liquiditys)) // Coin[] liquidity = 1
    .o;
/**
 * Encodes a `TotalVolumeForPoolRequest` protobuf message: =============================== TotalVolumeForPool
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTotalVolumeForPoolRequest = (sg_pool_id) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .o;
/**
 * Encodes a `TotalVolumeForPoolResponse` protobuf message:
 * @param a_volumes - `volume`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTotalVolumeForPoolResponse = (a_volumes) => Protobuf() // ...
    .B(coins(a_volumes)) // Coin[] volume = 1
    .o;
/**
 * Encodes a `TradingPairTakerFeeRequest` protobuf message: =============================== TradingPairTakerFee
 * @param s_denom_0 - `denom_0`:
 * @param s_denom_1 - `denom_1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTradingPairTakerFeeRequest = (s_denom_0, s_denom_1) => Protobuf() // ...
    .s(s_denom_0) // string denom_0 = 1
    .s(s_denom_1) // string denom_1 = 2
    .o;
/**
 * Encodes a `TradingPairTakerFeeResponse` protobuf message:
 * @param s_taker_fee - `taker_fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTradingPairTakerFeeResponse = (s_taker_fee) => Protobuf() // ...
    .s(s_taker_fee) // string taker_fee = 1
    .o;
/**
 * Encodes a `EstimateTradeBasedOnPriceImpactRequest` protobuf message: represents a request to estimate a trade for Balancer/StableSwap/Concentrated liquidity pool types based on the given parameters.
 * @param a_from_coin - `from_coin`: the total amount of tokens that the user wants to sell.
 * @param s_to_coin_denom - `to_coin_denom`: the denom identifier of the token that the user wants to buy.
 * @param sg_pool_id - `pool_id`: the identifier of the liquidity pool that the trade will occur on.
 * @param s_max_price_impact - `max_price_impact`: the maximum percentage that the user is willing to affect the price of the liquidity pool.
 * @param s_external_price - `external_price`: an optional external price that the user can enter. It adjusts the MaxPriceImpact as the SpotPrice of a pool can be changed at any time.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactRequest = (a_from_coin, s_to_coin_denom, sg_pool_id, s_max_price_impact, s_external_price) => Protobuf() // ...
    .b(coin(a_from_coin)) // Coin from_coin = 1
    .s(s_to_coin_denom) // string to_coin_denom = 2
    .g(sg_pool_id) // uint64 pool_id = 3
    .s(s_max_price_impact) // string max_price_impact = 4
    .s(s_external_price) // string external_price = 5
    .o;
/**
 * Encodes a `EstimateTradeBasedOnPriceImpactResponse` protobuf message: represents the response data for an estimated trade based on price impact. If a trade fails to be estimated the response would be 0,0 for input_coin and output_coin and will not error.
 * @param a_input_coin - `input_coin`: the actual input amount that would be tradeable under the specified price impact.
 * @param a_output_coin - `output_coin`: the amount of tokens of the ToCoinDenom type that will be received for the actual InputCoin trade.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactResponse = (a_input_coin, a_output_coin) => Protobuf() // ...
    .b(coin(a_input_coin)) // Coin input_coin = 1
    .b(coin(a_output_coin)) // Coin output_coin = 2
    .o;
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerParamsRequest}
 */
export const decodeOsmosisPoolmanagerParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerParamsResponse}
 */
export const decodeOsmosisPoolmanagerParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisPoolmanagerParams]);
/**
 * Decodes a protobuf EstimateSwapExactAmountInRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSwapExactAmountInRequest}
 */
export const decodeOsmosisPoolmanagerEstimateSwapExactAmountInRequest = ((atu8_payload, [, sg_pool_id, s_token_in, a_routes] = decode_protobuf(atu8_payload, [0, 3, 5, 0], [0, 0, 0, decodeOsmosisPoolmanagerSwapAmountInRoute])) => [__UNDEFINED, sg_pool_id, s_token_in, a_routes]);
/**
 * Decodes a protobuf EstimateSwapExactAmountInWithPrimitiveTypesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSwapExactAmountInWithPrimitiveTypesRequest}
 */
export const decodeOsmosisPoolmanagerEstimateSwapExactAmountInWithPrimitiveTypesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 2, 4]);
/**
 * Decodes a protobuf EstimateSinglePoolSwapExactAmountInRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountInRequest}
 */
export const decodeOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountInRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf EstimateSwapExactAmountIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSwapExactAmountInResponse}
 */
export const decodeOsmosisPoolmanagerEstimateSwapExactAmountInResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf EstimateSwapExactAmountOutRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSwapExactAmountOutRequest}
 */
export const decodeOsmosisPoolmanagerEstimateSwapExactAmountOutRequest = ((atu8_payload, [, sg_pool_id, a_routes, s_token_out] = decode_protobuf(atu8_payload, [0, 3, 0, 5], [0, 0, decodeOsmosisPoolmanagerSwapAmountOutRoute])) => [__UNDEFINED, sg_pool_id, a_routes, s_token_out]);
/**
 * Decodes a protobuf EstimateSwapExactAmountOutWithPrimitiveTypesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSwapExactAmountOutWithPrimitiveTypesRequest}
 */
export const decodeOsmosisPoolmanagerEstimateSwapExactAmountOutWithPrimitiveTypesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 2, 4, 5]);
/**
 * Decodes a protobuf EstimateSinglePoolSwapExactAmountOutRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountOutRequest}
 */
export const decodeOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountOutRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf EstimateSwapExactAmountOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateSwapExactAmountOutResponse}
 */
export const decodeOsmosisPoolmanagerEstimateSwapExactAmountOutResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf NumPoolsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerNumPoolsRequest}
 */
export const decodeOsmosisPoolmanagerNumPoolsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf NumPools message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerNumPoolsResponse}
 */
export const decodeOsmosisPoolmanagerNumPoolsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf PoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerPoolRequest}
 */
export const decodeOsmosisPoolmanagerPoolRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerPoolResponse}
 */
export const decodeOsmosisPoolmanagerPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf AllPoolsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerAllPoolsRequest}
 */
export const decodeOsmosisPoolmanagerAllPoolsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf AllPools message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerAllPoolsResponse}
 */
export const decodeOsmosisPoolmanagerAllPoolsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SpotPriceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerSpotPriceRequest}
 */
export const decodeOsmosisPoolmanagerSpotPriceRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf SpotPrice message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerSpotPriceResponse}
 */
export const decodeOsmosisPoolmanagerSpotPriceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf TotalPoolLiquidityRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTotalPoolLiquidityRequest}
 */
export const decodeOsmosisPoolmanagerTotalPoolLiquidityRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf TotalPoolLiquidity message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTotalPoolLiquidityResponse}
 */
export const decodeOsmosisPoolmanagerTotalPoolLiquidityResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf TotalLiquidityRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTotalLiquidityRequest}
 */
export const decodeOsmosisPoolmanagerTotalLiquidityRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf TotalLiquidity message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTotalLiquidityResponse}
 */
export const decodeOsmosisPoolmanagerTotalLiquidityResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf TotalVolumeForPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTotalVolumeForPoolRequest}
 */
export const decodeOsmosisPoolmanagerTotalVolumeForPoolRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf TotalVolumeForPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTotalVolumeForPoolResponse}
 */
export const decodeOsmosisPoolmanagerTotalVolumeForPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf TradingPairTakerFeeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTradingPairTakerFeeRequest}
 */
export const decodeOsmosisPoolmanagerTradingPairTakerFeeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf TradingPairTakerFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTradingPairTakerFeeResponse}
 */
export const decodeOsmosisPoolmanagerTradingPairTakerFeeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf EstimateTradeBasedOnPriceImpactRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactRequest}
 */
export const decodeOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3, 5, 5], [decode_coin]);
/**
 * Decodes a protobuf EstimateTradeBasedOnPriceImpact message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactResponse}
 */
export const decodeOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decode_coin, decode_coin]);
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisPoolmanagerParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_PARAMS_REQUEST = '/osmosis.poolmanager.v1beta1.ParamsRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export const destructOsmosisPoolmanagerParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_PARAMS_RESPONSE = '/osmosis.poolmanager.v1beta1.ParamsResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSwapExactAmountInRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: pool_id -
 *   - 2: token_in -
 *   - 3: routes -
 */
export const destructOsmosisPoolmanagerEstimateSwapExactAmountInRequest = (g_struct) => [__UNDEFINED, g_struct.pool_id, g_struct.token_in, g_struct.routes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SWAP_EXACT_AMOUNT_IN_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSwapExactAmountInWithPrimitiveTypesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: token_in -
 *   - 2: routes_pool_id -
 *   - 3: routes_token_out_denom -
 */
export const destructOsmosisPoolmanagerEstimateSwapExactAmountInWithPrimitiveTypesRequest = (g_struct) => [g_struct.pool_id, g_struct.token_in, g_struct.routes_pool_id, g_struct.routes_token_out_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SWAP_EXACT_AMOUNT_IN_WITH_PRIMITIVE_TYPES_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInWithPrimitiveTypesRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSinglePoolSwapExactAmountInRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: token_in -
 *   - 2: token_out_denom -
 */
export const destructOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountInRequest = (g_struct) => [g_struct.pool_id, g_struct.token_in, g_struct.token_out_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SINGLE_POOL_SWAP_EXACT_AMOUNT_IN_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountInRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSwapExactAmountInResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: token_out_amount -
 */
export const destructOsmosisPoolmanagerEstimateSwapExactAmountInResponse = (g_struct) => [g_struct.token_out_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SWAP_EXACT_AMOUNT_IN_RESPONSE = '/osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSwapExactAmountOutRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: pool_id -
 *   - 2: routes -
 *   - 3: token_out -
 */
export const destructOsmosisPoolmanagerEstimateSwapExactAmountOutRequest = (g_struct) => [__UNDEFINED, g_struct.pool_id, g_struct.routes, g_struct.token_out];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SWAP_EXACT_AMOUNT_OUT_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSwapExactAmountOutWithPrimitiveTypesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: routes_pool_id -
 *   - 2: routes_token_in_denom -
 *   - 3: token_out -
 */
export const destructOsmosisPoolmanagerEstimateSwapExactAmountOutWithPrimitiveTypesRequest = (g_struct) => [g_struct.pool_id, g_struct.routes_pool_id, g_struct.routes_token_in_denom, g_struct.token_out];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SWAP_EXACT_AMOUNT_OUT_WITH_PRIMITIVE_TYPES_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutWithPrimitiveTypesRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSinglePoolSwapExactAmountOutRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: token_in_denom -
 *   - 2: token_out -
 */
export const destructOsmosisPoolmanagerEstimateSinglePoolSwapExactAmountOutRequest = (g_struct) => [g_struct.pool_id, g_struct.token_in_denom, g_struct.token_out];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SINGLE_POOL_SWAP_EXACT_AMOUNT_OUT_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountOutRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateSwapExactAmountOutResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: token_in_amount -
 */
export const destructOsmosisPoolmanagerEstimateSwapExactAmountOutResponse = (g_struct) => [g_struct.token_in_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_SWAP_EXACT_AMOUNT_OUT_RESPONSE = '/osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerNumPoolsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisPoolmanagerNumPoolsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_NUM_POOLS_REQUEST = '/osmosis.poolmanager.v1beta1.NumPoolsRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerNumPoolsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: num_pools -
 */
export const destructOsmosisPoolmanagerNumPoolsResponse = (g_struct) => [g_struct.num_pools];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_NUM_POOLS_RESPONSE = '/osmosis.poolmanager.v1beta1.NumPoolsResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 */
export const destructOsmosisPoolmanagerPoolRequest = (g_struct) => [g_struct.pool_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_POOL_REQUEST = '/osmosis.poolmanager.v1beta1.PoolRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool -
 */
export const destructOsmosisPoolmanagerPoolResponse = (g_struct) => [g_struct.pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_POOL_RESPONSE = '/osmosis.poolmanager.v1beta1.PoolResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerAllPoolsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisPoolmanagerAllPoolsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ALL_POOLS_REQUEST = '/osmosis.poolmanager.v1beta1.AllPoolsRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerAllPoolsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pools -
 */
export const destructOsmosisPoolmanagerAllPoolsResponse = (g_struct) => [g_struct.pools];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ALL_POOLS_RESPONSE = '/osmosis.poolmanager.v1beta1.AllPoolsResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerSpotPriceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: base_asset_denom -
 *   - 2: quote_asset_denom -
 */
export const destructOsmosisPoolmanagerSpotPriceRequest = (g_struct) => [g_struct.pool_id, g_struct.base_asset_denom, g_struct.quote_asset_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_SPOT_PRICE_REQUEST = '/osmosis.poolmanager.v1beta1.SpotPriceRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerSpotPriceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: spot_price - String of the Dec. Ex) 10.203uatom
 */
export const destructOsmosisPoolmanagerSpotPriceResponse = (g_struct) => [g_struct.spot_price];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_SPOT_PRICE_RESPONSE = '/osmosis.poolmanager.v1beta1.SpotPriceResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTotalPoolLiquidityRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 */
export const destructOsmosisPoolmanagerTotalPoolLiquidityRequest = (g_struct) => [g_struct.pool_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TOTAL_POOL_LIQUIDITY_REQUEST = '/osmosis.poolmanager.v1beta1.TotalPoolLiquidityRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTotalPoolLiquidityResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: liquidity -
 */
export const destructOsmosisPoolmanagerTotalPoolLiquidityResponse = (g_struct) => [g_struct.liquidity];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TOTAL_POOL_LIQUIDITY_RESPONSE = '/osmosis.poolmanager.v1beta1.TotalPoolLiquidityResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTotalLiquidityRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisPoolmanagerTotalLiquidityRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TOTAL_LIQUIDITY_REQUEST = '/osmosis.poolmanager.v1beta1.TotalLiquidityRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTotalLiquidityResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: liquidity -
 */
export const destructOsmosisPoolmanagerTotalLiquidityResponse = (g_struct) => [g_struct.liquidity];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TOTAL_LIQUIDITY_RESPONSE = '/osmosis.poolmanager.v1beta1.TotalLiquidityResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTotalVolumeForPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 */
export const destructOsmosisPoolmanagerTotalVolumeForPoolRequest = (g_struct) => [g_struct.pool_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TOTAL_VOLUME_FOR_POOL_REQUEST = '/osmosis.poolmanager.v1beta1.TotalVolumeForPoolRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTotalVolumeForPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: volume -
 */
export const destructOsmosisPoolmanagerTotalVolumeForPoolResponse = (g_struct) => [g_struct.volume];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TOTAL_VOLUME_FOR_POOL_RESPONSE = '/osmosis.poolmanager.v1beta1.TotalVolumeForPoolResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTradingPairTakerFeeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_0 -
 *   - 1: denom_1 -
 */
export const destructOsmosisPoolmanagerTradingPairTakerFeeRequest = (g_struct) => [g_struct.denom_0, g_struct.denom_1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TRADING_PAIR_TAKER_FEE_REQUEST = '/osmosis.poolmanager.v1beta1.TradingPairTakerFeeRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTradingPairTakerFeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: taker_fee -
 */
export const destructOsmosisPoolmanagerTradingPairTakerFeeResponse = (g_struct) => [g_struct.taker_fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TRADING_PAIR_TAKER_FEE_RESPONSE = '/osmosis.poolmanager.v1beta1.TradingPairTakerFeeResponse';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateTradeBasedOnPriceImpactRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: from_coin - the total amount of tokens that the user wants to sell.
 *   - 1: to_coin_denom - the denom identifier of the token that the user wants to buy.
 *   - 2: pool_id - the identifier of the liquidity pool that the trade will occur on.
 *   - 3: max_price_impact - the maximum percentage that the user is willing to affect the price of the liquidity pool.
 *   - 4: external_price - an optional external price that the user can enter. It adjusts the MaxPriceImpact as the SpotPrice of a pool can be changed at any time.
 */
export const destructOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactRequest = (g_struct) => [g_struct.from_coin, g_struct.to_coin_denom, g_struct.pool_id, g_struct.max_price_impact, g_struct.external_price];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_TRADE_BASED_ON_PRICE_IMPACT_REQUEST = '/osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactRequest';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerEstimateTradeBasedOnPriceImpactResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: input_coin - the actual input amount that would be tradeable under the specified price impact.
 *   - 1: output_coin - the amount of tokens of the ToCoinDenom type that will be received for the actual InputCoin trade.
 */
export const destructOsmosisPoolmanagerEstimateTradeBasedOnPriceImpactResponse = (g_struct) => [g_struct.input_coin, g_struct.output_coin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_ESTIMATE_TRADE_BASED_ON_PRICE_IMPACT_RESPONSE = '/osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactResponse';
//# sourceMappingURL=query.js.map