import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisPoolmanagerTrackedVolume = Encoded<'/osmosis.poolmanager.v1beta1.TrackedVolume'>;
/**
 * Encodes a `TrackedVolume` protobuf message:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisPoolmanagerTrackedVolume: (a_amounts?: Opt<SlimCoin[]>) => EncodedOsmosisPoolmanagerTrackedVolume;
/**
 * A decoded protobuf TrackedVolume message
 *
 * Alias for: amount -
 */
export type DecodedOsmosisPoolmanagerTrackedVolume = [
    a_amount?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf TrackedVolume message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTrackedVolume}
 */
export declare const decodeOsmosisPoolmanagerTrackedVolume: (atu8_payload: Uint8Array) => DecodedOsmosisPoolmanagerTrackedVolume;
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTrackedVolume} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 */
export declare const destructOsmosisPoolmanagerTrackedVolume: (g_struct: OsmosisPoolmanagerTrackedVolume) => [amount?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TRACKED_VOLUME = "/osmosis.poolmanager.v1beta1.TrackedVolume";
/**
 * JSON serialization of `osmosis.poolmanager.v1beta1.TrackedVolume` -
 */
export type OsmosisPoolmanagerTrackedVolume = {
    amount?: CosmosBaseCoin[] | undefined;
};
