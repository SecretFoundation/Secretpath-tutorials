/// <reference types="node" />
import type { WeakUint64Str, SlimCoin, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
import type { OsmosisProtorevParams, DecodedOsmosisProtorevParams } from './params.js';
import type { OsmosisProtorevRouteStatistics, DecodedOsmosisProtorevRouteStatistics, OsmosisProtorevTokenPairArbRoutes, DecodedOsmosisProtorevTokenPairArbRoutes, OsmosisProtorevInfoByPoolType, DecodedOsmosisProtorevInfoByPoolType, OsmosisProtorevBaseDenom, DecodedOsmosisProtorevBaseDenom } from './protorev.js';
export type EncodedOsmosisProtorevQueryParamsRequest = Encoded<'/osmosis.protorev.v1beta1.QueryParamsRequest'>;
export type EncodedOsmosisProtorevQueryParamsResponse = Encoded<'/osmosis.protorev.v1beta1.QueryParamsResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevAllProfitsRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevAllProfitsResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevAdminAccountRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevAdminAccountResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevBaseDenomsRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevBaseDenomsResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevEnabledRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevEnabledResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse'>;
export type EncodedOsmosisProtorevQueryGetProtoRevPoolRequest = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest'>;
export type EncodedOsmosisProtorevQueryGetProtoRevPoolResponse = Encoded<'/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse'>;
/**
 * Queries the parameters of the module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export declare const queryOsmosisProtorevParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryParamsResponse>>;
/**
 * Queries the number of arbitrage trades the module has executed
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: number_of_trades - the number of trades the module has executed
 */
export declare const queryOsmosisProtorevGetProtoRevNumberOfTrades: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevNumberOfTradesResponse>>;
/**
 * Queries the profits of the module by denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - the denom to query profits by
 * @returns a tuple where:
 *   - 0: profit - the profits of the module by the selected denom
 */
export declare const queryOsmosisProtorevGetProtoRevProfitsByDenom: (z_req: string | ({
    origin: string;
} & RequestInit), s_denom?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevProfitsByDenomResponse>>;
/**
 * Queries all of the profits from the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: profits - a list of all of the profits from the module
 */
export declare const queryOsmosisProtorevGetProtoRevAllProfits: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevAllProfitsResponse>>;
/**
 * Queries the number of arbitrages and profits that have been executed for a given route
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param a_routes - the set of pool ids to query statistics by i.e. 1,2,3
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 */
export declare const queryOsmosisProtorevGetProtoRevStatisticsByRoute: (z_req: string | ({
    origin: string;
} & RequestInit), a_routes?: Opt<`${bigint}`[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse>>;
/**
 * Queries all of routes that the module has arbitraged against and the number of trades and profits that have been accumulated for each route
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 */
export declare const queryOsmosisProtorevGetProtoRevAllRouteStatistics: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse>>;
/**
 * Queries all of the hot routes that the module is currently arbitraging
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: routes - a list of all of the hot routes that the module is currently arbitraging
 */
export declare const queryOsmosisProtorevGetProtoRevTokenPairArbRoutes: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse>>;
/**
 * Queries the admin account of the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: admin_account - the admin account of the module
 */
export declare const queryOsmosisProtorevGetProtoRevAdminAccount: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevAdminAccountResponse>>;
/**
 * Queries the developer account of the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: developer_account - the developer account of the module
 */
export declare const queryOsmosisProtorevGetProtoRevDeveloperAccount: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevDeveloperAccountResponse>>;
/**
 * Queries pool type information that is currently being utilized by the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: info_by_pool_type - InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 */
export declare const queryOsmosisProtorevGetProtoRevInfoByPoolType: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse>>;
/**
 * Queries the maximum number of pool points that can be consumed per transaction
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction
 */
export declare const queryOsmosisProtorevGetProtoRevMaxPoolPointsPerTx: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse>>;
/**
 * Queries the maximum number of pool points that can consumed per block
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: max_pool_points_per_block - the maximum number of pool points that can be consumed per block
 */
export declare const queryOsmosisProtorevGetProtoRevMaxPoolPointsPerBlock: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse>>;
/**
 * Queries the base denoms that the module is currently utilizing for arbitrage
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: base_denoms - a list of all of the base denoms and step sizes
 */
export declare const queryOsmosisProtorevGetProtoRevBaseDenoms: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevBaseDenomsResponse>>;
/**
 * Queries whether the module is enabled or not
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: enabled - whether the module is enabled
 */
export declare const queryOsmosisProtorevGetProtoRevEnabled: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevEnabledResponse>>;
/**
 * Queries the pool id used via the highest liquidity method for arbitrage route building given a pair of denominations
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_base_denom - the base denom set in protorev for the denom pair to pool mapping
 * @param s_other_denom - the other denom for the denom pair to pool mapping
 * @returns a tuple where:
 *   - 0: pool_id - the pool_id stored for the denom pair
 */
export declare const queryOsmosisProtorevGetProtoRevPool: (z_req: string | ({
    origin: string;
} & RequestInit), s_base_denom?: Opt<string>, s_other_denom?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevQueryGetProtoRevPoolResponse>>;
/**
 * Encodes a `QueryParamsRequest` protobuf message: request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryParamsRequest: () => EncodedOsmosisProtorevQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: response type for the Query/Params RPC method.
 * @param g_params - `params`: holds all the parameters of this module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryParamsResponse: (atu8_params?: Opt<Encoded<'/osmosis.protorev.v1beta1.Params'>>) => EncodedOsmosisProtorevQueryParamsResponse;
/**
 * Encodes a `QueryGetProtoRevNumberOfTradesRequest` protobuf message: request type for the Query/GetProtoRevNumberOfTrades RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest: () => EncodedOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest;
/**
 * Encodes a `QueryGetProtoRevNumberOfTradesResponse` protobuf message: response type for the Query/GetProtoRevNumberOfTrades RPC method.
 * @param s_number_of_trades - `number_of_trades`: the number of trades the module has executed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse: (s_number_of_trades?: Opt<string>) => EncodedOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse;
/**
 * Encodes a `QueryGetProtoRevProfitsByDenomRequest` protobuf message: request type for the Query/GetProtoRevProfitsByDenom RPC method.
 * @param s_denom - `denom`: the denom to query profits by
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest: (s_denom?: Opt<string>) => EncodedOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest;
/**
 * Encodes a `QueryGetProtoRevProfitsByDenomResponse` protobuf message: response type for the Query/GetProtoRevProfitsByDenom RPC method.
 * @param a_profit - `profit`: the profits of the module by the selected denom
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse: (a_profit?: Opt<SlimCoin>) => EncodedOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse;
/**
 * Encodes a `QueryGetProtoRevAllProfitsRequest` protobuf message: request type for the Query/GetProtoRevAllProfits RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevAllProfitsRequest: () => EncodedOsmosisProtorevQueryGetProtoRevAllProfitsRequest;
/**
 * Encodes a `QueryGetProtoRevAllProfitsResponse` protobuf message: response type for the Query/GetProtoRevAllProfits RPC method.
 * @param a_profits - `profits`: a list of all of the profits from the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevAllProfitsResponse: (a_profits?: Opt<SlimCoin[]>) => EncodedOsmosisProtorevQueryGetProtoRevAllProfitsResponse;
/**
 * Encodes a `QueryGetProtoRevStatisticsByRouteRequest` protobuf message: QueryGetProtoRevStatisticsByPoolRequest is request type for the Query/GetProtoRevStatisticsByRoute RPC method.
 * @param a_routes - `route`: the set of pool ids to query statistics by i.e. 1,2,3
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest: (a_routes?: Opt<WeakUint64Str[]>) => EncodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest;
/**
 * Encodes a `QueryGetProtoRevStatisticsByRouteResponse` protobuf message: response type for the Query/GetProtoRevStatisticsByRoute RPC method.
 * @param g_statistics - `statistics`: contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse: (atu8_statistics?: Opt<Encoded<'/osmosis.protorev.v1beta1.RouteStatistics'>>) => EncodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse;
/**
 * Encodes a `QueryGetProtoRevAllRouteStatisticsRequest` protobuf message: request type for the Query/GetProtoRevAllRouteStatistics RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest: () => EncodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest;
/**
 * Encodes a `QueryGetProtoRevAllRouteStatisticsResponse` protobuf message: response type for the Query/GetProtoRevAllRouteStatistics RPC method.
 * @param a_statistics - `statistics`: contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse: (a_statistics?: Opt<Encoded<'/osmosis.protorev.v1beta1.RouteStatistics'>[]>) => EncodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse;
/**
 * Encodes a `QueryGetProtoRevTokenPairArbRoutesRequest` protobuf message: request type for the Query/GetProtoRevTokenPairArbRoutes RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest: () => EncodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest;
/**
 * Encodes a `QueryGetProtoRevTokenPairArbRoutesResponse` protobuf message: response type for the Query/GetProtoRevTokenPairArbRoutes RPC method.
 * @param a_routes - `routes`: a list of all of the hot routes that the module is currently arbitraging
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse: (a_routes?: Opt<Encoded<'/osmosis.protorev.v1beta1.TokenPairArbRoutes'>[]>) => EncodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse;
/**
 * Encodes a `QueryGetProtoRevAdminAccountRequest` protobuf message: request type for the Query/GetProtoRevAdminAccount RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevAdminAccountRequest: () => EncodedOsmosisProtorevQueryGetProtoRevAdminAccountRequest;
/**
 * Encodes a `QueryGetProtoRevAdminAccountResponse` protobuf message: response type for the Query/GetProtoRevAdminAccount RPC method.
 * @param s_admin_account - `admin_account`: the admin account of the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevAdminAccountResponse: (s_admin_account?: Opt<string>) => EncodedOsmosisProtorevQueryGetProtoRevAdminAccountResponse;
/**
 * Encodes a `QueryGetProtoRevDeveloperAccountRequest` protobuf message: request type for the Query/GetProtoRevDeveloperAccount RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest: () => EncodedOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest;
/**
 * Encodes a `QueryGetProtoRevDeveloperAccountResponse` protobuf message: response type for the Query/GetProtoRevDeveloperAccount RPC method.
 * @param s_developer_account - `developer_account`: the developer account of the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse: (s_developer_account?: Opt<string>) => EncodedOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse;
/**
 * Encodes a `QueryGetProtoRevInfoByPoolTypeRequest` protobuf message: request type for the Query/GetProtoRevInfoByPoolType RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest: () => EncodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest;
/**
 * Encodes a `QueryGetProtoRevInfoByPoolTypeResponse` protobuf message: response type for the Query/GetProtoRevInfoByPoolType RPC method.
 * @param g_info_by_pool_type - `info_by_pool_type`: InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse: (atu8_info_by_pool_type?: Opt<Encoded<'/osmosis.protorev.v1beta1.InfoByPoolType'>>) => EncodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerBlockRequest` protobuf message: request type for the Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest: () => EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerBlockResponse` protobuf message: response type for the Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 * @param sg_max_pool_points_per_block - `max_pool_points_per_block`: the maximum number of pool points that can be consumed per block
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse: (sg_max_pool_points_per_block?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerTxRequest` protobuf message: request type for the Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest: () => EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerTxResponse` protobuf message: response type for the Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 * @param sg_max_pool_points_per_tx - `max_pool_points_per_tx`: the maximum number of pool points that can be consumed per transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse: (sg_max_pool_points_per_tx?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse;
/**
 * Encodes a `QueryGetProtoRevBaseDenomsRequest` protobuf message: request type for the Query/GetProtoRevBaseDenoms RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevBaseDenomsRequest: () => EncodedOsmosisProtorevQueryGetProtoRevBaseDenomsRequest;
/**
 * Encodes a `QueryGetProtoRevBaseDenomsResponse` protobuf message: response type for the Query/GetProtoRevBaseDenoms RPC method.
 * @param a_base_denoms - `base_denoms`: a list of all of the base denoms and step sizes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevBaseDenomsResponse: (a_base_denoms?: Opt<Encoded<'/osmosis.protorev.v1beta1.BaseDenom'>[]>) => EncodedOsmosisProtorevQueryGetProtoRevBaseDenomsResponse;
/**
 * Encodes a `QueryGetProtoRevEnabledRequest` protobuf message: request type for the Query/GetProtoRevEnabled RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevEnabledRequest: () => EncodedOsmosisProtorevQueryGetProtoRevEnabledRequest;
/**
 * Encodes a `QueryGetProtoRevEnabledResponse` protobuf message: response type for the Query/GetProtoRevEnabled RPC method.
 * @param b_enabled - `enabled`: whether the module is enabled
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevEnabledResponse: (b_enabled?: Opt<boolean | 0 | 1>) => EncodedOsmosisProtorevQueryGetProtoRevEnabledResponse;
/**
 * Encodes a `QueryGetProtoRevPoolRequest` protobuf message: request type for the Query/GetProtoRevPool RPC method.
 * @param s_base_denom - `base_denom`: the base denom set in protorev for the denom pair to pool mapping
 * @param s_other_denom - `other_denom`: the other denom for the denom pair to pool mapping
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevPoolRequest: (s_base_denom?: Opt<string>, s_other_denom?: Opt<string>) => EncodedOsmosisProtorevQueryGetProtoRevPoolRequest;
/**
 * Encodes a `QueryGetProtoRevPoolResponse` protobuf message: response type for the Query/GetProtoRevPool RPC method.
 * @param sg_pool_id - `pool_id`: the pool_id stored for the denom pair
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevQueryGetProtoRevPoolResponse: (sg_pool_id?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevQueryGetProtoRevPoolResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryParamsRequest}
 */
export declare const decodeOsmosisProtorevQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - holds all the parameters of this module.
 */
export type DecodedOsmosisProtorevQueryParamsResponse = [
    a_params?: DecodedOsmosisProtorevParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryParamsResponse}
 */
export declare const decodeOsmosisProtorevQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryParamsResponse;
/**
 * A decoded protobuf QueryGetProtoRevNumberOfTradesRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevNumberOfTradesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevNumberOfTrades message
 *
 * Alias for: number_of_trades - the number of trades the module has executed
 */
export type DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse = [
    s_number_of_trades?: string
];
/**
 * Decodes a protobuf QueryGetProtoRevNumberOfTrades message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse;
/**
 * A decoded protobuf QueryGetProtoRevProfitsByDenomRequest message
 *
 * Alias for: denom - the denom to query profits by
 */
export type DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest = [
    s_denom?: string
];
/**
 * Decodes a protobuf QueryGetProtoRevProfitsByDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest;
/**
 * A decoded protobuf QueryGetProtoRevProfitsByDenom message
 *
 * Alias for: profit - the profits of the module by the selected denom
 */
export type DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse = [
    a_profit?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf QueryGetProtoRevProfitsByDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse;
/**
 * A decoded protobuf QueryGetProtoRevAllProfitsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevAllProfitsRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevAllProfitsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllProfitsRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevAllProfitsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevAllProfits message
 *
 * Alias for: profits - a list of all of the profits from the module
 */
export type DecodedOsmosisProtorevQueryGetProtoRevAllProfitsResponse = [
    a_profits?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf QueryGetProtoRevAllProfits message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllProfitsResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevAllProfitsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevAllProfitsResponse;
/**
 * A decoded protobuf QueryGetProtoRevStatisticsByRouteRequest message
 *
 * Alias for: route - the set of pool ids to query statistics by i.e. 1,2,3
 */
export type DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest = [
    a_routes?: CwUint64[]
];
/**
 * Decodes a protobuf QueryGetProtoRevStatisticsByRouteRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest;
/**
 * A decoded protobuf QueryGetProtoRevStatisticsByRoute message
 *
 * Alias for: statistics - contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 */
export type DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse = [
    a_statistics?: DecodedOsmosisProtorevRouteStatistics
];
/**
 * Decodes a protobuf QueryGetProtoRevStatisticsByRoute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse;
/**
 * A decoded protobuf QueryGetProtoRevAllRouteStatisticsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevAllRouteStatisticsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevAllRouteStatistics message
 *
 * Alias for: statistics - contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 */
export type DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse = [
    a_statistics?: DecodedOsmosisProtorevRouteStatistics[]
];
/**
 * Decodes a protobuf QueryGetProtoRevAllRouteStatistics message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse;
/**
 * A decoded protobuf QueryGetProtoRevTokenPairArbRoutesRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevTokenPairArbRoutesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevTokenPairArbRoutes message
 *
 * Alias for: routes - a list of all of the hot routes that the module is currently arbitraging
 */
export type DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse = [
    a_routes?: DecodedOsmosisProtorevTokenPairArbRoutes[]
];
/**
 * Decodes a protobuf QueryGetProtoRevTokenPairArbRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse;
/**
 * A decoded protobuf QueryGetProtoRevAdminAccountRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevAdminAccountRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevAdminAccountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAdminAccountRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevAdminAccountRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevAdminAccount message
 *
 * Alias for: admin_account - the admin account of the module
 */
export type DecodedOsmosisProtorevQueryGetProtoRevAdminAccountResponse = [
    s_admin_account?: string
];
/**
 * Decodes a protobuf QueryGetProtoRevAdminAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAdminAccountResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevAdminAccountResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevAdminAccountResponse;
/**
 * A decoded protobuf QueryGetProtoRevDeveloperAccountRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevDeveloperAccountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevDeveloperAccount message
 *
 * Alias for: developer_account - the developer account of the module
 */
export type DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse = [
    s_developer_account?: string
];
/**
 * Decodes a protobuf QueryGetProtoRevDeveloperAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse;
/**
 * A decoded protobuf QueryGetProtoRevInfoByPoolTypeRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevInfoByPoolTypeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevInfoByPoolType message
 *
 * Alias for: info_by_pool_type - InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 */
export type DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse = [
    a_info_by_pool_type?: DecodedOsmosisProtorevInfoByPoolType
];
/**
 * Decodes a protobuf QueryGetProtoRevInfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse;
/**
 * A decoded protobuf QueryGetProtoRevMaxPoolPointsPerBlockRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerBlockRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevMaxPoolPointsPerBlock message
 *
 * Alias for: max_pool_points_per_block - the maximum number of pool points that can be consumed per block
 */
export type DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse = [
    sg_max_pool_points_per_block?: CwUint64
];
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse;
/**
 * A decoded protobuf QueryGetProtoRevMaxPoolPointsPerTxRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerTxRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevMaxPoolPointsPerTx message
 *
 * Alias for: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction
 */
export type DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse = [
    sg_max_pool_points_per_tx?: CwUint64
];
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse;
/**
 * A decoded protobuf QueryGetProtoRevBaseDenomsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevBaseDenomsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevBaseDenomsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevBaseDenoms message
 *
 * Alias for: base_denoms - a list of all of the base denoms and step sizes
 */
export type DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsResponse = [
    a_base_denoms?: DecodedOsmosisProtorevBaseDenom[]
];
/**
 * Decodes a protobuf QueryGetProtoRevBaseDenoms message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevBaseDenomsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsResponse;
/**
 * A decoded protobuf QueryGetProtoRevEnabledRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevQueryGetProtoRevEnabledRequest = [];
/**
 * Decodes a protobuf QueryGetProtoRevEnabledRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevEnabledRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevEnabledRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryGetProtoRevEnabled message
 *
 * Alias for: enabled - whether the module is enabled
 */
export type DecodedOsmosisProtorevQueryGetProtoRevEnabledResponse = [
    b_enabled?: 0 | 1
];
/**
 * Decodes a protobuf QueryGetProtoRevEnabled message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevEnabledResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevEnabledResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevEnabledResponse;
/**
 * A decoded protobuf QueryGetProtoRevPoolRequest message
 *
 * Tuple where:
 *   - 0: base_denom - the base denom set in protorev for the denom pair to pool mapping
 *   - 1: other_denom - the other denom for the denom pair to pool mapping
 */
export type DecodedOsmosisProtorevQueryGetProtoRevPoolRequest = [
    s_base_denom?: string,
    s_other_denom?: string
];
/**
 * Decodes a protobuf QueryGetProtoRevPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevPoolRequest}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevPoolRequest: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevPoolRequest;
/**
 * A decoded protobuf QueryGetProtoRevPool message
 *
 * Alias for: pool_id - the pool_id stored for the denom pair
 */
export type DecodedOsmosisProtorevQueryGetProtoRevPoolResponse = [
    sg_pool_id?: CwUint64
];
/**
 * Decodes a protobuf QueryGetProtoRevPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevPoolResponse}
 */
export declare const decodeOsmosisProtorevQueryGetProtoRevPoolResponse: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevQueryGetProtoRevPoolResponse;
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryParamsRequest: (g_struct: OsmosisProtorevQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_PARAMS_REQUEST = "/osmosis.protorev.v1beta1.QueryParamsRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryParamsRequest` - request type for the Query/Params RPC method.
 */
export type OsmosisProtorevQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export declare const destructOsmosisProtorevQueryParamsResponse: (g_struct: OsmosisProtorevQueryParamsResponse) => [params?: OsmosisProtorevParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_PARAMS_RESPONSE = "/osmosis.protorev.v1beta1.QueryParamsResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryParamsResponse` - response type for the Query/Params RPC method.
 */
export type OsmosisProtorevQueryParamsResponse = {
    params?: OsmosisProtorevParams | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevNumberOfTradesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest: (g_struct: OsmosisProtorevQueryGetProtoRevNumberOfTradesRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_NUMBER_OF_TRADES_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest` - request type for the Query/GetProtoRevNumberOfTrades RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevNumberOfTradesRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevNumberOfTradesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: number_of_trades - the number of trades the module has executed
 */
export declare const destructOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse: (g_struct: OsmosisProtorevQueryGetProtoRevNumberOfTradesResponse) => [number_of_trades?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_NUMBER_OF_TRADES_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse` - response type for the Query/GetProtoRevNumberOfTrades RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevNumberOfTradesResponse = {
    number_of_trades?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevProfitsByDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - the denom to query profits by
 */
export declare const destructOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest: (g_struct: OsmosisProtorevQueryGetProtoRevProfitsByDenomRequest) => [denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_PROFITS_BY_DENOM_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest` - request type for the Query/GetProtoRevProfitsByDenom RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevProfitsByDenomRequest = {
    denom?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevProfitsByDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: profit - the profits of the module by the selected denom
 */
export declare const destructOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse: (g_struct: OsmosisProtorevQueryGetProtoRevProfitsByDenomResponse) => [profit?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_PROFITS_BY_DENOM_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse` - response type for the Query/GetProtoRevProfitsByDenom RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevProfitsByDenomResponse = {
    profit?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllProfitsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevAllProfitsRequest: (g_struct: OsmosisProtorevQueryGetProtoRevAllProfitsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_PROFITS_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest` - request type for the Query/GetProtoRevAllProfits RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevAllProfitsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllProfitsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: profits - a list of all of the profits from the module
 */
export declare const destructOsmosisProtorevQueryGetProtoRevAllProfitsResponse: (g_struct: OsmosisProtorevQueryGetProtoRevAllProfitsResponse) => [profits?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_PROFITS_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse` - response type for the Query/GetProtoRevAllProfits RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevAllProfitsResponse = {
    profits?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: route - the set of pool ids to query statistics by i.e. 1,2,3
 */
export declare const destructOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest: (g_struct: OsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest) => [route?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_STATISTICS_BY_ROUTE_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest` - QueryGetProtoRevStatisticsByPoolRequest is request type for the Query/GetProtoRevStatisticsByRoute RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest = {
    route?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 */
export declare const destructOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse: (g_struct: OsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse) => [statistics?: OsmosisProtorevRouteStatistics];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_STATISTICS_BY_ROUTE_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse` - response type for the Query/GetProtoRevStatisticsByRoute RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse = {
    statistics?: OsmosisProtorevRouteStatistics | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest: (g_struct: OsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_ROUTE_STATISTICS_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest` - request type for the Query/GetProtoRevAllRouteStatistics RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 */
export declare const destructOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse: (g_struct: OsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse) => [statistics?: OsmosisProtorevRouteStatistics[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_ROUTE_STATISTICS_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse` - response type for the Query/GetProtoRevAllRouteStatistics RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse = {
    statistics?: OsmosisProtorevRouteStatistics[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest: (g_struct: OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_TOKEN_PAIR_ARB_ROUTES_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest` - request type for the Query/GetProtoRevTokenPairArbRoutes RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: routes - a list of all of the hot routes that the module is currently arbitraging
 */
export declare const destructOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse: (g_struct: OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse) => [routes?: OsmosisProtorevTokenPairArbRoutes[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_TOKEN_PAIR_ARB_ROUTES_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse` - response type for the Query/GetProtoRevTokenPairArbRoutes RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse = {
    routes?: OsmosisProtorevTokenPairArbRoutes[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAdminAccountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevAdminAccountRequest: (g_struct: OsmosisProtorevQueryGetProtoRevAdminAccountRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ADMIN_ACCOUNT_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest` - request type for the Query/GetProtoRevAdminAccount RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevAdminAccountRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAdminAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin_account - the admin account of the module
 */
export declare const destructOsmosisProtorevQueryGetProtoRevAdminAccountResponse: (g_struct: OsmosisProtorevQueryGetProtoRevAdminAccountResponse) => [admin_account?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ADMIN_ACCOUNT_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse` - response type for the Query/GetProtoRevAdminAccount RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevAdminAccountResponse = {
    admin_account?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevDeveloperAccountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest: (g_struct: OsmosisProtorevQueryGetProtoRevDeveloperAccountRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_DEVELOPER_ACCOUNT_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest` - request type for the Query/GetProtoRevDeveloperAccount RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevDeveloperAccountRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevDeveloperAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: developer_account - the developer account of the module
 */
export declare const destructOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse: (g_struct: OsmosisProtorevQueryGetProtoRevDeveloperAccountResponse) => [developer_account?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_DEVELOPER_ACCOUNT_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse` - response type for the Query/GetProtoRevDeveloperAccount RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevDeveloperAccountResponse = {
    developer_account?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest: (g_struct: OsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_INFO_BY_POOL_TYPE_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest` - request type for the Query/GetProtoRevInfoByPoolType RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info_by_pool_type - InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 */
export declare const destructOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse: (g_struct: OsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse) => [info_by_pool_type?: OsmosisProtorevInfoByPoolType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_INFO_BY_POOL_TYPE_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse` - response type for the Query/GetProtoRevInfoByPoolType RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse = {
    info_by_pool_type?: OsmosisProtorevInfoByPoolType | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest: (g_struct: OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_BLOCK_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest` - request type for the Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_pool_points_per_block - the maximum number of pool points that can be consumed per block
 */
export declare const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse: (g_struct: OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse) => [max_pool_points_per_block?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_BLOCK_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse` - response type for the Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse = {
    max_pool_points_per_block?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest: (g_struct: OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_TX_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest` - request type for the Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction
 */
export declare const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse: (g_struct: OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse) => [max_pool_points_per_tx?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_TX_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse` - response type for the Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse = {
    max_pool_points_per_tx?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevBaseDenomsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevBaseDenomsRequest: (g_struct: OsmosisProtorevQueryGetProtoRevBaseDenomsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_BASE_DENOMS_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest` - request type for the Query/GetProtoRevBaseDenoms RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevBaseDenomsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevBaseDenomsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_denoms - a list of all of the base denoms and step sizes
 */
export declare const destructOsmosisProtorevQueryGetProtoRevBaseDenomsResponse: (g_struct: OsmosisProtorevQueryGetProtoRevBaseDenomsResponse) => [base_denoms?: OsmosisProtorevBaseDenom[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_BASE_DENOMS_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse` - response type for the Query/GetProtoRevBaseDenoms RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevBaseDenomsResponse = {
    base_denoms?: OsmosisProtorevBaseDenom[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevEnabledRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevQueryGetProtoRevEnabledRequest: (g_struct: OsmosisProtorevQueryGetProtoRevEnabledRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ENABLED_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest` - request type for the Query/GetProtoRevEnabled RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevEnabledRequest = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevEnabledResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: enabled - whether the module is enabled
 */
export declare const destructOsmosisProtorevQueryGetProtoRevEnabledResponse: (g_struct: OsmosisProtorevQueryGetProtoRevEnabledResponse) => [enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ENABLED_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse` - response type for the Query/GetProtoRevEnabled RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevEnabledResponse = {
    enabled?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_denom - the base denom set in protorev for the denom pair to pool mapping
 *   - 1: other_denom - the other denom for the denom pair to pool mapping
 */
export declare const destructOsmosisProtorevQueryGetProtoRevPoolRequest: (g_struct: OsmosisProtorevQueryGetProtoRevPoolRequest) => [base_denom?: string, other_denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_POOL_REQUEST = "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest` - request type for the Query/GetProtoRevPool RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevPoolRequest = {
    base_denom?: string | undefined;
    other_denom?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id - the pool_id stored for the denom pair
 */
export declare const destructOsmosisProtorevQueryGetProtoRevPoolResponse: (g_struct: OsmosisProtorevQueryGetProtoRevPoolResponse) => [pool_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_POOL_RESPONSE = "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse` - response type for the Query/GetProtoRevPool RPC method.
 */
export type OsmosisProtorevQueryGetProtoRevPoolResponse = {
    pool_id?: CwUint64 | undefined;
};
