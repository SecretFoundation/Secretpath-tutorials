/// <reference types="node" />
import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisProtorevTokenPairArbRoutes, DecodedOsmosisProtorevTokenPairArbRoutes, OsmosisProtorevInfoByPoolType, DecodedOsmosisProtorevInfoByPoolType, OsmosisProtorevBaseDenom, DecodedOsmosisProtorevBaseDenom } from './protorev.js';
export type EncodedOsmosisProtorevMsgSetHotRoutes = Encoded<'/osmosis.protorev.v1beta1.MsgSetHotRoutes'>;
export type EncodedOsmosisProtorevMsgSetHotRoutesResponse = Encoded<'/osmosis.protorev.v1beta1.MsgSetHotRoutesResponse'>;
export type EncodedOsmosisProtorevMsgSetDeveloperAccount = Encoded<'/osmosis.protorev.v1beta1.MsgSetDeveloperAccount'>;
export type EncodedOsmosisProtorevMsgSetDeveloperAccountResponse = Encoded<'/osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse'>;
export type EncodedOsmosisProtorevMsgSetInfoByPoolType = Encoded<'/osmosis.protorev.v1beta1.MsgSetInfoByPoolType'>;
export type EncodedOsmosisProtorevMsgSetInfoByPoolTypeResponse = Encoded<'/osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse'>;
export type EncodedOsmosisProtorevMsgSetMaxPoolPointsPerTx = Encoded<'/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx'>;
export type EncodedOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse = Encoded<'/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse'>;
export type EncodedOsmosisProtorevMsgSetMaxPoolPointsPerBlock = Encoded<'/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock'>;
export type EncodedOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse = Encoded<'/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse'>;
export type EncodedOsmosisProtorevMsgSetBaseDenoms = Encoded<'/osmosis.protorev.v1beta1.MsgSetBaseDenoms'>;
export type EncodedOsmosisProtorevMsgSetBaseDenomsResponse = Encoded<'/osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse'>;
/**
 * Sets the hot routes that will be explored when creating cyclic arbitrage routes. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the hot routes.
 * @param a_hot_routes - the list of hot routes to set.
 * @returns an empty tuple
 */
export declare const submitOsmosisProtorevSetHotRoutes: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, a_hot_routes?: Opt<OsmosisProtorevTokenPairArbRoutes[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevMsgSetHotRoutesResponse>>;
/**
 * Sets the account that can withdraw a portion of the profits from the protorev module. This will be Skip's address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the developer account.
 * @param s_developer_account - the account that will receive a portion of the profits from the protorev module.
 * @returns an empty tuple
 */
export declare const submitOsmosisProtorevSetDeveloperAccount: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, s_developer_account?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevMsgSetDeveloperAccountResponse>>;
/**
 * Sets the maximum number of pool points that can be consumed per transaction. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the max pool points per tx.
 * @param sg_max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction.
 * @returns an empty tuple
 */
export declare const submitOsmosisProtorevSetMaxPoolPointsPerTx: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, sg_max_pool_points_per_tx?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevMsgSetMaxPoolPointsPerTxResponse>>;
/**
 * Sets the maximum number of pool points that can be consumed per block. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the max pool points per block.
 * @param sg_max_pool_points_per_block - the maximum number of pool points that can be consumed per block.
 * @returns an empty tuple
 */
export declare const submitOsmosisProtorevSetMaxPoolPointsPerBlock: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, sg_max_pool_points_per_block?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse>>;
/**
 * Sets the pool type information needed to make smart assumptions about swapping on different pool types
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the pool weights.
 * @param g_info_by_pool_type - contains information about the pool types.
 * @returns an empty tuple
 */
export declare const submitOsmosisProtorevSetInfoByPoolType: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, g_info_by_pool_type?: Opt<OsmosisProtorevInfoByPoolType>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevMsgSetInfoByPoolTypeResponse>>;
/**
 * Sets the base denoms that will be used to create cyclic arbitrage routes. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the base denoms.
 * @param a_base_denoms - the list of base denoms to set.
 * @returns an empty tuple
 */
export declare const submitOsmosisProtorevSetBaseDenoms: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, a_base_denoms?: Opt<OsmosisProtorevBaseDenom[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisProtorevMsgSetBaseDenomsResponse>>;
/**
 * Encodes a `MsgSetHotRoutes` protobuf message: defines the Msg/SetHotRoutes request type.
 * @param s_admin - `admin`: the account that is authorized to set the hot routes.
 * @param a_hot_routes - `hot_routes`: the list of hot routes to set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetHotRoutes: (s_admin?: Opt<string>, a_hot_routes?: Opt<Encoded<'/osmosis.protorev.v1beta1.TokenPairArbRoutes'>[]>) => EncodedOsmosisProtorevMsgSetHotRoutes;
/**
 * Encodes a `MsgSetHotRoutesResponse` protobuf message: defines the Msg/SetHotRoutes response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetHotRoutesResponse: () => EncodedOsmosisProtorevMsgSetHotRoutesResponse;
/**
 * Encodes a `MsgSetDeveloperAccount` protobuf message: defines the Msg/SetDeveloperAccount request type.
 * @param s_admin - `admin`: the account that is authorized to set the developer account.
 * @param s_developer_account - `developer_account`: the account that will receive a portion of the profits from the protorev module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetDeveloperAccount: (s_admin?: Opt<string>, s_developer_account?: Opt<string>) => EncodedOsmosisProtorevMsgSetDeveloperAccount;
/**
 * Encodes a `MsgSetDeveloperAccountResponse` protobuf message: defines the Msg/SetDeveloperAccount response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetDeveloperAccountResponse: () => EncodedOsmosisProtorevMsgSetDeveloperAccountResponse;
/**
 * Encodes a `MsgSetInfoByPoolType` protobuf message: defines the Msg/SetInfoByPoolType request type.
 * @param s_admin - `admin`: the account that is authorized to set the pool weights.
 * @param g_info_by_pool_type - `info_by_pool_type`: contains information about the pool types.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetInfoByPoolType: (s_admin?: Opt<string>, atu8_info_by_pool_type?: Opt<Encoded<'/osmosis.protorev.v1beta1.InfoByPoolType'>>) => EncodedOsmosisProtorevMsgSetInfoByPoolType;
/**
 * Encodes a `MsgSetInfoByPoolTypeResponse` protobuf message: defines the Msg/SetInfoByPoolType response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetInfoByPoolTypeResponse: () => EncodedOsmosisProtorevMsgSetInfoByPoolTypeResponse;
/**
 * Encodes a `MsgSetMaxPoolPointsPerTx` protobuf message: defines the Msg/SetMaxPoolPointsPerTx request type.
 * @param s_admin - `admin`: the account that is authorized to set the max pool points per tx.
 * @param sg_max_pool_points_per_tx - `max_pool_points_per_tx`: the maximum number of pool points that can be consumed per transaction.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetMaxPoolPointsPerTx: (s_admin?: Opt<string>, sg_max_pool_points_per_tx?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevMsgSetMaxPoolPointsPerTx;
/**
 * Encodes a `MsgSetMaxPoolPointsPerTxResponse` protobuf message: defines the Msg/SetMaxPoolPointsPerTx response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse: () => EncodedOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse;
/**
 * Encodes a `MsgSetMaxPoolPointsPerBlock` protobuf message: defines the Msg/SetMaxPoolPointsPerBlock request type.
 * @param s_admin - `admin`: the account that is authorized to set the max pool points per block.
 * @param sg_max_pool_points_per_block - `max_pool_points_per_block`: the maximum number of pool points that can be consumed per block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetMaxPoolPointsPerBlock: (s_admin?: Opt<string>, sg_max_pool_points_per_block?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevMsgSetMaxPoolPointsPerBlock;
/**
 * Encodes a `MsgSetMaxPoolPointsPerBlockResponse` protobuf message: defines the Msg/SetMaxPoolPointsPerBlock response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse: () => EncodedOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse;
/**
 * Encodes a `MsgSetBaseDenoms` protobuf message: defines the Msg/SetBaseDenoms request type.
 * @param s_admin - `admin`: the account that is authorized to set the base denoms.
 * @param a_base_denoms - `base_denoms`: the list of base denoms to set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetBaseDenoms: (s_admin?: Opt<string>, a_base_denoms?: Opt<Encoded<'/osmosis.protorev.v1beta1.BaseDenom'>[]>) => EncodedOsmosisProtorevMsgSetBaseDenoms;
/**
 * Encodes a `MsgSetBaseDenomsResponse` protobuf message: defines the Msg/SetBaseDenoms response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevMsgSetBaseDenomsResponse: () => EncodedOsmosisProtorevMsgSetBaseDenomsResponse;
/**
 * A decoded protobuf SetHotRoutes message
 *
 * Tuple where:
 *   - 0: admin - the account that is authorized to set the hot routes.
 *   - 1: hot_routes - the list of hot routes to set.
 */
export type DecodedOsmosisProtorevMsgSetHotRoutes = [
    s_admin?: string,
    a_hot_routes?: DecodedOsmosisProtorevTokenPairArbRoutes[]
];
/**
 * Decodes a protobuf SetHotRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetHotRoutes}
 */
export declare const decodeOsmosisProtorevMsgSetHotRoutes: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevMsgSetHotRoutes;
/**
 * A decoded protobuf SetHotRoutes message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevMsgSetHotRoutesResponse = [];
/**
 * Decodes a protobuf SetHotRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetHotRoutesResponse}
 */
export declare const decodeOsmosisProtorevMsgSetHotRoutesResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetDeveloperAccount message
 *
 * Tuple where:
 *   - 0: admin - the account that is authorized to set the developer account.
 *   - 1: developer_account - the account that will receive a portion of the profits from the protorev module.
 */
export type DecodedOsmosisProtorevMsgSetDeveloperAccount = [
    s_admin?: string,
    s_developer_account?: string
];
/**
 * Decodes a protobuf SetDeveloperAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetDeveloperAccount}
 */
export declare const decodeOsmosisProtorevMsgSetDeveloperAccount: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevMsgSetDeveloperAccount;
/**
 * A decoded protobuf SetDeveloperAccount message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevMsgSetDeveloperAccountResponse = [];
/**
 * Decodes a protobuf SetDeveloperAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetDeveloperAccountResponse}
 */
export declare const decodeOsmosisProtorevMsgSetDeveloperAccountResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetInfoByPoolType message
 *
 * Tuple where:
 *   - 0: admin - the account that is authorized to set the pool weights.
 *   - 1: info_by_pool_type - contains information about the pool types.
 */
export type DecodedOsmosisProtorevMsgSetInfoByPoolType = [
    s_admin?: string,
    a_info_by_pool_type?: DecodedOsmosisProtorevInfoByPoolType
];
/**
 * Decodes a protobuf SetInfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetInfoByPoolType}
 */
export declare const decodeOsmosisProtorevMsgSetInfoByPoolType: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevMsgSetInfoByPoolType;
/**
 * A decoded protobuf SetInfoByPoolType message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevMsgSetInfoByPoolTypeResponse = [];
/**
 * Decodes a protobuf SetInfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetInfoByPoolTypeResponse}
 */
export declare const decodeOsmosisProtorevMsgSetInfoByPoolTypeResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetMaxPoolPointsPerTx message
 *
 * Tuple where:
 *   - 0: admin - the account that is authorized to set the max pool points per tx.
 *   - 1: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction.
 */
export type DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTx = [
    s_admin?: string,
    sg_max_pool_points_per_tx?: CwUint64
];
/**
 * Decodes a protobuf SetMaxPoolPointsPerTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTx}
 */
export declare const decodeOsmosisProtorevMsgSetMaxPoolPointsPerTx: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTx;
/**
 * A decoded protobuf SetMaxPoolPointsPerTx message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse = [];
/**
 * Decodes a protobuf SetMaxPoolPointsPerTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse}
 */
export declare const decodeOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetMaxPoolPointsPerBlock message
 *
 * Tuple where:
 *   - 0: admin - the account that is authorized to set the max pool points per block.
 *   - 1: max_pool_points_per_block - the maximum number of pool points that can be consumed per block.
 */
export type DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlock = [
    s_admin?: string,
    sg_max_pool_points_per_block?: CwUint64
];
/**
 * Decodes a protobuf SetMaxPoolPointsPerBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlock}
 */
export declare const decodeOsmosisProtorevMsgSetMaxPoolPointsPerBlock: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlock;
/**
 * A decoded protobuf SetMaxPoolPointsPerBlock message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse = [];
/**
 * Decodes a protobuf SetMaxPoolPointsPerBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse}
 */
export declare const decodeOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetBaseDenoms message
 *
 * Tuple where:
 *   - 0: admin - the account that is authorized to set the base denoms.
 *   - 1: base_denoms - the list of base denoms to set.
 */
export type DecodedOsmosisProtorevMsgSetBaseDenoms = [
    s_admin?: string,
    a_base_denoms?: DecodedOsmosisProtorevBaseDenom[]
];
/**
 * Decodes a protobuf SetBaseDenoms message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetBaseDenoms}
 */
export declare const decodeOsmosisProtorevMsgSetBaseDenoms: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevMsgSetBaseDenoms;
/**
 * A decoded protobuf SetBaseDenoms message
 *
 * Tuple where:
 */
export type DecodedOsmosisProtorevMsgSetBaseDenomsResponse = [];
/**
 * Decodes a protobuf SetBaseDenoms message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetBaseDenomsResponse}
 */
export declare const decodeOsmosisProtorevMsgSetBaseDenomsResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetHotRoutes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the hot routes.
 *   - 1: hot_routes - the list of hot routes to set.
 */
export declare const destructOsmosisProtorevMsgSetHotRoutes: (g_struct: OsmosisProtorevMsgSetHotRoutes) => [admin?: string, hot_routes?: OsmosisProtorevTokenPairArbRoutes[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_HOT_ROUTES = "/osmosis.protorev.v1beta1.MsgSetHotRoutes";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetHotRoutes` - defines the Msg/SetHotRoutes request type.
 */
export type OsmosisProtorevMsgSetHotRoutes = {
    admin?: string | undefined;
    hot_routes?: OsmosisProtorevTokenPairArbRoutes[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetHotRoutesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevMsgSetHotRoutesResponse: (g_struct: OsmosisProtorevMsgSetHotRoutesResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_HOT_ROUTES_RESPONSE = "/osmosis.protorev.v1beta1.MsgSetHotRoutesResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetHotRoutesResponse` - defines the Msg/SetHotRoutes response type.
 */
export type OsmosisProtorevMsgSetHotRoutesResponse = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetDeveloperAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the developer account.
 *   - 1: developer_account - the account that will receive a portion of the profits from the protorev module.
 */
export declare const destructOsmosisProtorevMsgSetDeveloperAccount: (g_struct: OsmosisProtorevMsgSetDeveloperAccount) => [admin?: string, developer_account?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_DEVELOPER_ACCOUNT = "/osmosis.protorev.v1beta1.MsgSetDeveloperAccount";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetDeveloperAccount` - defines the Msg/SetDeveloperAccount request type.
 */
export type OsmosisProtorevMsgSetDeveloperAccount = {
    admin?: string | undefined;
    developer_account?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetDeveloperAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevMsgSetDeveloperAccountResponse: (g_struct: OsmosisProtorevMsgSetDeveloperAccountResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_DEVELOPER_ACCOUNT_RESPONSE = "/osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse` - defines the Msg/SetDeveloperAccount response type.
 */
export type OsmosisProtorevMsgSetDeveloperAccountResponse = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetInfoByPoolType} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the pool weights.
 *   - 1: info_by_pool_type - contains information about the pool types.
 */
export declare const destructOsmosisProtorevMsgSetInfoByPoolType: (g_struct: OsmosisProtorevMsgSetInfoByPoolType) => [admin?: string, info_by_pool_type?: OsmosisProtorevInfoByPoolType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_INFO_BY_POOL_TYPE = "/osmosis.protorev.v1beta1.MsgSetInfoByPoolType";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetInfoByPoolType` - defines the Msg/SetInfoByPoolType request type.
 */
export type OsmosisProtorevMsgSetInfoByPoolType = {
    admin?: string | undefined;
    info_by_pool_type?: OsmosisProtorevInfoByPoolType | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetInfoByPoolTypeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevMsgSetInfoByPoolTypeResponse: (g_struct: OsmosisProtorevMsgSetInfoByPoolTypeResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_INFO_BY_POOL_TYPE_RESPONSE = "/osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse` - defines the Msg/SetInfoByPoolType response type.
 */
export type OsmosisProtorevMsgSetInfoByPoolTypeResponse = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerTx} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the max pool points per tx.
 *   - 1: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction.
 */
export declare const destructOsmosisProtorevMsgSetMaxPoolPointsPerTx: (g_struct: OsmosisProtorevMsgSetMaxPoolPointsPerTx) => [admin?: string, max_pool_points_per_tx?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_TX = "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx` - defines the Msg/SetMaxPoolPointsPerTx request type.
 */
export type OsmosisProtorevMsgSetMaxPoolPointsPerTx = {
    admin?: string | undefined;
    max_pool_points_per_tx?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse: (g_struct: OsmosisProtorevMsgSetMaxPoolPointsPerTxResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_TX_RESPONSE = "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse` - defines the Msg/SetMaxPoolPointsPerTx response type.
 */
export type OsmosisProtorevMsgSetMaxPoolPointsPerTxResponse = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the max pool points per block.
 *   - 1: max_pool_points_per_block - the maximum number of pool points that can be consumed per block.
 */
export declare const destructOsmosisProtorevMsgSetMaxPoolPointsPerBlock: (g_struct: OsmosisProtorevMsgSetMaxPoolPointsPerBlock) => [admin?: string, max_pool_points_per_block?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_BLOCK = "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock` - defines the Msg/SetMaxPoolPointsPerBlock request type.
 */
export type OsmosisProtorevMsgSetMaxPoolPointsPerBlock = {
    admin?: string | undefined;
    max_pool_points_per_block?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse: (g_struct: OsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_BLOCK_RESPONSE = "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse` - defines the Msg/SetMaxPoolPointsPerBlock response type.
 */
export type OsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse = {};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetBaseDenoms} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the base denoms.
 *   - 1: base_denoms - the list of base denoms to set.
 */
export declare const destructOsmosisProtorevMsgSetBaseDenoms: (g_struct: OsmosisProtorevMsgSetBaseDenoms) => [admin?: string, base_denoms?: OsmosisProtorevBaseDenom[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_BASE_DENOMS = "/osmosis.protorev.v1beta1.MsgSetBaseDenoms";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetBaseDenoms` - defines the Msg/SetBaseDenoms request type.
 */
export type OsmosisProtorevMsgSetBaseDenoms = {
    admin?: string | undefined;
    base_denoms?: OsmosisProtorevBaseDenom[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetBaseDenomsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisProtorevMsgSetBaseDenomsResponse: (g_struct: OsmosisProtorevMsgSetBaseDenomsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_BASE_DENOMS_RESPONSE = "/osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse` - defines the Msg/SetBaseDenoms response type.
 */
export type OsmosisProtorevMsgSetBaseDenomsResponse = {};
