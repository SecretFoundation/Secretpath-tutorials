import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeOsmosisProtorevTokenPairArbRoutes, decodeOsmosisProtorevInfoByPoolType, decodeOsmosisProtorevBaseDenom } from './protorev.js';
const SR_LCD_OSMOSIS_PROTOREV_MSG = '/osmosis/protorev/set_';
/**
 * Sets the hot routes that will be explored when creating cyclic arbitrage routes. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the hot routes.
 * @param a_hot_routes - the list of hot routes to set.
 * @returns an empty tuple
 */
export const submitOsmosisProtorevSetHotRoutes = restful_grpc((s_admin, a_hot_routes) => [SR_LCD_OSMOSIS_PROTOREV_MSG + 'hot_routes', {
        admin: s_admin,
        hot_routes: a_hot_routes,
    }], 1);
/**
 * Sets the account that can withdraw a portion of the profits from the protorev module. This will be Skip's address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the developer account.
 * @param s_developer_account - the account that will receive a portion of the profits from the protorev module.
 * @returns an empty tuple
 */
export const submitOsmosisProtorevSetDeveloperAccount = restful_grpc((s_admin, s_developer_account) => [SR_LCD_OSMOSIS_PROTOREV_MSG + 'developer_account', {
        admin: s_admin,
        developer_account: s_developer_account,
    }], 1);
/**
 * Sets the maximum number of pool points that can be consumed per transaction. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the max pool points per tx.
 * @param sg_max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction.
 * @returns an empty tuple
 */
export const submitOsmosisProtorevSetMaxPoolPointsPerTx = restful_grpc((s_admin, sg_max_pool_points_per_tx) => [SR_LCD_OSMOSIS_PROTOREV_MSG + 'max_pool_points_per_tx', {
        admin: s_admin,
        max_pool_points_per_tx: sg_max_pool_points_per_tx,
    }], 1);
/**
 * Sets the maximum number of pool points that can be consumed per block. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the max pool points per block.
 * @param sg_max_pool_points_per_block - the maximum number of pool points that can be consumed per block.
 * @returns an empty tuple
 */
export const submitOsmosisProtorevSetMaxPoolPointsPerBlock = restful_grpc((s_admin, sg_max_pool_points_per_block) => [SR_LCD_OSMOSIS_PROTOREV_MSG + 'max_pool_points_per_block', {
        admin: s_admin,
        max_pool_points_per_block: sg_max_pool_points_per_block,
    }], 1);
/**
 * Sets the pool type information needed to make smart assumptions about swapping on different pool types
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the pool weights.
 * @param g_info_by_pool_type - contains information about the pool types.
 * @returns an empty tuple
 */
export const submitOsmosisProtorevSetInfoByPoolType = restful_grpc((s_admin, g_info_by_pool_type) => [SR_LCD_OSMOSIS_PROTOREV_MSG + 'info_by_pool_type', {
        admin: s_admin,
        info_by_pool_type: g_info_by_pool_type,
    }], 1);
/**
 * Sets the base denoms that will be used to create cyclic arbitrage routes. Can only be called by the admin account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account that is authorized to set the base denoms.
 * @param a_base_denoms - the list of base denoms to set.
 * @returns an empty tuple
 */
export const submitOsmosisProtorevSetBaseDenoms = restful_grpc((s_admin, a_base_denoms) => [SR_LCD_OSMOSIS_PROTOREV_MSG + 'base_denoms', {
        admin: s_admin,
        base_denoms: a_base_denoms,
    }], 1);
/**
 * Encodes a `MsgSetHotRoutes` protobuf message: defines the Msg/SetHotRoutes request type.
 * @param s_admin - `admin`: the account that is authorized to set the hot routes.
 * @param a_hot_routes - `hot_routes`: the list of hot routes to set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetHotRoutes = (s_admin, a_hot_routes) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .B(a_hot_routes) // TokenPairArbRoutes[] hot_routes = 2
    .o;
/**
 * Encodes a `MsgSetHotRoutesResponse` protobuf message: defines the Msg/SetHotRoutes response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetHotRoutesResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetDeveloperAccount` protobuf message: defines the Msg/SetDeveloperAccount request type.
 * @param s_admin - `admin`: the account that is authorized to set the developer account.
 * @param s_developer_account - `developer_account`: the account that will receive a portion of the profits from the protorev module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetDeveloperAccount = (s_admin, s_developer_account) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .s(s_developer_account) // string developer_account = 2
    .o;
/**
 * Encodes a `MsgSetDeveloperAccountResponse` protobuf message: defines the Msg/SetDeveloperAccount response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetDeveloperAccountResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetInfoByPoolType` protobuf message: defines the Msg/SetInfoByPoolType request type.
 * @param s_admin - `admin`: the account that is authorized to set the pool weights.
 * @param g_info_by_pool_type - `info_by_pool_type`: contains information about the pool types.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetInfoByPoolType = (s_admin, atu8_info_by_pool_type) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .b(atu8_info_by_pool_type) // InfoByPoolType info_by_pool_type = 2
    .o;
/**
 * Encodes a `MsgSetInfoByPoolTypeResponse` protobuf message: defines the Msg/SetInfoByPoolType response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetInfoByPoolTypeResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetMaxPoolPointsPerTx` protobuf message: defines the Msg/SetMaxPoolPointsPerTx request type.
 * @param s_admin - `admin`: the account that is authorized to set the max pool points per tx.
 * @param sg_max_pool_points_per_tx - `max_pool_points_per_tx`: the maximum number of pool points that can be consumed per transaction.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetMaxPoolPointsPerTx = (s_admin, sg_max_pool_points_per_tx) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .g(sg_max_pool_points_per_tx) // uint64 max_pool_points_per_tx = 2
    .o;
/**
 * Encodes a `MsgSetMaxPoolPointsPerTxResponse` protobuf message: defines the Msg/SetMaxPoolPointsPerTx response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetMaxPoolPointsPerBlock` protobuf message: defines the Msg/SetMaxPoolPointsPerBlock request type.
 * @param s_admin - `admin`: the account that is authorized to set the max pool points per block.
 * @param sg_max_pool_points_per_block - `max_pool_points_per_block`: the maximum number of pool points that can be consumed per block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetMaxPoolPointsPerBlock = (s_admin, sg_max_pool_points_per_block) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .g(sg_max_pool_points_per_block) // uint64 max_pool_points_per_block = 2
    .o;
/**
 * Encodes a `MsgSetMaxPoolPointsPerBlockResponse` protobuf message: defines the Msg/SetMaxPoolPointsPerBlock response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetBaseDenoms` protobuf message: defines the Msg/SetBaseDenoms request type.
 * @param s_admin - `admin`: the account that is authorized to set the base denoms.
 * @param a_base_denoms - `base_denoms`: the list of base denoms to set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetBaseDenoms = (s_admin, a_base_denoms) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .B(a_base_denoms) // BaseDenom[] base_denoms = 2
    .o;
/**
 * Encodes a `MsgSetBaseDenomsResponse` protobuf message: defines the Msg/SetBaseDenoms response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevMsgSetBaseDenomsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf SetHotRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetHotRoutes}
 */
export const decodeOsmosisProtorevMsgSetHotRoutes = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeOsmosisProtorevTokenPairArbRoutes]);
/**
 * Decodes a protobuf SetHotRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetHotRoutesResponse}
 */
export const decodeOsmosisProtorevMsgSetHotRoutesResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetDeveloperAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetDeveloperAccount}
 */
export const decodeOsmosisProtorevMsgSetDeveloperAccount = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf SetDeveloperAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetDeveloperAccountResponse}
 */
export const decodeOsmosisProtorevMsgSetDeveloperAccountResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetInfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetInfoByPoolType}
 */
export const decodeOsmosisProtorevMsgSetInfoByPoolType = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeOsmosisProtorevInfoByPoolType]);
/**
 * Decodes a protobuf SetInfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetInfoByPoolTypeResponse}
 */
export const decodeOsmosisProtorevMsgSetInfoByPoolTypeResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetMaxPoolPointsPerTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTx}
 */
export const decodeOsmosisProtorevMsgSetMaxPoolPointsPerTx = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf SetMaxPoolPointsPerTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse}
 */
export const decodeOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetMaxPoolPointsPerBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlock}
 */
export const decodeOsmosisProtorevMsgSetMaxPoolPointsPerBlock = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf SetMaxPoolPointsPerBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse}
 */
export const decodeOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetBaseDenoms message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetBaseDenoms}
 */
export const decodeOsmosisProtorevMsgSetBaseDenoms = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeOsmosisProtorevBaseDenom]);
/**
 * Decodes a protobuf SetBaseDenoms message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevMsgSetBaseDenomsResponse}
 */
export const decodeOsmosisProtorevMsgSetBaseDenomsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetHotRoutes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the hot routes.
 *   - 1: hot_routes - the list of hot routes to set.
 */
export const destructOsmosisProtorevMsgSetHotRoutes = (g_struct) => [g_struct.admin, g_struct.hot_routes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_HOT_ROUTES = '/osmosis.protorev.v1beta1.MsgSetHotRoutes';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetHotRoutesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevMsgSetHotRoutesResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_HOT_ROUTES_RESPONSE = '/osmosis.protorev.v1beta1.MsgSetHotRoutesResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetDeveloperAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the developer account.
 *   - 1: developer_account - the account that will receive a portion of the profits from the protorev module.
 */
export const destructOsmosisProtorevMsgSetDeveloperAccount = (g_struct) => [g_struct.admin, g_struct.developer_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_DEVELOPER_ACCOUNT = '/osmosis.protorev.v1beta1.MsgSetDeveloperAccount';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetDeveloperAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevMsgSetDeveloperAccountResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_DEVELOPER_ACCOUNT_RESPONSE = '/osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetInfoByPoolType} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the pool weights.
 *   - 1: info_by_pool_type - contains information about the pool types.
 */
export const destructOsmosisProtorevMsgSetInfoByPoolType = (g_struct) => [g_struct.admin, g_struct.info_by_pool_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_INFO_BY_POOL_TYPE = '/osmosis.protorev.v1beta1.MsgSetInfoByPoolType';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetInfoByPoolTypeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevMsgSetInfoByPoolTypeResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_INFO_BY_POOL_TYPE_RESPONSE = '/osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerTx} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the max pool points per tx.
 *   - 1: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction.
 */
export const destructOsmosisProtorevMsgSetMaxPoolPointsPerTx = (g_struct) => [g_struct.admin, g_struct.max_pool_points_per_tx];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_TX = '/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevMsgSetMaxPoolPointsPerTxResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_TX_RESPONSE = '/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the max pool points per block.
 *   - 1: max_pool_points_per_block - the maximum number of pool points that can be consumed per block.
 */
export const destructOsmosisProtorevMsgSetMaxPoolPointsPerBlock = (g_struct) => [g_struct.admin, g_struct.max_pool_points_per_block];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_BLOCK = '/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevMsgSetMaxPoolPointsPerBlockResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_MAX_POOL_POINTS_PER_BLOCK_RESPONSE = '/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetBaseDenoms} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account that is authorized to set the base denoms.
 *   - 1: base_denoms - the list of base denoms to set.
 */
export const destructOsmosisProtorevMsgSetBaseDenoms = (g_struct) => [g_struct.admin, g_struct.base_denoms];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_BASE_DENOMS = '/osmosis.protorev.v1beta1.MsgSetBaseDenoms';
/**
 * Destructures the fields of a {@link OsmosisProtorevMsgSetBaseDenomsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevMsgSetBaseDenomsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_MSG_SET_BASE_DENOMS_RESPONSE = '/osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse';
//# sourceMappingURL=tx.js.map