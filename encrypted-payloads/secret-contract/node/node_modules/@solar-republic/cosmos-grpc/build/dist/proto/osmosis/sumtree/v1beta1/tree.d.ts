import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisStoreNode = Encoded<'/osmosis.store.v1beta1.Node'>;
export type EncodedOsmosisStoreChild = Encoded<'/osmosis.store.v1beta1.Child'>;
export type EncodedOsmosisStoreLeaf = Encoded<'/osmosis.store.v1beta1.Leaf'>;
/**
 * Encodes a `Node` protobuf message:
 * @param a_childrens - `children`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisStoreNode: (a_childrens?: Opt<Encoded<'/osmosis.store.v1beta1.Child'>[]>) => EncodedOsmosisStoreNode;
/**
 * Encodes a `Child` protobuf message:
 * @param atu8_index - `index`:
 * @param s_accumulation - `accumulation`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisStoreChild: (atu8_index?: Opt<Uint8Array>, s_accumulation?: Opt<string>) => EncodedOsmosisStoreChild;
/**
 * Encodes a `Leaf` protobuf message:
 * @param g_leaf - `leaf`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisStoreLeaf: (atu8_leaf?: Opt<Encoded<'/osmosis.store.v1beta1.Child'>>) => EncodedOsmosisStoreLeaf;
/**
 * A decoded protobuf Node message
 *
 * Alias for: children -
 */
export type DecodedOsmosisStoreNode = [
    a_children?: DecodedOsmosisStoreChild[]
];
/**
 * Decodes a protobuf Node message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisStoreNode}
 */
export declare const decodeOsmosisStoreNode: (atu8_payload: Uint8Array) => DecodedOsmosisStoreNode;
/**
 * A decoded protobuf Child message
 *
 * Tuple where:
 *   - 0: index -
 *   - 1: accumulation -
 */
export type DecodedOsmosisStoreChild = [
    atu8_index?: Uint8Array,
    s_accumulation?: string
];
/**
 * Decodes a protobuf Child message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisStoreChild}
 */
export declare const decodeOsmosisStoreChild: (atu8_payload: Uint8Array) => DecodedOsmosisStoreChild;
/**
 * A decoded protobuf Leaf message
 *
 * Alias for: leaf -
 */
export type DecodedOsmosisStoreLeaf = [
    a_leaf?: DecodedOsmosisStoreChild
];
/**
 * Decodes a protobuf Leaf message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisStoreLeaf}
 */
export declare const decodeOsmosisStoreLeaf: (atu8_payload: Uint8Array) => DecodedOsmosisStoreLeaf;
/**
 * Destructures the fields of a {@link OsmosisStoreNode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: children -
 */
export declare const destructOsmosisStoreNode: (g_struct: OsmosisStoreNode) => [children?: OsmosisStoreChild[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_STORE_NODE = "/osmosis.store.v1beta1.Node";
/**
 * JSON serialization of `osmosis.store.v1beta1.Node` -
 */
export type OsmosisStoreNode = {
    children?: OsmosisStoreChild[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisStoreChild} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: index -
 *   - 1: accumulation -
 */
export declare const destructOsmosisStoreChild: (g_struct: OsmosisStoreChild) => [index?: Uint8Array, accumulation?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_STORE_CHILD = "/osmosis.store.v1beta1.Child";
/**
 * JSON serialization of `osmosis.store.v1beta1.Child` -
 */
export type OsmosisStoreChild = {
    index?: CwBase64 | undefined;
    accumulation?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisStoreLeaf} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: leaf -
 */
export declare const destructOsmosisStoreLeaf: (g_struct: OsmosisStoreLeaf) => [leaf?: OsmosisStoreChild];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_STORE_LEAF = "/osmosis.store.v1beta1.Leaf";
/**
 * JSON serialization of `osmosis.store.v1beta1.Leaf` -
 */
export type OsmosisStoreLeaf = {
    leaf?: OsmosisStoreChild | undefined;
};
