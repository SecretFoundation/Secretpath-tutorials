import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `Node` protobuf message:
 * @param a_childrens - `children`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisStoreNode = (a_childrens) => Protobuf() // ...
    .B(a_childrens) // Child[] children = 1
    .o;
/**
 * Encodes a `Child` protobuf message:
 * @param atu8_index - `index`:
 * @param s_accumulation - `accumulation`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisStoreChild = (atu8_index, s_accumulation) => Protobuf() // ...
    .b(atu8_index) // bytes index = 1
    .s(s_accumulation) // string accumulation = 2
    .o;
/**
 * Encodes a `Leaf` protobuf message:
 * @param g_leaf - `leaf`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisStoreLeaf = (atu8_leaf) => Protobuf() // ...
    .b(atu8_leaf) // Child leaf = 1
    .o;
/**
 * Decodes a protobuf Node message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisStoreNode}
 */
export const decodeOsmosisStoreNode = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisStoreChild]);
/**
 * Decodes a protobuf Child message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisStoreChild}
 */
export const decodeOsmosisStoreChild = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf Leaf message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisStoreLeaf}
 */
export const decodeOsmosisStoreLeaf = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisStoreChild]);
/**
 * Destructures the fields of a {@link OsmosisStoreNode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: children -
 */
export const destructOsmosisStoreNode = (g_struct) => [g_struct.children];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_STORE_NODE = '/osmosis.store.v1beta1.Node';
/**
 * Destructures the fields of a {@link OsmosisStoreChild} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: index -
 *   - 1: accumulation -
 */
export const destructOsmosisStoreChild = (g_struct) => [safe_base64_to_bytes(g_struct.index), g_struct.accumulation];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_STORE_CHILD = '/osmosis.store.v1beta1.Child';
/**
 * Destructures the fields of a {@link OsmosisStoreLeaf} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: leaf -
 */
export const destructOsmosisStoreLeaf = (g_struct) => [g_struct.leaf];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_STORE_LEAF = '/osmosis.store.v1beta1.Leaf';
//# sourceMappingURL=tree.js.map