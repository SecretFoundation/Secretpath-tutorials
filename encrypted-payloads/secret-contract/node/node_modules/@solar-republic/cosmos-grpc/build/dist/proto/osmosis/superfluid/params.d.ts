import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedOsmosisSuperfluidParams = Encoded<'/osmosis.superfluid.Params'>;
/**
 * Encodes a `Params` protobuf message: holds parameters for the superfluid module
 * @param s_minimum_risk_factor - `minimum_risk_factor`: to be cut on OSMO equivalent value of lp tokens for superfluid staking, default: 5%. The minimum risk factor works to counter-balance the staked amount on chain's exposure to various asset volatilities, and have base staking be 'resistant' to volatility.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidParams: (s_minimum_risk_factor?: Opt<string>) => EncodedOsmosisSuperfluidParams;
/**
 * A decoded protobuf Params message
 *
 * Alias for: minimum_risk_factor - to be cut on OSMO equivalent value of lp tokens for superfluid staking, default: 5%. The minimum risk factor works to counter-balance the staked amount on chain's exposure to various asset volatilities, and have base staking be 'resistant' to volatility.
 */
export type DecodedOsmosisSuperfluidParams = [
    s_minimum_risk_factor?: string
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidParams}
 */
export declare const decodeOsmosisSuperfluidParams: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidParams;
/**
 * Destructures the fields of a {@link OsmosisSuperfluidParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: minimum_risk_factor - to be cut on OSMO equivalent value of lp tokens for superfluid staking, default: 5%. The minimum risk factor works to counter-balance the staked amount on chain's exposure to various asset volatilities, and have base staking be 'resistant' to volatility.
 */
export declare const destructOsmosisSuperfluidParams: (g_struct: OsmosisSuperfluidParams) => [minimum_risk_factor?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_PARAMS = "/osmosis.superfluid.Params";
/**
 * JSON serialization of `osmosis.superfluid.Params` - holds parameters for the superfluid module
 */
export type OsmosisSuperfluidParams = {
    minimum_risk_factor?: string | undefined;
};
