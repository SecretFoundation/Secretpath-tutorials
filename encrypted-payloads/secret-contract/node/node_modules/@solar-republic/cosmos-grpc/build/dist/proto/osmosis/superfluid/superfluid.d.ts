import type { WeakInt64Str, WeakUint64Str, WeakAccountAddr, WeakValidatorAddr, SlimCoin, CwInt64, CwUint64, CwAccountAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
import type { CosmosBaseCoin } from '../../cosmos/base/v1beta1/coin.js';
import type { OsmosisLockupSyntheticLock, DecodedOsmosisLockupSyntheticLock } from '../lockup/lock.js';
export type EncodedOsmosisSuperfluidSuperfluidAsset = Encoded<'/osmosis.superfluid.SuperfluidAsset'>;
export type EncodedOsmosisSuperfluidSuperfluidIntermediaryAccount = Encoded<'/osmosis.superfluid.SuperfluidIntermediaryAccount'>;
export type EncodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord = Encoded<'/osmosis.superfluid.OsmoEquivalentMultiplierRecord'>;
export type EncodedOsmosisSuperfluidSuperfluidDelegationRecord = Encoded<'/osmosis.superfluid.SuperfluidDelegationRecord'>;
export type EncodedOsmosisSuperfluidLockIdIntermediaryAccountConnection = Encoded<'/osmosis.superfluid.LockIdIntermediaryAccountConnection'>;
export type EncodedOsmosisSuperfluidUnpoolWhitelistedPools = Encoded<'/osmosis.superfluid.UnpoolWhitelistedPools'>;
export type EncodedOsmosisSuperfluidConcentratedPoolUserPositionRecord = Encoded<'/osmosis.superfluid.ConcentratedPoolUserPositionRecord'>;
/**
 * Encodes a `SuperfluidAsset` protobuf message: stores the pair of superfluid asset type and denom pair
 * @param s_denom - `denom`:
 * @param xc_asset_type - `asset_type`: AssetType indicates whether the superfluid asset is a native token or an lp share
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidSuperfluidAsset: (s_denom?: Opt<string>, xc_asset_type?: Opt<ProtoEnumOsmosisSuperfluidSuperfluidAssetType>) => EncodedOsmosisSuperfluidSuperfluidAsset;
/**
 * Encodes a `SuperfluidIntermediaryAccount` protobuf message: takes the role of intermediary between LP token and OSMO tokens for superfluid staking. The intermediary account is the actual account responsible for delegation, not the validator account itself.
 * @param s_denom - `denom`: Denom indicates the denom of the superfluid asset.
 * @param sa_val - `val_addr`:
 * @param sg_gauge_id - `gauge_id`: perpetual gauge for rewards distribution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidSuperfluidIntermediaryAccount: (s_denom?: Opt<string>, sa_val?: Opt<WeakValidatorAddr>, sg_gauge_id?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidSuperfluidIntermediaryAccount;
/**
 * Encodes a `OsmoEquivalentMultiplierRecord` protobuf message: The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we treat an LP share as having, for all of epoch N. Eventually this is intended to be set as the Time-weighted-average-osmo-backing for the entire duration of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior epochs rewards) However for now, this is not the TWAP but instead the spot price at the boundary. For different types of assets in the future, it could change.
 * @param sg_epoch_number - `epoch_number`:
 * @param s_denom - `denom`: superfluid asset denom, can be LP token or native token
 * @param s_multiplier - `multiplier`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidOsmoEquivalentMultiplierRecord: (sg_epoch_number?: Opt<WeakInt64Str>, s_denom?: Opt<string>, s_multiplier?: Opt<string>) => EncodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord;
/**
 * Encodes a `SuperfluidDelegationRecord` protobuf message: a struct used to indicate superfluid delegations of an account in the state machine in a user friendly form.
 * @param sa_delegator - `delegator_address`:
 * @param sa_validator - `validator_address`:
 * @param a_delegation_amount - `delegation_amount`:
 * @param a_equivalent_staked_amount - `equivalent_staked_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidSuperfluidDelegationRecord: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>, a_delegation_amount?: Opt<SlimCoin>, a_equivalent_staked_amount?: Opt<SlimCoin>) => EncodedOsmosisSuperfluidSuperfluidDelegationRecord;
/**
 * Encodes a `LockIdIntermediaryAccountConnection` protobuf message: a struct used to indicate the relationship between the underlying lock id and superfluid delegation done via lp shares.
 * @param sg_lock_id - `lock_id`:
 * @param s_intermediary_account - `intermediary_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidLockIdIntermediaryAccountConnection: (sg_lock_id?: Opt<WeakUint64Str>, s_intermediary_account?: Opt<string>) => EncodedOsmosisSuperfluidLockIdIntermediaryAccountConnection;
/**
 * Encodes a `UnpoolWhitelistedPools` protobuf message:
 * @param a_ids - `ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidUnpoolWhitelistedPools: (a_ids?: Opt<WeakUint64Str[]>) => EncodedOsmosisSuperfluidUnpoolWhitelistedPools;
/**
 * Encodes a `ConcentratedPoolUserPositionRecord` protobuf message:
 * @param sa_validator - `validator_address`:
 * @param sg_position_id - `position_id`:
 * @param sg_lock_id - `lock_id`:
 * @param g_synthetic_lock - `synthetic_lock`:
 * @param a_delegation_amount - `delegation_amount`:
 * @param a_equivalent_staked_amount - `equivalent_staked_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidConcentratedPoolUserPositionRecord: (sa_validator?: Opt<WeakValidatorAddr>, sg_position_id?: Opt<WeakUint64Str>, sg_lock_id?: Opt<WeakUint64Str>, atu8_synthetic_lock?: Opt<Encoded<'/osmosis.lockup.SyntheticLock'>>, a_delegation_amount?: Opt<SlimCoin>, a_equivalent_staked_amount?: Opt<SlimCoin>) => EncodedOsmosisSuperfluidConcentratedPoolUserPositionRecord;
/**
 * A decoded protobuf SuperfluidAsset message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: asset_type - AssetType indicates whether the superfluid asset is a native token or an lp share
 */
export type DecodedOsmosisSuperfluidSuperfluidAsset = [
    s_denom?: string,
    xc_asset_type?: ProtoEnumOsmosisSuperfluidSuperfluidAssetType
];
/**
 * Decodes a protobuf SuperfluidAsset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidSuperfluidAsset}
 */
export declare const decodeOsmosisSuperfluidSuperfluidAsset: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidSuperfluidAsset;
/**
 * A decoded protobuf SuperfluidIntermediaryAccount message
 *
 * Tuple where:
 *   - 0: denom - Denom indicates the denom of the superfluid asset.
 *   - 1: val_addr -
 *   - 2: gauge_id - perpetual gauge for rewards distribution
 */
export type DecodedOsmosisSuperfluidSuperfluidIntermediaryAccount = [
    s_denom?: string,
    sa_val?: CwValidatorAddr,
    sg_gauge_id?: CwUint64
];
/**
 * Decodes a protobuf SuperfluidIntermediaryAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidSuperfluidIntermediaryAccount}
 */
export declare const decodeOsmosisSuperfluidSuperfluidIntermediaryAccount: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidSuperfluidIntermediaryAccount;
/**
 * A decoded protobuf OsmoEquivalentMultiplierRecord message
 *
 * Tuple where:
 *   - 0: epoch_number -
 *   - 1: denom - superfluid asset denom, can be LP token or native token
 *   - 2: multiplier -
 */
export type DecodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord = [
    sg_epoch_number?: CwInt64,
    s_denom?: string,
    s_multiplier?: string
];
/**
 * Decodes a protobuf OsmoEquivalentMultiplierRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord}
 */
export declare const decodeOsmosisSuperfluidOsmoEquivalentMultiplierRecord: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord;
/**
 * A decoded protobuf SuperfluidDelegationRecord message
 *
 * Tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_address -
 *   - 2: delegation_amount -
 *   - 3: equivalent_staked_amount -
 */
export type DecodedOsmosisSuperfluidSuperfluidDelegationRecord = [
    sa_delegator?: CwAccountAddr,
    sa_validator?: CwValidatorAddr,
    a_delegation_amount?: [
        string,
        string
    ],
    a_equivalent_staked_amount?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf SuperfluidDelegationRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidSuperfluidDelegationRecord}
 */
export declare const decodeOsmosisSuperfluidSuperfluidDelegationRecord: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidSuperfluidDelegationRecord;
/**
 * A decoded protobuf LockIdIntermediaryAccountConnection message
 *
 * Tuple where:
 *   - 0: lock_id -
 *   - 1: intermediary_account -
 */
export type DecodedOsmosisSuperfluidLockIdIntermediaryAccountConnection = [
    sg_lock_id?: CwUint64,
    s_intermediary_account?: string
];
/**
 * Decodes a protobuf LockIdIntermediaryAccountConnection message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidLockIdIntermediaryAccountConnection}
 */
export declare const decodeOsmosisSuperfluidLockIdIntermediaryAccountConnection: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidLockIdIntermediaryAccountConnection;
/**
 * A decoded protobuf UnpoolWhitelistedPools message
 *
 * Alias for: ids -
 */
export type DecodedOsmosisSuperfluidUnpoolWhitelistedPools = [
    a_ids?: CwUint64[]
];
/**
 * Decodes a protobuf UnpoolWhitelistedPools message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidUnpoolWhitelistedPools}
 */
export declare const decodeOsmosisSuperfluidUnpoolWhitelistedPools: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidUnpoolWhitelistedPools;
/**
 * A decoded protobuf ConcentratedPoolUserPositionRecord message
 *
 * Tuple where:
 *   - 0: validator_address -
 *   - 1: position_id -
 *   - 2: lock_id -
 *   - 3: synthetic_lock -
 *   - 4: delegation_amount -
 *   - 5: equivalent_staked_amount -
 */
export type DecodedOsmosisSuperfluidConcentratedPoolUserPositionRecord = [
    sa_validator?: CwValidatorAddr,
    sg_position_id?: CwUint64,
    sg_lock_id?: CwUint64,
    a_synthetic_lock?: DecodedOsmosisLockupSyntheticLock,
    a_delegation_amount?: [
        string,
        string
    ],
    a_equivalent_staked_amount?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf ConcentratedPoolUserPositionRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidConcentratedPoolUserPositionRecord}
 */
export declare const decodeOsmosisSuperfluidConcentratedPoolUserPositionRecord: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidConcentratedPoolUserPositionRecord;
/**
 * Destructures the fields of a {@link OsmosisSuperfluidSuperfluidAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: asset_type - AssetType indicates whether the superfluid asset is a native token or an lp share
 */
export declare const destructOsmosisSuperfluidSuperfluidAsset: (g_struct: OsmosisSuperfluidSuperfluidAsset) => [denom?: string, asset_type?: JsonEnumOsmosisSuperfluidSuperfluidAssetType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_SUPERFLUID_ASSET = "/osmosis.superfluid.SuperfluidAsset";
/**
 * JSON serialization of `osmosis.superfluid.SuperfluidAsset` - stores the pair of superfluid asset type and denom pair
 */
export type OsmosisSuperfluidSuperfluidAsset = {
    denom?: string | undefined;
    asset_type?: JsonEnumOsmosisSuperfluidSuperfluidAssetType | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidOsmoEquivalentMultiplierRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch_number -
 *   - 1: denom - superfluid asset denom, can be LP token or native token
 *   - 2: multiplier -
 */
export declare const destructOsmosisSuperfluidOsmoEquivalentMultiplierRecord: (g_struct: OsmosisSuperfluidOsmoEquivalentMultiplierRecord) => [epoch_number?: CwInt64, denom?: string, multiplier?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_OSMO_EQUIVALENT_MULTIPLIER_RECORD = "/osmosis.superfluid.OsmoEquivalentMultiplierRecord";
/**
 * JSON serialization of `osmosis.superfluid.OsmoEquivalentMultiplierRecord` - The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we treat an LP share as having, for all of epoch N. Eventually this is intended to be set as the Time-weighted-average-osmo-backing for the entire duration of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior epochs rewards) However for now, this is not the TWAP but instead the spot price at the boundary. For different types of assets in the future, it could change.
 */
export type OsmosisSuperfluidOsmoEquivalentMultiplierRecord = {
    epoch_number?: CwInt64 | undefined;
    denom?: string | undefined;
    multiplier?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidSuperfluidDelegationRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_address -
 *   - 2: delegation_amount -
 *   - 3: equivalent_staked_amount -
 */
export declare const destructOsmosisSuperfluidSuperfluidDelegationRecord: (g_struct: OsmosisSuperfluidSuperfluidDelegationRecord) => [delegator_address?: CwAccountAddr, validator_address?: CwValidatorAddr, delegation_amount?: CosmosBaseCoin, equivalent_staked_amount?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_SUPERFLUID_DELEGATION_RECORD = "/osmosis.superfluid.SuperfluidDelegationRecord";
/**
 * JSON serialization of `osmosis.superfluid.SuperfluidDelegationRecord` - a struct used to indicate superfluid delegations of an account in the state machine in a user friendly form.
 */
export type OsmosisSuperfluidSuperfluidDelegationRecord = {
    delegator_address?: CwAccountAddr | undefined;
    validator_address?: CwValidatorAddr | undefined;
    delegation_amount?: CosmosBaseCoin | undefined;
    equivalent_staked_amount?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidConcentratedPoolUserPositionRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address -
 *   - 1: position_id -
 *   - 2: lock_id -
 *   - 3: synthetic_lock -
 *   - 4: delegation_amount -
 *   - 5: equivalent_staked_amount -
 */
export declare const destructOsmosisSuperfluidConcentratedPoolUserPositionRecord: (g_struct: OsmosisSuperfluidConcentratedPoolUserPositionRecord) => [validator_address?: CwValidatorAddr, position_id?: CwUint64, lock_id?: CwUint64, synthetic_lock?: OsmosisLockupSyntheticLock, delegation_amount?: CosmosBaseCoin, equivalent_staked_amount?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_CONCENTRATED_POOL_USER_POSITION_RECORD = "/osmosis.superfluid.ConcentratedPoolUserPositionRecord";
/**
 * JSON serialization of `osmosis.superfluid.ConcentratedPoolUserPositionRecord` -
 */
export type OsmosisSuperfluidConcentratedPoolUserPositionRecord = {
    validator_address?: CwValidatorAddr | undefined;
    position_id?: CwUint64 | undefined;
    lock_id?: CwUint64 | undefined;
    synthetic_lock?: OsmosisLockupSyntheticLock | undefined;
    delegation_amount?: CosmosBaseCoin | undefined;
    equivalent_staked_amount?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidSuperfluidIntermediaryAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - Denom indicates the denom of the superfluid asset.
 *   - 1: val_addr -
 *   - 2: gauge_id - perpetual gauge for rewards distribution
 */
export declare const destructOsmosisSuperfluidSuperfluidIntermediaryAccount: (g_struct: OsmosisSuperfluidSuperfluidIntermediaryAccount) => [denom?: string, val_addr?: CwValidatorAddr, gauge_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_SUPERFLUID_INTERMEDIARY_ACCOUNT = "/osmosis.superfluid.SuperfluidIntermediaryAccount";
/**
 * JSON serialization of `osmosis.superfluid.SuperfluidIntermediaryAccount` - takes the role of intermediary between LP token and OSMO tokens for superfluid staking. The intermediary account is the actual account responsible for delegation, not the validator account itself.
 */
export type OsmosisSuperfluidSuperfluidIntermediaryAccount = {
    denom?: string | undefined;
    val_addr?: CwValidatorAddr | undefined;
    gauge_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidLockIdIntermediaryAccountConnection} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 *   - 1: intermediary_account -
 */
export declare const destructOsmosisSuperfluidLockIdIntermediaryAccountConnection: (g_struct: OsmosisSuperfluidLockIdIntermediaryAccountConnection) => [lock_id?: CwUint64, intermediary_account?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_LOCK_ID_INTERMEDIARY_ACCOUNT_CONNECTION = "/osmosis.superfluid.LockIdIntermediaryAccountConnection";
/**
 * JSON serialization of `osmosis.superfluid.LockIdIntermediaryAccountConnection` - a struct used to indicate the relationship between the underlying lock id and superfluid delegation done via lp shares.
 */
export type OsmosisSuperfluidLockIdIntermediaryAccountConnection = {
    lock_id?: CwUint64 | undefined;
    intermediary_account?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidUnpoolWhitelistedPools} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ids -
 */
export declare const destructOsmosisSuperfluidUnpoolWhitelistedPools: (g_struct: OsmosisSuperfluidUnpoolWhitelistedPools) => [ids?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_UNPOOL_WHITELISTED_POOLS = "/osmosis.superfluid.UnpoolWhitelistedPools";
/**
 * JSON serialization of `osmosis.superfluid.UnpoolWhitelistedPools` -
 */
export type OsmosisSuperfluidUnpoolWhitelistedPools = {
    ids?: CwUint64[] | undefined;
};
/**
 * Protobuf enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeNative** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export declare const XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative = 0;
/**
 * JSON enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeNative** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export declare const SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative = "SuperfluidAssetTypeNative";
/**
 * Protobuf enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeLPShare** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export declare const XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare = 1;
/**
 * JSON enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeLPShare** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export declare const SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare = "SuperfluidAssetTypeLPShare";
/**
 * Protobuf enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeConcentratedShare** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export declare const XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare = 2;
/**
 * JSON enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeConcentratedShare** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export declare const SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare = "SuperfluidAssetTypeConcentratedShare";
/**
 * Raw protobuf enum values for `osmosis.superfluid.SuperfluidAssetType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative}
 *   - {@link XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare}
 *   - {@link XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare}
 */
export type ProtoEnumOsmosisSuperfluidSuperfluidAssetType = typeof XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative | typeof XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare | typeof XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare;
/**
 * JSON enum values for `osmosis.superfluid.SuperfluidAssetType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative}
 *   - {@link SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare}
 *   - {@link SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare}
 */
export type JsonEnumOsmosisSuperfluidSuperfluidAssetType = typeof SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative | typeof SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare | typeof SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare;
/**
 * Maps a protobuf enum int value for `osmosis.superfluid.SuperfluidAssetType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumOsmosisSuperfluidSuperfluidAssetType: Record<ProtoEnumOsmosisSuperfluidSuperfluidAssetType, JsonEnumOsmosisSuperfluidSuperfluidAssetType>;
/**
 * Maps a JSON enum string value for `osmosis.superfluid.SuperfluidAssetType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumOsmosisSuperfluidSuperfluidAssetType: Record<JsonEnumOsmosisSuperfluidSuperfluidAssetType, ProtoEnumOsmosisSuperfluidSuperfluidAssetType>;
