import type { WeakInt64Str, WeakUint64Str, WeakAccountAddr, WeakValidatorAddr, SlimCoin, CwInt64, CwUint64, CwAccountAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../api/types.js';
import type { CosmosBaseCoin } from '../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisSuperfluidMsgSuperfluidDelegate = Encoded<'/osmosis.superfluid.MsgSuperfluidDelegate'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidDelegateResponse = Encoded<'/osmosis.superfluid.MsgSuperfluidDelegateResponse'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidUndelegate = Encoded<'/osmosis.superfluid.MsgSuperfluidUndelegate'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidUndelegateResponse = Encoded<'/osmosis.superfluid.MsgSuperfluidUndelegateResponse'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidUnbondLock = Encoded<'/osmosis.superfluid.MsgSuperfluidUnbondLock'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidUnbondLockResponse = Encoded<'/osmosis.superfluid.MsgSuperfluidUnbondLockResponse'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock = Encoded<'/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock'>;
export type EncodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse = Encoded<'/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse'>;
export type EncodedOsmosisSuperfluidMsgLockAndSuperfluidDelegate = Encoded<'/osmosis.superfluid.MsgLockAndSuperfluidDelegate'>;
export type EncodedOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse = Encoded<'/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse'>;
export type EncodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate = Encoded<'/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate'>;
export type EncodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse = Encoded<'/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse'>;
export type EncodedOsmosisSuperfluidMsgUnPoolWhitelistedPool = Encoded<'/osmosis.superfluid.MsgUnPoolWhitelistedPool'>;
export type EncodedOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse = Encoded<'/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse'>;
export type EncodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = Encoded<'/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition'>;
export type EncodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = Encoded<'/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse'>;
export type EncodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition = Encoded<'/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition'>;
export type EncodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse = Encoded<'/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse'>;
export type EncodedOsmosisSuperfluidMsgUnbondConvertAndStake = Encoded<'/osmosis.superfluid.MsgUnbondConvertAndStake'>;
export type EncodedOsmosisSuperfluidMsgUnbondConvertAndStakeResponse = Encoded<'/osmosis.superfluid.MsgUnbondConvertAndStakeResponse'>;
/**
 * Encodes a `MsgSuperfluidDelegate` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @param sa_val - `val_addr`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidDelegate: (sa_sender?: Opt<WeakAccountAddr>, sg_lock_id?: Opt<WeakUint64Str>, sa_val?: Opt<WeakValidatorAddr>) => EncodedOsmosisSuperfluidMsgSuperfluidDelegate;
/**
 * Encodes a `MsgSuperfluidDelegateResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidDelegateResponse: () => EncodedOsmosisSuperfluidMsgSuperfluidDelegateResponse;
/**
 * Encodes a `MsgSuperfluidUndelegate` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidUndelegate: (sa_sender?: Opt<WeakAccountAddr>, sg_lock_id?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgSuperfluidUndelegate;
/**
 * Encodes a `MsgSuperfluidUndelegateResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidUndelegateResponse: () => EncodedOsmosisSuperfluidMsgSuperfluidUndelegateResponse;
/**
 * Encodes a `MsgSuperfluidUnbondLock` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidUnbondLock: (sa_sender?: Opt<WeakAccountAddr>, sg_lock_id?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgSuperfluidUnbondLock;
/**
 * Encodes a `MsgSuperfluidUnbondLockResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidUnbondLockResponse: () => EncodedOsmosisSuperfluidMsgSuperfluidUnbondLockResponse;
/**
 * Encodes a `MsgSuperfluidUndelegateAndUnbondLock` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @param a_coin - `coin`: Amount of unlocking coin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock: (sa_sender?: Opt<WeakAccountAddr>, sg_lock_id?: Opt<WeakUint64Str>, a_coin?: Opt<SlimCoin>) => EncodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock;
/**
 * Encodes a `MsgSuperfluidUndelegateAndUnbondLockResponse` protobuf message:
 * @param sg_lock_id - `lock_id`: lock id of the new lock created for the remaining amount. returns the original lockid if the unlocked amount is equal to the original lock's amount.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse: (sg_lock_id?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse;
/**
 * Encodes a `MsgLockAndSuperfluidDelegate` protobuf message: locks coins with the unbonding period duration, and then does a superfluid lock from the newly created lockup, to the specified validator addr.
 * @param sa_sender - `sender`:
 * @param a_coins - `coins`:
 * @param sa_val - `val_addr`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgLockAndSuperfluidDelegate: (sa_sender?: Opt<WeakAccountAddr>, a_coins?: Opt<SlimCoin[]>, sa_val?: Opt<WeakValidatorAddr>) => EncodedOsmosisSuperfluidMsgLockAndSuperfluidDelegate;
/**
 * Encodes a `MsgLockAndSuperfluidDelegateResponse` protobuf message:
 * @param sg_ID - `ID`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse: (sg_ID?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse;
/**
 * Encodes a `MsgCreateFullRangePositionAndSuperfluidDelegate` protobuf message: creates a full range position in a concentrated liquidity pool, then superfluid delegates.
 * @param sa_sender - `sender`:
 * @param a_coins - `coins`:
 * @param sa_val - `val_addr`:
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate: (sa_sender?: Opt<WeakAccountAddr>, a_coins?: Opt<SlimCoin[]>, sa_val?: Opt<WeakValidatorAddr>, sg_pool_id?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate;
/**
 * Encodes a `MsgCreateFullRangePositionAndSuperfluidDelegateResponse` protobuf message:
 * @param sg_lockID - `lockID`:
 * @param sg_positionID - `positionID`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse: (sg_lockID?: Opt<WeakUint64Str>, sg_positionID?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse;
/**
 * Encodes a `MsgUnPoolWhitelistedPool` protobuf message: Unpools every lock the sender has, that is associated with pool pool_id. If pool_id is not approved for unpooling by governance, this is a no-op. Unpooling takes the locked gamm shares, and runs "ExitPool" on it, to get the constituent tokens. e.g. z gamm/pool/1 tokens ExitPools into constituent tokens x uatom, y uosmo. Then it creates a new lock for every constituent token, with the duration associated with the lock. If the lock was unbonding, the new lockup durations should be the time left until unbond completion.
 * @param sa_sender - `sender`:
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgUnPoolWhitelistedPool: (sa_sender?: Opt<WeakAccountAddr>, sg_pool_id?: Opt<WeakUint64Str>) => EncodedOsmosisSuperfluidMsgUnPoolWhitelistedPool;
/**
 * Encodes a `MsgUnPoolWhitelistedPoolResponse` protobuf message:
 * @param a_exited_lock_ids - `exited_lock_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse: (a_exited_lock_ids?: Opt<WeakUint64Str[]>) => EncodedOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse;
/**
 * Encodes a `MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition` protobuf message: ===================== MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @param a_shares_to_migrate - `shares_to_migrate`:
 * @param a_token_out_mins - `token_out_mins`: indicates minimum token to exit Balancer pool with.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition: (sa_sender?: Opt<WeakAccountAddr>, sg_lock_id?: Opt<WeakInt64Str>, a_shares_to_migrate?: Opt<SlimCoin>, a_token_out_mins?: Opt<SlimCoin[]>) => EncodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition;
/**
 * Encodes a `MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse` protobuf message:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @param s_liquidity_created - `liquidity_created`:
 * @param xt_join_time - `join_time`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse: (s_amount0?: Opt<string>, s_amount1?: Opt<string>, s_liquidity_created?: Opt<string>, xt_join_time?: Opt<number>) => EncodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse;
/**
 * Encodes a `MsgAddToConcentratedLiquiditySuperfluidPosition` protobuf message: ===================== MsgAddToConcentratedLiquiditySuperfluidPosition
 * @param sg_position_id - `position_id`:
 * @param sa_sender - `sender`:
 * @param a_token_desired0 - `token_desired0`:
 * @param a_token_desired1 - `token_desired1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition: (sg_position_id?: Opt<WeakUint64Str>, sa_sender?: Opt<WeakAccountAddr>, a_token_desired0?: Opt<SlimCoin>, a_token_desired1?: Opt<SlimCoin>) => EncodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition;
/**
 * Encodes a `MsgAddToConcentratedLiquiditySuperfluidPositionResponse` protobuf message:
 * @param sg_position_id - `position_id`:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @param sg_lock_id - `lock_id`: new_liquidity is the final liquidity after the add. It includes the liquidity that existed before in the position and the new liquidity that was added to the position.
 * @param s_new_liquidity - `new_liquidity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse: (sg_position_id?: Opt<WeakUint64Str>, s_amount0?: Opt<string>, s_amount1?: Opt<string>, sg_lock_id?: Opt<WeakUint64Str>, s_new_liquidity?: Opt<string>) => EncodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse;
/**
 * Encodes a `MsgUnbondConvertAndStake` protobuf message: ===================== MsgUnbondConvertAndStake
 * @param sg_lock_id - `lock_id`: lock ID to convert and stake. lock id with 0 should be provided if converting liquid gamm shares to stake
 * @param sa_sender - `sender`:
 * @param sa_val - `val_addr`: validator address to delegate to. If provided empty string, we use the validators returned from valset-preference module.
 * @param s_min_amt_to_stake - `min_amt_to_stake`: indicates the minimum amount to stake after conversion
 * @param a_shares_to_convert - `shares_to_convert`: indicates shares wanted to stake. Note that this field is only used for liquid(unlocked) gamm shares. For all other cases, this field would be disregarded.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgUnbondConvertAndStake: (sg_lock_id?: Opt<WeakUint64Str>, sa_sender?: Opt<WeakAccountAddr>, sa_val?: Opt<WeakValidatorAddr>, s_min_amt_to_stake?: Opt<string>, a_shares_to_convert?: Opt<SlimCoin>) => EncodedOsmosisSuperfluidMsgUnbondConvertAndStake;
/**
 * Encodes a `MsgUnbondConvertAndStakeResponse` protobuf message:
 * @param s_total_amt_staked - `total_amt_staked`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidMsgUnbondConvertAndStakeResponse: (s_total_amt_staked?: Opt<string>) => EncodedOsmosisSuperfluidMsgUnbondConvertAndStakeResponse;
/**
 * A decoded protobuf SuperfluidDelegate message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: val_addr -
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidDelegate = [
    sa_sender?: CwAccountAddr,
    sg_lock_id?: CwUint64,
    sa_val?: CwValidatorAddr
];
/**
 * Decodes a protobuf SuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidDelegate}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidDelegate: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgSuperfluidDelegate;
/**
 * A decoded protobuf SuperfluidDelegate message
 *
 * Tuple where:
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidDelegateResponse = [];
/**
 * Decodes a protobuf SuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidDelegateResponse}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidDelegateResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SuperfluidUndelegate message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidUndelegate = [
    sa_sender?: CwAccountAddr,
    sg_lock_id?: CwUint64
];
/**
 * Decodes a protobuf SuperfluidUndelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegate}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidUndelegate: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgSuperfluidUndelegate;
/**
 * A decoded protobuf SuperfluidUndelegate message
 *
 * Tuple where:
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidUndelegateResponse = [];
/**
 * Decodes a protobuf SuperfluidUndelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegateResponse}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidUndelegateResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SuperfluidUnbondLock message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidUnbondLock = [
    sa_sender?: CwAccountAddr,
    sg_lock_id?: CwUint64
];
/**
 * Decodes a protobuf SuperfluidUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUnbondLock}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidUnbondLock: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgSuperfluidUnbondLock;
/**
 * A decoded protobuf SuperfluidUnbondLock message
 *
 * Tuple where:
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidUnbondLockResponse = [];
/**
 * Decodes a protobuf SuperfluidUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUnbondLockResponse}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidUnbondLockResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SuperfluidUndelegateAndUnbondLock message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: coin - Amount of unlocking coin.
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock = [
    sa_sender?: CwAccountAddr,
    sg_lock_id?: CwUint64,
    a_coin?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf SuperfluidUndelegateAndUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock;
/**
 * A decoded protobuf SuperfluidUndelegateAndUnbondLock message
 *
 * Alias for: lock_id - lock id of the new lock created for the remaining amount. returns the original lockid if the unlocked amount is equal to the original lock's amount.
 */
export type DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse = [
    sg_lock_id?: CwUint64
];
/**
 * Decodes a protobuf SuperfluidUndelegateAndUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse}
 */
export declare const decodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse;
/**
 * A decoded protobuf LockAndSuperfluidDelegate message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: coins -
 *   - 2: val_addr -
 */
export type DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegate = [
    sa_sender?: CwAccountAddr,
    a_coins?: [
        string,
        string
    ][],
    sa_val?: CwValidatorAddr
];
/**
 * Decodes a protobuf LockAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegate}
 */
export declare const decodeOsmosisSuperfluidMsgLockAndSuperfluidDelegate: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegate;
/**
 * A decoded protobuf LockAndSuperfluidDelegate message
 *
 * Alias for: ID -
 */
export type DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse = [
    sg_ID?: CwUint64
];
/**
 * Decodes a protobuf LockAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse}
 */
export declare const decodeOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse;
/**
 * A decoded protobuf CreateFullRangePositionAndSuperfluidDelegate message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: coins -
 *   - 2: val_addr -
 *   - 3: pool_id -
 */
export type DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate = [
    sa_sender?: CwAccountAddr,
    a_coins?: [
        string,
        string
    ][],
    sa_val?: CwValidatorAddr,
    sg_pool_id?: CwUint64
];
/**
 * Decodes a protobuf CreateFullRangePositionAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate}
 */
export declare const decodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate;
/**
 * A decoded protobuf CreateFullRangePositionAndSuperfluidDelegate message
 *
 * Tuple where:
 *   - 0: lockID -
 *   - 1: positionID -
 */
export type DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse = [
    sg_lockID?: CwUint64,
    sg_positionID?: CwUint64
];
/**
 * Decodes a protobuf CreateFullRangePositionAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse}
 */
export declare const decodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse;
/**
 * A decoded protobuf UnPoolWhitelistedPool message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: pool_id -
 */
export type DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPool = [
    sa_sender?: CwAccountAddr,
    sg_pool_id?: CwUint64
];
/**
 * Decodes a protobuf UnPoolWhitelistedPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPool}
 */
export declare const decodeOsmosisSuperfluidMsgUnPoolWhitelistedPool: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPool;
/**
 * A decoded protobuf UnPoolWhitelistedPool message
 *
 * Alias for: exited_lock_ids -
 */
export type DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse = [
    a_exited_lock_ids?: CwUint64[]
];
/**
 * Decodes a protobuf UnPoolWhitelistedPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse}
 */
export declare const decodeOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse;
/**
 * A decoded protobuf UnlockAndMigrateSharesToFullRangeConcentratedPosition message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: shares_to_migrate -
 *   - 3: token_out_mins - indicates minimum token to exit Balancer pool with.
 */
export type DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = [
    sa_sender?: CwAccountAddr,
    sg_lock_id?: CwInt64,
    a_shares_to_migrate?: [
        string,
        string
    ],
    a_token_out_mins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf UnlockAndMigrateSharesToFullRangeConcentratedPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition}
 */
export declare const decodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition;
/**
 * A decoded protobuf UnlockAndMigrateSharesToFullRangeConcentratedPosition message
 *
 * Tuple where:
 *   - 0: amount0 -
 *   - 1: amount1 -
 *   - 2: liquidity_created -
 *   - 3: join_time -
 */
export type DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = [
    s_amount0?: string,
    s_amount1?: string,
    s_liquidity_created?: string,
    a_join_time?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf UnlockAndMigrateSharesToFullRangeConcentratedPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse}
 */
export declare const decodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse;
/**
 * A decoded protobuf AddToConcentratedLiquiditySuperfluidPosition message
 *
 * Tuple where:
 *   - 0: position_id -
 *   - 1: sender -
 *   - 2: token_desired0 -
 *   - 3: token_desired1 -
 */
export type DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition = [
    sg_position_id?: CwUint64,
    sa_sender?: CwAccountAddr,
    a_token_desired0?: [
        string,
        string
    ],
    a_token_desired1?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf AddToConcentratedLiquiditySuperfluidPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition}
 */
export declare const decodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition;
/**
 * A decoded protobuf AddToConcentratedLiquiditySuperfluidPosition message
 *
 * Tuple where:
 *   - 0: position_id -
 *   - 1: amount0 -
 *   - 2: amount1 -
 *   - 3: lock_id - new_liquidity is the final liquidity after the add. It includes the liquidity that existed before in the position and the new liquidity that was added to the position.
 *   - 4: new_liquidity -
 */
export type DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse = [
    sg_position_id?: CwUint64,
    s_amount0?: string,
    s_amount1?: string,
    sg_lock_id?: CwUint64,
    s_new_liquidity?: string
];
/**
 * Decodes a protobuf AddToConcentratedLiquiditySuperfluidPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse}
 */
export declare const decodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse;
/**
 * A decoded protobuf UnbondConvertAndStake message
 *
 * Tuple where:
 *   - 0: lock_id - lock ID to convert and stake. lock id with 0 should be provided if converting liquid gamm shares to stake
 *   - 1: sender -
 *   - 2: val_addr - validator address to delegate to. If provided empty string, we use the validators returned from valset-preference module.
 *   - 3: min_amt_to_stake - indicates the minimum amount to stake after conversion
 *   - 4: shares_to_convert - indicates shares wanted to stake. Note that this field is only used for liquid(unlocked) gamm shares. For all other cases, this field would be disregarded.
 */
export type DecodedOsmosisSuperfluidMsgUnbondConvertAndStake = [
    sg_lock_id?: CwUint64,
    sa_sender?: CwAccountAddr,
    sa_val?: CwValidatorAddr,
    s_min_amt_to_stake?: string,
    a_shares_to_convert?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf UnbondConvertAndStake message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnbondConvertAndStake}
 */
export declare const decodeOsmosisSuperfluidMsgUnbondConvertAndStake: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgUnbondConvertAndStake;
/**
 * A decoded protobuf UnbondConvertAndStake message
 *
 * Alias for: total_amt_staked -
 */
export type DecodedOsmosisSuperfluidMsgUnbondConvertAndStakeResponse = [
    s_total_amt_staked?: string
];
/**
 * Decodes a protobuf UnbondConvertAndStake message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnbondConvertAndStakeResponse}
 */
export declare const decodeOsmosisSuperfluidMsgUnbondConvertAndStakeResponse: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidMsgUnbondConvertAndStakeResponse;
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidDelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: val_addr -
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidDelegate: (g_struct: OsmosisSuperfluidMsgSuperfluidDelegate) => [sender?: CwAccountAddr, lock_id?: CwUint64, val_addr?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_DELEGATE = "/osmosis.superfluid.MsgSuperfluidDelegate";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidDelegate` -
 */
export type OsmosisSuperfluidMsgSuperfluidDelegate = {
    sender?: CwAccountAddr | undefined;
    lock_id?: CwUint64 | undefined;
    val_addr?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidDelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidDelegateResponse: (g_struct: OsmosisSuperfluidMsgSuperfluidDelegateResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_DELEGATE_RESPONSE = "/osmosis.superfluid.MsgSuperfluidDelegateResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidDelegateResponse` -
 */
export type OsmosisSuperfluidMsgSuperfluidDelegateResponse = {};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidUndelegate: (g_struct: OsmosisSuperfluidMsgSuperfluidUndelegate) => [sender?: CwAccountAddr, lock_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE = "/osmosis.superfluid.MsgSuperfluidUndelegate";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidUndelegate` -
 */
export type OsmosisSuperfluidMsgSuperfluidUndelegate = {
    sender?: CwAccountAddr | undefined;
    lock_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidUndelegateResponse: (g_struct: OsmosisSuperfluidMsgSuperfluidUndelegateResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE_RESPONSE = "/osmosis.superfluid.MsgSuperfluidUndelegateResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidUndelegateResponse` -
 */
export type OsmosisSuperfluidMsgSuperfluidUndelegateResponse = {};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUnbondLock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidUnbondLock: (g_struct: OsmosisSuperfluidMsgSuperfluidUnbondLock) => [sender?: CwAccountAddr, lock_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNBOND_LOCK = "/osmosis.superfluid.MsgSuperfluidUnbondLock";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidUnbondLock` -
 */
export type OsmosisSuperfluidMsgSuperfluidUnbondLock = {
    sender?: CwAccountAddr | undefined;
    lock_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUnbondLockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidUnbondLockResponse: (g_struct: OsmosisSuperfluidMsgSuperfluidUnbondLockResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNBOND_LOCK_RESPONSE = "/osmosis.superfluid.MsgSuperfluidUnbondLockResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidUnbondLockResponse` -
 */
export type OsmosisSuperfluidMsgSuperfluidUnbondLockResponse = {};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: coin - Amount of unlocking coin.
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock: (g_struct: OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock) => [sender?: CwAccountAddr, lock_id?: CwUint64, coin?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE_AND_UNBOND_LOCK = "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock` -
 */
export type OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock = {
    sender?: CwAccountAddr | undefined;
    lock_id?: CwUint64 | undefined;
    coin?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id - lock id of the new lock created for the remaining amount. returns the original lockid if the unlocked amount is equal to the original lock's amount.
 */
export declare const destructOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse: (g_struct: OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse) => [lock_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE_AND_UNBOND_LOCK_RESPONSE = "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse` -
 */
export type OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse = {
    lock_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgLockAndSuperfluidDelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: coins -
 *   - 2: val_addr -
 */
export declare const destructOsmosisSuperfluidMsgLockAndSuperfluidDelegate: (g_struct: OsmosisSuperfluidMsgLockAndSuperfluidDelegate) => [sender?: CwAccountAddr, coins?: CosmosBaseCoin[], val_addr?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_LOCK_AND_SUPERFLUID_DELEGATE = "/osmosis.superfluid.MsgLockAndSuperfluidDelegate";
/**
 * JSON serialization of `osmosis.superfluid.MsgLockAndSuperfluidDelegate` - locks coins with the unbonding period duration, and then does a superfluid lock from the newly created lockup, to the specified validator addr.
 */
export type OsmosisSuperfluidMsgLockAndSuperfluidDelegate = {
    sender?: CwAccountAddr | undefined;
    coins?: CosmosBaseCoin[] | undefined;
    val_addr?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ID -
 */
export declare const destructOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse: (g_struct: OsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse) => [ID?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_LOCK_AND_SUPERFLUID_DELEGATE_RESPONSE = "/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse` -
 */
export type OsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse = {
    ID?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: coins -
 *   - 2: val_addr -
 *   - 3: pool_id -
 */
export declare const destructOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate: (g_struct: OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate) => [sender?: CwAccountAddr, coins?: CosmosBaseCoin[], val_addr?: CwValidatorAddr, pool_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_CREATE_FULL_RANGE_POSITION_AND_SUPERFLUID_DELEGATE = "/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate";
/**
 * JSON serialization of `osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate` - creates a full range position in a concentrated liquidity pool, then superfluid delegates.
 */
export type OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate = {
    sender?: CwAccountAddr | undefined;
    coins?: CosmosBaseCoin[] | undefined;
    val_addr?: CwValidatorAddr | undefined;
    pool_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lockID -
 *   - 1: positionID -
 */
export declare const destructOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse: (g_struct: OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse) => [lockID?: CwUint64, positionID?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_CREATE_FULL_RANGE_POSITION_AND_SUPERFLUID_DELEGATE_RESPONSE = "/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse` -
 */
export type OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse = {
    lockID?: CwUint64 | undefined;
    positionID?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnPoolWhitelistedPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: pool_id -
 */
export declare const destructOsmosisSuperfluidMsgUnPoolWhitelistedPool: (g_struct: OsmosisSuperfluidMsgUnPoolWhitelistedPool) => [sender?: CwAccountAddr, pool_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UN_POOL_WHITELISTED_POOL = "/osmosis.superfluid.MsgUnPoolWhitelistedPool";
/**
 * JSON serialization of `osmosis.superfluid.MsgUnPoolWhitelistedPool` - Unpools every lock the sender has, that is associated with pool pool_id. If pool_id is not approved for unpooling by governance, this is a no-op. Unpooling takes the locked gamm shares, and runs "ExitPool" on it, to get the constituent tokens. e.g. z gamm/pool/1 tokens ExitPools into constituent tokens x uatom, y uosmo. Then it creates a new lock for every constituent token, with the duration associated with the lock. If the lock was unbonding, the new lockup durations should be the time left until unbond completion.
 */
export type OsmosisSuperfluidMsgUnPoolWhitelistedPool = {
    sender?: CwAccountAddr | undefined;
    pool_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: exited_lock_ids -
 */
export declare const destructOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse: (g_struct: OsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse) => [exited_lock_ids?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UN_POOL_WHITELISTED_POOL_RESPONSE = "/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse` -
 */
export type OsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse = {
    exited_lock_ids?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: shares_to_migrate -
 *   - 3: token_out_mins - indicates minimum token to exit Balancer pool with.
 */
export declare const destructOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition: (g_struct: OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition) => [sender?: CwAccountAddr, lock_id?: CwInt64, shares_to_migrate?: CosmosBaseCoin, token_out_mins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNLOCK_AND_MIGRATE_SHARES_TO_FULL_RANGE_CONCENTRATED_POSITION = "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition";
/**
 * JSON serialization of `osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition` - ===================== MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition
 */
export type OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = {
    sender?: CwAccountAddr | undefined;
    lock_id?: CwInt64 | undefined;
    shares_to_migrate?: CosmosBaseCoin | undefined;
    token_out_mins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount0 -
 *   - 1: amount1 -
 *   - 2: liquidity_created -
 *   - 3: join_time -
 */
export declare const destructOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse: (g_struct: OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse) => [amount0?: string, amount1?: string, liquidity_created?: string, join_time?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNLOCK_AND_MIGRATE_SHARES_TO_FULL_RANGE_CONCENTRATED_POSITION_RESPONSE = "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse` -
 */
export type OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = {
    amount0?: string | undefined;
    amount1?: string | undefined;
    liquidity_created?: string | undefined;
    join_time?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: sender -
 *   - 2: token_desired0 -
 *   - 3: token_desired1 -
 */
export declare const destructOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition: (g_struct: OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition) => [position_id?: CwUint64, sender?: CwAccountAddr, token_desired0?: CosmosBaseCoin, token_desired1?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_ADD_TO_CONCENTRATED_LIQUIDITY_SUPERFLUID_POSITION = "/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition";
/**
 * JSON serialization of `osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition` - ===================== MsgAddToConcentratedLiquiditySuperfluidPosition
 */
export type OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition = {
    position_id?: CwUint64 | undefined;
    sender?: CwAccountAddr | undefined;
    token_desired0?: CosmosBaseCoin | undefined;
    token_desired1?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: amount0 -
 *   - 2: amount1 -
 *   - 3: lock_id - new_liquidity is the final liquidity after the add. It includes the liquidity that existed before in the position and the new liquidity that was added to the position.
 *   - 4: new_liquidity -
 */
export declare const destructOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse: (g_struct: OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse) => [position_id?: CwUint64, amount0?: string, amount1?: string, lock_id?: CwUint64, new_liquidity?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_ADD_TO_CONCENTRATED_LIQUIDITY_SUPERFLUID_POSITION_RESPONSE = "/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse` -
 */
export type OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse = {
    position_id?: CwUint64 | undefined;
    amount0?: string | undefined;
    amount1?: string | undefined;
    lock_id?: CwUint64 | undefined;
    new_liquidity?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnbondConvertAndStake} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id - lock ID to convert and stake. lock id with 0 should be provided if converting liquid gamm shares to stake
 *   - 1: sender -
 *   - 2: val_addr - validator address to delegate to. If provided empty string, we use the validators returned from valset-preference module.
 *   - 3: min_amt_to_stake - indicates the minimum amount to stake after conversion
 *   - 4: shares_to_convert - indicates shares wanted to stake. Note that this field is only used for liquid(unlocked) gamm shares. For all other cases, this field would be disregarded.
 */
export declare const destructOsmosisSuperfluidMsgUnbondConvertAndStake: (g_struct: OsmosisSuperfluidMsgUnbondConvertAndStake) => [lock_id?: CwUint64, sender?: CwAccountAddr, val_addr?: CwValidatorAddr, min_amt_to_stake?: string, shares_to_convert?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNBOND_CONVERT_AND_STAKE = "/osmosis.superfluid.MsgUnbondConvertAndStake";
/**
 * JSON serialization of `osmosis.superfluid.MsgUnbondConvertAndStake` - ===================== MsgUnbondConvertAndStake
 */
export type OsmosisSuperfluidMsgUnbondConvertAndStake = {
    lock_id?: CwUint64 | undefined;
    sender?: CwAccountAddr | undefined;
    val_addr?: CwValidatorAddr | undefined;
    min_amt_to_stake?: string | undefined;
    shares_to_convert?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnbondConvertAndStakeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_amt_staked -
 */
export declare const destructOsmosisSuperfluidMsgUnbondConvertAndStakeResponse: (g_struct: OsmosisSuperfluidMsgUnbondConvertAndStakeResponse) => [total_amt_staked?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNBOND_CONVERT_AND_STAKE_RESPONSE = "/osmosis.superfluid.MsgUnbondConvertAndStakeResponse";
/**
 * JSON serialization of `osmosis.superfluid.MsgUnbondConvertAndStakeResponse` -
 */
export type OsmosisSuperfluidMsgUnbondConvertAndStakeResponse = {
    total_amt_staked?: string | undefined;
};
