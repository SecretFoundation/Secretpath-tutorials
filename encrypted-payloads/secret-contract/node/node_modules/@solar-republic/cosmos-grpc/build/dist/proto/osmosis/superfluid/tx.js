import { parse_timestamp } from '../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal, coin, coins } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `MsgSuperfluidDelegate` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @param sa_val - `val_addr`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidDelegate = (sa_sender, sg_lock_id, sa_val) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_lock_id) // uint64 lock_id = 2
    .s(sa_val) // string val_addr = 3
    .o;
/**
 * Encodes a `MsgSuperfluidDelegateResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidDelegateResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSuperfluidUndelegate` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidUndelegate = (sa_sender, sg_lock_id) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_lock_id) // uint64 lock_id = 2
    .o;
/**
 * Encodes a `MsgSuperfluidUndelegateResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidUndelegateResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSuperfluidUnbondLock` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidUnbondLock = (sa_sender, sg_lock_id) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_lock_id) // uint64 lock_id = 2
    .o;
/**
 * Encodes a `MsgSuperfluidUnbondLockResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidUnbondLockResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSuperfluidUndelegateAndUnbondLock` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @param a_coin - `coin`: Amount of unlocking coin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock = (sa_sender, sg_lock_id, a_coin) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_lock_id) // uint64 lock_id = 2
    .b(coin(a_coin)) // Coin coin = 3
    .o;
/**
 * Encodes a `MsgSuperfluidUndelegateAndUnbondLockResponse` protobuf message:
 * @param sg_lock_id - `lock_id`: lock id of the new lock created for the remaining amount. returns the original lockid if the unlocked amount is equal to the original lock's amount.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse = (sg_lock_id) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .o;
/**
 * Encodes a `MsgLockAndSuperfluidDelegate` protobuf message: locks coins with the unbonding period duration, and then does a superfluid lock from the newly created lockup, to the specified validator addr.
 * @param sa_sender - `sender`:
 * @param a_coins - `coins`:
 * @param sa_val - `val_addr`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgLockAndSuperfluidDelegate = (sa_sender, a_coins, sa_val) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .B(coins(a_coins)) // Coin[] coins = 2
    .s(sa_val) // string val_addr = 3
    .o;
/**
 * Encodes a `MsgLockAndSuperfluidDelegateResponse` protobuf message:
 * @param sg_ID - `ID`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse = (sg_ID) => Protobuf() // ...
    .g(sg_ID) // uint64 ID = 1
    .o;
/**
 * Encodes a `MsgCreateFullRangePositionAndSuperfluidDelegate` protobuf message: creates a full range position in a concentrated liquidity pool, then superfluid delegates.
 * @param sa_sender - `sender`:
 * @param a_coins - `coins`:
 * @param sa_val - `val_addr`:
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate = (sa_sender, a_coins, sa_val, sg_pool_id) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .B(coins(a_coins)) // Coin[] coins = 2
    .s(sa_val) // string val_addr = 3
    .g(sg_pool_id) // uint64 pool_id = 4
    .o;
/**
 * Encodes a `MsgCreateFullRangePositionAndSuperfluidDelegateResponse` protobuf message:
 * @param sg_lockID - `lockID`:
 * @param sg_positionID - `positionID`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse = (sg_lockID, sg_positionID) => Protobuf() // ...
    .g(sg_lockID) // uint64 lockID = 1
    .g(sg_positionID) // uint64 positionID = 2
    .o;
/**
 * Encodes a `MsgUnPoolWhitelistedPool` protobuf message: Unpools every lock the sender has, that is associated with pool pool_id. If pool_id is not approved for unpooling by governance, this is a no-op. Unpooling takes the locked gamm shares, and runs "ExitPool" on it, to get the constituent tokens. e.g. z gamm/pool/1 tokens ExitPools into constituent tokens x uatom, y uosmo. Then it creates a new lock for every constituent token, with the duration associated with the lock. If the lock was unbonding, the new lockup durations should be the time left until unbond completion.
 * @param sa_sender - `sender`:
 * @param sg_pool_id - `pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgUnPoolWhitelistedPool = (sa_sender, sg_pool_id) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_pool_id) // uint64 pool_id = 2
    .o;
/**
 * Encodes a `MsgUnPoolWhitelistedPoolResponse` protobuf message:
 * @param a_exited_lock_ids - `exited_lock_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse = (a_exited_lock_ids) => Protobuf() // ...
    .G(a_exited_lock_ids) // uint64[] exited_lock_ids = 1
    .o;
/**
 * Encodes a `MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition` protobuf message: ===================== MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition
 * @param sa_sender - `sender`:
 * @param sg_lock_id - `lock_id`:
 * @param a_shares_to_migrate - `shares_to_migrate`:
 * @param a_token_out_mins - `token_out_mins`: indicates minimum token to exit Balancer pool with.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = (sa_sender, sg_lock_id, a_shares_to_migrate, a_token_out_mins) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_lock_id) // int32 lock_id = 2
    .b(coin(a_shares_to_migrate)) // Coin shares_to_migrate = 3
    .B(coins(a_token_out_mins)) // Coin[] token_out_mins = 4
    .o;
/**
 * Encodes a `MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse` protobuf message:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @param s_liquidity_created - `liquidity_created`:
 * @param xt_join_time - `join_time`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = (s_amount0, s_amount1, s_liquidity_created, xt_join_time) => Protobuf() // ...
    .s(s_amount0) // string amount0 = 1
    .s(s_amount1) // string amount1 = 2
    .s(s_liquidity_created) // string liquidity_created = 3
    .b(temporal(xt_join_time)) // Timestamp join_time = 4
    .o;
/**
 * Encodes a `MsgAddToConcentratedLiquiditySuperfluidPosition` protobuf message: ===================== MsgAddToConcentratedLiquiditySuperfluidPosition
 * @param sg_position_id - `position_id`:
 * @param sa_sender - `sender`:
 * @param a_token_desired0 - `token_desired0`:
 * @param a_token_desired1 - `token_desired1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition = (sg_position_id, sa_sender, a_token_desired0, a_token_desired1) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(sa_sender) // string sender = 2
    .b(coin(a_token_desired0)) // Coin token_desired0 = 3
    .b(coin(a_token_desired1)) // Coin token_desired1 = 4
    .o;
/**
 * Encodes a `MsgAddToConcentratedLiquiditySuperfluidPositionResponse` protobuf message:
 * @param sg_position_id - `position_id`:
 * @param s_amount0 - `amount0`:
 * @param s_amount1 - `amount1`:
 * @param sg_lock_id - `lock_id`: new_liquidity is the final liquidity after the add. It includes the liquidity that existed before in the position and the new liquidity that was added to the position.
 * @param s_new_liquidity - `new_liquidity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse = (sg_position_id, s_amount0, s_amount1, sg_lock_id, s_new_liquidity) => Protobuf() // ...
    .g(sg_position_id) // uint64 position_id = 1
    .s(s_amount0) // string amount0 = 2
    .s(s_amount1) // string amount1 = 3
    .g(sg_lock_id) // uint64 lock_id = 4
    .s(s_new_liquidity) // string new_liquidity = 5
    .o;
/**
 * Encodes a `MsgUnbondConvertAndStake` protobuf message: ===================== MsgUnbondConvertAndStake
 * @param sg_lock_id - `lock_id`: lock ID to convert and stake. lock id with 0 should be provided if converting liquid gamm shares to stake
 * @param sa_sender - `sender`:
 * @param sa_val - `val_addr`: validator address to delegate to. If provided empty string, we use the validators returned from valset-preference module.
 * @param s_min_amt_to_stake - `min_amt_to_stake`: indicates the minimum amount to stake after conversion
 * @param a_shares_to_convert - `shares_to_convert`: indicates shares wanted to stake. Note that this field is only used for liquid(unlocked) gamm shares. For all other cases, this field would be disregarded.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgUnbondConvertAndStake = (sg_lock_id, sa_sender, sa_val, s_min_amt_to_stake, a_shares_to_convert) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .s(sa_sender) // string sender = 2
    .s(sa_val) // string val_addr = 3
    .s(s_min_amt_to_stake) // string min_amt_to_stake = 4
    .b(coin(a_shares_to_convert)) // Coin shares_to_convert = 5
    .o;
/**
 * Encodes a `MsgUnbondConvertAndStakeResponse` protobuf message:
 * @param s_total_amt_staked - `total_amt_staked`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidMsgUnbondConvertAndStakeResponse = (s_total_amt_staked) => Protobuf() // ...
    .s(s_total_amt_staked) // string total_amt_staked = 1
    .o;
/**
 * Decodes a protobuf SuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidDelegate}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidDelegate = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5]);
/**
 * Decodes a protobuf SuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidDelegateResponse}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidDelegateResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SuperfluidUndelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegate}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidUndelegate = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf SuperfluidUndelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegateResponse}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidUndelegateResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SuperfluidUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUnbondLock}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidUnbondLock = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf SuperfluidUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUnbondLockResponse}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidUnbondLockResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SuperfluidUndelegateAndUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1], [0, 0, decode_coin]);
/**
 * Decodes a protobuf SuperfluidUndelegateAndUnbondLock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse}
 */
export const decodeOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf LockAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegate}
 */
export const decodeOsmosisSuperfluidMsgLockAndSuperfluidDelegate = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 5], [0, decode_coin]);
/**
 * Decodes a protobuf LockAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse}
 */
export const decodeOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf CreateFullRangePositionAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate}
 */
export const decodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 5, 3], [0, decode_coin]);
/**
 * Decodes a protobuf CreateFullRangePositionAndSuperfluidDelegate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse}
 */
export const decodeOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf UnPoolWhitelistedPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPool}
 */
export const decodeOsmosisSuperfluidMsgUnPoolWhitelistedPool = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf UnPoolWhitelistedPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse}
 */
export const decodeOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [2]);
/**
 * Decodes a protobuf UnlockAndMigrateSharesToFullRangeConcentratedPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition}
 */
export const decodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1, 0], [0, 0, decode_coin, decode_coin]);
/**
 * Decodes a protobuf UnlockAndMigrateSharesToFullRangeConcentratedPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse}
 */
export const decodeOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, [3, 1]], [0, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf AddToConcentratedLiquiditySuperfluidPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition}
 */
export const decodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 1], [0, 0, decode_coin, decode_coin]);
/**
 * Decodes a protobuf AddToConcentratedLiquiditySuperfluidPosition message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse}
 */
export const decodeOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 3, 5]);
/**
 * Decodes a protobuf UnbondConvertAndStake message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnbondConvertAndStake}
 */
export const decodeOsmosisSuperfluidMsgUnbondConvertAndStake = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 5, 1], [0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf UnbondConvertAndStake message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidMsgUnbondConvertAndStakeResponse}
 */
export const decodeOsmosisSuperfluidMsgUnbondConvertAndStakeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidDelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: val_addr -
 */
export const destructOsmosisSuperfluidMsgSuperfluidDelegate = (g_struct) => [g_struct.sender, g_struct.lock_id, g_struct.val_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_DELEGATE = '/osmosis.superfluid.MsgSuperfluidDelegate';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidDelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisSuperfluidMsgSuperfluidDelegateResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_DELEGATE_RESPONSE = '/osmosis.superfluid.MsgSuperfluidDelegateResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 */
export const destructOsmosisSuperfluidMsgSuperfluidUndelegate = (g_struct) => [g_struct.sender, g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE = '/osmosis.superfluid.MsgSuperfluidUndelegate';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisSuperfluidMsgSuperfluidUndelegateResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE_RESPONSE = '/osmosis.superfluid.MsgSuperfluidUndelegateResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUnbondLock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 */
export const destructOsmosisSuperfluidMsgSuperfluidUnbondLock = (g_struct) => [g_struct.sender, g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNBOND_LOCK = '/osmosis.superfluid.MsgSuperfluidUnbondLock';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUnbondLockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisSuperfluidMsgSuperfluidUnbondLockResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNBOND_LOCK_RESPONSE = '/osmosis.superfluid.MsgSuperfluidUnbondLockResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: coin - Amount of unlocking coin.
 */
export const destructOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLock = (g_struct) => [g_struct.sender, g_struct.lock_id, g_struct.coin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE_AND_UNBOND_LOCK = '/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id - lock id of the new lock created for the remaining amount. returns the original lockid if the unlocked amount is equal to the original lock's amount.
 */
export const destructOsmosisSuperfluidMsgSuperfluidUndelegateAndUnbondLockResponse = (g_struct) => [g_struct.lock_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_SUPERFLUID_UNDELEGATE_AND_UNBOND_LOCK_RESPONSE = '/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgLockAndSuperfluidDelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: coins -
 *   - 2: val_addr -
 */
export const destructOsmosisSuperfluidMsgLockAndSuperfluidDelegate = (g_struct) => [g_struct.sender, g_struct.coins, g_struct.val_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_LOCK_AND_SUPERFLUID_DELEGATE = '/osmosis.superfluid.MsgLockAndSuperfluidDelegate';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ID -
 */
export const destructOsmosisSuperfluidMsgLockAndSuperfluidDelegateResponse = (g_struct) => [g_struct.ID];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_LOCK_AND_SUPERFLUID_DELEGATE_RESPONSE = '/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: coins -
 *   - 2: val_addr -
 *   - 3: pool_id -
 */
export const destructOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegate = (g_struct) => [g_struct.sender, g_struct.coins, g_struct.val_addr, g_struct.pool_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_CREATE_FULL_RANGE_POSITION_AND_SUPERFLUID_DELEGATE = '/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lockID -
 *   - 1: positionID -
 */
export const destructOsmosisSuperfluidMsgCreateFullRangePositionAndSuperfluidDelegateResponse = (g_struct) => [g_struct.lockID, g_struct.positionID];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_CREATE_FULL_RANGE_POSITION_AND_SUPERFLUID_DELEGATE_RESPONSE = '/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnPoolWhitelistedPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: pool_id -
 */
export const destructOsmosisSuperfluidMsgUnPoolWhitelistedPool = (g_struct) => [g_struct.sender, g_struct.pool_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UN_POOL_WHITELISTED_POOL = '/osmosis.superfluid.MsgUnPoolWhitelistedPool';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: exited_lock_ids -
 */
export const destructOsmosisSuperfluidMsgUnPoolWhitelistedPoolResponse = (g_struct) => [g_struct.exited_lock_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UN_POOL_WHITELISTED_POOL_RESPONSE = '/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: lock_id -
 *   - 2: shares_to_migrate -
 *   - 3: token_out_mins - indicates minimum token to exit Balancer pool with.
 */
export const destructOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = (g_struct) => [g_struct.sender, g_struct.lock_id, g_struct.shares_to_migrate, g_struct.token_out_mins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNLOCK_AND_MIGRATE_SHARES_TO_FULL_RANGE_CONCENTRATED_POSITION = '/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount0 -
 *   - 1: amount1 -
 *   - 2: liquidity_created -
 *   - 3: join_time -
 */
export const destructOsmosisSuperfluidMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = (g_struct) => [g_struct.amount0, g_struct.amount1, g_struct.liquidity_created, parse_timestamp(g_struct.join_time)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNLOCK_AND_MIGRATE_SHARES_TO_FULL_RANGE_CONCENTRATED_POSITION_RESPONSE = '/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: sender -
 *   - 2: token_desired0 -
 *   - 3: token_desired1 -
 */
export const destructOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPosition = (g_struct) => [g_struct.position_id, g_struct.sender, g_struct.token_desired0, g_struct.token_desired1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_ADD_TO_CONCENTRATED_LIQUIDITY_SUPERFLUID_POSITION = '/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position_id -
 *   - 1: amount0 -
 *   - 2: amount1 -
 *   - 3: lock_id - new_liquidity is the final liquidity after the add. It includes the liquidity that existed before in the position and the new liquidity that was added to the position.
 *   - 4: new_liquidity -
 */
export const destructOsmosisSuperfluidMsgAddToConcentratedLiquiditySuperfluidPositionResponse = (g_struct) => [g_struct.position_id, g_struct.amount0, g_struct.amount1, g_struct.lock_id, g_struct.new_liquidity];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_ADD_TO_CONCENTRATED_LIQUIDITY_SUPERFLUID_POSITION_RESPONSE = '/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnbondConvertAndStake} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id - lock ID to convert and stake. lock id with 0 should be provided if converting liquid gamm shares to stake
 *   - 1: sender -
 *   - 2: val_addr - validator address to delegate to. If provided empty string, we use the validators returned from valset-preference module.
 *   - 3: min_amt_to_stake - indicates the minimum amount to stake after conversion
 *   - 4: shares_to_convert - indicates shares wanted to stake. Note that this field is only used for liquid(unlocked) gamm shares. For all other cases, this field would be disregarded.
 */
export const destructOsmosisSuperfluidMsgUnbondConvertAndStake = (g_struct) => [g_struct.lock_id, g_struct.sender, g_struct.val_addr, g_struct.min_amt_to_stake, g_struct.shares_to_convert];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNBOND_CONVERT_AND_STAKE = '/osmosis.superfluid.MsgUnbondConvertAndStake';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidMsgUnbondConvertAndStakeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_amt_staked -
 */
export const destructOsmosisSuperfluidMsgUnbondConvertAndStakeResponse = (g_struct) => [g_struct.total_amt_staked];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_MSG_UNBOND_CONVERT_AND_STAKE_RESPONSE = '/osmosis.superfluid.MsgUnbondConvertAndStakeResponse';
//# sourceMappingURL=tx.js.map