import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisTokenfactoryDenomAuthorityMetadata = Encoded<'/osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata'>;
/**
 * Encodes a `DenomAuthorityMetadata` protobuf message: specifies metadata for addresses that have specific capabilities over a token factory denom. Right now there is only one Admin permission, but is planned to be extended to the future.
 * @param s_admin - `admin`: Can be empty for no admin, or a valid osmosis address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryDenomAuthorityMetadata: (s_admin?: Opt<string>) => EncodedOsmosisTokenfactoryDenomAuthorityMetadata;
/**
 * A decoded protobuf DenomAuthorityMetadata message
 *
 * Alias for: admin - Can be empty for no admin, or a valid osmosis address
 */
export type DecodedOsmosisTokenfactoryDenomAuthorityMetadata = [
    s_admin?: string
];
/**
 * Decodes a protobuf DenomAuthorityMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryDenomAuthorityMetadata}
 */
export declare const decodeOsmosisTokenfactoryDenomAuthorityMetadata: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryDenomAuthorityMetadata;
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryDenomAuthorityMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - Can be empty for no admin, or a valid osmosis address
 */
export declare const destructOsmosisTokenfactoryDenomAuthorityMetadata: (g_struct: OsmosisTokenfactoryDenomAuthorityMetadata) => [admin?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_DENOM_AUTHORITY_METADATA = "/osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata` - specifies metadata for addresses that have specific capabilities over a token factory denom. Right now there is only one Admin permission, but is planned to be extended to the future.
 */
export type OsmosisTokenfactoryDenomAuthorityMetadata = {
    admin?: string | undefined;
};
