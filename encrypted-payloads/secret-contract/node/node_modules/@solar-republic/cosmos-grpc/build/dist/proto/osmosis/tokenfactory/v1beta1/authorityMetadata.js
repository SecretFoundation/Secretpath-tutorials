/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `DenomAuthorityMetadata` protobuf message: specifies metadata for addresses that have specific capabilities over a token factory denom. Right now there is only one Admin permission, but is planned to be extended to the future.
 * @param s_admin - `admin`: Can be empty for no admin, or a valid osmosis address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryDenomAuthorityMetadata = (s_admin) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .o;
/**
 * Decodes a protobuf DenomAuthorityMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryDenomAuthorityMetadata}
 */
export const decodeOsmosisTokenfactoryDenomAuthorityMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryDenomAuthorityMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - Can be empty for no admin, or a valid osmosis address
 */
export const destructOsmosisTokenfactoryDenomAuthorityMetadata = (g_struct) => [g_struct.admin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_DENOM_AUTHORITY_METADATA = '/osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata';
//# sourceMappingURL=authorityMetadata.js.map