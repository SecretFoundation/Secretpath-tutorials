import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisTokenfactoryDenomAuthorityMetadata, DecodedOsmosisTokenfactoryDenomAuthorityMetadata } from './authorityMetadata.js';
import type { OsmosisTokenfactoryParams, DecodedOsmosisTokenfactoryParams } from './params.js';
export type EncodedOsmosisTokenfactoryGenesisState = Encoded<'/osmosis.tokenfactory.v1beta1.GenesisState'>;
export type EncodedOsmosisTokenfactoryGenesisDenom = Encoded<'/osmosis.tokenfactory.v1beta1.GenesisDenom'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the tokenfactory module's genesis state.
 * @param g_params - `params`: defines the paramaters of the module.
 * @param a_factory_denoms - `factory_denoms`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryGenesisState: (atu8_params?: Opt<Encoded<'/osmosis.tokenfactory.v1beta1.Params'>>, a_factory_denoms?: Opt<Encoded<'/osmosis.tokenfactory.v1beta1.GenesisDenom'>[]>) => EncodedOsmosisTokenfactoryGenesisState;
/**
 * Encodes a `GenesisDenom` protobuf message: defines a tokenfactory denom that is defined within genesis state. The structure contains DenomAuthorityMetadata which defines the denom's admin.
 * @param s_denom - `denom`:
 * @param g_authority_metadata - `authority_metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryGenesisDenom: (s_denom?: Opt<string>, atu8_authority_metadata?: Opt<Encoded<'/osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata'>>) => EncodedOsmosisTokenfactoryGenesisDenom;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - defines the paramaters of the module.
 *   - 1: factory_denoms -
 */
export type DecodedOsmosisTokenfactoryGenesisState = [
    a_params?: DecodedOsmosisTokenfactoryParams,
    a_factory_denoms?: DecodedOsmosisTokenfactoryGenesisDenom[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryGenesisState}
 */
export declare const decodeOsmosisTokenfactoryGenesisState: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryGenesisState;
/**
 * A decoded protobuf GenesisDenom message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: authority_metadata -
 */
export type DecodedOsmosisTokenfactoryGenesisDenom = [
    s_denom?: string,
    a_authority_metadata?: DecodedOsmosisTokenfactoryDenomAuthorityMetadata
];
/**
 * Decodes a protobuf GenesisDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryGenesisDenom}
 */
export declare const decodeOsmosisTokenfactoryGenesisDenom: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryGenesisDenom;
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the paramaters of the module.
 *   - 1: factory_denoms -
 */
export declare const destructOsmosisTokenfactoryGenesisState: (g_struct: OsmosisTokenfactoryGenesisState) => [params?: OsmosisTokenfactoryParams, factory_denoms?: OsmosisTokenfactoryGenesisDenom[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_GENESIS_STATE = "/osmosis.tokenfactory.v1beta1.GenesisState";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.GenesisState` - defines the tokenfactory module's genesis state.
 */
export type OsmosisTokenfactoryGenesisState = {
    params?: OsmosisTokenfactoryParams | undefined;
    factory_denoms?: OsmosisTokenfactoryGenesisDenom[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryGenesisDenom} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: authority_metadata -
 */
export declare const destructOsmosisTokenfactoryGenesisDenom: (g_struct: OsmosisTokenfactoryGenesisDenom) => [denom?: string, authority_metadata?: OsmosisTokenfactoryDenomAuthorityMetadata];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_GENESIS_DENOM = "/osmosis.tokenfactory.v1beta1.GenesisDenom";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.GenesisDenom` - defines a tokenfactory denom that is defined within genesis state. The structure contains DenomAuthorityMetadata which defines the denom's admin.
 */
export type OsmosisTokenfactoryGenesisDenom = {
    denom?: string | undefined;
    authority_metadata?: OsmosisTokenfactoryDenomAuthorityMetadata | undefined;
};
