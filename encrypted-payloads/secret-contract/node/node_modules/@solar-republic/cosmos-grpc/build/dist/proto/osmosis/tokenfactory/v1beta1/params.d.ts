import type { WeakUint64Str, SlimCoin, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisTokenfactoryParams = Encoded<'/osmosis.tokenfactory.v1beta1.Params'>;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the tokenfactory module.
 * @param a_denom_creation_fees - `denom_creation_fee`: DenomCreationFee defines the fee to be charged on the creation of a new denom. The fee is drawn from the MsgCreateDenom's sender account, and transferred to the community pool.
 * @param sg_denom_creation_gas_consume - `denom_creation_gas_consume`: DenomCreationGasConsume defines the gas cost for creating a new denom. This is intended as a spam deterrence mechanism. See: https://github.com/CosmWasm/token-factory/issues/11
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryParams: (a_denom_creation_fees?: Opt<SlimCoin[]>, sg_denom_creation_gas_consume?: Opt<WeakUint64Str>) => EncodedOsmosisTokenfactoryParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: denom_creation_fee - DenomCreationFee defines the fee to be charged on the creation of a new denom. The fee is drawn from the MsgCreateDenom's sender account, and transferred to the community pool.
 *   - 1: denom_creation_gas_consume - DenomCreationGasConsume defines the gas cost for creating a new denom. This is intended as a spam deterrence mechanism. See: https://github.com/CosmWasm/token-factory/issues/11
 */
export type DecodedOsmosisTokenfactoryParams = [
    a_denom_creation_fee?: [
        string,
        string
    ][],
    sg_denom_creation_gas_consume?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryParams}
 */
export declare const decodeOsmosisTokenfactoryParams: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryParams;
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_creation_fee - DenomCreationFee defines the fee to be charged on the creation of a new denom. The fee is drawn from the MsgCreateDenom's sender account, and transferred to the community pool.
 *   - 1: denom_creation_gas_consume - DenomCreationGasConsume defines the gas cost for creating a new denom. This is intended as a spam deterrence mechanism. See: https://github.com/CosmWasm/token-factory/issues/11
 */
export declare const destructOsmosisTokenfactoryParams: (g_struct: OsmosisTokenfactoryParams) => [denom_creation_fee?: CosmosBaseCoin[], denom_creation_gas_consume?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_PARAMS = "/osmosis.tokenfactory.v1beta1.Params";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.Params` - defines the parameters for the tokenfactory module.
 */
export type OsmosisTokenfactoryParams = {
    denom_creation_fee?: CosmosBaseCoin[] | undefined;
    denom_creation_gas_consume?: CwUint64 | undefined;
};
