import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBankMetadata, DecodedCosmosBankMetadata } from '../../../cosmos/bank/v1beta1/bank.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisTokenfactoryMsgCreateDenom = Encoded<'/osmosis.tokenfactory.v1beta1.MsgCreateDenom'>;
export type EncodedOsmosisTokenfactoryMsgCreateDenomResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse'>;
export type EncodedOsmosisTokenfactoryMsgMint = Encoded<'/osmosis.tokenfactory.v1beta1.MsgMint'>;
export type EncodedOsmosisTokenfactoryMsgMintResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgMintResponse'>;
export type EncodedOsmosisTokenfactoryMsgBurn = Encoded<'/osmosis.tokenfactory.v1beta1.MsgBurn'>;
export type EncodedOsmosisTokenfactoryMsgBurnResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgBurnResponse'>;
export type EncodedOsmosisTokenfactoryMsgChangeAdmin = Encoded<'/osmosis.tokenfactory.v1beta1.MsgChangeAdmin'>;
export type EncodedOsmosisTokenfactoryMsgChangeAdminResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse'>;
export type EncodedOsmosisTokenfactoryMsgSetBeforeSendHook = Encoded<'/osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook'>;
export type EncodedOsmosisTokenfactoryMsgSetBeforeSendHookResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse'>;
export type EncodedOsmosisTokenfactoryMsgSetDenomMetadata = Encoded<'/osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata'>;
export type EncodedOsmosisTokenfactoryMsgSetDenomMetadataResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse'>;
export type EncodedOsmosisTokenfactoryMsgForceTransfer = Encoded<'/osmosis.tokenfactory.v1beta1.MsgForceTransfer'>;
export type EncodedOsmosisTokenfactoryMsgForceTransferResponse = Encoded<'/osmosis.tokenfactory.v1beta1.MsgForceTransferResponse'>;
/**
 * Encodes a `MsgCreateDenom` protobuf message: defines the message structure for the CreateDenom gRPC service method. It allows an account to create a new denom. It requires a sender address and a sub denomination. The (sender_address, sub_denomination) tuple must be unique and cannot be re-used. The resulting denom created is defined as <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is originally set to be the creator, but this can be changed later. The token denom does not indicate the current admin.
 * @param sa_sender - `sender`:
 * @param s_subdenom - `subdenom`: can be up to 44 "alphanumeric" characters long.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgCreateDenom: (sa_sender?: Opt<WeakAccountAddr>, s_subdenom?: Opt<string>) => EncodedOsmosisTokenfactoryMsgCreateDenom;
/**
 * Encodes a `MsgCreateDenomResponse` protobuf message: the return value of MsgCreateDenom It returns the full string of the newly created denom
 * @param s_new_token_denom - `new_token_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgCreateDenomResponse: (s_new_token_denom?: Opt<string>) => EncodedOsmosisTokenfactoryMsgCreateDenomResponse;
/**
 * Encodes a `MsgMint` protobuf message: the sdk.Msg type for allowing an admin account to mint more of a token. Only the admin of the token factory denom has permission to mint unless the denom does not have any admin.
 * @param sa_sender - `sender`:
 * @param a_amount - `amount`:
 * @param s_mintToAddress - `mintToAddress`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgMint: (sa_sender?: Opt<WeakAccountAddr>, a_amount?: Opt<SlimCoin>, s_mintToAddress?: Opt<string>) => EncodedOsmosisTokenfactoryMsgMint;
/**
 * Encodes a `MsgMintResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgMintResponse: () => EncodedOsmosisTokenfactoryMsgMintResponse;
/**
 * Encodes a `MsgBurn` protobuf message: the sdk.Msg type for allowing an admin account to burn a token. Only the admin of the token factory denom has permission to burn unless the denom does not have any admin.
 * @param sa_sender - `sender`:
 * @param a_amount - `amount`:
 * @param s_burnFromAddress - `burnFromAddress`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgBurn: (sa_sender?: Opt<WeakAccountAddr>, a_amount?: Opt<SlimCoin>, s_burnFromAddress?: Opt<string>) => EncodedOsmosisTokenfactoryMsgBurn;
/**
 * Encodes a `MsgBurnResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgBurnResponse: () => EncodedOsmosisTokenfactoryMsgBurnResponse;
/**
 * Encodes a `MsgChangeAdmin` protobuf message: the sdk.Msg type for allowing an admin account to reassign adminship of a denom to a new account
 * @param sa_sender - `sender`:
 * @param s_denom - `denom`:
 * @param s_new_admin - `new_admin`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgChangeAdmin: (sa_sender?: Opt<WeakAccountAddr>, s_denom?: Opt<string>, s_new_admin?: Opt<string>) => EncodedOsmosisTokenfactoryMsgChangeAdmin;
/**
 * Encodes a `MsgChangeAdminResponse` protobuf message: defines the response structure for an executed MsgChangeAdmin message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgChangeAdminResponse: () => EncodedOsmosisTokenfactoryMsgChangeAdminResponse;
/**
 * Encodes a `MsgSetBeforeSendHook` protobuf message: the sdk.Msg type for allowing an admin account to assign a CosmWasm contract to call with a BeforeSend hook
 * @param sa_sender - `sender`:
 * @param s_denom - `denom`:
 * @param sa_cosmwasm - `cosmwasm_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgSetBeforeSendHook: (sa_sender?: Opt<WeakAccountAddr>, s_denom?: Opt<string>, sa_cosmwasm?: Opt<WeakAccountAddr>) => EncodedOsmosisTokenfactoryMsgSetBeforeSendHook;
/**
 * Encodes a `MsgSetBeforeSendHookResponse` protobuf message: defines the response structure for an executed MsgSetBeforeSendHook message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgSetBeforeSendHookResponse: () => EncodedOsmosisTokenfactoryMsgSetBeforeSendHookResponse;
/**
 * Encodes a `MsgSetDenomMetadata` protobuf message: the sdk.Msg type for allowing an admin account to set the denom's bank metadata
 * @param sa_sender - `sender`:
 * @param g_metadata - `metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgSetDenomMetadata: (sa_sender?: Opt<WeakAccountAddr>, atu8_metadata?: Opt<Encoded<'/cosmos.bank.v1beta1.Metadata'>>) => EncodedOsmosisTokenfactoryMsgSetDenomMetadata;
/**
 * Encodes a `MsgSetDenomMetadataResponse` protobuf message: defines the response structure for an executed MsgSetDenomMetadata message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgSetDenomMetadataResponse: () => EncodedOsmosisTokenfactoryMsgSetDenomMetadataResponse;
/**
 * Encodes a `MsgForceTransfer` protobuf message:
 * @param sa_sender - `sender`:
 * @param a_amount - `amount`:
 * @param s_transferFromAddress - `transferFromAddress`:
 * @param s_transferToAddress - `transferToAddress`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgForceTransfer: (sa_sender?: Opt<WeakAccountAddr>, a_amount?: Opt<SlimCoin>, s_transferFromAddress?: Opt<string>, s_transferToAddress?: Opt<string>) => EncodedOsmosisTokenfactoryMsgForceTransfer;
/**
 * Encodes a `MsgForceTransferResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryMsgForceTransferResponse: () => EncodedOsmosisTokenfactoryMsgForceTransferResponse;
/**
 * A decoded protobuf CreateDenom message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: subdenom - can be up to 44 "alphanumeric" characters long.
 */
export type DecodedOsmosisTokenfactoryMsgCreateDenom = [
    sa_sender?: CwAccountAddr,
    s_subdenom?: string
];
/**
 * Decodes a protobuf CreateDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgCreateDenom}
 */
export declare const decodeOsmosisTokenfactoryMsgCreateDenom: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgCreateDenom;
/**
 * A decoded protobuf CreateDenom message
 *
 * Alias for: new_token_denom -
 */
export type DecodedOsmosisTokenfactoryMsgCreateDenomResponse = [
    s_new_token_denom?: string
];
/**
 * Decodes a protobuf CreateDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgCreateDenomResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgCreateDenomResponse: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgCreateDenomResponse;
/**
 * A decoded protobuf Mint message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: mintToAddress -
 */
export type DecodedOsmosisTokenfactoryMsgMint = [
    sa_sender?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ],
    s_mintToAddress?: string
];
/**
 * Decodes a protobuf Mint message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgMint}
 */
export declare const decodeOsmosisTokenfactoryMsgMint: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgMint;
/**
 * A decoded protobuf Mint message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryMsgMintResponse = [];
/**
 * Decodes a protobuf Mint message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgMintResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgMintResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Burn message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: burnFromAddress -
 */
export type DecodedOsmosisTokenfactoryMsgBurn = [
    sa_sender?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ],
    s_burnFromAddress?: string
];
/**
 * Decodes a protobuf Burn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgBurn}
 */
export declare const decodeOsmosisTokenfactoryMsgBurn: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgBurn;
/**
 * A decoded protobuf Burn message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryMsgBurnResponse = [];
/**
 * Decodes a protobuf Burn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgBurnResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgBurnResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ChangeAdmin message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: denom -
 *   - 2: new_admin -
 */
export type DecodedOsmosisTokenfactoryMsgChangeAdmin = [
    sa_sender?: CwAccountAddr,
    s_denom?: string,
    s_new_admin?: string
];
/**
 * Decodes a protobuf ChangeAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgChangeAdmin}
 */
export declare const decodeOsmosisTokenfactoryMsgChangeAdmin: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgChangeAdmin;
/**
 * A decoded protobuf ChangeAdmin message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryMsgChangeAdminResponse = [];
/**
 * Decodes a protobuf ChangeAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgChangeAdminResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgChangeAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetBeforeSendHook message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: denom -
 *   - 2: cosmwasm_address -
 */
export type DecodedOsmosisTokenfactoryMsgSetBeforeSendHook = [
    sa_sender?: CwAccountAddr,
    s_denom?: string,
    sa_cosmwasm?: CwAccountAddr
];
/**
 * Decodes a protobuf SetBeforeSendHook message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetBeforeSendHook}
 */
export declare const decodeOsmosisTokenfactoryMsgSetBeforeSendHook: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgSetBeforeSendHook;
/**
 * A decoded protobuf SetBeforeSendHook message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryMsgSetBeforeSendHookResponse = [];
/**
 * Decodes a protobuf SetBeforeSendHook message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetBeforeSendHookResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgSetBeforeSendHookResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SetDenomMetadata message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: metadata -
 */
export type DecodedOsmosisTokenfactoryMsgSetDenomMetadata = [
    sa_sender?: CwAccountAddr,
    a_metadata?: DecodedCosmosBankMetadata
];
/**
 * Decodes a protobuf SetDenomMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetDenomMetadata}
 */
export declare const decodeOsmosisTokenfactoryMsgSetDenomMetadata: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgSetDenomMetadata;
/**
 * A decoded protobuf SetDenomMetadata message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryMsgSetDenomMetadataResponse = [];
/**
 * Decodes a protobuf SetDenomMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetDenomMetadataResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgSetDenomMetadataResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ForceTransfer message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: transferFromAddress -
 *   - 3: transferToAddress -
 */
export type DecodedOsmosisTokenfactoryMsgForceTransfer = [
    sa_sender?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ],
    s_transferFromAddress?: string,
    s_transferToAddress?: string
];
/**
 * Decodes a protobuf ForceTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgForceTransfer}
 */
export declare const decodeOsmosisTokenfactoryMsgForceTransfer: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryMsgForceTransfer;
/**
 * A decoded protobuf ForceTransfer message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryMsgForceTransferResponse = [];
/**
 * Decodes a protobuf ForceTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgForceTransferResponse}
 */
export declare const decodeOsmosisTokenfactoryMsgForceTransferResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgCreateDenom} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: subdenom - can be up to 44 "alphanumeric" characters long.
 */
export declare const destructOsmosisTokenfactoryMsgCreateDenom: (g_struct: OsmosisTokenfactoryMsgCreateDenom) => [sender?: CwAccountAddr, subdenom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CREATE_DENOM = "/osmosis.tokenfactory.v1beta1.MsgCreateDenom";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgCreateDenom` - defines the message structure for the CreateDenom gRPC service method. It allows an account to create a new denom. It requires a sender address and a sub denomination. The (sender_address, sub_denomination) tuple must be unique and cannot be re-used. The resulting denom created is defined as <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is originally set to be the creator, but this can be changed later. The token denom does not indicate the current admin.
 */
export type OsmosisTokenfactoryMsgCreateDenom = {
    sender?: CwAccountAddr | undefined;
    subdenom?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgCreateDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_token_denom -
 */
export declare const destructOsmosisTokenfactoryMsgCreateDenomResponse: (g_struct: OsmosisTokenfactoryMsgCreateDenomResponse) => [new_token_denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CREATE_DENOM_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse` - the return value of MsgCreateDenom It returns the full string of the newly created denom
 */
export type OsmosisTokenfactoryMsgCreateDenomResponse = {
    new_token_denom?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgMint} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: mintToAddress -
 */
export declare const destructOsmosisTokenfactoryMsgMint: (g_struct: OsmosisTokenfactoryMsgMint) => [sender?: CwAccountAddr, amount?: CosmosBaseCoin, mintToAddress?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_MINT = "/osmosis.tokenfactory.v1beta1.MsgMint";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgMint` - the sdk.Msg type for allowing an admin account to mint more of a token. Only the admin of the token factory denom has permission to mint unless the denom does not have any admin.
 */
export type OsmosisTokenfactoryMsgMint = {
    sender?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin | undefined;
    mintToAddress?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgMintResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryMsgMintResponse: (g_struct: OsmosisTokenfactoryMsgMintResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_MINT_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgMintResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgMintResponse` -
 */
export type OsmosisTokenfactoryMsgMintResponse = {};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgBurn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: burnFromAddress -
 */
export declare const destructOsmosisTokenfactoryMsgBurn: (g_struct: OsmosisTokenfactoryMsgBurn) => [sender?: CwAccountAddr, amount?: CosmosBaseCoin, burnFromAddress?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_BURN = "/osmosis.tokenfactory.v1beta1.MsgBurn";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgBurn` - the sdk.Msg type for allowing an admin account to burn a token. Only the admin of the token factory denom has permission to burn unless the denom does not have any admin.
 */
export type OsmosisTokenfactoryMsgBurn = {
    sender?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin | undefined;
    burnFromAddress?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgBurnResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryMsgBurnResponse: (g_struct: OsmosisTokenfactoryMsgBurnResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_BURN_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgBurnResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgBurnResponse` -
 */
export type OsmosisTokenfactoryMsgBurnResponse = {};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgChangeAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: denom -
 *   - 2: new_admin -
 */
export declare const destructOsmosisTokenfactoryMsgChangeAdmin: (g_struct: OsmosisTokenfactoryMsgChangeAdmin) => [sender?: CwAccountAddr, denom?: string, new_admin?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CHANGE_ADMIN = "/osmosis.tokenfactory.v1beta1.MsgChangeAdmin";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgChangeAdmin` - the sdk.Msg type for allowing an admin account to reassign adminship of a denom to a new account
 */
export type OsmosisTokenfactoryMsgChangeAdmin = {
    sender?: CwAccountAddr | undefined;
    denom?: string | undefined;
    new_admin?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgChangeAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryMsgChangeAdminResponse: (g_struct: OsmosisTokenfactoryMsgChangeAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CHANGE_ADMIN_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse` - defines the response structure for an executed MsgChangeAdmin message.
 */
export type OsmosisTokenfactoryMsgChangeAdminResponse = {};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetBeforeSendHook} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: denom -
 *   - 2: cosmwasm_address -
 */
export declare const destructOsmosisTokenfactoryMsgSetBeforeSendHook: (g_struct: OsmosisTokenfactoryMsgSetBeforeSendHook) => [sender?: CwAccountAddr, denom?: string, cosmwasm_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_BEFORE_SEND_HOOK = "/osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook` - the sdk.Msg type for allowing an admin account to assign a CosmWasm contract to call with a BeforeSend hook
 */
export type OsmosisTokenfactoryMsgSetBeforeSendHook = {
    sender?: CwAccountAddr | undefined;
    denom?: string | undefined;
    cosmwasm_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetBeforeSendHookResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryMsgSetBeforeSendHookResponse: (g_struct: OsmosisTokenfactoryMsgSetBeforeSendHookResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_BEFORE_SEND_HOOK_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse` - defines the response structure for an executed MsgSetBeforeSendHook message.
 */
export type OsmosisTokenfactoryMsgSetBeforeSendHookResponse = {};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetDenomMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: metadata -
 */
export declare const destructOsmosisTokenfactoryMsgSetDenomMetadata: (g_struct: OsmosisTokenfactoryMsgSetDenomMetadata) => [sender?: CwAccountAddr, metadata?: CosmosBankMetadata];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_DENOM_METADATA = "/osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata` - the sdk.Msg type for allowing an admin account to set the denom's bank metadata
 */
export type OsmosisTokenfactoryMsgSetDenomMetadata = {
    sender?: CwAccountAddr | undefined;
    metadata?: CosmosBankMetadata | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetDenomMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryMsgSetDenomMetadataResponse: (g_struct: OsmosisTokenfactoryMsgSetDenomMetadataResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_DENOM_METADATA_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse` - defines the response structure for an executed MsgSetDenomMetadata message.
 */
export type OsmosisTokenfactoryMsgSetDenomMetadataResponse = {};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgForceTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: transferFromAddress -
 *   - 3: transferToAddress -
 */
export declare const destructOsmosisTokenfactoryMsgForceTransfer: (g_struct: OsmosisTokenfactoryMsgForceTransfer) => [sender?: CwAccountAddr, amount?: CosmosBaseCoin, transferFromAddress?: string, transferToAddress?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_FORCE_TRANSFER = "/osmosis.tokenfactory.v1beta1.MsgForceTransfer";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgForceTransfer` -
 */
export type OsmosisTokenfactoryMsgForceTransfer = {
    sender?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin | undefined;
    transferFromAddress?: string | undefined;
    transferToAddress?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgForceTransferResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryMsgForceTransferResponse: (g_struct: OsmosisTokenfactoryMsgForceTransferResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_FORCE_TRANSFER_RESPONSE = "/osmosis.tokenfactory.v1beta1.MsgForceTransferResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.MsgForceTransferResponse` -
 */
export type OsmosisTokenfactoryMsgForceTransferResponse = {};
