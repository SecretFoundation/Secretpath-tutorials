import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisTxfeesFeeToken, DecodedOsmosisTxfeesFeeToken } from './feetoken.js';
export type EncodedOsmosisTxfeesGenesisState = Encoded<'/osmosis.txfees.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the txfees module's genesis state.
 * @param s_basedenom - `basedenom`:
 * @param a_feetokens - `feetokens`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTxfeesGenesisState: (s_basedenom?: Opt<string>, a_feetokens?: Opt<Encoded<'/osmosis.txfees.v1beta1.FeeToken'>[]>) => EncodedOsmosisTxfeesGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: basedenom -
 *   - 1: feetokens -
 */
export type DecodedOsmosisTxfeesGenesisState = [
    s_basedenom?: string,
    a_feetokens?: DecodedOsmosisTxfeesFeeToken[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTxfeesGenesisState}
 */
export declare const decodeOsmosisTxfeesGenesisState: (atu8_payload: Uint8Array) => DecodedOsmosisTxfeesGenesisState;
/**
 * Destructures the fields of a {@link OsmosisTxfeesGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: basedenom -
 *   - 1: feetokens -
 */
export declare const destructOsmosisTxfeesGenesisState: (g_struct: OsmosisTxfeesGenesisState) => [basedenom?: string, feetokens?: OsmosisTxfeesFeeToken[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TXFEES_GENESIS_STATE = "/osmosis.txfees.v1beta1.GenesisState";
/**
 * JSON serialization of `osmosis.txfees.v1beta1.GenesisState` - defines the txfees module's genesis state.
 */
export type OsmosisTxfeesGenesisState = {
    basedenom?: string | undefined;
    feetokens?: OsmosisTxfeesFeeToken[] | undefined;
};
