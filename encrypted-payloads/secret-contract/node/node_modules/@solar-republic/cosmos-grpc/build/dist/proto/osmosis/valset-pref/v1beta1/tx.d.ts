import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
import type { OsmosisValsetprefValidatorPreference, DecodedOsmosisValsetprefValidatorPreference } from './state.js';
export type EncodedOsmosisValsetprefMsgSetValidatorSetPreference = Encoded<'/osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreference'>;
export type EncodedOsmosisValsetprefMsgSetValidatorSetPreferenceResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreferenceResponse'>;
export type EncodedOsmosisValsetprefMsgDelegateToValidatorSet = Encoded<'/osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSet'>;
export type EncodedOsmosisValsetprefMsgDelegateToValidatorSetResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSetResponse'>;
export type EncodedOsmosisValsetprefMsgUndelegateFromValidatorSet = Encoded<'/osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSet'>;
export type EncodedOsmosisValsetprefMsgUndelegateFromValidatorSetResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSetResponse'>;
export type EncodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet = Encoded<'/osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSet'>;
export type EncodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSetResponse'>;
export type EncodedOsmosisValsetprefMsgRedelegateValidatorSet = Encoded<'/osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSet'>;
export type EncodedOsmosisValsetprefMsgRedelegateValidatorSetResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSetResponse'>;
export type EncodedOsmosisValsetprefMsgWithdrawDelegationRewards = Encoded<'/osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewards'>;
export type EncodedOsmosisValsetprefMsgWithdrawDelegationRewardsResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewardsResponse'>;
export type EncodedOsmosisValsetprefMsgDelegateBondedTokens = Encoded<'/osmosis.valsetpref.v1beta1.MsgDelegateBondedTokens'>;
export type EncodedOsmosisValsetprefMsgDelegateBondedTokensResponse = Encoded<'/osmosis.valsetpref.v1beta1.MsgDelegateBondedTokensResponse'>;
/**
 * Encodes a `MsgSetValidatorSetPreference` protobuf message: MsgCreateValidatorSetPreference is a list that holds validator-set.
 * @param sa_delegator - `delegator`: the user who is trying to create a validator-set.
 * @param a_preferences - `preferences`: list of {valAddr, weight} to delegate to
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgSetValidatorSetPreference: (sa_delegator?: Opt<WeakAccountAddr>, a_preferences?: Opt<Encoded<'/osmosis.valsetpref.v1beta1.ValidatorPreference'>[]>) => EncodedOsmosisValsetprefMsgSetValidatorSetPreference;
/**
 * Encodes a `MsgSetValidatorSetPreferenceResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgSetValidatorSetPreferenceResponse: () => EncodedOsmosisValsetprefMsgSetValidatorSetPreferenceResponse;
/**
 * Encodes a `MsgDelegateToValidatorSet` protobuf message: allows users to delegate to an existing validator-set
 * @param sa_delegator - `delegator`: the user who is trying to delegate.
 * @param a_coin - `coin`: the amount of tokens the user is trying to delegate. For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to B, 2osmo to C.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgDelegateToValidatorSet: (sa_delegator?: Opt<WeakAccountAddr>, a_coin?: Opt<SlimCoin>) => EncodedOsmosisValsetprefMsgDelegateToValidatorSet;
/**
 * Encodes a `MsgDelegateToValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgDelegateToValidatorSetResponse: () => EncodedOsmosisValsetprefMsgDelegateToValidatorSetResponse;
/**
 * Encodes a `MsgUndelegateFromValidatorSet` protobuf message:
 * @param sa_delegator - `delegator`: the user who is trying to undelegate.
 * @param a_coin - `coin`: the amount the user wants to undelegate For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A , 3osmo from B, 2osmo from C
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgUndelegateFromValidatorSet: (sa_delegator?: Opt<WeakAccountAddr>, a_coin?: Opt<SlimCoin>) => EncodedOsmosisValsetprefMsgUndelegateFromValidatorSet;
/**
 * Encodes a `MsgUndelegateFromValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgUndelegateFromValidatorSetResponse: () => EncodedOsmosisValsetprefMsgUndelegateFromValidatorSetResponse;
/**
 * Encodes a `MsgUndelegateFromRebalancedValidatorSet` protobuf message:
 * @param sa_delegator - `delegator`: the user who is trying to undelegate.
 * @param a_coin - `coin`: the amount the user wants to undelegate For ex: Undelegate 50 osmo with validator-set {ValA -> 0.5, ValB -> 0.5} Our undelegate logic would first check the current delegation balance. If the user has 90 osmo delegated to ValA and 10 osmo delegated to ValB, the rebalanced validator set would be {ValA -> 0.9, ValB -> 0.1} So now the 45 osmo would be undelegated from ValA and 5 osmo would be undelegated from ValB.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet: (sa_delegator?: Opt<WeakAccountAddr>, a_coin?: Opt<SlimCoin>) => EncodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet;
/**
 * Encodes a `MsgUndelegateFromRebalancedValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse: () => EncodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse;
/**
 * Encodes a `MsgRedelegateValidatorSet` protobuf message:
 * @param sa_delegator - `delegator`: the user who is trying to create a validator-set.
 * @param a_preferences - `preferences`: list of {valAddr, weight} to delegate to
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgRedelegateValidatorSet: (sa_delegator?: Opt<WeakAccountAddr>, a_preferences?: Opt<Encoded<'/osmosis.valsetpref.v1beta1.ValidatorPreference'>[]>) => EncodedOsmosisValsetprefMsgRedelegateValidatorSet;
/**
 * Encodes a `MsgRedelegateValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgRedelegateValidatorSetResponse: () => EncodedOsmosisValsetprefMsgRedelegateValidatorSetResponse;
/**
 * Encodes a `MsgWithdrawDelegationRewards` protobuf message: allows user to claim staking rewards from the validator set.
 * @param sa_delegator - `delegator`: the user who is trying to claim staking rewards.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgWithdrawDelegationRewards: (sa_delegator?: Opt<WeakAccountAddr>) => EncodedOsmosisValsetprefMsgWithdrawDelegationRewards;
/**
 * Encodes a `MsgWithdrawDelegationRewardsResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgWithdrawDelegationRewardsResponse: () => EncodedOsmosisValsetprefMsgWithdrawDelegationRewardsResponse;
/**
 * Encodes a `MsgDelegateBondedTokens` protobuf message: breaks bonded lockup (by ID) of osmo, of length <= 2 weeks and takes all that osmo and delegates according to delegator's current validator set preference.
 * @param sa_delegator - `delegator`: the user who is trying to force unbond osmo and delegate.
 * @param sg_lockID - `lockID`: lockup id of osmo in the pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgDelegateBondedTokens: (sa_delegator?: Opt<WeakAccountAddr>, sg_lockID?: Opt<WeakUint64Str>) => EncodedOsmosisValsetprefMsgDelegateBondedTokens;
/**
 * Encodes a `MsgDelegateBondedTokensResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefMsgDelegateBondedTokensResponse: () => EncodedOsmosisValsetprefMsgDelegateBondedTokensResponse;
/**
 * A decoded protobuf SetValidatorSetPreference message
 *
 * Tuple where:
 *   - 0: delegator - the user who is trying to create a validator-set.
 *   - 1: preferences - list of {valAddr, weight} to delegate to
 */
export type DecodedOsmosisValsetprefMsgSetValidatorSetPreference = [
    sa_delegator?: CwAccountAddr,
    a_preferences?: DecodedOsmosisValsetprefValidatorPreference[]
];
/**
 * Decodes a protobuf SetValidatorSetPreference message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgSetValidatorSetPreference}
 */
export declare const decodeOsmosisValsetprefMsgSetValidatorSetPreference: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefMsgSetValidatorSetPreference;
/**
 * A decoded protobuf SetValidatorSetPreference message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgSetValidatorSetPreferenceResponse = [];
/**
 * Decodes a protobuf SetValidatorSetPreference message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgSetValidatorSetPreferenceResponse}
 */
export declare const decodeOsmosisValsetprefMsgSetValidatorSetPreferenceResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf DelegateToValidatorSet message
 *
 * Tuple where:
 *   - 0: delegator - the user who is trying to delegate.
 *   - 1: coin - the amount of tokens the user is trying to delegate. For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to B, 2osmo to C.
 */
export type DecodedOsmosisValsetprefMsgDelegateToValidatorSet = [
    sa_delegator?: CwAccountAddr,
    a_coin?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf DelegateToValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateToValidatorSet}
 */
export declare const decodeOsmosisValsetprefMsgDelegateToValidatorSet: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefMsgDelegateToValidatorSet;
/**
 * A decoded protobuf DelegateToValidatorSet message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgDelegateToValidatorSetResponse = [];
/**
 * Decodes a protobuf DelegateToValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateToValidatorSetResponse}
 */
export declare const decodeOsmosisValsetprefMsgDelegateToValidatorSetResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UndelegateFromValidatorSet message
 *
 * Tuple where:
 *   - 0: delegator - the user who is trying to undelegate.
 *   - 2: coin - the amount the user wants to undelegate For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A , 3osmo from B, 2osmo from C
 */
export type DecodedOsmosisValsetprefMsgUndelegateFromValidatorSet = [
    sa_delegator?: CwAccountAddr,
    w_0?: undefined,
    a_coin?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf UndelegateFromValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromValidatorSet}
 */
export declare const decodeOsmosisValsetprefMsgUndelegateFromValidatorSet: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedOsmosisValsetprefMsgUndelegateFromValidatorSet;
/**
 * A decoded protobuf UndelegateFromValidatorSet message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgUndelegateFromValidatorSetResponse = [];
/**
 * Decodes a protobuf UndelegateFromValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromValidatorSetResponse}
 */
export declare const decodeOsmosisValsetprefMsgUndelegateFromValidatorSetResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UndelegateFromRebalancedValidatorSet message
 *
 * Tuple where:
 *   - 0: delegator - the user who is trying to undelegate.
 *   - 1: coin - the amount the user wants to undelegate For ex: Undelegate 50 osmo with validator-set {ValA -> 0.5, ValB -> 0.5} Our undelegate logic would first check the current delegation balance. If the user has 90 osmo delegated to ValA and 10 osmo delegated to ValB, the rebalanced validator set would be {ValA -> 0.9, ValB -> 0.1} So now the 45 osmo would be undelegated from ValA and 5 osmo would be undelegated from ValB.
 */
export type DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet = [
    sa_delegator?: CwAccountAddr,
    a_coin?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf UndelegateFromRebalancedValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet}
 */
export declare const decodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet;
/**
 * A decoded protobuf UndelegateFromRebalancedValidatorSet message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse = [];
/**
 * Decodes a protobuf UndelegateFromRebalancedValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse}
 */
export declare const decodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RedelegateValidatorSet message
 *
 * Tuple where:
 *   - 0: delegator - the user who is trying to create a validator-set.
 *   - 1: preferences - list of {valAddr, weight} to delegate to
 */
export type DecodedOsmosisValsetprefMsgRedelegateValidatorSet = [
    sa_delegator?: CwAccountAddr,
    a_preferences?: DecodedOsmosisValsetprefValidatorPreference[]
];
/**
 * Decodes a protobuf RedelegateValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgRedelegateValidatorSet}
 */
export declare const decodeOsmosisValsetprefMsgRedelegateValidatorSet: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefMsgRedelegateValidatorSet;
/**
 * A decoded protobuf RedelegateValidatorSet message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgRedelegateValidatorSetResponse = [];
/**
 * Decodes a protobuf RedelegateValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgRedelegateValidatorSetResponse}
 */
export declare const decodeOsmosisValsetprefMsgRedelegateValidatorSetResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf WithdrawDelegationRewards message
 *
 * Alias for: delegator - the user who is trying to claim staking rewards.
 */
export type DecodedOsmosisValsetprefMsgWithdrawDelegationRewards = [
    sa_delegator?: CwAccountAddr
];
/**
 * Decodes a protobuf WithdrawDelegationRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgWithdrawDelegationRewards}
 */
export declare const decodeOsmosisValsetprefMsgWithdrawDelegationRewards: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefMsgWithdrawDelegationRewards;
/**
 * A decoded protobuf WithdrawDelegationRewards message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgWithdrawDelegationRewardsResponse = [];
/**
 * Decodes a protobuf WithdrawDelegationRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgWithdrawDelegationRewardsResponse}
 */
export declare const decodeOsmosisValsetprefMsgWithdrawDelegationRewardsResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf DelegateBondedTokens message
 *
 * Tuple where:
 *   - 0: delegator - the user who is trying to force unbond osmo and delegate.
 *   - 1: lockID - lockup id of osmo in the pool
 */
export type DecodedOsmosisValsetprefMsgDelegateBondedTokens = [
    sa_delegator?: CwAccountAddr,
    sg_lockID?: CwUint64
];
/**
 * Decodes a protobuf DelegateBondedTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateBondedTokens}
 */
export declare const decodeOsmosisValsetprefMsgDelegateBondedTokens: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefMsgDelegateBondedTokens;
/**
 * A decoded protobuf DelegateBondedTokens message
 *
 * Tuple where:
 */
export type DecodedOsmosisValsetprefMsgDelegateBondedTokensResponse = [];
/**
 * Decodes a protobuf DelegateBondedTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateBondedTokensResponse}
 */
export declare const decodeOsmosisValsetprefMsgDelegateBondedTokensResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgSetValidatorSetPreference} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to create a validator-set.
 *   - 1: preferences - list of {valAddr, weight} to delegate to
 */
export declare const destructOsmosisValsetprefMsgSetValidatorSetPreference: (g_struct: OsmosisValsetprefMsgSetValidatorSetPreference) => [delegator?: CwAccountAddr, preferences?: OsmosisValsetprefValidatorPreference[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_SET_VALIDATOR_SET_PREFERENCE = "/osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreference";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreference` - MsgCreateValidatorSetPreference is a list that holds validator-set.
 */
export type OsmosisValsetprefMsgSetValidatorSetPreference = {
    delegator?: CwAccountAddr | undefined;
    preferences?: OsmosisValsetprefValidatorPreference[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgSetValidatorSetPreferenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgSetValidatorSetPreferenceResponse: (g_struct: OsmosisValsetprefMsgSetValidatorSetPreferenceResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_SET_VALIDATOR_SET_PREFERENCE_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreferenceResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreferenceResponse` -
 */
export type OsmosisValsetprefMsgSetValidatorSetPreferenceResponse = {};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateToValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to delegate.
 *   - 1: coin - the amount of tokens the user is trying to delegate. For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to B, 2osmo to C.
 */
export declare const destructOsmosisValsetprefMsgDelegateToValidatorSet: (g_struct: OsmosisValsetprefMsgDelegateToValidatorSet) => [delegator?: CwAccountAddr, coin?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_TO_VALIDATOR_SET = "/osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSet";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSet` - allows users to delegate to an existing validator-set
 */
export type OsmosisValsetprefMsgDelegateToValidatorSet = {
    delegator?: CwAccountAddr | undefined;
    coin?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateToValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgDelegateToValidatorSetResponse: (g_struct: OsmosisValsetprefMsgDelegateToValidatorSetResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_TO_VALIDATOR_SET_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSetResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSetResponse` -
 */
export type OsmosisValsetprefMsgDelegateToValidatorSetResponse = {};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to undelegate.
 *   - 2: coin - the amount the user wants to undelegate For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A , 3osmo from B, 2osmo from C
 */
export declare const destructOsmosisValsetprefMsgUndelegateFromValidatorSet: (g_struct: OsmosisValsetprefMsgUndelegateFromValidatorSet) => [delegator?: CwAccountAddr, EMPTY?: void, coin?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_VALIDATOR_SET = "/osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSet";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSet` -
 */
export type OsmosisValsetprefMsgUndelegateFromValidatorSet = {
    delegator?: CwAccountAddr | undefined;
    coin?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgUndelegateFromValidatorSetResponse: (g_struct: OsmosisValsetprefMsgUndelegateFromValidatorSetResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_VALIDATOR_SET_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSetResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSetResponse` -
 */
export type OsmosisValsetprefMsgUndelegateFromValidatorSetResponse = {};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to undelegate.
 *   - 1: coin - the amount the user wants to undelegate For ex: Undelegate 50 osmo with validator-set {ValA -> 0.5, ValB -> 0.5} Our undelegate logic would first check the current delegation balance. If the user has 90 osmo delegated to ValA and 10 osmo delegated to ValB, the rebalanced validator set would be {ValA -> 0.9, ValB -> 0.1} So now the 45 osmo would be undelegated from ValA and 5 osmo would be undelegated from ValB.
 */
export declare const destructOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet: (g_struct: OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet) => [delegator?: CwAccountAddr, coin?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_REBALANCED_VALIDATOR_SET = "/osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSet";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSet` -
 */
export type OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet = {
    delegator?: CwAccountAddr | undefined;
    coin?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse: (g_struct: OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_REBALANCED_VALIDATOR_SET_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSetResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSetResponse` -
 */
export type OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse = {};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgRedelegateValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to create a validator-set.
 *   - 1: preferences - list of {valAddr, weight} to delegate to
 */
export declare const destructOsmosisValsetprefMsgRedelegateValidatorSet: (g_struct: OsmosisValsetprefMsgRedelegateValidatorSet) => [delegator?: CwAccountAddr, preferences?: OsmosisValsetprefValidatorPreference[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_REDELEGATE_VALIDATOR_SET = "/osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSet";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSet` -
 */
export type OsmosisValsetprefMsgRedelegateValidatorSet = {
    delegator?: CwAccountAddr | undefined;
    preferences?: OsmosisValsetprefValidatorPreference[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgRedelegateValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgRedelegateValidatorSetResponse: (g_struct: OsmosisValsetprefMsgRedelegateValidatorSetResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_REDELEGATE_VALIDATOR_SET_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSetResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSetResponse` -
 */
export type OsmosisValsetprefMsgRedelegateValidatorSetResponse = {};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgWithdrawDelegationRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to claim staking rewards.
 */
export declare const destructOsmosisValsetprefMsgWithdrawDelegationRewards: (g_struct: OsmosisValsetprefMsgWithdrawDelegationRewards) => [delegator?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_WITHDRAW_DELEGATION_REWARDS = "/osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewards";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewards` - allows user to claim staking rewards from the validator set.
 */
export type OsmosisValsetprefMsgWithdrawDelegationRewards = {
    delegator?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgWithdrawDelegationRewardsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgWithdrawDelegationRewardsResponse: (g_struct: OsmosisValsetprefMsgWithdrawDelegationRewardsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_WITHDRAW_DELEGATION_REWARDS_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewardsResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewardsResponse` -
 */
export type OsmosisValsetprefMsgWithdrawDelegationRewardsResponse = {};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateBondedTokens} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to force unbond osmo and delegate.
 *   - 1: lockID - lockup id of osmo in the pool
 */
export declare const destructOsmosisValsetprefMsgDelegateBondedTokens: (g_struct: OsmosisValsetprefMsgDelegateBondedTokens) => [delegator?: CwAccountAddr, lockID?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_BONDED_TOKENS = "/osmosis.valsetpref.v1beta1.MsgDelegateBondedTokens";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgDelegateBondedTokens` - breaks bonded lockup (by ID) of osmo, of length <= 2 weeks and takes all that osmo and delegates according to delegator's current validator set preference.
 */
export type OsmosisValsetprefMsgDelegateBondedTokens = {
    delegator?: CwAccountAddr | undefined;
    lockID?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateBondedTokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisValsetprefMsgDelegateBondedTokensResponse: (g_struct: OsmosisValsetprefMsgDelegateBondedTokensResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_BONDED_TOKENS_RESPONSE = "/osmosis.valsetpref.v1beta1.MsgDelegateBondedTokensResponse";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.MsgDelegateBondedTokensResponse` -
 */
export type OsmosisValsetprefMsgDelegateBondedTokensResponse = {};
