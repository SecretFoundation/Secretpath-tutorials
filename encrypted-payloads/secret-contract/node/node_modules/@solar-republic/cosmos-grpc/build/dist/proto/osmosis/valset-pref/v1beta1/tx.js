import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
import { decodeOsmosisValsetprefValidatorPreference } from './state.js';
/**
 * Encodes a `MsgSetValidatorSetPreference` protobuf message: MsgCreateValidatorSetPreference is a list that holds validator-set.
 * @param sa_delegator - `delegator`: the user who is trying to create a validator-set.
 * @param a_preferences - `preferences`: list of {valAddr, weight} to delegate to
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgSetValidatorSetPreference = (sa_delegator, a_preferences) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .B(a_preferences) // ValidatorPreference[] preferences = 2
    .o;
/**
 * Encodes a `MsgSetValidatorSetPreferenceResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgSetValidatorSetPreferenceResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgDelegateToValidatorSet` protobuf message: allows users to delegate to an existing validator-set
 * @param sa_delegator - `delegator`: the user who is trying to delegate.
 * @param a_coin - `coin`: the amount of tokens the user is trying to delegate. For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to B, 2osmo to C.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgDelegateToValidatorSet = (sa_delegator, a_coin) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .b(coin(a_coin)) // Coin coin = 2
    .o;
/**
 * Encodes a `MsgDelegateToValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgDelegateToValidatorSetResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUndelegateFromValidatorSet` protobuf message:
 * @param sa_delegator - `delegator`: the user who is trying to undelegate.
 * @param a_coin - `coin`: the amount the user wants to undelegate For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A , 3osmo from B, 2osmo from C
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgUndelegateFromValidatorSet = (sa_delegator, a_coin) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .b(coin(a_coin), 3) // Coin coin = 3
    .o;
/**
 * Encodes a `MsgUndelegateFromValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgUndelegateFromValidatorSetResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUndelegateFromRebalancedValidatorSet` protobuf message:
 * @param sa_delegator - `delegator`: the user who is trying to undelegate.
 * @param a_coin - `coin`: the amount the user wants to undelegate For ex: Undelegate 50 osmo with validator-set {ValA -> 0.5, ValB -> 0.5} Our undelegate logic would first check the current delegation balance. If the user has 90 osmo delegated to ValA and 10 osmo delegated to ValB, the rebalanced validator set would be {ValA -> 0.9, ValB -> 0.1} So now the 45 osmo would be undelegated from ValA and 5 osmo would be undelegated from ValB.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet = (sa_delegator, a_coin) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .b(coin(a_coin)) // Coin coin = 2
    .o;
/**
 * Encodes a `MsgUndelegateFromRebalancedValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgRedelegateValidatorSet` protobuf message:
 * @param sa_delegator - `delegator`: the user who is trying to create a validator-set.
 * @param a_preferences - `preferences`: list of {valAddr, weight} to delegate to
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgRedelegateValidatorSet = (sa_delegator, a_preferences) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .B(a_preferences) // ValidatorPreference[] preferences = 2
    .o;
/**
 * Encodes a `MsgRedelegateValidatorSetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgRedelegateValidatorSetResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgWithdrawDelegationRewards` protobuf message: allows user to claim staking rewards from the validator set.
 * @param sa_delegator - `delegator`: the user who is trying to claim staking rewards.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgWithdrawDelegationRewards = (sa_delegator) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .o;
/**
 * Encodes a `MsgWithdrawDelegationRewardsResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgWithdrawDelegationRewardsResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgDelegateBondedTokens` protobuf message: breaks bonded lockup (by ID) of osmo, of length <= 2 weeks and takes all that osmo and delegates according to delegator's current validator set preference.
 * @param sa_delegator - `delegator`: the user who is trying to force unbond osmo and delegate.
 * @param sg_lockID - `lockID`: lockup id of osmo in the pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgDelegateBondedTokens = (sa_delegator, sg_lockID) => Protobuf() // ...
    .s(sa_delegator) // string delegator = 1
    .g(sg_lockID) // uint64 lockID = 2
    .o;
/**
 * Encodes a `MsgDelegateBondedTokensResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefMsgDelegateBondedTokensResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf SetValidatorSetPreference message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgSetValidatorSetPreference}
 */
export const decodeOsmosisValsetprefMsgSetValidatorSetPreference = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeOsmosisValsetprefValidatorPreference]);
/**
 * Decodes a protobuf SetValidatorSetPreference message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgSetValidatorSetPreferenceResponse}
 */
export const decodeOsmosisValsetprefMsgSetValidatorSetPreferenceResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf DelegateToValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateToValidatorSet}
 */
export const decodeOsmosisValsetprefMsgDelegateToValidatorSet = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decode_coin]);
/**
 * Decodes a protobuf DelegateToValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateToValidatorSetResponse}
 */
export const decodeOsmosisValsetprefMsgDelegateToValidatorSetResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UndelegateFromValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromValidatorSet}
 */
export const decodeOsmosisValsetprefMsgUndelegateFromValidatorSet = ((atu8_payload, [sa_delegator, , a_coin] = decode_protobuf(atu8_payload, [5, 0, 1], [0, 0, decode_coin])) => [sa_delegator, __UNDEFINED, a_coin]);
/**
 * Decodes a protobuf UndelegateFromValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromValidatorSetResponse}
 */
export const decodeOsmosisValsetprefMsgUndelegateFromValidatorSetResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UndelegateFromRebalancedValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet}
 */
export const decodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decode_coin]);
/**
 * Decodes a protobuf UndelegateFromRebalancedValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse}
 */
export const decodeOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RedelegateValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgRedelegateValidatorSet}
 */
export const decodeOsmosisValsetprefMsgRedelegateValidatorSet = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeOsmosisValsetprefValidatorPreference]);
/**
 * Decodes a protobuf RedelegateValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgRedelegateValidatorSetResponse}
 */
export const decodeOsmosisValsetprefMsgRedelegateValidatorSetResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf WithdrawDelegationRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgWithdrawDelegationRewards}
 */
export const decodeOsmosisValsetprefMsgWithdrawDelegationRewards = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf WithdrawDelegationRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgWithdrawDelegationRewardsResponse}
 */
export const decodeOsmosisValsetprefMsgWithdrawDelegationRewardsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf DelegateBondedTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateBondedTokens}
 */
export const decodeOsmosisValsetprefMsgDelegateBondedTokens = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf DelegateBondedTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefMsgDelegateBondedTokensResponse}
 */
export const decodeOsmosisValsetprefMsgDelegateBondedTokensResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgSetValidatorSetPreference} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to create a validator-set.
 *   - 1: preferences - list of {valAddr, weight} to delegate to
 */
export const destructOsmosisValsetprefMsgSetValidatorSetPreference = (g_struct) => [g_struct.delegator, g_struct.preferences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_SET_VALIDATOR_SET_PREFERENCE = '/osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreference';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgSetValidatorSetPreferenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgSetValidatorSetPreferenceResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_SET_VALIDATOR_SET_PREFERENCE_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgSetValidatorSetPreferenceResponse';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateToValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to delegate.
 *   - 1: coin - the amount of tokens the user is trying to delegate. For ex: delegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our staking logic would attempt to delegate 5osmo to A , 3osmo to B, 2osmo to C.
 */
export const destructOsmosisValsetprefMsgDelegateToValidatorSet = (g_struct) => [g_struct.delegator, g_struct.coin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_TO_VALIDATOR_SET = '/osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSet';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateToValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgDelegateToValidatorSetResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_TO_VALIDATOR_SET_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgDelegateToValidatorSetResponse';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to undelegate.
 *   - 2: coin - the amount the user wants to undelegate For ex: Undelegate 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2} our undelegate logic would attempt to undelegate 5osmo from A , 3osmo from B, 2osmo from C
 */
export const destructOsmosisValsetprefMsgUndelegateFromValidatorSet = (g_struct) => [g_struct.delegator, __UNDEFINED, g_struct.coin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_VALIDATOR_SET = '/osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSet';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgUndelegateFromValidatorSetResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_VALIDATOR_SET_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgUndelegateFromValidatorSetResponse';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to undelegate.
 *   - 1: coin - the amount the user wants to undelegate For ex: Undelegate 50 osmo with validator-set {ValA -> 0.5, ValB -> 0.5} Our undelegate logic would first check the current delegation balance. If the user has 90 osmo delegated to ValA and 10 osmo delegated to ValB, the rebalanced validator set would be {ValA -> 0.9, ValB -> 0.1} So now the 45 osmo would be undelegated from ValA and 5 osmo would be undelegated from ValB.
 */
export const destructOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSet = (g_struct) => [g_struct.delegator, g_struct.coin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_REBALANCED_VALIDATOR_SET = '/osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSet';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgUndelegateFromRebalancedValidatorSetResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_UNDELEGATE_FROM_REBALANCED_VALIDATOR_SET_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgUndelegateFromRebalancedValidatorSetResponse';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgRedelegateValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to create a validator-set.
 *   - 1: preferences - list of {valAddr, weight} to delegate to
 */
export const destructOsmosisValsetprefMsgRedelegateValidatorSet = (g_struct) => [g_struct.delegator, g_struct.preferences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_REDELEGATE_VALIDATOR_SET = '/osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSet';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgRedelegateValidatorSetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgRedelegateValidatorSetResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_REDELEGATE_VALIDATOR_SET_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgRedelegateValidatorSetResponse';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgWithdrawDelegationRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to claim staking rewards.
 */
export const destructOsmosisValsetprefMsgWithdrawDelegationRewards = (g_struct) => [g_struct.delegator];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_WITHDRAW_DELEGATION_REWARDS = '/osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewards';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgWithdrawDelegationRewardsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgWithdrawDelegationRewardsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_WITHDRAW_DELEGATION_REWARDS_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgWithdrawDelegationRewardsResponse';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateBondedTokens} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator - the user who is trying to force unbond osmo and delegate.
 *   - 1: lockID - lockup id of osmo in the pool
 */
export const destructOsmosisValsetprefMsgDelegateBondedTokens = (g_struct) => [g_struct.delegator, g_struct.lockID];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_BONDED_TOKENS = '/osmosis.valsetpref.v1beta1.MsgDelegateBondedTokens';
/**
 * Destructures the fields of a {@link OsmosisValsetprefMsgDelegateBondedTokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisValsetprefMsgDelegateBondedTokensResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_MSG_DELEGATE_BONDED_TOKENS_RESPONSE = '/osmosis.valsetpref.v1beta1.MsgDelegateBondedTokensResponse';
//# sourceMappingURL=tx.js.map