import type { NaiveHexLower } from '@blake.regalia/belt';
import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwHexLower, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedSecretComputeMsgStoreCode = Encoded<'/secret.compute.v1beta1.MsgStoreCode'>;
export type EncodedSecretComputeMsgStoreCodeResponse = Encoded<'/secret.compute.v1beta1.MsgStoreCodeResponse'>;
export type EncodedSecretComputeMsgInstantiateContract = Encoded<'/secret.compute.v1beta1.MsgInstantiateContract'>;
export type EncodedSecretComputeMsgInstantiateContractResponse = Encoded<'/secret.compute.v1beta1.MsgInstantiateContractResponse'>;
export type EncodedSecretComputeMsgExecuteContract = Encoded<'/secret.compute.v1beta1.MsgExecuteContract'>;
export type EncodedSecretComputeMsgExecuteContractResponse = Encoded<'/secret.compute.v1beta1.MsgExecuteContractResponse'>;
export type EncodedSecretComputeMsgMigrateContract = Encoded<'/secret.compute.v1beta1.MsgMigrateContract'>;
export type EncodedSecretComputeMsgMigrateContractResponse = Encoded<'/secret.compute.v1beta1.MsgMigrateContractResponse'>;
export type EncodedSecretComputeMsgUpdateAdmin = Encoded<'/secret.compute.v1beta1.MsgUpdateAdmin'>;
export type EncodedSecretComputeMsgUpdateAdminResponse = Encoded<'/secret.compute.v1beta1.MsgUpdateAdminResponse'>;
export type EncodedSecretComputeMsgClearAdmin = Encoded<'/secret.compute.v1beta1.MsgClearAdmin'>;
export type EncodedSecretComputeMsgClearAdminResponse = Encoded<'/secret.compute.v1beta1.MsgClearAdminResponse'>;
/**
 * Encodes a `MsgStoreCode` protobuf message:
 * @param sa_sender - `sender`: the canonical address of the sender
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param s_source - `source`: Source is a valid absolute HTTPS URI to the contract's source code, optional
 * @param s_builder - `builder`: Builder is a valid docker image name with tag, optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgStoreCode: (sa_sender?: Opt<WeakAccountAddr>, atu8_wasm_byte_code?: Opt<Uint8Array>, s_source?: Opt<string>, s_builder?: Opt<string>) => EncodedSecretComputeMsgStoreCode;
/**
 * Encodes a `MsgStoreCodeResponse` protobuf message: returns store result data.
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgStoreCodeResponse: (sg_code_id?: Opt<WeakUint64Str>) => EncodedSecretComputeMsgStoreCodeResponse;
/**
 * Encodes a `MsgInstantiateContract` protobuf message:
 * @param sa_sender - `sender`: the canonical address of the sender
 * @param sb16_callback_code_hash - `callback_code_hash`:
 * @param sg_code_id - `code_id`:
 * @param s_label - `label`:
 * @param atu8_init_msg - `init_msg`: an encrypted input to pass to the contract on init
 * @param a_init_funds - `init_funds`:
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgInstantiateContract: (sa_sender?: Opt<WeakAccountAddr>, sb16_callback_code_hash?: Opt<NaiveHexLower>, sg_code_id?: Opt<WeakUint64Str>, s_label?: Opt<string>, atu8_init_msg?: Opt<Uint8Array>, a_init_funds?: Opt<SlimCoin[]>, atu8_callback_sig?: Opt<Uint8Array>, s_admin?: Opt<string>) => EncodedSecretComputeMsgInstantiateContract;
/**
 * Encodes a `MsgInstantiateContractResponse` protobuf message: return instantiation result data
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains base64-encoded bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgInstantiateContractResponse: (sa_address?: Opt<WeakAccountAddr>, atu8_data?: Opt<Uint8Array>) => EncodedSecretComputeMsgInstantiateContractResponse;
/**
 * Encodes a `MsgExecuteContract` protobuf message:
 * @param sa_sender - `sender`: the canonical address of the sender
 * @param sa_contract - `contract`: the canonical address of the contract
 * @param atu8_msg - `msg`: an encrypted input to pass to the contract on execute
 * @param sb16_callback_code_hash - `callback_code_hash`: used internally for encryption, should always be empty in a signed transaction
 * @param a_sent_funds - `sent_funds`:
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgExecuteContract: (sa_sender?: Opt<WeakAccountAddr>, sa_contract?: Opt<WeakAccountAddr>, atu8_msg?: Opt<Uint8Array>, sb16_callback_code_hash?: Opt<NaiveHexLower>, a_sent_funds?: Opt<SlimCoin[]>, atu8_callback_sig?: Opt<Uint8Array>) => EncodedSecretComputeMsgExecuteContract;
/**
 * Encodes a `MsgExecuteContractResponse` protobuf message: returns execution result data.
 * @param atu8_data - `data`: Data contains base64-encoded bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgExecuteContractResponse: (atu8_data?: Opt<Uint8Array>) => EncodedSecretComputeMsgExecuteContractResponse;
/**
 * Encodes a `MsgMigrateContract` protobuf message: runs a code upgrade/ downgrade for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param sg_code_id - `code_id`: CodeID references the new WASM code
 * @param atu8_msg - `msg`: an encrypted input to pass to the contract on migration
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @param sb16_callback_code_hash - `callback_code_hash`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgMigrateContract: (sa_sender?: Opt<WeakAccountAddr>, s_contract?: Opt<string>, sg_code_id?: Opt<WeakUint64Str>, atu8_msg?: Opt<Uint8Array>, atu8_callback_sig?: Opt<Uint8Array>, sb16_callback_code_hash?: Opt<NaiveHexLower>) => EncodedSecretComputeMsgMigrateContract;
/**
 * Encodes a `MsgMigrateContractResponse` protobuf message: returns contract migration result data.
 * @param atu8_data - `data`: Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgMigrateContractResponse: (atu8_data?: Opt<Uint8Array>) => EncodedSecretComputeMsgMigrateContractResponse;
/**
 * Encodes a `MsgUpdateAdmin` protobuf message: sets a new admin for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_new_admin - `new_admin`: NewAdmin address to be set
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgUpdateAdmin: (sa_sender?: Opt<WeakAccountAddr>, s_new_admin?: Opt<string>, s_contract?: Opt<string>, atu8_callback_sig?: Opt<Uint8Array>) => EncodedSecretComputeMsgUpdateAdmin;
/**
 * Encodes a `MsgUpdateAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgUpdateAdminResponse: () => EncodedSecretComputeMsgUpdateAdminResponse;
/**
 * Encodes a `MsgClearAdmin` protobuf message: removes any admin stored for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgClearAdmin: (sa_sender?: Opt<WeakAccountAddr>, s_contract?: Opt<string>, atu8_callback_sig?: Opt<Uint8Array>) => EncodedSecretComputeMsgClearAdmin;
/**
 * Encodes a `MsgClearAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeMsgClearAdminResponse: () => EncodedSecretComputeMsgClearAdminResponse;
/**
 * A decoded protobuf StoreCode message
 *
 * Tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 2: source - Source is a valid absolute HTTPS URI to the contract's source code, optional
 *   - 3: builder - Builder is a valid docker image name with tag, optional
 */
export type DecodedSecretComputeMsgStoreCode = [
    sa_sender?: CwAccountAddr,
    atu8_wasm_byte_code?: Uint8Array,
    s_source?: string,
    s_builder?: string
];
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgStoreCode}
 */
export declare const decodeSecretComputeMsgStoreCode: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgStoreCode;
/**
 * A decoded protobuf StoreCode message
 *
 * Alias for: code_id - CodeID is the reference to the stored WASM code
 */
export type DecodedSecretComputeMsgStoreCodeResponse = [
    sg_code_id?: CwUint64
];
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgStoreCodeResponse}
 */
export declare const decodeSecretComputeMsgStoreCodeResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgStoreCodeResponse;
/**
 * A decoded protobuf InstantiateContract message
 *
 * Tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: callback_code_hash -
 *   - 2: code_id -
 *   - 3: label -
 *   - 4: init_msg - an encrypted input to pass to the contract on init
 *   - 5: init_funds -
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 *   - 7: admin - Admin is an optional address that can execute migrations
 */
export type DecodedSecretComputeMsgInstantiateContract = [
    sa_sender?: CwAccountAddr,
    sb16_callback_code_hash?: CwHexLower,
    sg_code_id?: CwUint64,
    s_label?: string,
    atu8_init_msg?: Uint8Array,
    a_init_funds?: [
        string,
        string
    ][],
    atu8_callback_sig?: Uint8Array,
    s_admin?: string
];
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgInstantiateContract}
 */
export declare const decodeSecretComputeMsgInstantiateContract: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgInstantiateContract;
/**
 * A decoded protobuf InstantiateContract message
 *
 * Tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains base64-encoded bytes to returned from the contract
 */
export type DecodedSecretComputeMsgInstantiateContractResponse = [
    sa_address?: CwAccountAddr,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgInstantiateContractResponse}
 */
export declare const decodeSecretComputeMsgInstantiateContractResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgInstantiateContractResponse;
/**
 * A decoded protobuf ExecuteContract message
 *
 * Tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: contract - the canonical address of the contract
 *   - 2: msg - an encrypted input to pass to the contract on execute
 *   - 3: callback_code_hash - used internally for encryption, should always be empty in a signed transaction
 *   - 4: sent_funds -
 *   - 5: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export type DecodedSecretComputeMsgExecuteContract = [
    sa_sender?: CwAccountAddr,
    sa_contract?: CwAccountAddr,
    atu8_msg?: Uint8Array,
    sb16_callback_code_hash?: CwHexLower,
    a_sent_funds?: [
        string,
        string
    ][],
    atu8_callback_sig?: Uint8Array
];
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgExecuteContract}
 */
export declare const decodeSecretComputeMsgExecuteContract: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgExecuteContract;
/**
 * A decoded protobuf ExecuteContract message
 *
 * Alias for: data - Data contains base64-encoded bytes to returned from the contract
 */
export type DecodedSecretComputeMsgExecuteContractResponse = [
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgExecuteContractResponse}
 */
export declare const decodeSecretComputeMsgExecuteContractResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgExecuteContractResponse;
/**
 * A decoded protobuf MigrateContract message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: code_id - CodeID references the new WASM code
 *   - 3: msg - an encrypted input to pass to the contract on migration
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 *   - 7: callback_code_hash - used internally for encryption, should always be empty in a signed transaction
 */
export type DecodedSecretComputeMsgMigrateContract = [
    sa_sender?: CwAccountAddr,
    s_contract?: string,
    sg_code_id?: CwUint64,
    atu8_msg?: Uint8Array,
    w_0?: undefined,
    w_1?: undefined,
    atu8_callback_sig?: Uint8Array,
    sb16_callback_code_hash?: CwHexLower
];
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedSecretComputeMsgMigrateContract}
 */
export declare const decodeSecretComputeMsgMigrateContract: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedSecretComputeMsgMigrateContract;
/**
 * A decoded protobuf MigrateContract message
 *
 * Alias for: data - Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 */
export type DecodedSecretComputeMsgMigrateContractResponse = [
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgMigrateContractResponse}
 */
export declare const decodeSecretComputeMsgMigrateContractResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeMsgMigrateContractResponse;
/**
 * A decoded protobuf UpdateAdmin message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_admin - NewAdmin address to be set
 *   - 2: contract - Contract is the address of the smart contract
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export type DecodedSecretComputeMsgUpdateAdmin = [
    sa_sender?: CwAccountAddr,
    s_new_admin?: string,
    s_contract?: string,
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    atu8_callback_sig?: Uint8Array
];
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedSecretComputeMsgUpdateAdmin}
 */
export declare const decodeSecretComputeMsgUpdateAdmin: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedSecretComputeMsgUpdateAdmin;
/**
 * A decoded protobuf UpdateAdmin message
 *
 * Tuple where:
 */
export type DecodedSecretComputeMsgUpdateAdminResponse = [];
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgUpdateAdminResponse}
 */
export declare const decodeSecretComputeMsgUpdateAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ClearAdmin message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 2: contract - Contract is the address of the smart contract
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export type DecodedSecretComputeMsgClearAdmin = [
    sa_sender?: CwAccountAddr,
    w_0?: undefined,
    s_contract?: string,
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    atu8_callback_sig?: Uint8Array
];
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedSecretComputeMsgClearAdmin}
 */
export declare const decodeSecretComputeMsgClearAdmin: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedSecretComputeMsgClearAdmin;
/**
 * A decoded protobuf ClearAdmin message
 *
 * Tuple where:
 */
export type DecodedSecretComputeMsgClearAdminResponse = [];
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgClearAdminResponse}
 */
export declare const decodeSecretComputeMsgClearAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link SecretComputeMsgStoreCode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 2: source - Source is a valid absolute HTTPS URI to the contract's source code, optional
 *   - 3: builder - Builder is a valid docker image name with tag, optional
 */
export declare const destructSecretComputeMsgStoreCode: (g_struct: SecretComputeMsgStoreCode) => [sender?: CwBase64, wasm_byte_code?: Uint8Array, source?: string, builder?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_STORE_CODE = "/secret.compute.v1beta1.MsgStoreCode";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgStoreCode` -
 */
export type SecretComputeMsgStoreCode = {
    sender?: CwBase64 | undefined;
    wasm_byte_code?: CwBase64 | undefined;
    source?: string | undefined;
    builder?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgStoreCodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 */
export declare const destructSecretComputeMsgStoreCodeResponse: (g_struct: SecretComputeMsgStoreCodeResponse) => [code_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_STORE_CODE_RESPONSE = "/secret.compute.v1beta1.MsgStoreCodeResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgStoreCodeResponse` - returns store result data.
 */
export type SecretComputeMsgStoreCodeResponse = {
    code_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgInstantiateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: callback_code_hash -
 *   - 2: code_id -
 *   - 3: label -
 *   - 4: init_msg - an encrypted input to pass to the contract on init
 *   - 5: init_funds -
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 *   - 7: admin - Admin is an optional address that can execute migrations
 */
export declare const destructSecretComputeMsgInstantiateContract: (g_struct: SecretComputeMsgInstantiateContract) => [sender?: CwBase64, callback_code_hash?: CwHexLower, code_id?: CwUint64, label?: string, init_msg?: Uint8Array, init_funds?: CosmosBaseCoin[], callback_sig?: Uint8Array, admin?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_INSTANTIATE_CONTRACT = "/secret.compute.v1beta1.MsgInstantiateContract";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgInstantiateContract` -
 */
export type SecretComputeMsgInstantiateContract = {
    sender?: CwBase64 | undefined;
    callback_code_hash?: CwHexLower | undefined;
    code_id?: CwUint64 | undefined;
    label?: string | undefined;
    init_msg?: CwBase64 | undefined;
    init_funds?: CosmosBaseCoin[] | undefined;
    callback_sig?: CwBase64 | undefined;
    admin?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgInstantiateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains base64-encoded bytes to returned from the contract
 */
export declare const destructSecretComputeMsgInstantiateContractResponse: (g_struct: SecretComputeMsgInstantiateContractResponse) => [address?: CwAccountAddr, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_INSTANTIATE_CONTRACT_RESPONSE = "/secret.compute.v1beta1.MsgInstantiateContractResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgInstantiateContractResponse` - return instantiation result data
 */
export type SecretComputeMsgInstantiateContractResponse = {
    address?: CwAccountAddr | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgExecuteContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: contract - the canonical address of the contract
 *   - 2: msg - an encrypted input to pass to the contract on execute
 *   - 3: callback_code_hash - used internally for encryption, should always be empty in a signed transaction
 *   - 4: sent_funds -
 *   - 5: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export declare const destructSecretComputeMsgExecuteContract: (g_struct: SecretComputeMsgExecuteContract) => [sender?: CwBase64, contract?: CwBase64, msg?: Uint8Array, callback_code_hash?: CwHexLower, sent_funds?: CosmosBaseCoin[], callback_sig?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_EXECUTE_CONTRACT = "/secret.compute.v1beta1.MsgExecuteContract";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgExecuteContract` -
 */
export type SecretComputeMsgExecuteContract = {
    sender?: CwBase64 | undefined;
    contract?: CwBase64 | undefined;
    msg?: CwBase64 | undefined;
    callback_code_hash?: CwHexLower | undefined;
    sent_funds?: CosmosBaseCoin[] | undefined;
    callback_sig?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgExecuteContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains base64-encoded bytes to returned from the contract
 */
export declare const destructSecretComputeMsgExecuteContractResponse: (g_struct: SecretComputeMsgExecuteContractResponse) => [data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_EXECUTE_CONTRACT_RESPONSE = "/secret.compute.v1beta1.MsgExecuteContractResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgExecuteContractResponse` - returns execution result data.
 */
export type SecretComputeMsgExecuteContractResponse = {
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgMigrateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: code_id - CodeID references the new WASM code
 *   - 3: msg - an encrypted input to pass to the contract on migration
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 *   - 7: callback_code_hash - used internally for encryption, should always be empty in a signed transaction
 */
export declare const destructSecretComputeMsgMigrateContract: (g_struct: SecretComputeMsgMigrateContract) => [sender?: CwAccountAddr, contract?: string, code_id?: CwUint64, msg?: Uint8Array, EMPTY?: void, EMPTY?: void, callback_sig?: Uint8Array, callback_code_hash?: CwHexLower];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_MIGRATE_CONTRACT = "/secret.compute.v1beta1.MsgMigrateContract";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgMigrateContract` - runs a code upgrade/ downgrade for a smart contract
 */
export type SecretComputeMsgMigrateContract = {
    sender?: CwAccountAddr | undefined;
    contract?: string | undefined;
    code_id?: CwUint64 | undefined;
    msg?: CwBase64 | undefined;
    callback_sig?: CwBase64 | undefined;
    callback_code_hash?: CwHexLower | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgMigrateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 */
export declare const destructSecretComputeMsgMigrateContractResponse: (g_struct: SecretComputeMsgMigrateContractResponse) => [data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_MIGRATE_CONTRACT_RESPONSE = "/secret.compute.v1beta1.MsgMigrateContractResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgMigrateContractResponse` - returns contract migration result data.
 */
export type SecretComputeMsgMigrateContractResponse = {
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgUpdateAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_admin - NewAdmin address to be set
 *   - 2: contract - Contract is the address of the smart contract
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export declare const destructSecretComputeMsgUpdateAdmin: (g_struct: SecretComputeMsgUpdateAdmin) => [sender?: CwAccountAddr, new_admin?: string, contract?: string, EMPTY?: void, EMPTY?: void, EMPTY?: void, callback_sig?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_UPDATE_ADMIN = "/secret.compute.v1beta1.MsgUpdateAdmin";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgUpdateAdmin` - sets a new admin for a smart contract
 */
export type SecretComputeMsgUpdateAdmin = {
    sender?: CwAccountAddr | undefined;
    new_admin?: string | undefined;
    contract?: string | undefined;
    callback_sig?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgUpdateAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructSecretComputeMsgUpdateAdminResponse: (g_struct: SecretComputeMsgUpdateAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_UPDATE_ADMIN_RESPONSE = "/secret.compute.v1beta1.MsgUpdateAdminResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgUpdateAdminResponse` - returns empty data
 */
export type SecretComputeMsgUpdateAdminResponse = {};
/**
 * Destructures the fields of a {@link SecretComputeMsgClearAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 2: contract - Contract is the address of the smart contract
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export declare const destructSecretComputeMsgClearAdmin: (g_struct: SecretComputeMsgClearAdmin) => [sender?: CwAccountAddr, EMPTY?: void, contract?: string, EMPTY?: void, EMPTY?: void, EMPTY?: void, callback_sig?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_CLEAR_ADMIN = "/secret.compute.v1beta1.MsgClearAdmin";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgClearAdmin` - removes any admin stored for a smart contract
 */
export type SecretComputeMsgClearAdmin = {
    sender?: CwAccountAddr | undefined;
    contract?: string | undefined;
    callback_sig?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeMsgClearAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructSecretComputeMsgClearAdminResponse: (g_struct: SecretComputeMsgClearAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_CLEAR_ADMIN_RESPONSE = "/secret.compute.v1beta1.MsgClearAdminResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.MsgClearAdminResponse` - returns empty data
 */
export type SecretComputeMsgClearAdminResponse = {};
