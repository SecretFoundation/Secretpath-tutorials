/// <reference types="node" />
import type { NaiveHexLower } from '@blake.regalia/belt';
import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwHexLower, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseAbciStringEvent, DecodedCosmosBaseAbciStringEvent } from '../../../cosmos/base/abci/v1beta1/abci.js';
import type { SecretComputeContractInfo, DecodedSecretComputeContractInfo, SecretComputeContractCodeHistoryEntry, DecodedSecretComputeContractCodeHistoryEntry } from './types.js';
export type EncodedSecretComputeQuerySecretContractRequest = Encoded<'/secret.compute.v1beta1.QuerySecretContractRequest'>;
export type EncodedSecretComputeQueryByLabelRequest = Encoded<'/secret.compute.v1beta1.QueryByLabelRequest'>;
export type EncodedSecretComputeQueryByContractAddressRequest = Encoded<'/secret.compute.v1beta1.QueryByContractAddressRequest'>;
export type EncodedSecretComputeQueryByCodeIdRequest = Encoded<'/secret.compute.v1beta1.QueryByCodeIdRequest'>;
export type EncodedSecretComputeQuerySecretContractResponse = Encoded<'/secret.compute.v1beta1.QuerySecretContractResponse'>;
export type EncodedSecretComputeQueryContractInfoResponse = Encoded<'/secret.compute.v1beta1.QueryContractInfoResponse'>;
export type EncodedSecretComputeContractInfoWithAddress = Encoded<'/secret.compute.v1beta1.ContractInfoWithAddress'>;
export type EncodedSecretComputeQueryContractsByCodeIdResponse = Encoded<'/secret.compute.v1beta1.QueryContractsByCodeIdResponse'>;
export type EncodedSecretComputeCodeInfoResponse = Encoded<'/secret.compute.v1beta1.CodeInfoResponse'>;
export type EncodedSecretComputeQueryCodeResponse = Encoded<'/secret.compute.v1beta1.QueryCodeResponse'>;
export type EncodedSecretComputeQueryCodesResponse = Encoded<'/secret.compute.v1beta1.QueryCodesResponse'>;
export type EncodedSecretComputeQueryContractAddressResponse = Encoded<'/secret.compute.v1beta1.QueryContractAddressResponse'>;
export type EncodedSecretComputeQueryContractLabelResponse = Encoded<'/secret.compute.v1beta1.QueryContractLabelResponse'>;
export type EncodedSecretComputeQueryCodeHashResponse = Encoded<'/secret.compute.v1beta1.QueryCodeHashResponse'>;
export type EncodedSecretComputeDecryptedAnswer = Encoded<'/secret.compute.v1beta1.DecryptedAnswer'>;
export type EncodedSecretComputeDecryptedAnswers = Encoded<'/secret.compute.v1beta1.DecryptedAnswers'>;
export type EncodedSecretComputeQueryContractHistoryRequest = Encoded<'/secret.compute.v1beta1.QueryContractHistoryRequest'>;
export type EncodedSecretComputeQueryContractHistoryResponse = Encoded<'/secret.compute.v1beta1.QueryContractHistoryResponse'>;
/**
 * Query contract info by address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info - the bech32 human readable address of the contract
 */
export declare const querySecretComputeContractInfo: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryContractInfoResponse>>;
/**
 * Query code info by id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_code_id -
 * @returns a tuple where:
 *   - 0: contract_infos - the 'contract_infos' response property
 */
export declare const querySecretComputeContractsByCodeId: (z_req: string | ({
    origin: string;
} & RequestInit), sg_code_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryContractsByCodeIdResponse>>;
/**
 * Query secret contract
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @param atu8_query -
 * @returns a tuple where:
 *   - 0: data - the 'data' response property
 */
export declare const querySecretComputeQuerySecretContract: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>, atu8_query?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQuerySecretContractResponse>>;
/**
 * Query a specific contract code by id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_code_id -
 * @returns a tuple where:
 *   - 0: code_info - the 'code_info' response property
 *   - 1: wasm - the 'code_info' response property
 */
export declare const querySecretComputeCode: (z_req: string | ({
    origin: string;
} & RequestInit), sg_code_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryCodeResponse>>;
/**
 * Query all contract codes on-chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: code_infos - the 'code_infos' response property
 */
export declare const querySecretComputeCodes: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryCodesResponse>>;
/**
 * Query code hash by contract address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @returns a tuple where:
 *   - 0: code_hash - the 'code_hash' response property
 */
export declare const querySecretComputeCodeHashByContractAddress: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryCodeHashResponse>>;
/**
 * Query code hash by code id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_code_id -
 * @returns a tuple where:
 *   - 0: code_hash - the 'code_hash' response property
 */
export declare const querySecretComputeCodeHashByCodeId: (z_req: string | ({
    origin: string;
} & RequestInit), sg_code_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryCodeHashResponse>>;
/**
 * Query contract label by address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @returns a tuple where:
 *   - 0: label - the 'label' response property
 */
export declare const querySecretComputeLabelByAddress: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryContractLabelResponse>>;
/**
 * Query contract address by label
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_label -
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 */
export declare const querySecretComputeAddressByLabel: (z_req: string | ({
    origin: string;
} & RequestInit), s_label?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryContractAddressResponse>>;
/**
 * Gets the contract code history
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the address of the contract to query
 * @returns a tuple where:
 *   - 0: entries - the 'entries' response property
 */
export declare const querySecretComputeContractHistory: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretComputeQueryContractHistoryResponse>>;
/**
 * Encodes a `QuerySecretContractRequest` protobuf message:
 * @param sa_contract - `contract_address`: address is the bech32 human readable address of the contract
 * @param atu8_query - `query`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQuerySecretContractRequest: (sa_contract?: Opt<WeakAccountAddr>, atu8_query?: Opt<Uint8Array>) => EncodedSecretComputeQuerySecretContractRequest;
/**
 * Encodes a `QueryByLabelRequest` protobuf message:
 * @param s_label - `label`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryByLabelRequest: (s_label?: Opt<string>) => EncodedSecretComputeQueryByLabelRequest;
/**
 * Encodes a `QueryByContractAddressRequest` protobuf message:
 * @param sa_contract - `contract_address`: address is the bech32 human readable address of the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryByContractAddressRequest: (sa_contract?: Opt<WeakAccountAddr>) => EncodedSecretComputeQueryByContractAddressRequest;
/**
 * Encodes a `QueryByCodeIdRequest` protobuf message:
 * @param sg_code_id - `code_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryByCodeIdRequest: (sg_code_id?: Opt<WeakUint64Str>) => EncodedSecretComputeQueryByCodeIdRequest;
/**
 * Encodes a `QuerySecretContractResponse` protobuf message:
 * @param atu8_data - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQuerySecretContractResponse: (atu8_data?: Opt<Uint8Array>) => EncodedSecretComputeQuerySecretContractResponse;
/**
 * Encodes a `QueryContractInfoResponse` protobuf message: the response type for the Query/ContractInfo RPC method
 * @param sa_contract - `contract_address`: the bech32 human readable address of the contract
 * @param g_contract_info - `contract_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryContractInfoResponse: (sa_contract?: Opt<WeakAccountAddr>, atu8_contract_info?: Opt<Encoded<'/secret.compute.v1beta1.ContractInfo'>>) => EncodedSecretComputeQueryContractInfoResponse;
/**
 * Encodes a `ContractInfoWithAddress` protobuf message: adds the contract address to the ContractInfo representation
 * @param sa_contract - `contract_address`: the bech32 human readable address of the contract
 * @param g_contract_info - `contract_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeContractInfoWithAddress: (sa_contract?: Opt<WeakAccountAddr>, atu8_contract_info?: Opt<Encoded<'/secret.compute.v1beta1.ContractInfo'>>) => EncodedSecretComputeContractInfoWithAddress;
/**
 * Encodes a `QueryContractsByCodeIdResponse` protobuf message:
 * @param a_contract_infos - `contract_infos`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryContractsByCodeIdResponse: (a_contract_infos?: Opt<Encoded<'/secret.compute.v1beta1.ContractInfoWithAddress'>[]>) => EncodedSecretComputeQueryContractsByCodeIdResponse;
/**
 * Encodes a `CodeInfoResponse` protobuf message:
 * @param sg_code_id - `code_id`:
 * @param sa_creator - `creator`: the bech32 human readable address of the contract
 * @param sb16_code_hash - `code_hash`:
 * @param s_source - `source`:
 * @param s_builder - `builder`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeCodeInfoResponse: (sg_code_id?: Opt<WeakUint64Str>, sa_creator?: Opt<WeakAccountAddr>, sb16_code_hash?: Opt<NaiveHexLower>, s_source?: Opt<string>, s_builder?: Opt<string>) => EncodedSecretComputeCodeInfoResponse;
/**
 * Encodes a `QueryCodeResponse` protobuf message:
 * @param g_code_info - `code_info`:
 * @param atu8_wasm - `wasm`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryCodeResponse: (atu8_code_info?: Opt<Encoded<'/secret.compute.v1beta1.CodeInfoResponse'>>, atu8_wasm?: Opt<Uint8Array>) => EncodedSecretComputeQueryCodeResponse;
/**
 * Encodes a `QueryCodesResponse` protobuf message:
 * @param a_code_infos - `code_infos`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryCodesResponse: (a_code_infos?: Opt<Encoded<'/secret.compute.v1beta1.CodeInfoResponse'>[]>) => EncodedSecretComputeQueryCodesResponse;
/**
 * Encodes a `QueryContractAddressResponse` protobuf message:
 * @param sa_contract - `contract_address`: address is the bech32 human readable address of the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryContractAddressResponse: (sa_contract?: Opt<WeakAccountAddr>) => EncodedSecretComputeQueryContractAddressResponse;
/**
 * Encodes a `QueryContractLabelResponse` protobuf message:
 * @param s_label - `label`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryContractLabelResponse: (s_label?: Opt<string>) => EncodedSecretComputeQueryContractLabelResponse;
/**
 * Encodes a `QueryCodeHashResponse` protobuf message:
 * @param sb16_code_hash - `code_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryCodeHashResponse: (sb16_code_hash?: Opt<NaiveHexLower>) => EncodedSecretComputeQueryCodeHashResponse;
/**
 * Encodes a `DecryptedAnswer` protobuf message: a struct that represents a decrypted tx-query
 * @param s_type - `type`:
 * @param s_input - `input`:
 * @param s_output_data - `output_data`:
 * @param s_output_data_as_string - `output_data_as_string`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeDecryptedAnswer: (s_type?: Opt<string>, s_input?: Opt<string>, s_output_data?: Opt<string>, s_output_data_as_string?: Opt<string>) => EncodedSecretComputeDecryptedAnswer;
/**
 * Encodes a `DecryptedAnswers` protobuf message:
 * @param a_answers - `answers`:
 * @param a_output_logs - `output_logs`:
 * @param s_output_error - `output_error`:
 * @param s_plaintext_error - `plaintext_error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeDecryptedAnswers: (a_answers?: Opt<Encoded<'/secret.compute.v1beta1.DecryptedAnswer'>[]>, a_output_logs?: Opt<Encoded<'/cosmos.base.abci.v1beta1.StringEvent'>[]>, s_output_error?: Opt<string>, s_plaintext_error?: Opt<string>) => EncodedSecretComputeDecryptedAnswers;
/**
 * Encodes a `QueryContractHistoryRequest` protobuf message: the request type for the Query/ContractHistory RPC method
 * @param sa_contract - `contract_address`: address is the address of the contract to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryContractHistoryRequest: (sa_contract?: Opt<WeakAccountAddr>) => EncodedSecretComputeQueryContractHistoryRequest;
/**
 * Encodes a `QueryContractHistoryResponse` protobuf message: the response type for the Query/ContractHistory RPC method
 * @param a_entries - `entries`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretComputeQueryContractHistoryResponse: (a_entries?: Opt<Encoded<'/secret.compute.v1beta1.ContractCodeHistoryEntry'>[]>) => EncodedSecretComputeQueryContractHistoryResponse;
/**
 * A decoded protobuf QuerySecretContractRequest message
 *
 * Tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 *   - 1: query -
 */
export type DecodedSecretComputeQuerySecretContractRequest = [
    sa_contract?: CwAccountAddr,
    atu8_query?: Uint8Array
];
/**
 * Decodes a protobuf QuerySecretContractRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQuerySecretContractRequest}
 */
export declare const decodeSecretComputeQuerySecretContractRequest: (atu8_payload: Uint8Array) => DecodedSecretComputeQuerySecretContractRequest;
/**
 * A decoded protobuf QueryByLabelRequest message
 *
 * Alias for: label -
 */
export type DecodedSecretComputeQueryByLabelRequest = [
    s_label?: string
];
/**
 * Decodes a protobuf QueryByLabelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryByLabelRequest}
 */
export declare const decodeSecretComputeQueryByLabelRequest: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryByLabelRequest;
/**
 * A decoded protobuf QueryByContractAddressRequest message
 *
 * Alias for: contract_address - address is the bech32 human readable address of the contract
 */
export type DecodedSecretComputeQueryByContractAddressRequest = [
    sa_contract?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryByContractAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryByContractAddressRequest}
 */
export declare const decodeSecretComputeQueryByContractAddressRequest: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryByContractAddressRequest;
/**
 * A decoded protobuf QueryByCodeIdRequest message
 *
 * Alias for: code_id -
 */
export type DecodedSecretComputeQueryByCodeIdRequest = [
    sg_code_id?: CwUint64
];
/**
 * Decodes a protobuf QueryByCodeIdRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryByCodeIdRequest}
 */
export declare const decodeSecretComputeQueryByCodeIdRequest: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryByCodeIdRequest;
/**
 * A decoded protobuf QuerySecretContract message
 *
 * Alias for: data -
 */
export type DecodedSecretComputeQuerySecretContractResponse = [
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf QuerySecretContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQuerySecretContractResponse}
 */
export declare const decodeSecretComputeQuerySecretContractResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQuerySecretContractResponse;
/**
 * A decoded protobuf QueryContractInfo message
 *
 * Tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info -
 */
export type DecodedSecretComputeQueryContractInfoResponse = [
    sa_contract?: CwAccountAddr,
    a_contract_info?: DecodedSecretComputeContractInfo
];
/**
 * Decodes a protobuf QueryContractInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractInfoResponse}
 */
export declare const decodeSecretComputeQueryContractInfoResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryContractInfoResponse;
/**
 * A decoded protobuf ContractInfoWithAddress message
 *
 * Tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info -
 */
export type DecodedSecretComputeContractInfoWithAddress = [
    sa_contract?: CwAccountAddr,
    a_contract_info?: DecodedSecretComputeContractInfo
];
/**
 * Decodes a protobuf ContractInfoWithAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeContractInfoWithAddress}
 */
export declare const decodeSecretComputeContractInfoWithAddress: (atu8_payload: Uint8Array) => DecodedSecretComputeContractInfoWithAddress;
/**
 * A decoded protobuf QueryContractsByCodeId message
 *
 * Alias for: contract_infos -
 */
export type DecodedSecretComputeQueryContractsByCodeIdResponse = [
    a_contract_infos?: DecodedSecretComputeContractInfoWithAddress[]
];
/**
 * Decodes a protobuf QueryContractsByCodeId message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractsByCodeIdResponse}
 */
export declare const decodeSecretComputeQueryContractsByCodeIdResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryContractsByCodeIdResponse;
/**
 * A decoded protobuf CodeInfo message
 *
 * Tuple where:
 *   - 0: code_id -
 *   - 1: creator - the bech32 human readable address of the contract
 *   - 2: code_hash -
 *   - 3: source -
 *   - 4: builder -
 */
export type DecodedSecretComputeCodeInfoResponse = [
    sg_code_id?: CwUint64,
    sa_creator?: CwAccountAddr,
    sb16_code_hash?: CwHexLower,
    s_source?: string,
    s_builder?: string
];
/**
 * Decodes a protobuf CodeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeCodeInfoResponse}
 */
export declare const decodeSecretComputeCodeInfoResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeCodeInfoResponse;
/**
 * A decoded protobuf QueryCode message
 *
 * Tuple where:
 *   - 0: code_info -
 *   - 1: wasm -
 */
export type DecodedSecretComputeQueryCodeResponse = [
    a_code_info?: DecodedSecretComputeCodeInfoResponse,
    atu8_wasm?: Uint8Array
];
/**
 * Decodes a protobuf QueryCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryCodeResponse}
 */
export declare const decodeSecretComputeQueryCodeResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryCodeResponse;
/**
 * A decoded protobuf QueryCodes message
 *
 * Alias for: code_infos -
 */
export type DecodedSecretComputeQueryCodesResponse = [
    a_code_infos?: DecodedSecretComputeCodeInfoResponse[]
];
/**
 * Decodes a protobuf QueryCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryCodesResponse}
 */
export declare const decodeSecretComputeQueryCodesResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryCodesResponse;
/**
 * A decoded protobuf QueryContractAddress message
 *
 * Alias for: contract_address - address is the bech32 human readable address of the contract
 */
export type DecodedSecretComputeQueryContractAddressResponse = [
    sa_contract?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryContractAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractAddressResponse}
 */
export declare const decodeSecretComputeQueryContractAddressResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryContractAddressResponse;
/**
 * A decoded protobuf QueryContractLabel message
 *
 * Alias for: label -
 */
export type DecodedSecretComputeQueryContractLabelResponse = [
    s_label?: string
];
/**
 * Decodes a protobuf QueryContractLabel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractLabelResponse}
 */
export declare const decodeSecretComputeQueryContractLabelResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryContractLabelResponse;
/**
 * A decoded protobuf QueryCodeHash message
 *
 * Alias for: code_hash -
 */
export type DecodedSecretComputeQueryCodeHashResponse = [
    sb16_code_hash?: CwHexLower
];
/**
 * Decodes a protobuf QueryCodeHash message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryCodeHashResponse}
 */
export declare const decodeSecretComputeQueryCodeHashResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryCodeHashResponse;
/**
 * A decoded protobuf DecryptedAnswer message
 *
 * Tuple where:
 *   - 0: type -
 *   - 1: input -
 *   - 2: output_data -
 *   - 3: output_data_as_string -
 */
export type DecodedSecretComputeDecryptedAnswer = [
    s_type?: string,
    s_input?: string,
    s_output_data?: string,
    s_output_data_as_string?: string
];
/**
 * Decodes a protobuf DecryptedAnswer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeDecryptedAnswer}
 */
export declare const decodeSecretComputeDecryptedAnswer: (atu8_payload: Uint8Array) => DecodedSecretComputeDecryptedAnswer;
/**
 * A decoded protobuf DecryptedAnswers message
 *
 * Tuple where:
 *   - 0: answers -
 *   - 1: output_logs -
 *   - 2: output_error -
 *   - 3: plaintext_error -
 */
export type DecodedSecretComputeDecryptedAnswers = [
    a_answers?: DecodedSecretComputeDecryptedAnswer[],
    a_output_logs?: DecodedCosmosBaseAbciStringEvent[],
    s_output_error?: string,
    s_plaintext_error?: string
];
/**
 * Decodes a protobuf DecryptedAnswers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeDecryptedAnswers}
 */
export declare const decodeSecretComputeDecryptedAnswers: (atu8_payload: Uint8Array) => DecodedSecretComputeDecryptedAnswers;
/**
 * A decoded protobuf QueryContractHistoryRequest message
 *
 * Alias for: contract_address - address is the address of the contract to query
 */
export type DecodedSecretComputeQueryContractHistoryRequest = [
    sa_contract?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryContractHistoryRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractHistoryRequest}
 */
export declare const decodeSecretComputeQueryContractHistoryRequest: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryContractHistoryRequest;
/**
 * A decoded protobuf QueryContractHistory message
 *
 * Alias for: entries -
 */
export type DecodedSecretComputeQueryContractHistoryResponse = [
    a_entries?: DecodedSecretComputeContractCodeHistoryEntry[]
];
/**
 * Decodes a protobuf QueryContractHistory message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractHistoryResponse}
 */
export declare const decodeSecretComputeQueryContractHistoryResponse: (atu8_payload: Uint8Array) => DecodedSecretComputeQueryContractHistoryResponse;
/**
 * Destructures the fields of a {@link SecretComputeQuerySecretContractRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 *   - 1: query -
 */
export declare const destructSecretComputeQuerySecretContractRequest: (g_struct: SecretComputeQuerySecretContractRequest) => [contract_address?: CwAccountAddr, query?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_SECRET_CONTRACT_REQUEST = "/secret.compute.v1beta1.QuerySecretContractRequest";
/**
 * JSON serialization of `secret.compute.v1beta1.QuerySecretContractRequest` -
 */
export type SecretComputeQuerySecretContractRequest = {
    contract_address?: CwAccountAddr | undefined;
    query?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryByLabelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: label -
 */
export declare const destructSecretComputeQueryByLabelRequest: (g_struct: SecretComputeQueryByLabelRequest) => [label?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_BY_LABEL_REQUEST = "/secret.compute.v1beta1.QueryByLabelRequest";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryByLabelRequest` -
 */
export type SecretComputeQueryByLabelRequest = {
    label?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryByContractAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 */
export declare const destructSecretComputeQueryByContractAddressRequest: (g_struct: SecretComputeQueryByContractAddressRequest) => [contract_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_BY_CONTRACT_ADDRESS_REQUEST = "/secret.compute.v1beta1.QueryByContractAddressRequest";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryByContractAddressRequest` -
 */
export type SecretComputeQueryByContractAddressRequest = {
    contract_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryByCodeIdRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id -
 */
export declare const destructSecretComputeQueryByCodeIdRequest: (g_struct: SecretComputeQueryByCodeIdRequest) => [code_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_BY_CODE_ID_REQUEST = "/secret.compute.v1beta1.QueryByCodeIdRequest";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryByCodeIdRequest` -
 */
export type SecretComputeQueryByCodeIdRequest = {
    code_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQuerySecretContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 */
export declare const destructSecretComputeQuerySecretContractResponse: (g_struct: SecretComputeQuerySecretContractResponse) => [data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_SECRET_CONTRACT_RESPONSE = "/secret.compute.v1beta1.QuerySecretContractResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QuerySecretContractResponse` -
 */
export type SecretComputeQuerySecretContractResponse = {
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryContractInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info -
 */
export declare const destructSecretComputeQueryContractInfoResponse: (g_struct: SecretComputeQueryContractInfoResponse) => [contract_address?: CwAccountAddr, contract_info?: SecretComputeContractInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_INFO_RESPONSE = "/secret.compute.v1beta1.QueryContractInfoResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryContractInfoResponse` - the response type for the Query/ContractInfo RPC method
 */
export type SecretComputeQueryContractInfoResponse = {
    contract_address?: CwAccountAddr | undefined;
    contract_info?: SecretComputeContractInfo | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeContractInfoWithAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info -
 */
export declare const destructSecretComputeContractInfoWithAddress: (g_struct: SecretComputeContractInfoWithAddress) => [contract_address?: CwAccountAddr, contract_info?: SecretComputeContractInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_CONTRACT_INFO_WITH_ADDRESS = "/secret.compute.v1beta1.ContractInfoWithAddress";
/**
 * JSON serialization of `secret.compute.v1beta1.ContractInfoWithAddress` - adds the contract address to the ContractInfo representation
 */
export type SecretComputeContractInfoWithAddress = {
    contract_address?: CwAccountAddr | undefined;
    contract_info?: SecretComputeContractInfo | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryContractsByCodeIdResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_infos -
 */
export declare const destructSecretComputeQueryContractsByCodeIdResponse: (g_struct: SecretComputeQueryContractsByCodeIdResponse) => [contract_infos?: SecretComputeContractInfoWithAddress[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACTS_BY_CODE_ID_RESPONSE = "/secret.compute.v1beta1.QueryContractsByCodeIdResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryContractsByCodeIdResponse` -
 */
export type SecretComputeQueryContractsByCodeIdResponse = {
    contract_infos?: SecretComputeContractInfoWithAddress[] | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeCodeInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id -
 *   - 1: creator - the bech32 human readable address of the contract
 *   - 2: code_hash -
 *   - 3: source -
 *   - 4: builder -
 */
export declare const destructSecretComputeCodeInfoResponse: (g_struct: SecretComputeCodeInfoResponse) => [code_id?: CwUint64, creator?: CwAccountAddr, code_hash?: CwHexLower, source?: string, builder?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_CODE_INFO_RESPONSE = "/secret.compute.v1beta1.CodeInfoResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.CodeInfoResponse` -
 */
export type SecretComputeCodeInfoResponse = {
    code_id?: CwUint64 | undefined;
    creator?: CwAccountAddr | undefined;
    code_hash?: CwHexLower | undefined;
    source?: string | undefined;
    builder?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryCodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_info -
 *   - 1: wasm -
 */
export declare const destructSecretComputeQueryCodeResponse: (g_struct: SecretComputeQueryCodeResponse) => [code_info?: SecretComputeCodeInfoResponse, wasm?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CODE_RESPONSE = "/secret.compute.v1beta1.QueryCodeResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryCodeResponse` -
 */
export type SecretComputeQueryCodeResponse = {
    code_info?: SecretComputeCodeInfoResponse | undefined;
    wasm?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryCodesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_infos -
 */
export declare const destructSecretComputeQueryCodesResponse: (g_struct: SecretComputeQueryCodesResponse) => [code_infos?: SecretComputeCodeInfoResponse[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CODES_RESPONSE = "/secret.compute.v1beta1.QueryCodesResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryCodesResponse` -
 */
export type SecretComputeQueryCodesResponse = {
    code_infos?: SecretComputeCodeInfoResponse[] | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryContractAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 */
export declare const destructSecretComputeQueryContractAddressResponse: (g_struct: SecretComputeQueryContractAddressResponse) => [contract_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_ADDRESS_RESPONSE = "/secret.compute.v1beta1.QueryContractAddressResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryContractAddressResponse` -
 */
export type SecretComputeQueryContractAddressResponse = {
    contract_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryContractLabelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: label -
 */
export declare const destructSecretComputeQueryContractLabelResponse: (g_struct: SecretComputeQueryContractLabelResponse) => [label?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_LABEL_RESPONSE = "/secret.compute.v1beta1.QueryContractLabelResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryContractLabelResponse` -
 */
export type SecretComputeQueryContractLabelResponse = {
    label?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryCodeHashResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_hash -
 */
export declare const destructSecretComputeQueryCodeHashResponse: (g_struct: SecretComputeQueryCodeHashResponse) => [code_hash?: CwHexLower];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CODE_HASH_RESPONSE = "/secret.compute.v1beta1.QueryCodeHashResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryCodeHashResponse` -
 */
export type SecretComputeQueryCodeHashResponse = {
    code_hash?: CwHexLower | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeDecryptedAnswer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: input -
 *   - 2: output_data -
 *   - 3: output_data_as_string -
 */
export declare const destructSecretComputeDecryptedAnswer: (g_struct: SecretComputeDecryptedAnswer) => [type_?: string, input?: string, output_data?: string, output_data_as_string?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_DECRYPTED_ANSWER = "/secret.compute.v1beta1.DecryptedAnswer";
/**
 * JSON serialization of `secret.compute.v1beta1.DecryptedAnswer` - a struct that represents a decrypted tx-query
 */
export type SecretComputeDecryptedAnswer = {
    type?: string | undefined;
    input?: string | undefined;
    output_data?: string | undefined;
    output_data_as_string?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeDecryptedAnswers} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: answers -
 *   - 1: output_logs -
 *   - 2: output_error -
 *   - 3: plaintext_error -
 */
export declare const destructSecretComputeDecryptedAnswers: (g_struct: SecretComputeDecryptedAnswers) => [answers?: SecretComputeDecryptedAnswer[], output_logs?: CosmosBaseAbciStringEvent[], output_error?: string, plaintext_error?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_DECRYPTED_ANSWERS = "/secret.compute.v1beta1.DecryptedAnswers";
/**
 * JSON serialization of `secret.compute.v1beta1.DecryptedAnswers` -
 */
export type SecretComputeDecryptedAnswers = {
    answers?: SecretComputeDecryptedAnswer[] | undefined;
    output_logs?: CosmosBaseAbciStringEvent[] | undefined;
    output_error?: string | undefined;
    plaintext_error?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryContractHistoryRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the address of the contract to query
 */
export declare const destructSecretComputeQueryContractHistoryRequest: (g_struct: SecretComputeQueryContractHistoryRequest) => [contract_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_HISTORY_REQUEST = "/secret.compute.v1beta1.QueryContractHistoryRequest";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryContractHistoryRequest` - the request type for the Query/ContractHistory RPC method
 */
export type SecretComputeQueryContractHistoryRequest = {
    contract_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link SecretComputeQueryContractHistoryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: entries -
 */
export declare const destructSecretComputeQueryContractHistoryResponse: (g_struct: SecretComputeQueryContractHistoryResponse) => [entries?: SecretComputeContractCodeHistoryEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_HISTORY_RESPONSE = "/secret.compute.v1beta1.QueryContractHistoryResponse";
/**
 * JSON serialization of `secret.compute.v1beta1.QueryContractHistoryResponse` - the response type for the Query/ContractHistory RPC method
 */
export type SecretComputeQueryContractHistoryResponse = {
    entries?: SecretComputeContractCodeHistoryEntry[] | undefined;
};
