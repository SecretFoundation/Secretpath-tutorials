import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
const SR_LCD_SECRET_INTERTX_MSG = '/mauth/v1beta1/';
/**
 * Register defines a rpc handler for MsgRegisterAccount
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param si_connection -
 * @param s_version -
 * @returns an empty tuple
 */
export const submitSecretIntertxRegisterAccount = restful_grpc((sa_owner, si_connection, s_version) => [SR_LCD_SECRET_INTERTX_MSG + 'register-account', {
        owner: sa_owner,
        connection_id: si_connection,
        version: s_version,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param si_connection -
 * @param atu8_msg -
 * @returns an empty tuple
 */
export const submitSecretIntertxSubmitTx = restful_grpc((sa_owner, si_connection, atu8_msg) => [SR_LCD_SECRET_INTERTX_MSG + 'submit-tx', {
        owner: safe_bytes_to_base64(bech32_decode(sa_owner)),
        connection_id: si_connection,
        msg: safe_bytes_to_base64(atu8_msg),
    }], 1);
/**
 * Encodes a `MsgRegisterAccount` protobuf message: registers an interchain account for the given owner over the specified connection pair
 * @param sa_owner - `owner`:
 * @param si_connection - `connection_id`:
 * @param s_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretIntertxMsgRegisterAccount = (sa_owner, si_connection, s_version) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .s(si_connection) // string connection_id = 2
    .s(s_version) // string version = 3
    .o;
/**
 * Encodes a `MsgRegisterAccountResponse` protobuf message: the response type for Msg/RegisterAccount
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretIntertxMsgRegisterAccountResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSubmitTx` protobuf message: creates and submits an arbitrary transaction msg to be executed using an interchain account
 * @param sa_owner - `owner`:
 * @param si_connection - `connection_id`:
 * @param atu8_msg - `msg`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretIntertxMsgSubmitTx = (sa_owner, si_connection, atu8_msg) => Protobuf() // ...
    .b(bech32_decode(sa_owner)) // bytes owner = 1
    .s(si_connection) // string connection_id = 2
    .b(atu8_msg) // Any msg = 3
    .o;
/**
 * Encodes a `MsgSubmitTxResponse` protobuf message: defines the MsgSubmitTx response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretIntertxMsgSubmitTxResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf RegisterAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgRegisterAccount}
 */
export const decodeSecretIntertxMsgRegisterAccount = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf RegisterAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgRegisterAccountResponse}
 */
export const decodeSecretIntertxMsgRegisterAccountResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgSubmitTx}
 */
export const decodeSecretIntertxMsgSubmitTx = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1], [0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SubmitTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgSubmitTxResponse}
 */
export const decodeSecretIntertxMsgSubmitTxResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link SecretIntertxMsgRegisterAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 *   - 2: version -
 */
export const destructSecretIntertxMsgRegisterAccount = (g_struct) => [g_struct.owner, g_struct.connection_id, g_struct.version];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_REGISTER_ACCOUNT = '/secret.intertx.v1beta1.MsgRegisterAccount';
/**
 * Destructures the fields of a {@link SecretIntertxMsgRegisterAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructSecretIntertxMsgRegisterAccountResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_REGISTER_ACCOUNT_RESPONSE = '/secret.intertx.v1beta1.MsgRegisterAccountResponse';
/**
 * Destructures the fields of a {@link SecretIntertxMsgSubmitTx} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 *   - 2: msg -
 */
export const destructSecretIntertxMsgSubmitTx = (g_struct) => [g_struct.owner, g_struct.connection_id, g_struct.msg];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_SUBMIT_TX = '/secret.intertx.v1beta1.MsgSubmitTx';
/**
 * Destructures the fields of a {@link SecretIntertxMsgSubmitTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructSecretIntertxMsgSubmitTxResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_SUBMIT_TX_RESPONSE = '/secret.intertx.v1beta1.MsgSubmitTxResponse';
//# sourceMappingURL=tx.js.map