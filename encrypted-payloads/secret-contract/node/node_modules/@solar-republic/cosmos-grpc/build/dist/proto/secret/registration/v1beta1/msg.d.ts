import type { WeakAccountAddr, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedSecretRegistrationRaAuthenticate = Encoded<'/secret.registration.v1beta1.RaAuthenticate'>;
export type EncodedSecretRegistrationMasterKey = Encoded<'/secret.registration.v1beta1.MasterKey'>;
export type EncodedSecretRegistrationKey = Encoded<'/secret.registration.v1beta1.Key'>;
/**
 * Encodes a `RaAuthenticate` protobuf message:
 * @param sa_sender - `sender`:
 * @param atu8_certificate - `certificate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationRaAuthenticate: (sa_sender?: Opt<WeakAccountAddr>, atu8_certificate?: Opt<Uint8Array>) => EncodedSecretRegistrationRaAuthenticate;
/**
 * Encodes a `MasterKey` protobuf message:
 * @param atu8_bytes - `bytes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationMasterKey: (atu8_bytes?: Opt<Uint8Array>) => EncodedSecretRegistrationMasterKey;
/**
 * Encodes a `Key` protobuf message:
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationKey: (atu8_key?: Opt<Uint8Array>) => EncodedSecretRegistrationKey;
/**
 * A decoded protobuf RaAuthenticate message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: certificate -
 */
export type DecodedSecretRegistrationRaAuthenticate = [
    sa_sender?: CwAccountAddr,
    atu8_certificate?: Uint8Array
];
/**
 * Decodes a protobuf RaAuthenticate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRaAuthenticate}
 */
export declare const decodeSecretRegistrationRaAuthenticate: (atu8_payload: Uint8Array) => DecodedSecretRegistrationRaAuthenticate;
/**
 * A decoded protobuf MasterKey message
 *
 * Alias for: bytes -
 */
export type DecodedSecretRegistrationMasterKey = [
    atu8_bytes?: Uint8Array
];
/**
 * Decodes a protobuf MasterKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationMasterKey}
 */
export declare const decodeSecretRegistrationMasterKey: (atu8_payload: Uint8Array) => DecodedSecretRegistrationMasterKey;
/**
 * A decoded protobuf Key message
 *
 * Alias for: key -
 */
export type DecodedSecretRegistrationKey = [
    atu8_key?: Uint8Array
];
/**
 * Decodes a protobuf Key message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationKey}
 */
export declare const decodeSecretRegistrationKey: (atu8_payload: Uint8Array) => DecodedSecretRegistrationKey;
/**
 * Destructures the fields of a {@link SecretRegistrationMasterKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bytes -
 */
export declare const destructSecretRegistrationMasterKey: (g_struct: SecretRegistrationMasterKey) => [bytes?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_MASTER_KEY = "/secret.registration.v1beta1.MasterKey";
/**
 * JSON serialization of `secret.registration.v1beta1.MasterKey` -
 */
export type SecretRegistrationMasterKey = {
    bytes?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretRegistrationRaAuthenticate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: certificate -
 */
export declare const destructSecretRegistrationRaAuthenticate: (g_struct: SecretRegistrationRaAuthenticate) => [sender?: CwBase64, certificate?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_RA_AUTHENTICATE = "/secret.registration.v1beta1.RaAuthenticate";
/**
 * JSON serialization of `secret.registration.v1beta1.RaAuthenticate` -
 */
export type SecretRegistrationRaAuthenticate = {
    sender?: CwBase64 | undefined;
    certificate?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretRegistrationKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export declare const destructSecretRegistrationKey: (g_struct: SecretRegistrationKey) => [key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_KEY = "/secret.registration.v1beta1.Key";
/**
 * JSON serialization of `secret.registration.v1beta1.Key` -
 */
export type SecretRegistrationKey = {
    key?: CwBase64 | undefined;
};
