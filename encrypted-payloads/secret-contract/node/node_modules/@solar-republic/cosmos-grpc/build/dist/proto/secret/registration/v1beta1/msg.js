import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `RaAuthenticate` protobuf message:
 * @param sa_sender - `sender`:
 * @param atu8_certificate - `certificate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRaAuthenticate = (sa_sender, atu8_certificate) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_certificate) // bytes certificate = 2
    .o;
/**
 * Encodes a `MasterKey` protobuf message:
 * @param atu8_bytes - `bytes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationMasterKey = (atu8_bytes) => Protobuf() // ...
    .b(atu8_bytes) // bytes bytes = 1
    .o;
/**
 * Encodes a `Key` protobuf message:
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationKey = (atu8_key) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .o;
/**
 * Decodes a protobuf RaAuthenticate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRaAuthenticate}
 */
export const decodeSecretRegistrationRaAuthenticate = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf MasterKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationMasterKey}
 */
export const decodeSecretRegistrationMasterKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf Key message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationKey}
 */
export const decodeSecretRegistrationKey = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link SecretRegistrationMasterKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bytes -
 */
export const destructSecretRegistrationMasterKey = (g_struct) => [safe_base64_to_bytes(g_struct.bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_MASTER_KEY = '/secret.registration.v1beta1.MasterKey';
/**
 * Destructures the fields of a {@link SecretRegistrationRaAuthenticate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: certificate -
 */
export const destructSecretRegistrationRaAuthenticate = (g_struct) => [g_struct.sender, safe_base64_to_bytes(g_struct.certificate)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_RA_AUTHENTICATE = '/secret.registration.v1beta1.RaAuthenticate';
/**
 * Destructures the fields of a {@link SecretRegistrationKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export const destructSecretRegistrationKey = (g_struct) => [safe_base64_to_bytes(g_struct.key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_KEY = '/secret.registration.v1beta1.Key';
//# sourceMappingURL=msg.js.map