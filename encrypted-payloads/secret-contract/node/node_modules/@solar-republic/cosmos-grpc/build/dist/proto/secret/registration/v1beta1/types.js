import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `SeedConfig` protobuf message:
 * @param s_master_key - `master_key`:
 * @param s_encrypted_key - `encrypted_key`:
 * @param n_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationSeedConfig = (s_master_key, s_encrypted_key, n_version) => Protobuf() // ...
    .s(s_master_key) // string master_key = 1
    .s(s_encrypted_key) // string encrypted_key = 2
    .v(n_version) // uint32 version = 3
    .o;
/**
 * Encodes a `LegacySeedConfig` protobuf message:
 * @param s_master_cert - `master_cert`:
 * @param s_encrypted_key - `encrypted_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationLegacySeedConfig = (s_master_cert, s_encrypted_key) => Protobuf() // ...
    .s(s_master_cert) // string master_cert = 1
    .s(s_encrypted_key) // string encrypted_key = 2
    .o;
/**
 * Encodes a `RegistrationNodeInfo` protobuf message:
 * @param atu8_certificate - `certificate`:
 * @param atu8_encrypted_seed - `encrypted_seed`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRegistrationNodeInfo = (atu8_certificate, atu8_encrypted_seed) => Protobuf() // ...
    .b(atu8_certificate) // bytes certificate = 1
    .b(atu8_encrypted_seed) // bytes encrypted_seed = 2
    .o;
/**
 * Decodes a protobuf SeedConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationSeedConfig}
 */
export const decodeSecretRegistrationSeedConfig = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf LegacySeedConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationLegacySeedConfig}
 */
export const decodeSecretRegistrationLegacySeedConfig = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf RegistrationNodeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRegistrationNodeInfo}
 */
export const decodeSecretRegistrationRegistrationNodeInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link SecretRegistrationSeedConfig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: master_key -
 *   - 1: encrypted_key -
 *   - 2: version -
 */
export const destructSecretRegistrationSeedConfig = (g_struct) => [g_struct.master_key, g_struct.encrypted_key, g_struct.version];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_SEED_CONFIG = '/secret.registration.v1beta1.SeedConfig';
/**
 * Destructures the fields of a {@link SecretRegistrationLegacySeedConfig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: master_cert -
 *   - 1: encrypted_key -
 */
export const destructSecretRegistrationLegacySeedConfig = (g_struct) => [g_struct.master_cert, g_struct.encrypted_key];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_LEGACY_SEED_CONFIG = '/secret.registration.v1beta1.LegacySeedConfig';
/**
 * Destructures the fields of a {@link SecretRegistrationRegistrationNodeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificate -
 *   - 1: encrypted_seed -
 */
export const destructSecretRegistrationRegistrationNodeInfo = (g_struct) => [safe_base64_to_bytes(g_struct.certificate), safe_base64_to_bytes(g_struct.encrypted_seed)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REGISTRATION_NODE_INFO = '/secret.registration.v1beta1.RegistrationNodeInfo';
//# sourceMappingURL=types.js.map