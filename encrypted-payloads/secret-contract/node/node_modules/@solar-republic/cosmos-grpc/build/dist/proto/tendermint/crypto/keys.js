import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../api/util.js';
/**
 * Encodes a `PublicKey` protobuf message: defines the keys available for use with Validators
 * @param atu8_ed25519 - `ed25519`:
 * @param atu8_secp256k1 - `secp256k1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintCryptoPublicKey = (atu8_ed25519, atu8_secp256k1) => Protobuf() // ...
    .b(atu8_ed25519) // bytes ed25519 = 1
    .b(atu8_secp256k1) // bytes secp256k1 = 2
    .o;
/**
 * Decodes a protobuf PublicKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintCryptoPublicKey}
 */
export const decodeTendermintCryptoPublicKey = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link TendermintCryptoPublicKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ed25519 -
 *   - 1: secp256k1 -
 */
export const destructTendermintCryptoPublicKey = (g_struct) => [safe_base64_to_bytes(g_struct.ed25519), safe_base64_to_bytes(g_struct.secp256k1)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_CRYPTO_PUBLIC_KEY = '/tendermint.crypto.PublicKey';
//# sourceMappingURL=keys.js.map