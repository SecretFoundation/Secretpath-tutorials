import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakDurationStr } from '../../../api/types.js';
export type EncodedTendermintTypesConsensusParams = Encoded<'/tendermint.types.ConsensusParams'>;
export type EncodedTendermintTypesBlockParams = Encoded<'/tendermint.types.BlockParams'>;
export type EncodedTendermintTypesEvidenceParams = Encoded<'/tendermint.types.EvidenceParams'>;
export type EncodedTendermintTypesValidatorParams = Encoded<'/tendermint.types.ValidatorParams'>;
export type EncodedTendermintTypesVersionParams = Encoded<'/tendermint.types.VersionParams'>;
export type EncodedTendermintTypesHashedParams = Encoded<'/tendermint.types.HashedParams'>;
export type EncodedTendermintTypesABCIParams = Encoded<'/tendermint.types.ABCIParams'>;
/**
 * Encodes a `ConsensusParams` protobuf message: contains consensus critical parameters that determine the validity of blocks.
 * @param g_block - `block`:
 * @param g_evidence - `evidence`:
 * @param g_validator - `validator`:
 * @param g_version - `version`:
 * @param g_abci - `abci`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesConsensusParams: (atu8_block?: Opt<Encoded<'/tendermint.types.BlockParams'>>, atu8_evidence?: Opt<Encoded<'/tendermint.types.EvidenceParams'>>, atu8_validator?: Opt<Encoded<'/tendermint.types.ValidatorParams'>>, atu8_version?: Opt<Encoded<'/tendermint.types.VersionParams'>>, atu8_abci?: Opt<Encoded<'/tendermint.types.ABCIParams'>>) => EncodedTendermintTypesConsensusParams;
/**
 * Encodes a `BlockParams` protobuf message: contains limits on the block size.
 * @param sg_max_bytes - `max_bytes`: Max block size, in bytes. Note: must be greater than 0
 * @param sg_max_gas - `max_gas`: Max gas per block. Note: must be greater or equal to -1
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesBlockParams: (sg_max_bytes?: Opt<WeakInt64Str>, sg_max_gas?: Opt<WeakInt64Str>) => EncodedTendermintTypesBlockParams;
/**
 * Encodes a `EvidenceParams` protobuf message: determine how we handle evidence of malfeasance.
 * @param sg_max_age_num_blocks - `max_age_num_blocks`: Max age of evidence, in blocks. The basic formula for calculating this is: MaxAgeDuration / {average block time}.
 * @param xt_max_age_duration - `max_age_duration`: Max age of evidence, in time. It should correspond with an app's "unbonding period" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
 * @param sg_max_bytes - `max_bytes`: This sets the maximum size of total evidence in bytes that can be committed in a single block. and should fall comfortably under the max block bytes. Default is 1048576 or 1MB
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesEvidenceParams: (sg_max_age_num_blocks?: Opt<WeakInt64Str>, xt_max_age_duration?: Opt<number>, sg_max_bytes?: Opt<WeakInt64Str>) => EncodedTendermintTypesEvidenceParams;
/**
 * Encodes a `ValidatorParams` protobuf message: restrict the public key types validators can use. NOTE: uses ABCI pubkey naming, not Amino names.
 * @param a_pub_key_types - `pub_key_types`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesValidatorParams: (a_pub_key_types?: Opt<string[]>) => EncodedTendermintTypesValidatorParams;
/**
 * Encodes a `VersionParams` protobuf message: contains the ABCI application version.
 * @param sg_app - `app`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesVersionParams: (sg_app?: Opt<WeakUint64Str>) => EncodedTendermintTypesVersionParams;
/**
 * Encodes a `HashedParams` protobuf message: a subset of ConsensusParams. It is hashed into the Header.ConsensusHash.
 * @param sg_block_max_bytes - `block_max_bytes`:
 * @param sg_block_max_gas - `block_max_gas`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesHashedParams: (sg_block_max_bytes?: Opt<WeakInt64Str>, sg_block_max_gas?: Opt<WeakInt64Str>) => EncodedTendermintTypesHashedParams;
/**
 * Encodes a `ABCIParams` protobuf message: configure functionality specific to the Application Blockchain Interface.
 * @param sg_vote_extensions_enable_height - `vote_extensions_enable_height`: configures the first height during which vote extensions will be enabled. During this specified height, and for all subsequent heights, precommit messages that do not contain valid extension data will be considered invalid. Prior to this height, vote extensions will not be used or accepted by validators on the network. Once enabled, vote extensions will be created by the application in ExtendVote, passed to the application for validation in VerifyVoteExtension and given to the application to use when proposing a block during PrepareProposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesABCIParams: (sg_vote_extensions_enable_height?: Opt<WeakInt64Str>) => EncodedTendermintTypesABCIParams;
/**
 * A decoded protobuf ConsensusParams message
 *
 * Tuple where:
 *   - 0: block -
 *   - 1: evidence -
 *   - 2: validator -
 *   - 3: version -
 *   - 4: abci -
 */
export type DecodedTendermintTypesConsensusParams = [
    a_block?: DecodedTendermintTypesBlockParams,
    a_evidence?: DecodedTendermintTypesEvidenceParams,
    a_validator?: DecodedTendermintTypesValidatorParams,
    a_version?: DecodedTendermintTypesVersionParams,
    a_abci?: DecodedTendermintTypesABCIParams
];
/**
 * Decodes a protobuf ConsensusParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesConsensusParams}
 */
export declare const decodeTendermintTypesConsensusParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesConsensusParams;
/**
 * A decoded protobuf BlockParams message
 *
 * Tuple where:
 *   - 0: max_bytes - Max block size, in bytes. Note: must be greater than 0
 *   - 1: max_gas - Max gas per block. Note: must be greater or equal to -1
 */
export type DecodedTendermintTypesBlockParams = [
    sg_max_bytes?: CwInt64,
    sg_max_gas?: CwInt64
];
/**
 * Decodes a protobuf BlockParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesBlockParams}
 */
export declare const decodeTendermintTypesBlockParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesBlockParams;
/**
 * A decoded protobuf EvidenceParams message
 *
 * Tuple where:
 *   - 0: max_age_num_blocks - Max age of evidence, in blocks. The basic formula for calculating this is: MaxAgeDuration / {average block time}.
 *   - 1: max_age_duration - Max age of evidence, in time. It should correspond with an app's "unbonding period" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
 *   - 2: max_bytes - This sets the maximum size of total evidence in bytes that can be committed in a single block. and should fall comfortably under the max block bytes. Default is 1048576 or 1MB
 */
export type DecodedTendermintTypesEvidenceParams = [
    sg_max_age_num_blocks?: CwInt64,
    a_max_age_duration?: [
        string,
        number
    ],
    sg_max_bytes?: CwInt64
];
/**
 * Decodes a protobuf EvidenceParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesEvidenceParams}
 */
export declare const decodeTendermintTypesEvidenceParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesEvidenceParams;
/**
 * A decoded protobuf ValidatorParams message
 *
 * Alias for: pub_key_types -
 */
export type DecodedTendermintTypesValidatorParams = [
    a_pub_key_types?: string[]
];
/**
 * Decodes a protobuf ValidatorParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesValidatorParams}
 */
export declare const decodeTendermintTypesValidatorParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesValidatorParams;
/**
 * A decoded protobuf VersionParams message
 *
 * Alias for: app -
 */
export type DecodedTendermintTypesVersionParams = [
    sg_app?: CwUint64
];
/**
 * Decodes a protobuf VersionParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesVersionParams}
 */
export declare const decodeTendermintTypesVersionParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesVersionParams;
/**
 * A decoded protobuf HashedParams message
 *
 * Tuple where:
 *   - 0: block_max_bytes -
 *   - 1: block_max_gas -
 */
export type DecodedTendermintTypesHashedParams = [
    sg_block_max_bytes?: CwInt64,
    sg_block_max_gas?: CwInt64
];
/**
 * Decodes a protobuf HashedParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesHashedParams}
 */
export declare const decodeTendermintTypesHashedParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesHashedParams;
/**
 * A decoded protobuf ABCIParams message
 *
 * Alias for: vote_extensions_enable_height - configures the first height during which vote extensions will be enabled. During this specified height, and for all subsequent heights, precommit messages that do not contain valid extension data will be considered invalid. Prior to this height, vote extensions will not be used or accepted by validators on the network. Once enabled, vote extensions will be created by the application in ExtendVote, passed to the application for validation in VerifyVoteExtension and given to the application to use when proposing a block during PrepareProposal.
 */
export type DecodedTendermintTypesABCIParams = [
    sg_vote_extensions_enable_height?: CwInt64
];
/**
 * Decodes a protobuf ABCIParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesABCIParams}
 */
export declare const decodeTendermintTypesABCIParams: (atu8_payload: Uint8Array) => DecodedTendermintTypesABCIParams;
/**
 * Destructures the fields of a {@link TendermintTypesConsensusParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block -
 *   - 1: evidence -
 *   - 2: validator -
 *   - 3: version -
 *   - 4: abci -
 */
export declare const destructTendermintTypesConsensusParams: (g_struct: TendermintTypesConsensusParams) => [block?: TendermintTypesBlockParams, evidence?: TendermintTypesEvidenceParams, validator?: TendermintTypesValidatorParams, version?: TendermintTypesVersionParams, abci?: TendermintTypesABCIParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_CONSENSUS_PARAMS = "/tendermint.types.ConsensusParams";
/**
 * JSON serialization of `tendermint.types.ConsensusParams` - contains consensus critical parameters that determine the validity of blocks.
 */
export type TendermintTypesConsensusParams = {
    block?: TendermintTypesBlockParams | undefined;
    evidence?: TendermintTypesEvidenceParams | undefined;
    validator?: TendermintTypesValidatorParams | undefined;
    version?: TendermintTypesVersionParams | undefined;
    abci?: TendermintTypesABCIParams | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesBlockParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_bytes - Max block size, in bytes. Note: must be greater than 0
 *   - 1: max_gas - Max gas per block. Note: must be greater or equal to -1
 */
export declare const destructTendermintTypesBlockParams: (g_struct: TendermintTypesBlockParams) => [max_bytes?: CwInt64, max_gas?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_BLOCK_PARAMS = "/tendermint.types.BlockParams";
/**
 * JSON serialization of `tendermint.types.BlockParams` - contains limits on the block size.
 */
export type TendermintTypesBlockParams = {
    max_bytes?: CwInt64 | undefined;
    max_gas?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesEvidenceParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_age_num_blocks - Max age of evidence, in blocks. The basic formula for calculating this is: MaxAgeDuration / {average block time}.
 *   - 1: max_age_duration - Max age of evidence, in time. It should correspond with an app's "unbonding period" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
 *   - 2: max_bytes - This sets the maximum size of total evidence in bytes that can be committed in a single block. and should fall comfortably under the max block bytes. Default is 1048576 or 1MB
 */
export declare const destructTendermintTypesEvidenceParams: (g_struct: TendermintTypesEvidenceParams) => [max_age_num_blocks?: CwInt64, max_age_duration?: number, max_bytes?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EVIDENCE_PARAMS = "/tendermint.types.EvidenceParams";
/**
 * JSON serialization of `tendermint.types.EvidenceParams` - determine how we handle evidence of malfeasance.
 */
export type TendermintTypesEvidenceParams = {
    max_age_num_blocks?: CwInt64 | undefined;
    max_age_duration?: WeakDurationStr | undefined;
    max_bytes?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesValidatorParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key_types -
 */
export declare const destructTendermintTypesValidatorParams: (g_struct: TendermintTypesValidatorParams) => [pub_key_types?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VALIDATOR_PARAMS = "/tendermint.types.ValidatorParams";
/**
 * JSON serialization of `tendermint.types.ValidatorParams` - restrict the public key types validators can use. NOTE: uses ABCI pubkey naming, not Amino names.
 */
export type TendermintTypesValidatorParams = {
    pub_key_types?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesVersionParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: app -
 */
export declare const destructTendermintTypesVersionParams: (g_struct: TendermintTypesVersionParams) => [app?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VERSION_PARAMS = "/tendermint.types.VersionParams";
/**
 * JSON serialization of `tendermint.types.VersionParams` - contains the ABCI application version.
 */
export type TendermintTypesVersionParams = {
    app?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesABCIParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote_extensions_enable_height - configures the first height during which vote extensions will be enabled. During this specified height, and for all subsequent heights, precommit messages that do not contain valid extension data will be considered invalid. Prior to this height, vote extensions will not be used or accepted by validators on the network. Once enabled, vote extensions will be created by the application in ExtendVote, passed to the application for validation in VerifyVoteExtension and given to the application to use when proposing a block during PrepareProposal.
 */
export declare const destructTendermintTypesABCIParams: (g_struct: TendermintTypesABCIParams) => [vote_extensions_enable_height?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_A_B_C_I_PARAMS = "/tendermint.types.ABCIParams";
/**
 * JSON serialization of `tendermint.types.ABCIParams` - configure functionality specific to the Application Blockchain Interface.
 */
export type TendermintTypesABCIParams = {
    vote_extensions_enable_height?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesHashedParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_max_bytes -
 *   - 1: block_max_gas -
 */
export declare const destructTendermintTypesHashedParams: (g_struct: TendermintTypesHashedParams) => [block_max_bytes?: CwInt64, block_max_gas?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_HASHED_PARAMS = "/tendermint.types.HashedParams";
/**
 * JSON serialization of `tendermint.types.HashedParams` - a subset of ConsensusParams. It is hashed into the Header.ConsensusHash.
 */
export type TendermintTypesHashedParams = {
    block_max_bytes?: CwInt64 | undefined;
    block_max_gas?: CwInt64 | undefined;
};
