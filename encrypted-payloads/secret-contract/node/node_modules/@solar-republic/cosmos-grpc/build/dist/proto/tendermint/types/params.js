import { parse_duration } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `ConsensusParams` protobuf message: contains consensus critical parameters that determine the validity of blocks.
 * @param g_block - `block`:
 * @param g_evidence - `evidence`:
 * @param g_validator - `validator`:
 * @param g_version - `version`:
 * @param g_abci - `abci`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesConsensusParams = (atu8_block, atu8_evidence, atu8_validator, atu8_version, atu8_abci) => Protobuf() // ...
    .b(atu8_block) // BlockParams block = 1
    .b(atu8_evidence) // EvidenceParams evidence = 2
    .b(atu8_validator) // ValidatorParams validator = 3
    .b(atu8_version) // VersionParams version = 4
    .b(atu8_abci) // ABCIParams abci = 5
    .o;
/**
 * Encodes a `BlockParams` protobuf message: contains limits on the block size.
 * @param sg_max_bytes - `max_bytes`: Max block size, in bytes. Note: must be greater than 0
 * @param sg_max_gas - `max_gas`: Max gas per block. Note: must be greater or equal to -1
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesBlockParams = (sg_max_bytes, sg_max_gas) => Protobuf() // ...
    .g(sg_max_bytes) // int32 max_bytes = 1
    .g(sg_max_gas) // int32 max_gas = 2
    .o;
/**
 * Encodes a `EvidenceParams` protobuf message: determine how we handle evidence of malfeasance.
 * @param sg_max_age_num_blocks - `max_age_num_blocks`: Max age of evidence, in blocks. The basic formula for calculating this is: MaxAgeDuration / {average block time}.
 * @param xt_max_age_duration - `max_age_duration`: Max age of evidence, in time. It should correspond with an app's "unbonding period" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
 * @param sg_max_bytes - `max_bytes`: This sets the maximum size of total evidence in bytes that can be committed in a single block. and should fall comfortably under the max block bytes. Default is 1048576 or 1MB
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesEvidenceParams = (sg_max_age_num_blocks, xt_max_age_duration, sg_max_bytes) => Protobuf() // ...
    .g(sg_max_age_num_blocks) // int32 max_age_num_blocks = 1
    .b(temporal(xt_max_age_duration)) // Duration max_age_duration = 2
    .g(sg_max_bytes) // int32 max_bytes = 3
    .o;
/**
 * Encodes a `ValidatorParams` protobuf message: restrict the public key types validators can use. NOTE: uses ABCI pubkey naming, not Amino names.
 * @param a_pub_key_types - `pub_key_types`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesValidatorParams = (a_pub_key_types) => Protobuf() // ...
    .S(a_pub_key_types) // string[] pub_key_types = 1
    .o;
/**
 * Encodes a `VersionParams` protobuf message: contains the ABCI application version.
 * @param sg_app - `app`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesVersionParams = (sg_app) => Protobuf() // ...
    .g(sg_app) // uint64 app = 1
    .o;
/**
 * Encodes a `HashedParams` protobuf message: a subset of ConsensusParams. It is hashed into the Header.ConsensusHash.
 * @param sg_block_max_bytes - `block_max_bytes`:
 * @param sg_block_max_gas - `block_max_gas`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesHashedParams = (sg_block_max_bytes, sg_block_max_gas) => Protobuf() // ...
    .g(sg_block_max_bytes) // int32 block_max_bytes = 1
    .g(sg_block_max_gas) // int32 block_max_gas = 2
    .o;
/**
 * Encodes a `ABCIParams` protobuf message: configure functionality specific to the Application Blockchain Interface.
 * @param sg_vote_extensions_enable_height - `vote_extensions_enable_height`: configures the first height during which vote extensions will be enabled. During this specified height, and for all subsequent heights, precommit messages that do not contain valid extension data will be considered invalid. Prior to this height, vote extensions will not be used or accepted by validators on the network. Once enabled, vote extensions will be created by the application in ExtendVote, passed to the application for validation in VerifyVoteExtension and given to the application to use when proposing a block during PrepareProposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesABCIParams = (sg_vote_extensions_enable_height) => Protobuf() // ...
    .g(sg_vote_extensions_enable_height) // int32 vote_extensions_enable_height = 1
    .o;
/**
 * Decodes a protobuf ConsensusParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesConsensusParams}
 */
export const decodeTendermintTypesConsensusParams = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1, 1], [decodeTendermintTypesBlockParams, decodeTendermintTypesEvidenceParams, decodeTendermintTypesValidatorParams, decodeTendermintTypesVersionParams, decodeTendermintTypesABCIParams]);
/**
 * Decodes a protobuf BlockParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesBlockParams}
 */
export const decodeTendermintTypesBlockParams = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf EvidenceParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesEvidenceParams}
 */
export const decodeTendermintTypesEvidenceParams = (atu8_payload) => decode_protobuf(atu8_payload, [3, [3, 1], 3], [0, decode_temporal]);
/**
 * Decodes a protobuf ValidatorParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesValidatorParams}
 */
export const decodeTendermintTypesValidatorParams = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf VersionParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesVersionParams}
 */
export const decodeTendermintTypesVersionParams = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf HashedParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesHashedParams}
 */
export const decodeTendermintTypesHashedParams = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf ABCIParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesABCIParams}
 */
export const decodeTendermintTypesABCIParams = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Destructures the fields of a {@link TendermintTypesConsensusParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block -
 *   - 1: evidence -
 *   - 2: validator -
 *   - 3: version -
 *   - 4: abci -
 */
export const destructTendermintTypesConsensusParams = (g_struct) => [g_struct.block, g_struct.evidence, g_struct.validator, g_struct.version, g_struct.abci];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_CONSENSUS_PARAMS = '/tendermint.types.ConsensusParams';
/**
 * Destructures the fields of a {@link TendermintTypesBlockParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_bytes - Max block size, in bytes. Note: must be greater than 0
 *   - 1: max_gas - Max gas per block. Note: must be greater or equal to -1
 */
export const destructTendermintTypesBlockParams = (g_struct) => [g_struct.max_bytes, g_struct.max_gas];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_BLOCK_PARAMS = '/tendermint.types.BlockParams';
/**
 * Destructures the fields of a {@link TendermintTypesEvidenceParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_age_num_blocks - Max age of evidence, in blocks. The basic formula for calculating this is: MaxAgeDuration / {average block time}.
 *   - 1: max_age_duration - Max age of evidence, in time. It should correspond with an app's "unbonding period" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).
 *   - 2: max_bytes - This sets the maximum size of total evidence in bytes that can be committed in a single block. and should fall comfortably under the max block bytes. Default is 1048576 or 1MB
 */
export const destructTendermintTypesEvidenceParams = (g_struct) => [g_struct.max_age_num_blocks, parse_duration(g_struct.max_age_duration), g_struct.max_bytes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EVIDENCE_PARAMS = '/tendermint.types.EvidenceParams';
/**
 * Destructures the fields of a {@link TendermintTypesValidatorParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key_types -
 */
export const destructTendermintTypesValidatorParams = (g_struct) => [g_struct.pub_key_types];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VALIDATOR_PARAMS = '/tendermint.types.ValidatorParams';
/**
 * Destructures the fields of a {@link TendermintTypesVersionParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: app -
 */
export const destructTendermintTypesVersionParams = (g_struct) => [g_struct.app];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VERSION_PARAMS = '/tendermint.types.VersionParams';
/**
 * Destructures the fields of a {@link TendermintTypesABCIParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote_extensions_enable_height - configures the first height during which vote extensions will be enabled. During this specified height, and for all subsequent heights, precommit messages that do not contain valid extension data will be considered invalid. Prior to this height, vote extensions will not be used or accepted by validators on the network. Once enabled, vote extensions will be created by the application in ExtendVote, passed to the application for validation in VerifyVoteExtension and given to the application to use when proposing a block during PrepareProposal.
 */
export const destructTendermintTypesABCIParams = (g_struct) => [g_struct.vote_extensions_enable_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_A_B_C_I_PARAMS = '/tendermint.types.ABCIParams';
/**
 * Destructures the fields of a {@link TendermintTypesHashedParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_max_bytes -
 *   - 1: block_max_gas -
 */
export const destructTendermintTypesHashedParams = (g_struct) => [g_struct.block_max_bytes, g_struct.block_max_gas];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_HASHED_PARAMS = '/tendermint.types.HashedParams';
//# sourceMappingURL=params.js.map