import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../api/util.js';
import { decodeTendermintCryptoPublicKey } from '../crypto/keys.js';
/**
 * Encodes a `ValidatorSet` protobuf message:
 * @param a_validators - `validators`:
 * @param g_proposer - `proposer`:
 * @param sg_total_voting_power - `total_voting_power`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesValidatorSet = (a_validators, atu8_proposer, sg_total_voting_power) => Protobuf() // ...
    .B(a_validators) // Validator[] validators = 1
    .b(atu8_proposer) // Validator proposer = 2
    .g(sg_total_voting_power) // int32 total_voting_power = 3
    .o;
/**
 * Encodes a `Validator` protobuf message:
 * @param atu8_address - `address`:
 * @param g_pub_key - `pub_key`:
 * @param sg_voting_power - `voting_power`:
 * @param sg_proposer_priority - `proposer_priority`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesValidator = (atu8_address, atu8_pub_key, sg_voting_power, sg_proposer_priority) => Protobuf() // ...
    .b(atu8_address) // bytes address = 1
    .b(atu8_pub_key) // PublicKey pub_key = 2
    .g(sg_voting_power) // int32 voting_power = 3
    .g(sg_proposer_priority) // int32 proposer_priority = 4
    .o;
/**
 * Encodes a `SimpleValidator` protobuf message:
 * @param g_pub_key - `pub_key`:
 * @param sg_voting_power - `voting_power`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesSimpleValidator = (atu8_pub_key, sg_voting_power) => Protobuf() // ...
    .b(atu8_pub_key) // PublicKey pub_key = 1
    .g(sg_voting_power) // int32 voting_power = 2
    .o;
/**
 * Decodes a protobuf ValidatorSet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesValidatorSet}
 */
export const decodeTendermintTypesValidatorSet = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 3], [decodeTendermintTypesValidator, decodeTendermintTypesValidator]);
/**
 * Decodes a protobuf Validator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesValidator}
 */
export const decodeTendermintTypesValidator = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3, 3], [0, decodeTendermintCryptoPublicKey]);
/**
 * Decodes a protobuf SimpleValidator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesSimpleValidator}
 */
export const decodeTendermintTypesSimpleValidator = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeTendermintCryptoPublicKey]);
/**
 * Destructures the fields of a {@link TendermintTypesValidatorSet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators -
 *   - 1: proposer -
 *   - 2: total_voting_power -
 */
export const destructTendermintTypesValidatorSet = (g_struct) => [g_struct.validators, g_struct.proposer, g_struct.total_voting_power];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VALIDATOR_SET = '/tendermint.types.ValidatorSet';
/**
 * Destructures the fields of a {@link TendermintTypesValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: pub_key -
 *   - 2: voting_power -
 *   - 3: proposer_priority -
 */
export const destructTendermintTypesValidator = (g_struct) => [safe_base64_to_bytes(g_struct.address), g_struct.pub_key, g_struct.voting_power, g_struct.proposer_priority];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VALIDATOR = '/tendermint.types.Validator';
/**
 * Destructures the fields of a {@link TendermintTypesSimpleValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: voting_power -
 */
export const destructTendermintTypesSimpleValidator = (g_struct) => [g_struct.pub_key, g_struct.voting_power];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_SIMPLE_VALIDATOR = '/tendermint.types.SimpleValidator';
/**
 * Protobuf enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesBlockIDFlag}
 */
export const XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesBlockIDFlag}
 */
export const SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_UNKNOWN = 'BlockIDFlagUnknown';
/**
 * Protobuf enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_ABSENT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesBlockIDFlag}
 */
export const XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_ABSENT = 1;
/**
 * JSON enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_ABSENT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesBlockIDFlag}
 */
export const SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_ABSENT = 'BlockIDFlagAbsent';
/**
 * Protobuf enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_COMMIT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesBlockIDFlag}
 */
export const XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_COMMIT = 2;
/**
 * JSON enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_COMMIT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesBlockIDFlag}
 */
export const SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_COMMIT = 'BlockIDFlagCommit';
/**
 * Protobuf enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_NIL** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesBlockIDFlag}
 */
export const XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_NIL = 3;
/**
 * JSON enum value for `tendermint.types.BlockIDFlag`.
 *
 * **BLOCK_ID_FLAG_NIL** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesBlockIDFlag}
 */
export const SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_NIL = 'BlockIDFlagNil';
/**
 * Maps a protobuf enum int value for `tendermint.types.BlockIDFlag` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintTypesBlockIDFlag = {
    [XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_UNKNOWN]: SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_UNKNOWN,
    [XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_ABSENT]: SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_ABSENT,
    [XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_COMMIT]: SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_COMMIT,
    [XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_NIL]: SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_NIL,
};
/**
 * Maps a JSON enum string value for `tendermint.types.BlockIDFlag` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintTypesBlockIDFlag = {
    [SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_UNKNOWN]: XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_UNKNOWN,
    [SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_ABSENT]: XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_ABSENT,
    [SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_COMMIT]: XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_COMMIT,
    [SI_JSON_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_NIL]: XC_PROTO_TENDERMINT_TYPES_BLOCK_IDFLAG_BLOCK_ID_FLAG_NIL,
};
//# sourceMappingURL=validator.js.map