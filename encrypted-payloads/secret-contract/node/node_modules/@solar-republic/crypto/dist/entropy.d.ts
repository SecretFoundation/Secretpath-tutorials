/**
 * Takes a given seed to determinstically derive pseudo-random bits intended for reproducibility, and then
 * produces "random" values of various types within given ranges
 */
export declare class EntropyProducer {
    protected _atu8_entropy: Uint8Array;
    static create(n_variables: number, i_iterator: number, atu8_seed?: Uint8Array): Promise<EntropyProducer>;
    protected _dv_entropy: DataView;
    protected _nb_entropy: number;
    protected _ib_read: number;
    protected constructor(_atu8_entropy: Uint8Array);
    read(nb_read: number): number;
    get uint8(): number;
    get uint32(): number;
    get unit(): number;
    randomInt(n_hi: number, n_lo?: number): number;
    select<w_item extends any>(a_items: w_item[]): w_item;
}
