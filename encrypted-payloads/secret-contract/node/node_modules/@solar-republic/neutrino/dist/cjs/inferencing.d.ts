import type { O, U } from 'ts-toolbelt';
import type { AuthSecret, AuthSecret_ViewerInfo } from './types.js';
import type { Dict, JsonObject, Nilable } from '@blake.regalia/belt';
import type { ReduceSafe, SecretQueryPermit } from '@solar-republic/types';
type EmptyObject = Record<string, never>;
type WeakVariants = Dict<{
    msg: JsonObject;
}>;
type WeakViewerInfo = {
    viewer: {
        viewing_key: string;
        address: string;
    };
};
type ExtractProperty<as_objects, si_key extends string> = as_objects extends Record<si_key, infer w_value> ? w_value : undefined;
type MakeValuesReadonly<h_args extends Nilable<JsonObject>> = h_args extends JsonObject ? {
    [si_key in keyof h_args]: Readonly<h_args[si_key]>;
} : h_args;
type ResolveArgs<h_args extends Nilable<JsonObject>> = JsonObject extends h_args ? h_args extends EmptyObject ? Nilable<EmptyObject> : Nilable<MakeValuesReadonly<h_args>> : MakeValuesReadonly<h_args>;
export type MergeTuple<a_tuple extends [any?, any?]> = {
    0: [h_args?: U.Merge<a_tuple[0]>, z_auth?: a_tuple[1]];
    1: [h_args: U.Merge<a_tuple[0]>, z_auth?: a_tuple[1]];
    2: [h_args: U.Merge<a_tuple[0]>, z_auth: a_tuple[1]];
}[a_tuple extends [any, any] ? 2 : a_tuple extends [any, any?] ? 1 : 0];
type InferQueryArgsAndAuthWithoutPermit<h_args extends JsonObject, si_method extends string = ''> = h_args extends WeakViewerInfo ? [ReduceSafe<1, Omit<h_args, 'viewer'>>, AuthSecret_ViewerInfo] : h_args[si_method] extends {
    key: string;
} ? [ReduceSafe<1, Omit<h_args, 'key'>>, string] : [h_args];
type InferQueryArgsAndAuth<h_variants extends WeakVariants, h_args extends JsonObject, si_method extends string = '', b_generic extends 0 | 1 = 0> = InferQueryArgsAndAuthWithoutPermit<h_args, si_method> extends [infer h_args0, infer z_auth0] ? h_args0 extends JsonObject ? ExtractProperty<h_variants, 'with_permit'> extends {
    msg: {
        query: infer h_query;
        permit: SecretQueryPermit;
    };
} ? h_query extends JsonObject ? ExtractProperty<h_query, si_method> extends infer h_args_alt ? h_args_alt extends JsonObject ? [
    h_args: O.Merge<h_args0, h_args_alt>,
    z_auth: z_auth0 extends AuthSecret ? z_auth0 | SecretQueryPermit : SecretQueryPermit
] : [h_args: h_args0, z_auth: z_auth0] : never : never : z_auth0 extends AuthSecret ? [h_args: h_args0, z_auth: z_auth0] : [h_args: h_args0] : [never, never] : {
    0: [h_args: h_args, z_auth?: Nilable<never>];
    1: [h_args: Nilable<JsonObject>, z_auth?: Nilable<AuthSecret>];
}[b_generic];
/**
 * Creates the parameter types `h_args` and `z_auth` for `query_contract_infer()`
 */
export type CreateQueryArgsAndAuthParams<h_variants extends WeakVariants, si_method extends string = '', b_generic extends 0 | 1 = 0> = MergeTuple<InferQueryArgsAndAuth<h_variants, h_variants[si_method]['msg'], si_method, b_generic> extends [h_args: infer h_args, z_auth?: infer z_auth] ? h_args extends Nilable<JsonObject> ? z_auth extends Nilable<AuthSecret> ? z_auth extends null | undefined ? JsonObject extends h_args ? [h_args?: ResolveArgs<h_args>, z_auth?: z_auth] : [h_args: ResolveArgs<h_args>, z_auth?: z_auth] : [h_args: ResolveArgs<h_args>, z_auth: z_auth] : never : never : [never, never]>;
export {};
