import { ode, odv } from '@blake.regalia/belt';
// type ttt = Tpa<{
// 	granter: 'granter';
// 	grantee: 'grantee';
// }>;
export const tpas = (h_target, si_term) => h_target[Object.keys(h_target).find(s => s.startsWith(si_term))];
export const tpae = (h_target, si_term) => h_target[Object.keys(h_target).find(s => s.endsWith(si_term))];
export const tpaw = (h_target, si_term, xc_side = 0) => h_target[Object.keys(h_target)
    .find(s => s[['starts', 'ends'][xc_side] + 'With'](si_term))];
export const tpar = (h_target, r_match) => h_target[Object.keys(h_target).find(s => r_match.test(s))];
export const tpa = (h_subject) => new Proxy(h_subject, {
    get(h_target, z_property) {
        if ('string' !== typeof z_property || h_target[z_property])
            return h_target[z_property];
        // the fragment of the string
        const s_frag = z_property.slice(1);
        // option B.1
        return ode(h_target).find({
            _: (a) => a[0].startsWith(s_frag),
            $: (a) => a[0].endsWith(s_frag),
        }[z_property[0]]);
    },
    // get<
    // 	si_property extends string,
    // 	w_out extends Tpa<Record<si_property, typeof h_subject[si_property]>>,
    // >(
    // 	h_target: Record<si_property | symbol, any>,
    // 	z_property: si_property | symbol
    // ): w_out | void {
    // 	if(h_target[z_property]) return h_target[z_property];
    // 	if('string' === typeof z_property) {
    // 		// the fragment of the string
    // 		const s_frag = z_property.slice(1);
    // 		// // option A
    // 		// for(const si_key in h_target) {
    // 		// 	if(('_' === s_0 && si_key.startsWith(s_frag))
    // 		// 		|| ('$' === s_0 && si_key.endsWith(s_frag))
    // 		// 	) {
    // 		// 		return h_target[si_key];
    // 		// 	}
    // 		// }
    // 		// // option B
    // 		// return ode(h_target).find(({
    // 		// 	_: (a: [string, any]) => a[0].startsWith(s_frag),
    // 		// 	$: (a: [string, any]) => a[0].endsWith(s_frag),
    // 		// })[z_property[0]]!);
    // 		// option B.1
    // 		return ode(h_target).find({
    // 			_: (a: [string, any]) => a[0].startsWith(s_frag),
    // 			$: (a: [string, any]) => a[0].endsWith(s_frag),
    // 		}[z_property[0]]!) as w_out;
    // 		// // option C
    // 		// return h_target[odv(h_target).find(({
    // 		// 	_: (s: string) => s.startsWith(s_frag),
    // 		// 	$: (s: string) => s.endsWith(s_frag),
    // 		// })[z_property[0]]!)];
    // 		// // option D
    // 		// const s_0 = z_property[0];
    // 		// return h_target[odv(h_target).find(s => ('_' === s_0 && s.startsWith(s_frag))
    // 		// 	|| ('$' === s_0 && s.endsWith(s_frag)))];
    // 	}
    // },
});
// const ggg = tpa({
// 	allowances: 'allowances',
// 	granter: 'granter',
// 	grantee: 'grantee',
// });
//# sourceMappingURL=terse-property-access.js.map