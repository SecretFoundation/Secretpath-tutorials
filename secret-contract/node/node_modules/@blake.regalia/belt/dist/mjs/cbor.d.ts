/**
 * Primitive CBOR datatype
 */
export type CborPrimitive = undefined | null | boolean | number | bigint | string | Uint8Array;
type CborArray = CborValue[];
type CborMap = Map<CborValue, CborValue>;
/**
 * Any CBOR value
 */
export type CborValue = CborPrimitive | CborArray | CborMap;
/**
 * Decodes a CBOR buffer into its ES equivalent. It does not support floating point numbers.
 *
 * Please note that only a specific subset of tags are supported: {@link https://www.rfc-editor.org/rfc/rfc8949.html#name-tagging-of-items}
 *  - 3.4.1. Standard Date/Time String - decoded as `number`
 *  - 3.4.2. Epoch-Based Date/Time - decoded as `number`
 *  - 3.4.3. Bignums - decoded as `bigint`
 *
 * @param atu8_data
 * @param ib_read
 * @returns a tuple of the decoded value and number of bytes read: `[z_value:`{@link CborValue `CborValue`}`, nb_read: number]`
 */
export declare const cbor_decode_trivial: <w_expected extends CborValue>(atu8_data: Uint8Array, ib_read?: number) => [w_item: w_expected, ib_read: number];
export {};
