/// <reference types="node" />
import type { Nilable, JsonObject, JsonValue } from '@blake.regalia/belt';
import type { SlimCoin } from '@solar-republic/types';
type Voidable = void | undefined;
export type RpcRequest<a_args extends any[] = []> = (...a_args: a_args) => [string] | [string, JsonObject<Voidable | Uint8Array>];
export declare const F_RPC_REQ_NO_ARGS: RpcRequest;
export type NetworkJsonResponse<w_type extends JsonValue<Voidable> = JsonValue | undefined> = [
    d_res: Response,
    sx_res: string,
    g_res: w_type
];
/**
 * @param f_req - the {@link RpcRequest `RpcRequest`}
 * @param f_res - a response-processing callback
 * @param g_init - optional {@link RequestInit} object
 * @returns what `f_res` returned
 * @throws a tuple of `[Response, string, JsonObject?]` where:
 * 	- 0: d_res - the {@link Response `Response`} object
 * 	- 1: s_res - the response body as text
 *    - 2?: g_res - the parsed response response JSON if valid
*/
/**
 * Constructs a function that submits a query/submit to the RESTful gRPC-gateway endpoint
 * @param f_req
 * @param g_init
 * @returns request function
 */
export declare const restful_grpc: <a_args extends any[], w_parsed extends JsonValue<Voidable>>(f_req: RpcRequest<a_args>, g_init_default?: 1 | RequestInit) => (z_req: string | ({
    origin: string;
} & RequestInit), ...a_args: a_args) => Promise<NetworkJsonResponse<w_parsed>>;
export declare const restruct_coin: (a_coin: Nilable<SlimCoin>) => {
    amount: `${bigint}`;
    denom: string;
} | undefined;
export declare const restruct_temporal: (xt_temporal: Nilable<number>) => {
    seconds: string;
    nanos: number;
} | undefined;
export {};
