import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashBaseAttribute, DecodedAkashBaseAttribute } from './attribute.js';
import type { AkashBaseResourceValue, DecodedAkashBaseResourceValue } from './resourcevalue.js';
export type EncodedAkashBaseGPU = Encoded<'/akash.base.v1beta3.GPU'>;
/**
 * Encodes a `GPU` protobuf message: stores resource units and cpu config attributes
 * @param g_units - `units`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseGPU: (atu8_units?: Opt<Encoded<'/akash.base.v1beta3.ResourceValue'>>, a_attributes?: Opt<Encoded<'/akash.base.v1beta3.Attribute'>[]>) => EncodedAkashBaseGPU;
/**
 * A decoded protobuf GPU message
 *
 * Tuple where:
 *   - 0: units -
 *   - 1: attributes -
 */
export type DecodedAkashBaseGPU = [
    a_units?: DecodedAkashBaseResourceValue,
    a_attributes?: DecodedAkashBaseAttribute[]
];
/**
 * Decodes a protobuf GPU message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseGPU}
 */
export declare const decodeAkashBaseGPU: (atu8_payload: Uint8Array) => DecodedAkashBaseGPU;
/**
 * Destructures the fields of a {@link AkashBaseGPU} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: units -
 *   - 1: attributes -
 */
export declare const destructAkashBaseGPU: (g_struct: AkashBaseGPU) => [units?: AkashBaseResourceValue, attributes?: AkashBaseAttribute[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_G_P_U = "/akash.base.v1beta3.GPU";
/**
 * JSON serialization of `akash.base.v1beta3.GPU` - stores resource units and cpu config attributes
 */
export type AkashBaseGPU = {
    units?: AkashBaseResourceValue | undefined;
    attributes?: AkashBaseAttribute[] | undefined;
};
