import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashBaseResourceValue = Encoded<'/akash.base.v1beta3.ResourceValue'>;
/**
 * Encodes a `ResourceValue` protobuf message: Unit stores cpu, memory and storage metrics
 * @param atu8_val - `val`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashBaseResourceValue: (atu8_val?: Opt<Uint8Array>) => EncodedAkashBaseResourceValue;
/**
 * A decoded protobuf ResourceValue message
 *
 * Alias for: val -
 */
export type DecodedAkashBaseResourceValue = [
    atu8_val?: Uint8Array
];
/**
 * Decodes a protobuf ResourceValue message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashBaseResourceValue}
 */
export declare const decodeAkashBaseResourceValue: (atu8_payload: Uint8Array) => DecodedAkashBaseResourceValue;
/**
 * Destructures the fields of a {@link AkashBaseResourceValue} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: val -
 */
export declare const destructAkashBaseResourceValue: (g_struct: AkashBaseResourceValue) => [val?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_BASE_RESOURCE_VALUE = "/akash.base.v1beta3.ResourceValue";
/**
 * JSON serialization of `akash.base.v1beta3.ResourceValue` - Unit stores cpu, memory and storage metrics
 */
export type AkashBaseResourceValue = {
    val?: CwBase64 | undefined;
};
