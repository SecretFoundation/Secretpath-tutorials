import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashCertCertificate, DecodedAkashCertCertificate } from './cert.js';
export type EncodedAkashCertGenesisCertificate = Encoded<'/akash.cert.v1beta3.GenesisCertificate'>;
export type EncodedAkashCertGenesisState = Encoded<'/akash.cert.v1beta3.GenesisState'>;
/**
 * Encodes a `GenesisCertificate` protobuf message: defines certificate entry at genesis
 * @param sa_owner - `owner`:
 * @param g_certificate - `certificate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertGenesisCertificate: (sa_owner?: Opt<WeakAccountAddr>, atu8_certificate?: Opt<Encoded<'/akash.cert.v1beta3.Certificate'>>) => EncodedAkashCertGenesisCertificate;
/**
 * Encodes a `GenesisState` protobuf message: defines the basic genesis state used by cert module
 * @param a_certificates - `certificates`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashCertGenesisState: (a_certificates?: Opt<Encoded<'/akash.cert.v1beta3.GenesisCertificate'>[]>) => EncodedAkashCertGenesisState;
/**
 * A decoded protobuf GenesisCertificate message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: certificate -
 */
export type DecodedAkashCertGenesisCertificate = [
    sa_owner?: CwAccountAddr,
    a_certificate?: DecodedAkashCertCertificate
];
/**
 * Decodes a protobuf GenesisCertificate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertGenesisCertificate}
 */
export declare const decodeAkashCertGenesisCertificate: (atu8_payload: Uint8Array) => DecodedAkashCertGenesisCertificate;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: certificates -
 */
export type DecodedAkashCertGenesisState = [
    a_certificates?: DecodedAkashCertGenesisCertificate[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashCertGenesisState}
 */
export declare const decodeAkashCertGenesisState: (atu8_payload: Uint8Array) => DecodedAkashCertGenesisState;
/**
 * Destructures the fields of a {@link AkashCertGenesisCertificate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: certificate -
 */
export declare const destructAkashCertGenesisCertificate: (g_struct: AkashCertGenesisCertificate) => [owner?: CwAccountAddr, certificate?: AkashCertCertificate];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_GENESIS_CERTIFICATE = "/akash.cert.v1beta3.GenesisCertificate";
/**
 * JSON serialization of `akash.cert.v1beta3.GenesisCertificate` - defines certificate entry at genesis
 */
export type AkashCertGenesisCertificate = {
    owner?: CwAccountAddr | undefined;
    certificate?: AkashCertCertificate | undefined;
};
/**
 * Destructures the fields of a {@link AkashCertGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificates -
 */
export declare const destructAkashCertGenesisState: (g_struct: AkashCertGenesisState) => [certificates?: AkashCertGenesisCertificate[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_CERT_GENESIS_STATE = "/akash.cert.v1beta3.GenesisState";
/**
 * JSON serialization of `akash.cert.v1beta3.GenesisState` - defines the basic genesis state used by cert module
 */
export type AkashCertGenesisState = {
    certificates?: AkashCertGenesisCertificate[] | undefined;
};
