import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
import { decodeAkashBasePlacementRequirements } from '../../base/v1beta1/attribute.js';
import { decodeAkashBaseResourceUnits } from '../../base/v1beta1/resource.js';
/**
 * Encodes a `MsgCloseGroup` protobuf message: defines SDK message to close a single Group within a Deployment.
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgCloseGroup = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // GroupID id = 1
    .o;
/**
 * Encodes a `MsgCloseGroupResponse` protobuf message: defines the Msg/CloseGroup response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgCloseGroupResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgPauseGroup` protobuf message: defines SDK message to close a single Group within a Deployment.
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgPauseGroup = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // GroupID id = 1
    .o;
/**
 * Encodes a `MsgPauseGroupResponse` protobuf message: defines the Msg/PauseGroup response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgPauseGroupResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgStartGroup` protobuf message: defines SDK message to close a single Group within a Deployment.
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgStartGroup = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // GroupID id = 1
    .o;
/**
 * Encodes a `MsgStartGroupResponse` protobuf message: defines the Msg/StartGroup response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgStartGroupResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `GroupID` protobuf message: stores owner, deployment sequence number and group sequence number
 * @param sa_owner - `owner`:
 * @param sg_dseq - `dseq`:
 * @param n_gseq - `gseq`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentGroupID = (sa_owner, sg_dseq, n_gseq) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_dseq) // uint64 dseq = 2
    .v(n_gseq) // uint32 gseq = 3
    .o;
/**
 * Encodes a `GroupSpec` protobuf message: stores group specifications
 * @param s_name - `name`:
 * @param g_requirements - `requirements`:
 * @param a_resources - `resources`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentGroupSpec = (s_name, atu8_requirements, a_resources) => Protobuf() // ...
    .s(s_name) // string name = 1
    .b(atu8_requirements) // PlacementRequirements requirements = 2
    .B(a_resources) // Resource[] resources = 3
    .o;
/**
 * Encodes a `Group` protobuf message: stores group id, state and specifications of group
 * @param g_group_id - `group_id`:
 * @param xc_state - `state`:
 * @param g_group_spec - `group_spec`:
 * @param sg_created_at - `created_at`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentGroup = (atu8_group_id, xc_state, atu8_group_spec, sg_created_at) => Protobuf() // ...
    .b(atu8_group_id) // GroupID group_id = 1
    .v(xc_state) // State state = 2
    .b(atu8_group_spec) // GroupSpec group_spec = 3
    .g(sg_created_at) // int32 created_at = 4
    .o;
/**
 * Encodes a `Resource` protobuf message: stores unit, total count and price of resource
 * @param g_resources - `resources`:
 * @param n_count - `count`:
 * @param a_price - `price`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentResource = (atu8_resources, n_count, a_price) => Protobuf() // ...
    .b(atu8_resources) // ResourceUnits resources = 1
    .v(n_count) // uint32 count = 2
    .b(coin(a_price)) // Coin price = 3
    .o;
/**
 * Decodes a protobuf CloseGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCloseGroup}
 */
export const decodeAkashDeploymentMsgCloseGroup = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentGroupID]);
/**
 * Decodes a protobuf CloseGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCloseGroupResponse}
 */
export const decodeAkashDeploymentMsgCloseGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf PauseGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgPauseGroup}
 */
export const decodeAkashDeploymentMsgPauseGroup = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentGroupID]);
/**
 * Decodes a protobuf PauseGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgPauseGroupResponse}
 */
export const decodeAkashDeploymentMsgPauseGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf StartGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgStartGroup}
 */
export const decodeAkashDeploymentMsgStartGroup = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentGroupID]);
/**
 * Decodes a protobuf StartGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgStartGroupResponse}
 */
export const decodeAkashDeploymentMsgStartGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf GroupID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroupID}
 */
export const decodeAkashDeploymentGroupID = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1]);
/**
 * Decodes a protobuf GroupSpec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroupSpec}
 */
export const decodeAkashDeploymentGroupSpec = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0], [0, decodeAkashBasePlacementRequirements, decodeAkashDeploymentResource]);
/**
 * Decodes a protobuf Group message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroup}
 */
export const decodeAkashDeploymentGroup = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 3], [decodeAkashDeploymentGroupID, 0, decodeAkashDeploymentGroupSpec]);
/**
 * Decodes a protobuf Resource message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentResource}
 */
export const decodeAkashDeploymentResource = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeAkashBaseResourceUnits, 0, decode_coin]);
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCloseGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashDeploymentMsgCloseGroup = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CLOSE_GROUP = '/akash.deployment.v1beta1.MsgCloseGroup';
/**
 * Destructures the fields of a {@link AkashDeploymentGroupID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: dseq -
 *   - 2: gseq -
 */
export const destructAkashDeploymentGroupID = (g_struct) => [g_struct.owner, g_struct.dseq, g_struct.gseq];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP_I_D = '/akash.deployment.v1beta1.GroupID';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCloseGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgCloseGroupResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CLOSE_GROUP_RESPONSE = '/akash.deployment.v1beta1.MsgCloseGroupResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgPauseGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashDeploymentMsgPauseGroup = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_PAUSE_GROUP = '/akash.deployment.v1beta1.MsgPauseGroup';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgPauseGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgPauseGroupResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_PAUSE_GROUP_RESPONSE = '/akash.deployment.v1beta1.MsgPauseGroupResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgStartGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashDeploymentMsgStartGroup = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_START_GROUP = '/akash.deployment.v1beta1.MsgStartGroup';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgStartGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgStartGroupResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_START_GROUP_RESPONSE = '/akash.deployment.v1beta1.MsgStartGroupResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentGroupSpec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: requirements -
 *   - 2: resources -
 */
export const destructAkashDeploymentGroupSpec = (g_struct) => [g_struct.name, g_struct.requirements, g_struct.resources];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP_SPEC = '/akash.deployment.v1beta1.GroupSpec';
/**
 * Destructures the fields of a {@link AkashDeploymentResource} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: resources -
 *   - 1: count -
 *   - 2: price -
 */
export const destructAkashDeploymentResource = (g_struct) => [g_struct.resources, g_struct.count, g_struct.price];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_RESOURCE = '/akash.deployment.v1beta1.Resource';
/**
 * Destructures the fields of a {@link AkashDeploymentGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id -
 *   - 1: state -
 *   - 2: group_spec -
 *   - 3: created_at -
 */
export const destructAkashDeploymentGroup = (g_struct) => [g_struct.group_id, g_struct.state, g_struct.group_spec, g_struct.created_at];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP = '/akash.deployment.v1beta1.Group';
/**
 * Protobuf enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_invalid = 0;
/**
 * JSON enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_invalid = 'GroupStateInvalid';
/**
 * Protobuf enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_open = 1;
/**
 * JSON enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_open = 'GroupOpen';
/**
 * Protobuf enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **paused** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_paused = 2;
/**
 * JSON enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **paused** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_paused = 'GroupPaused';
/**
 * Protobuf enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **insufficient_funds** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_insufficient_funds = 3;
/**
 * JSON enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **insufficient_funds** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_insufficient_funds = 'GroupInsufficientFunds';
/**
 * Protobuf enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_closed = 4;
/**
 * JSON enum value for `akash.deployment.v1beta1.Group.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_closed = 'GroupClosed';
/**
 * Maps a protobuf enum int value for `akash.deployment.v1beta1.Group.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAkashDeploymentGroupState = {
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_invalid]: SI_JSON_AKASH_DEPLOYMENT_GROUP_invalid,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_open]: SI_JSON_AKASH_DEPLOYMENT_GROUP_open,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_paused]: SI_JSON_AKASH_DEPLOYMENT_GROUP_paused,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_insufficient_funds]: SI_JSON_AKASH_DEPLOYMENT_GROUP_insufficient_funds,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_closed]: SI_JSON_AKASH_DEPLOYMENT_GROUP_closed,
};
/**
 * Maps a JSON enum string value for `akash.deployment.v1beta1.Group.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAkashDeploymentGroupState = {
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_invalid]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_invalid,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_open]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_open,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_paused]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_paused,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_insufficient_funds]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_insufficient_funds,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_closed]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_closed,
};
//# sourceMappingURL=group.js.map