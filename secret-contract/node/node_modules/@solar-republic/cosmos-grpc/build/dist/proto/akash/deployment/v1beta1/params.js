import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/deployment package
 * @param a_deployment_min_deposit - `deployment_min_deposit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentParams = (a_deployment_min_deposit) => Protobuf() // ...
    .b(coin(a_deployment_min_deposit)) // Coin deployment_min_deposit = 1
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentParams}
 */
export const decodeAkashDeploymentParams = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Destructures the fields of a {@link AkashDeploymentParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployment_min_deposit -
 */
export const destructAkashDeploymentParams = (g_struct) => [g_struct.deployment_min_deposit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_PARAMS = '/akash.deployment.v1beta1.Params';
//# sourceMappingURL=params.js.map