import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAkashDeploymentDeploymentID } from './deployment.js';
import { decodeAkashDeploymentGroupSpec } from './groupspec.js';
/**
 * Encodes a `MsgCreateDeployment` protobuf message: defines an SDK message for creating deployment
 * @param g_id - `id`:
 * @param a_groups - `groups`:
 * @param atu8_version - `version`:
 * @param a_deposit - `deposit`:
 * @param sa_depositor - `depositor`: Depositor pays for the deposit
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgCreateDeployment = (atu8_id, a_groups, atu8_version, a_deposit, sa_depositor) => Protobuf() // ...
    .b(atu8_id) // DeploymentID id = 1
    .B(a_groups) // GroupSpec[] groups = 2
    .b(atu8_version) // bytes version = 3
    .b(coin(a_deposit)) // Coin deposit = 4
    .s(sa_depositor) // string depositor = 5
    .o;
/**
 * Encodes a `MsgCreateDeploymentResponse` protobuf message: defines the Msg/CreateDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgCreateDeploymentResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgDepositDeployment` protobuf message: deposits more funds into the deposit account
 * @param g_id - `id`:
 * @param a_amount - `amount`:
 * @param sa_depositor - `depositor`: Depositor pays for the deposit
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgDepositDeployment = (atu8_id, a_amount, sa_depositor) => Protobuf() // ...
    .b(atu8_id) // DeploymentID id = 1
    .b(coin(a_amount)) // Coin amount = 2
    .s(sa_depositor) // string depositor = 3
    .o;
/**
 * Encodes a `MsgDepositDeploymentResponse` protobuf message: MsgCreateDeploymentResponse defines the Msg/CreateDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgDepositDeploymentResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateDeployment` protobuf message: defines an SDK message for updating deployment
 * @param g_id - `id`:
 * @param atu8_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgUpdateDeployment = (atu8_id, atu8_version) => Protobuf() // ...
    .b(atu8_id) // DeploymentID id = 1
    .b(atu8_version, 3) // bytes version = 3
    .o;
/**
 * Encodes a `MsgUpdateDeploymentResponse` protobuf message: defines the Msg/UpdateDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgUpdateDeploymentResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCloseDeployment` protobuf message: defines an SDK message for closing deployment
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgCloseDeployment = (atu8_id) => Protobuf() // ...
    .b(atu8_id) // DeploymentID id = 1
    .o;
/**
 * Encodes a `MsgCloseDeploymentResponse` protobuf message: defines the Msg/CloseDeployment response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentMsgCloseDeploymentResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf CreateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCreateDeployment}
 */
export const decodeAkashDeploymentMsgCreateDeployment = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 1, 1, 5], [decodeAkashDeploymentDeploymentID, decodeAkashDeploymentGroupSpec, 0, decode_coin]);
/**
 * Decodes a protobuf CreateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCreateDeploymentResponse}
 */
export const decodeAkashDeploymentMsgCreateDeploymentResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf DepositDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgDepositDeployment}
 */
export const decodeAkashDeploymentMsgDepositDeployment = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5], [decodeAkashDeploymentDeploymentID, decode_coin]);
/**
 * Decodes a protobuf DepositDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgDepositDeploymentResponse}
 */
export const decodeAkashDeploymentMsgDepositDeploymentResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAkashDeploymentMsgUpdateDeployment}
 */
export const decodeAkashDeploymentMsgUpdateDeployment = ((atu8_payload, [a_id, , atu8_version] = decode_protobuf(atu8_payload, [1, 0, 1], [decodeAkashDeploymentDeploymentID])) => [a_id, __UNDEFINED, atu8_version]);
/**
 * Decodes a protobuf UpdateDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgUpdateDeploymentResponse}
 */
export const decodeAkashDeploymentMsgUpdateDeploymentResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CloseDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCloseDeployment}
 */
export const decodeAkashDeploymentMsgCloseDeployment = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAkashDeploymentDeploymentID]);
/**
 * Decodes a protobuf CloseDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentMsgCloseDeploymentResponse}
 */
export const decodeAkashDeploymentMsgCloseDeploymentResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCreateDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: groups -
 *   - 2: version -
 *   - 3: deposit -
 *   - 4: depositor - Depositor pays for the deposit
 */
export const destructAkashDeploymentMsgCreateDeployment = (g_struct) => [g_struct.id, g_struct.groups, safe_base64_to_bytes(g_struct.version), g_struct.deposit, g_struct.depositor];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CREATE_DEPLOYMENT = '/akash.deployment.v1beta2.MsgCreateDeployment';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCreateDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgCreateDeploymentResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CREATE_DEPLOYMENT_RESPONSE = '/akash.deployment.v1beta2.MsgCreateDeploymentResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgDepositDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: amount -
 *   - 2: depositor - Depositor pays for the deposit
 */
export const destructAkashDeploymentMsgDepositDeployment = (g_struct) => [g_struct.id, g_struct.amount, g_struct.depositor];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_DEPOSIT_DEPLOYMENT = '/akash.deployment.v1beta2.MsgDepositDeployment';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgDepositDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgDepositDeploymentResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_DEPOSIT_DEPLOYMENT_RESPONSE = '/akash.deployment.v1beta2.MsgDepositDeploymentResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgUpdateDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 2: version -
 */
export const destructAkashDeploymentMsgUpdateDeployment = (g_struct) => [g_struct.id, __UNDEFINED, safe_base64_to_bytes(g_struct.version)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_UPDATE_DEPLOYMENT = '/akash.deployment.v1beta2.MsgUpdateDeployment';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgUpdateDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgUpdateDeploymentResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_UPDATE_DEPLOYMENT_RESPONSE = '/akash.deployment.v1beta2.MsgUpdateDeploymentResponse';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCloseDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAkashDeploymentMsgCloseDeployment = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CLOSE_DEPLOYMENT = '/akash.deployment.v1beta2.MsgCloseDeployment';
/**
 * Destructures the fields of a {@link AkashDeploymentMsgCloseDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAkashDeploymentMsgCloseDeploymentResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_MSG_CLOSE_DEPLOYMENT_RESPONSE = '/akash.deployment.v1beta2.MsgCloseDeploymentResponse';
//# sourceMappingURL=deploymentmsg.js.map