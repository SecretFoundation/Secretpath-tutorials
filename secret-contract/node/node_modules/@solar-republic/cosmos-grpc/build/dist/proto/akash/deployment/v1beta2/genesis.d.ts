import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashDeploymentDeployment, DecodedAkashDeploymentDeployment } from './deployment.js';
import type { AkashDeploymentGroup, DecodedAkashDeploymentGroup } from './group.js';
import type { AkashDeploymentParams, DecodedAkashDeploymentParams } from './params.js';
export type EncodedAkashDeploymentGenesisDeployment = Encoded<'/akash.deployment.v1beta2.GenesisDeployment'>;
export type EncodedAkashDeploymentGenesisState = Encoded<'/akash.deployment.v1beta2.GenesisState'>;
/**
 * Encodes a `GenesisDeployment` protobuf message: defines the basic genesis state used by deployment module
 * @param g_deployment - `deployment`:
 * @param a_groups - `groups`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentGenesisDeployment: (atu8_deployment?: Opt<Encoded<'/akash.deployment.v1beta2.Deployment'>>, a_groups?: Opt<Encoded<'/akash.deployment.v1beta2.Group'>[]>) => EncodedAkashDeploymentGenesisDeployment;
/**
 * Encodes a `GenesisState` protobuf message: stores slice of genesis deployment instance
 * @param a_deployments - `deployments`:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentGenesisState: (a_deployments?: Opt<Encoded<'/akash.deployment.v1beta2.GenesisDeployment'>[]>, atu8_params?: Opt<Encoded<'/akash.deployment.v1beta2.Params'>>) => EncodedAkashDeploymentGenesisState;
/**
 * A decoded protobuf GenesisDeployment message
 *
 * Tuple where:
 *   - 0: deployment -
 *   - 1: groups -
 */
export type DecodedAkashDeploymentGenesisDeployment = [
    a_deployment?: DecodedAkashDeploymentDeployment,
    a_groups?: DecodedAkashDeploymentGroup[]
];
/**
 * Decodes a protobuf GenesisDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGenesisDeployment}
 */
export declare const decodeAkashDeploymentGenesisDeployment: (atu8_payload: Uint8Array) => DecodedAkashDeploymentGenesisDeployment;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: deployments -
 *   - 1: params -
 */
export type DecodedAkashDeploymentGenesisState = [
    a_deployments?: DecodedAkashDeploymentGenesisDeployment[],
    a_params?: DecodedAkashDeploymentParams
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGenesisState}
 */
export declare const decodeAkashDeploymentGenesisState: (atu8_payload: Uint8Array) => DecodedAkashDeploymentGenesisState;
/**
 * Destructures the fields of a {@link AkashDeploymentGenesisDeployment} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployment -
 *   - 1: groups -
 */
export declare const destructAkashDeploymentGenesisDeployment: (g_struct: AkashDeploymentGenesisDeployment) => [deployment?: AkashDeploymentDeployment, groups?: AkashDeploymentGroup[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GENESIS_DEPLOYMENT = "/akash.deployment.v1beta2.GenesisDeployment";
/**
 * JSON serialization of `akash.deployment.v1beta2.GenesisDeployment` - defines the basic genesis state used by deployment module
 */
export type AkashDeploymentGenesisDeployment = {
    deployment?: AkashDeploymentDeployment | undefined;
    groups?: AkashDeploymentGroup[] | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployments -
 *   - 1: params -
 */
export declare const destructAkashDeploymentGenesisState: (g_struct: AkashDeploymentGenesisState) => [deployments?: AkashDeploymentGenesisDeployment[], params?: AkashDeploymentParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GENESIS_STATE = "/akash.deployment.v1beta2.GenesisState";
/**
 * JSON serialization of `akash.deployment.v1beta2.GenesisState` - stores slice of genesis deployment instance
 */
export type AkashDeploymentGenesisState = {
    deployments?: AkashDeploymentGenesisDeployment[] | undefined;
    params?: AkashDeploymentParams | undefined;
};
