import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAkashDeploymentGroupID } from './groupid.js';
import { decodeAkashDeploymentGroupSpec } from './groupspec.js';
/**
 * Encodes a `Group` protobuf message: stores group id, state and specifications of group
 * @param g_group_id - `group_id`:
 * @param xc_state - `state`:
 * @param g_group_spec - `group_spec`:
 * @param sg_created_at - `created_at`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentGroup = (atu8_group_id, xc_state, atu8_group_spec, sg_created_at) => Protobuf() // ...
    .b(atu8_group_id) // GroupID group_id = 1
    .v(xc_state) // State state = 2
    .b(atu8_group_spec) // GroupSpec group_spec = 3
    .g(sg_created_at) // int32 created_at = 4
    .o;
/**
 * Decodes a protobuf Group message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroup}
 */
export const decodeAkashDeploymentGroup = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 3], [decodeAkashDeploymentGroupID, 0, decodeAkashDeploymentGroupSpec]);
/**
 * Destructures the fields of a {@link AkashDeploymentGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id -
 *   - 1: state -
 *   - 2: group_spec -
 *   - 3: created_at -
 */
export const destructAkashDeploymentGroup = (g_struct) => [g_struct.group_id, g_struct.state, g_struct.group_spec, g_struct.created_at];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP = '/akash.deployment.v1beta2.Group';
/**
 * Protobuf enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_invalid = 0;
/**
 * JSON enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **invalid** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_invalid = 'GroupStateInvalid';
/**
 * Protobuf enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_open = 1;
/**
 * JSON enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **open** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_open = 'GroupOpen';
/**
 * Protobuf enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **paused** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_paused = 2;
/**
 * JSON enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **paused** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_paused = 'GroupPaused';
/**
 * Protobuf enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **insufficient_funds** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_insufficient_funds = 3;
/**
 * JSON enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **insufficient_funds** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_insufficient_funds = 'GroupInsufficientFunds';
/**
 * Protobuf enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link ProtoEnumAkashDeploymentGroupState}
 */
export const XC_PROTO_AKASH_DEPLOYMENT_GROUP_closed = 4;
/**
 * JSON enum value for `akash.deployment.v1beta2.Group.State`.
 *
 * **closed** -
 *
 * Belongs to enum type {@link JsonEnumAkashDeploymentGroupState}
 */
export const SI_JSON_AKASH_DEPLOYMENT_GROUP_closed = 'GroupClosed';
/**
 * Maps a protobuf enum int value for `akash.deployment.v1beta2.Group.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAkashDeploymentGroupState = {
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_invalid]: SI_JSON_AKASH_DEPLOYMENT_GROUP_invalid,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_open]: SI_JSON_AKASH_DEPLOYMENT_GROUP_open,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_paused]: SI_JSON_AKASH_DEPLOYMENT_GROUP_paused,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_insufficient_funds]: SI_JSON_AKASH_DEPLOYMENT_GROUP_insufficient_funds,
    [XC_PROTO_AKASH_DEPLOYMENT_GROUP_closed]: SI_JSON_AKASH_DEPLOYMENT_GROUP_closed,
};
/**
 * Maps a JSON enum string value for `akash.deployment.v1beta2.Group.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAkashDeploymentGroupState = {
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_invalid]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_invalid,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_open]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_open,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_paused]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_paused,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_insufficient_funds]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_insufficient_funds,
    [SI_JSON_AKASH_DEPLOYMENT_GROUP_closed]: XC_PROTO_AKASH_DEPLOYMENT_GROUP_closed,
};
//# sourceMappingURL=group.js.map