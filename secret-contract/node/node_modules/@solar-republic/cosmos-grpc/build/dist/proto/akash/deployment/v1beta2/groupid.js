import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `GroupID` protobuf message: stores owner, deployment sequence number and group sequence number
 * @param sa_owner - `owner`:
 * @param sg_dseq - `dseq`:
 * @param n_gseq - `gseq`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentGroupID = (sa_owner, sg_dseq, n_gseq) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_dseq) // uint64 dseq = 2
    .v(n_gseq) // uint32 gseq = 3
    .o;
/**
 * Decodes a protobuf GroupID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentGroupID}
 */
export const decodeAkashDeploymentGroupID = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1]);
/**
 * Destructures the fields of a {@link AkashDeploymentGroupID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: dseq -
 *   - 2: gseq -
 */
export const destructAkashDeploymentGroupID = (g_struct) => [g_struct.owner, g_struct.dseq, g_struct.gseq];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_GROUP_I_D = '/akash.deployment.v1beta2.GroupID';
//# sourceMappingURL=groupid.js.map