/// <reference types="node" />
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashDeploymentDeploymentFilters, DecodedAkashDeploymentDeploymentFilters, AkashDeploymentDeploymentID, DecodedAkashDeploymentDeploymentID, AkashDeploymentDeployment, DecodedAkashDeploymentDeployment } from './deployment.js';
import type { AkashDeploymentGroup, DecodedAkashDeploymentGroup } from './group.js';
import type { AkashDeploymentGroupID, DecodedAkashDeploymentGroupID } from './groupid.js';
import type { AkashEscrowAccount, DecodedAkashEscrowAccount } from '../../escrow/v1beta2/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
export type EncodedAkashDeploymentQueryDeploymentsRequest = Encoded<'/akash.deployment.v1beta2.QueryDeploymentsRequest'>;
export type EncodedAkashDeploymentQueryDeploymentsResponse = Encoded<'/akash.deployment.v1beta2.QueryDeploymentsResponse'>;
export type EncodedAkashDeploymentQueryDeploymentRequest = Encoded<'/akash.deployment.v1beta2.QueryDeploymentRequest'>;
export type EncodedAkashDeploymentQueryDeploymentResponse = Encoded<'/akash.deployment.v1beta2.QueryDeploymentResponse'>;
export type EncodedAkashDeploymentQueryGroupRequest = Encoded<'/akash.deployment.v1beta2.QueryGroupRequest'>;
export type EncodedAkashDeploymentQueryGroupResponse = Encoded<'/akash.deployment.v1beta2.QueryGroupResponse'>;
/**
 * Queries deployments
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_filters -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: deployments - the 'deployments' response property
 *   - 1: pagination - the 'deployments' response property
 */
export declare const queryAkashDeploymentDeployments: (z_req: string | ({
    origin: string;
} & RequestInit), g_filters?: Opt<AkashDeploymentDeploymentFilters>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AkashDeploymentQueryDeploymentsResponse>>;
/**
 * Queries deployment details
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_id -
 * @returns a tuple where:
 *   - 0: deployment - the 'deployment' response property
 *   - 1: groups - the 'deployment' response property
 *   - 2: escrow_account - the 'deployment' response property
 */
export declare const queryAkashDeploymentDeployment: (z_req: string | ({
    origin: string;
} & RequestInit), g_id?: Opt<AkashDeploymentDeploymentID>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AkashDeploymentQueryDeploymentResponse>>;
/**
 * Queries group details
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_id -
 * @returns a tuple where:
 *   - 0: group - the 'group' response property
 */
export declare const queryAkashDeploymentGroup: (z_req: string | ({
    origin: string;
} & RequestInit), g_id?: Opt<AkashDeploymentGroupID>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AkashDeploymentQueryGroupResponse>>;
/**
 * Encodes a `QueryDeploymentsRequest` protobuf message: request type for the Query/Deployments RPC method
 * @param g_filters - `filters`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentQueryDeploymentsRequest: (atu8_filters?: Opt<Encoded<'/akash.deployment.v1beta2.DeploymentFilters'>>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedAkashDeploymentQueryDeploymentsRequest;
/**
 * Encodes a `QueryDeploymentsResponse` protobuf message: response type for the Query/Deployments RPC method
 * @param a_deployments - `deployments`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentQueryDeploymentsResponse: (a_deployments?: Opt<Encoded<'/akash.deployment.v1beta2.QueryDeploymentResponse'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedAkashDeploymentQueryDeploymentsResponse;
/**
 * Encodes a `QueryDeploymentRequest` protobuf message: request type for the Query/Deployment RPC method
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentQueryDeploymentRequest: (atu8_id?: Opt<Encoded<'/akash.deployment.v1beta2.DeploymentID'>>) => EncodedAkashDeploymentQueryDeploymentRequest;
/**
 * Encodes a `QueryDeploymentResponse` protobuf message: response type for the Query/Deployment RPC method
 * @param g_deployment - `deployment`:
 * @param a_groups - `groups`:
 * @param g_escrow_account - `escrow_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentQueryDeploymentResponse: (atu8_deployment?: Opt<Encoded<'/akash.deployment.v1beta2.Deployment'>>, a_groups?: Opt<Encoded<'/akash.deployment.v1beta2.Group'>[]>, atu8_escrow_account?: Opt<Encoded<'/akash.escrow.v1beta2.Account'>>) => EncodedAkashDeploymentQueryDeploymentResponse;
/**
 * Encodes a `QueryGroupRequest` protobuf message: request type for the Query/Group RPC method
 * @param g_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentQueryGroupRequest: (atu8_id?: Opt<Encoded<'/akash.deployment.v1beta2.GroupID'>>) => EncodedAkashDeploymentQueryGroupRequest;
/**
 * Encodes a `QueryGroupResponse` protobuf message: response type for the Query/Group RPC method
 * @param g_group - `group`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentQueryGroupResponse: (atu8_group?: Opt<Encoded<'/akash.deployment.v1beta2.Group'>>) => EncodedAkashDeploymentQueryGroupResponse;
/**
 * A decoded protobuf QueryDeploymentsRequest message
 *
 * Tuple where:
 *   - 0: filters -
 *   - 1: pagination -
 */
export type DecodedAkashDeploymentQueryDeploymentsRequest = [
    a_filters?: DecodedAkashDeploymentDeploymentFilters,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryDeploymentsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentsRequest}
 */
export declare const decodeAkashDeploymentQueryDeploymentsRequest: (atu8_payload: Uint8Array) => DecodedAkashDeploymentQueryDeploymentsRequest;
/**
 * A decoded protobuf QueryDeployments message
 *
 * Tuple where:
 *   - 0: deployments -
 *   - 1: pagination -
 */
export type DecodedAkashDeploymentQueryDeploymentsResponse = [
    a_deployments?: DecodedAkashDeploymentQueryDeploymentResponse[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryDeployments message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentsResponse}
 */
export declare const decodeAkashDeploymentQueryDeploymentsResponse: (atu8_payload: Uint8Array) => DecodedAkashDeploymentQueryDeploymentsResponse;
/**
 * A decoded protobuf QueryDeploymentRequest message
 *
 * Alias for: id -
 */
export type DecodedAkashDeploymentQueryDeploymentRequest = [
    a_id?: DecodedAkashDeploymentDeploymentID
];
/**
 * Decodes a protobuf QueryDeploymentRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentRequest}
 */
export declare const decodeAkashDeploymentQueryDeploymentRequest: (atu8_payload: Uint8Array) => DecodedAkashDeploymentQueryDeploymentRequest;
/**
 * A decoded protobuf QueryDeployment message
 *
 * Tuple where:
 *   - 0: deployment -
 *   - 1: groups -
 *   - 2: escrow_account -
 */
export type DecodedAkashDeploymentQueryDeploymentResponse = [
    a_deployment?: DecodedAkashDeploymentDeployment,
    a_groups?: DecodedAkashDeploymentGroup[],
    a_escrow_account?: DecodedAkashEscrowAccount
];
/**
 * Decodes a protobuf QueryDeployment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryDeploymentResponse}
 */
export declare const decodeAkashDeploymentQueryDeploymentResponse: (atu8_payload: Uint8Array) => DecodedAkashDeploymentQueryDeploymentResponse;
/**
 * A decoded protobuf QueryGroupRequest message
 *
 * Alias for: id -
 */
export type DecodedAkashDeploymentQueryGroupRequest = [
    a_id?: DecodedAkashDeploymentGroupID
];
/**
 * Decodes a protobuf QueryGroupRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryGroupRequest}
 */
export declare const decodeAkashDeploymentQueryGroupRequest: (atu8_payload: Uint8Array) => DecodedAkashDeploymentQueryGroupRequest;
/**
 * A decoded protobuf QueryGroup message
 *
 * Alias for: group -
 */
export type DecodedAkashDeploymentQueryGroupResponse = [
    a_group?: DecodedAkashDeploymentGroup
];
/**
 * Decodes a protobuf QueryGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentQueryGroupResponse}
 */
export declare const decodeAkashDeploymentQueryGroupResponse: (atu8_payload: Uint8Array) => DecodedAkashDeploymentQueryGroupResponse;
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: filters -
 *   - 1: pagination -
 */
export declare const destructAkashDeploymentQueryDeploymentsRequest: (g_struct: AkashDeploymentQueryDeploymentsRequest) => [filters?: AkashDeploymentDeploymentFilters, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENTS_REQUEST = "/akash.deployment.v1beta2.QueryDeploymentsRequest";
/**
 * JSON serialization of `akash.deployment.v1beta2.QueryDeploymentsRequest` - request type for the Query/Deployments RPC method
 */
export type AkashDeploymentQueryDeploymentsRequest = {
    filters?: AkashDeploymentDeploymentFilters | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployments -
 *   - 1: pagination -
 */
export declare const destructAkashDeploymentQueryDeploymentsResponse: (g_struct: AkashDeploymentQueryDeploymentsResponse) => [deployments?: AkashDeploymentQueryDeploymentResponse[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENTS_RESPONSE = "/akash.deployment.v1beta2.QueryDeploymentsResponse";
/**
 * JSON serialization of `akash.deployment.v1beta2.QueryDeploymentsResponse` - response type for the Query/Deployments RPC method
 */
export type AkashDeploymentQueryDeploymentsResponse = {
    deployments?: AkashDeploymentQueryDeploymentResponse[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployment -
 *   - 1: groups -
 *   - 2: escrow_account -
 */
export declare const destructAkashDeploymentQueryDeploymentResponse: (g_struct: AkashDeploymentQueryDeploymentResponse) => [deployment?: AkashDeploymentDeployment, groups?: AkashDeploymentGroup[], escrow_account?: AkashEscrowAccount];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENT_RESPONSE = "/akash.deployment.v1beta2.QueryDeploymentResponse";
/**
 * JSON serialization of `akash.deployment.v1beta2.QueryDeploymentResponse` - response type for the Query/Deployment RPC method
 */
export type AkashDeploymentQueryDeploymentResponse = {
    deployment?: AkashDeploymentDeployment | undefined;
    groups?: AkashDeploymentGroup[] | undefined;
    escrow_account?: AkashEscrowAccount | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentQueryDeploymentRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAkashDeploymentQueryDeploymentRequest: (g_struct: AkashDeploymentQueryDeploymentRequest) => [id?: AkashDeploymentDeploymentID];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_DEPLOYMENT_REQUEST = "/akash.deployment.v1beta2.QueryDeploymentRequest";
/**
 * JSON serialization of `akash.deployment.v1beta2.QueryDeploymentRequest` - request type for the Query/Deployment RPC method
 */
export type AkashDeploymentQueryDeploymentRequest = {
    id?: AkashDeploymentDeploymentID | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentQueryGroupRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAkashDeploymentQueryGroupRequest: (g_struct: AkashDeploymentQueryGroupRequest) => [id?: AkashDeploymentGroupID];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_GROUP_REQUEST = "/akash.deployment.v1beta2.QueryGroupRequest";
/**
 * JSON serialization of `akash.deployment.v1beta2.QueryGroupRequest` - request type for the Query/Group RPC method
 */
export type AkashDeploymentQueryGroupRequest = {
    id?: AkashDeploymentGroupID | undefined;
};
/**
 * Destructures the fields of a {@link AkashDeploymentQueryGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group -
 */
export declare const destructAkashDeploymentQueryGroupResponse: (g_struct: AkashDeploymentQueryGroupResponse) => [group?: AkashDeploymentGroup];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_QUERY_GROUP_RESPONSE = "/akash.deployment.v1beta2.QueryGroupResponse";
/**
 * JSON serialization of `akash.deployment.v1beta2.QueryGroupResponse` - response type for the Query/Group RPC method
 */
export type AkashDeploymentQueryGroupResponse = {
    group?: AkashDeploymentGroup | undefined;
};
