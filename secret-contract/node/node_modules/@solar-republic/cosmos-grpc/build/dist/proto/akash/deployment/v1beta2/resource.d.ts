import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashBaseResourceUnits, DecodedAkashBaseResourceUnits } from '../../base/v1beta2/resourceunits.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAkashDeploymentResource = Encoded<'/akash.deployment.v1beta2.Resource'>;
/**
 * Encodes a `Resource` protobuf message: stores unit, total count and price of resource
 * @param g_resources - `resources`:
 * @param n_count - `count`:
 * @param g_price - `price`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentResource: (atu8_resources?: Opt<Encoded<'/akash.base.v1beta2.ResourceUnits'>>, n_count?: Opt<number>, atu8_price?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>>) => EncodedAkashDeploymentResource;
/**
 * A decoded protobuf Resource message
 *
 * Tuple where:
 *   - 0: resources -
 *   - 1: count -
 *   - 2: price -
 */
export type DecodedAkashDeploymentResource = [
    a_resources?: DecodedAkashBaseResourceUnits,
    n_count?: number,
    a_price?: DecodedCosmosBaseDecCoin
];
/**
 * Decodes a protobuf Resource message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentResource}
 */
export declare const decodeAkashDeploymentResource: (atu8_payload: Uint8Array) => DecodedAkashDeploymentResource;
/**
 * Destructures the fields of a {@link AkashDeploymentResource} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: resources -
 *   - 1: count -
 *   - 2: price -
 */
export declare const destructAkashDeploymentResource: (g_struct: AkashDeploymentResource) => [resources?: AkashBaseResourceUnits, count?: number, price?: CosmosBaseDecCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_RESOURCE = "/akash.deployment.v1beta2.Resource";
/**
 * JSON serialization of `akash.deployment.v1beta2.Resource` - stores unit, total count and price of resource
 */
export type AkashDeploymentResource = {
    resources?: AkashBaseResourceUnits | undefined;
    count?: number | undefined;
    price?: CosmosBaseDecCoin | undefined;
};
