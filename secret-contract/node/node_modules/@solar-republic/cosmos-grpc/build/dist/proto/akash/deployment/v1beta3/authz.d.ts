import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type AnyAkashDeploymentDepositDeploymentAuthorization = Encoded<'Authorization'>;
export type EncodedAkashDeploymentDepositDeploymentAuthorization = Encoded<'/akash.deployment.v1beta3.DepositDeploymentAuthorization' | 'Authorization'>;
/**
 * Encodes a `DepositDeploymentAuthorization` protobuf message wrapped in the `Any` container: allows the grantee to deposit up to spend_limit coins from the granter's account for a deployment.
 * @param a_spend_limit - `spend_limit`: SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyDepositDeploymentAuthorization: (a_spend_limit?: Opt<SlimCoin>) => AnyAkashDeploymentDepositDeploymentAuthorization;
/**
 * Encodes a `DepositDeploymentAuthorization` protobuf message: allows the grantee to deposit up to spend_limit coins from the granter's account for a deployment.
 * @param a_spend_limit - `spend_limit`: SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentDepositDeploymentAuthorization: (a_spend_limit?: Opt<SlimCoin>) => EncodedAkashDeploymentDepositDeploymentAuthorization;
/**
 * A decoded protobuf DepositDeploymentAuthorization message
 *
 * Alias for: spend_limit - SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 */
export type DecodedAkashDeploymentDepositDeploymentAuthorization = [
    a_spend_limit?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf DepositDeploymentAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentDepositDeploymentAuthorization}
 */
export declare const decodeAkashDeploymentDepositDeploymentAuthorization: (atu8_payload: Uint8Array) => DecodedAkashDeploymentDepositDeploymentAuthorization;
/**
 * Destructures the fields of a {@link AkashDeploymentDepositDeploymentAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: spend_limit - SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 */
export declare const destructAkashDeploymentDepositDeploymentAuthorization: (g_struct: AkashDeploymentDepositDeploymentAuthorization) => [spend_limit?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_DEPOSIT_DEPLOYMENT_AUTHORIZATION = "/akash.deployment.v1beta3.DepositDeploymentAuthorization";
/**
 * JSON serialization of `akash.deployment.v1beta3.DepositDeploymentAuthorization` - allows the grantee to deposit up to spend_limit coins from the granter's account for a deployment.
 */
export type AkashDeploymentDepositDeploymentAuthorization = {
    spend_limit?: CosmosBaseCoin | undefined;
};
