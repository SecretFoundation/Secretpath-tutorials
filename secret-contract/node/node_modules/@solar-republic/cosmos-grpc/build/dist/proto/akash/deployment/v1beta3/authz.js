import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, any, coin } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `DepositDeploymentAuthorization` protobuf message wrapped in the `Any` container: allows the grantee to deposit up to spend_limit coins from the granter's account for a deployment.
 * @param a_spend_limit - `spend_limit`: SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyDepositDeploymentAuthorization = (a_spend_limit) => any('/akash.deployment.v1beta3.DepositDeploymentAuthorization', Protobuf() // ...
    .b(coin(a_spend_limit)) // Coin spend_limit = 1
    .o);
/**
 * Encodes a `DepositDeploymentAuthorization` protobuf message: allows the grantee to deposit up to spend_limit coins from the granter's account for a deployment.
 * @param a_spend_limit - `spend_limit`: SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashDeploymentDepositDeploymentAuthorization = (a_spend_limit) => Protobuf() // ...
    .b(coin(a_spend_limit)) // Coin spend_limit = 1
    .o;
/**
 * Decodes a protobuf DepositDeploymentAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentDepositDeploymentAuthorization}
 */
export const decodeAkashDeploymentDepositDeploymentAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Destructures the fields of a {@link AkashDeploymentDepositDeploymentAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: spend_limit - SpendLimit is the amount the grantee is authorized to spend from the granter's account for the purpose of deployment.
 */
export const destructAkashDeploymentDepositDeploymentAuthorization = (g_struct) => [g_struct.spend_limit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_DEPOSIT_DEPLOYMENT_AUTHORIZATION = '/akash.deployment.v1beta3.DepositDeploymentAuthorization';
//# sourceMappingURL=authz.js.map