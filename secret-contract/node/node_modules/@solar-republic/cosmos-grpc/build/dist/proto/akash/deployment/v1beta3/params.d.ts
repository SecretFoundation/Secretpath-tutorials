import type { SlimCoin } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAkashDeploymentParams = Encoded<'/akash.deployment.v1beta3.Params'>;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/deployment package
 * @param a_min_deposits - `min_deposits`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashDeploymentParams: (a_min_deposits?: Opt<SlimCoin[]>) => EncodedAkashDeploymentParams;
/**
 * A decoded protobuf Params message
 *
 * Alias for: min_deposits -
 */
export type DecodedAkashDeploymentParams = [
    a_min_deposits?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashDeploymentParams}
 */
export declare const decodeAkashDeploymentParams: (atu8_payload: Uint8Array) => DecodedAkashDeploymentParams;
/**
 * Destructures the fields of a {@link AkashDeploymentParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_deposits -
 */
export declare const destructAkashDeploymentParams: (g_struct: AkashDeploymentParams) => [min_deposits?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_DEPLOYMENT_PARAMS = "/akash.deployment.v1beta3.Params";
/**
 * JSON serialization of `akash.deployment.v1beta3.Params` - defines the parameters for the x/deployment package
 */
export type AkashDeploymentParams = {
    min_deposits?: CosmosBaseCoin[] | undefined;
};
