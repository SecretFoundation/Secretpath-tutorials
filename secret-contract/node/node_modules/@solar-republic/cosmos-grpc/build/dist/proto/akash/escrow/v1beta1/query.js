import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeAkashEscrowAccount, decodeAkashEscrowPayment } from './types.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
const SR_LCD_AKASH_ESCROW_QUERY = '/akash/escrow/v1beta1/types/';
/**
 * Buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE buf:lint:ignore RPC_RESPONSE_STANDARD_NAME Accounts queries all accounts
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_scope -
 * @param s_xid -
 * @param sa_owner -
 * @param s_state -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: accounts - the 'accounts' response property
 *   - 1: pagination - the 'accounts' response property
 */
export const queryAkashEscrowAccounts = restful_grpc((s_scope, s_xid, sa_owner, s_state, g_pagination) => [SR_LCD_AKASH_ESCROW_QUERY + 'accounts/list', {
        scope: s_scope,
        xid: s_xid,
        owner: sa_owner,
        state: s_state,
        pagination: g_pagination,
    }]);
/**
 * Buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE buf:lint:ignore RPC_RESPONSE_STANDARD_NAME Payments queries all payments
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_scope -
 * @param s_xid -
 * @param s_id -
 * @param sa_owner -
 * @param s_state -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: payments - the 'payments' response property
 *   - 1: pagination - the 'payments' response property
 */
export const queryAkashEscrowPayments = restful_grpc((s_scope, s_xid, s_id, sa_owner, s_state, g_pagination) => [SR_LCD_AKASH_ESCROW_QUERY + 'payments/list', {
        scope: s_scope,
        xid: s_xid,
        id: s_id,
        owner: sa_owner,
        state: s_state,
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryAccountsRequest` protobuf message: QueryAccountRequest is request type for the Query/Account RPC method
 * @param s_scope - `scope`:
 * @param s_xid - `xid`:
 * @param sa_owner - `owner`:
 * @param s_state - `state`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowQueryAccountsRequest = (s_scope, s_xid, sa_owner, s_state, atu8_pagination) => Protobuf() // ...
    .s(s_scope) // string scope = 1
    .s(s_xid) // string xid = 2
    .s(sa_owner) // string owner = 3
    .s(s_state) // string state = 4
    .b(atu8_pagination) // PageRequest pagination = 5
    .o;
/**
 * Encodes a `QueryAccountsResponse` protobuf message: QueryProvidersResponse is response type for the Query/Providers RPC method
 * @param a_accounts - `accounts`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowQueryAccountsResponse = (a_accounts, atu8_pagination) => Protobuf() // ...
    .B(a_accounts) // Account[] accounts = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryPaymentsRequest` protobuf message: QueryPaymentRequest is request type for the Query/Payment RPC method
 * @param s_scope - `scope`:
 * @param s_xid - `xid`:
 * @param s_id - `id`:
 * @param sa_owner - `owner`:
 * @param s_state - `state`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowQueryPaymentsRequest = (s_scope, s_xid, s_id, sa_owner, s_state, atu8_pagination) => Protobuf() // ...
    .s(s_scope) // string scope = 1
    .s(s_xid) // string xid = 2
    .s(s_id) // string id = 3
    .s(sa_owner) // string owner = 4
    .s(s_state) // string state = 5
    .b(atu8_pagination) // PageRequest pagination = 6
    .o;
/**
 * Encodes a `QueryPaymentsResponse` protobuf message: QueryProvidersResponse is response type for the Query/Providers RPC method
 * @param a_payments - `payments`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAkashEscrowQueryPaymentsResponse = (a_payments, atu8_pagination) => Protobuf() // ...
    .B(a_payments) // Payment[] payments = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Decodes a protobuf QueryAccountsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowQueryAccountsRequest}
 */
export const decodeAkashEscrowQueryAccountsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 1], [0, 0, 0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryAccounts message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowQueryAccountsResponse}
 */
export const decodeAkashEscrowQueryAccountsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeAkashEscrowAccount, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryPaymentsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowQueryPaymentsRequest}
 */
export const decodeAkashEscrowQueryPaymentsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5, 1], [0, 0, 0, 0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryPayments message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashEscrowQueryPaymentsResponse}
 */
export const decodeAkashEscrowQueryPaymentsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeAkashEscrowPayment, decodeCosmosBaseQueryPageResponse]);
/**
 * Destructures the fields of a {@link AkashEscrowQueryAccountsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: scope -
 *   - 1: xid -
 *   - 2: owner -
 *   - 3: state -
 *   - 4: pagination -
 */
export const destructAkashEscrowQueryAccountsRequest = (g_struct) => [g_struct.scope, g_struct.xid, g_struct.owner, g_struct.state, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_QUERY_ACCOUNTS_REQUEST = '/akash.escrow.v1beta1.QueryAccountsRequest';
/**
 * Destructures the fields of a {@link AkashEscrowQueryAccountsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: accounts -
 *   - 1: pagination -
 */
export const destructAkashEscrowQueryAccountsResponse = (g_struct) => [g_struct.accounts, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_QUERY_ACCOUNTS_RESPONSE = '/akash.escrow.v1beta1.QueryAccountsResponse';
/**
 * Destructures the fields of a {@link AkashEscrowQueryPaymentsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: scope -
 *   - 1: xid -
 *   - 2: id -
 *   - 3: owner -
 *   - 4: state -
 *   - 5: pagination -
 */
export const destructAkashEscrowQueryPaymentsRequest = (g_struct) => [g_struct.scope, g_struct.xid, g_struct.id, g_struct.owner, g_struct.state, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_QUERY_PAYMENTS_REQUEST = '/akash.escrow.v1beta1.QueryPaymentsRequest';
/**
 * Destructures the fields of a {@link AkashEscrowQueryPaymentsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: payments -
 *   - 1: pagination -
 */
export const destructAkashEscrowQueryPaymentsResponse = (g_struct) => [g_struct.payments, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AKASH_ESCROW_QUERY_PAYMENTS_RESPONSE = '/akash.escrow.v1beta1.QueryPaymentsResponse';
//# sourceMappingURL=query.js.map