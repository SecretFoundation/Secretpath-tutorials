import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAkashGovDepositParams = Encoded<'/akash.gov.v1beta3.DepositParams'>;
/**
 * Encodes a `DepositParams` protobuf message: defines the parameters for the x/gov module
 * @param atu8_min_initial_deposit_rate - `min_initial_deposit_rate`: minimum % of TotalDeposit author of the proposal must put in order for proposal tx to be committed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashGovDepositParams: (atu8_min_initial_deposit_rate?: Opt<Uint8Array>) => EncodedAkashGovDepositParams;
/**
 * A decoded protobuf DepositParams message
 *
 * Alias for: min_initial_deposit_rate - minimum % of TotalDeposit author of the proposal must put in order for proposal tx to be committed
 */
export type DecodedAkashGovDepositParams = [
    atu8_min_initial_deposit_rate?: Uint8Array
];
/**
 * Decodes a protobuf DepositParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashGovDepositParams}
 */
export declare const decodeAkashGovDepositParams: (atu8_payload: Uint8Array) => DecodedAkashGovDepositParams;
/**
 * Destructures the fields of a {@link AkashGovDepositParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_initial_deposit_rate - minimum % of TotalDeposit author of the proposal must put in order for proposal tx to be committed
 */
export declare const destructAkashGovDepositParams: (g_struct: AkashGovDepositParams) => [min_initial_deposit_rate?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_GOV_DEPOSIT_PARAMS = "/akash.gov.v1beta3.DepositParams";
/**
 * JSON serialization of `akash.gov.v1beta3.DepositParams` - defines the parameters for the x/gov module
 */
export type AkashGovDepositParams = {
    min_initial_deposit_rate?: CwBase64 | undefined;
};
