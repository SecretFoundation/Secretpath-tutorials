/// <reference types="node" />
import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AkashProviderProvider, DecodedAkashProviderProvider } from './provider.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
export type EncodedAkashProviderQueryProvidersRequest = Encoded<'/akash.provider.v1beta3.QueryProvidersRequest'>;
export type EncodedAkashProviderQueryProvidersResponse = Encoded<'/akash.provider.v1beta3.QueryProvidersResponse'>;
export type EncodedAkashProviderQueryProviderRequest = Encoded<'/akash.provider.v1beta3.QueryProviderRequest'>;
export type EncodedAkashProviderQueryProviderResponse = Encoded<'/akash.provider.v1beta3.QueryProviderResponse'>;
/**
 * Queries providers
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: providers - the 'providers' response property
 *   - 1: pagination - the 'providers' response property
 */
export declare const queryAkashProviderProviders: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AkashProviderQueryProvidersResponse>>;
/**
 * Queries provider details
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @returns a tuple where:
 *   - 0: provider - the 'provider' response property
 */
export declare const queryAkashProviderProvider: (z_req: string | ({
    origin: string;
} & RequestInit), sa_owner?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AkashProviderQueryProviderResponse>>;
/**
 * Encodes a `QueryProvidersRequest` protobuf message: request type for the Query/Providers RPC method
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashProviderQueryProvidersRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedAkashProviderQueryProvidersRequest;
/**
 * Encodes a `QueryProvidersResponse` protobuf message: response type for the Query/Providers RPC method
 * @param a_providers - `providers`:
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashProviderQueryProvidersResponse: (a_providers?: Opt<Encoded<'/akash.provider.v1beta3.Provider'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedAkashProviderQueryProvidersResponse;
/**
 * Encodes a `QueryProviderRequest` protobuf message: request type for the Query/Provider RPC method
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashProviderQueryProviderRequest: (sa_owner?: Opt<WeakAccountAddr>) => EncodedAkashProviderQueryProviderRequest;
/**
 * Encodes a `QueryProviderResponse` protobuf message: response type for the Query/Provider RPC method
 * @param g_provider - `provider`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAkashProviderQueryProviderResponse: (atu8_provider?: Opt<Encoded<'/akash.provider.v1beta3.Provider'>>) => EncodedAkashProviderQueryProviderResponse;
/**
 * A decoded protobuf QueryProvidersRequest message
 *
 * Alias for: pagination -
 */
export type DecodedAkashProviderQueryProvidersRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryProvidersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProvidersRequest}
 */
export declare const decodeAkashProviderQueryProvidersRequest: (atu8_payload: Uint8Array) => DecodedAkashProviderQueryProvidersRequest;
/**
 * A decoded protobuf QueryProviders message
 *
 * Tuple where:
 *   - 0: providers -
 *   - 1: pagination -
 */
export type DecodedAkashProviderQueryProvidersResponse = [
    a_providers?: DecodedAkashProviderProvider[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryProviders message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProvidersResponse}
 */
export declare const decodeAkashProviderQueryProvidersResponse: (atu8_payload: Uint8Array) => DecodedAkashProviderQueryProvidersResponse;
/**
 * A decoded protobuf QueryProviderRequest message
 *
 * Alias for: owner -
 */
export type DecodedAkashProviderQueryProviderRequest = [
    sa_owner?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryProviderRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProviderRequest}
 */
export declare const decodeAkashProviderQueryProviderRequest: (atu8_payload: Uint8Array) => DecodedAkashProviderQueryProviderRequest;
/**
 * A decoded protobuf QueryProvider message
 *
 * Alias for: provider -
 */
export type DecodedAkashProviderQueryProviderResponse = [
    a_provider?: DecodedAkashProviderProvider
];
/**
 * Decodes a protobuf QueryProvider message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAkashProviderQueryProviderResponse}
 */
export declare const decodeAkashProviderQueryProviderResponse: (atu8_payload: Uint8Array) => DecodedAkashProviderQueryProviderResponse;
/**
 * Destructures the fields of a {@link AkashProviderQueryProvidersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination -
 */
export declare const destructAkashProviderQueryProvidersRequest: (g_struct: AkashProviderQueryProvidersRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDERS_REQUEST = "/akash.provider.v1beta3.QueryProvidersRequest";
/**
 * JSON serialization of `akash.provider.v1beta3.QueryProvidersRequest` - request type for the Query/Providers RPC method
 */
export type AkashProviderQueryProvidersRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link AkashProviderQueryProvidersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: providers -
 *   - 1: pagination -
 */
export declare const destructAkashProviderQueryProvidersResponse: (g_struct: AkashProviderQueryProvidersResponse) => [providers?: AkashProviderProvider[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDERS_RESPONSE = "/akash.provider.v1beta3.QueryProvidersResponse";
/**
 * JSON serialization of `akash.provider.v1beta3.QueryProvidersResponse` - response type for the Query/Providers RPC method
 */
export type AkashProviderQueryProvidersResponse = {
    providers?: AkashProviderProvider[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link AkashProviderQueryProviderRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 */
export declare const destructAkashProviderQueryProviderRequest: (g_struct: AkashProviderQueryProviderRequest) => [owner?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDER_REQUEST = "/akash.provider.v1beta3.QueryProviderRequest";
/**
 * JSON serialization of `akash.provider.v1beta3.QueryProviderRequest` - request type for the Query/Provider RPC method
 */
export type AkashProviderQueryProviderRequest = {
    owner?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link AkashProviderQueryProviderResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: provider -
 */
export declare const destructAkashProviderQueryProviderResponse: (g_struct: AkashProviderQueryProviderResponse) => [provider?: AkashProviderProvider];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AKASH_PROVIDER_QUERY_PROVIDER_RESPONSE = "/akash.provider.v1beta3.QueryProviderResponse";
/**
 * JSON serialization of `akash.provider.v1beta3.QueryProviderResponse` - response type for the Query/Provider RPC method
 */
export type AkashProviderQueryProviderResponse = {
    provider?: AkashProviderProvider | undefined;
};
