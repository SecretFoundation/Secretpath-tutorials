import { bech32_decode } from '@solar-republic/crypto';
import { duration_to_json } from '../../../../api/json.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
const SR_LCD_AXELAR_AXELARNET_MSGSERVICE = '/axelar/axelarnet/';
const SR_LCD_AXELAR_AXELARNET_QUERYSERVICE = '/axelar/axelarnet/v1beta1/';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param sa_recipient_addr -
 * @param s_recipient_chain -
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: deposit_addr - the 'deposit_addr' response property
 */
export const submitAxelarAxelarnetLink = restful_grpc((sa_sender, sa_recipient_addr, s_recipient_chain, s_asset) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'link', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        recipient_addr: sa_recipient_addr,
        recipient_chain: s_recipient_chain,
        asset: s_asset,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_deposit_address -
 * @param s_denom -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetConfirmDeposit = restful_grpc((sa_sender, atu8_deposit_address, s_denom) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'confirm_deposit', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        deposit_address: safe_bytes_to_base64(atu8_deposit_address),
        denom: s_denom,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetExecutePendingTransfers = restful_grpc(sa_sender => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'execute_pending_transfers', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param g_chain -
 * @param s_addr_prefix -
 * @param a_native_assets -
 * @param s_cosmos_chain - TODO: Rename this to `chain` after v1beta1 -> v1 version bump
 * @param s_ibc_path -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetAddCosmosBasedChain = restful_grpc((sa_sender, g_chain, s_addr_prefix, a_native_assets, s_cosmos_chain, s_ibc_path) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'add_cosmos_based_chain', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: g_chain,
        addr_prefix: s_addr_prefix,
        native_assets: a_native_assets,
        cosmos_chain: s_cosmos_chain,
        ibc_path: s_ibc_path,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param g_asset -
 * @param atu8_limit -
 * @param xt_window -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetRegisterAsset = restful_grpc((sa_sender, s_chain, g_asset, atu8_limit, xt_window) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'register_asset', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        asset: g_asset,
        limit: safe_bytes_to_base64(atu8_limit),
        window: duration_to_json(xt_window),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetRouteIBCTransfers = restful_grpc(sa_sender => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'route_ibc_transfers', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_fee_collector -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetRegisterFeeCollector = restful_grpc((sa_sender, atu8_fee_collector) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'register_fee_collector', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        fee_collector: safe_bytes_to_base64(atu8_fee_collector),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param sg_id -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetRetryIBCTransfer = restful_grpc((sa_sender, s_chain, sg_id) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'retry_ibc_transfer', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        id: sg_id,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_id -
 * @param atu8_payload -
 * @param atu8_feegranter -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetRouteMessage = restful_grpc((sa_sender, s_id, atu8_payload, atu8_feegranter) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'route_message', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        id: s_id,
        payload: safe_bytes_to_base64(atu8_payload),
        feegranter: safe_bytes_to_base64(atu8_feegranter),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param sa_contract -
 * @param atu8_payload -
 * @param g_fee -
 * @returns an empty tuple
 */
export const submitAxelarAxelarnetCallContract = restful_grpc((sa_sender, s_chain, sa_contract, atu8_payload, g_fee) => [SR_LCD_AXELAR_AXELARNET_MSGSERVICE + 'call_contract', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        contract_address: sa_contract,
        payload: safe_bytes_to_base64(atu8_payload),
        fee: g_fee,
    }], 1);
/**
 * Queries the pending ibc transfers for all chains
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: transfers_by_chain - the 'transfers_by_chain' response property
 */
export const queryAxelarAxelarnetPendingIBCTransferCount = restful_grpc(() => [SR_LCD_AXELAR_AXELARNET_QUERYSERVICE + 'ibc_transfer_count']);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryAxelarAxelarnetParams = restful_grpc(() => [SR_LCD_AXELAR_AXELARNET_QUERYSERVICE + 'params']);
//# sourceMappingURL=service.js.map