import { __UNDEFINED } from '@blake.regalia/belt';
import { bech32_decode } from '@solar-republic/crypto';
import { parse_duration } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarAxelarnetFee } from './types.js';
import { decodeAxelarNexusExportedChain, decodeAxelarNexusExportedAsset } from '../../nexus/exported/v1beta1/types.js';
/**
 * Encodes a `LinkRequest` protobuf message: MsgLink represents a message to link a cross-chain address to an Axelar address
 * @param sa_sender - `sender`:
 * @param sa_recipient_addr - `recipient_addr`:
 * @param s_recipient_chain - `recipient_chain`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetLinkRequest = (sa_sender, sa_recipient_addr, s_recipient_chain, s_asset) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(sa_recipient_addr) // string recipient_addr = 2
    .s(s_recipient_chain) // string recipient_chain = 3
    .s(s_asset) // string asset = 4
    .o;
/**
 * Encodes a `LinkResponse` protobuf message:
 * @param sa_deposit_addr - `deposit_addr`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetLinkResponse = (sa_deposit_addr) => Protobuf() // ...
    .s(sa_deposit_addr) // string deposit_addr = 1
    .o;
/**
 * Encodes a `ConfirmDepositRequest` protobuf message: MsgConfirmDeposit represents a deposit confirmation message
 * @param sa_sender - `sender`:
 * @param atu8_deposit_address - `deposit_address`:
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetConfirmDepositRequest = (sa_sender, atu8_deposit_address, s_denom) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_deposit_address, 4) // bytes deposit_address = 4
    .s(s_denom, 5) // string denom = 5
    .o;
/**
 * Encodes a `ConfirmDepositResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetConfirmDepositResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ExecutePendingTransfersRequest` protobuf message: MsgExecutePendingTransfers represents a message to trigger transfer all pending transfers
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetExecutePendingTransfersRequest = (sa_sender) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .o;
/**
 * Encodes a `ExecutePendingTransfersResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetExecutePendingTransfersResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RegisterIBCPathRequest` protobuf message: MSgRegisterIBCPath represents a message to register an IBC tracing path for a cosmos chain
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param s_path - `path`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRegisterIBCPathRequest = (sa_sender, s_chain, s_path) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(s_path) // string path = 3
    .o;
/**
 * Encodes a `RegisterIBCPathResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRegisterIBCPathResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `AddCosmosBasedChainRequest` protobuf message: MsgAddCosmosBasedChain represents a message to register a cosmos based chain to nexus
 * @param sa_sender - `sender`:
 * @param g_chain - `chain`:
 * @param s_addr_prefix - `addr_prefix`:
 * @param a_native_assets - `native_assets`:
 * @param s_cosmos_chain - `cosmos_chain`: TODO: Rename this to `chain` after v1beta1 -> v1 version bump
 * @param s_ibc_path - `ibc_path`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetAddCosmosBasedChainRequest = (sa_sender, atu8_chain, s_addr_prefix, a_native_assets, s_cosmos_chain, s_ibc_path) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_chain) // Chain chain = 2
    .s(s_addr_prefix) // string addr_prefix = 3
    .B(a_native_assets, 5) // Asset[] native_assets = 5
    .s(s_cosmos_chain, 6) // string cosmos_chain = 6
    .s(s_ibc_path, 7) // string ibc_path = 7
    .o;
/**
 * Encodes a `AddCosmosBasedChainResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetAddCosmosBasedChainResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RegisterAssetRequest` protobuf message: represents a message to register an asset to a cosmos based chain
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param g_asset - `asset`:
 * @param atu8_limit - `limit`:
 * @param xt_window - `window`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRegisterAssetRequest = (sa_sender, s_chain, atu8_asset, atu8_limit, xt_window) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_asset) // Asset asset = 3
    .b(atu8_limit) // bytes limit = 4
    .b(temporal(xt_window)) // Duration window = 5
    .o;
/**
 * Encodes a `RegisterAssetResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRegisterAssetResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RouteIBCTransfersRequest` protobuf message: represents a message to route pending transfers to cosmos based chains
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRouteIBCTransfersRequest = (sa_sender) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .o;
/**
 * Encodes a `RouteIBCTransfersResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRouteIBCTransfersResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RegisterFeeCollectorRequest` protobuf message: represents a message to register axelarnet fee collector account
 * @param sa_sender - `sender`:
 * @param atu8_fee_collector - `fee_collector`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRegisterFeeCollectorRequest = (sa_sender, atu8_fee_collector) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_fee_collector) // bytes fee_collector = 2
    .o;
/**
 * Encodes a `RegisterFeeCollectorResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRegisterFeeCollectorResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RetryIBCTransferRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param sg_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRetryIBCTransferRequest = (sa_sender, s_chain, sg_id) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .g(sg_id) // uint64 id = 3
    .o;
/**
 * Encodes a `RetryIBCTransferResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRetryIBCTransferResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RouteMessageRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_id - `id`:
 * @param atu8_payload - `payload`:
 * @param atu8_feegranter - `feegranter`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRouteMessageRequest = (sa_sender, s_id, atu8_payload, atu8_feegranter) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_id) // string id = 2
    .b(atu8_payload) // bytes payload = 3
    .b(atu8_feegranter) // bytes feegranter = 4
    .o;
/**
 * Encodes a `RouteMessageResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetRouteMessageResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `CallContractRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload - `payload`:
 * @param g_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetCallContractRequest = (sa_sender, s_chain, sa_contract, atu8_payload, atu8_fee) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(sa_contract) // string contract_address = 3
    .b(atu8_payload) // bytes payload = 4
    .b(atu8_fee) // Fee fee = 5
    .o;
/**
 * Encodes a `CallContractResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetCallContractResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf LinkRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetLinkRequest}
 */
export const decodeAxelarAxelarnetLinkRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 5]);
/**
 * Decodes a protobuf Link message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetLinkResponse}
 */
export const decodeAxelarAxelarnetLinkResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf ConfirmDepositRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarAxelarnetConfirmDepositRequest}
 */
export const decodeAxelarAxelarnetConfirmDepositRequest = ((atu8_payload, [sa_sender, , , atu8_deposit_address, s_denom] = decode_protobuf(atu8_payload, [1, 0, 0, 1, 5])) => [sa_sender, __UNDEFINED, __UNDEFINED, atu8_deposit_address, s_denom]);
/**
 * Decodes a protobuf ConfirmDeposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetConfirmDepositResponse}
 */
export const decodeAxelarAxelarnetConfirmDepositResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ExecutePendingTransfersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetExecutePendingTransfersRequest}
 */
export const decodeAxelarAxelarnetExecutePendingTransfersRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ExecutePendingTransfers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetExecutePendingTransfersResponse}
 */
export const decodeAxelarAxelarnetExecutePendingTransfersResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RegisterIBCPathRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRegisterIBCPathRequest}
 */
export const decodeAxelarAxelarnetRegisterIBCPathRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5]);
/**
 * Decodes a protobuf RegisterIBCPath message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRegisterIBCPathResponse}
 */
export const decodeAxelarAxelarnetRegisterIBCPathResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf AddCosmosBasedChainRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarAxelarnetAddCosmosBasedChainRequest}
 */
export const decodeAxelarAxelarnetAddCosmosBasedChainRequest = ((atu8_payload, [sa_sender, a_chain, s_addr_prefix, , a_native_assets, s_cosmos_chain, s_ibc_path] = decode_protobuf(atu8_payload, [1, 1, 5, 0, 0, 5, 5], [0, decodeAxelarNexusExportedChain, 0, 0, decodeAxelarNexusExportedAsset])) => [sa_sender, a_chain, s_addr_prefix, __UNDEFINED, a_native_assets, s_cosmos_chain, s_ibc_path]);
/**
 * Decodes a protobuf AddCosmosBasedChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetAddCosmosBasedChainResponse}
 */
export const decodeAxelarAxelarnetAddCosmosBasedChainResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RegisterAssetRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRegisterAssetRequest}
 */
export const decodeAxelarAxelarnetRegisterAssetRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1, [3, 1]], [0, 0, decodeAxelarNexusExportedAsset, 0, decode_temporal]);
/**
 * Decodes a protobuf RegisterAsset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRegisterAssetResponse}
 */
export const decodeAxelarAxelarnetRegisterAssetResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RouteIBCTransfersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRouteIBCTransfersRequest}
 */
export const decodeAxelarAxelarnetRouteIBCTransfersRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf RouteIBCTransfers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRouteIBCTransfersResponse}
 */
export const decodeAxelarAxelarnetRouteIBCTransfersResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RegisterFeeCollectorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRegisterFeeCollectorRequest}
 */
export const decodeAxelarAxelarnetRegisterFeeCollectorRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf RegisterFeeCollector message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRegisterFeeCollectorResponse}
 */
export const decodeAxelarAxelarnetRegisterFeeCollectorResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RetryIBCTransferRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRetryIBCTransferRequest}
 */
export const decodeAxelarAxelarnetRetryIBCTransferRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3]);
/**
 * Decodes a protobuf RetryIBCTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRetryIBCTransferResponse}
 */
export const decodeAxelarAxelarnetRetryIBCTransferResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RouteMessageRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRouteMessageRequest}
 */
export const decodeAxelarAxelarnetRouteMessageRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1]);
/**
 * Decodes a protobuf RouteMessage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetRouteMessageResponse}
 */
export const decodeAxelarAxelarnetRouteMessageResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CallContractRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetCallContractRequest}
 */
export const decodeAxelarAxelarnetCallContractRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 1, 1], [0, 0, 0, 0, decodeAxelarAxelarnetFee]);
/**
 * Decodes a protobuf CallContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetCallContractResponse}
 */
export const decodeAxelarAxelarnetCallContractResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AxelarAxelarnetLinkRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: recipient_addr -
 *   - 2: recipient_chain -
 *   - 3: asset -
 */
export const destructAxelarAxelarnetLinkRequest = (g_struct) => [g_struct.sender, g_struct.recipient_addr, g_struct.recipient_chain, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_LINK_REQUEST = '/axelar.axelarnet.v1beta1.LinkRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetLinkResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deposit_addr -
 */
export const destructAxelarAxelarnetLinkResponse = (g_struct) => [g_struct.deposit_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_LINK_RESPONSE = '/axelar.axelarnet.v1beta1.LinkResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetConfirmDepositRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 3: deposit_address -
 *   - 4: denom -
 */
export const destructAxelarAxelarnetConfirmDepositRequest = (g_struct) => [g_struct.sender, __UNDEFINED, __UNDEFINED, safe_base64_to_bytes(g_struct.deposit_address), g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CONFIRM_DEPOSIT_REQUEST = '/axelar.axelarnet.v1beta1.ConfirmDepositRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetConfirmDepositResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetConfirmDepositResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CONFIRM_DEPOSIT_RESPONSE = '/axelar.axelarnet.v1beta1.ConfirmDepositResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetExecutePendingTransfersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 */
export const destructAxelarAxelarnetExecutePendingTransfersRequest = (g_struct) => [g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_EXECUTE_PENDING_TRANSFERS_REQUEST = '/axelar.axelarnet.v1beta1.ExecutePendingTransfersRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetExecutePendingTransfersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetExecutePendingTransfersResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_EXECUTE_PENDING_TRANSFERS_RESPONSE = '/axelar.axelarnet.v1beta1.ExecutePendingTransfersResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRegisterIBCPathRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: path -
 */
export const destructAxelarAxelarnetRegisterIBCPathRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.path];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_REGISTER_I_B_C_PATH_REQUEST = '/axelar.axelarnet.v1beta1.RegisterIBCPathRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRegisterIBCPathResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetRegisterIBCPathResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_REGISTER_I_B_C_PATH_RESPONSE = '/axelar.axelarnet.v1beta1.RegisterIBCPathResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetAddCosmosBasedChainRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: addr_prefix -
 *   - 4: native_assets -
 *   - 5: cosmos_chain - TODO: Rename this to `chain` after v1beta1 -> v1 version bump
 *   - 6: ibc_path -
 */
export const destructAxelarAxelarnetAddCosmosBasedChainRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.addr_prefix, __UNDEFINED, g_struct.native_assets, g_struct.cosmos_chain, g_struct.ibc_path];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ADD_COSMOS_BASED_CHAIN_REQUEST = '/axelar.axelarnet.v1beta1.AddCosmosBasedChainRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetAddCosmosBasedChainResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetAddCosmosBasedChainResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ADD_COSMOS_BASED_CHAIN_RESPONSE = '/axelar.axelarnet.v1beta1.AddCosmosBasedChainResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRegisterAssetRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: asset -
 *   - 3: limit -
 *   - 4: window -
 */
export const destructAxelarAxelarnetRegisterAssetRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.asset, safe_base64_to_bytes(g_struct.limit), parse_duration(g_struct.window)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_REGISTER_ASSET_REQUEST = '/axelar.axelarnet.v1beta1.RegisterAssetRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRegisterAssetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetRegisterAssetResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_REGISTER_ASSET_RESPONSE = '/axelar.axelarnet.v1beta1.RegisterAssetResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRouteIBCTransfersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 */
export const destructAxelarAxelarnetRouteIBCTransfersRequest = (g_struct) => [g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ROUTE_I_B_C_TRANSFERS_REQUEST = '/axelar.axelarnet.v1beta1.RouteIBCTransfersRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRouteIBCTransfersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetRouteIBCTransfersResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ROUTE_I_B_C_TRANSFERS_RESPONSE = '/axelar.axelarnet.v1beta1.RouteIBCTransfersResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRegisterFeeCollectorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: fee_collector -
 */
export const destructAxelarAxelarnetRegisterFeeCollectorRequest = (g_struct) => [g_struct.sender, safe_base64_to_bytes(g_struct.fee_collector)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_REGISTER_FEE_COLLECTOR_REQUEST = '/axelar.axelarnet.v1beta1.RegisterFeeCollectorRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRegisterFeeCollectorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetRegisterFeeCollectorResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_REGISTER_FEE_COLLECTOR_RESPONSE = '/axelar.axelarnet.v1beta1.RegisterFeeCollectorResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRetryIBCTransferRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: id -
 */
export const destructAxelarAxelarnetRetryIBCTransferRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_RETRY_I_B_C_TRANSFER_REQUEST = '/axelar.axelarnet.v1beta1.RetryIBCTransferRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRetryIBCTransferResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetRetryIBCTransferResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_RETRY_I_B_C_TRANSFER_RESPONSE = '/axelar.axelarnet.v1beta1.RetryIBCTransferResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRouteMessageRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: id -
 *   - 2: payload -
 *   - 3: feegranter -
 */
export const destructAxelarAxelarnetRouteMessageRequest = (g_struct) => [g_struct.sender, g_struct.id, safe_base64_to_bytes(g_struct.payload), safe_base64_to_bytes(g_struct.feegranter)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ROUTE_MESSAGE_REQUEST = '/axelar.axelarnet.v1beta1.RouteMessageRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetRouteMessageResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetRouteMessageResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ROUTE_MESSAGE_RESPONSE = '/axelar.axelarnet.v1beta1.RouteMessageResponse';
/**
 * Destructures the fields of a {@link AxelarAxelarnetCallContractRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: contract_address -
 *   - 3: payload -
 *   - 4: fee -
 */
export const destructAxelarAxelarnetCallContractRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload), g_struct.fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CALL_CONTRACT_REQUEST = '/axelar.axelarnet.v1beta1.CallContractRequest';
/**
 * Destructures the fields of a {@link AxelarAxelarnetCallContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarAxelarnetCallContractResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_CALL_CONTRACT_RESPONSE = '/axelar.axelarnet.v1beta1.CallContractResponse';
//# sourceMappingURL=tx.js.map