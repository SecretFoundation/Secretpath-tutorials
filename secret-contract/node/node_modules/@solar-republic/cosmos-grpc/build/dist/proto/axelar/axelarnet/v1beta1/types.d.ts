import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarAxelarnetIBCTransfer = Encoded<'/axelar.axelarnet.v1beta1.IBCTransfer'>;
export type EncodedAxelarAxelarnetCosmosChain = Encoded<'/axelar.axelarnet.v1beta1.CosmosChain'>;
export type EncodedAxelarAxelarnetAsset = Encoded<'/axelar.axelarnet.v1beta1.Asset'>;
export type EncodedAxelarAxelarnetFee = Encoded<'/axelar.axelarnet.v1beta1.Fee'>;
/**
 * Encodes a `IBCTransfer` protobuf message:
 * @param sa_sender - `sender`:
 * @param sa_receiver - `receiver`:
 * @param a_token - `token`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_sequence - `sequence`:
 * @param sg_id - `id`:
 * @param xc_status - `status`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetIBCTransfer: (sa_sender?: Opt<WeakAccountAddr>, sa_receiver?: Opt<WeakAccountAddr>, a_token?: Opt<SlimCoin>, si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<WeakUint64Str>, sg_id?: Opt<WeakUint64Str>, xc_status?: Opt<ProtoEnumAxelarAxelarnetIBCTransferStatus>) => EncodedAxelarAxelarnetIBCTransfer;
/**
 * Encodes a `CosmosChain` protobuf message:
 * @param s_name - `name`:
 * @param s_ibc_path - `ibc_path`:
 * @param a_assets - `assets`:
 * @param s_addr_prefix - `addr_prefix`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetCosmosChain: (s_name?: Opt<string>, s_ibc_path?: Opt<string>, a_assets?: Opt<Encoded<'/axelar.axelarnet.v1beta1.Asset'>[]>, s_addr_prefix?: Opt<string>) => EncodedAxelarAxelarnetCosmosChain;
/**
 * Encodes a `Asset` protobuf message:
 * @param s_denom - `denom`:
 * @param atu8_min_amount - `min_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetAsset: (s_denom?: Opt<string>, atu8_min_amount?: Opt<Uint8Array>) => EncodedAxelarAxelarnetAsset;
/**
 * Encodes a `Fee` protobuf message:
 * @param a_amount - `amount`:
 * @param atu8_recipient - `recipient`:
 * @param atu8_refund_recipient - `refund_recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarAxelarnetFee: (a_amount?: Opt<SlimCoin>, atu8_recipient?: Opt<Uint8Array>, atu8_refund_recipient?: Opt<Uint8Array>) => EncodedAxelarAxelarnetFee;
/**
 * A decoded protobuf IBCTransfer message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: receiver -
 *   - 2: token -
 *   - 3: port_id -
 *   - 4: channel_id -
 *   - 5: sequence -
 *   - 6: id -
 *   - 7: status -
 */
export type DecodedAxelarAxelarnetIBCTransfer = [
    sa_sender?: CwAccountAddr,
    sa_receiver?: CwAccountAddr,
    a_token?: [
        string,
        string
    ],
    si_port?: string,
    si_channel?: string,
    sg_sequence?: CwUint64,
    sg_id?: CwUint64,
    xc_status?: ProtoEnumAxelarAxelarnetIBCTransferStatus
];
/**
 * Decodes a protobuf IBCTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransfer}
 */
export declare const decodeAxelarAxelarnetIBCTransfer: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetIBCTransfer;
/**
 * A decoded protobuf CosmosChain message
 *
 * Tuple where:
 *   - 0: name -
 *   - 1: ibc_path -
 *   - 2: assets -
 *   - 3: addr_prefix -
 */
export type DecodedAxelarAxelarnetCosmosChain = [
    s_name?: string,
    s_ibc_path?: string,
    a_assets?: DecodedAxelarAxelarnetAsset[],
    s_addr_prefix?: string
];
/**
 * Decodes a protobuf CosmosChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetCosmosChain}
 */
export declare const decodeAxelarAxelarnetCosmosChain: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetCosmosChain;
/**
 * A decoded protobuf Asset message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: min_amount -
 */
export type DecodedAxelarAxelarnetAsset = [
    s_denom?: string,
    atu8_min_amount?: Uint8Array
];
/**
 * Decodes a protobuf Asset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetAsset}
 */
export declare const decodeAxelarAxelarnetAsset: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetAsset;
/**
 * A decoded protobuf Fee message
 *
 * Tuple where:
 *   - 0: amount -
 *   - 1: recipient -
 *   - 2: refund_recipient -
 */
export type DecodedAxelarAxelarnetFee = [
    a_amount?: [
        string,
        string
    ],
    atu8_recipient?: Uint8Array,
    atu8_refund_recipient?: Uint8Array
];
/**
 * Decodes a protobuf Fee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetFee}
 */
export declare const decodeAxelarAxelarnetFee: (atu8_payload: Uint8Array) => DecodedAxelarAxelarnetFee;
/**
 * Destructures the fields of a {@link AxelarAxelarnetFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 *   - 1: recipient -
 *   - 2: refund_recipient -
 */
export declare const destructAxelarAxelarnetFee: (g_struct: AxelarAxelarnetFee) => [amount?: CosmosBaseCoin, recipient?: Uint8Array, refund_recipient?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_FEE = "/axelar.axelarnet.v1beta1.Fee";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.Fee` -
 */
export type AxelarAxelarnetFee = {
    amount?: CosmosBaseCoin | undefined;
    recipient?: CwBase64 | undefined;
    refund_recipient?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: receiver -
 *   - 2: token -
 *   - 3: port_id -
 *   - 4: channel_id -
 *   - 5: sequence -
 *   - 6: id -
 *   - 7: status -
 */
export declare const destructAxelarAxelarnetIBCTransfer: (g_struct: AxelarAxelarnetIBCTransfer) => [sender?: CwBase64, receiver?: CwAccountAddr, token?: CosmosBaseCoin, port_id?: string, channel_id?: string, sequence?: CwUint64, id?: CwUint64, status?: JsonEnumAxelarAxelarnetIBCTransferStatus];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER = "/axelar.axelarnet.v1beta1.IBCTransfer";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.IBCTransfer` -
 */
export type AxelarAxelarnetIBCTransfer = {
    sender?: CwBase64 | undefined;
    receiver?: CwAccountAddr | undefined;
    token?: CosmosBaseCoin | undefined;
    port_id?: string | undefined;
    channel_id?: string | undefined;
    sequence?: CwUint64 | undefined;
    id?: CwUint64 | undefined;
    status?: JsonEnumAxelarAxelarnetIBCTransferStatus | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetCosmosChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: ibc_path -
 *   - 2: assets -
 *   - 3: addr_prefix -
 */
export declare const destructAxelarAxelarnetCosmosChain: (g_struct: AxelarAxelarnetCosmosChain) => [name?: string, ibc_path?: string, assets?: AxelarAxelarnetAsset[], addr_prefix?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_COSMOS_CHAIN = "/axelar.axelarnet.v1beta1.CosmosChain";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.CosmosChain` -
 */
export type AxelarAxelarnetCosmosChain = {
    name?: string | undefined;
    ibc_path?: string | undefined;
    assets?: AxelarAxelarnetAsset[] | undefined;
    addr_prefix?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarAxelarnetAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: min_amount -
 */
export declare const destructAxelarAxelarnetAsset: (g_struct: AxelarAxelarnetAsset) => [denom?: string, min_amount?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ASSET = "/axelar.axelarnet.v1beta1.Asset";
/**
 * JSON serialization of `axelar.axelarnet.v1beta1.Asset` -
 */
export type AxelarAxelarnetAsset = {
    denom?: string | undefined;
    min_amount?: CwBase64 | undefined;
};
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED = "TransferNonExistent";
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING = 1;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING = "TransferPending";
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED = 2;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED = "TransferCompleted";
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED = 3;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export declare const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED = "TransferFailed";
/**
 * Raw protobuf enum values for `axelar.axelarnet.v1beta1.IBCTransfer.Status` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING}
 *   - {@link XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED}
 *   - {@link XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED}
 */
export type ProtoEnumAxelarAxelarnetIBCTransferStatus = typeof XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING | typeof XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED | typeof XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED;
/**
 * JSON enum values for `axelar.axelarnet.v1beta1.IBCTransfer.Status` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING}
 *   - {@link SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED}
 *   - {@link SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED}
 */
export type JsonEnumAxelarAxelarnetIBCTransferStatus = typeof SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING | typeof SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED | typeof SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED;
/**
 * Maps a protobuf enum int value for `axelar.axelarnet.v1beta1.IBCTransfer.Status` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarAxelarnetIBCTransferStatus: Record<ProtoEnumAxelarAxelarnetIBCTransferStatus, JsonEnumAxelarAxelarnetIBCTransferStatus>;
/**
 * Maps a JSON enum string value for `axelar.axelarnet.v1beta1.IBCTransfer.Status` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarAxelarnetIBCTransferStatus: Record<JsonEnumAxelarAxelarnetIBCTransferStatus, ProtoEnumAxelarAxelarnetIBCTransferStatus>;
