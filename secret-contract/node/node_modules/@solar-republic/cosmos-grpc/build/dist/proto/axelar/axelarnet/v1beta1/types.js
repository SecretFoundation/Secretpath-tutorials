import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `IBCTransfer` protobuf message:
 * @param sa_sender - `sender`:
 * @param sa_receiver - `receiver`:
 * @param a_token - `token`:
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_sequence - `sequence`:
 * @param sg_id - `id`:
 * @param xc_status - `status`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetIBCTransfer = (sa_sender, sa_receiver, a_token, si_port, si_channel, sg_sequence, sg_id, xc_status) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(sa_receiver) // string receiver = 2
    .b(coin(a_token)) // Coin token = 3
    .s(si_port) // string port_id = 4
    .s(si_channel) // string channel_id = 5
    .g(sg_sequence) // uint64 sequence = 6
    .g(sg_id) // uint64 id = 7
    .v(xc_status) // Status status = 8
    .o;
/**
 * Encodes a `CosmosChain` protobuf message:
 * @param s_name - `name`:
 * @param s_ibc_path - `ibc_path`:
 * @param a_assets - `assets`:
 * @param s_addr_prefix - `addr_prefix`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetCosmosChain = (s_name, s_ibc_path, a_assets, s_addr_prefix) => Protobuf() // ...
    .s(s_name) // string name = 1
    .s(s_ibc_path) // string ibc_path = 2
    .B(a_assets) // Asset[] assets = 3
    .s(s_addr_prefix) // string addr_prefix = 4
    .o;
/**
 * Encodes a `Asset` protobuf message:
 * @param s_denom - `denom`:
 * @param atu8_min_amount - `min_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetAsset = (s_denom, atu8_min_amount) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .b(atu8_min_amount) // bytes min_amount = 2
    .o;
/**
 * Encodes a `Fee` protobuf message:
 * @param a_amount - `amount`:
 * @param atu8_recipient - `recipient`:
 * @param atu8_refund_recipient - `refund_recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarAxelarnetFee = (a_amount, atu8_recipient, atu8_refund_recipient) => Protobuf() // ...
    .b(coin(a_amount)) // Coin amount = 1
    .b(atu8_recipient) // bytes recipient = 2
    .b(atu8_refund_recipient) // bytes refund_recipient = 3
    .o;
/**
 * Decodes a protobuf IBCTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetIBCTransfer}
 */
export const decodeAxelarAxelarnetIBCTransfer = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 5, 5, 3, 3, 1], [0, 0, decode_coin]);
/**
 * Decodes a protobuf CosmosChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetCosmosChain}
 */
export const decodeAxelarAxelarnetCosmosChain = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0, 5], [0, 0, decodeAxelarAxelarnetAsset]);
/**
 * Decodes a protobuf Asset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetAsset}
 */
export const decodeAxelarAxelarnetAsset = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf Fee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarAxelarnetFee}
 */
export const decodeAxelarAxelarnetFee = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decode_coin]);
/**
 * Destructures the fields of a {@link AxelarAxelarnetFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 *   - 1: recipient -
 *   - 2: refund_recipient -
 */
export const destructAxelarAxelarnetFee = (g_struct) => [g_struct.amount, safe_base64_to_bytes(g_struct.recipient), safe_base64_to_bytes(g_struct.refund_recipient)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_FEE = '/axelar.axelarnet.v1beta1.Fee';
/**
 * Destructures the fields of a {@link AxelarAxelarnetIBCTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: receiver -
 *   - 2: token -
 *   - 3: port_id -
 *   - 4: channel_id -
 *   - 5: sequence -
 *   - 6: id -
 *   - 7: status -
 */
export const destructAxelarAxelarnetIBCTransfer = (g_struct) => [g_struct.sender, g_struct.receiver, g_struct.token, g_struct.port_id, g_struct.channel_id, g_struct.sequence, g_struct.id, g_struct.status];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_I_B_C_TRANSFER = '/axelar.axelarnet.v1beta1.IBCTransfer';
/**
 * Destructures the fields of a {@link AxelarAxelarnetCosmosChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: ibc_path -
 *   - 2: assets -
 *   - 3: addr_prefix -
 */
export const destructAxelarAxelarnetCosmosChain = (g_struct) => [g_struct.name, g_struct.ibc_path, g_struct.assets, g_struct.addr_prefix];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_COSMOS_CHAIN = '/axelar.axelarnet.v1beta1.CosmosChain';
/**
 * Destructures the fields of a {@link AxelarAxelarnetAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: min_amount -
 */
export const destructAxelarAxelarnetAsset = (g_struct) => [g_struct.denom, safe_base64_to_bytes(g_struct.min_amount)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_AXELARNET_ASSET = '/axelar.axelarnet.v1beta1.Asset';
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED = 'TransferNonExistent';
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING = 1;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING = 'TransferPending';
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED = 2;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED = 'TransferCompleted';
/**
 * Protobuf enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarAxelarnetIBCTransferStatus}
 */
export const XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED = 3;
/**
 * JSON enum value for `axelar.axelarnet.v1beta1.IBCTransfer.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarAxelarnetIBCTransferStatus}
 */
export const SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED = 'TransferFailed';
/**
 * Maps a protobuf enum int value for `axelar.axelarnet.v1beta1.IBCTransfer.Status` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarAxelarnetIBCTransferStatus = {
    [XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED]: SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED,
    [XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING]: SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING,
    [XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED]: SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED,
    [XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED]: SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED,
};
/**
 * Maps a JSON enum string value for `axelar.axelarnet.v1beta1.IBCTransfer.Status` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarAxelarnetIBCTransferStatus = {
    [SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED]: XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_UNSPECIFIED,
    [SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING]: XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_PENDING,
    [SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED]: XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_COMPLETED,
    [SI_JSON_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED]: XC_PROTO_AXELAR_AXELARNET_IBCTRANSFER_STATUS_FAILED,
};
//# sourceMappingURL=types.js.map