import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, coin } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarEvmTokenDetails } from './types.js';
import { decodeAxelarVoteExportedPollParticipants } from '../../vote/exported/v1beta1/types.js';
/**
 * Encodes a `PollFailed` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmPollFailed = (atu8_tx_id, s_chain, sg_poll_id) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .g(sg_poll_id) // uint64 poll_id = 3
    .o;
/**
 * Encodes a `PollExpired` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmPollExpired = (atu8_tx_id, s_chain, sg_poll_id) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .g(sg_poll_id) // uint64 poll_id = 3
    .o;
/**
 * Encodes a `PollCompleted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmPollCompleted = (atu8_tx_id, s_chain, sg_poll_id) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .g(sg_poll_id) // uint64 poll_id = 3
    .o;
/**
 * Encodes a `NoEventsConfirmed` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmNoEventsConfirmed = (atu8_tx_id, s_chain, sg_poll_id) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .g(sg_poll_id) // uint64 poll_id = 3
    .o;
/**
 * Encodes a `ConfirmKeyTransferStarted` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmKeyTransferStarted = (s_chain, atu8_tx_id, atu8_gateway_address, sg_confirmation_height, atu8_participants) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .b(atu8_tx_id) // bytes tx_id = 2
    .b(atu8_gateway_address) // bytes gateway_address = 3
    .g(sg_confirmation_height) // uint64 confirmation_height = 4
    .b(atu8_participants) // PollParticipants participants = 5
    .o;
/**
 * Encodes a `ConfirmGatewayTxStarted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmGatewayTxStarted = (atu8_tx_id, s_chain, atu8_gateway_address, sg_confirmation_height, atu8_participants) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .b(atu8_gateway_address) // bytes gateway_address = 3
    .g(sg_confirmation_height) // uint64 confirmation_height = 4
    .b(atu8_participants) // PollParticipants participants = 5
    .o;
/**
 * Encodes a `PollMapping` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param sg_poll_id - `poll_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmPollMapping = (atu8_tx_id, sg_poll_id) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .g(sg_poll_id) // uint64 poll_id = 2
    .o;
/**
 * Encodes a `ConfirmGatewayTxsStarted` protobuf message:
 * @param a_poll_mappings - `poll_mappings`:
 * @param s_chain - `chain`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param a_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmGatewayTxsStarted = (a_poll_mappings, s_chain, atu8_gateway_address, sg_confirmation_height, a_participants) => Protobuf() // ...
    .B(a_poll_mappings) // PollMapping[] poll_mappings = 1
    .s(s_chain) // string chain = 2
    .b(atu8_gateway_address) // bytes gateway_address = 3
    .g(sg_confirmation_height) // uint64 confirmation_height = 4
    .B(a_participants) // bytes[] participants = 5
    .o;
/**
 * Encodes a `ConfirmDepositStarted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param atu8_deposit_address - `deposit_address`:
 * @param atu8_token_address - `token_address`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmDepositStarted = (atu8_tx_id, s_chain, atu8_deposit_address, atu8_token_address, sg_confirmation_height, atu8_participants, s_asset) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .b(atu8_deposit_address) // bytes deposit_address = 3
    .b(atu8_token_address) // bytes token_address = 4
    .g(sg_confirmation_height) // uint64 confirmation_height = 5
    .b(atu8_participants) // PollParticipants participants = 6
    .s(s_asset) // string asset = 7
    .o;
/**
 * Encodes a `ConfirmTokenStarted` protobuf message:
 * @param atu8_tx_id - `tx_id`:
 * @param s_chain - `chain`:
 * @param atu8_gateway_address - `gateway_address`:
 * @param atu8_token_address - `token_address`:
 * @param g_token_details - `token_details`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param g_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmTokenStarted = (atu8_tx_id, s_chain, atu8_gateway_address, atu8_token_address, atu8_token_details, sg_confirmation_height, atu8_participants) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(s_chain) // string chain = 2
    .b(atu8_gateway_address) // bytes gateway_address = 3
    .b(atu8_token_address) // bytes token_address = 4
    .b(atu8_token_details) // TokenDetails token_details = 5
    .g(sg_confirmation_height) // uint64 confirmation_height = 6
    .b(atu8_participants) // PollParticipants participants = 7
    .o;
/**
 * Encodes a `ChainAdded` protobuf message:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmChainAdded = (s_chain) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .o;
/**
 * Encodes a `CommandBatchSigned` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_command_batch_id - `command_batch_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCommandBatchSigned = (s_chain, atu8_command_batch_id) => Protobuf() // ...
    .s(s_chain, 2) // string chain = 2
    .b(atu8_command_batch_id, 3) // bytes command_batch_id = 3
    .o;
/**
 * Encodes a `CommandBatchAborted` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_command_batch_id - `command_batch_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCommandBatchAborted = (s_chain, atu8_command_batch_id) => Protobuf() // ...
    .s(s_chain, 2) // string chain = 2
    .b(atu8_command_batch_id, 3) // bytes command_batch_id = 3
    .o;
/**
 * Encodes a `EVMEventConfirmed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEVMEventConfirmed = (s_chain, si_event, s_type) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .s(s_type) // string type = 3
    .o;
/**
 * Encodes a `EVMEventCompleted` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEVMEventCompleted = (s_chain, si_event, s_type) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .s(s_type) // string type = 3
    .o;
/**
 * Encodes a `EVMEventFailed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEVMEventFailed = (s_chain, si_event, s_type) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .s(s_type) // string type = 3
    .o;
/**
 * Encodes a `EVMEventRetryFailed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param s_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEVMEventRetryFailed = (s_chain, si_event, s_type) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .s(s_type) // string type = 3
    .o;
/**
 * Encodes a `ContractCallApproved` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param atu8_command_id - `command_id`:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmContractCallApproved = (s_chain, si_event, atu8_command_id, sa_sender, s_destination_chain, sa_contract, atu8_payload_hash) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .b(atu8_command_id) // bytes command_id = 3
    .s(sa_sender) // string sender = 4
    .s(s_destination_chain) // string destination_chain = 5
    .s(sa_contract) // string contract_address = 6
    .b(atu8_payload_hash) // bytes payload_hash = 7
    .o;
/**
 * Encodes a `ContractCallFailed` protobuf message:
 * @param s_chain - `chain`:
 * @param si_msg - `msg_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmContractCallFailed = (s_chain, si_msg) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_msg) // string msg_id = 2
    .o;
/**
 * Encodes a `ContractCallWithMintApproved` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param atu8_command_id - `command_id`:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmContractCallWithMintApproved = (s_chain, si_event, atu8_command_id, sa_sender, s_destination_chain, sa_contract, atu8_payload_hash, a_asset) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .b(atu8_command_id) // bytes command_id = 3
    .s(sa_sender) // string sender = 4
    .s(s_destination_chain) // string destination_chain = 5
    .s(sa_contract) // string contract_address = 6
    .b(atu8_payload_hash) // bytes payload_hash = 7
    .b(coin(a_asset)) // Coin asset = 8
    .o;
/**
 * Encodes a `TokenSent` protobuf message:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @param sg_transfer_id - `transfer_id`:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmTokenSent = (s_chain, si_event, sg_transfer_id, sa_sender, s_destination_chain, sa_destination, a_asset) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(si_event) // string event_id = 2
    .g(sg_transfer_id) // uint64 transfer_id = 3
    .s(sa_sender) // string sender = 4
    .s(s_destination_chain) // string destination_chain = 5
    .s(sa_destination) // string destination_address = 6
    .b(coin(a_asset)) // Coin asset = 7
    .o;
/**
 * Encodes a `MintCommand` protobuf message:
 * @param s_chain - `chain`:
 * @param sg_transfer_id - `transfer_id`:
 * @param atu8_command_id - `command_id`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param a_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmMintCommand = (s_chain, sg_transfer_id, atu8_command_id, s_destination_chain, sa_destination, a_asset) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .g(sg_transfer_id) // uint64 transfer_id = 2
    .b(atu8_command_id) // bytes command_id = 3
    .s(s_destination_chain) // string destination_chain = 4
    .s(sa_destination) // string destination_address = 5
    .b(coin(a_asset)) // Coin asset = 6
    .o;
/**
 * Encodes a `BurnCommand` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_command_id - `command_id`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_deposit - `deposit_address`:
 * @param s_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmBurnCommand = (s_chain, atu8_command_id, s_destination_chain, sa_deposit, s_asset) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .b(atu8_command_id) // bytes command_id = 2
    .s(s_destination_chain) // string destination_chain = 3
    .s(sa_deposit) // string deposit_address = 4
    .s(s_asset) // string asset = 5
    .o;
/**
 * Decodes a protobuf PollFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollFailed}
 */
export const decodeAxelarEvmPollFailed = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3]);
/**
 * Decodes a protobuf PollExpired message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollExpired}
 */
export const decodeAxelarEvmPollExpired = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3]);
/**
 * Decodes a protobuf PollCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollCompleted}
 */
export const decodeAxelarEvmPollCompleted = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3]);
/**
 * Decodes a protobuf NoEventsConfirmed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmNoEventsConfirmed}
 */
export const decodeAxelarEvmNoEventsConfirmed = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3]);
/**
 * Decodes a protobuf ConfirmKeyTransferStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmKeyTransferStarted}
 */
export const decodeAxelarEvmConfirmKeyTransferStarted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 3, 1], [0, 0, 0, 0, decodeAxelarVoteExportedPollParticipants]);
/**
 * Decodes a protobuf ConfirmGatewayTxStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxStarted}
 */
export const decodeAxelarEvmConfirmGatewayTxStarted = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 3, 1], [0, 0, 0, 0, decodeAxelarVoteExportedPollParticipants]);
/**
 * Decodes a protobuf PollMapping message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollMapping}
 */
export const decodeAxelarEvmPollMapping = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3]);
/**
 * Decodes a protobuf ConfirmGatewayTxsStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxsStarted}
 */
export const decodeAxelarEvmConfirmGatewayTxsStarted = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5, 1, 3, 0], [decodeAxelarEvmPollMapping]);
/**
 * Decodes a protobuf ConfirmDepositStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmDepositStarted}
 */
export const decodeAxelarEvmConfirmDepositStarted = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1, 3, 1, 5], [0, 0, 0, 0, 0, decodeAxelarVoteExportedPollParticipants]);
/**
 * Decodes a protobuf ConfirmTokenStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmTokenStarted}
 */
export const decodeAxelarEvmConfirmTokenStarted = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1, 1, 3, 1], [0, 0, 0, 0, decodeAxelarEvmTokenDetails, 0, decodeAxelarVoteExportedPollParticipants]);
/**
 * Decodes a protobuf ChainAdded message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmChainAdded}
 */
export const decodeAxelarEvmChainAdded = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf CommandBatchSigned message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmCommandBatchSigned}
 */
export const decodeAxelarEvmCommandBatchSigned = ((atu8_payload, [, s_chain, atu8_command_batch_id] = decode_protobuf(atu8_payload, [0, 5, 1])) => [__UNDEFINED, s_chain, atu8_command_batch_id]);
/**
 * Decodes a protobuf CommandBatchAborted message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmCommandBatchAborted}
 */
export const decodeAxelarEvmCommandBatchAborted = ((atu8_payload, [, s_chain, atu8_command_batch_id] = decode_protobuf(atu8_payload, [0, 5, 1])) => [__UNDEFINED, s_chain, atu8_command_batch_id]);
/**
 * Decodes a protobuf EVMEventConfirmed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventConfirmed}
 */
export const decodeAxelarEvmEVMEventConfirmed = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf EVMEventCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventCompleted}
 */
export const decodeAxelarEvmEVMEventCompleted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf EVMEventFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventFailed}
 */
export const decodeAxelarEvmEVMEventFailed = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf EVMEventRetryFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEVMEventRetryFailed}
 */
export const decodeAxelarEvmEVMEventRetryFailed = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf ContractCallApproved message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmContractCallApproved}
 */
export const decodeAxelarEvmContractCallApproved = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 5, 5, 5, 1]);
/**
 * Decodes a protobuf ContractCallFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmContractCallFailed}
 */
export const decodeAxelarEvmContractCallFailed = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ContractCallWithMintApproved message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmContractCallWithMintApproved}
 */
export const decodeAxelarEvmContractCallWithMintApproved = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 5, 5, 5, 1, 1], [0, 0, 0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf TokenSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTokenSent}
 */
export const decodeAxelarEvmTokenSent = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 5, 5, 5, 1], [0, 0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf MintCommand message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmMintCommand}
 */
export const decodeAxelarEvmMintCommand = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1, 5, 5, 1], [0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf BurnCommand message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBurnCommand}
 */
export const decodeAxelarEvmBurnCommand = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5, 5, 5]);
/**
 * Destructures the fields of a {@link AxelarEvmPollFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export const destructAxelarEvmPollFailed = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, g_struct.poll_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_FAILED = '/axelar.evm.v1beta1.PollFailed';
/**
 * Destructures the fields of a {@link AxelarEvmPollExpired} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export const destructAxelarEvmPollExpired = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, g_struct.poll_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_EXPIRED = '/axelar.evm.v1beta1.PollExpired';
/**
 * Destructures the fields of a {@link AxelarEvmPollCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export const destructAxelarEvmPollCompleted = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, g_struct.poll_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_COMPLETED = '/axelar.evm.v1beta1.PollCompleted';
/**
 * Destructures the fields of a {@link AxelarEvmNoEventsConfirmed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: poll_id -
 */
export const destructAxelarEvmNoEventsConfirmed = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, g_struct.poll_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_NO_EVENTS_CONFIRMED = '/axelar.evm.v1beta1.NoEventsConfirmed';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmKeyTransferStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export const destructAxelarEvmConfirmKeyTransferStarted = (g_struct) => [g_struct.chain, safe_base64_to_bytes(g_struct.tx_id), safe_base64_to_bytes(g_struct.gateway_address), g_struct.confirmation_height, g_struct.participants];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_KEY_TRANSFER_STARTED = '/axelar.evm.v1beta1.ConfirmKeyTransferStarted';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export const destructAxelarEvmConfirmGatewayTxStarted = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, safe_base64_to_bytes(g_struct.gateway_address), g_struct.confirmation_height, g_struct.participants];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TX_STARTED = '/axelar.evm.v1beta1.ConfirmGatewayTxStarted';
/**
 * Destructures the fields of a {@link AxelarEvmPollMapping} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: poll_id -
 */
export const destructAxelarEvmPollMapping = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.poll_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_MAPPING = '/axelar.evm.v1beta1.PollMapping';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxsStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: poll_mappings -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: confirmation_height -
 *   - 4: participants -
 */
export const destructAxelarEvmConfirmGatewayTxsStarted = (g_struct) => [g_struct.poll_mappings, g_struct.chain, safe_base64_to_bytes(g_struct.gateway_address), g_struct.confirmation_height, map(g_struct.participants, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TXS_STARTED = '/axelar.evm.v1beta1.ConfirmGatewayTxsStarted';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmDepositStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: deposit_address -
 *   - 3: token_address -
 *   - 4: confirmation_height -
 *   - 5: participants -
 *   - 6: asset -
 */
export const destructAxelarEvmConfirmDepositStarted = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, safe_base64_to_bytes(g_struct.deposit_address), safe_base64_to_bytes(g_struct.token_address), g_struct.confirmation_height, g_struct.participants, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_DEPOSIT_STARTED = '/axelar.evm.v1beta1.ConfirmDepositStarted';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmTokenStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: chain -
 *   - 2: gateway_address -
 *   - 3: token_address -
 *   - 4: token_details -
 *   - 5: confirmation_height -
 *   - 6: participants -
 */
export const destructAxelarEvmConfirmTokenStarted = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), g_struct.chain, safe_base64_to_bytes(g_struct.gateway_address), safe_base64_to_bytes(g_struct.token_address), g_struct.token_details, g_struct.confirmation_height, g_struct.participants];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_TOKEN_STARTED = '/axelar.evm.v1beta1.ConfirmTokenStarted';
/**
 * Destructures the fields of a {@link AxelarEvmChainAdded} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 */
export const destructAxelarEvmChainAdded = (g_struct) => [g_struct.chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CHAIN_ADDED = '/axelar.evm.v1beta1.ChainAdded';
/**
 * Destructures the fields of a {@link AxelarEvmCommandBatchSigned} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export const destructAxelarEvmCommandBatchSigned = (g_struct) => [__UNDEFINED, g_struct.chain, safe_base64_to_bytes(g_struct.command_batch_id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_BATCH_SIGNED = '/axelar.evm.v1beta1.CommandBatchSigned';
/**
 * Destructures the fields of a {@link AxelarEvmCommandBatchAborted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export const destructAxelarEvmCommandBatchAborted = (g_struct) => [__UNDEFINED, g_struct.chain, safe_base64_to_bytes(g_struct.command_batch_id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_BATCH_ABORTED = '/axelar.evm.v1beta1.CommandBatchAborted';
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventConfirmed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export const destructAxelarEvmEVMEventConfirmed = (g_struct) => [g_struct.chain, g_struct.event_id, g_struct.type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_CONFIRMED = '/axelar.evm.v1beta1.EVMEventConfirmed';
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export const destructAxelarEvmEVMEventCompleted = (g_struct) => [g_struct.chain, g_struct.event_id, g_struct.type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_COMPLETED = '/axelar.evm.v1beta1.EVMEventCompleted';
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export const destructAxelarEvmEVMEventFailed = (g_struct) => [g_struct.chain, g_struct.event_id, g_struct.type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_FAILED = '/axelar.evm.v1beta1.EVMEventFailed';
/**
 * Destructures the fields of a {@link AxelarEvmEVMEventRetryFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: type -
 */
export const destructAxelarEvmEVMEventRetryFailed = (g_struct) => [g_struct.chain, g_struct.event_id, g_struct.type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_E_V_M_EVENT_RETRY_FAILED = '/axelar.evm.v1beta1.EVMEventRetryFailed';
/**
 * Destructures the fields of a {@link AxelarEvmContractCallApproved} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: command_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: contract_address -
 *   - 6: payload_hash -
 */
export const destructAxelarEvmContractCallApproved = (g_struct) => [g_struct.chain, g_struct.event_id, safe_base64_to_bytes(g_struct.command_id), g_struct.sender, g_struct.destination_chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONTRACT_CALL_APPROVED = '/axelar.evm.v1beta1.ContractCallApproved';
/**
 * Destructures the fields of a {@link AxelarEvmContractCallFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: msg_id -
 */
export const destructAxelarEvmContractCallFailed = (g_struct) => [g_struct.chain, g_struct.msg_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONTRACT_CALL_FAILED = '/axelar.evm.v1beta1.ContractCallFailed';
/**
 * Destructures the fields of a {@link AxelarEvmContractCallWithMintApproved} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: command_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: contract_address -
 *   - 6: payload_hash -
 *   - 7: asset -
 */
export const destructAxelarEvmContractCallWithMintApproved = (g_struct) => [g_struct.chain, g_struct.event_id, safe_base64_to_bytes(g_struct.command_id), g_struct.sender, g_struct.destination_chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload_hash), g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONTRACT_CALL_WITH_MINT_APPROVED = '/axelar.evm.v1beta1.ContractCallWithMintApproved';
/**
 * Destructures the fields of a {@link AxelarEvmTokenSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: event_id -
 *   - 2: transfer_id -
 *   - 3: sender -
 *   - 4: destination_chain -
 *   - 5: destination_address -
 *   - 6: asset -
 */
export const destructAxelarEvmTokenSent = (g_struct) => [g_struct.chain, g_struct.event_id, g_struct.transfer_id, g_struct.sender, g_struct.destination_chain, g_struct.destination_address, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_TOKEN_SENT = '/axelar.evm.v1beta1.TokenSent';
/**
 * Destructures the fields of a {@link AxelarEvmMintCommand} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: transfer_id -
 *   - 2: command_id -
 *   - 3: destination_chain -
 *   - 4: destination_address -
 *   - 5: asset -
 */
export const destructAxelarEvmMintCommand = (g_struct) => [g_struct.chain, g_struct.transfer_id, safe_base64_to_bytes(g_struct.command_id), g_struct.destination_chain, g_struct.destination_address, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_MINT_COMMAND = '/axelar.evm.v1beta1.MintCommand';
/**
 * Destructures the fields of a {@link AxelarEvmBurnCommand} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: command_id -
 *   - 2: destination_chain -
 *   - 3: deposit_address -
 *   - 4: asset -
 */
export const destructAxelarEvmBurnCommand = (g_struct) => [g_struct.chain, safe_base64_to_bytes(g_struct.command_id), g_struct.destination_chain, g_struct.deposit_address, g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_BURN_COMMAND = '/axelar.evm.v1beta1.BurnCommand';
//# sourceMappingURL=events.js.map