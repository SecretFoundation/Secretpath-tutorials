import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarEvmNetworkInfo, DecodedAxelarEvmNetworkInfo } from './types.js';
import type { AxelarNexusExportedChain, DecodedAxelarNexusExportedChain } from '../../nexus/exported/v1beta1/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
export type EncodedAxelarEvmParams = Encoded<'/axelar.evm.v1beta1.Params'>;
export type EncodedAxelarEvmPendingChain = Encoded<'/axelar.evm.v1beta1.PendingChain'>;
/**
 * Encodes a `Params` protobuf message: the parameter set for this module
 * @param s_chain - `chain`:
 * @param sg_confirmation_height - `confirmation_height`:
 * @param s_network - `network`:
 * @param atu8_token_code - `token_code`:
 * @param atu8_burnable - `burnable`:
 * @param sg_revote_locking_period - `revote_locking_period`:
 * @param a_networks - `networks`:
 * @param g_voting_threshold - `voting_threshold`:
 * @param sg_min_voter_count - `min_voter_count`:
 * @param n_commands_gas_limit - `commands_gas_limit`:
 * @param sg_voting_grace_period - `voting_grace_period`:
 * @param sg_end_blocker_limit - `end_blocker_limit`:
 * @param sg_transfer_limit - `transfer_limit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmParams: (s_chain?: Opt<string>, sg_confirmation_height?: Opt<WeakUint64Str>, s_network?: Opt<string>, atu8_token_code?: Opt<Uint8Array>, atu8_burnable?: Opt<Uint8Array>, sg_revote_locking_period?: Opt<WeakInt64Str>, a_networks?: Opt<Encoded<'/axelar.evm.v1beta1.NetworkInfo'>[]>, atu8_voting_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_min_voter_count?: Opt<WeakInt64Str>, n_commands_gas_limit?: Opt<number>, sg_voting_grace_period?: Opt<WeakInt64Str>, sg_end_blocker_limit?: Opt<WeakInt64Str>, sg_transfer_limit?: Opt<WeakUint64Str>) => EncodedAxelarEvmParams;
/**
 * Encodes a `PendingChain` protobuf message:
 * @param g_params - `params`:
 * @param g_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPendingChain: (atu8_params?: Opt<Encoded<'/axelar.evm.v1beta1.Params'>>, atu8_chain?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.Chain'>>) => EncodedAxelarEvmPendingChain;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: confirmation_height -
 *   - 2: network -
 *   - 4: token_code -
 *   - 5: burnable -
 *   - 6: revote_locking_period -
 *   - 7: networks -
 *   - 8: voting_threshold -
 *   - 9: min_voter_count -
 *   - 10: commands_gas_limit -
 *   - 12: voting_grace_period -
 *   - 13: end_blocker_limit -
 *   - 14: transfer_limit -
 */
export type DecodedAxelarEvmParams = [
    s_chain?: string,
    sg_confirmation_height?: CwUint64,
    s_network?: string,
    w_0?: undefined,
    atu8_token_code?: Uint8Array,
    atu8_burnable?: Uint8Array,
    sg_revote_locking_period?: CwInt64,
    a_networks?: DecodedAxelarEvmNetworkInfo[],
    a_voting_threshold?: DecodedAxelarUtilsThreshold,
    sg_min_voter_count?: CwInt64,
    n_commands_gas_limit?: number,
    w_0?: undefined,
    sg_voting_grace_period?: CwInt64,
    sg_end_blocker_limit?: CwInt64,
    sg_transfer_limit?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmParams}
 */
export declare const decodeAxelarEvmParams: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmParams;
/**
 * A decoded protobuf PendingChain message
 *
 * Tuple where:
 *   - 0: params -
 *   - 1: chain -
 */
export type DecodedAxelarEvmPendingChain = [
    a_params?: DecodedAxelarEvmParams,
    a_chain?: DecodedAxelarNexusExportedChain
];
/**
 * Decodes a protobuf PendingChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPendingChain}
 */
export declare const decodeAxelarEvmPendingChain: (atu8_payload: Uint8Array) => DecodedAxelarEvmPendingChain;
/**
 * Destructures the fields of a {@link AxelarEvmParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: confirmation_height -
 *   - 2: network -
 *   - 4: token_code -
 *   - 5: burnable -
 *   - 6: revote_locking_period -
 *   - 7: networks -
 *   - 8: voting_threshold -
 *   - 9: min_voter_count -
 *   - 10: commands_gas_limit -
 *   - 12: voting_grace_period -
 *   - 13: end_blocker_limit -
 *   - 14: transfer_limit -
 */
export declare const destructAxelarEvmParams: (g_struct: AxelarEvmParams) => [chain?: string, confirmation_height?: CwUint64, network?: string, EMPTY?: void, token_code?: Uint8Array, burnable?: Uint8Array, revote_locking_period?: CwInt64, networks?: AxelarEvmNetworkInfo[], voting_threshold?: AxelarUtilsThreshold, min_voter_count?: CwInt64, commands_gas_limit?: number, EMPTY?: void, voting_grace_period?: CwInt64, end_blocker_limit?: CwInt64, transfer_limit?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PARAMS = "/axelar.evm.v1beta1.Params";
/**
 * JSON serialization of `axelar.evm.v1beta1.Params` - the parameter set for this module
 */
export type AxelarEvmParams = {
    chain?: string | undefined;
    confirmation_height?: CwUint64 | undefined;
    network?: string | undefined;
    token_code?: CwBase64 | undefined;
    burnable?: CwBase64 | undefined;
    revote_locking_period?: CwInt64 | undefined;
    networks?: AxelarEvmNetworkInfo[] | undefined;
    voting_threshold?: AxelarUtilsThreshold | undefined;
    min_voter_count?: CwInt64 | undefined;
    commands_gas_limit?: number | undefined;
    voting_grace_period?: CwInt64 | undefined;
    end_blocker_limit?: CwInt64 | undefined;
    transfer_limit?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPendingChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: chain -
 */
export declare const destructAxelarEvmPendingChain: (g_struct: AxelarEvmPendingChain) => [params?: AxelarEvmParams, chain?: AxelarNexusExportedChain];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_PENDING_CHAIN = "/axelar.evm.v1beta1.PendingChain";
/**
 * JSON serialization of `axelar.evm.v1beta1.PendingChain` -
 */
export type AxelarEvmPendingChain = {
    params?: AxelarEvmParams | undefined;
    chain?: AxelarNexusExportedChain | undefined;
};
