import { __UNDEFINED } from '@blake.regalia/belt';
import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarEvmAsset, decodeAxelarEvmTokenDetails } from './types.js';
/**
 * Encodes a `SetGatewayRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param atu8_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmSetGatewayRequest = (sa_sender, s_chain, atu8_address) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_address) // bytes address = 3
    .o;
/**
 * Encodes a `SetGatewayResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmSetGatewayResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ConfirmGatewayTxRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmGatewayTxRequest = (sa_sender, s_chain, atu8_tx_id) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_tx_id) // bytes tx_id = 3
    .o;
/**
 * Encodes a `ConfirmGatewayTxResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmGatewayTxResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ConfirmGatewayTxsRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param a_tx_ids - `tx_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmGatewayTxsRequest = (sa_sender, s_chain, a_tx_ids) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .B(a_tx_ids) // bytes[] tx_ids = 3
    .o;
/**
 * Encodes a `ConfirmGatewayTxsResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmGatewayTxsResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ConfirmDepositRequest` protobuf message: MsgConfirmDeposit represents an erc20 deposit confirmation message
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @param atu8_amount - `amount`:
 * @param atu8_burner_address - `burner_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmDepositRequest = (sa_sender, s_chain, atu8_tx_id, atu8_amount, atu8_burner_address) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_tx_id) // bytes tx_id = 3
    .b(atu8_amount) // bytes amount = 4
    .b(atu8_burner_address) // bytes burner_address = 5
    .o;
/**
 * Encodes a `ConfirmDepositResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmDepositResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ConfirmTokenRequest` protobuf message: MsgConfirmToken represents a token deploy confirmation message
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @param g_asset - `asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmTokenRequest = (sa_sender, s_chain, atu8_tx_id, atu8_asset) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_tx_id) // bytes tx_id = 3
    .b(atu8_asset) // Asset asset = 4
    .o;
/**
 * Encodes a `ConfirmTokenResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmTokenResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ConfirmTransferKeyRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmTransferKeyRequest = (sa_sender, s_chain, atu8_tx_id) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_tx_id) // bytes tx_id = 3
    .o;
/**
 * Encodes a `ConfirmTransferKeyResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmConfirmTransferKeyResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `LinkRequest` protobuf message: MsgLink represents the message that links a cross chain address to a burner address
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param sa_recipient_addr - `recipient_addr`:
 * @param s_asset - `asset`:
 * @param s_recipient_chain - `recipient_chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmLinkRequest = (sa_sender, s_chain, sa_recipient_addr, s_asset, s_recipient_chain) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(sa_recipient_addr) // string recipient_addr = 3
    .s(s_asset) // string asset = 4
    .s(s_recipient_chain) // string recipient_chain = 5
    .o;
/**
 * Encodes a `LinkResponse` protobuf message:
 * @param sa_deposit_addr - `deposit_addr`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmLinkResponse = (sa_deposit_addr) => Protobuf() // ...
    .s(sa_deposit_addr) // string deposit_addr = 1
    .o;
/**
 * Encodes a `CreateBurnTokensRequest` protobuf message: represents the message to create commands to burn tokens with AxelarGateway
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateBurnTokensRequest = (sa_sender, s_chain) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .o;
/**
 * Encodes a `CreateBurnTokensResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateBurnTokensResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `CreateDeployTokenRequest` protobuf message: represents the message to create a deploy token command for AxelarGateway
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param g_asset - `asset`:
 * @param g_token_details - `token_details`:
 * @param atu8_address - `address`:
 * @param s_daily_mint_limit - `daily_mint_limit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateDeployTokenRequest = (sa_sender, s_chain, atu8_asset, atu8_token_details, atu8_address, s_daily_mint_limit) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .b(atu8_asset) // Asset asset = 3
    .b(atu8_token_details) // TokenDetails token_details = 4
    .b(atu8_address, 6) // bytes address = 6
    .s(s_daily_mint_limit, 7) // string daily_mint_limit = 7
    .o;
/**
 * Encodes a `CreateDeployTokenResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateDeployTokenResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `CreatePendingTransfersRequest` protobuf message: represents a message to trigger the creation of commands handling all pending transfers
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreatePendingTransfersRequest = (sa_sender, s_chain) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .o;
/**
 * Encodes a `CreatePendingTransfersResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreatePendingTransfersResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `CreateTransferOwnershipRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateTransferOwnershipRequest = (sa_sender, s_chain, si_key) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(si_key) // string key_id = 3
    .o;
/**
 * Encodes a `CreateTransferOwnershipResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateTransferOwnershipResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `CreateTransferOperatorshipRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateTransferOperatorshipRequest = (sa_sender, s_chain, si_key) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(si_key) // string key_id = 3
    .o;
/**
 * Encodes a `CreateTransferOperatorshipResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCreateTransferOperatorshipResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `SignCommandsRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmSignCommandsRequest = (sa_sender, s_chain) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .o;
/**
 * Encodes a `SignCommandsResponse` protobuf message:
 * @param atu8_batched_commands_id - `batched_commands_id`:
 * @param n_command_count - `command_count`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmSignCommandsResponse = (atu8_batched_commands_id, n_command_count) => Protobuf() // ...
    .b(atu8_batched_commands_id) // bytes batched_commands_id = 1
    .v(n_command_count) // uint32 command_count = 2
    .o;
/**
 * Encodes a `AddChainRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_name - `name`:
 * @param xc_key_type - `key_type`:
 * @param atu8_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmAddChainRequest = (sa_sender, s_name, xc_key_type, atu8_params) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_name) // string name = 2
    .v(xc_key_type, 4) // KeyType key_type = 4
    .b(atu8_params, 5) // bytes params = 5
    .o;
/**
 * Encodes a `AddChainResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmAddChainResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RetryFailedEventRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param si_event - `event_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmRetryFailedEventRequest = (sa_sender, s_chain, si_event) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .s(si_event) // string event_id = 3
    .o;
/**
 * Encodes a `RetryFailedEventResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmRetryFailedEventResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf SetGatewayRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmSetGatewayRequest}
 */
export const decodeAxelarEvmSetGatewayRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1]);
/**
 * Decodes a protobuf SetGateway message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmSetGatewayResponse}
 */
export const decodeAxelarEvmSetGatewayResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConfirmGatewayTxRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxRequest}
 */
export const decodeAxelarEvmConfirmGatewayTxRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1]);
/**
 * Decodes a protobuf ConfirmGatewayTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxResponse}
 */
export const decodeAxelarEvmConfirmGatewayTxResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConfirmGatewayTxsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxsRequest}
 */
export const decodeAxelarEvmConfirmGatewayTxsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 0]);
/**
 * Decodes a protobuf ConfirmGatewayTxs message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmGatewayTxsResponse}
 */
export const decodeAxelarEvmConfirmGatewayTxsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConfirmDepositRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmDepositRequest}
 */
export const decodeAxelarEvmConfirmDepositRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1, 1]);
/**
 * Decodes a protobuf ConfirmDeposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmDepositResponse}
 */
export const decodeAxelarEvmConfirmDepositResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConfirmTokenRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmTokenRequest}
 */
export const decodeAxelarEvmConfirmTokenRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 1], [0, 0, 0, decodeAxelarEvmAsset]);
/**
 * Decodes a protobuf ConfirmToken message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmTokenResponse}
 */
export const decodeAxelarEvmConfirmTokenResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConfirmTransferKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmTransferKeyRequest}
 */
export const decodeAxelarEvmConfirmTransferKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1]);
/**
 * Decodes a protobuf ConfirmTransferKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmConfirmTransferKeyResponse}
 */
export const decodeAxelarEvmConfirmTransferKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf LinkRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmLinkRequest}
 */
export const decodeAxelarEvmLinkRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 5, 5]);
/**
 * Decodes a protobuf Link message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmLinkResponse}
 */
export const decodeAxelarEvmLinkResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf CreateBurnTokensRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateBurnTokensRequest}
 */
export const decodeAxelarEvmCreateBurnTokensRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf CreateBurnTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateBurnTokensResponse}
 */
export const decodeAxelarEvmCreateBurnTokensResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CreateDeployTokenRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmCreateDeployTokenRequest}
 */
export const decodeAxelarEvmCreateDeployTokenRequest = ((atu8_payload, [sa_sender, s_chain, a_asset, a_token_details, , atu8_address, s_daily_mint_limit] = decode_protobuf(atu8_payload, [1, 5, 1, 1, 0, 1, 5], [0, 0, decodeAxelarEvmAsset, decodeAxelarEvmTokenDetails])) => [sa_sender, s_chain, a_asset, a_token_details, __UNDEFINED, atu8_address, s_daily_mint_limit]);
/**
 * Decodes a protobuf CreateDeployToken message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateDeployTokenResponse}
 */
export const decodeAxelarEvmCreateDeployTokenResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CreatePendingTransfersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreatePendingTransfersRequest}
 */
export const decodeAxelarEvmCreatePendingTransfersRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf CreatePendingTransfers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreatePendingTransfersResponse}
 */
export const decodeAxelarEvmCreatePendingTransfersResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CreateTransferOwnershipRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateTransferOwnershipRequest}
 */
export const decodeAxelarEvmCreateTransferOwnershipRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5]);
/**
 * Decodes a protobuf CreateTransferOwnership message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateTransferOwnershipResponse}
 */
export const decodeAxelarEvmCreateTransferOwnershipResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CreateTransferOperatorshipRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateTransferOperatorshipRequest}
 */
export const decodeAxelarEvmCreateTransferOperatorshipRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5]);
/**
 * Decodes a protobuf CreateTransferOperatorship message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCreateTransferOperatorshipResponse}
 */
export const decodeAxelarEvmCreateTransferOperatorshipResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SignCommandsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmSignCommandsRequest}
 */
export const decodeAxelarEvmSignCommandsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf SignCommands message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmSignCommandsResponse}
 */
export const decodeAxelarEvmSignCommandsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf AddChainRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmAddChainRequest}
 */
export const decodeAxelarEvmAddChainRequest = ((atu8_payload, [sa_sender, s_name, , xc_key_type, atu8_params] = decode_protobuf(atu8_payload, [1, 5, 0, 1, 1])) => [sa_sender, s_name, __UNDEFINED, xc_key_type, atu8_params]);
/**
 * Decodes a protobuf AddChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmAddChainResponse}
 */
export const decodeAxelarEvmAddChainResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RetryFailedEventRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmRetryFailedEventRequest}
 */
export const decodeAxelarEvmRetryFailedEventRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5]);
/**
 * Decodes a protobuf RetryFailedEvent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmRetryFailedEventResponse}
 */
export const decodeAxelarEvmRetryFailedEventResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AxelarEvmSetGatewayRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: address -
 */
export const destructAxelarEvmSetGatewayRequest = (g_struct) => [g_struct.sender, g_struct.chain, safe_base64_to_bytes(g_struct.address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_SET_GATEWAY_REQUEST = '/axelar.evm.v1beta1.SetGatewayRequest';
/**
 * Destructures the fields of a {@link AxelarEvmSetGatewayResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmSetGatewayResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_SET_GATEWAY_RESPONSE = '/axelar.evm.v1beta1.SetGatewayResponse';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: tx_id -
 */
export const destructAxelarEvmConfirmGatewayTxRequest = (g_struct) => [g_struct.sender, g_struct.chain, safe_base64_to_bytes(g_struct.tx_id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TX_REQUEST = '/axelar.evm.v1beta1.ConfirmGatewayTxRequest';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmConfirmGatewayTxResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TX_RESPONSE = '/axelar.evm.v1beta1.ConfirmGatewayTxResponse';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: tx_ids -
 */
export const destructAxelarEvmConfirmGatewayTxsRequest = (g_struct) => [g_struct.sender, g_struct.chain, map(g_struct.tx_ids, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TXS_REQUEST = '/axelar.evm.v1beta1.ConfirmGatewayTxsRequest';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmGatewayTxsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmConfirmGatewayTxsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_GATEWAY_TXS_RESPONSE = '/axelar.evm.v1beta1.ConfirmGatewayTxsResponse';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmDepositRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: tx_id -
 *   - 3: amount -
 *   - 4: burner_address -
 */
export const destructAxelarEvmConfirmDepositRequest = (g_struct) => [g_struct.sender, g_struct.chain, safe_base64_to_bytes(g_struct.tx_id), safe_base64_to_bytes(g_struct.amount), safe_base64_to_bytes(g_struct.burner_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_DEPOSIT_REQUEST = '/axelar.evm.v1beta1.ConfirmDepositRequest';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmDepositResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmConfirmDepositResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_DEPOSIT_RESPONSE = '/axelar.evm.v1beta1.ConfirmDepositResponse';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmTokenRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: tx_id -
 *   - 3: asset -
 */
export const destructAxelarEvmConfirmTokenRequest = (g_struct) => [g_struct.sender, g_struct.chain, safe_base64_to_bytes(g_struct.tx_id), g_struct.asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_TOKEN_REQUEST = '/axelar.evm.v1beta1.ConfirmTokenRequest';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmTokenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmConfirmTokenResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_TOKEN_RESPONSE = '/axelar.evm.v1beta1.ConfirmTokenResponse';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmTransferKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: tx_id -
 */
export const destructAxelarEvmConfirmTransferKeyRequest = (g_struct) => [g_struct.sender, g_struct.chain, safe_base64_to_bytes(g_struct.tx_id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_TRANSFER_KEY_REQUEST = '/axelar.evm.v1beta1.ConfirmTransferKeyRequest';
/**
 * Destructures the fields of a {@link AxelarEvmConfirmTransferKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmConfirmTransferKeyResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CONFIRM_TRANSFER_KEY_RESPONSE = '/axelar.evm.v1beta1.ConfirmTransferKeyResponse';
/**
 * Destructures the fields of a {@link AxelarEvmLinkRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: recipient_addr -
 *   - 3: asset -
 *   - 4: recipient_chain -
 */
export const destructAxelarEvmLinkRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.recipient_addr, g_struct.asset, g_struct.recipient_chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_LINK_REQUEST = '/axelar.evm.v1beta1.LinkRequest';
/**
 * Destructures the fields of a {@link AxelarEvmLinkResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deposit_addr -
 */
export const destructAxelarEvmLinkResponse = (g_struct) => [g_struct.deposit_addr];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_LINK_RESPONSE = '/axelar.evm.v1beta1.LinkResponse';
/**
 * Destructures the fields of a {@link AxelarEvmCreateBurnTokensRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 */
export const destructAxelarEvmCreateBurnTokensRequest = (g_struct) => [g_struct.sender, g_struct.chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_BURN_TOKENS_REQUEST = '/axelar.evm.v1beta1.CreateBurnTokensRequest';
/**
 * Destructures the fields of a {@link AxelarEvmCreateBurnTokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmCreateBurnTokensResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_BURN_TOKENS_RESPONSE = '/axelar.evm.v1beta1.CreateBurnTokensResponse';
/**
 * Destructures the fields of a {@link AxelarEvmCreateDeployTokenRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: asset -
 *   - 3: token_details -
 *   - 5: address -
 *   - 6: daily_mint_limit -
 */
export const destructAxelarEvmCreateDeployTokenRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.asset, g_struct.token_details, __UNDEFINED, safe_base64_to_bytes(g_struct.address), g_struct.daily_mint_limit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_DEPLOY_TOKEN_REQUEST = '/axelar.evm.v1beta1.CreateDeployTokenRequest';
/**
 * Destructures the fields of a {@link AxelarEvmCreateDeployTokenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmCreateDeployTokenResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_DEPLOY_TOKEN_RESPONSE = '/axelar.evm.v1beta1.CreateDeployTokenResponse';
/**
 * Destructures the fields of a {@link AxelarEvmCreatePendingTransfersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 */
export const destructAxelarEvmCreatePendingTransfersRequest = (g_struct) => [g_struct.sender, g_struct.chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_PENDING_TRANSFERS_REQUEST = '/axelar.evm.v1beta1.CreatePendingTransfersRequest';
/**
 * Destructures the fields of a {@link AxelarEvmCreatePendingTransfersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmCreatePendingTransfersResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_PENDING_TRANSFERS_RESPONSE = '/axelar.evm.v1beta1.CreatePendingTransfersResponse';
/**
 * Destructures the fields of a {@link AxelarEvmCreateTransferOwnershipRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: key_id -
 */
export const destructAxelarEvmCreateTransferOwnershipRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_TRANSFER_OWNERSHIP_REQUEST = '/axelar.evm.v1beta1.CreateTransferOwnershipRequest';
/**
 * Destructures the fields of a {@link AxelarEvmCreateTransferOwnershipResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmCreateTransferOwnershipResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_TRANSFER_OWNERSHIP_RESPONSE = '/axelar.evm.v1beta1.CreateTransferOwnershipResponse';
/**
 * Destructures the fields of a {@link AxelarEvmCreateTransferOperatorshipRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: key_id -
 */
export const destructAxelarEvmCreateTransferOperatorshipRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_TRANSFER_OPERATORSHIP_REQUEST = '/axelar.evm.v1beta1.CreateTransferOperatorshipRequest';
/**
 * Destructures the fields of a {@link AxelarEvmCreateTransferOperatorshipResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmCreateTransferOperatorshipResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_CREATE_TRANSFER_OPERATORSHIP_RESPONSE = '/axelar.evm.v1beta1.CreateTransferOperatorshipResponse';
/**
 * Destructures the fields of a {@link AxelarEvmSignCommandsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 */
export const destructAxelarEvmSignCommandsRequest = (g_struct) => [g_struct.sender, g_struct.chain];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_SIGN_COMMANDS_REQUEST = '/axelar.evm.v1beta1.SignCommandsRequest';
/**
 * Destructures the fields of a {@link AxelarEvmSignCommandsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: batched_commands_id -
 *   - 1: command_count -
 */
export const destructAxelarEvmSignCommandsResponse = (g_struct) => [safe_base64_to_bytes(g_struct.batched_commands_id), g_struct.command_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_SIGN_COMMANDS_RESPONSE = '/axelar.evm.v1beta1.SignCommandsResponse';
/**
 * Destructures the fields of a {@link AxelarEvmAddChainRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: name -
 *   - 3: key_type -
 *   - 4: params -
 */
export const destructAxelarEvmAddChainRequest = (g_struct) => [g_struct.sender, g_struct.name, __UNDEFINED, g_struct.key_type, safe_base64_to_bytes(g_struct.params)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_ADD_CHAIN_REQUEST = '/axelar.evm.v1beta1.AddChainRequest';
/**
 * Destructures the fields of a {@link AxelarEvmAddChainResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmAddChainResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_ADD_CHAIN_RESPONSE = '/axelar.evm.v1beta1.AddChainResponse';
/**
 * Destructures the fields of a {@link AxelarEvmRetryFailedEventRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: event_id -
 */
export const destructAxelarEvmRetryFailedEventRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.event_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_RETRY_FAILED_EVENT_REQUEST = '/axelar.evm.v1beta1.RetryFailedEventRequest';
/**
 * Destructures the fields of a {@link AxelarEvmRetryFailedEventResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarEvmRetryFailedEventResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_RETRY_FAILED_EVENT_RESPONSE = '/axelar.evm.v1beta1.RetryFailedEventResponse';
//# sourceMappingURL=tx.js.map