import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedAxelarEvmVoteEvents = Encoded<'/axelar.evm.v1beta1.VoteEvents'>;
export type EncodedAxelarEvmEvent = Encoded<'/axelar.evm.v1beta1.Event'>;
export type EncodedAxelarEvmEventTokenSent = Encoded<'/axelar.evm.v1beta1.EventTokenSent'>;
export type EncodedAxelarEvmEventContractCall = Encoded<'/axelar.evm.v1beta1.EventContractCall'>;
export type EncodedAxelarEvmEventContractCallWithToken = Encoded<'/axelar.evm.v1beta1.EventContractCallWithToken'>;
export type EncodedAxelarEvmEventTransfer = Encoded<'/axelar.evm.v1beta1.EventTransfer'>;
export type EncodedAxelarEvmEventTokenDeployed = Encoded<'/axelar.evm.v1beta1.EventTokenDeployed'>;
export type EncodedAxelarEvmEventMultisigOwnershipTransferred = Encoded<'/axelar.evm.v1beta1.EventMultisigOwnershipTransferred'>;
export type EncodedAxelarEvmEventMultisigOperatorshipTransferred = Encoded<'/axelar.evm.v1beta1.EventMultisigOperatorshipTransferred'>;
export type EncodedAxelarEvmNetworkInfo = Encoded<'/axelar.evm.v1beta1.NetworkInfo'>;
export type EncodedAxelarEvmBurnerInfo = Encoded<'/axelar.evm.v1beta1.BurnerInfo'>;
export type EncodedAxelarEvmERC20Deposit = Encoded<'/axelar.evm.v1beta1.ERC20Deposit'>;
export type EncodedAxelarEvmERC20TokenMetadata = Encoded<'/axelar.evm.v1beta1.ERC20TokenMetadata'>;
export type EncodedAxelarEvmTransactionMetadata = Encoded<'/axelar.evm.v1beta1.TransactionMetadata'>;
export type EncodedAxelarEvmCommand = Encoded<'/axelar.evm.v1beta1.Command'>;
export type EncodedAxelarEvmCommandBatchMetadata = Encoded<'/axelar.evm.v1beta1.CommandBatchMetadata'>;
export type EncodedAxelarEvmSigMetadata = Encoded<'/axelar.evm.v1beta1.SigMetadata'>;
export type EncodedAxelarEvmTransferKey = Encoded<'/axelar.evm.v1beta1.TransferKey'>;
export type EncodedAxelarEvmAsset = Encoded<'/axelar.evm.v1beta1.Asset'>;
export type EncodedAxelarEvmTokenDetails = Encoded<'/axelar.evm.v1beta1.TokenDetails'>;
export type EncodedAxelarEvmGateway = Encoded<'/axelar.evm.v1beta1.Gateway'>;
export type EncodedAxelarEvmPollMetadata = Encoded<'/axelar.evm.v1beta1.PollMetadata'>;
/**
 * Encodes a `VoteEvents` protobuf message:
 * @param s_chain - `chain`:
 * @param a_events - `events`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmVoteEvents: (s_chain?: Opt<string>, a_events?: Opt<Encoded<'/axelar.evm.v1beta1.Event'>[]>) => EncodedAxelarEvmVoteEvents;
/**
 * Encodes a `Event` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @param sg_index - `index`:
 * @param xc_status - `status`:
 * @param g_token_sent - `token_sent`:
 * @param g_contract_call - `contract_call`:
 * @param g_contract_call_with_token - `contract_call_with_token`:
 * @param g_transfer - `transfer`:
 * @param g_token_deployed - `token_deployed`:
 * @param g_multisig_ownership_transferred - `multisig_ownership_transferred`:
 * @param g_multisig_operatorship_transferred - `multisig_operatorship_transferred`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEvent: (s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>, sg_index?: Opt<WeakUint64Str>, xc_status?: Opt<ProtoEnumAxelarEvmEventStatus>, atu8_token_sent?: Opt<Encoded<'/axelar.evm.v1beta1.EventTokenSent'>>, atu8_contract_call?: Opt<Encoded<'/axelar.evm.v1beta1.EventContractCall'>>, atu8_contract_call_with_token?: Opt<Encoded<'/axelar.evm.v1beta1.EventContractCallWithToken'>>, atu8_transfer?: Opt<Encoded<'/axelar.evm.v1beta1.EventTransfer'>>, atu8_token_deployed?: Opt<Encoded<'/axelar.evm.v1beta1.EventTokenDeployed'>>, atu8_multisig_ownership_transferred?: Opt<Encoded<'/axelar.evm.v1beta1.EventMultisigOwnershipTransferred'>>, atu8_multisig_operatorship_transferred?: Opt<Encoded<'/axelar.evm.v1beta1.EventMultisigOperatorshipTransferred'>>) => EncodedAxelarEvmEvent;
/**
 * Encodes a `EventTokenSent` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param s_symbol - `symbol`:
 * @param atu8_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventTokenSent: (sa_sender?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_destination?: Opt<WeakAccountAddr>, s_symbol?: Opt<string>, atu8_amount?: Opt<Uint8Array>) => EncodedAxelarEvmEventTokenSent;
/**
 * Encodes a `EventContractCall` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventContractCall: (sa_sender?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_contract?: Opt<WeakAccountAddr>, atu8_payload_hash?: Opt<Uint8Array>) => EncodedAxelarEvmEventContractCall;
/**
 * Encodes a `EventContractCallWithToken` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param s_symbol - `symbol`:
 * @param atu8_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventContractCallWithToken: (sa_sender?: Opt<WeakAccountAddr>, s_destination_chain?: Opt<string>, sa_contract?: Opt<WeakAccountAddr>, atu8_payload_hash?: Opt<Uint8Array>, s_symbol?: Opt<string>, atu8_amount?: Opt<Uint8Array>) => EncodedAxelarEvmEventContractCallWithToken;
/**
 * Encodes a `EventTransfer` protobuf message:
 * @param atu8_to - `to`:
 * @param atu8_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventTransfer: (atu8_to?: Opt<Uint8Array>, atu8_amount?: Opt<Uint8Array>) => EncodedAxelarEvmEventTransfer;
/**
 * Encodes a `EventTokenDeployed` protobuf message:
 * @param s_symbol - `symbol`:
 * @param atu8_token_address - `token_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventTokenDeployed: (s_symbol?: Opt<string>, atu8_token_address?: Opt<Uint8Array>) => EncodedAxelarEvmEventTokenDeployed;
/**
 * Encodes a `EventMultisigOwnershipTransferred` protobuf message:
 * @param a_pre_owners - `pre_owners`:
 * @param atu8_prev_threshold - `prev_threshold`:
 * @param a_new_owners - `new_owners`:
 * @param atu8_new_threshold - `new_threshold`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventMultisigOwnershipTransferred: (a_pre_owners?: Opt<Uint8Array[]>, atu8_prev_threshold?: Opt<Uint8Array>, a_new_owners?: Opt<Uint8Array[]>, atu8_new_threshold?: Opt<Uint8Array>) => EncodedAxelarEvmEventMultisigOwnershipTransferred;
/**
 * Encodes a `EventMultisigOperatorshipTransferred` protobuf message:
 * @param a_new_operators - `new_operators`:
 * @param atu8_new_threshold - `new_threshold`:
 * @param a_new_weights - `new_weights`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmEventMultisigOperatorshipTransferred: (a_new_operators?: Opt<Uint8Array[]>, atu8_new_threshold?: Opt<Uint8Array>, a_new_weights?: Opt<Uint8Array[]>) => EncodedAxelarEvmEventMultisigOperatorshipTransferred;
/**
 * Encodes a `NetworkInfo` protobuf message: describes information about a network
 * @param s_name - `name`:
 * @param atu8_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmNetworkInfo: (s_name?: Opt<string>, atu8_id?: Opt<Uint8Array>) => EncodedAxelarEvmNetworkInfo;
/**
 * Encodes a `BurnerInfo` protobuf message: describes information required to burn token at an burner address that is deposited by an user
 * @param atu8_burner_address - `burner_address`:
 * @param atu8_token_address - `token_address`:
 * @param s_destination_chain - `destination_chain`:
 * @param s_symbol - `symbol`:
 * @param s_asset - `asset`:
 * @param atu8_salt - `salt`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmBurnerInfo: (atu8_burner_address?: Opt<Uint8Array>, atu8_token_address?: Opt<Uint8Array>, s_destination_chain?: Opt<string>, s_symbol?: Opt<string>, s_asset?: Opt<string>, atu8_salt?: Opt<Uint8Array>) => EncodedAxelarEvmBurnerInfo;
/**
 * Encodes a `ERC20Deposit` protobuf message: contains information for an ERC20 deposit
 * @param atu8_tx_id - `tx_id`:
 * @param atu8_amount - `amount`:
 * @param s_asset - `asset`:
 * @param s_destination_chain - `destination_chain`:
 * @param atu8_burner_address - `burner_address`:
 * @param sg_log_index - `log_index`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmERC20Deposit: (atu8_tx_id?: Opt<Uint8Array>, atu8_amount?: Opt<Uint8Array>, s_asset?: Opt<string>, s_destination_chain?: Opt<string>, atu8_burner_address?: Opt<Uint8Array>, sg_log_index?: Opt<WeakUint64Str>) => EncodedAxelarEvmERC20Deposit;
/**
 * Encodes a `ERC20TokenMetadata` protobuf message: describes information about an ERC20 token
 * @param s_asset - `asset`:
 * @param atu8_chain_id - `chain_id`:
 * @param g_details - `details`:
 * @param sa_token - `token_address`:
 * @param s_tx_hash - `tx_hash`:
 * @param xc_status - `status`:
 * @param b_is_external - `is_external`:
 * @param atu8_burner_code - `burner_code`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmERC20TokenMetadata: (s_asset?: Opt<string>, atu8_chain_id?: Opt<Uint8Array>, atu8_details?: Opt<Encoded<'/axelar.evm.v1beta1.TokenDetails'>>, sa_token?: Opt<WeakAccountAddr>, s_tx_hash?: Opt<string>, xc_status?: Opt<ProtoEnumAxelarEvmStatus>, b_is_external?: Opt<boolean | 0 | 1>, atu8_burner_code?: Opt<Uint8Array>) => EncodedAxelarEvmERC20TokenMetadata;
/**
 * Encodes a `TransactionMetadata` protobuf message:
 * @param atu8_raw_tx - `raw_tx`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmTransactionMetadata: (atu8_raw_tx?: Opt<Uint8Array>, atu8_pub_key?: Opt<Uint8Array>) => EncodedAxelarEvmTransactionMetadata;
/**
 * Encodes a `Command` protobuf message:
 * @param atu8_id - `id`:
 * @param s_command - `command`:
 * @param atu8_params - `params`:
 * @param si_key - `key_id`:
 * @param n_max_gas_cost - `max_gas_cost`:
 * @param xc_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommand: (atu8_id?: Opt<Uint8Array>, s_command?: Opt<string>, atu8_params?: Opt<Uint8Array>, si_key?: Opt<string>, n_max_gas_cost?: Opt<number>, xc_type?: Opt<ProtoEnumAxelarEvmCommandType>) => EncodedAxelarEvmCommand;
/**
 * Encodes a `CommandBatchMetadata` protobuf message:
 * @param atu8_id - `id`:
 * @param a_command_ids - `command_ids`:
 * @param atu8_data - `data`:
 * @param atu8_sig_hash - `sig_hash`:
 * @param xc_status - `status`:
 * @param si_key - `key_id`:
 * @param atu8_prev_batched_commands_id - `prev_batched_commands_id`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmCommandBatchMetadata: (atu8_id?: Opt<Uint8Array>, a_command_ids?: Opt<Uint8Array[]>, atu8_data?: Opt<Uint8Array>, atu8_sig_hash?: Opt<Uint8Array>, xc_status?: Opt<ProtoEnumAxelarEvmBatchedCommandsStatus>, si_key?: Opt<string>, atu8_prev_batched_commands_id?: Opt<Uint8Array>, atu8_signature?: Opt<Encoded<'github.com/cosmos/codec/ProtoMarshaler'>>) => EncodedAxelarEvmCommandBatchMetadata;
/**
 * Encodes a `SigMetadata` protobuf message: stores necessary information for external apps to map signature results to evm relay transaction types
 * @param xc_type - `type`:
 * @param s_chain - `chain`:
 * @param atu8_command_batch_id - `command_batch_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmSigMetadata: (xc_type?: Opt<ProtoEnumAxelarEvmSigType>, s_chain?: Opt<string>, atu8_command_batch_id?: Opt<Uint8Array>) => EncodedAxelarEvmSigMetadata;
/**
 * Encodes a `TransferKey` protobuf message: contains information for a transfer operatorship
 * @param atu8_tx_id - `tx_id`:
 * @param si_next_key - `next_key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmTransferKey: (atu8_tx_id?: Opt<Uint8Array>, si_next_key?: Opt<string>) => EncodedAxelarEvmTransferKey;
/**
 * Encodes a `Asset` protobuf message:
 * @param s_chain - `chain`:
 * @param s_name - `name`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmAsset: (s_chain?: Opt<string>, s_name?: Opt<string>) => EncodedAxelarEvmAsset;
/**
 * Encodes a `TokenDetails` protobuf message:
 * @param s_token_name - `token_name`:
 * @param s_symbol - `symbol`:
 * @param n_decimals - `decimals`:
 * @param atu8_capacity - `capacity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmTokenDetails: (s_token_name?: Opt<string>, s_symbol?: Opt<string>, n_decimals?: Opt<number>, atu8_capacity?: Opt<Uint8Array>) => EncodedAxelarEvmTokenDetails;
/**
 * Encodes a `Gateway` protobuf message:
 * @param atu8_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmGateway: (atu8_address?: Opt<Uint8Array>) => EncodedAxelarEvmGateway;
/**
 * Encodes a `PollMetadata` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarEvmPollMetadata: (s_chain?: Opt<string>, atu8_tx_id?: Opt<Uint8Array>) => EncodedAxelarEvmPollMetadata;
/**
 * A decoded protobuf VoteEvents message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: events -
 */
export type DecodedAxelarEvmVoteEvents = [
    s_chain?: string,
    a_events?: DecodedAxelarEvmEvent[]
];
/**
 * Decodes a protobuf VoteEvents message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmVoteEvents}
 */
export declare const decodeAxelarEvmVoteEvents: (atu8_payload: Uint8Array) => DecodedAxelarEvmVoteEvents;
/**
 * A decoded protobuf Event message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 *   - 2: index -
 *   - 3: status -
 *   - 4: token_sent -
 *   - 5: contract_call -
 *   - 6: contract_call_with_token -
 *   - 7: transfer -
 *   - 8: token_deployed -
 *   - 9: multisig_ownership_transferred -
 *   - 10: multisig_operatorship_transferred -
 */
export type DecodedAxelarEvmEvent = [
    s_chain?: string,
    atu8_tx_id?: Uint8Array,
    sg_index?: CwUint64,
    xc_status?: ProtoEnumAxelarEvmEventStatus,
    a_token_sent?: DecodedAxelarEvmEventTokenSent,
    a_contract_call?: DecodedAxelarEvmEventContractCall,
    a_contract_call_with_token?: DecodedAxelarEvmEventContractCallWithToken,
    a_transfer?: DecodedAxelarEvmEventTransfer,
    a_token_deployed?: DecodedAxelarEvmEventTokenDeployed,
    a_multisig_ownership_transferred?: DecodedAxelarEvmEventMultisigOwnershipTransferred,
    a_multisig_operatorship_transferred?: DecodedAxelarEvmEventMultisigOperatorshipTransferred
];
/**
 * Decodes a protobuf Event message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEvent}
 */
export declare const decodeAxelarEvmEvent: (atu8_payload: Uint8Array) => DecodedAxelarEvmEvent;
/**
 * A decoded protobuf EventTokenSent message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: destination_address -
 *   - 3: symbol -
 *   - 4: amount -
 */
export type DecodedAxelarEvmEventTokenSent = [
    sa_sender?: CwAccountAddr,
    s_destination_chain?: string,
    sa_destination?: CwAccountAddr,
    s_symbol?: string,
    atu8_amount?: Uint8Array
];
/**
 * Decodes a protobuf EventTokenSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventTokenSent}
 */
export declare const decodeAxelarEvmEventTokenSent: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventTokenSent;
/**
 * A decoded protobuf EventContractCall message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: contract_address -
 *   - 3: payload_hash -
 */
export type DecodedAxelarEvmEventContractCall = [
    sa_sender?: CwAccountAddr,
    s_destination_chain?: string,
    sa_contract?: CwAccountAddr,
    atu8_payload_hash?: Uint8Array
];
/**
 * Decodes a protobuf EventContractCall message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventContractCall}
 */
export declare const decodeAxelarEvmEventContractCall: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventContractCall;
/**
 * A decoded protobuf EventContractCallWithToken message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: contract_address -
 *   - 3: payload_hash -
 *   - 4: symbol -
 *   - 5: amount -
 */
export type DecodedAxelarEvmEventContractCallWithToken = [
    sa_sender?: CwAccountAddr,
    s_destination_chain?: string,
    sa_contract?: CwAccountAddr,
    atu8_payload_hash?: Uint8Array,
    s_symbol?: string,
    atu8_amount?: Uint8Array
];
/**
 * Decodes a protobuf EventContractCallWithToken message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventContractCallWithToken}
 */
export declare const decodeAxelarEvmEventContractCallWithToken: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventContractCallWithToken;
/**
 * A decoded protobuf EventTransfer message
 *
 * Tuple where:
 *   - 0: to -
 *   - 1: amount -
 */
export type DecodedAxelarEvmEventTransfer = [
    atu8_to?: Uint8Array,
    atu8_amount?: Uint8Array
];
/**
 * Decodes a protobuf EventTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventTransfer}
 */
export declare const decodeAxelarEvmEventTransfer: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventTransfer;
/**
 * A decoded protobuf EventTokenDeployed message
 *
 * Tuple where:
 *   - 0: symbol -
 *   - 1: token_address -
 */
export type DecodedAxelarEvmEventTokenDeployed = [
    s_symbol?: string,
    atu8_token_address?: Uint8Array
];
/**
 * Decodes a protobuf EventTokenDeployed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventTokenDeployed}
 */
export declare const decodeAxelarEvmEventTokenDeployed: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventTokenDeployed;
/**
 * A decoded protobuf EventMultisigOwnershipTransferred message
 *
 * Tuple where:
 *   - 0: pre_owners -
 *   - 1: prev_threshold -
 *   - 2: new_owners -
 *   - 3: new_threshold -
 */
export type DecodedAxelarEvmEventMultisigOwnershipTransferred = [
    a_pre_owners?: Uint8Array[],
    atu8_prev_threshold?: Uint8Array,
    a_new_owners?: Uint8Array[],
    atu8_new_threshold?: Uint8Array
];
/**
 * Decodes a protobuf EventMultisigOwnershipTransferred message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventMultisigOwnershipTransferred}
 */
export declare const decodeAxelarEvmEventMultisigOwnershipTransferred: (atu8_payload: Uint8Array) => DecodedAxelarEvmEventMultisigOwnershipTransferred;
/**
 * A decoded protobuf EventMultisigOperatorshipTransferred message
 *
 * Tuple where:
 *   - 2: new_operators -
 *   - 3: new_threshold -
 *   - 4: new_weights -
 */
export type DecodedAxelarEvmEventMultisigOperatorshipTransferred = [
    w_0?: undefined,
    w_1?: undefined,
    a_new_operators?: Uint8Array[],
    atu8_new_threshold?: Uint8Array,
    a_new_weights?: Uint8Array[]
];
/**
 * Decodes a protobuf EventMultisigOperatorshipTransferred message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmEventMultisigOperatorshipTransferred}
 */
export declare const decodeAxelarEvmEventMultisigOperatorshipTransferred: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmEventMultisigOperatorshipTransferred;
/**
 * A decoded protobuf NetworkInfo message
 *
 * Tuple where:
 *   - 0: name -
 *   - 1: id -
 */
export type DecodedAxelarEvmNetworkInfo = [
    s_name?: string,
    atu8_id?: Uint8Array
];
/**
 * Decodes a protobuf NetworkInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmNetworkInfo}
 */
export declare const decodeAxelarEvmNetworkInfo: (atu8_payload: Uint8Array) => DecodedAxelarEvmNetworkInfo;
/**
 * A decoded protobuf BurnerInfo message
 *
 * Tuple where:
 *   - 0: burner_address -
 *   - 1: token_address -
 *   - 2: destination_chain -
 *   - 3: symbol -
 *   - 4: asset -
 *   - 5: salt -
 */
export type DecodedAxelarEvmBurnerInfo = [
    atu8_burner_address?: Uint8Array,
    atu8_token_address?: Uint8Array,
    s_destination_chain?: string,
    s_symbol?: string,
    s_asset?: string,
    atu8_salt?: Uint8Array
];
/**
 * Decodes a protobuf BurnerInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBurnerInfo}
 */
export declare const decodeAxelarEvmBurnerInfo: (atu8_payload: Uint8Array) => DecodedAxelarEvmBurnerInfo;
/**
 * A decoded protobuf ERC20Deposit message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 1: amount -
 *   - 2: asset -
 *   - 3: destination_chain -
 *   - 4: burner_address -
 *   - 5: log_index -
 */
export type DecodedAxelarEvmERC20Deposit = [
    atu8_tx_id?: Uint8Array,
    atu8_amount?: Uint8Array,
    s_asset?: string,
    s_destination_chain?: string,
    atu8_burner_address?: Uint8Array,
    sg_log_index?: CwUint64
];
/**
 * Decodes a protobuf ERC20Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmERC20Deposit}
 */
export declare const decodeAxelarEvmERC20Deposit: (atu8_payload: Uint8Array) => DecodedAxelarEvmERC20Deposit;
/**
 * A decoded protobuf ERC20TokenMetadata message
 *
 * Tuple where:
 *   - 0: asset -
 *   - 1: chain_id -
 *   - 2: details -
 *   - 3: token_address -
 *   - 4: tx_hash -
 *   - 6: status -
 *   - 7: is_external -
 *   - 8: burner_code -
 */
export type DecodedAxelarEvmERC20TokenMetadata = [
    s_asset?: string,
    atu8_chain_id?: Uint8Array,
    a_details?: DecodedAxelarEvmTokenDetails,
    sa_token?: CwAccountAddr,
    s_tx_hash?: string,
    w_0?: undefined,
    xc_status?: ProtoEnumAxelarEvmStatus,
    b_is_external?: 0 | 1,
    atu8_burner_code?: Uint8Array
];
/**
 * Decodes a protobuf ERC20TokenMetadata message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmERC20TokenMetadata}
 */
export declare const decodeAxelarEvmERC20TokenMetadata: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmERC20TokenMetadata;
/**
 * A decoded protobuf TransactionMetadata message
 *
 * Tuple where:
 *   - 0: raw_tx -
 *   - 1: pub_key -
 */
export type DecodedAxelarEvmTransactionMetadata = [
    atu8_raw_tx?: Uint8Array,
    atu8_pub_key?: Uint8Array
];
/**
 * Decodes a protobuf TransactionMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTransactionMetadata}
 */
export declare const decodeAxelarEvmTransactionMetadata: (atu8_payload: Uint8Array) => DecodedAxelarEvmTransactionMetadata;
/**
 * A decoded protobuf Command message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: command -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 *   - 5: type -
 */
export type DecodedAxelarEvmCommand = [
    atu8_id?: Uint8Array,
    s_command?: string,
    atu8_params?: Uint8Array,
    si_key?: string,
    n_max_gas_cost?: number,
    xc_type?: ProtoEnumAxelarEvmCommandType
];
/**
 * Decodes a protobuf Command message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommand}
 */
export declare const decodeAxelarEvmCommand: (atu8_payload: Uint8Array) => DecodedAxelarEvmCommand;
/**
 * A decoded protobuf CommandBatchMetadata message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: command_ids -
 *   - 2: data -
 *   - 3: sig_hash -
 *   - 4: status -
 *   - 5: key_id -
 *   - 6: prev_batched_commands_id -
 *   - 7: signature -
 */
export type DecodedAxelarEvmCommandBatchMetadata = [
    atu8_id?: Uint8Array,
    a_command_ids?: Uint8Array[],
    atu8_data?: Uint8Array,
    atu8_sig_hash?: Uint8Array,
    xc_status?: ProtoEnumAxelarEvmBatchedCommandsStatus,
    si_key?: string,
    atu8_prev_batched_commands_id?: Uint8Array,
    a_signature?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf CommandBatchMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommandBatchMetadata}
 */
export declare const decodeAxelarEvmCommandBatchMetadata: (atu8_payload: Uint8Array) => DecodedAxelarEvmCommandBatchMetadata;
/**
 * A decoded protobuf SigMetadata message
 *
 * Tuple where:
 *   - 0: type -
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export type DecodedAxelarEvmSigMetadata = [
    xc_type?: ProtoEnumAxelarEvmSigType,
    s_chain?: string,
    atu8_command_batch_id?: Uint8Array
];
/**
 * Decodes a protobuf SigMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmSigMetadata}
 */
export declare const decodeAxelarEvmSigMetadata: (atu8_payload: Uint8Array) => DecodedAxelarEvmSigMetadata;
/**
 * A decoded protobuf TransferKey message
 *
 * Tuple where:
 *   - 0: tx_id -
 *   - 2: next_key_id -
 */
export type DecodedAxelarEvmTransferKey = [
    atu8_tx_id?: Uint8Array,
    w_0?: undefined,
    si_next_key?: string
];
/**
 * Decodes a protobuf TransferKey message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmTransferKey}
 */
export declare const decodeAxelarEvmTransferKey: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarEvmTransferKey;
/**
 * A decoded protobuf Asset message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: name -
 */
export type DecodedAxelarEvmAsset = [
    s_chain?: string,
    s_name?: string
];
/**
 * Decodes a protobuf Asset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmAsset}
 */
export declare const decodeAxelarEvmAsset: (atu8_payload: Uint8Array) => DecodedAxelarEvmAsset;
/**
 * A decoded protobuf TokenDetails message
 *
 * Tuple where:
 *   - 0: token_name -
 *   - 1: symbol -
 *   - 2: decimals -
 *   - 3: capacity -
 */
export type DecodedAxelarEvmTokenDetails = [
    s_token_name?: string,
    s_symbol?: string,
    n_decimals?: number,
    atu8_capacity?: Uint8Array
];
/**
 * Decodes a protobuf TokenDetails message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTokenDetails}
 */
export declare const decodeAxelarEvmTokenDetails: (atu8_payload: Uint8Array) => DecodedAxelarEvmTokenDetails;
/**
 * A decoded protobuf Gateway message
 *
 * Alias for: address -
 */
export type DecodedAxelarEvmGateway = [
    atu8_address?: Uint8Array
];
/**
 * Decodes a protobuf Gateway message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmGateway}
 */
export declare const decodeAxelarEvmGateway: (atu8_payload: Uint8Array) => DecodedAxelarEvmGateway;
/**
 * A decoded protobuf PollMetadata message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 */
export type DecodedAxelarEvmPollMetadata = [
    s_chain?: string,
    atu8_tx_id?: Uint8Array
];
/**
 * Decodes a protobuf PollMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollMetadata}
 */
export declare const decodeAxelarEvmPollMetadata: (atu8_payload: Uint8Array) => DecodedAxelarEvmPollMetadata;
/**
 * Destructures the fields of a {@link AxelarEvmAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: name -
 */
export declare const destructAxelarEvmAsset: (g_struct: AxelarEvmAsset) => [chain?: string, name?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_ASSET = "/axelar.evm.v1beta1.Asset";
/**
 * JSON serialization of `axelar.evm.v1beta1.Asset` -
 */
export type AxelarEvmAsset = {
    chain?: string | undefined;
    name?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmTokenDetails} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: token_name -
 *   - 1: symbol -
 *   - 2: decimals -
 *   - 3: capacity -
 */
export declare const destructAxelarEvmTokenDetails: (g_struct: AxelarEvmTokenDetails) => [token_name?: string, symbol?: string, decimals?: number, capacity?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_TOKEN_DETAILS = "/axelar.evm.v1beta1.TokenDetails";
/**
 * JSON serialization of `axelar.evm.v1beta1.TokenDetails` -
 */
export type AxelarEvmTokenDetails = {
    token_name?: string | undefined;
    symbol?: string | undefined;
    decimals?: number | undefined;
    capacity?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmVoteEvents} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: events -
 */
export declare const destructAxelarEvmVoteEvents: (g_struct: AxelarEvmVoteEvents) => [chain?: string, events?: AxelarEvmEvent[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_VOTE_EVENTS = "/axelar.evm.v1beta1.VoteEvents";
/**
 * JSON serialization of `axelar.evm.v1beta1.VoteEvents` -
 */
export type AxelarEvmVoteEvents = {
    chain?: string | undefined;
    events?: AxelarEvmEvent[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 *   - 2: index -
 *   - 3: status -
 *   - 4: token_sent -
 *   - 5: contract_call -
 *   - 6: contract_call_with_token -
 *   - 7: transfer -
 *   - 8: token_deployed -
 *   - 9: multisig_ownership_transferred -
 *   - 10: multisig_operatorship_transferred -
 */
export declare const destructAxelarEvmEvent: (g_struct: AxelarEvmEvent) => [chain?: string, tx_id?: Uint8Array, index?: CwUint64, status?: JsonEnumAxelarEvmEventStatus, token_sent?: AxelarEvmEventTokenSent, contract_call?: AxelarEvmEventContractCall, contract_call_with_token?: AxelarEvmEventContractCallWithToken, transfer?: AxelarEvmEventTransfer, token_deployed?: AxelarEvmEventTokenDeployed, multisig_ownership_transferred?: AxelarEvmEventMultisigOwnershipTransferred, multisig_operatorship_transferred?: AxelarEvmEventMultisigOperatorshipTransferred];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT = "/axelar.evm.v1beta1.Event";
/**
 * JSON serialization of `axelar.evm.v1beta1.Event` -
 */
export type AxelarEvmEvent = {
    chain?: string | undefined;
    tx_id?: CwBase64 | undefined;
    index?: CwUint64 | undefined;
    status?: JsonEnumAxelarEvmEventStatus | undefined;
    token_sent?: AxelarEvmEventTokenSent | undefined;
    contract_call?: AxelarEvmEventContractCall | undefined;
    contract_call_with_token?: AxelarEvmEventContractCallWithToken | undefined;
    transfer?: AxelarEvmEventTransfer | undefined;
    token_deployed?: AxelarEvmEventTokenDeployed | undefined;
    multisig_ownership_transferred?: AxelarEvmEventMultisigOwnershipTransferred | undefined;
    multisig_operatorship_transferred?: AxelarEvmEventMultisigOperatorshipTransferred | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventTokenSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: destination_address -
 *   - 3: symbol -
 *   - 4: amount -
 */
export declare const destructAxelarEvmEventTokenSent: (g_struct: AxelarEvmEventTokenSent) => [sender?: CwBase64, destination_chain?: string, destination_address?: CwAccountAddr, symbol?: string, amount?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_TOKEN_SENT = "/axelar.evm.v1beta1.EventTokenSent";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventTokenSent` -
 */
export type AxelarEvmEventTokenSent = {
    sender?: CwBase64 | undefined;
    destination_chain?: string | undefined;
    destination_address?: CwAccountAddr | undefined;
    symbol?: string | undefined;
    amount?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventContractCall} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: contract_address -
 *   - 3: payload_hash -
 */
export declare const destructAxelarEvmEventContractCall: (g_struct: AxelarEvmEventContractCall) => [sender?: CwBase64, destination_chain?: string, contract_address?: CwAccountAddr, payload_hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_CONTRACT_CALL = "/axelar.evm.v1beta1.EventContractCall";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventContractCall` -
 */
export type AxelarEvmEventContractCall = {
    sender?: CwBase64 | undefined;
    destination_chain?: string | undefined;
    contract_address?: CwAccountAddr | undefined;
    payload_hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventContractCallWithToken} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: contract_address -
 *   - 3: payload_hash -
 *   - 4: symbol -
 *   - 5: amount -
 */
export declare const destructAxelarEvmEventContractCallWithToken: (g_struct: AxelarEvmEventContractCallWithToken) => [sender?: CwBase64, destination_chain?: string, contract_address?: CwAccountAddr, payload_hash?: Uint8Array, symbol?: string, amount?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_CONTRACT_CALL_WITH_TOKEN = "/axelar.evm.v1beta1.EventContractCallWithToken";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventContractCallWithToken` -
 */
export type AxelarEvmEventContractCallWithToken = {
    sender?: CwBase64 | undefined;
    destination_chain?: string | undefined;
    contract_address?: CwAccountAddr | undefined;
    payload_hash?: CwBase64 | undefined;
    symbol?: string | undefined;
    amount?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: to -
 *   - 1: amount -
 */
export declare const destructAxelarEvmEventTransfer: (g_struct: AxelarEvmEventTransfer) => [to?: Uint8Array, amount?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_TRANSFER = "/axelar.evm.v1beta1.EventTransfer";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventTransfer` -
 */
export type AxelarEvmEventTransfer = {
    to?: CwBase64 | undefined;
    amount?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventTokenDeployed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: symbol -
 *   - 1: token_address -
 */
export declare const destructAxelarEvmEventTokenDeployed: (g_struct: AxelarEvmEventTokenDeployed) => [symbol?: string, token_address?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_TOKEN_DEPLOYED = "/axelar.evm.v1beta1.EventTokenDeployed";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventTokenDeployed` -
 */
export type AxelarEvmEventTokenDeployed = {
    symbol?: string | undefined;
    token_address?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventMultisigOwnershipTransferred} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pre_owners -
 *   - 1: prev_threshold -
 *   - 2: new_owners -
 *   - 3: new_threshold -
 */
export declare const destructAxelarEvmEventMultisigOwnershipTransferred: (g_struct: AxelarEvmEventMultisigOwnershipTransferred) => [pre_owners?: Uint8Array[], prev_threshold?: Uint8Array, new_owners?: Uint8Array[], new_threshold?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_MULTISIG_OWNERSHIP_TRANSFERRED = "/axelar.evm.v1beta1.EventMultisigOwnershipTransferred";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventMultisigOwnershipTransferred` -
 */
export type AxelarEvmEventMultisigOwnershipTransferred = {
    pre_owners?: CwBase64[] | undefined;
    prev_threshold?: CwBase64 | undefined;
    new_owners?: CwBase64[] | undefined;
    new_threshold?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmEventMultisigOperatorshipTransferred} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 2: new_operators -
 *   - 3: new_threshold -
 *   - 4: new_weights -
 */
export declare const destructAxelarEvmEventMultisigOperatorshipTransferred: (g_struct: AxelarEvmEventMultisigOperatorshipTransferred) => [EMPTY?: void, EMPTY?: void, new_operators?: Uint8Array[], new_threshold?: Uint8Array, new_weights?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_MULTISIG_OPERATORSHIP_TRANSFERRED = "/axelar.evm.v1beta1.EventMultisigOperatorshipTransferred";
/**
 * JSON serialization of `axelar.evm.v1beta1.EventMultisigOperatorshipTransferred` -
 */
export type AxelarEvmEventMultisigOperatorshipTransferred = {
    new_operators?: CwBase64[] | undefined;
    new_threshold?: CwBase64 | undefined;
    new_weights?: CwBase64[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmNetworkInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: id -
 */
export declare const destructAxelarEvmNetworkInfo: (g_struct: AxelarEvmNetworkInfo) => [name?: string, id?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_NETWORK_INFO = "/axelar.evm.v1beta1.NetworkInfo";
/**
 * JSON serialization of `axelar.evm.v1beta1.NetworkInfo` - describes information about a network
 */
export type AxelarEvmNetworkInfo = {
    name?: string | undefined;
    id?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmBurnerInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: burner_address -
 *   - 1: token_address -
 *   - 2: destination_chain -
 *   - 3: symbol -
 *   - 4: asset -
 *   - 5: salt -
 */
export declare const destructAxelarEvmBurnerInfo: (g_struct: AxelarEvmBurnerInfo) => [burner_address?: Uint8Array, token_address?: Uint8Array, destination_chain?: string, symbol?: string, asset?: string, salt?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_BURNER_INFO = "/axelar.evm.v1beta1.BurnerInfo";
/**
 * JSON serialization of `axelar.evm.v1beta1.BurnerInfo` - describes information required to burn token at an burner address that is deposited by an user
 */
export type AxelarEvmBurnerInfo = {
    burner_address?: CwBase64 | undefined;
    token_address?: CwBase64 | undefined;
    destination_chain?: string | undefined;
    symbol?: string | undefined;
    asset?: string | undefined;
    salt?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmERC20Deposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: amount -
 *   - 2: asset -
 *   - 3: destination_chain -
 *   - 4: burner_address -
 *   - 5: log_index -
 */
export declare const destructAxelarEvmERC20Deposit: (g_struct: AxelarEvmERC20Deposit) => [tx_id?: Uint8Array, amount?: Uint8Array, asset?: string, destination_chain?: string, burner_address?: Uint8Array, log_index?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_DEPOSIT = "/axelar.evm.v1beta1.ERC20Deposit";
/**
 * JSON serialization of `axelar.evm.v1beta1.ERC20Deposit` - contains information for an ERC20 deposit
 */
export type AxelarEvmERC20Deposit = {
    tx_id?: CwBase64 | undefined;
    amount?: CwBase64 | undefined;
    asset?: string | undefined;
    destination_chain?: string | undefined;
    burner_address?: CwBase64 | undefined;
    log_index?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmERC20TokenMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: asset -
 *   - 1: chain_id -
 *   - 2: details -
 *   - 3: token_address -
 *   - 4: tx_hash -
 *   - 6: status -
 *   - 7: is_external -
 *   - 8: burner_code -
 */
export declare const destructAxelarEvmERC20TokenMetadata: (g_struct: AxelarEvmERC20TokenMetadata) => [asset?: string, chain_id?: Uint8Array, details?: AxelarEvmTokenDetails, token_address?: CwAccountAddr, tx_hash?: string, EMPTY?: void, status?: JsonEnumAxelarEvmStatus, is_external?: boolean, burner_code?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_TOKEN_METADATA = "/axelar.evm.v1beta1.ERC20TokenMetadata";
/**
 * JSON serialization of `axelar.evm.v1beta1.ERC20TokenMetadata` - describes information about an ERC20 token
 */
export type AxelarEvmERC20TokenMetadata = {
    asset?: string | undefined;
    chain_id?: CwBase64 | undefined;
    details?: AxelarEvmTokenDetails | undefined;
    token_address?: CwAccountAddr | undefined;
    tx_hash?: string | undefined;
    status?: JsonEnumAxelarEvmStatus | undefined;
    is_external?: boolean | undefined;
    burner_code?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmTransactionMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: raw_tx -
 *   - 1: pub_key -
 */
export declare const destructAxelarEvmTransactionMetadata: (g_struct: AxelarEvmTransactionMetadata) => [raw_tx?: Uint8Array, pub_key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_TRANSACTION_METADATA = "/axelar.evm.v1beta1.TransactionMetadata";
/**
 * JSON serialization of `axelar.evm.v1beta1.TransactionMetadata` -
 */
export type AxelarEvmTransactionMetadata = {
    raw_tx?: CwBase64 | undefined;
    pub_key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommand} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: command -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 *   - 5: type -
 */
export declare const destructAxelarEvmCommand: (g_struct: AxelarEvmCommand) => [id?: Uint8Array, command?: string, params?: Uint8Array, key_id?: string, max_gas_cost?: number, type_?: JsonEnumAxelarEvmCommandType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND = "/axelar.evm.v1beta1.Command";
/**
 * JSON serialization of `axelar.evm.v1beta1.Command` -
 */
export type AxelarEvmCommand = {
    id?: CwBase64 | undefined;
    command?: string | undefined;
    params?: CwBase64 | undefined;
    key_id?: string | undefined;
    max_gas_cost?: number | undefined;
    type?: JsonEnumAxelarEvmCommandType | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmCommandBatchMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: command_ids -
 *   - 2: data -
 *   - 3: sig_hash -
 *   - 4: status -
 *   - 5: key_id -
 *   - 6: prev_batched_commands_id -
 *   - 7: signature -
 */
export declare const destructAxelarEvmCommandBatchMetadata: (g_struct: AxelarEvmCommandBatchMetadata) => [id?: Uint8Array, command_ids?: Uint8Array[], data?: Uint8Array, sig_hash?: Uint8Array, status?: JsonEnumAxelarEvmBatchedCommandsStatus, key_id?: string, prev_batched_commands_id?: Uint8Array, signature?: JsonAny<string>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_BATCH_METADATA = "/axelar.evm.v1beta1.CommandBatchMetadata";
/**
 * JSON serialization of `axelar.evm.v1beta1.CommandBatchMetadata` -
 */
export type AxelarEvmCommandBatchMetadata = {
    id?: CwBase64 | undefined;
    command_ids?: CwBase64[] | undefined;
    data?: CwBase64 | undefined;
    sig_hash?: CwBase64 | undefined;
    status?: JsonEnumAxelarEvmBatchedCommandsStatus | undefined;
    key_id?: string | undefined;
    prev_batched_commands_id?: CwBase64 | undefined;
    signature?: JsonAny<string> | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmSigMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export declare const destructAxelarEvmSigMetadata: (g_struct: AxelarEvmSigMetadata) => [type_?: JsonEnumAxelarEvmSigType, chain?: string, command_batch_id?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_SIG_METADATA = "/axelar.evm.v1beta1.SigMetadata";
/**
 * JSON serialization of `axelar.evm.v1beta1.SigMetadata` - stores necessary information for external apps to map signature results to evm relay transaction types
 */
export type AxelarEvmSigMetadata = {
    type?: JsonEnumAxelarEvmSigType | undefined;
    chain?: string | undefined;
    command_batch_id?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmTransferKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 2: next_key_id -
 */
export declare const destructAxelarEvmTransferKey: (g_struct: AxelarEvmTransferKey) => [tx_id?: Uint8Array, EMPTY?: void, next_key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_TRANSFER_KEY = "/axelar.evm.v1beta1.TransferKey";
/**
 * JSON serialization of `axelar.evm.v1beta1.TransferKey` - contains information for a transfer operatorship
 */
export type AxelarEvmTransferKey = {
    tx_id?: CwBase64 | undefined;
    next_key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmGateway} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export declare const destructAxelarEvmGateway: (g_struct: AxelarEvmGateway) => [address?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_GATEWAY = "/axelar.evm.v1beta1.Gateway";
/**
 * JSON serialization of `axelar.evm.v1beta1.Gateway` -
 */
export type AxelarEvmGateway = {
    address?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarEvmPollMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 */
export declare const destructAxelarEvmPollMetadata: (g_struct: AxelarEvmPollMetadata) => [chain?: string, tx_id?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_METADATA = "/axelar.evm.v1beta1.PollMetadata";
/**
 * JSON serialization of `axelar.evm.v1beta1.PollMetadata` -
 */
export type AxelarEvmPollMetadata = {
    chain?: string | undefined;
    tx_id?: CwBase64 | undefined;
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export declare const SI_JSON_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED = "EventNonExistent";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_EVENT_STATUS_CONFIRMED = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export declare const SI_JSON_AXELAR_EVM_EVENT_STATUS_CONFIRMED = "EventConfirmed";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_EVENT_STATUS_COMPLETED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export declare const SI_JSON_AXELAR_EVM_EVENT_STATUS_COMPLETED = "EventCompleted";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_EVENT_STATUS_FAILED = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export declare const SI_JSON_AXELAR_EVM_EVENT_STATUS_FAILED = "EventFailed";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.Event.Status` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_EVENT_STATUS_CONFIRMED}
 *   - {@link XC_PROTO_AXELAR_EVM_EVENT_STATUS_COMPLETED}
 *   - {@link XC_PROTO_AXELAR_EVM_EVENT_STATUS_FAILED}
 */
export type ProtoEnumAxelarEvmEventStatus = typeof XC_PROTO_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_EVENT_STATUS_CONFIRMED | typeof XC_PROTO_AXELAR_EVM_EVENT_STATUS_COMPLETED | typeof XC_PROTO_AXELAR_EVM_EVENT_STATUS_FAILED;
/**
 * JSON enum values for `axelar.evm.v1beta1.Event.Status` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_EVENT_STATUS_CONFIRMED}
 *   - {@link SI_JSON_AXELAR_EVM_EVENT_STATUS_COMPLETED}
 *   - {@link SI_JSON_AXELAR_EVM_EVENT_STATUS_FAILED}
 */
export type JsonEnumAxelarEvmEventStatus = typeof SI_JSON_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_EVENT_STATUS_CONFIRMED | typeof SI_JSON_AXELAR_EVM_EVENT_STATUS_COMPLETED | typeof SI_JSON_AXELAR_EVM_EVENT_STATUS_FAILED;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.Event.Status` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmEventStatus: Record<ProtoEnumAxelarEvmEventStatus, JsonEnumAxelarEvmEventStatus>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.Event.Status` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmEventStatus: Record<JsonEnumAxelarEvmEventStatus, ProtoEnumAxelarEvmEventStatus>;
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_UNSPECIFIED** - these enum values are used for bitwise operations, therefore they need to be powers of 2
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_UNSPECIFIED** - these enum values are used for bitwise operations, therefore they need to be powers of 2
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export declare const SI_JSON_AXELAR_EVM_STATUS_UNSPECIFIED = "NonExistent";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_INITIALIZED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_STATUS_INITIALIZED = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_INITIALIZED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export declare const SI_JSON_AXELAR_EVM_STATUS_INITIALIZED = "Initialized";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_STATUS_PENDING = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export declare const SI_JSON_AXELAR_EVM_STATUS_PENDING = "Pending";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_STATUS_CONFIRMED = 4;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export declare const SI_JSON_AXELAR_EVM_STATUS_CONFIRMED = "Confirmed";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.Status` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_STATUS_INITIALIZED}
 *   - {@link XC_PROTO_AXELAR_EVM_STATUS_PENDING}
 *   - {@link XC_PROTO_AXELAR_EVM_STATUS_CONFIRMED}
 */
export type ProtoEnumAxelarEvmStatus = typeof XC_PROTO_AXELAR_EVM_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_STATUS_INITIALIZED | typeof XC_PROTO_AXELAR_EVM_STATUS_PENDING | typeof XC_PROTO_AXELAR_EVM_STATUS_CONFIRMED;
/**
 * JSON enum values for `axelar.evm.v1beta1.Status` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_STATUS_INITIALIZED}
 *   - {@link SI_JSON_AXELAR_EVM_STATUS_PENDING}
 *   - {@link SI_JSON_AXELAR_EVM_STATUS_CONFIRMED}
 */
export type JsonEnumAxelarEvmStatus = typeof SI_JSON_AXELAR_EVM_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_STATUS_INITIALIZED | typeof SI_JSON_AXELAR_EVM_STATUS_PENDING | typeof SI_JSON_AXELAR_EVM_STATUS_CONFIRMED;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.Status` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmStatus: Record<ProtoEnumAxelarEvmStatus, JsonEnumAxelarEvmStatus>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.Status` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmStatus: Record<JsonEnumAxelarEvmStatus, ProtoEnumAxelarEvmStatus>;
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED = "COMMAND_TYPE_UNSPECIFIED";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_MINT_TOKEN** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_MINT_TOKEN** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN = "COMMAND_TYPE_MINT_TOKEN";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_DEPLOY_TOKEN** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_DEPLOY_TOKEN** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN = "COMMAND_TYPE_DEPLOY_TOKEN";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_BURN_TOKEN** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_BURN_TOKEN** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN = "COMMAND_TYPE_BURN_TOKEN";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_TRANSFER_OPERATORSHIP** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP = 4;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_TRANSFER_OPERATORSHIP** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP = "COMMAND_TYPE_TRANSFER_OPERATORSHIP";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT = 5;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT = "COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export declare const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL = 6;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export declare const SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL = "COMMAND_TYPE_APPROVE_CONTRACT_CALL";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.CommandType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN}
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN}
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN}
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP}
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT}
 *   - {@link XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL}
 */
export type ProtoEnumAxelarEvmCommandType = typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN | typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN | typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN | typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP | typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT | typeof XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL;
/**
 * JSON enum values for `axelar.evm.v1beta1.CommandType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN}
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN}
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN}
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP}
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT}
 *   - {@link SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL}
 */
export type JsonEnumAxelarEvmCommandType = typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN | typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN | typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN | typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP | typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT | typeof SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.CommandType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmCommandType: Record<ProtoEnumAxelarEvmCommandType, JsonEnumAxelarEvmCommandType>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.CommandType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmCommandType: Record<JsonEnumAxelarEvmCommandType, ProtoEnumAxelarEvmCommandType>;
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED = "BatchNonExistent";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING = "BatchSigning";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_ABORTED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_ABORTED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED = "BatchAborted";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export declare const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED = "BatchSigned";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.BatchedCommandsStatus` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING}
 *   - {@link XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED}
 *   - {@link XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED}
 */
export type ProtoEnumAxelarEvmBatchedCommandsStatus = typeof XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING | typeof XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED | typeof XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED;
/**
 * JSON enum values for `axelar.evm.v1beta1.BatchedCommandsStatus` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING}
 *   - {@link SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED}
 *   - {@link SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED}
 */
export type JsonEnumAxelarEvmBatchedCommandsStatus = typeof SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING | typeof SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED | typeof SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.BatchedCommandsStatus` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmBatchedCommandsStatus: Record<ProtoEnumAxelarEvmBatchedCommandsStatus, JsonEnumAxelarEvmBatchedCommandsStatus>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.BatchedCommandsStatus` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmBatchedCommandsStatus: Record<JsonEnumAxelarEvmBatchedCommandsStatus, ProtoEnumAxelarEvmBatchedCommandsStatus>;
/**
 * Protobuf enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmSigType}
 */
export declare const XC_PROTO_AXELAR_EVM_SIG_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmSigType}
 */
export declare const SI_JSON_AXELAR_EVM_SIG_TYPE_UNSPECIFIED = "None";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_TX** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmSigType}
 */
export declare const XC_PROTO_AXELAR_EVM_SIG_TYPE_TX = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_TX** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmSigType}
 */
export declare const SI_JSON_AXELAR_EVM_SIG_TYPE_TX = "SigTx";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_COMMAND** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmSigType}
 */
export declare const XC_PROTO_AXELAR_EVM_SIG_TYPE_COMMAND = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_COMMAND** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmSigType}
 */
export declare const SI_JSON_AXELAR_EVM_SIG_TYPE_COMMAND = "SigCommand";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.SigType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_SIG_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_SIG_TYPE_TX}
 *   - {@link XC_PROTO_AXELAR_EVM_SIG_TYPE_COMMAND}
 */
export type ProtoEnumAxelarEvmSigType = typeof XC_PROTO_AXELAR_EVM_SIG_TYPE_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_SIG_TYPE_TX | typeof XC_PROTO_AXELAR_EVM_SIG_TYPE_COMMAND;
/**
 * JSON enum values for `axelar.evm.v1beta1.SigType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_SIG_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_SIG_TYPE_TX}
 *   - {@link SI_JSON_AXELAR_EVM_SIG_TYPE_COMMAND}
 */
export type JsonEnumAxelarEvmSigType = typeof SI_JSON_AXELAR_EVM_SIG_TYPE_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_SIG_TYPE_TX | typeof SI_JSON_AXELAR_EVM_SIG_TYPE_COMMAND;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.SigType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmSigType: Record<ProtoEnumAxelarEvmSigType, JsonEnumAxelarEvmSigType>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.SigType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmSigType: Record<JsonEnumAxelarEvmSigType, ProtoEnumAxelarEvmSigType>;
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export declare const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED = "None";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_PENDING = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export declare const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_PENDING = "Pending";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export declare const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED = "Confirmed";
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_BURNED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export declare const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_BURNED = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_BURNED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export declare const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_BURNED = "Burned";
/**
 * Raw protobuf enum values for `axelar.evm.v1beta1.DepositStatus` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_PENDING}
 *   - {@link XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED}
 *   - {@link XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_BURNED}
 */
export type ProtoEnumAxelarEvmDepositStatus = typeof XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED | typeof XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_PENDING | typeof XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED | typeof XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_BURNED;
/**
 * JSON enum values for `axelar.evm.v1beta1.DepositStatus` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_PENDING}
 *   - {@link SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED}
 *   - {@link SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_BURNED}
 */
export type JsonEnumAxelarEvmDepositStatus = typeof SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED | typeof SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_PENDING | typeof SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED | typeof SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_BURNED;
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.DepositStatus` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarEvmDepositStatus: Record<ProtoEnumAxelarEvmDepositStatus, JsonEnumAxelarEvmDepositStatus>;
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.DepositStatus` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarEvmDepositStatus: Record<JsonEnumAxelarEvmDepositStatus, ProtoEnumAxelarEvmDepositStatus>;
