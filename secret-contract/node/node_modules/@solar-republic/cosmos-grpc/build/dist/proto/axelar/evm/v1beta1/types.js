import { __UNDEFINED } from '@blake.regalia/belt';
import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `VoteEvents` protobuf message:
 * @param s_chain - `chain`:
 * @param a_events - `events`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmVoteEvents = (s_chain, a_events) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .B(a_events) // Event[] events = 2
    .o;
/**
 * Encodes a `Event` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @param sg_index - `index`:
 * @param xc_status - `status`:
 * @param g_token_sent - `token_sent`:
 * @param g_contract_call - `contract_call`:
 * @param g_contract_call_with_token - `contract_call_with_token`:
 * @param g_transfer - `transfer`:
 * @param g_token_deployed - `token_deployed`:
 * @param g_multisig_ownership_transferred - `multisig_ownership_transferred`:
 * @param g_multisig_operatorship_transferred - `multisig_operatorship_transferred`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEvent = (s_chain, atu8_tx_id, sg_index, xc_status, atu8_token_sent, atu8_contract_call, atu8_contract_call_with_token, atu8_transfer, atu8_token_deployed, atu8_multisig_ownership_transferred, atu8_multisig_operatorship_transferred) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .b(atu8_tx_id) // bytes tx_id = 2
    .g(sg_index) // uint64 index = 3
    .v(xc_status) // Status status = 4
    .b(atu8_token_sent) // EventTokenSent token_sent = 5
    .b(atu8_contract_call) // EventContractCall contract_call = 6
    .b(atu8_contract_call_with_token) // EventContractCallWithToken contract_call_with_token = 7
    .b(atu8_transfer) // EventTransfer transfer = 8
    .b(atu8_token_deployed) // EventTokenDeployed token_deployed = 9
    .b(atu8_multisig_ownership_transferred) // EventMultisigOwnershipTransferred multisig_ownership_transferred = 10
    .b(atu8_multisig_operatorship_transferred) // EventMultisigOperatorshipTransferred multisig_operatorship_transferred = 11
    .o;
/**
 * Encodes a `EventTokenSent` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param s_symbol - `symbol`:
 * @param atu8_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventTokenSent = (sa_sender, s_destination_chain, sa_destination, s_symbol, atu8_amount) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_destination_chain) // string destination_chain = 2
    .s(sa_destination) // string destination_address = 3
    .s(s_symbol) // string symbol = 4
    .b(atu8_amount) // bytes amount = 5
    .o;
/**
 * Encodes a `EventContractCall` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventContractCall = (sa_sender, s_destination_chain, sa_contract, atu8_payload_hash) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_destination_chain) // string destination_chain = 2
    .s(sa_contract) // string contract_address = 3
    .b(atu8_payload_hash) // bytes payload_hash = 4
    .o;
/**
 * Encodes a `EventContractCallWithToken` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_contract - `contract_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param s_symbol - `symbol`:
 * @param atu8_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventContractCallWithToken = (sa_sender, s_destination_chain, sa_contract, atu8_payload_hash, s_symbol, atu8_amount) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_destination_chain) // string destination_chain = 2
    .s(sa_contract) // string contract_address = 3
    .b(atu8_payload_hash) // bytes payload_hash = 4
    .s(s_symbol) // string symbol = 5
    .b(atu8_amount) // bytes amount = 6
    .o;
/**
 * Encodes a `EventTransfer` protobuf message:
 * @param atu8_to - `to`:
 * @param atu8_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventTransfer = (atu8_to, atu8_amount) => Protobuf() // ...
    .b(atu8_to) // bytes to = 1
    .b(atu8_amount) // bytes amount = 2
    .o;
/**
 * Encodes a `EventTokenDeployed` protobuf message:
 * @param s_symbol - `symbol`:
 * @param atu8_token_address - `token_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventTokenDeployed = (s_symbol, atu8_token_address) => Protobuf() // ...
    .s(s_symbol) // string symbol = 1
    .b(atu8_token_address) // bytes token_address = 2
    .o;
/**
 * Encodes a `EventMultisigOwnershipTransferred` protobuf message:
 * @param a_pre_owners - `pre_owners`:
 * @param atu8_prev_threshold - `prev_threshold`:
 * @param a_new_owners - `new_owners`:
 * @param atu8_new_threshold - `new_threshold`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventMultisigOwnershipTransferred = (a_pre_owners, atu8_prev_threshold, a_new_owners, atu8_new_threshold) => Protobuf() // ...
    .B(a_pre_owners) // bytes[] pre_owners = 1
    .b(atu8_prev_threshold) // bytes prev_threshold = 2
    .B(a_new_owners) // bytes[] new_owners = 3
    .b(atu8_new_threshold) // bytes new_threshold = 4
    .o;
/**
 * Encodes a `EventMultisigOperatorshipTransferred` protobuf message:
 * @param a_new_operators - `new_operators`:
 * @param atu8_new_threshold - `new_threshold`:
 * @param a_new_weights - `new_weights`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmEventMultisigOperatorshipTransferred = (a_new_operators, atu8_new_threshold, a_new_weights) => Protobuf() // ...
    .B(a_new_operators, 3) // bytes[] new_operators = 3
    .b(atu8_new_threshold, 4) // bytes new_threshold = 4
    .B(a_new_weights, 5) // bytes[] new_weights = 5
    .o;
/**
 * Encodes a `NetworkInfo` protobuf message: describes information about a network
 * @param s_name - `name`:
 * @param atu8_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmNetworkInfo = (s_name, atu8_id) => Protobuf() // ...
    .s(s_name) // string name = 1
    .b(atu8_id) // bytes id = 2
    .o;
/**
 * Encodes a `BurnerInfo` protobuf message: describes information required to burn token at an burner address that is deposited by an user
 * @param atu8_burner_address - `burner_address`:
 * @param atu8_token_address - `token_address`:
 * @param s_destination_chain - `destination_chain`:
 * @param s_symbol - `symbol`:
 * @param s_asset - `asset`:
 * @param atu8_salt - `salt`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmBurnerInfo = (atu8_burner_address, atu8_token_address, s_destination_chain, s_symbol, s_asset, atu8_salt) => Protobuf() // ...
    .b(atu8_burner_address) // bytes burner_address = 1
    .b(atu8_token_address) // bytes token_address = 2
    .s(s_destination_chain) // string destination_chain = 3
    .s(s_symbol) // string symbol = 4
    .s(s_asset) // string asset = 5
    .b(atu8_salt) // bytes salt = 6
    .o;
/**
 * Encodes a `ERC20Deposit` protobuf message: contains information for an ERC20 deposit
 * @param atu8_tx_id - `tx_id`:
 * @param atu8_amount - `amount`:
 * @param s_asset - `asset`:
 * @param s_destination_chain - `destination_chain`:
 * @param atu8_burner_address - `burner_address`:
 * @param sg_log_index - `log_index`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmERC20Deposit = (atu8_tx_id, atu8_amount, s_asset, s_destination_chain, atu8_burner_address, sg_log_index) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .b(atu8_amount) // bytes amount = 2
    .s(s_asset) // string asset = 3
    .s(s_destination_chain) // string destination_chain = 4
    .b(atu8_burner_address) // bytes burner_address = 5
    .g(sg_log_index) // uint64 log_index = 6
    .o;
/**
 * Encodes a `ERC20TokenMetadata` protobuf message: describes information about an ERC20 token
 * @param s_asset - `asset`:
 * @param atu8_chain_id - `chain_id`:
 * @param g_details - `details`:
 * @param sa_token - `token_address`:
 * @param s_tx_hash - `tx_hash`:
 * @param xc_status - `status`:
 * @param b_is_external - `is_external`:
 * @param atu8_burner_code - `burner_code`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmERC20TokenMetadata = (s_asset, atu8_chain_id, atu8_details, sa_token, s_tx_hash, xc_status, b_is_external, atu8_burner_code) => Protobuf() // ...
    .s(s_asset) // string asset = 1
    .b(atu8_chain_id) // bytes chain_id = 2
    .b(atu8_details) // TokenDetails details = 3
    .s(sa_token) // string token_address = 4
    .s(s_tx_hash) // string tx_hash = 5
    .v(xc_status, 7) // Status status = 7
    .v(b_is_external, 8) // boolean is_external = 8
    .b(atu8_burner_code, 9) // bytes burner_code = 9
    .o;
/**
 * Encodes a `TransactionMetadata` protobuf message:
 * @param atu8_raw_tx - `raw_tx`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmTransactionMetadata = (atu8_raw_tx, atu8_pub_key) => Protobuf() // ...
    .b(atu8_raw_tx) // bytes raw_tx = 1
    .b(atu8_pub_key) // bytes pub_key = 2
    .o;
/**
 * Encodes a `Command` protobuf message:
 * @param atu8_id - `id`:
 * @param s_command - `command`:
 * @param atu8_params - `params`:
 * @param si_key - `key_id`:
 * @param n_max_gas_cost - `max_gas_cost`:
 * @param xc_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCommand = (atu8_id, s_command, atu8_params, si_key, n_max_gas_cost, xc_type) => Protobuf() // ...
    .b(atu8_id) // bytes id = 1
    .s(s_command) // string command = 2
    .b(atu8_params) // bytes params = 3
    .s(si_key) // string key_id = 4
    .v(n_max_gas_cost) // uint32 max_gas_cost = 5
    .v(xc_type) // CommandType type = 6
    .o;
/**
 * Encodes a `CommandBatchMetadata` protobuf message:
 * @param atu8_id - `id`:
 * @param a_command_ids - `command_ids`:
 * @param atu8_data - `data`:
 * @param atu8_sig_hash - `sig_hash`:
 * @param xc_status - `status`:
 * @param si_key - `key_id`:
 * @param atu8_prev_batched_commands_id - `prev_batched_commands_id`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmCommandBatchMetadata = (atu8_id, a_command_ids, atu8_data, atu8_sig_hash, xc_status, si_key, atu8_prev_batched_commands_id, atu8_signature) => Protobuf() // ...
    .b(atu8_id) // bytes id = 1
    .B(a_command_ids) // bytes[] command_ids = 2
    .b(atu8_data) // bytes data = 3
    .b(atu8_sig_hash) // bytes sig_hash = 4
    .v(xc_status) // BatchedCommandsStatus status = 5
    .s(si_key) // string key_id = 6
    .b(atu8_prev_batched_commands_id) // bytes prev_batched_commands_id = 7
    .b(atu8_signature) // Any signature = 8
    .o;
/**
 * Encodes a `SigMetadata` protobuf message: stores necessary information for external apps to map signature results to evm relay transaction types
 * @param xc_type - `type`:
 * @param s_chain - `chain`:
 * @param atu8_command_batch_id - `command_batch_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmSigMetadata = (xc_type, s_chain, atu8_command_batch_id) => Protobuf() // ...
    .v(xc_type) // SigType type = 1
    .s(s_chain) // string chain = 2
    .b(atu8_command_batch_id) // bytes command_batch_id = 3
    .o;
/**
 * Encodes a `TransferKey` protobuf message: contains information for a transfer operatorship
 * @param atu8_tx_id - `tx_id`:
 * @param si_next_key - `next_key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmTransferKey = (atu8_tx_id, si_next_key) => Protobuf() // ...
    .b(atu8_tx_id) // bytes tx_id = 1
    .s(si_next_key, 3) // string next_key_id = 3
    .o;
/**
 * Encodes a `Asset` protobuf message:
 * @param s_chain - `chain`:
 * @param s_name - `name`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmAsset = (s_chain, s_name) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(s_name) // string name = 2
    .o;
/**
 * Encodes a `TokenDetails` protobuf message:
 * @param s_token_name - `token_name`:
 * @param s_symbol - `symbol`:
 * @param n_decimals - `decimals`:
 * @param atu8_capacity - `capacity`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmTokenDetails = (s_token_name, s_symbol, n_decimals, atu8_capacity) => Protobuf() // ...
    .s(s_token_name) // string token_name = 1
    .s(s_symbol) // string symbol = 2
    .v(n_decimals) // uint32 decimals = 3
    .b(atu8_capacity) // bytes capacity = 4
    .o;
/**
 * Encodes a `Gateway` protobuf message:
 * @param atu8_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmGateway = (atu8_address) => Protobuf() // ...
    .b(atu8_address) // bytes address = 1
    .o;
/**
 * Encodes a `PollMetadata` protobuf message:
 * @param s_chain - `chain`:
 * @param atu8_tx_id - `tx_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarEvmPollMetadata = (s_chain, atu8_tx_id) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .b(atu8_tx_id) // bytes tx_id = 2
    .o;
/**
 * Decodes a protobuf VoteEvents message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmVoteEvents}
 */
export const decodeAxelarEvmVoteEvents = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeAxelarEvmEvent]);
/**
 * Decodes a protobuf Event message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEvent}
 */
export const decodeAxelarEvmEvent = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, decodeAxelarEvmEventTokenSent, decodeAxelarEvmEventContractCall, decodeAxelarEvmEventContractCallWithToken, decodeAxelarEvmEventTransfer, decodeAxelarEvmEventTokenDeployed, decodeAxelarEvmEventMultisigOwnershipTransferred, decodeAxelarEvmEventMultisigOperatorshipTransferred]);
/**
 * Decodes a protobuf EventTokenSent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventTokenSent}
 */
export const decodeAxelarEvmEventTokenSent = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 5, 1]);
/**
 * Decodes a protobuf EventContractCall message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventContractCall}
 */
export const decodeAxelarEvmEventContractCall = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 1]);
/**
 * Decodes a protobuf EventContractCallWithToken message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventContractCallWithToken}
 */
export const decodeAxelarEvmEventContractCallWithToken = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 1, 5, 1]);
/**
 * Decodes a protobuf EventTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventTransfer}
 */
export const decodeAxelarEvmEventTransfer = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf EventTokenDeployed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventTokenDeployed}
 */
export const decodeAxelarEvmEventTokenDeployed = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf EventMultisigOwnershipTransferred message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmEventMultisigOwnershipTransferred}
 */
export const decodeAxelarEvmEventMultisigOwnershipTransferred = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 0, 1]);
/**
 * Decodes a protobuf EventMultisigOperatorshipTransferred message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmEventMultisigOperatorshipTransferred}
 */
export const decodeAxelarEvmEventMultisigOperatorshipTransferred = ((atu8_payload, [, , a_new_operators, atu8_new_threshold, a_new_weights] = decode_protobuf(atu8_payload, [0, 0, 0, 1, 0])) => [__UNDEFINED, __UNDEFINED, a_new_operators, atu8_new_threshold, a_new_weights]);
/**
 * Decodes a protobuf NetworkInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmNetworkInfo}
 */
export const decodeAxelarEvmNetworkInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf BurnerInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmBurnerInfo}
 */
export const decodeAxelarEvmBurnerInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5, 5, 5, 1]);
/**
 * Decodes a protobuf ERC20Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmERC20Deposit}
 */
export const decodeAxelarEvmERC20Deposit = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5, 5, 1, 3]);
/**
 * Decodes a protobuf ERC20TokenMetadata message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmERC20TokenMetadata}
 */
export const decodeAxelarEvmERC20TokenMetadata = ((atu8_payload, [s_asset, atu8_chain_id, a_details, sa_token, s_tx_hash, , xc_status, b_is_external, atu8_burner_code] = decode_protobuf(atu8_payload, [5, 1, 1, 5, 5, 0, 1, 1, 1], [0, 0, decodeAxelarEvmTokenDetails])) => [s_asset, atu8_chain_id, a_details, sa_token, s_tx_hash, __UNDEFINED, xc_status, b_is_external, atu8_burner_code]);
/**
 * Decodes a protobuf TransactionMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTransactionMetadata}
 */
export const decodeAxelarEvmTransactionMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf Command message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommand}
 */
export const decodeAxelarEvmCommand = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 5, 1, 1]);
/**
 * Decodes a protobuf CommandBatchMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmCommandBatchMetadata}
 */
export const decodeAxelarEvmCommandBatchMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 1, 1, 1, 5, 1, 1], [0, 0, 0, 0, 0, 0, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SigMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmSigMetadata}
 */
export const decodeAxelarEvmSigMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1]);
/**
 * Decodes a protobuf TransferKey message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarEvmTransferKey}
 */
export const decodeAxelarEvmTransferKey = ((atu8_payload, [atu8_tx_id, , si_next_key] = decode_protobuf(atu8_payload, [1, 0, 5])) => [atu8_tx_id, __UNDEFINED, si_next_key]);
/**
 * Decodes a protobuf Asset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmAsset}
 */
export const decodeAxelarEvmAsset = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf TokenDetails message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmTokenDetails}
 */
export const decodeAxelarEvmTokenDetails = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1]);
/**
 * Decodes a protobuf Gateway message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmGateway}
 */
export const decodeAxelarEvmGateway = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf PollMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarEvmPollMetadata}
 */
export const decodeAxelarEvmPollMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Destructures the fields of a {@link AxelarEvmAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: name -
 */
export const destructAxelarEvmAsset = (g_struct) => [g_struct.chain, g_struct.name];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_ASSET = '/axelar.evm.v1beta1.Asset';
/**
 * Destructures the fields of a {@link AxelarEvmTokenDetails} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: token_name -
 *   - 1: symbol -
 *   - 2: decimals -
 *   - 3: capacity -
 */
export const destructAxelarEvmTokenDetails = (g_struct) => [g_struct.token_name, g_struct.symbol, g_struct.decimals, safe_base64_to_bytes(g_struct.capacity)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_TOKEN_DETAILS = '/axelar.evm.v1beta1.TokenDetails';
/**
 * Destructures the fields of a {@link AxelarEvmVoteEvents} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: events -
 */
export const destructAxelarEvmVoteEvents = (g_struct) => [g_struct.chain, g_struct.events];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_VOTE_EVENTS = '/axelar.evm.v1beta1.VoteEvents';
/**
 * Destructures the fields of a {@link AxelarEvmEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 *   - 2: index -
 *   - 3: status -
 *   - 4: token_sent -
 *   - 5: contract_call -
 *   - 6: contract_call_with_token -
 *   - 7: transfer -
 *   - 8: token_deployed -
 *   - 9: multisig_ownership_transferred -
 *   - 10: multisig_operatorship_transferred -
 */
export const destructAxelarEvmEvent = (g_struct) => [g_struct.chain, safe_base64_to_bytes(g_struct.tx_id), g_struct.index, g_struct.status, g_struct.token_sent, g_struct.contract_call, g_struct.contract_call_with_token, g_struct.transfer, g_struct.token_deployed, g_struct.multisig_ownership_transferred, g_struct.multisig_operatorship_transferred];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT = '/axelar.evm.v1beta1.Event';
/**
 * Destructures the fields of a {@link AxelarEvmEventTokenSent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: destination_address -
 *   - 3: symbol -
 *   - 4: amount -
 */
export const destructAxelarEvmEventTokenSent = (g_struct) => [g_struct.sender, g_struct.destination_chain, g_struct.destination_address, g_struct.symbol, safe_base64_to_bytes(g_struct.amount)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_TOKEN_SENT = '/axelar.evm.v1beta1.EventTokenSent';
/**
 * Destructures the fields of a {@link AxelarEvmEventContractCall} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: contract_address -
 *   - 3: payload_hash -
 */
export const destructAxelarEvmEventContractCall = (g_struct) => [g_struct.sender, g_struct.destination_chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_CONTRACT_CALL = '/axelar.evm.v1beta1.EventContractCall';
/**
 * Destructures the fields of a {@link AxelarEvmEventContractCallWithToken} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: destination_chain -
 *   - 2: contract_address -
 *   - 3: payload_hash -
 *   - 4: symbol -
 *   - 5: amount -
 */
export const destructAxelarEvmEventContractCallWithToken = (g_struct) => [g_struct.sender, g_struct.destination_chain, g_struct.contract_address, safe_base64_to_bytes(g_struct.payload_hash), g_struct.symbol, safe_base64_to_bytes(g_struct.amount)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_CONTRACT_CALL_WITH_TOKEN = '/axelar.evm.v1beta1.EventContractCallWithToken';
/**
 * Destructures the fields of a {@link AxelarEvmEventTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: to -
 *   - 1: amount -
 */
export const destructAxelarEvmEventTransfer = (g_struct) => [safe_base64_to_bytes(g_struct.to), safe_base64_to_bytes(g_struct.amount)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_TRANSFER = '/axelar.evm.v1beta1.EventTransfer';
/**
 * Destructures the fields of a {@link AxelarEvmEventTokenDeployed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: symbol -
 *   - 1: token_address -
 */
export const destructAxelarEvmEventTokenDeployed = (g_struct) => [g_struct.symbol, safe_base64_to_bytes(g_struct.token_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_TOKEN_DEPLOYED = '/axelar.evm.v1beta1.EventTokenDeployed';
/**
 * Destructures the fields of a {@link AxelarEvmEventMultisigOwnershipTransferred} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pre_owners -
 *   - 1: prev_threshold -
 *   - 2: new_owners -
 *   - 3: new_threshold -
 */
export const destructAxelarEvmEventMultisigOwnershipTransferred = (g_struct) => [map(g_struct.pre_owners, safe_base64_to_bytes), safe_base64_to_bytes(g_struct.prev_threshold), map(g_struct.new_owners, safe_base64_to_bytes), safe_base64_to_bytes(g_struct.new_threshold)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_MULTISIG_OWNERSHIP_TRANSFERRED = '/axelar.evm.v1beta1.EventMultisigOwnershipTransferred';
/**
 * Destructures the fields of a {@link AxelarEvmEventMultisigOperatorshipTransferred} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 2: new_operators -
 *   - 3: new_threshold -
 *   - 4: new_weights -
 */
export const destructAxelarEvmEventMultisigOperatorshipTransferred = (g_struct) => [__UNDEFINED, __UNDEFINED, map(g_struct.new_operators, safe_base64_to_bytes), safe_base64_to_bytes(g_struct.new_threshold), map(g_struct.new_weights, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_EVENT_MULTISIG_OPERATORSHIP_TRANSFERRED = '/axelar.evm.v1beta1.EventMultisigOperatorshipTransferred';
/**
 * Destructures the fields of a {@link AxelarEvmNetworkInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: id -
 */
export const destructAxelarEvmNetworkInfo = (g_struct) => [g_struct.name, safe_base64_to_bytes(g_struct.id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_NETWORK_INFO = '/axelar.evm.v1beta1.NetworkInfo';
/**
 * Destructures the fields of a {@link AxelarEvmBurnerInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: burner_address -
 *   - 1: token_address -
 *   - 2: destination_chain -
 *   - 3: symbol -
 *   - 4: asset -
 *   - 5: salt -
 */
export const destructAxelarEvmBurnerInfo = (g_struct) => [safe_base64_to_bytes(g_struct.burner_address), safe_base64_to_bytes(g_struct.token_address), g_struct.destination_chain, g_struct.symbol, g_struct.asset, safe_base64_to_bytes(g_struct.salt)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_BURNER_INFO = '/axelar.evm.v1beta1.BurnerInfo';
/**
 * Destructures the fields of a {@link AxelarEvmERC20Deposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 1: amount -
 *   - 2: asset -
 *   - 3: destination_chain -
 *   - 4: burner_address -
 *   - 5: log_index -
 */
export const destructAxelarEvmERC20Deposit = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), safe_base64_to_bytes(g_struct.amount), g_struct.asset, g_struct.destination_chain, safe_base64_to_bytes(g_struct.burner_address), g_struct.log_index];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_DEPOSIT = '/axelar.evm.v1beta1.ERC20Deposit';
/**
 * Destructures the fields of a {@link AxelarEvmERC20TokenMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: asset -
 *   - 1: chain_id -
 *   - 2: details -
 *   - 3: token_address -
 *   - 4: tx_hash -
 *   - 6: status -
 *   - 7: is_external -
 *   - 8: burner_code -
 */
export const destructAxelarEvmERC20TokenMetadata = (g_struct) => [g_struct.asset, safe_base64_to_bytes(g_struct.chain_id), g_struct.details, g_struct.token_address, g_struct.tx_hash, __UNDEFINED, g_struct.status, g_struct.is_external, safe_base64_to_bytes(g_struct.burner_code)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_E_R_C20_TOKEN_METADATA = '/axelar.evm.v1beta1.ERC20TokenMetadata';
/**
 * Destructures the fields of a {@link AxelarEvmTransactionMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: raw_tx -
 *   - 1: pub_key -
 */
export const destructAxelarEvmTransactionMetadata = (g_struct) => [safe_base64_to_bytes(g_struct.raw_tx), safe_base64_to_bytes(g_struct.pub_key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_TRANSACTION_METADATA = '/axelar.evm.v1beta1.TransactionMetadata';
/**
 * Destructures the fields of a {@link AxelarEvmCommand} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: command -
 *   - 2: params -
 *   - 3: key_id -
 *   - 4: max_gas_cost -
 *   - 5: type -
 */
export const destructAxelarEvmCommand = (g_struct) => [safe_base64_to_bytes(g_struct.id), g_struct.command, safe_base64_to_bytes(g_struct.params), g_struct.key_id, g_struct.max_gas_cost, g_struct.type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND = '/axelar.evm.v1beta1.Command';
/**
 * Destructures the fields of a {@link AxelarEvmCommandBatchMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: command_ids -
 *   - 2: data -
 *   - 3: sig_hash -
 *   - 4: status -
 *   - 5: key_id -
 *   - 6: prev_batched_commands_id -
 *   - 7: signature -
 */
export const destructAxelarEvmCommandBatchMetadata = (g_struct) => [safe_base64_to_bytes(g_struct.id), map(g_struct.command_ids, safe_base64_to_bytes), safe_base64_to_bytes(g_struct.data), safe_base64_to_bytes(g_struct.sig_hash), g_struct.status, g_struct.key_id, safe_base64_to_bytes(g_struct.prev_batched_commands_id), g_struct.signature];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_COMMAND_BATCH_METADATA = '/axelar.evm.v1beta1.CommandBatchMetadata';
/**
 * Destructures the fields of a {@link AxelarEvmSigMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: chain -
 *   - 2: command_batch_id -
 */
export const destructAxelarEvmSigMetadata = (g_struct) => [g_struct.type, g_struct.chain, safe_base64_to_bytes(g_struct.command_batch_id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_SIG_METADATA = '/axelar.evm.v1beta1.SigMetadata';
/**
 * Destructures the fields of a {@link AxelarEvmTransferKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_id -
 *   - 2: next_key_id -
 */
export const destructAxelarEvmTransferKey = (g_struct) => [safe_base64_to_bytes(g_struct.tx_id), __UNDEFINED, g_struct.next_key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_TRANSFER_KEY = '/axelar.evm.v1beta1.TransferKey';
/**
 * Destructures the fields of a {@link AxelarEvmGateway} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export const destructAxelarEvmGateway = (g_struct) => [safe_base64_to_bytes(g_struct.address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_GATEWAY = '/axelar.evm.v1beta1.Gateway';
/**
 * Destructures the fields of a {@link AxelarEvmPollMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: tx_id -
 */
export const destructAxelarEvmPollMetadata = (g_struct) => [g_struct.chain, safe_base64_to_bytes(g_struct.tx_id)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_EVM_POLL_METADATA = '/axelar.evm.v1beta1.PollMetadata';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export const XC_PROTO_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export const SI_JSON_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED = 'EventNonExistent';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export const XC_PROTO_AXELAR_EVM_EVENT_STATUS_CONFIRMED = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export const SI_JSON_AXELAR_EVM_EVENT_STATUS_CONFIRMED = 'EventConfirmed';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export const XC_PROTO_AXELAR_EVM_EVENT_STATUS_COMPLETED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_COMPLETED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export const SI_JSON_AXELAR_EVM_EVENT_STATUS_COMPLETED = 'EventCompleted';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmEventStatus}
 */
export const XC_PROTO_AXELAR_EVM_EVENT_STATUS_FAILED = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.Event.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmEventStatus}
 */
export const SI_JSON_AXELAR_EVM_EVENT_STATUS_FAILED = 'EventFailed';
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.Event.Status` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarEvmEventStatus = {
    [XC_PROTO_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED]: SI_JSON_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED,
    [XC_PROTO_AXELAR_EVM_EVENT_STATUS_CONFIRMED]: SI_JSON_AXELAR_EVM_EVENT_STATUS_CONFIRMED,
    [XC_PROTO_AXELAR_EVM_EVENT_STATUS_COMPLETED]: SI_JSON_AXELAR_EVM_EVENT_STATUS_COMPLETED,
    [XC_PROTO_AXELAR_EVM_EVENT_STATUS_FAILED]: SI_JSON_AXELAR_EVM_EVENT_STATUS_FAILED,
};
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.Event.Status` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarEvmEventStatus = {
    [SI_JSON_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED]: XC_PROTO_AXELAR_EVM_EVENT_STATUS_UNSPECIFIED,
    [SI_JSON_AXELAR_EVM_EVENT_STATUS_CONFIRMED]: XC_PROTO_AXELAR_EVM_EVENT_STATUS_CONFIRMED,
    [SI_JSON_AXELAR_EVM_EVENT_STATUS_COMPLETED]: XC_PROTO_AXELAR_EVM_EVENT_STATUS_COMPLETED,
    [SI_JSON_AXELAR_EVM_EVENT_STATUS_FAILED]: XC_PROTO_AXELAR_EVM_EVENT_STATUS_FAILED,
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_UNSPECIFIED** - these enum values are used for bitwise operations, therefore they need to be powers of 2
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export const XC_PROTO_AXELAR_EVM_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_UNSPECIFIED** - these enum values are used for bitwise operations, therefore they need to be powers of 2
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export const SI_JSON_AXELAR_EVM_STATUS_UNSPECIFIED = 'NonExistent';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_INITIALIZED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export const XC_PROTO_AXELAR_EVM_STATUS_INITIALIZED = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_INITIALIZED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export const SI_JSON_AXELAR_EVM_STATUS_INITIALIZED = 'Initialized';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export const XC_PROTO_AXELAR_EVM_STATUS_PENDING = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export const SI_JSON_AXELAR_EVM_STATUS_PENDING = 'Pending';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmStatus}
 */
export const XC_PROTO_AXELAR_EVM_STATUS_CONFIRMED = 4;
/**
 * JSON enum value for `axelar.evm.v1beta1.Status`.
 *
 * **STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmStatus}
 */
export const SI_JSON_AXELAR_EVM_STATUS_CONFIRMED = 'Confirmed';
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.Status` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarEvmStatus = {
    [XC_PROTO_AXELAR_EVM_STATUS_UNSPECIFIED]: SI_JSON_AXELAR_EVM_STATUS_UNSPECIFIED,
    [XC_PROTO_AXELAR_EVM_STATUS_INITIALIZED]: SI_JSON_AXELAR_EVM_STATUS_INITIALIZED,
    [XC_PROTO_AXELAR_EVM_STATUS_PENDING]: SI_JSON_AXELAR_EVM_STATUS_PENDING,
    [XC_PROTO_AXELAR_EVM_STATUS_CONFIRMED]: SI_JSON_AXELAR_EVM_STATUS_CONFIRMED,
};
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.Status` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarEvmStatus = {
    [SI_JSON_AXELAR_EVM_STATUS_UNSPECIFIED]: XC_PROTO_AXELAR_EVM_STATUS_UNSPECIFIED,
    [SI_JSON_AXELAR_EVM_STATUS_INITIALIZED]: XC_PROTO_AXELAR_EVM_STATUS_INITIALIZED,
    [SI_JSON_AXELAR_EVM_STATUS_PENDING]: XC_PROTO_AXELAR_EVM_STATUS_PENDING,
    [SI_JSON_AXELAR_EVM_STATUS_CONFIRMED]: XC_PROTO_AXELAR_EVM_STATUS_CONFIRMED,
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED = 'COMMAND_TYPE_UNSPECIFIED';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_MINT_TOKEN** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_MINT_TOKEN** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN = 'COMMAND_TYPE_MINT_TOKEN';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_DEPLOY_TOKEN** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_DEPLOY_TOKEN** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN = 'COMMAND_TYPE_DEPLOY_TOKEN';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_BURN_TOKEN** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_BURN_TOKEN** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN = 'COMMAND_TYPE_BURN_TOKEN';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_TRANSFER_OPERATORSHIP** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP = 4;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_TRANSFER_OPERATORSHIP** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP = 'COMMAND_TYPE_TRANSFER_OPERATORSHIP';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT = 5;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT = 'COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmCommandType}
 */
export const XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL = 6;
/**
 * JSON enum value for `axelar.evm.v1beta1.CommandType`.
 *
 * **COMMAND_TYPE_APPROVE_CONTRACT_CALL** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmCommandType}
 */
export const SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL = 'COMMAND_TYPE_APPROVE_CONTRACT_CALL';
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.CommandType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarEvmCommandType = {
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED,
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN,
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN,
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN,
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP,
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT,
    [XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL]: SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL,
};
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.CommandType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarEvmCommandType = {
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_UNSPECIFIED,
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_MINT_TOKEN,
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_DEPLOY_TOKEN,
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_BURN_TOKEN,
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_TRANSFER_OPERATORSHIP,
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL_WITH_MINT,
    [SI_JSON_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL]: XC_PROTO_AXELAR_EVM_COMMAND_TYPE_APPROVE_CONTRACT_CALL,
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED = 'BatchNonExistent';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING = 'BatchSigning';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_ABORTED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_ABORTED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED = 'BatchAborted';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmBatchedCommandsStatus}
 */
export const XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.BatchedCommandsStatus`.
 *
 * **BATCHED_COMMANDS_STATUS_SIGNED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmBatchedCommandsStatus}
 */
export const SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED = 'BatchSigned';
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.BatchedCommandsStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarEvmBatchedCommandsStatus = {
    [XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED]: SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED,
    [XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING]: SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING,
    [XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED]: SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED,
    [XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED]: SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED,
};
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.BatchedCommandsStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarEvmBatchedCommandsStatus = {
    [SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED]: XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_UNSPECIFIED,
    [SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING]: XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNING,
    [SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED]: XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_ABORTED,
    [SI_JSON_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED]: XC_PROTO_AXELAR_EVM_BATCHED_COMMANDS_STATUS_SIGNED,
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmSigType}
 */
export const XC_PROTO_AXELAR_EVM_SIG_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmSigType}
 */
export const SI_JSON_AXELAR_EVM_SIG_TYPE_UNSPECIFIED = 'None';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_TX** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmSigType}
 */
export const XC_PROTO_AXELAR_EVM_SIG_TYPE_TX = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_TX** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmSigType}
 */
export const SI_JSON_AXELAR_EVM_SIG_TYPE_TX = 'SigTx';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_COMMAND** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmSigType}
 */
export const XC_PROTO_AXELAR_EVM_SIG_TYPE_COMMAND = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.SigType`.
 *
 * **SIG_TYPE_COMMAND** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmSigType}
 */
export const SI_JSON_AXELAR_EVM_SIG_TYPE_COMMAND = 'SigCommand';
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.SigType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarEvmSigType = {
    [XC_PROTO_AXELAR_EVM_SIG_TYPE_UNSPECIFIED]: SI_JSON_AXELAR_EVM_SIG_TYPE_UNSPECIFIED,
    [XC_PROTO_AXELAR_EVM_SIG_TYPE_TX]: SI_JSON_AXELAR_EVM_SIG_TYPE_TX,
    [XC_PROTO_AXELAR_EVM_SIG_TYPE_COMMAND]: SI_JSON_AXELAR_EVM_SIG_TYPE_COMMAND,
};
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.SigType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarEvmSigType = {
    [SI_JSON_AXELAR_EVM_SIG_TYPE_UNSPECIFIED]: XC_PROTO_AXELAR_EVM_SIG_TYPE_UNSPECIFIED,
    [SI_JSON_AXELAR_EVM_SIG_TYPE_TX]: XC_PROTO_AXELAR_EVM_SIG_TYPE_TX,
    [SI_JSON_AXELAR_EVM_SIG_TYPE_COMMAND]: XC_PROTO_AXELAR_EVM_SIG_TYPE_COMMAND,
};
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED = 'None';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_PENDING = 1;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_PENDING = 'Pending';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED = 2;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_CONFIRMED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED = 'Confirmed';
/**
 * Protobuf enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_BURNED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarEvmDepositStatus}
 */
export const XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_BURNED = 3;
/**
 * JSON enum value for `axelar.evm.v1beta1.DepositStatus`.
 *
 * **DEPOSIT_STATUS_BURNED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarEvmDepositStatus}
 */
export const SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_BURNED = 'Burned';
/**
 * Maps a protobuf enum int value for `axelar.evm.v1beta1.DepositStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarEvmDepositStatus = {
    [XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED]: SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED,
    [XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_PENDING]: SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_PENDING,
    [XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED]: SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED,
    [XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_BURNED]: SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_BURNED,
};
/**
 * Maps a JSON enum string value for `axelar.evm.v1beta1.DepositStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarEvmDepositStatus = {
    [SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED]: XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_UNSPECIFIED,
    [SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_PENDING]: XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_PENDING,
    [SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED]: XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_CONFIRMED,
    [SI_JSON_AXELAR_EVM_DEPOSIT_STATUS_BURNED]: XC_PROTO_AXELAR_EVM_DEPOSIT_STATUS_BURNED,
};
//# sourceMappingURL=types.js.map