import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAxelarMultisigKeygenStarted = Encoded<'/axelar.multisig.v1beta1.KeygenStarted'>;
export type EncodedAxelarMultisigKeygenCompleted = Encoded<'/axelar.multisig.v1beta1.KeygenCompleted'>;
export type EncodedAxelarMultisigKeygenExpired = Encoded<'/axelar.multisig.v1beta1.KeygenExpired'>;
export type EncodedAxelarMultisigPubKeySubmitted = Encoded<'/axelar.multisig.v1beta1.PubKeySubmitted'>;
export type EncodedAxelarMultisigSigningStarted = Encoded<'/axelar.multisig.v1beta1.SigningStarted'>;
export type EncodedAxelarMultisigSigningCompleted = Encoded<'/axelar.multisig.v1beta1.SigningCompleted'>;
export type EncodedAxelarMultisigSigningExpired = Encoded<'/axelar.multisig.v1beta1.SigningExpired'>;
export type EncodedAxelarMultisigSignatureSubmitted = Encoded<'/axelar.multisig.v1beta1.SignatureSubmitted'>;
export type EncodedAxelarMultisigKeyAssigned = Encoded<'/axelar.multisig.v1beta1.KeyAssigned'>;
export type EncodedAxelarMultisigKeyRotated = Encoded<'/axelar.multisig.v1beta1.KeyRotated'>;
export type EncodedAxelarMultisigKeygenOptOut = Encoded<'/axelar.multisig.v1beta1.KeygenOptOut'>;
export type EncodedAxelarMultisigKeygenOptIn = Encoded<'/axelar.multisig.v1beta1.KeygenOptIn'>;
export type EncodedAxelarMultisigSigningStartedPubKeysEntry = Encoded<'/axelar.multisig.v1beta1.SigningStarted.PubKeysEntry'>;
/**
 * Encodes a `KeygenStarted` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @param a_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenStarted: (s_module?: Opt<string>, si_key?: Opt<string>, a_participants?: Opt<Uint8Array[]>) => EncodedAxelarMultisigKeygenStarted;
/**
 * Encodes a `KeygenCompleted` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenCompleted: (s_module?: Opt<string>, si_key?: Opt<string>) => EncodedAxelarMultisigKeygenCompleted;
/**
 * Encodes a `KeygenExpired` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenExpired: (s_module?: Opt<string>, si_key?: Opt<string>) => EncodedAxelarMultisigKeygenExpired;
/**
 * Encodes a `PubKeySubmitted` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @param atu8_participant - `participant`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigPubKeySubmitted: (s_module?: Opt<string>, si_key?: Opt<string>, atu8_participant?: Opt<Uint8Array>, atu8_pub_key?: Opt<Uint8Array>) => EncodedAxelarMultisigPubKeySubmitted;
/**
 * Encodes a `SigningStarted` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @param si_key - `key_id`:
 * @param a_pub_keys - `pub_keys`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param s_requesting_module - `requesting_module`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigSigningStarted: (s_module?: Opt<string>, sg_sig_id?: Opt<WeakUint64Str>, si_key?: Opt<string>, a_pub_keys?: Opt<Encoded<'/axelar.multisig.v1beta1.SigningStarted.PubKeysEntry'>[]>, atu8_payload_hash?: Opt<Uint8Array>, s_requesting_module?: Opt<string>) => EncodedAxelarMultisigSigningStarted;
/**
 * Encodes a `SigningCompleted` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigSigningCompleted: (s_module?: Opt<string>, sg_sig_id?: Opt<WeakUint64Str>) => EncodedAxelarMultisigSigningCompleted;
/**
 * Encodes a `SigningExpired` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigSigningExpired: (s_module?: Opt<string>, sg_sig_id?: Opt<WeakUint64Str>) => EncodedAxelarMultisigSigningExpired;
/**
 * Encodes a `SignatureSubmitted` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @param atu8_participant - `participant`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigSignatureSubmitted: (s_module?: Opt<string>, sg_sig_id?: Opt<WeakUint64Str>, atu8_participant?: Opt<Uint8Array>, atu8_signature?: Opt<Uint8Array>) => EncodedAxelarMultisigSignatureSubmitted;
/**
 * Encodes a `KeyAssigned` protobuf message:
 * @param s_module - `module`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyAssigned: (s_module?: Opt<string>, s_chain?: Opt<string>, si_key?: Opt<string>) => EncodedAxelarMultisigKeyAssigned;
/**
 * Encodes a `KeyRotated` protobuf message:
 * @param s_module - `module`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeyRotated: (s_module?: Opt<string>, s_chain?: Opt<string>, si_key?: Opt<string>) => EncodedAxelarMultisigKeyRotated;
/**
 * Encodes a `KeygenOptOut` protobuf message:
 * @param atu8_participant - `participant`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenOptOut: (atu8_participant?: Opt<Uint8Array>) => EncodedAxelarMultisigKeygenOptOut;
/**
 * Encodes a `KeygenOptIn` protobuf message:
 * @param atu8_participant - `participant`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigKeygenOptIn: (atu8_participant?: Opt<Uint8Array>) => EncodedAxelarMultisigKeygenOptIn;
/**
 * Encodes a `PubKeysEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigSigningStartedPubKeysEntry: (s_key?: Opt<string>, atu8_value?: Opt<Uint8Array>) => EncodedAxelarMultisigSigningStartedPubKeysEntry;
/**
 * A decoded protobuf KeygenStarted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: key_id -
 *   - 2: participants -
 */
export type DecodedAxelarMultisigKeygenStarted = [
    s_module?: string,
    si_key?: string,
    a_participants?: Uint8Array[]
];
/**
 * Decodes a protobuf KeygenStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenStarted}
 */
export declare const decodeAxelarMultisigKeygenStarted: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenStarted;
/**
 * A decoded protobuf KeygenCompleted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: key_id -
 */
export type DecodedAxelarMultisigKeygenCompleted = [
    s_module?: string,
    si_key?: string
];
/**
 * Decodes a protobuf KeygenCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenCompleted}
 */
export declare const decodeAxelarMultisigKeygenCompleted: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenCompleted;
/**
 * A decoded protobuf KeygenExpired message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: key_id -
 */
export type DecodedAxelarMultisigKeygenExpired = [
    s_module?: string,
    si_key?: string
];
/**
 * Decodes a protobuf KeygenExpired message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenExpired}
 */
export declare const decodeAxelarMultisigKeygenExpired: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenExpired;
/**
 * A decoded protobuf PubKeySubmitted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: key_id -
 *   - 2: participant -
 *   - 3: pub_key -
 */
export type DecodedAxelarMultisigPubKeySubmitted = [
    s_module?: string,
    si_key?: string,
    atu8_participant?: Uint8Array,
    atu8_pub_key?: Uint8Array
];
/**
 * Decodes a protobuf PubKeySubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigPubKeySubmitted}
 */
export declare const decodeAxelarMultisigPubKeySubmitted: (atu8_payload: Uint8Array) => DecodedAxelarMultisigPubKeySubmitted;
/**
 * A decoded protobuf SigningStarted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 *   - 2: key_id -
 *   - 3: pub_keys -
 *   - 4: payload_hash -
 *   - 5: requesting_module -
 */
export type DecodedAxelarMultisigSigningStarted = [
    s_module?: string,
    sg_sig_id?: CwUint64,
    si_key?: string,
    a_pub_keys?: DecodedAxelarMultisigSigningStartedPubKeysEntry[],
    atu8_payload_hash?: Uint8Array,
    s_requesting_module?: string
];
/**
 * Decodes a protobuf SigningStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningStarted}
 */
export declare const decodeAxelarMultisigSigningStarted: (atu8_payload: Uint8Array) => DecodedAxelarMultisigSigningStarted;
/**
 * A decoded protobuf SigningCompleted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 */
export type DecodedAxelarMultisigSigningCompleted = [
    s_module?: string,
    sg_sig_id?: CwUint64
];
/**
 * Decodes a protobuf SigningCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningCompleted}
 */
export declare const decodeAxelarMultisigSigningCompleted: (atu8_payload: Uint8Array) => DecodedAxelarMultisigSigningCompleted;
/**
 * A decoded protobuf SigningExpired message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 */
export type DecodedAxelarMultisigSigningExpired = [
    s_module?: string,
    sg_sig_id?: CwUint64
];
/**
 * Decodes a protobuf SigningExpired message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningExpired}
 */
export declare const decodeAxelarMultisigSigningExpired: (atu8_payload: Uint8Array) => DecodedAxelarMultisigSigningExpired;
/**
 * A decoded protobuf SignatureSubmitted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 *   - 2: participant -
 *   - 3: signature -
 */
export type DecodedAxelarMultisigSignatureSubmitted = [
    s_module?: string,
    sg_sig_id?: CwUint64,
    atu8_participant?: Uint8Array,
    atu8_signature?: Uint8Array
];
/**
 * Decodes a protobuf SignatureSubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSignatureSubmitted}
 */
export declare const decodeAxelarMultisigSignatureSubmitted: (atu8_payload: Uint8Array) => DecodedAxelarMultisigSignatureSubmitted;
/**
 * A decoded protobuf KeyAssigned message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: chain -
 *   - 2: key_id -
 */
export type DecodedAxelarMultisigKeyAssigned = [
    s_module?: string,
    s_chain?: string,
    si_key?: string
];
/**
 * Decodes a protobuf KeyAssigned message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyAssigned}
 */
export declare const decodeAxelarMultisigKeyAssigned: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyAssigned;
/**
 * A decoded protobuf KeyRotated message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: chain -
 *   - 2: key_id -
 */
export type DecodedAxelarMultisigKeyRotated = [
    s_module?: string,
    s_chain?: string,
    si_key?: string
];
/**
 * Decodes a protobuf KeyRotated message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyRotated}
 */
export declare const decodeAxelarMultisigKeyRotated: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeyRotated;
/**
 * A decoded protobuf KeygenOptOut message
 *
 * Alias for: participant -
 */
export type DecodedAxelarMultisigKeygenOptOut = [
    atu8_participant?: Uint8Array
];
/**
 * Decodes a protobuf KeygenOptOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptOut}
 */
export declare const decodeAxelarMultisigKeygenOptOut: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenOptOut;
/**
 * A decoded protobuf KeygenOptIn message
 *
 * Alias for: participant -
 */
export type DecodedAxelarMultisigKeygenOptIn = [
    atu8_participant?: Uint8Array
];
/**
 * Decodes a protobuf KeygenOptIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptIn}
 */
export declare const decodeAxelarMultisigKeygenOptIn: (atu8_payload: Uint8Array) => DecodedAxelarMultisigKeygenOptIn;
/**
 * A decoded protobuf PubKeysEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedAxelarMultisigSigningStartedPubKeysEntry = [
    s_key?: string,
    atu8_value?: Uint8Array
];
/**
 * Decodes a protobuf PubKeysEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningStartedPubKeysEntry}
 */
export declare const decodeAxelarMultisigSigningStartedPubKeysEntry: (atu8_payload: Uint8Array) => DecodedAxelarMultisigSigningStartedPubKeysEntry;
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 *   - 2: participants -
 */
export declare const destructAxelarMultisigKeygenStarted: (g_struct: AxelarMultisigKeygenStarted) => [module?: string, key_id?: string, participants?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_STARTED = "/axelar.multisig.v1beta1.KeygenStarted";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenStarted` -
 */
export type AxelarMultisigKeygenStarted = {
    module?: string | undefined;
    key_id?: string | undefined;
    participants?: CwBase64[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 */
export declare const destructAxelarMultisigKeygenCompleted: (g_struct: AxelarMultisigKeygenCompleted) => [module?: string, key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_COMPLETED = "/axelar.multisig.v1beta1.KeygenCompleted";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenCompleted` -
 */
export type AxelarMultisigKeygenCompleted = {
    module?: string | undefined;
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenExpired} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 */
export declare const destructAxelarMultisigKeygenExpired: (g_struct: AxelarMultisigKeygenExpired) => [module?: string, key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_EXPIRED = "/axelar.multisig.v1beta1.KeygenExpired";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenExpired` -
 */
export type AxelarMultisigKeygenExpired = {
    module?: string | undefined;
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigPubKeySubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 *   - 2: participant -
 *   - 3: pub_key -
 */
export declare const destructAxelarMultisigPubKeySubmitted: (g_struct: AxelarMultisigPubKeySubmitted) => [module?: string, key_id?: string, participant?: Uint8Array, pub_key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_PUB_KEY_SUBMITTED = "/axelar.multisig.v1beta1.PubKeySubmitted";
/**
 * JSON serialization of `axelar.multisig.v1beta1.PubKeySubmitted` -
 */
export type AxelarMultisigPubKeySubmitted = {
    module?: string | undefined;
    key_id?: string | undefined;
    participant?: CwBase64 | undefined;
    pub_key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigSigningStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 *   - 2: key_id -
 *   - 3: pub_keys -
 *   - 4: payload_hash -
 *   - 5: requesting_module -
 */
export declare const destructAxelarMultisigSigningStarted: (g_struct: AxelarMultisigSigningStarted) => [module?: string, sig_id?: CwUint64, key_id?: string, pub_keys?: AxelarMultisigSigningStartedPubKeysEntry[], payload_hash?: Uint8Array, requesting_module?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_STARTED = "/axelar.multisig.v1beta1.SigningStarted";
/**
 * JSON serialization of `axelar.multisig.v1beta1.SigningStarted` -
 */
export type AxelarMultisigSigningStarted = {
    module?: string | undefined;
    sig_id?: CwUint64 | undefined;
    key_id?: string | undefined;
    pub_keys?: AxelarMultisigSigningStartedPubKeysEntry[] | undefined;
    payload_hash?: CwBase64 | undefined;
    requesting_module?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigSigningStartedPubKeysEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructAxelarMultisigSigningStartedPubKeysEntry: (g_struct: AxelarMultisigSigningStartedPubKeysEntry) => [key?: string, value?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_STARTED_PUB_KEYS_ENTRY = "/axelar.multisig.v1beta1.SigningStarted.PubKeysEntry";
/**
 * JSON serialization of `axelar.multisig.v1beta1.SigningStarted.PubKeysEntry` -
 */
export type AxelarMultisigSigningStartedPubKeysEntry = {
    key?: string | undefined;
    value?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigSigningCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 */
export declare const destructAxelarMultisigSigningCompleted: (g_struct: AxelarMultisigSigningCompleted) => [module?: string, sig_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_COMPLETED = "/axelar.multisig.v1beta1.SigningCompleted";
/**
 * JSON serialization of `axelar.multisig.v1beta1.SigningCompleted` -
 */
export type AxelarMultisigSigningCompleted = {
    module?: string | undefined;
    sig_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigSigningExpired} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 */
export declare const destructAxelarMultisigSigningExpired: (g_struct: AxelarMultisigSigningExpired) => [module?: string, sig_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_EXPIRED = "/axelar.multisig.v1beta1.SigningExpired";
/**
 * JSON serialization of `axelar.multisig.v1beta1.SigningExpired` -
 */
export type AxelarMultisigSigningExpired = {
    module?: string | undefined;
    sig_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigSignatureSubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 *   - 2: participant -
 *   - 3: signature -
 */
export declare const destructAxelarMultisigSignatureSubmitted: (g_struct: AxelarMultisigSignatureSubmitted) => [module?: string, sig_id?: CwUint64, participant?: Uint8Array, signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNATURE_SUBMITTED = "/axelar.multisig.v1beta1.SignatureSubmitted";
/**
 * JSON serialization of `axelar.multisig.v1beta1.SignatureSubmitted` -
 */
export type AxelarMultisigSignatureSubmitted = {
    module?: string | undefined;
    sig_id?: CwUint64 | undefined;
    participant?: CwBase64 | undefined;
    signature?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyAssigned} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: chain -
 *   - 2: key_id -
 */
export declare const destructAxelarMultisigKeyAssigned: (g_struct: AxelarMultisigKeyAssigned) => [module?: string, chain?: string, key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_ASSIGNED = "/axelar.multisig.v1beta1.KeyAssigned";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyAssigned` -
 */
export type AxelarMultisigKeyAssigned = {
    module?: string | undefined;
    chain?: string | undefined;
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeyRotated} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: chain -
 *   - 2: key_id -
 */
export declare const destructAxelarMultisigKeyRotated: (g_struct: AxelarMultisigKeyRotated) => [module?: string, chain?: string, key_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_ROTATED = "/axelar.multisig.v1beta1.KeyRotated";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeyRotated` -
 */
export type AxelarMultisigKeyRotated = {
    module?: string | undefined;
    chain?: string | undefined;
    key_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptOut} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: participant -
 */
export declare const destructAxelarMultisigKeygenOptOut: (g_struct: AxelarMultisigKeygenOptOut) => [participant?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_OUT = "/axelar.multisig.v1beta1.KeygenOptOut";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenOptOut` -
 */
export type AxelarMultisigKeygenOptOut = {
    participant?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptIn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: participant -
 */
export declare const destructAxelarMultisigKeygenOptIn: (g_struct: AxelarMultisigKeygenOptIn) => [participant?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_IN = "/axelar.multisig.v1beta1.KeygenOptIn";
/**
 * JSON serialization of `axelar.multisig.v1beta1.KeygenOptIn` -
 */
export type AxelarMultisigKeygenOptIn = {
    participant?: CwBase64 | undefined;
};
