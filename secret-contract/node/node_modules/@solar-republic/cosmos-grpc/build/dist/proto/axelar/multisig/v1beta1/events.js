import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `KeygenStarted` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @param a_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenStarted = (s_module, si_key, a_participants) => Protobuf() // ...
    .s(s_module) // string module = 1
    .s(si_key) // string key_id = 2
    .B(a_participants) // bytes[] participants = 3
    .o;
/**
 * Encodes a `KeygenCompleted` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenCompleted = (s_module, si_key) => Protobuf() // ...
    .s(s_module) // string module = 1
    .s(si_key) // string key_id = 2
    .o;
/**
 * Encodes a `KeygenExpired` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenExpired = (s_module, si_key) => Protobuf() // ...
    .s(s_module) // string module = 1
    .s(si_key) // string key_id = 2
    .o;
/**
 * Encodes a `PubKeySubmitted` protobuf message:
 * @param s_module - `module`:
 * @param si_key - `key_id`:
 * @param atu8_participant - `participant`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigPubKeySubmitted = (s_module, si_key, atu8_participant, atu8_pub_key) => Protobuf() // ...
    .s(s_module) // string module = 1
    .s(si_key) // string key_id = 2
    .b(atu8_participant) // bytes participant = 3
    .b(atu8_pub_key) // bytes pub_key = 4
    .o;
/**
 * Encodes a `SigningStarted` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @param si_key - `key_id`:
 * @param a_pub_keys - `pub_keys`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param s_requesting_module - `requesting_module`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSigningStarted = (s_module, sg_sig_id, si_key, a_pub_keys, atu8_payload_hash, s_requesting_module) => Protobuf() // ...
    .s(s_module) // string module = 1
    .g(sg_sig_id) // uint64 sig_id = 2
    .s(si_key) // string key_id = 3
    .B(a_pub_keys) // PubKeysEntry[] pub_keys = 4
    .b(atu8_payload_hash) // bytes payload_hash = 5
    .s(s_requesting_module) // string requesting_module = 6
    .o;
/**
 * Encodes a `SigningCompleted` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSigningCompleted = (s_module, sg_sig_id) => Protobuf() // ...
    .s(s_module) // string module = 1
    .g(sg_sig_id) // uint64 sig_id = 2
    .o;
/**
 * Encodes a `SigningExpired` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSigningExpired = (s_module, sg_sig_id) => Protobuf() // ...
    .s(s_module) // string module = 1
    .g(sg_sig_id) // uint64 sig_id = 2
    .o;
/**
 * Encodes a `SignatureSubmitted` protobuf message:
 * @param s_module - `module`:
 * @param sg_sig_id - `sig_id`:
 * @param atu8_participant - `participant`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSignatureSubmitted = (s_module, sg_sig_id, atu8_participant, atu8_signature) => Protobuf() // ...
    .s(s_module) // string module = 1
    .g(sg_sig_id) // uint64 sig_id = 2
    .b(atu8_participant) // bytes participant = 3
    .b(atu8_signature) // bytes signature = 4
    .o;
/**
 * Encodes a `KeyAssigned` protobuf message:
 * @param s_module - `module`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeyAssigned = (s_module, s_chain, si_key) => Protobuf() // ...
    .s(s_module) // string module = 1
    .s(s_chain) // string chain = 2
    .s(si_key) // string key_id = 3
    .o;
/**
 * Encodes a `KeyRotated` protobuf message:
 * @param s_module - `module`:
 * @param s_chain - `chain`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeyRotated = (s_module, s_chain, si_key) => Protobuf() // ...
    .s(s_module) // string module = 1
    .s(s_chain) // string chain = 2
    .s(si_key) // string key_id = 3
    .o;
/**
 * Encodes a `KeygenOptOut` protobuf message:
 * @param atu8_participant - `participant`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenOptOut = (atu8_participant) => Protobuf() // ...
    .b(atu8_participant) // bytes participant = 1
    .o;
/**
 * Encodes a `KeygenOptIn` protobuf message:
 * @param atu8_participant - `participant`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigKeygenOptIn = (atu8_participant) => Protobuf() // ...
    .b(atu8_participant) // bytes participant = 1
    .o;
/**
 * Encodes a `PubKeysEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigSigningStartedPubKeysEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // bytes value = 2
    .o;
/**
 * Decodes a protobuf KeygenStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenStarted}
 */
export const decodeAxelarMultisigKeygenStarted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0]);
/**
 * Decodes a protobuf KeygenCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenCompleted}
 */
export const decodeAxelarMultisigKeygenCompleted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf KeygenExpired message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenExpired}
 */
export const decodeAxelarMultisigKeygenExpired = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf PubKeySubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigPubKeySubmitted}
 */
export const decodeAxelarMultisigPubKeySubmitted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1]);
/**
 * Decodes a protobuf SigningStarted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningStarted}
 */
export const decodeAxelarMultisigSigningStarted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5, 0, 1, 5], [0, 0, 0, decodeAxelarMultisigSigningStartedPubKeysEntry]);
/**
 * Decodes a protobuf SigningCompleted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningCompleted}
 */
export const decodeAxelarMultisigSigningCompleted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf SigningExpired message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningExpired}
 */
export const decodeAxelarMultisigSigningExpired = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Decodes a protobuf SignatureSubmitted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSignatureSubmitted}
 */
export const decodeAxelarMultisigSignatureSubmitted = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1, 1]);
/**
 * Decodes a protobuf KeyAssigned message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyAssigned}
 */
export const decodeAxelarMultisigKeyAssigned = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf KeyRotated message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeyRotated}
 */
export const decodeAxelarMultisigKeyRotated = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf KeygenOptOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptOut}
 */
export const decodeAxelarMultisigKeygenOptOut = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf KeygenOptIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigKeygenOptIn}
 */
export const decodeAxelarMultisigKeygenOptIn = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf PubKeysEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigSigningStartedPubKeysEntry}
 */
export const decodeAxelarMultisigSigningStartedPubKeysEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 *   - 2: participants -
 */
export const destructAxelarMultisigKeygenStarted = (g_struct) => [g_struct.module, g_struct.key_id, map(g_struct.participants, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_STARTED = '/axelar.multisig.v1beta1.KeygenStarted';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 */
export const destructAxelarMultisigKeygenCompleted = (g_struct) => [g_struct.module, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_COMPLETED = '/axelar.multisig.v1beta1.KeygenCompleted';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenExpired} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 */
export const destructAxelarMultisigKeygenExpired = (g_struct) => [g_struct.module, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_EXPIRED = '/axelar.multisig.v1beta1.KeygenExpired';
/**
 * Destructures the fields of a {@link AxelarMultisigPubKeySubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: key_id -
 *   - 2: participant -
 *   - 3: pub_key -
 */
export const destructAxelarMultisigPubKeySubmitted = (g_struct) => [g_struct.module, g_struct.key_id, safe_base64_to_bytes(g_struct.participant), safe_base64_to_bytes(g_struct.pub_key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_PUB_KEY_SUBMITTED = '/axelar.multisig.v1beta1.PubKeySubmitted';
/**
 * Destructures the fields of a {@link AxelarMultisigSigningStarted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 *   - 2: key_id -
 *   - 3: pub_keys -
 *   - 4: payload_hash -
 *   - 5: requesting_module -
 */
export const destructAxelarMultisigSigningStarted = (g_struct) => [g_struct.module, g_struct.sig_id, g_struct.key_id, g_struct.pub_keys, safe_base64_to_bytes(g_struct.payload_hash), g_struct.requesting_module];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_STARTED = '/axelar.multisig.v1beta1.SigningStarted';
/**
 * Destructures the fields of a {@link AxelarMultisigSigningStartedPubKeysEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarMultisigSigningStartedPubKeysEntry = (g_struct) => [g_struct.key, safe_base64_to_bytes(g_struct.value)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_STARTED_PUB_KEYS_ENTRY = '/axelar.multisig.v1beta1.SigningStarted.PubKeysEntry';
/**
 * Destructures the fields of a {@link AxelarMultisigSigningCompleted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 */
export const destructAxelarMultisigSigningCompleted = (g_struct) => [g_struct.module, g_struct.sig_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_COMPLETED = '/axelar.multisig.v1beta1.SigningCompleted';
/**
 * Destructures the fields of a {@link AxelarMultisigSigningExpired} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 */
export const destructAxelarMultisigSigningExpired = (g_struct) => [g_struct.module, g_struct.sig_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNING_EXPIRED = '/axelar.multisig.v1beta1.SigningExpired';
/**
 * Destructures the fields of a {@link AxelarMultisigSignatureSubmitted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: sig_id -
 *   - 2: participant -
 *   - 3: signature -
 */
export const destructAxelarMultisigSignatureSubmitted = (g_struct) => [g_struct.module, g_struct.sig_id, safe_base64_to_bytes(g_struct.participant), safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_SIGNATURE_SUBMITTED = '/axelar.multisig.v1beta1.SignatureSubmitted';
/**
 * Destructures the fields of a {@link AxelarMultisigKeyAssigned} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: chain -
 *   - 2: key_id -
 */
export const destructAxelarMultisigKeyAssigned = (g_struct) => [g_struct.module, g_struct.chain, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_ASSIGNED = '/axelar.multisig.v1beta1.KeyAssigned';
/**
 * Destructures the fields of a {@link AxelarMultisigKeyRotated} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: chain -
 *   - 2: key_id -
 */
export const destructAxelarMultisigKeyRotated = (g_struct) => [g_struct.module, g_struct.chain, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEY_ROTATED = '/axelar.multisig.v1beta1.KeyRotated';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptOut} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: participant -
 */
export const destructAxelarMultisigKeygenOptOut = (g_struct) => [safe_base64_to_bytes(g_struct.participant)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_OUT = '/axelar.multisig.v1beta1.KeygenOptOut';
/**
 * Destructures the fields of a {@link AxelarMultisigKeygenOptIn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: participant -
 */
export const destructAxelarMultisigKeygenOptIn = (g_struct) => [safe_base64_to_bytes(g_struct.participant)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_KEYGEN_OPT_IN = '/axelar.multisig.v1beta1.KeygenOptIn';
//# sourceMappingURL=events.js.map