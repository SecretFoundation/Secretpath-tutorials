import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
export type EncodedAxelarMultisigParams = Encoded<'/axelar.multisig.v1beta1.Params'>;
/**
 * Encodes a `Params` protobuf message: represent the genesis parameters for the module
 * @param g_keygen_threshold - `keygen_threshold`:
 * @param g_signing_threshold - `signing_threshold`:
 * @param sg_keygen_timeout - `keygen_timeout`:
 * @param sg_keygen_grace_period - `keygen_grace_period`:
 * @param sg_signing_timeout - `signing_timeout`:
 * @param sg_signing_grace_period - `signing_grace_period`:
 * @param sg_active_epoch_count - `active_epoch_count`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarMultisigParams: (atu8_keygen_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, atu8_signing_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, sg_keygen_timeout?: Opt<WeakInt64Str>, sg_keygen_grace_period?: Opt<WeakInt64Str>, sg_signing_timeout?: Opt<WeakInt64Str>, sg_signing_grace_period?: Opt<WeakInt64Str>, sg_active_epoch_count?: Opt<WeakUint64Str>) => EncodedAxelarMultisigParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: keygen_threshold -
 *   - 1: signing_threshold -
 *   - 2: keygen_timeout -
 *   - 3: keygen_grace_period -
 *   - 4: signing_timeout -
 *   - 5: signing_grace_period -
 *   - 6: active_epoch_count -
 */
export type DecodedAxelarMultisigParams = [
    a_keygen_threshold?: DecodedAxelarUtilsThreshold,
    a_signing_threshold?: DecodedAxelarUtilsThreshold,
    sg_keygen_timeout?: CwInt64,
    sg_keygen_grace_period?: CwInt64,
    sg_signing_timeout?: CwInt64,
    sg_signing_grace_period?: CwInt64,
    sg_active_epoch_count?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigParams}
 */
export declare const decodeAxelarMultisigParams: (atu8_payload: Uint8Array) => DecodedAxelarMultisigParams;
/**
 * Destructures the fields of a {@link AxelarMultisigParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keygen_threshold -
 *   - 1: signing_threshold -
 *   - 2: keygen_timeout -
 *   - 3: keygen_grace_period -
 *   - 4: signing_timeout -
 *   - 5: signing_grace_period -
 *   - 6: active_epoch_count -
 */
export declare const destructAxelarMultisigParams: (g_struct: AxelarMultisigParams) => [keygen_threshold?: AxelarUtilsThreshold, signing_threshold?: AxelarUtilsThreshold, keygen_timeout?: CwInt64, keygen_grace_period?: CwInt64, signing_timeout?: CwInt64, signing_grace_period?: CwInt64, active_epoch_count?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_MULTISIG_PARAMS = "/axelar.multisig.v1beta1.Params";
/**
 * JSON serialization of `axelar.multisig.v1beta1.Params` - represent the genesis parameters for the module
 */
export type AxelarMultisigParams = {
    keygen_threshold?: AxelarUtilsThreshold | undefined;
    signing_threshold?: AxelarUtilsThreshold | undefined;
    keygen_timeout?: CwInt64 | undefined;
    keygen_grace_period?: CwInt64 | undefined;
    signing_timeout?: CwInt64 | undefined;
    signing_grace_period?: CwInt64 | undefined;
    active_epoch_count?: CwUint64 | undefined;
};
