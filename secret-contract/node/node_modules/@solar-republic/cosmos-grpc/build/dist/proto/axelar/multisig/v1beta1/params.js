import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAxelarUtilsThreshold } from '../../utils/v1beta1/threshold.js';
/**
 * Encodes a `Params` protobuf message: represent the genesis parameters for the module
 * @param g_keygen_threshold - `keygen_threshold`:
 * @param g_signing_threshold - `signing_threshold`:
 * @param sg_keygen_timeout - `keygen_timeout`:
 * @param sg_keygen_grace_period - `keygen_grace_period`:
 * @param sg_signing_timeout - `signing_timeout`:
 * @param sg_signing_grace_period - `signing_grace_period`:
 * @param sg_active_epoch_count - `active_epoch_count`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarMultisigParams = (atu8_keygen_threshold, atu8_signing_threshold, sg_keygen_timeout, sg_keygen_grace_period, sg_signing_timeout, sg_signing_grace_period, sg_active_epoch_count) => Protobuf() // ...
    .b(atu8_keygen_threshold) // Threshold keygen_threshold = 1
    .b(atu8_signing_threshold) // Threshold signing_threshold = 2
    .g(sg_keygen_timeout) // int32 keygen_timeout = 3
    .g(sg_keygen_grace_period) // int32 keygen_grace_period = 4
    .g(sg_signing_timeout) // int32 signing_timeout = 5
    .g(sg_signing_grace_period) // int32 signing_grace_period = 6
    .g(sg_active_epoch_count) // uint64 active_epoch_count = 7
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarMultisigParams}
 */
export const decodeAxelarMultisigParams = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3, 3, 3, 3, 3], [decodeAxelarUtilsThreshold, decodeAxelarUtilsThreshold]);
/**
 * Destructures the fields of a {@link AxelarMultisigParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keygen_threshold -
 *   - 1: signing_threshold -
 *   - 2: keygen_timeout -
 *   - 3: keygen_grace_period -
 *   - 4: signing_timeout -
 *   - 5: signing_grace_period -
 *   - 6: active_epoch_count -
 */
export const destructAxelarMultisigParams = (g_struct) => [g_struct.keygen_threshold, g_struct.signing_threshold, g_struct.keygen_timeout, g_struct.keygen_grace_period, g_struct.signing_timeout, g_struct.signing_grace_period, g_struct.active_epoch_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_MULTISIG_PARAMS = '/axelar.multisig.v1beta1.Params';
//# sourceMappingURL=params.js.map