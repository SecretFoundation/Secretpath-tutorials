/// <reference types="node" />
import type { Opt } from '../../../../api/types.js';
import type { AxelarMultisigKeyIDResponse, AxelarMultisigNextKeyIDResponse, AxelarMultisigKeyResponse, AxelarMultisigKeygenSessionResponse, AxelarMultisigParamsResponse } from './query.js';
import type { AxelarMultisigStartKeygenResponse, AxelarMultisigSubmitPubKeyResponse, AxelarMultisigSubmitSignatureResponse, AxelarMultisigRotateKeyResponse, AxelarMultisigKeygenOptOutResponse, AxelarMultisigKeygenOptInResponse } from './tx.js';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param si_key -
 * @returns an empty tuple
 */
export declare const submitAxelarMultisigStartKeygen: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, si_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigStartKeygenResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param si_key -
 * @param atu8_pub_key -
 * @param atu8_signature -
 * @returns an empty tuple
 */
export declare const submitAxelarMultisigSubmitPubKey: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, si_key?: Opt<string>, atu8_pub_key?: Opt<Uint8Array>, atu8_signature?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigSubmitPubKeyResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param sg_sig_id -
 * @param atu8_signature -
 * @returns an empty tuple
 */
export declare const submitAxelarMultisigSubmitSignature: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, sg_sig_id?: Opt<`${bigint}`>, atu8_signature?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigSubmitSignatureResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param si_key -
 * @returns an empty tuple
 */
export declare const submitAxelarMultisigRotateKey: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, s_chain?: Opt<string>, si_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigRotateKeyResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export declare const submitAxelarMultisigKeygenOptOut: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigKeygenOptOutResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export declare const submitAxelarMultisigKeygenOptIn: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigKeygenOptInResponse>>;
/**
 * Returns the key ID of a key assigned to a given chain. If no key is assigned, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 */
export declare const queryAxelarMultisigKeyID: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigKeyIDResponse>>;
/**
 * Returns the key ID assigned for the next rotation on a given chain. If no key rotation is in progress, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 */
export declare const queryAxelarMultisigNextKeyID: (z_req: string | ({
    origin: string;
} & RequestInit), s_chain?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigNextKeyIDResponse>>;
/**
 * Returns the key corresponding to a given key ID. If no key is found, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_key -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 *   - 1: state - the 'key_id' response property
 *   - 2: started_at - the 'key_id' response property
 *   - 3: started_at_timestamp - the 'key_id' response property
 *   - 4: threshold_weight - the 'key_id' response property
 *   - 5: bonded_weight - the 'key_id' response property
 *   - 6: participants - the 'key_id' response property
 */
export declare const queryAxelarMultisigKey: (z_req: string | ({
    origin: string;
} & RequestInit), si_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigKeyResponse>>;
/**
 * Returns the keygen session info for a given key ID. If no key is found, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_key -
 * @returns a tuple where:
 *   - 0: started_at - the 'started_at' response property
 *   - 1: started_at_timestamp - the 'started_at' response property
 *   - 2: expires_at - the 'started_at' response property
 *   - 3: completed_at - the 'started_at' response property
 *   - 4: grace_period - the 'started_at' response property
 *   - 5: state - the 'started_at' response property
 *   - 6: keygen_threshold_weight - the 'started_at' response property
 *   - 7: signing_threshold_weight - the 'started_at' response property
 *   - 8: bonded_weight - the 'started_at' response property
 *   - 9: participants - the 'started_at' response property
 */
export declare const queryAxelarMultisigKeygenSession: (z_req: string | ({
    origin: string;
} & RequestInit), si_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigKeygenSessionResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export declare const queryAxelarMultisigParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarMultisigParamsResponse>>;
