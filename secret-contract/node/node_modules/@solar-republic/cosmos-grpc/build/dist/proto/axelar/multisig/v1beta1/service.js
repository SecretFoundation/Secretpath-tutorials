import { bech32_decode } from '@solar-republic/crypto';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
const SR_LCD_AXELAR_MULTISIG_MSGSERVICE = '/axelar/multisig/';
const SR_LCD_AXELAR_MULTISIG_QUERYSERVICE = '/axelar/multisig/v1beta1/';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param si_key -
 * @returns an empty tuple
 */
export const submitAxelarMultisigStartKeygen = restful_grpc((sa_sender, si_key) => [SR_LCD_AXELAR_MULTISIG_MSGSERVICE + 'start_keygen', {
        sender: sa_sender,
        key_id: si_key,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param si_key -
 * @param atu8_pub_key -
 * @param atu8_signature -
 * @returns an empty tuple
 */
export const submitAxelarMultisigSubmitPubKey = restful_grpc((sa_sender, si_key, atu8_pub_key, atu8_signature) => [SR_LCD_AXELAR_MULTISIG_MSGSERVICE + 'submit_pub_key', {
        sender: sa_sender,
        key_id: si_key,
        pub_key: safe_bytes_to_base64(atu8_pub_key),
        signature: safe_bytes_to_base64(atu8_signature),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param sg_sig_id -
 * @param atu8_signature -
 * @returns an empty tuple
 */
export const submitAxelarMultisigSubmitSignature = restful_grpc((sa_sender, sg_sig_id, atu8_signature) => [SR_LCD_AXELAR_MULTISIG_MSGSERVICE + 'submit_signature', {
        sender: sa_sender,
        sig_id: sg_sig_id,
        signature: safe_bytes_to_base64(atu8_signature),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param si_key -
 * @returns an empty tuple
 */
export const submitAxelarMultisigRotateKey = restful_grpc((sa_sender, s_chain, si_key) => [SR_LCD_AXELAR_MULTISIG_MSGSERVICE + 'rotate_key', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        key_id: si_key,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export const submitAxelarMultisigKeygenOptOut = restful_grpc(sa_sender => [SR_LCD_AXELAR_MULTISIG_MSGSERVICE + 'v1beta1/keygen_opt_out', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export const submitAxelarMultisigKeygenOptIn = restful_grpc(sa_sender => [SR_LCD_AXELAR_MULTISIG_MSGSERVICE + 'v1beta1/keygen_opt_in', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
    }], 1);
/**
 * Returns the key ID of a key assigned to a given chain. If no key is assigned, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 */
export const queryAxelarMultisigKeyID = restful_grpc(s_chain => [SR_LCD_AXELAR_MULTISIG_QUERYSERVICE + 'key_id/' + s_chain]);
/**
 * Returns the key ID assigned for the next rotation on a given chain. If no key rotation is in progress, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 */
export const queryAxelarMultisigNextKeyID = restful_grpc(s_chain => [SR_LCD_AXELAR_MULTISIG_QUERYSERVICE + 'next_key_id/' + s_chain]);
/**
 * Returns the key corresponding to a given key ID. If no key is found, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_key -
 * @returns a tuple where:
 *   - 0: key_id - the 'key_id' response property
 *   - 1: state - the 'key_id' response property
 *   - 2: started_at - the 'key_id' response property
 *   - 3: started_at_timestamp - the 'key_id' response property
 *   - 4: threshold_weight - the 'key_id' response property
 *   - 5: bonded_weight - the 'key_id' response property
 *   - 6: participants - the 'key_id' response property
 */
export const queryAxelarMultisigKey = restful_grpc(si_key => [SR_LCD_AXELAR_MULTISIG_QUERYSERVICE + 'key', {
        key_id: si_key,
    }]);
/**
 * Returns the keygen session info for a given key ID. If no key is found, it returns the grpc NOT_FOUND error.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_key -
 * @returns a tuple where:
 *   - 0: started_at - the 'started_at' response property
 *   - 1: started_at_timestamp - the 'started_at' response property
 *   - 2: expires_at - the 'started_at' response property
 *   - 3: completed_at - the 'started_at' response property
 *   - 4: grace_period - the 'started_at' response property
 *   - 5: state - the 'started_at' response property
 *   - 6: keygen_threshold_weight - the 'started_at' response property
 *   - 7: signing_threshold_weight - the 'started_at' response property
 *   - 8: bonded_weight - the 'started_at' response property
 *   - 9: participants - the 'started_at' response property
 */
export const queryAxelarMultisigKeygenSession = restful_grpc(si_key => [SR_LCD_AXELAR_MULTISIG_QUERYSERVICE + 'keygen_session', {
        key_id: si_key,
    }]);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryAxelarMultisigParams = restful_grpc(() => [SR_LCD_AXELAR_MULTISIG_QUERYSERVICE + 'params']);
//# sourceMappingURL=service.js.map