import { __UNDEFINED } from '@blake.regalia/belt';
import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf, decode_coin } from '../../../../../api/protobuf-reader.js';
import { Protobuf, coin, coins } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `Chain` protobuf message: represents the properties of a registered blockchain
 * @param s_name - `name`:
 * @param b_supports_foreign_assets - `supports_foreign_assets`:
 * @param xc_key_type - `key_type`:
 * @param s_module - `module`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedChain = (s_name, b_supports_foreign_assets, xc_key_type, s_module) => Protobuf() // ...
    .s(s_name) // string name = 1
    .v(b_supports_foreign_assets, 3) // boolean supports_foreign_assets = 3
    .v(xc_key_type, 4) // KeyType key_type = 4
    .s(s_module, 5) // string module = 5
    .o;
/**
 * Encodes a `CrossChainAddress` protobuf message: represents a generalized address on any registered chain
 * @param g_chain - `chain`:
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedCrossChainAddress = (atu8_chain, sa_address) => Protobuf() // ...
    .b(atu8_chain) // Chain chain = 1
    .s(sa_address) // string address = 2
    .o;
/**
 * Encodes a `CrossChainTransfer` protobuf message: represents a generalized transfer of some asset to a registered blockchain
 * @param g_recipient - `recipient`:
 * @param a_asset - `asset`:
 * @param sg_id - `id`:
 * @param xc_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedCrossChainTransfer = (atu8_recipient, a_asset, sg_id, xc_state) => Protobuf() // ...
    .b(atu8_recipient) // CrossChainAddress recipient = 1
    .b(coin(a_asset)) // Coin asset = 2
    .g(sg_id) // uint64 id = 3
    .v(xc_state) // TransferState state = 4
    .o;
/**
 * Encodes a `TransferFee` protobuf message: represents accumulated fees generated by the network
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedTransferFee = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `FeeInfo` protobuf message:
 * @param s_chain - `chain`:
 * @param s_asset - `asset`:
 * @param atu8_fee_rate - `fee_rate`:
 * @param atu8_min_fee - `min_fee`:
 * @param atu8_max_fee - `max_fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedFeeInfo = (s_chain, s_asset, atu8_fee_rate, atu8_min_fee, atu8_max_fee) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .s(s_asset) // string asset = 2
    .b(atu8_fee_rate) // bytes fee_rate = 3
    .b(atu8_min_fee) // bytes min_fee = 4
    .b(atu8_max_fee) // bytes max_fee = 5
    .o;
/**
 * Encodes a `Asset` protobuf message:
 * @param s_denom - `denom`:
 * @param b_is_native_asset - `is_native_asset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedAsset = (s_denom, b_is_native_asset) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .v(b_is_native_asset, 3) // boolean is_native_asset = 3
    .o;
/**
 * Encodes a `GeneralMessage` protobuf message:
 * @param s_id - `id`:
 * @param g_sender - `sender`:
 * @param g_recipient - `recipient`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param xc_status - `status`:
 * @param a_asset - `asset`:
 * @param atu8_source_tx_id - `source_tx_id`:
 * @param sg_source_tx_index - `source_tx_index`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedGeneralMessage = (s_id, atu8_sender, atu8_recipient, atu8_payload_hash, xc_status, a_asset, atu8_source_tx_id, sg_source_tx_index) => Protobuf() // ...
    .s(s_id) // string id = 1
    .b(atu8_sender) // CrossChainAddress sender = 2
    .b(atu8_recipient) // CrossChainAddress recipient = 3
    .b(atu8_payload_hash) // bytes payload_hash = 4
    .v(xc_status) // Status status = 5
    .b(coin(a_asset)) // Coin asset = 6
    .b(atu8_source_tx_id) // bytes source_tx_id = 7
    .g(sg_source_tx_index) // uint64 source_tx_index = 8
    .o;
/**
 * Encodes a `WasmMessage` protobuf message:
 * @param s_source_chain - `source_chain`:
 * @param sa_source - `source_address`:
 * @param s_destination_chain - `destination_chain`:
 * @param sa_destination - `destination_address`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param atu8_source_tx_id - `source_tx_id`:
 * @param sg_source_tx_index - `source_tx_index`:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusExportedWasmMessage = (s_source_chain, sa_source, s_destination_chain, sa_destination, atu8_payload_hash, atu8_source_tx_id, sg_source_tx_index, sa_sender) => Protobuf() // ...
    .s(s_source_chain) // string source_chain = 1
    .s(sa_source) // string source_address = 2
    .s(s_destination_chain) // string destination_chain = 3
    .s(sa_destination) // string destination_address = 4
    .b(atu8_payload_hash) // bytes payload_hash = 5
    .b(atu8_source_tx_id) // bytes source_tx_id = 6
    .g(sg_source_tx_index) // uint64 source_tx_index = 7
    .b(bech32_decode(sa_sender)) // bytes sender = 8
    .o;
/**
 * Decodes a protobuf Chain message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarNexusExportedChain}
 */
export const decodeAxelarNexusExportedChain = ((atu8_payload, [s_name, , b_supports_foreign_assets, xc_key_type, s_module] = decode_protobuf(atu8_payload, [5, 0, 1, 1, 5])) => [s_name, __UNDEFINED, b_supports_foreign_assets, xc_key_type, s_module]);
/**
 * Decodes a protobuf CrossChainAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedCrossChainAddress}
 */
export const decodeAxelarNexusExportedCrossChainAddress = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5], [decodeAxelarNexusExportedChain]);
/**
 * Decodes a protobuf CrossChainTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedCrossChainTransfer}
 */
export const decodeAxelarNexusExportedCrossChainTransfer = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3, 1], [decodeAxelarNexusExportedCrossChainAddress, decode_coin]);
/**
 * Decodes a protobuf TransferFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedTransferFee}
 */
export const decodeAxelarNexusExportedTransferFee = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf FeeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedFeeInfo}
 */
export const decodeAxelarNexusExportedFeeInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 1]);
/**
 * Decodes a protobuf Asset message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarNexusExportedAsset}
 */
export const decodeAxelarNexusExportedAsset = ((atu8_payload, [s_denom, , b_is_native_asset] = decode_protobuf(atu8_payload, [5, 0, 1])) => [s_denom, __UNDEFINED, b_is_native_asset]);
/**
 * Decodes a protobuf GeneralMessage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedGeneralMessage}
 */
export const decodeAxelarNexusExportedGeneralMessage = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 1, 1, 1, 1, 3], [0, decodeAxelarNexusExportedCrossChainAddress, decodeAxelarNexusExportedCrossChainAddress, 0, 0, decode_coin]);
/**
 * Decodes a protobuf WasmMessage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusExportedWasmMessage}
 */
export const decodeAxelarNexusExportedWasmMessage = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 1, 1, 3, 1]);
/**
 * Destructures the fields of a {@link AxelarNexusExportedChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 2: supports_foreign_assets -
 *   - 3: key_type -
 *   - 4: module -
 */
export const destructAxelarNexusExportedChain = (g_struct) => [g_struct.name, __UNDEFINED, g_struct.supports_foreign_assets, g_struct.key_type, g_struct.module];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_CHAIN = '/axelar.nexus.exported.v1beta1.Chain';
/**
 * Destructures the fields of a {@link AxelarNexusExportedAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 2: is_native_asset -
 */
export const destructAxelarNexusExportedAsset = (g_struct) => [g_struct.denom, __UNDEFINED, g_struct.is_native_asset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_ASSET = '/axelar.nexus.exported.v1beta1.Asset';
/**
 * Destructures the fields of a {@link AxelarNexusExportedCrossChainAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: address -
 */
export const destructAxelarNexusExportedCrossChainAddress = (g_struct) => [g_struct.chain, g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_CROSS_CHAIN_ADDRESS = '/axelar.nexus.exported.v1beta1.CrossChainAddress';
/**
 * Destructures the fields of a {@link AxelarNexusExportedCrossChainTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: recipient -
 *   - 1: asset -
 *   - 2: id -
 *   - 3: state -
 */
export const destructAxelarNexusExportedCrossChainTransfer = (g_struct) => [g_struct.recipient, g_struct.asset, g_struct.id, g_struct.state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_CROSS_CHAIN_TRANSFER = '/axelar.nexus.exported.v1beta1.CrossChainTransfer';
/**
 * Destructures the fields of a {@link AxelarNexusExportedTransferFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins -
 */
export const destructAxelarNexusExportedTransferFee = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_TRANSFER_FEE = '/axelar.nexus.exported.v1beta1.TransferFee';
/**
 * Destructures the fields of a {@link AxelarNexusExportedFeeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: asset -
 *   - 2: fee_rate -
 *   - 3: min_fee -
 *   - 4: max_fee -
 */
export const destructAxelarNexusExportedFeeInfo = (g_struct) => [g_struct.chain, g_struct.asset, safe_base64_to_bytes(g_struct.fee_rate), safe_base64_to_bytes(g_struct.min_fee), safe_base64_to_bytes(g_struct.max_fee)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_FEE_INFO = '/axelar.nexus.exported.v1beta1.FeeInfo';
/**
 * Destructures the fields of a {@link AxelarNexusExportedGeneralMessage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: sender -
 *   - 2: recipient -
 *   - 3: payload_hash -
 *   - 4: status -
 *   - 5: asset -
 *   - 6: source_tx_id -
 *   - 7: source_tx_index -
 */
export const destructAxelarNexusExportedGeneralMessage = (g_struct) => [g_struct.id, g_struct.sender, g_struct.recipient, safe_base64_to_bytes(g_struct.payload_hash), g_struct.status, g_struct.asset, safe_base64_to_bytes(g_struct.source_tx_id), g_struct.source_tx_index];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE = '/axelar.nexus.exported.v1beta1.GeneralMessage';
/**
 * Destructures the fields of a {@link AxelarNexusExportedWasmMessage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: source_chain -
 *   - 1: source_address -
 *   - 2: destination_chain -
 *   - 3: destination_address -
 *   - 4: payload_hash -
 *   - 5: source_tx_id -
 *   - 6: source_tx_index -
 *   - 7: sender -
 */
export const destructAxelarNexusExportedWasmMessage = (g_struct) => [g_struct.source_chain, g_struct.source_address, g_struct.destination_chain, g_struct.destination_address, safe_base64_to_bytes(g_struct.payload_hash), safe_base64_to_bytes(g_struct.source_tx_id), g_struct.source_tx_index, g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_EXPORTED_WASM_MESSAGE = '/axelar.nexus.exported.v1beta1.WasmMessage';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED = 'TRANSFER_STATE_UNSPECIFIED';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING = 1;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING = 'Pending';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_ARCHIVED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED = 2;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_ARCHIVED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED = 'Archived';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_INSUFFICIENT_AMOUNT** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferState}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT = 3;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferState`.
 *
 * **TRANSFER_STATE_INSUFFICIENT_AMOUNT** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferState}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT = 'InsufficientAmount';
/**
 * Maps a protobuf enum int value for `axelar.nexus.exported.v1beta1.TransferState` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarNexusExportedTransferState = {
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT,
};
/**
 * Maps a JSON enum string value for `axelar.nexus.exported.v1beta1.TransferState` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarNexusExportedTransferState = {
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_UNSPECIFIED,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_PENDING,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_ARCHIVED,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_STATE_INSUFFICIENT_AMOUNT,
};
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED = 'NonExistent';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_APPROVED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED = 1;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_APPROVED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED = 'Approved';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_PROCESSING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING = 2;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_PROCESSING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING = 'Processing';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_EXECUTED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED = 3;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_EXECUTED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED = 'Executed';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED = 4;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status`.
 *
 * **STATUS_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedGeneralMessageStatus}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED = 'Failed';
/**
 * Maps a protobuf enum int value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarNexusExportedGeneralMessageStatus = {
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED]: SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED]: SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING]: SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED]: SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED]: SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED,
};
/**
 * Maps a JSON enum string value for `axelar.nexus.exported.v1beta1.GeneralMessage.Status` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarNexusExportedGeneralMessageStatus = {
    [SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_UNSPECIFIED,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_APPROVED,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING]: XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_PROCESSING,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_EXECUTED,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_GENERAL_MESSAGE_STATUS_FAILED,
};
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferDirection}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferDirection}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED = 'Unspecified';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_INCOMING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferDirection}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING = 1;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_INCOMING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferDirection}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING = 'Incoming';
/**
 * Protobuf enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_OUTGOING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarNexusExportedTransferDirection}
 */
export const XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING = 2;
/**
 * JSON enum value for `axelar.nexus.exported.v1beta1.TransferDirection`.
 *
 * **TRANSFER_DIRECTION_OUTGOING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarNexusExportedTransferDirection}
 */
export const SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING = 'Outgoing';
/**
 * Maps a protobuf enum int value for `axelar.nexus.exported.v1beta1.TransferDirection` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarNexusExportedTransferDirection = {
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING,
    [XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING]: SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING,
};
/**
 * Maps a JSON enum string value for `axelar.nexus.exported.v1beta1.TransferDirection` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarNexusExportedTransferDirection = {
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_UNSPECIFIED,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_INCOMING,
    [SI_JSON_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING]: XC_PROTO_AXELAR_NEXUS_EXPORTED_TRANSFER_DIRECTION_OUTGOING,
};
//# sourceMappingURL=types.js.map