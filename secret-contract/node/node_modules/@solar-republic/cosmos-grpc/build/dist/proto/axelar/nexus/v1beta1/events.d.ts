import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakDurationStr } from '../../../../api/types.js';
import type { AxelarNexusExportedCrossChainAddress, DecodedAxelarNexusExportedCrossChainAddress, AxelarNexusExportedWasmMessage, DecodedAxelarNexusExportedWasmMessage } from '../exported/v1beta1/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarNexusFeeDeducted = Encoded<'/axelar.nexus.v1beta1.FeeDeducted'>;
export type EncodedAxelarNexusInsufficientFee = Encoded<'/axelar.nexus.v1beta1.InsufficientFee'>;
export type EncodedAxelarNexusRateLimitUpdated = Encoded<'/axelar.nexus.v1beta1.RateLimitUpdated'>;
export type EncodedAxelarNexusMessageReceived = Encoded<'/axelar.nexus.v1beta1.MessageReceived'>;
export type EncodedAxelarNexusMessageProcessing = Encoded<'/axelar.nexus.v1beta1.MessageProcessing'>;
export type EncodedAxelarNexusMessageExecuted = Encoded<'/axelar.nexus.v1beta1.MessageExecuted'>;
export type EncodedAxelarNexusMessageFailed = Encoded<'/axelar.nexus.v1beta1.MessageFailed'>;
export type EncodedAxelarNexusWasmMessageRouted = Encoded<'/axelar.nexus.v1beta1.WasmMessageRouted'>;
/**
 * Encodes a `FeeDeducted` protobuf message:
 * @param sg_transfer_id - `transfer_id`:
 * @param s_recipient_chain - `recipient_chain`:
 * @param sa_recipient - `recipient_address`:
 * @param a_amount - `amount`:
 * @param a_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusFeeDeducted: (sg_transfer_id?: Opt<WeakUint64Str>, s_recipient_chain?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>, a_amount?: Opt<SlimCoin>, a_fee?: Opt<SlimCoin>) => EncodedAxelarNexusFeeDeducted;
/**
 * Encodes a `InsufficientFee` protobuf message:
 * @param sg_transfer_id - `transfer_id`:
 * @param s_recipient_chain - `recipient_chain`:
 * @param sa_recipient - `recipient_address`:
 * @param a_amount - `amount`:
 * @param a_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusInsufficientFee: (sg_transfer_id?: Opt<WeakUint64Str>, s_recipient_chain?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>, a_amount?: Opt<SlimCoin>, a_fee?: Opt<SlimCoin>) => EncodedAxelarNexusInsufficientFee;
/**
 * Encodes a `RateLimitUpdated` protobuf message:
 * @param s_chain - `chain`:
 * @param a_limit - `limit`:
 * @param xt_window - `window`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusRateLimitUpdated: (s_chain?: Opt<string>, a_limit?: Opt<SlimCoin>, xt_window?: Opt<number>) => EncodedAxelarNexusRateLimitUpdated;
/**
 * Encodes a `MessageReceived` protobuf message:
 * @param s_id - `id`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param g_sender - `sender`:
 * @param g_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusMessageReceived: (s_id?: Opt<string>, atu8_payload_hash?: Opt<Uint8Array>, atu8_sender?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>, atu8_recipient?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.CrossChainAddress'>>) => EncodedAxelarNexusMessageReceived;
/**
 * Encodes a `MessageProcessing` protobuf message:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusMessageProcessing: (s_id?: Opt<string>) => EncodedAxelarNexusMessageProcessing;
/**
 * Encodes a `MessageExecuted` protobuf message:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusMessageExecuted: (s_id?: Opt<string>) => EncodedAxelarNexusMessageExecuted;
/**
 * Encodes a `MessageFailed` protobuf message:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusMessageFailed: (s_id?: Opt<string>) => EncodedAxelarNexusMessageFailed;
/**
 * Encodes a `WasmMessageRouted` protobuf message:
 * @param g_message - `message`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarNexusWasmMessageRouted: (atu8_message?: Opt<Encoded<'/axelar.nexus.exported.v1beta1.WasmMessage'>>) => EncodedAxelarNexusWasmMessageRouted;
/**
 * A decoded protobuf FeeDeducted message
 *
 * Tuple where:
 *   - 0: transfer_id -
 *   - 1: recipient_chain -
 *   - 2: recipient_address -
 *   - 3: amount -
 *   - 4: fee -
 */
export type DecodedAxelarNexusFeeDeducted = [
    sg_transfer_id?: CwUint64,
    s_recipient_chain?: string,
    sa_recipient?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ],
    a_fee?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf FeeDeducted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusFeeDeducted}
 */
export declare const decodeAxelarNexusFeeDeducted: (atu8_payload: Uint8Array) => DecodedAxelarNexusFeeDeducted;
/**
 * A decoded protobuf InsufficientFee message
 *
 * Tuple where:
 *   - 0: transfer_id -
 *   - 1: recipient_chain -
 *   - 2: recipient_address -
 *   - 3: amount -
 *   - 4: fee -
 */
export type DecodedAxelarNexusInsufficientFee = [
    sg_transfer_id?: CwUint64,
    s_recipient_chain?: string,
    sa_recipient?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ],
    a_fee?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf InsufficientFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusInsufficientFee}
 */
export declare const decodeAxelarNexusInsufficientFee: (atu8_payload: Uint8Array) => DecodedAxelarNexusInsufficientFee;
/**
 * A decoded protobuf RateLimitUpdated message
 *
 * Tuple where:
 *   - 0: chain -
 *   - 1: limit -
 *   - 2: window -
 */
export type DecodedAxelarNexusRateLimitUpdated = [
    s_chain?: string,
    a_limit?: [
        string,
        string
    ],
    a_window?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf RateLimitUpdated message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusRateLimitUpdated}
 */
export declare const decodeAxelarNexusRateLimitUpdated: (atu8_payload: Uint8Array) => DecodedAxelarNexusRateLimitUpdated;
/**
 * A decoded protobuf MessageReceived message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: payload_hash -
 *   - 2: sender -
 *   - 3: recipient -
 */
export type DecodedAxelarNexusMessageReceived = [
    s_id?: string,
    atu8_payload_hash?: Uint8Array,
    a_sender?: DecodedAxelarNexusExportedCrossChainAddress,
    a_recipient?: DecodedAxelarNexusExportedCrossChainAddress
];
/**
 * Decodes a protobuf MessageReceived message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageReceived}
 */
export declare const decodeAxelarNexusMessageReceived: (atu8_payload: Uint8Array) => DecodedAxelarNexusMessageReceived;
/**
 * A decoded protobuf MessageProcessing message
 *
 * Alias for: id -
 */
export type DecodedAxelarNexusMessageProcessing = [
    s_id?: string
];
/**
 * Decodes a protobuf MessageProcessing message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageProcessing}
 */
export declare const decodeAxelarNexusMessageProcessing: (atu8_payload: Uint8Array) => DecodedAxelarNexusMessageProcessing;
/**
 * A decoded protobuf MessageExecuted message
 *
 * Alias for: id -
 */
export type DecodedAxelarNexusMessageExecuted = [
    s_id?: string
];
/**
 * Decodes a protobuf MessageExecuted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageExecuted}
 */
export declare const decodeAxelarNexusMessageExecuted: (atu8_payload: Uint8Array) => DecodedAxelarNexusMessageExecuted;
/**
 * A decoded protobuf MessageFailed message
 *
 * Alias for: id -
 */
export type DecodedAxelarNexusMessageFailed = [
    s_id?: string
];
/**
 * Decodes a protobuf MessageFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageFailed}
 */
export declare const decodeAxelarNexusMessageFailed: (atu8_payload: Uint8Array) => DecodedAxelarNexusMessageFailed;
/**
 * A decoded protobuf WasmMessageRouted message
 *
 * Alias for: message -
 */
export type DecodedAxelarNexusWasmMessageRouted = [
    a_message?: DecodedAxelarNexusExportedWasmMessage
];
/**
 * Decodes a protobuf WasmMessageRouted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusWasmMessageRouted}
 */
export declare const decodeAxelarNexusWasmMessageRouted: (atu8_payload: Uint8Array) => DecodedAxelarNexusWasmMessageRouted;
/**
 * Destructures the fields of a {@link AxelarNexusFeeDeducted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfer_id -
 *   - 1: recipient_chain -
 *   - 2: recipient_address -
 *   - 3: amount -
 *   - 4: fee -
 */
export declare const destructAxelarNexusFeeDeducted: (g_struct: AxelarNexusFeeDeducted) => [transfer_id?: CwUint64, recipient_chain?: string, recipient_address?: CwAccountAddr, amount?: CosmosBaseCoin, fee?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_FEE_DEDUCTED = "/axelar.nexus.v1beta1.FeeDeducted";
/**
 * JSON serialization of `axelar.nexus.v1beta1.FeeDeducted` -
 */
export type AxelarNexusFeeDeducted = {
    transfer_id?: CwUint64 | undefined;
    recipient_chain?: string | undefined;
    recipient_address?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin | undefined;
    fee?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusInsufficientFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfer_id -
 *   - 1: recipient_chain -
 *   - 2: recipient_address -
 *   - 3: amount -
 *   - 4: fee -
 */
export declare const destructAxelarNexusInsufficientFee: (g_struct: AxelarNexusInsufficientFee) => [transfer_id?: CwUint64, recipient_chain?: string, recipient_address?: CwAccountAddr, amount?: CosmosBaseCoin, fee?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_INSUFFICIENT_FEE = "/axelar.nexus.v1beta1.InsufficientFee";
/**
 * JSON serialization of `axelar.nexus.v1beta1.InsufficientFee` -
 */
export type AxelarNexusInsufficientFee = {
    transfer_id?: CwUint64 | undefined;
    recipient_chain?: string | undefined;
    recipient_address?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin | undefined;
    fee?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusRateLimitUpdated} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: limit -
 *   - 2: window -
 */
export declare const destructAxelarNexusRateLimitUpdated: (g_struct: AxelarNexusRateLimitUpdated) => [chain?: string, limit?: CosmosBaseCoin, window?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_RATE_LIMIT_UPDATED = "/axelar.nexus.v1beta1.RateLimitUpdated";
/**
 * JSON serialization of `axelar.nexus.v1beta1.RateLimitUpdated` -
 */
export type AxelarNexusRateLimitUpdated = {
    chain?: string | undefined;
    limit?: CosmosBaseCoin | undefined;
    window?: WeakDurationStr | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusMessageReceived} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: payload_hash -
 *   - 2: sender -
 *   - 3: recipient -
 */
export declare const destructAxelarNexusMessageReceived: (g_struct: AxelarNexusMessageReceived) => [id?: string, payload_hash?: Uint8Array, sender?: AxelarNexusExportedCrossChainAddress, recipient?: AxelarNexusExportedCrossChainAddress];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_RECEIVED = "/axelar.nexus.v1beta1.MessageReceived";
/**
 * JSON serialization of `axelar.nexus.v1beta1.MessageReceived` -
 */
export type AxelarNexusMessageReceived = {
    id?: string | undefined;
    payload_hash?: CwBase64 | undefined;
    sender?: AxelarNexusExportedCrossChainAddress | undefined;
    recipient?: AxelarNexusExportedCrossChainAddress | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusMessageProcessing} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAxelarNexusMessageProcessing: (g_struct: AxelarNexusMessageProcessing) => [id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_PROCESSING = "/axelar.nexus.v1beta1.MessageProcessing";
/**
 * JSON serialization of `axelar.nexus.v1beta1.MessageProcessing` -
 */
export type AxelarNexusMessageProcessing = {
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusMessageExecuted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAxelarNexusMessageExecuted: (g_struct: AxelarNexusMessageExecuted) => [id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_EXECUTED = "/axelar.nexus.v1beta1.MessageExecuted";
/**
 * JSON serialization of `axelar.nexus.v1beta1.MessageExecuted` -
 */
export type AxelarNexusMessageExecuted = {
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusMessageFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructAxelarNexusMessageFailed: (g_struct: AxelarNexusMessageFailed) => [id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_FAILED = "/axelar.nexus.v1beta1.MessageFailed";
/**
 * JSON serialization of `axelar.nexus.v1beta1.MessageFailed` -
 */
export type AxelarNexusMessageFailed = {
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarNexusWasmMessageRouted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message -
 */
export declare const destructAxelarNexusWasmMessageRouted: (g_struct: AxelarNexusWasmMessageRouted) => [message?: AxelarNexusExportedWasmMessage];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_NEXUS_WASM_MESSAGE_ROUTED = "/axelar.nexus.v1beta1.WasmMessageRouted";
/**
 * JSON serialization of `axelar.nexus.v1beta1.WasmMessageRouted` -
 */
export type AxelarNexusWasmMessageRouted = {
    message?: AxelarNexusExportedWasmMessage | undefined;
};
