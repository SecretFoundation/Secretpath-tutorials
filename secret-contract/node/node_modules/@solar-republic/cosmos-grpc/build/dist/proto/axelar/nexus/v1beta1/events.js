import { parse_duration } from '../../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, coin } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarNexusExportedCrossChainAddress, decodeAxelarNexusExportedWasmMessage } from '../exported/v1beta1/types.js';
/**
 * Encodes a `FeeDeducted` protobuf message:
 * @param sg_transfer_id - `transfer_id`:
 * @param s_recipient_chain - `recipient_chain`:
 * @param sa_recipient - `recipient_address`:
 * @param a_amount - `amount`:
 * @param a_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusFeeDeducted = (sg_transfer_id, s_recipient_chain, sa_recipient, a_amount, a_fee) => Protobuf() // ...
    .g(sg_transfer_id) // uint64 transfer_id = 1
    .s(s_recipient_chain) // string recipient_chain = 2
    .s(sa_recipient) // string recipient_address = 3
    .b(coin(a_amount)) // Coin amount = 4
    .b(coin(a_fee)) // Coin fee = 5
    .o;
/**
 * Encodes a `InsufficientFee` protobuf message:
 * @param sg_transfer_id - `transfer_id`:
 * @param s_recipient_chain - `recipient_chain`:
 * @param sa_recipient - `recipient_address`:
 * @param a_amount - `amount`:
 * @param a_fee - `fee`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusInsufficientFee = (sg_transfer_id, s_recipient_chain, sa_recipient, a_amount, a_fee) => Protobuf() // ...
    .g(sg_transfer_id) // uint64 transfer_id = 1
    .s(s_recipient_chain) // string recipient_chain = 2
    .s(sa_recipient) // string recipient_address = 3
    .b(coin(a_amount)) // Coin amount = 4
    .b(coin(a_fee)) // Coin fee = 5
    .o;
/**
 * Encodes a `RateLimitUpdated` protobuf message:
 * @param s_chain - `chain`:
 * @param a_limit - `limit`:
 * @param xt_window - `window`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusRateLimitUpdated = (s_chain, a_limit, xt_window) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .b(coin(a_limit)) // Coin limit = 2
    .b(temporal(xt_window)) // Duration window = 3
    .o;
/**
 * Encodes a `MessageReceived` protobuf message:
 * @param s_id - `id`:
 * @param atu8_payload_hash - `payload_hash`:
 * @param g_sender - `sender`:
 * @param g_recipient - `recipient`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusMessageReceived = (s_id, atu8_payload_hash, atu8_sender, atu8_recipient) => Protobuf() // ...
    .s(s_id) // string id = 1
    .b(atu8_payload_hash) // bytes payload_hash = 2
    .b(atu8_sender) // CrossChainAddress sender = 3
    .b(atu8_recipient) // CrossChainAddress recipient = 4
    .o;
/**
 * Encodes a `MessageProcessing` protobuf message:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusMessageProcessing = (s_id) => Protobuf() // ...
    .s(s_id) // string id = 1
    .o;
/**
 * Encodes a `MessageExecuted` protobuf message:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusMessageExecuted = (s_id) => Protobuf() // ...
    .s(s_id) // string id = 1
    .o;
/**
 * Encodes a `MessageFailed` protobuf message:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusMessageFailed = (s_id) => Protobuf() // ...
    .s(s_id) // string id = 1
    .o;
/**
 * Encodes a `WasmMessageRouted` protobuf message:
 * @param g_message - `message`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarNexusWasmMessageRouted = (atu8_message) => Protobuf() // ...
    .b(atu8_message) // WasmMessage message = 1
    .o;
/**
 * Decodes a protobuf FeeDeducted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusFeeDeducted}
 */
export const decodeAxelarNexusFeeDeducted = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 1, 1], [0, 0, 0, decode_coin, decode_coin]);
/**
 * Decodes a protobuf InsufficientFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusInsufficientFee}
 */
export const decodeAxelarNexusInsufficientFee = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 1, 1], [0, 0, 0, decode_coin, decode_coin]);
/**
 * Decodes a protobuf RateLimitUpdated message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusRateLimitUpdated}
 */
export const decodeAxelarNexusRateLimitUpdated = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, [3, 1]], [0, decode_coin, decode_temporal]);
/**
 * Decodes a protobuf MessageReceived message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageReceived}
 */
export const decodeAxelarNexusMessageReceived = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 1], [0, 0, decodeAxelarNexusExportedCrossChainAddress, decodeAxelarNexusExportedCrossChainAddress]);
/**
 * Decodes a protobuf MessageProcessing message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageProcessing}
 */
export const decodeAxelarNexusMessageProcessing = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf MessageExecuted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageExecuted}
 */
export const decodeAxelarNexusMessageExecuted = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf MessageFailed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusMessageFailed}
 */
export const decodeAxelarNexusMessageFailed = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf WasmMessageRouted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarNexusWasmMessageRouted}
 */
export const decodeAxelarNexusWasmMessageRouted = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAxelarNexusExportedWasmMessage]);
/**
 * Destructures the fields of a {@link AxelarNexusFeeDeducted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfer_id -
 *   - 1: recipient_chain -
 *   - 2: recipient_address -
 *   - 3: amount -
 *   - 4: fee -
 */
export const destructAxelarNexusFeeDeducted = (g_struct) => [g_struct.transfer_id, g_struct.recipient_chain, g_struct.recipient_address, g_struct.amount, g_struct.fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_FEE_DEDUCTED = '/axelar.nexus.v1beta1.FeeDeducted';
/**
 * Destructures the fields of a {@link AxelarNexusInsufficientFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: transfer_id -
 *   - 1: recipient_chain -
 *   - 2: recipient_address -
 *   - 3: amount -
 *   - 4: fee -
 */
export const destructAxelarNexusInsufficientFee = (g_struct) => [g_struct.transfer_id, g_struct.recipient_chain, g_struct.recipient_address, g_struct.amount, g_struct.fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_INSUFFICIENT_FEE = '/axelar.nexus.v1beta1.InsufficientFee';
/**
 * Destructures the fields of a {@link AxelarNexusRateLimitUpdated} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: limit -
 *   - 2: window -
 */
export const destructAxelarNexusRateLimitUpdated = (g_struct) => [g_struct.chain, g_struct.limit, parse_duration(g_struct.window)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_RATE_LIMIT_UPDATED = '/axelar.nexus.v1beta1.RateLimitUpdated';
/**
 * Destructures the fields of a {@link AxelarNexusMessageReceived} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: payload_hash -
 *   - 2: sender -
 *   - 3: recipient -
 */
export const destructAxelarNexusMessageReceived = (g_struct) => [g_struct.id, safe_base64_to_bytes(g_struct.payload_hash), g_struct.sender, g_struct.recipient];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_RECEIVED = '/axelar.nexus.v1beta1.MessageReceived';
/**
 * Destructures the fields of a {@link AxelarNexusMessageProcessing} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAxelarNexusMessageProcessing = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_PROCESSING = '/axelar.nexus.v1beta1.MessageProcessing';
/**
 * Destructures the fields of a {@link AxelarNexusMessageExecuted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAxelarNexusMessageExecuted = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_EXECUTED = '/axelar.nexus.v1beta1.MessageExecuted';
/**
 * Destructures the fields of a {@link AxelarNexusMessageFailed} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructAxelarNexusMessageFailed = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_MESSAGE_FAILED = '/axelar.nexus.v1beta1.MessageFailed';
/**
 * Destructures the fields of a {@link AxelarNexusWasmMessageRouted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message -
 */
export const destructAxelarNexusWasmMessageRouted = (g_struct) => [g_struct.message];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_NEXUS_WASM_MESSAGE_ROUTED = '/axelar.nexus.v1beta1.WasmMessageRouted';
//# sourceMappingURL=events.js.map