import { bech32_decode } from '@solar-republic/crypto';
import { duration_to_json } from '../../../../api/json.js';
import { restful_grpc, restruct_coin } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
const SR_LCD_AXELAR_NEXUS_MSGSERVICE = '/axelar/nexus/';
const SR_LCD_AXELAR_NEXUS_QUERYSERVICE = '/axelar/nexus/v1beta1/';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export const submitAxelarNexusRegisterChainMaintainer = restful_grpc((sa_sender, a_chains) => [SR_LCD_AXELAR_NEXUS_MSGSERVICE + 'register_chain_maintainer', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chains: a_chains,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export const submitAxelarNexusDeregisterChainMaintainer = restful_grpc((sa_sender, a_chains) => [SR_LCD_AXELAR_NEXUS_MSGSERVICE + 'deregister_chain_maintainer', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chains: a_chains,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export const submitAxelarNexusActivateChain = restful_grpc((sa_sender, a_chains) => [SR_LCD_AXELAR_NEXUS_MSGSERVICE + 'activate_chain', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chains: a_chains,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param a_chains -
 * @returns an empty tuple
 */
export const submitAxelarNexusDeactivateChain = restful_grpc((sa_sender, a_chains) => [SR_LCD_AXELAR_NEXUS_MSGSERVICE + 'deactivate_chain', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chains: a_chains,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param g_fee_info -
 * @returns an empty tuple
 */
export const submitAxelarNexusRegisterAssetFee = restful_grpc((sa_sender, g_fee_info) => [SR_LCD_AXELAR_NEXUS_MSGSERVICE + 'register_asset_fee', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        fee_info: g_fee_info,
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param s_chain -
 * @param a_limit -
 * @param xt_window -
 * @returns an empty tuple
 */
export const submitAxelarNexusSetTransferRateLimit = restful_grpc((sa_sender, s_chain, a_limit, xt_window) => [SR_LCD_AXELAR_NEXUS_MSGSERVICE + 'set_transfer_rate_limit', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        chain: s_chain,
        limit: restruct_coin(a_limit),
        window: duration_to_json(xt_window),
    }], 1);
/**
 * Queries the a deposit address by recipient
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_recipient_addr -
 * @param s_recipient_chain -
 * @param s_deposit_chain -
 * @returns a tuple where:
 *   - 0: deposit_addr - the 'deposit_addr' response property
 */
export const queryAxelarNexusLatestDepositAddress = restful_grpc((sa_recipient_addr, s_recipient_chain, s_deposit_chain) => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'latest_deposit_address/' + sa_recipient_addr + '/' + s_recipient_chain + '/' + s_deposit_chain]);
/**
 * Queries transfers by chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param xc_state -
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: transfers - the 'transfers' response property
 *   - 1: pagination - the 'transfers' response property
 */
export const queryAxelarNexusTransfersForChain = restful_grpc((s_chain, xc_state, g_pagination) => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'transfers_for_chain/' + s_chain + '/' + xc_state, {
        pagination: g_pagination,
    }]);
/**
 * Queries the fee info by chain and asset
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: fee_info - the 'fee_info' response property
 */
export const queryAxelarNexusFeeInfo = restful_grpc((s_chain, s_asset) => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'fee_info/' + s_chain + '/' + s_asset]);
/**
 * Queries the transfer fee by the source, destination chain, and amount. If amount is 0, the min fee is returned
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_source_chain -
 * @param s_destination_chain -
 * @param s_amount -
 * @returns a tuple where:
 *   - 0: fee - the 'fee' response property
 */
export const queryAxelarNexusTransferFee = restful_grpc((s_source_chain, s_destination_chain, s_amount) => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'transfer_fee/' + s_source_chain + '/' + s_destination_chain + '/' + s_amount]);
/**
 * Queries the chains registered on the network
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param xc_status -
 * @returns a tuple where:
 *   - 0: chains - the 'chains' response property
 */
export const queryAxelarNexusChains = restful_grpc(xc_status => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'chains', {
        status: xc_status,
    }]);
/**
 * Queries the assets registered for a chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: assets - the 'assets' response property
 */
export const queryAxelarNexusAssets = restful_grpc(s_chain => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'assets/' + s_chain]);
/**
 * Queries the state of a registered chain on the network
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: state - the 'state' response property
 */
export const queryAxelarNexusChainState = restful_grpc(s_chain => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'chain_state/' + s_chain]);
/**
 * Queries the chains that support an asset on the network
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: chains - the 'chains' response property
 */
export const queryAxelarNexusChainsByAsset = restful_grpc(s_asset => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'chains_by_asset/' + s_asset]);
/**
 * Queries the recipient address for a given deposit address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_deposit_addr -
 * @param s_deposit_chain -
 * @returns a tuple where:
 *   - 0: recipient_addr - the 'recipient_addr' response property
 *   - 1: recipient_chain - the 'recipient_addr' response property
 */
export const queryAxelarNexusRecipientAddress = restful_grpc((sa_deposit_addr, s_deposit_chain) => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'recipient_address/' + s_deposit_chain + '/' + sa_deposit_addr]);
/**
 * Queries the chain maintainers for a given chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @returns a tuple where:
 *   - 0: maintainers - the 'maintainers' response property
 */
export const queryAxelarNexusChainMaintainers = restful_grpc(s_chain => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'chain_maintainers/' + s_chain]);
/**
 * Queries the transfer rate limit for a given chain and asset. If a rate limit is not set, nil is returned.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_chain -
 * @param s_asset -
 * @returns a tuple where:
 *   - 0: transfer_rate_limit - the 'transfer_rate_limit' response property
 */
export const queryAxelarNexusTransferRateLimit = restful_grpc((s_chain, s_asset) => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'transfer_rate_limit/' + s_chain + '/' + s_asset]);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_id -
 * @returns a tuple where:
 *   - 0: message - the 'message' response property
 */
export const queryAxelarNexusMessage = restful_grpc(s_id => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'message', {
        id: s_id,
    }]);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryAxelarNexusParams = restful_grpc(() => [SR_LCD_AXELAR_NEXUS_QUERYSERVICE + 'params']);
//# sourceMappingURL=service.js.map