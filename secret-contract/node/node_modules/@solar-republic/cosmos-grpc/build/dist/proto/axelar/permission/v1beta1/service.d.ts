/// <reference types="node" />
import type { Opt } from '../../../../api/types.js';
import type { AxelarPermissionQueryGovernanceKeyResponse, AxelarPermissionParamsResponse } from './query.js';
import type { AxelarPermissionRegisterControllerResponse, AxelarPermissionDeregisterControllerResponse, AxelarPermissionUpdateGovernanceKeyResponse } from './tx.js';
import type { CosmosCryptoMultisigLegacyAminoPubKey } from '../../../cosmos/crypto/multisig/keys.js';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_controller -
 * @returns an empty tuple
 */
export declare const submitAxelarPermissionRegisterController: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, atu8_controller?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarPermissionRegisterControllerResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_controller -
 * @returns an empty tuple
 */
export declare const submitAxelarPermissionDeregisterController: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, atu8_controller?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarPermissionDeregisterControllerResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param g_governance_key -
 * @returns an empty tuple
 */
export declare const submitAxelarPermissionUpdateGovernanceKey: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, g_governance_key?: Opt<CosmosCryptoMultisigLegacyAminoPubKey>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarPermissionUpdateGovernanceKeyResponse>>;
/**
 * Returns the multisig governance key
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: governance_key - the 'governance_key' response property
 */
export declare const queryAxelarPermissionGovernanceKey: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarPermissionQueryGovernanceKeyResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export declare const queryAxelarPermissionParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<AxelarPermissionParamsResponse>>;
