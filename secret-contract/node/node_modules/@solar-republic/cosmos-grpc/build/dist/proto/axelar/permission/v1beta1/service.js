import { bech32_decode } from '@solar-republic/crypto';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
const SR_LCD_AXELAR_PERMISSION_MSG = '/axelar/permission/';
const SR_LCD_AXELAR_PERMISSION_QUERY = '/axelar/permission/v1beta1/';
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_controller -
 * @returns an empty tuple
 */
export const submitAxelarPermissionRegisterController = restful_grpc((sa_sender, atu8_controller) => [SR_LCD_AXELAR_PERMISSION_MSG + 'register_controller', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        controller: safe_bytes_to_base64(atu8_controller),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_controller -
 * @returns an empty tuple
 */
export const submitAxelarPermissionDeregisterController = restful_grpc((sa_sender, atu8_controller) => [SR_LCD_AXELAR_PERMISSION_MSG + 'deregister_controller', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        controller: safe_bytes_to_base64(atu8_controller),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param g_governance_key -
 * @returns an empty tuple
 */
export const submitAxelarPermissionUpdateGovernanceKey = restful_grpc((sa_sender, g_governance_key) => [SR_LCD_AXELAR_PERMISSION_MSG + 'update_governance_key', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        governance_key: g_governance_key,
    }], 1);
/**
 * Returns the multisig governance key
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: governance_key - the 'governance_key' response property
 */
export const queryAxelarPermissionGovernanceKey = restful_grpc(() => [SR_LCD_AXELAR_PERMISSION_QUERY + 'governance_key']);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryAxelarPermissionParams = restful_grpc(() => [SR_LCD_AXELAR_PERMISSION_QUERY + 'params']);
//# sourceMappingURL=service.js.map