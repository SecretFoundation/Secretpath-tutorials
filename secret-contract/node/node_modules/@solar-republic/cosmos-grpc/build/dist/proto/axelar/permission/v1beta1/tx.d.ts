import type { WeakAccountAddr, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosCryptoMultisigLegacyAminoPubKey, DecodedCosmosCryptoMultisigLegacyAminoPubKey } from '../../../cosmos/crypto/multisig/keys.js';
export type EncodedAxelarPermissionUpdateGovernanceKeyRequest = Encoded<'/axelar.permission.v1beta1.UpdateGovernanceKeyRequest'>;
export type EncodedAxelarPermissionUpdateGovernanceKeyResponse = Encoded<'/axelar.permission.v1beta1.UpdateGovernanceKeyResponse'>;
export type EncodedAxelarPermissionRegisterControllerRequest = Encoded<'/axelar.permission.v1beta1.RegisterControllerRequest'>;
export type EncodedAxelarPermissionRegisterControllerResponse = Encoded<'/axelar.permission.v1beta1.RegisterControllerResponse'>;
export type EncodedAxelarPermissionDeregisterControllerRequest = Encoded<'/axelar.permission.v1beta1.DeregisterControllerRequest'>;
export type EncodedAxelarPermissionDeregisterControllerResponse = Encoded<'/axelar.permission.v1beta1.DeregisterControllerResponse'>;
/**
 * Encodes a `UpdateGovernanceKeyRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param g_governance_key - `governance_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionUpdateGovernanceKeyRequest: (sa_sender?: Opt<WeakAccountAddr>, atu8_governance_key?: Opt<Encoded<'/cosmos.crypto.multisig.LegacyAminoPubKey'>>) => EncodedAxelarPermissionUpdateGovernanceKeyRequest;
/**
 * Encodes a `UpdateGovernanceKeyResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionUpdateGovernanceKeyResponse: () => EncodedAxelarPermissionUpdateGovernanceKeyResponse;
/**
 * Encodes a `RegisterControllerRequest` protobuf message: MsgRegisterController represents a message to register a controller account
 * @param sa_sender - `sender`:
 * @param atu8_controller - `controller`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionRegisterControllerRequest: (sa_sender?: Opt<WeakAccountAddr>, atu8_controller?: Opt<Uint8Array>) => EncodedAxelarPermissionRegisterControllerRequest;
/**
 * Encodes a `RegisterControllerResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionRegisterControllerResponse: () => EncodedAxelarPermissionRegisterControllerResponse;
/**
 * Encodes a `DeregisterControllerRequest` protobuf message: DeregisterController represents a message to deregister a controller account
 * @param sa_sender - `sender`:
 * @param atu8_controller - `controller`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionDeregisterControllerRequest: (sa_sender?: Opt<WeakAccountAddr>, atu8_controller?: Opt<Uint8Array>) => EncodedAxelarPermissionDeregisterControllerRequest;
/**
 * Encodes a `DeregisterControllerResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarPermissionDeregisterControllerResponse: () => EncodedAxelarPermissionDeregisterControllerResponse;
/**
 * A decoded protobuf UpdateGovernanceKeyRequest message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: governance_key -
 */
export type DecodedAxelarPermissionUpdateGovernanceKeyRequest = [
    sa_sender?: CwAccountAddr,
    a_governance_key?: DecodedCosmosCryptoMultisigLegacyAminoPubKey
];
/**
 * Decodes a protobuf UpdateGovernanceKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionUpdateGovernanceKeyRequest}
 */
export declare const decodeAxelarPermissionUpdateGovernanceKeyRequest: (atu8_payload: Uint8Array) => DecodedAxelarPermissionUpdateGovernanceKeyRequest;
/**
 * A decoded protobuf UpdateGovernanceKey message
 *
 * Tuple where:
 */
export type DecodedAxelarPermissionUpdateGovernanceKeyResponse = [];
/**
 * Decodes a protobuf UpdateGovernanceKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionUpdateGovernanceKeyResponse}
 */
export declare const decodeAxelarPermissionUpdateGovernanceKeyResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RegisterControllerRequest message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: controller -
 */
export type DecodedAxelarPermissionRegisterControllerRequest = [
    sa_sender?: CwAccountAddr,
    atu8_controller?: Uint8Array
];
/**
 * Decodes a protobuf RegisterControllerRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionRegisterControllerRequest}
 */
export declare const decodeAxelarPermissionRegisterControllerRequest: (atu8_payload: Uint8Array) => DecodedAxelarPermissionRegisterControllerRequest;
/**
 * A decoded protobuf RegisterController message
 *
 * Tuple where:
 */
export type DecodedAxelarPermissionRegisterControllerResponse = [];
/**
 * Decodes a protobuf RegisterController message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionRegisterControllerResponse}
 */
export declare const decodeAxelarPermissionRegisterControllerResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf DeregisterControllerRequest message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: controller -
 */
export type DecodedAxelarPermissionDeregisterControllerRequest = [
    sa_sender?: CwAccountAddr,
    atu8_controller?: Uint8Array
];
/**
 * Decodes a protobuf DeregisterControllerRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionDeregisterControllerRequest}
 */
export declare const decodeAxelarPermissionDeregisterControllerRequest: (atu8_payload: Uint8Array) => DecodedAxelarPermissionDeregisterControllerRequest;
/**
 * A decoded protobuf DeregisterController message
 *
 * Tuple where:
 */
export type DecodedAxelarPermissionDeregisterControllerResponse = [];
/**
 * Decodes a protobuf DeregisterController message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionDeregisterControllerResponse}
 */
export declare const decodeAxelarPermissionDeregisterControllerResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link AxelarPermissionUpdateGovernanceKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: governance_key -
 */
export declare const destructAxelarPermissionUpdateGovernanceKeyRequest: (g_struct: AxelarPermissionUpdateGovernanceKeyRequest) => [sender?: CwBase64, governance_key?: CosmosCryptoMultisigLegacyAminoPubKey];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_UPDATE_GOVERNANCE_KEY_REQUEST = "/axelar.permission.v1beta1.UpdateGovernanceKeyRequest";
/**
 * JSON serialization of `axelar.permission.v1beta1.UpdateGovernanceKeyRequest` -
 */
export type AxelarPermissionUpdateGovernanceKeyRequest = {
    sender?: CwBase64 | undefined;
    governance_key?: CosmosCryptoMultisigLegacyAminoPubKey | undefined;
};
/**
 * Destructures the fields of a {@link AxelarPermissionUpdateGovernanceKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarPermissionUpdateGovernanceKeyResponse: (g_struct: AxelarPermissionUpdateGovernanceKeyResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_UPDATE_GOVERNANCE_KEY_RESPONSE = "/axelar.permission.v1beta1.UpdateGovernanceKeyResponse";
/**
 * JSON serialization of `axelar.permission.v1beta1.UpdateGovernanceKeyResponse` -
 */
export type AxelarPermissionUpdateGovernanceKeyResponse = {};
/**
 * Destructures the fields of a {@link AxelarPermissionRegisterControllerRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: controller -
 */
export declare const destructAxelarPermissionRegisterControllerRequest: (g_struct: AxelarPermissionRegisterControllerRequest) => [sender?: CwBase64, controller?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_REGISTER_CONTROLLER_REQUEST = "/axelar.permission.v1beta1.RegisterControllerRequest";
/**
 * JSON serialization of `axelar.permission.v1beta1.RegisterControllerRequest` - MsgRegisterController represents a message to register a controller account
 */
export type AxelarPermissionRegisterControllerRequest = {
    sender?: CwBase64 | undefined;
    controller?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarPermissionRegisterControllerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarPermissionRegisterControllerResponse: (g_struct: AxelarPermissionRegisterControllerResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_REGISTER_CONTROLLER_RESPONSE = "/axelar.permission.v1beta1.RegisterControllerResponse";
/**
 * JSON serialization of `axelar.permission.v1beta1.RegisterControllerResponse` -
 */
export type AxelarPermissionRegisterControllerResponse = {};
/**
 * Destructures the fields of a {@link AxelarPermissionDeregisterControllerRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: controller -
 */
export declare const destructAxelarPermissionDeregisterControllerRequest: (g_struct: AxelarPermissionDeregisterControllerRequest) => [sender?: CwBase64, controller?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_DEREGISTER_CONTROLLER_REQUEST = "/axelar.permission.v1beta1.DeregisterControllerRequest";
/**
 * JSON serialization of `axelar.permission.v1beta1.DeregisterControllerRequest` - DeregisterController represents a message to deregister a controller account
 */
export type AxelarPermissionDeregisterControllerRequest = {
    sender?: CwBase64 | undefined;
    controller?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarPermissionDeregisterControllerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarPermissionDeregisterControllerResponse: (g_struct: AxelarPermissionDeregisterControllerResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_PERMISSION_DEREGISTER_CONTROLLER_RESPONSE = "/axelar.permission.v1beta1.DeregisterControllerResponse";
/**
 * JSON serialization of `axelar.permission.v1beta1.DeregisterControllerResponse` -
 */
export type AxelarPermissionDeregisterControllerResponse = {};
