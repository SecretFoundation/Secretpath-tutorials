import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosCryptoMultisigLegacyAminoPubKey } from '../../../cosmos/crypto/multisig/keys.js';
/**
 * Encodes a `UpdateGovernanceKeyRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param g_governance_key - `governance_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionUpdateGovernanceKeyRequest = (sa_sender, atu8_governance_key) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_governance_key) // LegacyAminoPubKey governance_key = 2
    .o;
/**
 * Encodes a `UpdateGovernanceKeyResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionUpdateGovernanceKeyResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RegisterControllerRequest` protobuf message: MsgRegisterController represents a message to register a controller account
 * @param sa_sender - `sender`:
 * @param atu8_controller - `controller`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionRegisterControllerRequest = (sa_sender, atu8_controller) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_controller) // bytes controller = 2
    .o;
/**
 * Encodes a `RegisterControllerResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionRegisterControllerResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `DeregisterControllerRequest` protobuf message: DeregisterController represents a message to deregister a controller account
 * @param sa_sender - `sender`:
 * @param atu8_controller - `controller`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionDeregisterControllerRequest = (sa_sender, atu8_controller) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_controller) // bytes controller = 2
    .o;
/**
 * Encodes a `DeregisterControllerResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarPermissionDeregisterControllerResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf UpdateGovernanceKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionUpdateGovernanceKeyRequest}
 */
export const decodeAxelarPermissionUpdateGovernanceKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [0, decodeCosmosCryptoMultisigLegacyAminoPubKey]);
/**
 * Decodes a protobuf UpdateGovernanceKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionUpdateGovernanceKeyResponse}
 */
export const decodeAxelarPermissionUpdateGovernanceKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RegisterControllerRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionRegisterControllerRequest}
 */
export const decodeAxelarPermissionRegisterControllerRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf RegisterController message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionRegisterControllerResponse}
 */
export const decodeAxelarPermissionRegisterControllerResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf DeregisterControllerRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionDeregisterControllerRequest}
 */
export const decodeAxelarPermissionDeregisterControllerRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf DeregisterController message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarPermissionDeregisterControllerResponse}
 */
export const decodeAxelarPermissionDeregisterControllerResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link AxelarPermissionUpdateGovernanceKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: governance_key -
 */
export const destructAxelarPermissionUpdateGovernanceKeyRequest = (g_struct) => [g_struct.sender, g_struct.governance_key];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_UPDATE_GOVERNANCE_KEY_REQUEST = '/axelar.permission.v1beta1.UpdateGovernanceKeyRequest';
/**
 * Destructures the fields of a {@link AxelarPermissionUpdateGovernanceKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarPermissionUpdateGovernanceKeyResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_UPDATE_GOVERNANCE_KEY_RESPONSE = '/axelar.permission.v1beta1.UpdateGovernanceKeyResponse';
/**
 * Destructures the fields of a {@link AxelarPermissionRegisterControllerRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: controller -
 */
export const destructAxelarPermissionRegisterControllerRequest = (g_struct) => [g_struct.sender, safe_base64_to_bytes(g_struct.controller)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_REGISTER_CONTROLLER_REQUEST = '/axelar.permission.v1beta1.RegisterControllerRequest';
/**
 * Destructures the fields of a {@link AxelarPermissionRegisterControllerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarPermissionRegisterControllerResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_REGISTER_CONTROLLER_RESPONSE = '/axelar.permission.v1beta1.RegisterControllerResponse';
/**
 * Destructures the fields of a {@link AxelarPermissionDeregisterControllerRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: controller -
 */
export const destructAxelarPermissionDeregisterControllerRequest = (g_struct) => [g_struct.sender, safe_base64_to_bytes(g_struct.controller)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_DEREGISTER_CONTROLLER_REQUEST = '/axelar.permission.v1beta1.DeregisterControllerRequest';
/**
 * Destructures the fields of a {@link AxelarPermissionDeregisterControllerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarPermissionDeregisterControllerResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_PERMISSION_DEREGISTER_CONTROLLER_RESPONSE = '/axelar.permission.v1beta1.DeregisterControllerResponse';
//# sourceMappingURL=tx.js.map