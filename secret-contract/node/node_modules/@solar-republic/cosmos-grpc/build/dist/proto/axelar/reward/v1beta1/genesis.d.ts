import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarRewardParams, DecodedAxelarRewardParams } from './params.js';
import type { AxelarRewardPool, DecodedAxelarRewardPool } from './types.js';
export type EncodedAxelarRewardGenesisState = Encoded<'/axelar.reward.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: represents the genesis state
 * @param g_params - `params`:
 * @param a_pools - `pools`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardGenesisState: (atu8_params?: Opt<Encoded<'/axelar.reward.v1beta1.Params'>>, a_pools?: Opt<Encoded<'/axelar.reward.v1beta1.Pool'>[]>) => EncodedAxelarRewardGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params -
 *   - 1: pools -
 */
export type DecodedAxelarRewardGenesisState = [
    a_params?: DecodedAxelarRewardParams,
    a_pools?: DecodedAxelarRewardPool[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardGenesisState}
 */
export declare const decodeAxelarRewardGenesisState: (atu8_payload: Uint8Array) => DecodedAxelarRewardGenesisState;
/**
 * Destructures the fields of a {@link AxelarRewardGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: pools -
 */
export declare const destructAxelarRewardGenesisState: (g_struct: AxelarRewardGenesisState) => [params?: AxelarRewardParams, pools?: AxelarRewardPool[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_GENESIS_STATE = "/axelar.reward.v1beta1.GenesisState";
/**
 * JSON serialization of `axelar.reward.v1beta1.GenesisState` - represents the genesis state
 */
export type AxelarRewardGenesisState = {
    params?: AxelarRewardParams | undefined;
    pools?: AxelarRewardPool[] | undefined;
};
