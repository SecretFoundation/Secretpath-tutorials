import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { AxelarRewardParams, DecodedAxelarRewardParams } from './params.js';
export type EncodedAxelarRewardInflationRateRequest = Encoded<'/axelar.reward.v1beta1.InflationRateRequest'>;
export type EncodedAxelarRewardInflationRateResponse = Encoded<'/axelar.reward.v1beta1.InflationRateResponse'>;
export type EncodedAxelarRewardParamsRequest = Encoded<'/axelar.reward.v1beta1.ParamsRequest'>;
export type EncodedAxelarRewardParamsResponse = Encoded<'/axelar.reward.v1beta1.ParamsResponse'>;
/**
 * Encodes a `InflationRateRequest` protobuf message: represents a message that queries the Axelar specific inflation RPC method. Ideally, this would use ValAddress as the validator field type. However, this makes it awkward for REST-based calls, because it would expect a byte array as part of the url. So, the bech32 encoded address string is used for this request instead.
 * @param s_validator - `validator`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardInflationRateRequest: (s_validator?: Opt<string>) => EncodedAxelarRewardInflationRateRequest;
/**
 * Encodes a `InflationRateResponse` protobuf message:
 * @param atu8_inflation_rate - `inflation_rate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardInflationRateResponse: (atu8_inflation_rate?: Opt<Uint8Array>) => EncodedAxelarRewardInflationRateResponse;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardParamsRequest: () => EncodedAxelarRewardParamsRequest;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardParamsResponse: (atu8_params?: Opt<Encoded<'/axelar.reward.v1beta1.Params'>>) => EncodedAxelarRewardParamsResponse;
/**
 * A decoded protobuf InflationRateRequest message
 *
 * Alias for: validator -
 */
export type DecodedAxelarRewardInflationRateRequest = [
    s_validator?: string
];
/**
 * Decodes a protobuf InflationRateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardInflationRateRequest}
 */
export declare const decodeAxelarRewardInflationRateRequest: (atu8_payload: Uint8Array) => DecodedAxelarRewardInflationRateRequest;
/**
 * A decoded protobuf InflationRate message
 *
 * Alias for: inflation_rate -
 */
export type DecodedAxelarRewardInflationRateResponse = [
    atu8_inflation_rate?: Uint8Array
];
/**
 * Decodes a protobuf InflationRate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardInflationRateResponse}
 */
export declare const decodeAxelarRewardInflationRateResponse: (atu8_payload: Uint8Array) => DecodedAxelarRewardInflationRateResponse;
/**
 * A decoded protobuf ParamsRequest message
 *
 * Tuple where:
 */
export type DecodedAxelarRewardParamsRequest = [];
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardParamsRequest}
 */
export declare const decodeAxelarRewardParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf Params message
 *
 * Alias for: params -
 */
export type DecodedAxelarRewardParamsResponse = [
    a_params?: DecodedAxelarRewardParams
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardParamsResponse}
 */
export declare const decodeAxelarRewardParamsResponse: (atu8_payload: Uint8Array) => DecodedAxelarRewardParamsResponse;
/**
 * Destructures the fields of a {@link AxelarRewardInflationRateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 */
export declare const destructAxelarRewardInflationRateRequest: (g_struct: AxelarRewardInflationRateRequest) => [validator?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_INFLATION_RATE_REQUEST = "/axelar.reward.v1beta1.InflationRateRequest";
/**
 * JSON serialization of `axelar.reward.v1beta1.InflationRateRequest` - represents a message that queries the Axelar specific inflation RPC method. Ideally, this would use ValAddress as the validator field type. However, this makes it awkward for REST-based calls, because it would expect a byte array as part of the url. So, the bech32 encoded address string is used for this request instead.
 */
export type AxelarRewardInflationRateRequest = {
    validator?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarRewardInflationRateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: inflation_rate -
 */
export declare const destructAxelarRewardInflationRateResponse: (g_struct: AxelarRewardInflationRateResponse) => [inflation_rate?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_INFLATION_RATE_RESPONSE = "/axelar.reward.v1beta1.InflationRateResponse";
/**
 * JSON serialization of `axelar.reward.v1beta1.InflationRateResponse` -
 */
export type AxelarRewardInflationRateResponse = {
    inflation_rate?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarRewardParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructAxelarRewardParamsRequest: (g_struct: AxelarRewardParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_PARAMS_REQUEST = "/axelar.reward.v1beta1.ParamsRequest";
/**
 * JSON serialization of `axelar.reward.v1beta1.ParamsRequest` - represents a message that queries the params
 */
export type AxelarRewardParamsRequest = {};
/**
 * Destructures the fields of a {@link AxelarRewardParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export declare const destructAxelarRewardParamsResponse: (g_struct: AxelarRewardParamsResponse) => [params?: AxelarRewardParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_PARAMS_RESPONSE = "/axelar.reward.v1beta1.ParamsResponse";
/**
 * JSON serialization of `axelar.reward.v1beta1.ParamsResponse` -
 */
export type AxelarRewardParamsResponse = {
    params?: AxelarRewardParams | undefined;
};
