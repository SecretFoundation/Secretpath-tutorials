import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarRewardParams } from './params.js';
/**
 * Encodes a `InflationRateRequest` protobuf message: represents a message that queries the Axelar specific inflation RPC method. Ideally, this would use ValAddress as the validator field type. However, this makes it awkward for REST-based calls, because it would expect a byte array as part of the url. So, the bech32 encoded address string is used for this request instead.
 * @param s_validator - `validator`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardInflationRateRequest = (s_validator) => Protobuf() // ...
    .s(s_validator) // string validator = 1
    .o;
/**
 * Encodes a `InflationRateResponse` protobuf message:
 * @param atu8_inflation_rate - `inflation_rate`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardInflationRateResponse = (atu8_inflation_rate) => Protobuf() // ...
    .b(atu8_inflation_rate) // bytes inflation_rate = 1
    .o;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf InflationRateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardInflationRateRequest}
 */
export const decodeAxelarRewardInflationRateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf InflationRate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardInflationRateResponse}
 */
export const decodeAxelarRewardInflationRateResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardParamsRequest}
 */
export const decodeAxelarRewardParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardParamsResponse}
 */
export const decodeAxelarRewardParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAxelarRewardParams]);
/**
 * Destructures the fields of a {@link AxelarRewardInflationRateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 */
export const destructAxelarRewardInflationRateRequest = (g_struct) => [g_struct.validator];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_INFLATION_RATE_REQUEST = '/axelar.reward.v1beta1.InflationRateRequest';
/**
 * Destructures the fields of a {@link AxelarRewardInflationRateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: inflation_rate -
 */
export const destructAxelarRewardInflationRateResponse = (g_struct) => [safe_base64_to_bytes(g_struct.inflation_rate)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_INFLATION_RATE_RESPONSE = '/axelar.reward.v1beta1.InflationRateResponse';
/**
 * Destructures the fields of a {@link AxelarRewardParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarRewardParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_PARAMS_REQUEST = '/axelar.reward.v1beta1.ParamsRequest';
/**
 * Destructures the fields of a {@link AxelarRewardParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export const destructAxelarRewardParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_PARAMS_RESPONSE = '/axelar.reward.v1beta1.ParamsResponse';
//# sourceMappingURL=query.js.map