import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `RefundMsgRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param atu8_inner_message - `inner_message`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardRefundMsgRequest = (sa_sender, atu8_inner_message) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_inner_message) // Any inner_message = 2
    .o;
/**
 * Encodes a `RefundMsgResponse` protobuf message:
 * @param atu8_data - `data`:
 * @param s_log - `log`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarRewardRefundMsgResponse = (atu8_data, s_log) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .s(s_log) // string log = 2
    .o;
/**
 * Decodes a protobuf RefundMsgRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardRefundMsgRequest}
 */
export const decodeAxelarRewardRefundMsgRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf RefundMsg message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardRefundMsgResponse}
 */
export const decodeAxelarRewardRefundMsgResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Destructures the fields of a {@link AxelarRewardRefundMsgRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: inner_message -
 */
export const destructAxelarRewardRefundMsgRequest = (g_struct) => [g_struct.sender, g_struct.inner_message];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_REFUND_MSG_REQUEST = '/axelar.reward.v1beta1.RefundMsgRequest';
/**
 * Destructures the fields of a {@link AxelarRewardRefundMsgResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 *   - 1: log -
 */
export const destructAxelarRewardRefundMsgResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data), g_struct.log];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_REWARD_REFUND_MSG_RESPONSE = '/axelar.reward.v1beta1.RefundMsgResponse';
//# sourceMappingURL=tx.js.map