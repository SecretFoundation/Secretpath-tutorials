import type { SlimCoin, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedAxelarRewardPool = Encoded<'/axelar.reward.v1beta1.Pool'>;
export type EncodedAxelarRewardRefund = Encoded<'/axelar.reward.v1beta1.Refund'>;
export type EncodedAxelarRewardPoolReward = Encoded<'/axelar.reward.v1beta1.Pool.Reward'>;
/**
 * Encodes a `Pool` protobuf message:
 * @param s_name - `name`:
 * @param a_rewards - `rewards`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardPool: (s_name?: Opt<string>, a_rewards?: Opt<Encoded<'/axelar.reward.v1beta1.Pool.Reward'>[]>) => EncodedAxelarRewardPool;
/**
 * Encodes a `Refund` protobuf message:
 * @param atu8_payer - `payer`:
 * @param a_fees - `fees`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardRefund: (atu8_payer?: Opt<Uint8Array>, a_fees?: Opt<SlimCoin[]>) => EncodedAxelarRewardRefund;
/**
 * Encodes a `Reward` protobuf message:
 * @param atu8_validator - `validator`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarRewardPoolReward: (atu8_validator?: Opt<Uint8Array>, a_coins?: Opt<SlimCoin[]>) => EncodedAxelarRewardPoolReward;
/**
 * A decoded protobuf Pool message
 *
 * Tuple where:
 *   - 0: name -
 *   - 1: rewards -
 */
export type DecodedAxelarRewardPool = [
    s_name?: string,
    a_rewards?: DecodedAxelarRewardPoolReward[]
];
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardPool}
 */
export declare const decodeAxelarRewardPool: (atu8_payload: Uint8Array) => DecodedAxelarRewardPool;
/**
 * A decoded protobuf Refund message
 *
 * Tuple where:
 *   - 0: payer -
 *   - 1: fees -
 */
export type DecodedAxelarRewardRefund = [
    atu8_payer?: Uint8Array,
    a_fees?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Refund message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardRefund}
 */
export declare const decodeAxelarRewardRefund: (atu8_payload: Uint8Array) => DecodedAxelarRewardRefund;
/**
 * A decoded protobuf Reward message
 *
 * Tuple where:
 *   - 0: validator -
 *   - 1: coins -
 */
export type DecodedAxelarRewardPoolReward = [
    atu8_validator?: Uint8Array,
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Reward message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarRewardPoolReward}
 */
export declare const decodeAxelarRewardPoolReward: (atu8_payload: Uint8Array) => DecodedAxelarRewardPoolReward;
/**
 * Destructures the fields of a {@link AxelarRewardPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name -
 *   - 1: rewards -
 */
export declare const destructAxelarRewardPool: (g_struct: AxelarRewardPool) => [name?: string, rewards?: AxelarRewardPoolReward[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_POOL = "/axelar.reward.v1beta1.Pool";
/**
 * JSON serialization of `axelar.reward.v1beta1.Pool` -
 */
export type AxelarRewardPool = {
    name?: string | undefined;
    rewards?: AxelarRewardPoolReward[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarRewardPoolReward} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 *   - 1: coins -
 */
export declare const destructAxelarRewardPoolReward: (g_struct: AxelarRewardPoolReward) => [validator?: Uint8Array, coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_POOL_REWARD = "/axelar.reward.v1beta1.Pool.Reward";
/**
 * JSON serialization of `axelar.reward.v1beta1.Pool.Reward` -
 */
export type AxelarRewardPoolReward = {
    validator?: CwBase64 | undefined;
    coins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarRewardRefund} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: payer -
 *   - 1: fees -
 */
export declare const destructAxelarRewardRefund: (g_struct: AxelarRewardRefund) => [payer?: Uint8Array, fees?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_REWARD_REFUND = "/axelar.reward.v1beta1.Refund";
/**
 * JSON serialization of `axelar.reward.v1beta1.Refund` -
 */
export type AxelarRewardRefund = {
    payer?: CwBase64 | undefined;
    fees?: CosmosBaseCoin[] | undefined;
};
