import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeAxelarSnapshotParams } from './params.js';
/**
 * Encodes a `QueryValidatorsResponse` protobuf message:
 * @param a_validators - `validators`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarSnapshotQueryValidatorsResponse = (a_validators) => Protobuf() // ...
    .B(a_validators) // Validator[] validators = 1
    .o;
/**
 * Encodes a `ParamsRequest` protobuf message: represents a message that queries the params
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarSnapshotParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ParamsResponse` protobuf message:
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarSnapshotParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `Validator` protobuf message:
 * @param sa_operator - `operator_address`:
 * @param s_moniker - `moniker`:
 * @param g_tss_illegibility_info - `tss_illegibility_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarSnapshotQueryValidatorsResponseValidator = (sa_operator, s_moniker, atu8_tss_illegibility_info) => Protobuf() // ...
    .s(sa_operator) // string operator_address = 1
    .s(s_moniker) // string moniker = 2
    .b(atu8_tss_illegibility_info) // TssIllegibilityInfo tss_illegibility_info = 3
    .o;
/**
 * Encodes a `TssIllegibilityInfo` protobuf message:
 * @param b_tombstoned - `tombstoned`:
 * @param b_jailed - `jailed`:
 * @param b_missed_too_many_blocks - `missed_too_many_blocks`:
 * @param b_no_proxy_registered - `no_proxy_registered`:
 * @param b_tss_suspended - `tss_suspended`:
 * @param b_proxy_insuficient_funds - `proxy_insuficient_funds`:
 * @param b_stale_tss_heartbeat - `stale_tss_heartbeat`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo = (b_tombstoned, b_jailed, b_missed_too_many_blocks, b_no_proxy_registered, b_tss_suspended, b_proxy_insuficient_funds, b_stale_tss_heartbeat) => Protobuf() // ...
    .v(b_tombstoned) // boolean tombstoned = 1
    .v(b_jailed) // boolean jailed = 2
    .v(b_missed_too_many_blocks) // boolean missed_too_many_blocks = 3
    .v(b_no_proxy_registered) // boolean no_proxy_registered = 4
    .v(b_tss_suspended) // boolean tss_suspended = 5
    .v(b_proxy_insuficient_funds) // boolean proxy_insuficient_funds = 6
    .v(b_stale_tss_heartbeat) // boolean stale_tss_heartbeat = 7
    .o;
/**
 * Decodes a protobuf QueryValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotQueryValidatorsResponse}
 */
export const decodeAxelarSnapshotQueryValidatorsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeAxelarSnapshotQueryValidatorsResponseValidator]);
/**
 * Decodes a protobuf ParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotParamsRequest}
 */
export const decodeAxelarSnapshotParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotParamsResponse}
 */
export const decodeAxelarSnapshotParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeAxelarSnapshotParams]);
/**
 * Decodes a protobuf Validator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotQueryValidatorsResponseValidator}
 */
export const decodeAxelarSnapshotQueryValidatorsResponseValidator = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo]);
/**
 * Decodes a protobuf TssIllegibilityInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo}
 */
export const decodeAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1, 1, 1, 1]);
/**
 * Destructures the fields of a {@link AxelarSnapshotQueryValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators -
 */
export const destructAxelarSnapshotQueryValidatorsResponse = (g_struct) => [g_struct.validators];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_QUERY_VALIDATORS_RESPONSE = '/axelar.snapshot.v1beta1.QueryValidatorsResponse';
/**
 * Destructures the fields of a {@link AxelarSnapshotQueryValidatorsResponseValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: operator_address -
 *   - 1: moniker -
 *   - 2: tss_illegibility_info -
 */
export const destructAxelarSnapshotQueryValidatorsResponseValidator = (g_struct) => [g_struct.operator_address, g_struct.moniker, g_struct.tss_illegibility_info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_QUERY_VALIDATORS_RESPONSE_VALIDATOR = '/axelar.snapshot.v1beta1.QueryValidatorsResponse.Validator';
/**
 * Destructures the fields of a {@link AxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tombstoned -
 *   - 1: jailed -
 *   - 2: missed_too_many_blocks -
 *   - 3: no_proxy_registered -
 *   - 4: tss_suspended -
 *   - 5: proxy_insuficient_funds -
 *   - 6: stale_tss_heartbeat -
 */
export const destructAxelarSnapshotQueryValidatorsResponseTssIllegibilityInfo = (g_struct) => [g_struct.tombstoned, g_struct.jailed, g_struct.missed_too_many_blocks, g_struct.no_proxy_registered, g_struct.tss_suspended, g_struct.proxy_insuficient_funds, g_struct.stale_tss_heartbeat];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_QUERY_VALIDATORS_RESPONSE_TSS_ILLEGIBILITY_INFO = '/axelar.snapshot.v1beta1.QueryValidatorsResponse.TssIllegibilityInfo';
/**
 * Destructures the fields of a {@link AxelarSnapshotParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarSnapshotParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_PARAMS_REQUEST = '/axelar.snapshot.v1beta1.ParamsRequest';
/**
 * Destructures the fields of a {@link AxelarSnapshotParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 */
export const destructAxelarSnapshotParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_PARAMS_RESPONSE = '/axelar.snapshot.v1beta1.ParamsResponse';
//# sourceMappingURL=query.js.map