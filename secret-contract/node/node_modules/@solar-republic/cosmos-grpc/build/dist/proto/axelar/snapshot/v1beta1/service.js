import { bech32_decode } from '@solar-republic/crypto';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64 } from '../../../../api/util.js';
const SR_LCD_AXELAR_SNAPSHOT_MSGSERVICE = '/axelar/snapshot/';
const SR_LCD_AXELAR_SNAPSHOT_QUERYSERVICE = '/axelar/snapshot/v1beta1/params';
/**
 * Defines a method for registering a proxy account that can act in a validator account's stead.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @param atu8_proxy_addr -
 * @returns an empty tuple
 */
export const submitAxelarSnapshotRegisterProxy = restful_grpc((sa_sender, atu8_proxy_addr) => [SR_LCD_AXELAR_SNAPSHOT_MSGSERVICE + 'register_proxy', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
        proxy_addr: safe_bytes_to_base64(atu8_proxy_addr),
    }], 1);
/**
 * Defines a method for deregistering a proxy account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender -
 * @returns an empty tuple
 */
export const submitAxelarSnapshotDeactivateProxy = restful_grpc(sa_sender => [SR_LCD_AXELAR_SNAPSHOT_MSGSERVICE + 'deactivate_proxy', {
        sender: safe_bytes_to_base64(bech32_decode(sa_sender)),
    }], 1);
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the 'params' response property
 */
export const queryAxelarSnapshotParams = restful_grpc(() => [SR_LCD_AXELAR_SNAPSHOT_QUERYSERVICE]);
//# sourceMappingURL=service.js.map