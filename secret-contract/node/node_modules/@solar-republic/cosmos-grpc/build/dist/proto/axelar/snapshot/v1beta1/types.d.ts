import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAxelarSnapshotProxiedValidator = Encoded<'/axelar.snapshot.v1beta1.ProxiedValidator'>;
/**
 * Encodes a `ProxiedValidator` protobuf message:
 * @param atu8_validator - `validator`:
 * @param atu8_proxy - `proxy`:
 * @param b_active - `active`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarSnapshotProxiedValidator: (atu8_validator?: Opt<Uint8Array>, atu8_proxy?: Opt<Uint8Array>, b_active?: Opt<boolean | 0 | 1>) => EncodedAxelarSnapshotProxiedValidator;
/**
 * A decoded protobuf ProxiedValidator message
 *
 * Tuple where:
 *   - 0: validator -
 *   - 1: proxy -
 *   - 2: active -
 */
export type DecodedAxelarSnapshotProxiedValidator = [
    atu8_validator?: Uint8Array,
    atu8_proxy?: Uint8Array,
    b_active?: 0 | 1
];
/**
 * Decodes a protobuf ProxiedValidator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarSnapshotProxiedValidator}
 */
export declare const decodeAxelarSnapshotProxiedValidator: (atu8_payload: Uint8Array) => DecodedAxelarSnapshotProxiedValidator;
/**
 * Destructures the fields of a {@link AxelarSnapshotProxiedValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 *   - 1: proxy -
 *   - 2: active -
 */
export declare const destructAxelarSnapshotProxiedValidator: (g_struct: AxelarSnapshotProxiedValidator) => [validator?: Uint8Array, proxy?: Uint8Array, active?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_SNAPSHOT_PROXIED_VALIDATOR = "/axelar.snapshot.v1beta1.ProxiedValidator";
/**
 * JSON serialization of `axelar.snapshot.v1beta1.ProxiedValidator` -
 */
export type AxelarSnapshotProxiedValidator = {
    validator?: CwBase64 | undefined;
    proxy?: CwBase64 | undefined;
    active?: boolean | undefined;
};
