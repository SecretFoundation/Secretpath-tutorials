import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedAxelarTssTofndRecoverRequest = Encoded<'/axelar.tss.tofnd.v1beta1.RecoverRequest'>;
export type EncodedAxelarTssTofndRecoverResponse = Encoded<'/axelar.tss.tofnd.v1beta1.RecoverResponse'>;
export type EncodedAxelarTssTofndKeygenOutput = Encoded<'/axelar.tss.tofnd.v1beta1.KeygenOutput'>;
export type EncodedAxelarTssTofndMessageIn = Encoded<'/axelar.tss.tofnd.v1beta1.MessageIn'>;
export type EncodedAxelarTssTofndMessageOut = Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut'>;
export type EncodedAxelarTssTofndTrafficIn = Encoded<'/axelar.tss.tofnd.v1beta1.TrafficIn'>;
export type EncodedAxelarTssTofndTrafficOut = Encoded<'/axelar.tss.tofnd.v1beta1.TrafficOut'>;
export type EncodedAxelarTssTofndKeygenInit = Encoded<'/axelar.tss.tofnd.v1beta1.KeygenInit'>;
export type EncodedAxelarTssTofndSignInit = Encoded<'/axelar.tss.tofnd.v1beta1.SignInit'>;
export type EncodedAxelarTssTofndMessageOutKeygenResult = Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult'>;
export type EncodedAxelarTssTofndMessageOutCriminalList = Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList'>;
export type EncodedAxelarTssTofndMessageOutCriminalListCriminal = Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal'>;
export type EncodedAxelarTssTofndMessageOutSignResult = Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.SignResult'>;
/**
 * Encodes a `RecoverRequest` protobuf message:
 * @param g_keygen_init - `keygen_init`:
 * @param g_keygen_output - `keygen_output`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndRecoverRequest: (atu8_keygen_init?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.KeygenInit'>>, atu8_keygen_output?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.KeygenOutput'>>) => EncodedAxelarTssTofndRecoverRequest;
/**
 * Encodes a `RecoverResponse` protobuf message:
 * @param xc_response - `response`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndRecoverResponse: (xc_response?: Opt<ProtoEnumAxelarTssTofndRecoverResponseResponse>) => EncodedAxelarTssTofndRecoverResponse;
/**
 * Encodes a `KeygenOutput` protobuf message: Keygen's success response
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_group_recover_info - `group_recover_info`:
 * @param atu8_private_recover_info - `private_recover_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndKeygenOutput: (atu8_pub_key?: Opt<Uint8Array>, atu8_group_recover_info?: Opt<Uint8Array>, atu8_private_recover_info?: Opt<Uint8Array>) => EncodedAxelarTssTofndKeygenOutput;
/**
 * Encodes a `MessageIn` protobuf message:
 * @param g_keygen_init - `keygen_init`:
 * @param g_sign_init - `sign_init`:
 * @param g_traffic - `traffic`:
 * @param b_abort - `abort`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndMessageIn: (atu8_keygen_init?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.KeygenInit'>>, atu8_sign_init?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.SignInit'>>, atu8_traffic?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.TrafficIn'>>, b_abort?: Opt<boolean | 0 | 1>) => EncodedAxelarTssTofndMessageIn;
/**
 * Encodes a `MessageOut` protobuf message:
 * @param g_traffic - `traffic`:
 * @param g_keygen_result - `keygen_result`:
 * @param g_sign_result - `sign_result`:
 * @param b_need_recover - `need_recover`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndMessageOut: (atu8_traffic?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.TrafficOut'>>, atu8_keygen_result?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult'>>, atu8_sign_result?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.SignResult'>>, b_need_recover?: Opt<boolean | 0 | 1>) => EncodedAxelarTssTofndMessageOut;
/**
 * Encodes a `TrafficIn` protobuf message:
 * @param s_from_party_uid - `from_party_uid`:
 * @param atu8_payload - `payload`:
 * @param b_is_broadcast - `is_broadcast`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndTrafficIn: (s_from_party_uid?: Opt<string>, atu8_payload?: Opt<Uint8Array>, b_is_broadcast?: Opt<boolean | 0 | 1>) => EncodedAxelarTssTofndTrafficIn;
/**
 * Encodes a `TrafficOut` protobuf message:
 * @param s_to_party_uid - `to_party_uid`:
 * @param atu8_payload - `payload`:
 * @param b_is_broadcast - `is_broadcast`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndTrafficOut: (s_to_party_uid?: Opt<string>, atu8_payload?: Opt<Uint8Array>, b_is_broadcast?: Opt<boolean | 0 | 1>) => EncodedAxelarTssTofndTrafficOut;
/**
 * Encodes a `KeygenInit` protobuf message:
 * @param s_new_key_uid - `new_key_uid`:
 * @param a_party_uids - `party_uids`:
 * @param n_my_party_index - `my_party_index`:
 * @param n_threshold - `threshold`:
 * @param a_party_share_counts - `party_share_counts`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndKeygenInit: (s_new_key_uid?: Opt<string>, a_party_uids?: Opt<string[]>, n_my_party_index?: Opt<number>, n_threshold?: Opt<number>, a_party_share_counts?: Opt<number[]>) => EncodedAxelarTssTofndKeygenInit;
/**
 * Encodes a `SignInit` protobuf message:
 * @param s_new_sig_uid - `new_sig_uid`:
 * @param s_key_uid - `key_uid`:
 * @param a_party_uids - `party_uids`:
 * @param atu8_message_to_sign - `message_to_sign`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndSignInit: (s_new_sig_uid?: Opt<string>, s_key_uid?: Opt<string>, a_party_uids?: Opt<string[]>, atu8_message_to_sign?: Opt<Uint8Array>) => EncodedAxelarTssTofndSignInit;
/**
 * Encodes a `KeygenResult` protobuf message:
 * @param g_data - `data`:
 * @param g_criminals - `criminals`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndMessageOutKeygenResult: (atu8_data?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.KeygenOutput'>>, atu8_criminals?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList'>>) => EncodedAxelarTssTofndMessageOutKeygenResult;
/**
 * Encodes a `CriminalList` protobuf message:
 * @param a_criminals - `criminals`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndMessageOutCriminalList: (a_criminals?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal'>[]>) => EncodedAxelarTssTofndMessageOutCriminalList;
/**
 * Encodes a `Criminal` protobuf message:
 * @param s_party_uid - `party_uid`:
 * @param xc_crime_type - `crime_type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndMessageOutCriminalListCriminal: (s_party_uid?: Opt<string>, xc_crime_type?: Opt<ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType>) => EncodedAxelarTssTofndMessageOutCriminalListCriminal;
/**
 * Encodes a `SignResult` protobuf message:
 * @param atu8_signature - `signature`:
 * @param g_criminals - `criminals`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarTssTofndMessageOutSignResult: (atu8_signature?: Opt<Uint8Array>, atu8_criminals?: Opt<Encoded<'/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList'>>) => EncodedAxelarTssTofndMessageOutSignResult;
/**
 * A decoded protobuf RecoverRequest message
 *
 * Tuple where:
 *   - 0: keygen_init -
 *   - 1: keygen_output -
 */
export type DecodedAxelarTssTofndRecoverRequest = [
    a_keygen_init?: DecodedAxelarTssTofndKeygenInit,
    a_keygen_output?: DecodedAxelarTssTofndKeygenOutput
];
/**
 * Decodes a protobuf RecoverRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndRecoverRequest}
 */
export declare const decodeAxelarTssTofndRecoverRequest: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndRecoverRequest;
/**
 * A decoded protobuf Recover message
 *
 * Alias for: response -
 */
export type DecodedAxelarTssTofndRecoverResponse = [
    xc_response?: ProtoEnumAxelarTssTofndRecoverResponseResponse
];
/**
 * Decodes a protobuf Recover message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndRecoverResponse}
 */
export declare const decodeAxelarTssTofndRecoverResponse: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndRecoverResponse;
/**
 * A decoded protobuf KeygenOutput message
 *
 * Tuple where:
 *   - 0: pub_key -
 *   - 1: group_recover_info -
 *   - 2: private_recover_info -
 */
export type DecodedAxelarTssTofndKeygenOutput = [
    atu8_pub_key?: Uint8Array,
    atu8_group_recover_info?: Uint8Array,
    atu8_private_recover_info?: Uint8Array
];
/**
 * Decodes a protobuf KeygenOutput message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenOutput}
 */
export declare const decodeAxelarTssTofndKeygenOutput: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndKeygenOutput;
/**
 * A decoded protobuf MessageIn message
 *
 * Tuple where:
 *   - 0: keygen_init -
 *   - 1: sign_init -
 *   - 2: traffic -
 *   - 3: abort -
 */
export type DecodedAxelarTssTofndMessageIn = [
    a_keygen_init?: DecodedAxelarTssTofndKeygenInit,
    a_sign_init?: DecodedAxelarTssTofndSignInit,
    a_traffic?: DecodedAxelarTssTofndTrafficIn,
    b_abort?: 0 | 1
];
/**
 * Decodes a protobuf MessageIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageIn}
 */
export declare const decodeAxelarTssTofndMessageIn: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndMessageIn;
/**
 * A decoded protobuf MessageOut message
 *
 * Tuple where:
 *   - 0: traffic -
 *   - 1: keygen_result -
 *   - 2: sign_result -
 *   - 3: need_recover -
 */
export type DecodedAxelarTssTofndMessageOut = [
    a_traffic?: DecodedAxelarTssTofndTrafficOut,
    a_keygen_result?: DecodedAxelarTssTofndMessageOutKeygenResult,
    a_sign_result?: DecodedAxelarTssTofndMessageOutSignResult,
    b_need_recover?: 0 | 1
];
/**
 * Decodes a protobuf MessageOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOut}
 */
export declare const decodeAxelarTssTofndMessageOut: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndMessageOut;
/**
 * A decoded protobuf TrafficIn message
 *
 * Tuple where:
 *   - 0: from_party_uid -
 *   - 1: payload -
 *   - 2: is_broadcast -
 */
export type DecodedAxelarTssTofndTrafficIn = [
    s_from_party_uid?: string,
    atu8_payload?: Uint8Array,
    b_is_broadcast?: 0 | 1
];
/**
 * Decodes a protobuf TrafficIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndTrafficIn}
 */
export declare const decodeAxelarTssTofndTrafficIn: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndTrafficIn;
/**
 * A decoded protobuf TrafficOut message
 *
 * Tuple where:
 *   - 0: to_party_uid -
 *   - 1: payload -
 *   - 2: is_broadcast -
 */
export type DecodedAxelarTssTofndTrafficOut = [
    s_to_party_uid?: string,
    atu8_payload?: Uint8Array,
    b_is_broadcast?: 0 | 1
];
/**
 * Decodes a protobuf TrafficOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndTrafficOut}
 */
export declare const decodeAxelarTssTofndTrafficOut: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndTrafficOut;
/**
 * A decoded protobuf KeygenInit message
 *
 * Tuple where:
 *   - 0: new_key_uid -
 *   - 1: party_uids -
 *   - 2: my_party_index -
 *   - 3: threshold -
 *   - 4: party_share_counts -
 */
export type DecodedAxelarTssTofndKeygenInit = [
    s_new_key_uid?: string,
    a_party_uids?: string[],
    n_my_party_index?: number,
    n_threshold?: number,
    a_party_share_counts?: number[]
];
/**
 * Decodes a protobuf KeygenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenInit}
 */
export declare const decodeAxelarTssTofndKeygenInit: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndKeygenInit;
/**
 * A decoded protobuf SignInit message
 *
 * Tuple where:
 *   - 0: new_sig_uid -
 *   - 1: key_uid -
 *   - 2: party_uids -
 *   - 3: message_to_sign -
 */
export type DecodedAxelarTssTofndSignInit = [
    s_new_sig_uid?: string,
    s_key_uid?: string,
    a_party_uids?: string[],
    atu8_message_to_sign?: Uint8Array
];
/**
 * Decodes a protobuf SignInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndSignInit}
 */
export declare const decodeAxelarTssTofndSignInit: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndSignInit;
/**
 * A decoded protobuf KeygenResult message
 *
 * Tuple where:
 *   - 0: data -
 *   - 1: criminals -
 */
export type DecodedAxelarTssTofndMessageOutKeygenResult = [
    a_data?: DecodedAxelarTssTofndKeygenOutput,
    a_criminals?: DecodedAxelarTssTofndMessageOutCriminalList
];
/**
 * Decodes a protobuf KeygenResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutKeygenResult}
 */
export declare const decodeAxelarTssTofndMessageOutKeygenResult: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndMessageOutKeygenResult;
/**
 * A decoded protobuf CriminalList message
 *
 * Alias for: criminals -
 */
export type DecodedAxelarTssTofndMessageOutCriminalList = [
    a_criminals?: DecodedAxelarTssTofndMessageOutCriminalListCriminal[]
];
/**
 * Decodes a protobuf CriminalList message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutCriminalList}
 */
export declare const decodeAxelarTssTofndMessageOutCriminalList: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndMessageOutCriminalList;
/**
 * A decoded protobuf Criminal message
 *
 * Tuple where:
 *   - 0: party_uid -
 *   - 1: crime_type -
 */
export type DecodedAxelarTssTofndMessageOutCriminalListCriminal = [
    s_party_uid?: string,
    xc_crime_type?: ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType
];
/**
 * Decodes a protobuf Criminal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutCriminalListCriminal}
 */
export declare const decodeAxelarTssTofndMessageOutCriminalListCriminal: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndMessageOutCriminalListCriminal;
/**
 * A decoded protobuf SignResult message
 *
 * Tuple where:
 *   - 0: signature -
 *   - 1: criminals -
 */
export type DecodedAxelarTssTofndMessageOutSignResult = [
    atu8_signature?: Uint8Array,
    a_criminals?: DecodedAxelarTssTofndMessageOutCriminalList
];
/**
 * Decodes a protobuf SignResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutSignResult}
 */
export declare const decodeAxelarTssTofndMessageOutSignResult: (atu8_payload: Uint8Array) => DecodedAxelarTssTofndMessageOutSignResult;
/**
 * Destructures the fields of a {@link AxelarTssTofndRecoverRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keygen_init -
 *   - 1: keygen_output -
 */
export declare const destructAxelarTssTofndRecoverRequest: (g_struct: AxelarTssTofndRecoverRequest) => [keygen_init?: AxelarTssTofndKeygenInit, keygen_output?: AxelarTssTofndKeygenOutput];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_RECOVER_REQUEST = "/axelar.tss.tofnd.v1beta1.RecoverRequest";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.RecoverRequest` -
 */
export type AxelarTssTofndRecoverRequest = {
    keygen_init?: AxelarTssTofndKeygenInit | undefined;
    keygen_output?: AxelarTssTofndKeygenOutput | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_key_uid -
 *   - 1: party_uids -
 *   - 2: my_party_index -
 *   - 3: threshold -
 *   - 4: party_share_counts -
 */
export declare const destructAxelarTssTofndKeygenInit: (g_struct: AxelarTssTofndKeygenInit) => [new_key_uid?: string, party_uids?: string[], my_party_index?: number, threshold?: number, party_share_counts?: number[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_INIT = "/axelar.tss.tofnd.v1beta1.KeygenInit";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.KeygenInit` -
 */
export type AxelarTssTofndKeygenInit = {
    new_key_uid?: string | undefined;
    party_uids?: string[] | undefined;
    my_party_index?: number | undefined;
    threshold?: number | undefined;
    party_share_counts?: number[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenOutput} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: group_recover_info -
 *   - 2: private_recover_info -
 */
export declare const destructAxelarTssTofndKeygenOutput: (g_struct: AxelarTssTofndKeygenOutput) => [pub_key?: Uint8Array, group_recover_info?: Uint8Array, private_recover_info?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_OUTPUT = "/axelar.tss.tofnd.v1beta1.KeygenOutput";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.KeygenOutput` - Keygen's success response
 */
export type AxelarTssTofndKeygenOutput = {
    pub_key?: CwBase64 | undefined;
    group_recover_info?: CwBase64 | undefined;
    private_recover_info?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndRecoverResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: response -
 */
export declare const destructAxelarTssTofndRecoverResponse: (g_struct: AxelarTssTofndRecoverResponse) => [response?: JsonEnumAxelarTssTofndRecoverResponseResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_RECOVER_RESPONSE = "/axelar.tss.tofnd.v1beta1.RecoverResponse";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.RecoverResponse` -
 */
export type AxelarTssTofndRecoverResponse = {
    response?: JsonEnumAxelarTssTofndRecoverResponseResponse | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageIn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keygen_init -
 *   - 1: sign_init -
 *   - 2: traffic -
 *   - 3: abort -
 */
export declare const destructAxelarTssTofndMessageIn: (g_struct: AxelarTssTofndMessageIn) => [keygen_init?: AxelarTssTofndKeygenInit, sign_init?: AxelarTssTofndSignInit, traffic?: AxelarTssTofndTrafficIn, abort?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_IN = "/axelar.tss.tofnd.v1beta1.MessageIn";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.MessageIn` -
 */
export type AxelarTssTofndMessageIn = {
    keygen_init?: AxelarTssTofndKeygenInit | undefined;
    sign_init?: AxelarTssTofndSignInit | undefined;
    traffic?: AxelarTssTofndTrafficIn | undefined;
    abort?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndSignInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_sig_uid -
 *   - 1: key_uid -
 *   - 2: party_uids -
 *   - 3: message_to_sign -
 */
export declare const destructAxelarTssTofndSignInit: (g_struct: AxelarTssTofndSignInit) => [new_sig_uid?: string, key_uid?: string, party_uids?: string[], message_to_sign?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_SIGN_INIT = "/axelar.tss.tofnd.v1beta1.SignInit";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.SignInit` -
 */
export type AxelarTssTofndSignInit = {
    new_sig_uid?: string | undefined;
    key_uid?: string | undefined;
    party_uids?: string[] | undefined;
    message_to_sign?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndTrafficIn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: from_party_uid -
 *   - 1: payload -
 *   - 2: is_broadcast -
 */
export declare const destructAxelarTssTofndTrafficIn: (g_struct: AxelarTssTofndTrafficIn) => [from_party_uid?: string, payload?: Uint8Array, is_broadcast?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_TRAFFIC_IN = "/axelar.tss.tofnd.v1beta1.TrafficIn";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.TrafficIn` -
 */
export type AxelarTssTofndTrafficIn = {
    from_party_uid?: string | undefined;
    payload?: CwBase64 | undefined;
    is_broadcast?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOut} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: traffic -
 *   - 1: keygen_result -
 *   - 2: sign_result -
 *   - 3: need_recover -
 */
export declare const destructAxelarTssTofndMessageOut: (g_struct: AxelarTssTofndMessageOut) => [traffic?: AxelarTssTofndTrafficOut, keygen_result?: AxelarTssTofndMessageOutKeygenResult, sign_result?: AxelarTssTofndMessageOutSignResult, need_recover?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT = "/axelar.tss.tofnd.v1beta1.MessageOut";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.MessageOut` -
 */
export type AxelarTssTofndMessageOut = {
    traffic?: AxelarTssTofndTrafficOut | undefined;
    keygen_result?: AxelarTssTofndMessageOutKeygenResult | undefined;
    sign_result?: AxelarTssTofndMessageOutSignResult | undefined;
    need_recover?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndTrafficOut} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: to_party_uid -
 *   - 1: payload -
 *   - 2: is_broadcast -
 */
export declare const destructAxelarTssTofndTrafficOut: (g_struct: AxelarTssTofndTrafficOut) => [to_party_uid?: string, payload?: Uint8Array, is_broadcast?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_TRAFFIC_OUT = "/axelar.tss.tofnd.v1beta1.TrafficOut";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.TrafficOut` -
 */
export type AxelarTssTofndTrafficOut = {
    to_party_uid?: string | undefined;
    payload?: CwBase64 | undefined;
    is_broadcast?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutKeygenResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 *   - 1: criminals -
 */
export declare const destructAxelarTssTofndMessageOutKeygenResult: (g_struct: AxelarTssTofndMessageOutKeygenResult) => [data?: AxelarTssTofndKeygenOutput, criminals?: AxelarTssTofndMessageOutCriminalList];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_KEYGEN_RESULT = "/axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult` -
 */
export type AxelarTssTofndMessageOutKeygenResult = {
    data?: AxelarTssTofndKeygenOutput | undefined;
    criminals?: AxelarTssTofndMessageOutCriminalList | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutCriminalList} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: criminals -
 */
export declare const destructAxelarTssTofndMessageOutCriminalList: (g_struct: AxelarTssTofndMessageOutCriminalList) => [criminals?: AxelarTssTofndMessageOutCriminalListCriminal[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST = "/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList` -
 */
export type AxelarTssTofndMessageOutCriminalList = {
    criminals?: AxelarTssTofndMessageOutCriminalListCriminal[] | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutCriminalListCriminal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: party_uid -
 *   - 1: crime_type -
 */
export declare const destructAxelarTssTofndMessageOutCriminalListCriminal: (g_struct: AxelarTssTofndMessageOutCriminalListCriminal) => [party_uid?: string, crime_type?: JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL = "/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal` -
 */
export type AxelarTssTofndMessageOutCriminalListCriminal = {
    party_uid?: string | undefined;
    crime_type?: JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType | undefined;
};
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutSignResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signature -
 *   - 1: criminals -
 */
export declare const destructAxelarTssTofndMessageOutSignResult: (g_struct: AxelarTssTofndMessageOutSignResult) => [signature?: Uint8Array, criminals?: AxelarTssTofndMessageOutCriminalList];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_SIGN_RESULT = "/axelar.tss.tofnd.v1beta1.MessageOut.SignResult";
/**
 * JSON serialization of `axelar.tss.tofnd.v1beta1.MessageOut.SignResult` -
 */
export type AxelarTssTofndMessageOutSignResult = {
    signature?: CwBase64 | undefined;
    criminals?: AxelarTssTofndMessageOutCriminalList | undefined;
};
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndRecoverResponseResponse}
 */
export declare const XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndRecoverResponseResponse}
 */
export declare const SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED = "RESPONSE_UNSPECIFIED";
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_SUCCESS** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndRecoverResponseResponse}
 */
export declare const XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS = 1;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_SUCCESS** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndRecoverResponseResponse}
 */
export declare const SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS = "RESPONSE_SUCCESS";
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_FAIL** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndRecoverResponseResponse}
 */
export declare const XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL = 2;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_FAIL** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndRecoverResponseResponse}
 */
export declare const SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL = "RESPONSE_FAIL";
/**
 * Raw protobuf enum values for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS}
 *   - {@link XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL}
 */
export type ProtoEnumAxelarTssTofndRecoverResponseResponse = typeof XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED | typeof XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS | typeof XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL;
/**
 * JSON enum values for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS}
 *   - {@link SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL}
 */
export type JsonEnumAxelarTssTofndRecoverResponseResponse = typeof SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED | typeof SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS | typeof SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL;
/**
 * Maps a protobuf enum int value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarTssTofndRecoverResponseResponse: Record<ProtoEnumAxelarTssTofndRecoverResponseResponse, JsonEnumAxelarTssTofndRecoverResponseResponse>;
/**
 * Maps a JSON enum string value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarTssTofndRecoverResponseResponse: Record<JsonEnumAxelarTssTofndRecoverResponseResponse, ProtoEnumAxelarTssTofndRecoverResponseResponse>;
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export declare const XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export declare const SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED = "CRIME_TYPE_UNSPECIFIED";
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_NON_MALICIOUS** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export declare const XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS = 1;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_NON_MALICIOUS** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export declare const SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS = "CRIME_TYPE_NON_MALICIOUS";
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_MALICIOUS** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export declare const XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS = 2;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_MALICIOUS** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export declare const SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS = "CRIME_TYPE_MALICIOUS";
/**
 * Raw protobuf enum values for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS}
 *   - {@link XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS}
 */
export type ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType = typeof XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED | typeof XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS | typeof XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS;
/**
 * JSON enum values for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS}
 *   - {@link SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS}
 */
export type JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType = typeof SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED | typeof SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS | typeof SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS;
/**
 * Maps a protobuf enum int value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType: Record<ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType, JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType>;
/**
 * Maps a JSON enum string value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType: Record<JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType, ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType>;
