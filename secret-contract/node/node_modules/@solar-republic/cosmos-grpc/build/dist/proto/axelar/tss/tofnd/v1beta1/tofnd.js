import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `RecoverRequest` protobuf message:
 * @param g_keygen_init - `keygen_init`:
 * @param g_keygen_output - `keygen_output`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndRecoverRequest = (atu8_keygen_init, atu8_keygen_output) => Protobuf() // ...
    .b(atu8_keygen_init) // KeygenInit keygen_init = 1
    .b(atu8_keygen_output) // KeygenOutput keygen_output = 2
    .o;
/**
 * Encodes a `RecoverResponse` protobuf message:
 * @param xc_response - `response`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndRecoverResponse = (xc_response) => Protobuf() // ...
    .v(xc_response) // Response response = 1
    .o;
/**
 * Encodes a `KeygenOutput` protobuf message: Keygen's success response
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_group_recover_info - `group_recover_info`:
 * @param atu8_private_recover_info - `private_recover_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndKeygenOutput = (atu8_pub_key, atu8_group_recover_info, atu8_private_recover_info) => Protobuf() // ...
    .b(atu8_pub_key) // bytes pub_key = 1
    .b(atu8_group_recover_info) // bytes group_recover_info = 2
    .b(atu8_private_recover_info) // bytes private_recover_info = 3
    .o;
/**
 * Encodes a `MessageIn` protobuf message:
 * @param g_keygen_init - `keygen_init`:
 * @param g_sign_init - `sign_init`:
 * @param g_traffic - `traffic`:
 * @param b_abort - `abort`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndMessageIn = (atu8_keygen_init, atu8_sign_init, atu8_traffic, b_abort) => Protobuf() // ...
    .b(atu8_keygen_init) // KeygenInit keygen_init = 1
    .b(atu8_sign_init) // SignInit sign_init = 2
    .b(atu8_traffic) // TrafficIn traffic = 3
    .v(b_abort) // boolean abort = 4
    .o;
/**
 * Encodes a `MessageOut` protobuf message:
 * @param g_traffic - `traffic`:
 * @param g_keygen_result - `keygen_result`:
 * @param g_sign_result - `sign_result`:
 * @param b_need_recover - `need_recover`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndMessageOut = (atu8_traffic, atu8_keygen_result, atu8_sign_result, b_need_recover) => Protobuf() // ...
    .b(atu8_traffic) // TrafficOut traffic = 1
    .b(atu8_keygen_result) // KeygenResult keygen_result = 2
    .b(atu8_sign_result) // SignResult sign_result = 3
    .v(b_need_recover) // boolean need_recover = 4
    .o;
/**
 * Encodes a `TrafficIn` protobuf message:
 * @param s_from_party_uid - `from_party_uid`:
 * @param atu8_payload - `payload`:
 * @param b_is_broadcast - `is_broadcast`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndTrafficIn = (s_from_party_uid, atu8_payload, b_is_broadcast) => Protobuf() // ...
    .s(s_from_party_uid) // string from_party_uid = 1
    .b(atu8_payload) // bytes payload = 2
    .v(b_is_broadcast) // boolean is_broadcast = 3
    .o;
/**
 * Encodes a `TrafficOut` protobuf message:
 * @param s_to_party_uid - `to_party_uid`:
 * @param atu8_payload - `payload`:
 * @param b_is_broadcast - `is_broadcast`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndTrafficOut = (s_to_party_uid, atu8_payload, b_is_broadcast) => Protobuf() // ...
    .s(s_to_party_uid) // string to_party_uid = 1
    .b(atu8_payload) // bytes payload = 2
    .v(b_is_broadcast) // boolean is_broadcast = 3
    .o;
/**
 * Encodes a `KeygenInit` protobuf message:
 * @param s_new_key_uid - `new_key_uid`:
 * @param a_party_uids - `party_uids`:
 * @param n_my_party_index - `my_party_index`:
 * @param n_threshold - `threshold`:
 * @param a_party_share_counts - `party_share_counts`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndKeygenInit = (s_new_key_uid, a_party_uids, n_my_party_index, n_threshold, a_party_share_counts) => Protobuf() // ...
    .s(s_new_key_uid) // string new_key_uid = 1
    .S(a_party_uids) // string[] party_uids = 2
    .v(n_my_party_index) // uint32 my_party_index = 3
    .v(n_threshold) // uint32 threshold = 4
    .V(a_party_share_counts) // uint32[] party_share_counts = 5
    .o;
/**
 * Encodes a `SignInit` protobuf message:
 * @param s_new_sig_uid - `new_sig_uid`:
 * @param s_key_uid - `key_uid`:
 * @param a_party_uids - `party_uids`:
 * @param atu8_message_to_sign - `message_to_sign`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndSignInit = (s_new_sig_uid, s_key_uid, a_party_uids, atu8_message_to_sign) => Protobuf() // ...
    .s(s_new_sig_uid) // string new_sig_uid = 1
    .s(s_key_uid) // string key_uid = 2
    .S(a_party_uids) // string[] party_uids = 3
    .b(atu8_message_to_sign) // bytes message_to_sign = 4
    .o;
/**
 * Encodes a `KeygenResult` protobuf message:
 * @param g_data - `data`:
 * @param g_criminals - `criminals`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndMessageOutKeygenResult = (atu8_data, atu8_criminals) => Protobuf() // ...
    .b(atu8_data) // KeygenOutput data = 1
    .b(atu8_criminals) // CriminalList criminals = 2
    .o;
/**
 * Encodes a `CriminalList` protobuf message:
 * @param a_criminals - `criminals`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndMessageOutCriminalList = (a_criminals) => Protobuf() // ...
    .B(a_criminals) // Criminal[] criminals = 1
    .o;
/**
 * Encodes a `Criminal` protobuf message:
 * @param s_party_uid - `party_uid`:
 * @param xc_crime_type - `crime_type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndMessageOutCriminalListCriminal = (s_party_uid, xc_crime_type) => Protobuf() // ...
    .s(s_party_uid) // string party_uid = 1
    .v(xc_crime_type) // CrimeType crime_type = 2
    .o;
/**
 * Encodes a `SignResult` protobuf message:
 * @param atu8_signature - `signature`:
 * @param g_criminals - `criminals`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssTofndMessageOutSignResult = (atu8_signature, atu8_criminals) => Protobuf() // ...
    .b(atu8_signature) // bytes signature = 1
    .b(atu8_criminals) // CriminalList criminals = 2
    .o;
/**
 * Decodes a protobuf RecoverRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndRecoverRequest}
 */
export const decodeAxelarTssTofndRecoverRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeAxelarTssTofndKeygenInit, decodeAxelarTssTofndKeygenOutput]);
/**
 * Decodes a protobuf Recover message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndRecoverResponse}
 */
export const decodeAxelarTssTofndRecoverResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf KeygenOutput message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenOutput}
 */
export const decodeAxelarTssTofndKeygenOutput = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1]);
/**
 * Decodes a protobuf MessageIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageIn}
 */
export const decodeAxelarTssTofndMessageIn = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1], [decodeAxelarTssTofndKeygenInit, decodeAxelarTssTofndSignInit, decodeAxelarTssTofndTrafficIn]);
/**
 * Decodes a protobuf MessageOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOut}
 */
export const decodeAxelarTssTofndMessageOut = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1], [decodeAxelarTssTofndTrafficOut, decodeAxelarTssTofndMessageOutKeygenResult, decodeAxelarTssTofndMessageOutSignResult]);
/**
 * Decodes a protobuf TrafficIn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndTrafficIn}
 */
export const decodeAxelarTssTofndTrafficIn = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1]);
/**
 * Decodes a protobuf TrafficOut message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndTrafficOut}
 */
export const decodeAxelarTssTofndTrafficOut = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1]);
/**
 * Decodes a protobuf KeygenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndKeygenInit}
 */
export const decodeAxelarTssTofndKeygenInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4, 1, 1, 0]);
/**
 * Decodes a protobuf SignInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndSignInit}
 */
export const decodeAxelarTssTofndSignInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 4, 1]);
/**
 * Decodes a protobuf KeygenResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutKeygenResult}
 */
export const decodeAxelarTssTofndMessageOutKeygenResult = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeAxelarTssTofndKeygenOutput, decodeAxelarTssTofndMessageOutCriminalList]);
/**
 * Decodes a protobuf CriminalList message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutCriminalList}
 */
export const decodeAxelarTssTofndMessageOutCriminalList = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeAxelarTssTofndMessageOutCriminalListCriminal]);
/**
 * Decodes a protobuf Criminal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutCriminalListCriminal}
 */
export const decodeAxelarTssTofndMessageOutCriminalListCriminal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf SignResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssTofndMessageOutSignResult}
 */
export const decodeAxelarTssTofndMessageOutSignResult = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [0, decodeAxelarTssTofndMessageOutCriminalList]);
/**
 * Destructures the fields of a {@link AxelarTssTofndRecoverRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keygen_init -
 *   - 1: keygen_output -
 */
export const destructAxelarTssTofndRecoverRequest = (g_struct) => [g_struct.keygen_init, g_struct.keygen_output];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_RECOVER_REQUEST = '/axelar.tss.tofnd.v1beta1.RecoverRequest';
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_key_uid -
 *   - 1: party_uids -
 *   - 2: my_party_index -
 *   - 3: threshold -
 *   - 4: party_share_counts -
 */
export const destructAxelarTssTofndKeygenInit = (g_struct) => [g_struct.new_key_uid, g_struct.party_uids, g_struct.my_party_index, g_struct.threshold, g_struct.party_share_counts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_INIT = '/axelar.tss.tofnd.v1beta1.KeygenInit';
/**
 * Destructures the fields of a {@link AxelarTssTofndKeygenOutput} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: group_recover_info -
 *   - 2: private_recover_info -
 */
export const destructAxelarTssTofndKeygenOutput = (g_struct) => [safe_base64_to_bytes(g_struct.pub_key), safe_base64_to_bytes(g_struct.group_recover_info), safe_base64_to_bytes(g_struct.private_recover_info)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_KEYGEN_OUTPUT = '/axelar.tss.tofnd.v1beta1.KeygenOutput';
/**
 * Destructures the fields of a {@link AxelarTssTofndRecoverResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: response -
 */
export const destructAxelarTssTofndRecoverResponse = (g_struct) => [g_struct.response];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_RECOVER_RESPONSE = '/axelar.tss.tofnd.v1beta1.RecoverResponse';
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageIn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: keygen_init -
 *   - 1: sign_init -
 *   - 2: traffic -
 *   - 3: abort -
 */
export const destructAxelarTssTofndMessageIn = (g_struct) => [g_struct.keygen_init, g_struct.sign_init, g_struct.traffic, g_struct.abort];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_IN = '/axelar.tss.tofnd.v1beta1.MessageIn';
/**
 * Destructures the fields of a {@link AxelarTssTofndSignInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_sig_uid -
 *   - 1: key_uid -
 *   - 2: party_uids -
 *   - 3: message_to_sign -
 */
export const destructAxelarTssTofndSignInit = (g_struct) => [g_struct.new_sig_uid, g_struct.key_uid, g_struct.party_uids, safe_base64_to_bytes(g_struct.message_to_sign)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_SIGN_INIT = '/axelar.tss.tofnd.v1beta1.SignInit';
/**
 * Destructures the fields of a {@link AxelarTssTofndTrafficIn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: from_party_uid -
 *   - 1: payload -
 *   - 2: is_broadcast -
 */
export const destructAxelarTssTofndTrafficIn = (g_struct) => [g_struct.from_party_uid, safe_base64_to_bytes(g_struct.payload), g_struct.is_broadcast];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_TRAFFIC_IN = '/axelar.tss.tofnd.v1beta1.TrafficIn';
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOut} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: traffic -
 *   - 1: keygen_result -
 *   - 2: sign_result -
 *   - 3: need_recover -
 */
export const destructAxelarTssTofndMessageOut = (g_struct) => [g_struct.traffic, g_struct.keygen_result, g_struct.sign_result, g_struct.need_recover];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT = '/axelar.tss.tofnd.v1beta1.MessageOut';
/**
 * Destructures the fields of a {@link AxelarTssTofndTrafficOut} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: to_party_uid -
 *   - 1: payload -
 *   - 2: is_broadcast -
 */
export const destructAxelarTssTofndTrafficOut = (g_struct) => [g_struct.to_party_uid, safe_base64_to_bytes(g_struct.payload), g_struct.is_broadcast];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_TRAFFIC_OUT = '/axelar.tss.tofnd.v1beta1.TrafficOut';
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutKeygenResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 *   - 1: criminals -
 */
export const destructAxelarTssTofndMessageOutKeygenResult = (g_struct) => [g_struct.data, g_struct.criminals];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_KEYGEN_RESULT = '/axelar.tss.tofnd.v1beta1.MessageOut.KeygenResult';
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutCriminalList} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: criminals -
 */
export const destructAxelarTssTofndMessageOutCriminalList = (g_struct) => [g_struct.criminals];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST = '/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList';
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutCriminalListCriminal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: party_uid -
 *   - 1: crime_type -
 */
export const destructAxelarTssTofndMessageOutCriminalListCriminal = (g_struct) => [g_struct.party_uid, g_struct.crime_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL = '/axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal';
/**
 * Destructures the fields of a {@link AxelarTssTofndMessageOutSignResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signature -
 *   - 1: criminals -
 */
export const destructAxelarTssTofndMessageOutSignResult = (g_struct) => [safe_base64_to_bytes(g_struct.signature), g_struct.criminals];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_TOFND_MESSAGE_OUT_SIGN_RESULT = '/axelar.tss.tofnd.v1beta1.MessageOut.SignResult';
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndRecoverResponseResponse}
 */
export const XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndRecoverResponseResponse}
 */
export const SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED = 'RESPONSE_UNSPECIFIED';
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_SUCCESS** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndRecoverResponseResponse}
 */
export const XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS = 1;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_SUCCESS** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndRecoverResponseResponse}
 */
export const SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS = 'RESPONSE_SUCCESS';
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_FAIL** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndRecoverResponseResponse}
 */
export const XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL = 2;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response`.
 *
 * **RESPONSE_FAIL** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndRecoverResponseResponse}
 */
export const SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL = 'RESPONSE_FAIL';
/**
 * Maps a protobuf enum int value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarTssTofndRecoverResponseResponse = {
    [XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED]: SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED,
    [XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS]: SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS,
    [XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL]: SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL,
};
/**
 * Maps a JSON enum string value for `axelar.tss.tofnd.v1beta1.RecoverResponse.Response` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarTssTofndRecoverResponseResponse = {
    [SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED]: XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_UNSPECIFIED,
    [SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS]: XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_SUCCESS,
    [SI_JSON_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL]: XC_PROTO_AXELAR_TSS_TOFND_RECOVER_RESPONSE_RESPONSE_FAIL,
};
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export const XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export const SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED = 'CRIME_TYPE_UNSPECIFIED';
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_NON_MALICIOUS** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export const XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS = 1;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_NON_MALICIOUS** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export const SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS = 'CRIME_TYPE_NON_MALICIOUS';
/**
 * Protobuf enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_MALICIOUS** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export const XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS = 2;
/**
 * JSON enum value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType`.
 *
 * **CRIME_TYPE_MALICIOUS** -
 *
 * Belongs to enum type {@link JsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType}
 */
export const SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS = 'CRIME_TYPE_MALICIOUS';
/**
 * Maps a protobuf enum int value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType = {
    [XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED]: SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED,
    [XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS]: SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS,
    [XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS]: SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS,
};
/**
 * Maps a JSON enum string value for `axelar.tss.tofnd.v1beta1.MessageOut.CriminalList.Criminal.CrimeType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumAxelarTssTofndMessageOutCriminalListCriminalCrimeType = {
    [SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED]: XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_UNSPECIFIED,
    [SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS]: XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_NON_MALICIOUS,
    [SI_JSON_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS]: XC_PROTO_AXELAR_TSS_TOFND_MESSAGE_OUT_CRIMINAL_LIST_CRIMINAL_CRIME_TYPE_MALICIOUS,
};
//# sourceMappingURL=tofnd.js.map