import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeAxelarTssExportedSigKeyPair } from '../exported/v1beta1/types.js';
import { decodeAxelarTssTofndTrafficOut, decodeAxelarTssTofndMessageOutKeygenResult, decodeAxelarTssTofndMessageOutSignResult } from '../tofnd/v1beta1/tofnd.js';
import { decodeAxelarTssKeyInfo } from './types.js';
import { decodeAxelarVoteExportedPollKey } from '../../vote/exported/v1beta1/types.js';
/**
 * Encodes a `StartKeygenRequest` protobuf message: indicate the start of keygen
 * @param sa_sender - `sender`:
 * @param g_key_info - `key_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssStartKeygenRequest = (sa_sender, atu8_key_info) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .b(atu8_key_info) // KeyInfo key_info = 2
    .o;
/**
 * Encodes a `StartKeygenResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssStartKeygenResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RotateKeyRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param xc_key_role - `key_role`:
 * @param si_key - `key_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssRotateKeyRequest = (sa_sender, s_chain, xc_key_role, si_key) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .v(xc_key_role) // KeyRole key_role = 3
    .s(si_key) // string key_id = 4
    .o;
/**
 * Encodes a `RotateKeyResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssRotateKeyResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ProcessKeygenTrafficRequest` protobuf message: protocol message
 * @param sa_sender - `sender`:
 * @param si_session - `session_id`:
 * @param g_payload - `payload`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssProcessKeygenTrafficRequest = (sa_sender, si_session, atu8_payload) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(si_session) // string session_id = 2
    .b(atu8_payload) // TrafficOut payload = 3
    .o;
/**
 * Encodes a `ProcessKeygenTrafficResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssProcessKeygenTrafficResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ProcessSignTrafficRequest` protobuf message: protocol message
 * @param sa_sender - `sender`:
 * @param si_session - `session_id`:
 * @param g_payload - `payload`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssProcessSignTrafficRequest = (sa_sender, si_session, atu8_payload) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(si_session) // string session_id = 2
    .b(atu8_payload) // TrafficOut payload = 3
    .o;
/**
 * Encodes a `ProcessSignTrafficResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssProcessSignTrafficResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `VotePubKeyRequest` protobuf message: represents the message to vote on a public key
 * @param sa_sender - `sender`:
 * @param g_poll_key - `poll_key`:
 * @param g_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssVotePubKeyRequest = (sa_sender, atu8_poll_key, atu8_result) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_poll_key) // PollKey poll_key = 2
    .b(atu8_result) // KeygenResult result = 3
    .o;
/**
 * Encodes a `VotePubKeyResponse` protobuf message:
 * @param s_log - `log`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssVotePubKeyResponse = (s_log) => Protobuf() // ...
    .s(s_log) // string log = 1
    .o;
/**
 * Encodes a `VoteSigRequest` protobuf message: represents a message to vote for a signature
 * @param sa_sender - `sender`:
 * @param g_poll_key - `poll_key`:
 * @param g_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssVoteSigRequest = (sa_sender, atu8_poll_key, atu8_result) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_poll_key) // PollKey poll_key = 2
    .b(atu8_result) // SignResult result = 3
    .o;
/**
 * Encodes a `VoteSigResponse` protobuf message:
 * @param s_log - `log`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssVoteSigResponse = (s_log) => Protobuf() // ...
    .s(s_log) // string log = 1
    .o;
/**
 * Encodes a `HeartBeatRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param a_key_ids - `key_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssHeartBeatRequest = (sa_sender, a_key_ids) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .S(a_key_ids) // string[] key_ids = 2
    .o;
/**
 * Encodes a `HeartBeatResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssHeartBeatResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RegisterExternalKeysRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param s_chain - `chain`:
 * @param a_external_keys - `external_keys`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssRegisterExternalKeysRequest = (sa_sender, s_chain, a_external_keys) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(s_chain) // string chain = 2
    .B(a_external_keys) // ExternalKey[] external_keys = 3
    .o;
/**
 * Encodes a `RegisterExternalKeysResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssRegisterExternalKeysResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `SubmitMultisigPubKeysRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param si_key - `key_id`:
 * @param a_sig_key_pairs - `sig_key_pairs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssSubmitMultisigPubKeysRequest = (sa_sender, si_key, a_sig_key_pairs) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(si_key) // string key_id = 2
    .B(a_sig_key_pairs) // SigKeyPair[] sig_key_pairs = 3
    .o;
/**
 * Encodes a `SubmitMultisigPubKeysResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssSubmitMultisigPubKeysResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `SubmitMultisigSignaturesRequest` protobuf message:
 * @param sa_sender - `sender`:
 * @param si_sig - `sig_id`:
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssSubmitMultisigSignaturesRequest = (sa_sender, si_sig, a_signatures) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(si_sig) // string sig_id = 2
    .B(a_signatures) // bytes[] signatures = 3
    .o;
/**
 * Encodes a `SubmitMultisigSignaturesResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssSubmitMultisigSignaturesResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ExternalKey` protobuf message:
 * @param s_id - `id`:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssRegisterExternalKeysRequestExternalKey = (s_id, atu8_pub_key) => Protobuf() // ...
    .s(s_id) // string id = 1
    .b(atu8_pub_key) // bytes pub_key = 2
    .o;
/**
 * Decodes a protobuf StartKeygenRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssStartKeygenRequest}
 */
export const decodeAxelarTssStartKeygenRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeAxelarTssKeyInfo]);
/**
 * Decodes a protobuf StartKeygen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssStartKeygenResponse}
 */
export const decodeAxelarTssStartKeygenResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RotateKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssRotateKeyRequest}
 */
export const decodeAxelarTssRotateKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1, 5]);
/**
 * Decodes a protobuf RotateKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssRotateKeyResponse}
 */
export const decodeAxelarTssRotateKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ProcessKeygenTrafficRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssProcessKeygenTrafficRequest}
 */
export const decodeAxelarTssProcessKeygenTrafficRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1], [0, 0, decodeAxelarTssTofndTrafficOut]);
/**
 * Decodes a protobuf ProcessKeygenTraffic message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssProcessKeygenTrafficResponse}
 */
export const decodeAxelarTssProcessKeygenTrafficResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ProcessSignTrafficRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssProcessSignTrafficRequest}
 */
export const decodeAxelarTssProcessSignTrafficRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 1], [0, 0, decodeAxelarTssTofndTrafficOut]);
/**
 * Decodes a protobuf ProcessSignTraffic message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssProcessSignTrafficResponse}
 */
export const decodeAxelarTssProcessSignTrafficResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf VotePubKeyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssVotePubKeyRequest}
 */
export const decodeAxelarTssVotePubKeyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, decodeAxelarVoteExportedPollKey, decodeAxelarTssTofndMessageOutKeygenResult]);
/**
 * Decodes a protobuf VotePubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssVotePubKeyResponse}
 */
export const decodeAxelarTssVotePubKeyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf VoteSigRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssVoteSigRequest}
 */
export const decodeAxelarTssVoteSigRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, decodeAxelarVoteExportedPollKey, decodeAxelarTssTofndMessageOutSignResult]);
/**
 * Decodes a protobuf VoteSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssVoteSigResponse}
 */
export const decodeAxelarTssVoteSigResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf HeartBeatRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssHeartBeatRequest}
 */
export const decodeAxelarTssHeartBeatRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 4]);
/**
 * Decodes a protobuf HeartBeat message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssHeartBeatResponse}
 */
export const decodeAxelarTssHeartBeatResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RegisterExternalKeysRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssRegisterExternalKeysRequest}
 */
export const decodeAxelarTssRegisterExternalKeysRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 0], [0, 0, decodeAxelarTssRegisterExternalKeysRequestExternalKey]);
/**
 * Decodes a protobuf RegisterExternalKeys message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssRegisterExternalKeysResponse}
 */
export const decodeAxelarTssRegisterExternalKeysResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitMultisigPubKeysRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssSubmitMultisigPubKeysRequest}
 */
export const decodeAxelarTssSubmitMultisigPubKeysRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 0], [0, 0, decodeAxelarTssExportedSigKeyPair]);
/**
 * Decodes a protobuf SubmitMultisigPubKeys message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssSubmitMultisigPubKeysResponse}
 */
export const decodeAxelarTssSubmitMultisigPubKeysResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SubmitMultisigSignaturesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssSubmitMultisigSignaturesRequest}
 */
export const decodeAxelarTssSubmitMultisigSignaturesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 0]);
/**
 * Decodes a protobuf SubmitMultisigSignatures message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssSubmitMultisigSignaturesResponse}
 */
export const decodeAxelarTssSubmitMultisigSignaturesResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ExternalKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssRegisterExternalKeysRequestExternalKey}
 */
export const decodeAxelarTssRegisterExternalKeysRequestExternalKey = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Destructures the fields of a {@link AxelarTssStartKeygenRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: key_info -
 */
export const destructAxelarTssStartKeygenRequest = (g_struct) => [g_struct.sender, g_struct.key_info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_START_KEYGEN_REQUEST = '/axelar.tss.v1beta1.StartKeygenRequest';
/**
 * Destructures the fields of a {@link AxelarTssStartKeygenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssStartKeygenResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_START_KEYGEN_RESPONSE = '/axelar.tss.v1beta1.StartKeygenResponse';
/**
 * Destructures the fields of a {@link AxelarTssRotateKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: key_role -
 *   - 3: key_id -
 */
export const destructAxelarTssRotateKeyRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.key_role, g_struct.key_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_ROTATE_KEY_REQUEST = '/axelar.tss.v1beta1.RotateKeyRequest';
/**
 * Destructures the fields of a {@link AxelarTssRotateKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssRotateKeyResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_ROTATE_KEY_RESPONSE = '/axelar.tss.v1beta1.RotateKeyResponse';
/**
 * Destructures the fields of a {@link AxelarTssProcessKeygenTrafficRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: session_id -
 *   - 2: payload -
 */
export const destructAxelarTssProcessKeygenTrafficRequest = (g_struct) => [g_struct.sender, g_struct.session_id, g_struct.payload];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_PROCESS_KEYGEN_TRAFFIC_REQUEST = '/axelar.tss.v1beta1.ProcessKeygenTrafficRequest';
/**
 * Destructures the fields of a {@link AxelarTssProcessKeygenTrafficResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssProcessKeygenTrafficResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_PROCESS_KEYGEN_TRAFFIC_RESPONSE = '/axelar.tss.v1beta1.ProcessKeygenTrafficResponse';
/**
 * Destructures the fields of a {@link AxelarTssProcessSignTrafficRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: session_id -
 *   - 2: payload -
 */
export const destructAxelarTssProcessSignTrafficRequest = (g_struct) => [g_struct.sender, g_struct.session_id, g_struct.payload];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_PROCESS_SIGN_TRAFFIC_REQUEST = '/axelar.tss.v1beta1.ProcessSignTrafficRequest';
/**
 * Destructures the fields of a {@link AxelarTssProcessSignTrafficResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssProcessSignTrafficResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_PROCESS_SIGN_TRAFFIC_RESPONSE = '/axelar.tss.v1beta1.ProcessSignTrafficResponse';
/**
 * Destructures the fields of a {@link AxelarTssVotePubKeyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: poll_key -
 *   - 2: result -
 */
export const destructAxelarTssVotePubKeyRequest = (g_struct) => [g_struct.sender, g_struct.poll_key, g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_VOTE_PUB_KEY_REQUEST = '/axelar.tss.v1beta1.VotePubKeyRequest';
/**
 * Destructures the fields of a {@link AxelarTssVotePubKeyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: log -
 */
export const destructAxelarTssVotePubKeyResponse = (g_struct) => [g_struct.log];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_VOTE_PUB_KEY_RESPONSE = '/axelar.tss.v1beta1.VotePubKeyResponse';
/**
 * Destructures the fields of a {@link AxelarTssVoteSigRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: poll_key -
 *   - 2: result -
 */
export const destructAxelarTssVoteSigRequest = (g_struct) => [g_struct.sender, g_struct.poll_key, g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_VOTE_SIG_REQUEST = '/axelar.tss.v1beta1.VoteSigRequest';
/**
 * Destructures the fields of a {@link AxelarTssVoteSigResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: log -
 */
export const destructAxelarTssVoteSigResponse = (g_struct) => [g_struct.log];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_VOTE_SIG_RESPONSE = '/axelar.tss.v1beta1.VoteSigResponse';
/**
 * Destructures the fields of a {@link AxelarTssHeartBeatRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: key_ids -
 */
export const destructAxelarTssHeartBeatRequest = (g_struct) => [g_struct.sender, g_struct.key_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_HEART_BEAT_REQUEST = '/axelar.tss.v1beta1.HeartBeatRequest';
/**
 * Destructures the fields of a {@link AxelarTssHeartBeatResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssHeartBeatResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_HEART_BEAT_RESPONSE = '/axelar.tss.v1beta1.HeartBeatResponse';
/**
 * Destructures the fields of a {@link AxelarTssRegisterExternalKeysRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: chain -
 *   - 2: external_keys -
 */
export const destructAxelarTssRegisterExternalKeysRequest = (g_struct) => [g_struct.sender, g_struct.chain, g_struct.external_keys];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_REGISTER_EXTERNAL_KEYS_REQUEST = '/axelar.tss.v1beta1.RegisterExternalKeysRequest';
/**
 * Destructures the fields of a {@link AxelarTssRegisterExternalKeysRequestExternalKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: pub_key -
 */
export const destructAxelarTssRegisterExternalKeysRequestExternalKey = (g_struct) => [g_struct.id, safe_base64_to_bytes(g_struct.pub_key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_REGISTER_EXTERNAL_KEYS_REQUEST_EXTERNAL_KEY = '/axelar.tss.v1beta1.RegisterExternalKeysRequest.ExternalKey';
/**
 * Destructures the fields of a {@link AxelarTssRegisterExternalKeysResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssRegisterExternalKeysResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_REGISTER_EXTERNAL_KEYS_RESPONSE = '/axelar.tss.v1beta1.RegisterExternalKeysResponse';
/**
 * Destructures the fields of a {@link AxelarTssSubmitMultisigPubKeysRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: key_id -
 *   - 2: sig_key_pairs -
 */
export const destructAxelarTssSubmitMultisigPubKeysRequest = (g_struct) => [g_struct.sender, g_struct.key_id, g_struct.sig_key_pairs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_SUBMIT_MULTISIG_PUB_KEYS_REQUEST = '/axelar.tss.v1beta1.SubmitMultisigPubKeysRequest';
/**
 * Destructures the fields of a {@link AxelarTssSubmitMultisigPubKeysResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssSubmitMultisigPubKeysResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_SUBMIT_MULTISIG_PUB_KEYS_RESPONSE = '/axelar.tss.v1beta1.SubmitMultisigPubKeysResponse';
/**
 * Destructures the fields of a {@link AxelarTssSubmitMultisigSignaturesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: sig_id -
 *   - 2: signatures -
 */
export const destructAxelarTssSubmitMultisigSignaturesRequest = (g_struct) => [g_struct.sender, g_struct.sig_id, map(g_struct.signatures, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_SUBMIT_MULTISIG_SIGNATURES_REQUEST = '/axelar.tss.v1beta1.SubmitMultisigSignaturesRequest';
/**
 * Destructures the fields of a {@link AxelarTssSubmitMultisigSignaturesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructAxelarTssSubmitMultisigSignaturesResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_SUBMIT_MULTISIG_SIGNATURES_RESPONSE = '/axelar.tss.v1beta1.SubmitMultisigSignaturesResponse';
//# sourceMappingURL=tx.js.map