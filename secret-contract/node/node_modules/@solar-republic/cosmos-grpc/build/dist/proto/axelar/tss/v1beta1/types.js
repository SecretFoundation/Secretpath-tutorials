import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `KeygenVoteData` protobuf message:
 * @param atu8_pub_key - `pub_key`:
 * @param atu8_group_recovery_info - `group_recovery_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssKeygenVoteData = (atu8_pub_key, atu8_group_recovery_info) => Protobuf() // ...
    .b(atu8_pub_key) // bytes pub_key = 1
    .b(atu8_group_recovery_info) // bytes group_recovery_info = 2
    .o;
/**
 * Encodes a `KeyInfo` protobuf message: holds information about a key
 * @param si_key - `key_id`:
 * @param xc_key_role - `key_role`:
 * @param xc_key_type - `key_type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssKeyInfo = (si_key, xc_key_role, xc_key_type) => Protobuf() // ...
    .s(si_key) // string key_id = 1
    .v(xc_key_role) // KeyRole key_role = 2
    .v(xc_key_type) // KeyType key_type = 3
    .o;
/**
 * Encodes a `MultisigInfo` protobuf message:
 * @param s_id - `id`:
 * @param sg_timeout - `timeout`:
 * @param sg_target_num - `target_num`:
 * @param a_infos - `infos`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssMultisigInfo = (s_id, sg_timeout, sg_target_num, a_infos) => Protobuf() // ...
    .s(s_id) // string id = 1
    .g(sg_timeout) // int32 timeout = 2
    .g(sg_target_num) // int32 target_num = 3
    .B(a_infos) // Info[] infos = 4
    .o;
/**
 * Encodes a `KeyRecoveryInfo` protobuf message:
 * @param si_key - `key_id`:
 * @param atu8_public - `public`:
 * @param a_privates - `private`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssKeyRecoveryInfo = (si_key, atu8_public, a_privates) => Protobuf() // ...
    .s(si_key) // string key_id = 1
    .b(atu8_public) // bytes public = 2
    .B(a_privates) // PrivateEntry[] private = 3
    .o;
/**
 * Encodes a `ExternalKeys` protobuf message:
 * @param s_chain - `chain`:
 * @param a_key_ids - `key_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssExternalKeys = (s_chain, a_key_ids) => Protobuf() // ...
    .s(s_chain) // string chain = 1
    .S(a_key_ids) // string[] key_ids = 2
    .o;
/**
 * Encodes a `ValidatorStatus` protobuf message:
 * @param atu8_validator - `validator`:
 * @param sg_suspended_until - `suspended_until`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssValidatorStatus = (atu8_validator, sg_suspended_until) => Protobuf() // ...
    .b(atu8_validator) // bytes validator = 1
    .g(sg_suspended_until) // uint64 suspended_until = 2
    .o;
/**
 * Encodes a `Info` protobuf message:
 * @param atu8_participant - `participant`:
 * @param a_datas - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssMultisigInfoInfo = (atu8_participant, a_datas) => Protobuf() // ...
    .b(atu8_participant) // bytes participant = 1
    .B(a_datas) // bytes[] data = 2
    .o;
/**
 * Encodes a `PrivateEntry` protobuf message:
 * @param s_key - `key`:
 * @param atu8_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeAxelarTssKeyRecoveryInfoPrivateEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // bytes value = 2
    .o;
/**
 * Decodes a protobuf KeygenVoteData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeygenVoteData}
 */
export const decodeAxelarTssKeygenVoteData = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf KeyInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeyInfo}
 */
export const decodeAxelarTssKeyInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1]);
/**
 * Decodes a protobuf MultisigInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssMultisigInfo}
 */
export const decodeAxelarTssMultisigInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, 0], [0, 0, 0, decodeAxelarTssMultisigInfoInfo]);
/**
 * Decodes a protobuf KeyRecoveryInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeyRecoveryInfo}
 */
export const decodeAxelarTssKeyRecoveryInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 0], [0, 0, decodeAxelarTssKeyRecoveryInfoPrivateEntry]);
/**
 * Decodes a protobuf ExternalKeys message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssExternalKeys}
 */
export const decodeAxelarTssExternalKeys = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf ValidatorStatus message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssValidatorStatus}
 */
export const decodeAxelarTssValidatorStatus = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3]);
/**
 * Decodes a protobuf Info message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssMultisigInfoInfo}
 */
export const decodeAxelarTssMultisigInfoInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0]);
/**
 * Decodes a protobuf PrivateEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarTssKeyRecoveryInfoPrivateEntry}
 */
export const decodeAxelarTssKeyRecoveryInfoPrivateEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Destructures the fields of a {@link AxelarTssKeyInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: key_role -
 *   - 2: key_type -
 */
export const destructAxelarTssKeyInfo = (g_struct) => [g_struct.key_id, g_struct.key_role, g_struct.key_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_KEY_INFO = '/axelar.tss.v1beta1.KeyInfo';
/**
 * Destructures the fields of a {@link AxelarTssKeygenVoteData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: group_recovery_info -
 */
export const destructAxelarTssKeygenVoteData = (g_struct) => [safe_base64_to_bytes(g_struct.pub_key), safe_base64_to_bytes(g_struct.group_recovery_info)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_KEYGEN_VOTE_DATA = '/axelar.tss.v1beta1.KeygenVoteData';
/**
 * Destructures the fields of a {@link AxelarTssMultisigInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: timeout -
 *   - 2: target_num -
 *   - 3: infos -
 */
export const destructAxelarTssMultisigInfo = (g_struct) => [g_struct.id, g_struct.timeout, g_struct.target_num, g_struct.infos];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_MULTISIG_INFO = '/axelar.tss.v1beta1.MultisigInfo';
/**
 * Destructures the fields of a {@link AxelarTssMultisigInfoInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: participant -
 *   - 1: data -
 */
export const destructAxelarTssMultisigInfoInfo = (g_struct) => [safe_base64_to_bytes(g_struct.participant), map(g_struct.data, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_MULTISIG_INFO_INFO = '/axelar.tss.v1beta1.MultisigInfo.Info';
/**
 * Destructures the fields of a {@link AxelarTssKeyRecoveryInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key_id -
 *   - 1: public -
 *   - 2: private -
 */
export const destructAxelarTssKeyRecoveryInfo = (g_struct) => [g_struct.key_id, safe_base64_to_bytes(g_struct.public), g_struct.private];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_KEY_RECOVERY_INFO = '/axelar.tss.v1beta1.KeyRecoveryInfo';
/**
 * Destructures the fields of a {@link AxelarTssKeyRecoveryInfoPrivateEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructAxelarTssKeyRecoveryInfoPrivateEntry = (g_struct) => [g_struct.key, safe_base64_to_bytes(g_struct.value)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_KEY_RECOVERY_INFO_PRIVATE_ENTRY = '/axelar.tss.v1beta1.KeyRecoveryInfo.PrivateEntry';
/**
 * Destructures the fields of a {@link AxelarTssExternalKeys} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chain -
 *   - 1: key_ids -
 */
export const destructAxelarTssExternalKeys = (g_struct) => [g_struct.chain, g_struct.key_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_EXTERNAL_KEYS = '/axelar.tss.v1beta1.ExternalKeys';
/**
 * Destructures the fields of a {@link AxelarTssValidatorStatus} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 *   - 1: suspended_until -
 */
export const destructAxelarTssValidatorStatus = (g_struct) => [safe_base64_to_bytes(g_struct.validator), g_struct.suspended_until];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_AXELAR_TSS_VALIDATOR_STATUS = '/axelar.tss.v1beta1.ValidatorStatus';
//# sourceMappingURL=types.js.map