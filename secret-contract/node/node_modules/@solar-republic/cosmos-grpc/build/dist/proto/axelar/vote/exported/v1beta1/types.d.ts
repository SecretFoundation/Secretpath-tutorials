import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { AxelarSnapshotExportedSnapshot, DecodedAxelarSnapshotExportedSnapshot } from '../../../snapshot/exported/v1beta1/types.js';
import type { AxelarUtilsThreshold, DecodedAxelarUtilsThreshold } from '../../../utils/v1beta1/threshold.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
export type EncodedAxelarVoteExportedPollMetadata = Encoded<'/axelar.vote.exported.v1beta1.PollMetadata'>;
export type EncodedAxelarVoteExportedPollKey = Encoded<'/axelar.vote.exported.v1beta1.PollKey'>;
export type EncodedAxelarVoteExportedPollParticipants = Encoded<'/axelar.vote.exported.v1beta1.PollParticipants'>;
/**
 * Encodes a `PollMetadata` protobuf message: represents a poll with write-in voting, i.e. the result of the vote can have any data type
 * @param sg_expires_at - `expires_at`:
 * @param atu8_result - `result`:
 * @param g_voting_threshold - `voting_threshold`:
 * @param xc_state - `state`:
 * @param sg_min_voter_count - `min_voter_count`:
 * @param s_reward_pool_name - `reward_pool_name`:
 * @param sg_grace_period - `grace_period`:
 * @param sg_completed_at - `completed_at`:
 * @param sg_id - `id`:
 * @param g_snapshot - `snapshot`:
 * @param s_module - `module`:
 * @param atu8_module_metadata - `module_metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteExportedPollMetadata: (sg_expires_at?: Opt<WeakInt64Str>, atu8_result?: Opt<Encoded<'github.com/cosmos/codec/ProtoMarshaler'>>, atu8_voting_threshold?: Opt<Encoded<'/axelar.utils.v1beta1.Threshold'>>, xc_state?: Opt<ProtoEnumAxelarVoteExportedPollState>, sg_min_voter_count?: Opt<WeakInt64Str>, s_reward_pool_name?: Opt<string>, sg_grace_period?: Opt<WeakInt64Str>, sg_completed_at?: Opt<WeakInt64Str>, sg_id?: Opt<WeakUint64Str>, atu8_snapshot?: Opt<Encoded<'/axelar.snapshot.exported.v1beta1.Snapshot'>>, s_module?: Opt<string>, atu8_module_metadata?: Opt<Encoded<'github.com/cosmos/codec/ProtoMarshaler'>>) => EncodedAxelarVoteExportedPollMetadata;
/**
 * Encodes a `PollKey` protobuf message: represents the key data for a poll
 * @param s_module - `module`:
 * @param s_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteExportedPollKey: (s_module?: Opt<string>, s_id?: Opt<string>) => EncodedAxelarVoteExportedPollKey;
/**
 * Encodes a `PollParticipants` protobuf message: should be embedded in poll events in other modules
 * @param sg_poll_id - `poll_id`:
 * @param a_participants - `participants`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteExportedPollParticipants: (sg_poll_id?: Opt<WeakUint64Str>, a_participants?: Opt<Uint8Array[]>) => EncodedAxelarVoteExportedPollParticipants;
/**
 * A decoded protobuf PollMetadata message
 *
 * Tuple where:
 *   - 2: expires_at -
 *   - 3: result -
 *   - 4: voting_threshold -
 *   - 5: state -
 *   - 6: min_voter_count -
 *   - 9: reward_pool_name -
 *   - 10: grace_period -
 *   - 11: completed_at -
 *   - 12: id -
 *   - 14: snapshot -
 *   - 15: module -
 *   - 16: module_metadata -
 */
export type DecodedAxelarVoteExportedPollMetadata = [
    w_0?: undefined,
    w_1?: undefined,
    sg_expires_at?: CwInt64,
    a_result?: DecodedGoogleProtobufAny,
    a_voting_threshold?: DecodedAxelarUtilsThreshold,
    xc_state?: ProtoEnumAxelarVoteExportedPollState,
    sg_min_voter_count?: CwInt64,
    w_0?: undefined,
    w_1?: undefined,
    s_reward_pool_name?: string,
    sg_grace_period?: CwInt64,
    sg_completed_at?: CwInt64,
    sg_id?: CwUint64,
    w_0?: undefined,
    a_snapshot?: DecodedAxelarSnapshotExportedSnapshot,
    s_module?: string,
    a_module_metadata?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf PollMetadata message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedAxelarVoteExportedPollMetadata}
 */
export declare const decodeAxelarVoteExportedPollMetadata: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedAxelarVoteExportedPollMetadata;
/**
 * A decoded protobuf PollKey message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: id -
 */
export type DecodedAxelarVoteExportedPollKey = [
    s_module?: string,
    s_id?: string
];
/**
 * Decodes a protobuf PollKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteExportedPollKey}
 */
export declare const decodeAxelarVoteExportedPollKey: (atu8_payload: Uint8Array) => DecodedAxelarVoteExportedPollKey;
/**
 * A decoded protobuf PollParticipants message
 *
 * Tuple where:
 *   - 0: poll_id -
 *   - 1: participants -
 */
export type DecodedAxelarVoteExportedPollParticipants = [
    sg_poll_id?: CwUint64,
    a_participants?: Uint8Array[]
];
/**
 * Decodes a protobuf PollParticipants message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteExportedPollParticipants}
 */
export declare const decodeAxelarVoteExportedPollParticipants: (atu8_payload: Uint8Array) => DecodedAxelarVoteExportedPollParticipants;
/**
 * Destructures the fields of a {@link AxelarVoteExportedPollMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 2: expires_at -
 *   - 3: result -
 *   - 4: voting_threshold -
 *   - 5: state -
 *   - 6: min_voter_count -
 *   - 9: reward_pool_name -
 *   - 10: grace_period -
 *   - 11: completed_at -
 *   - 12: id -
 *   - 14: snapshot -
 *   - 15: module -
 *   - 16: module_metadata -
 */
export declare const destructAxelarVoteExportedPollMetadata: (g_struct: AxelarVoteExportedPollMetadata) => [EMPTY?: void, EMPTY?: void, expires_at?: CwInt64, result?: JsonAny<string>, voting_threshold?: AxelarUtilsThreshold, state?: JsonEnumAxelarVoteExportedPollState, min_voter_count?: CwInt64, EMPTY?: void, EMPTY?: void, reward_pool_name?: string, grace_period?: CwInt64, completed_at?: CwInt64, id?: CwUint64, EMPTY?: void, snapshot?: AxelarSnapshotExportedSnapshot, module?: string, module_metadata?: JsonAny<string>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_EXPORTED_POLL_METADATA = "/axelar.vote.exported.v1beta1.PollMetadata";
/**
 * JSON serialization of `axelar.vote.exported.v1beta1.PollMetadata` - represents a poll with write-in voting, i.e. the result of the vote can have any data type
 */
export type AxelarVoteExportedPollMetadata = {
    expires_at?: CwInt64 | undefined;
    result?: JsonAny<string> | undefined;
    voting_threshold?: AxelarUtilsThreshold | undefined;
    state?: JsonEnumAxelarVoteExportedPollState | undefined;
    min_voter_count?: CwInt64 | undefined;
    reward_pool_name?: string | undefined;
    grace_period?: CwInt64 | undefined;
    completed_at?: CwInt64 | undefined;
    id?: CwUint64 | undefined;
    snapshot?: AxelarSnapshotExportedSnapshot | undefined;
    module?: string | undefined;
    module_metadata?: JsonAny<string> | undefined;
};
/**
 * Destructures the fields of a {@link AxelarVoteExportedPollKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: id -
 */
export declare const destructAxelarVoteExportedPollKey: (g_struct: AxelarVoteExportedPollKey) => [module?: string, id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_EXPORTED_POLL_KEY = "/axelar.vote.exported.v1beta1.PollKey";
/**
 * JSON serialization of `axelar.vote.exported.v1beta1.PollKey` - represents the key data for a poll
 */
export type AxelarVoteExportedPollKey = {
    module?: string | undefined;
    id?: string | undefined;
};
/**
 * Destructures the fields of a {@link AxelarVoteExportedPollParticipants} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: poll_id -
 *   - 1: participants -
 */
export declare const destructAxelarVoteExportedPollParticipants: (g_struct: AxelarVoteExportedPollParticipants) => [poll_id?: CwUint64, participants?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_EXPORTED_POLL_PARTICIPANTS = "/axelar.vote.exported.v1beta1.PollParticipants";
/**
 * JSON serialization of `axelar.vote.exported.v1beta1.PollParticipants` - should be embedded in poll events in other modules
 */
export type AxelarVoteExportedPollParticipants = {
    poll_id?: CwUint64 | undefined;
    participants?: CwBase64[] | undefined;
};
/**
 * Protobuf enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarVoteExportedPollState}
 */
export declare const XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_UNSPECIFIED = 0;
/**
 * JSON enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_UNSPECIFIED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarVoteExportedPollState}
 */
export declare const SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_UNSPECIFIED = "NonExistent";
/**
 * Protobuf enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_PENDING** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarVoteExportedPollState}
 */
export declare const XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_PENDING = 1;
/**
 * JSON enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_PENDING** -
 *
 * Belongs to enum type {@link JsonEnumAxelarVoteExportedPollState}
 */
export declare const SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_PENDING = "Pending";
/**
 * Protobuf enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_COMPLETED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarVoteExportedPollState}
 */
export declare const XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_COMPLETED = 2;
/**
 * JSON enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_COMPLETED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarVoteExportedPollState}
 */
export declare const SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_COMPLETED = "Completed";
/**
 * Protobuf enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_FAILED** -
 *
 * Belongs to enum type {@link ProtoEnumAxelarVoteExportedPollState}
 */
export declare const XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_FAILED = 3;
/**
 * JSON enum value for `axelar.vote.exported.v1beta1.PollState`.
 *
 * **POLL_STATE_FAILED** -
 *
 * Belongs to enum type {@link JsonEnumAxelarVoteExportedPollState}
 */
export declare const SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_FAILED = "Failed";
/**
 * Raw protobuf enum values for `axelar.vote.exported.v1beta1.PollState` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_UNSPECIFIED}
 *   - {@link XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_PENDING}
 *   - {@link XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_COMPLETED}
 *   - {@link XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_FAILED}
 */
export type ProtoEnumAxelarVoteExportedPollState = typeof XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_UNSPECIFIED | typeof XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_PENDING | typeof XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_COMPLETED | typeof XC_PROTO_AXELAR_VOTE_EXPORTED_POLL_STATE_FAILED;
/**
 * JSON enum values for `axelar.vote.exported.v1beta1.PollState` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_UNSPECIFIED}
 *   - {@link SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_PENDING}
 *   - {@link SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_COMPLETED}
 *   - {@link SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_FAILED}
 */
export type JsonEnumAxelarVoteExportedPollState = typeof SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_UNSPECIFIED | typeof SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_PENDING | typeof SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_COMPLETED | typeof SI_JSON_AXELAR_VOTE_EXPORTED_POLL_STATE_FAILED;
/**
 * Maps a protobuf enum int value for `axelar.vote.exported.v1beta1.PollState` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumAxelarVoteExportedPollState: Record<ProtoEnumAxelarVoteExportedPollState, JsonEnumAxelarVoteExportedPollState>;
/**
 * Maps a JSON enum string value for `axelar.vote.exported.v1beta1.PollState` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumAxelarVoteExportedPollState: Record<JsonEnumAxelarVoteExportedPollState, ProtoEnumAxelarVoteExportedPollState>;
