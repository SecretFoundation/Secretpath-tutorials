import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedAxelarVoteVoted = Encoded<'/axelar.vote.v1beta1.Voted'>;
/**
 * Encodes a `Voted` protobuf message:
 * @param s_module - `module`:
 * @param s_action - `action`:
 * @param s_poll - `poll`:
 * @param sa_voter - `voter`:
 * @param s_state - `state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeAxelarVoteVoted: (s_module?: Opt<string>, s_action?: Opt<string>, s_poll?: Opt<string>, sa_voter?: Opt<WeakAccountAddr>, s_state?: Opt<string>) => EncodedAxelarVoteVoted;
/**
 * A decoded protobuf Voted message
 *
 * Tuple where:
 *   - 0: module -
 *   - 1: action -
 *   - 2: poll -
 *   - 3: voter -
 *   - 4: state -
 */
export type DecodedAxelarVoteVoted = [
    s_module?: string,
    s_action?: string,
    s_poll?: string,
    sa_voter?: CwAccountAddr,
    s_state?: string
];
/**
 * Decodes a protobuf Voted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedAxelarVoteVoted}
 */
export declare const decodeAxelarVoteVoted: (atu8_payload: Uint8Array) => DecodedAxelarVoteVoted;
/**
 * Destructures the fields of a {@link AxelarVoteVoted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module -
 *   - 1: action -
 *   - 2: poll -
 *   - 3: voter -
 *   - 4: state -
 */
export declare const destructAxelarVoteVoted: (g_struct: AxelarVoteVoted) => [module?: string, action?: string, poll?: string, voter?: CwAccountAddr, state?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_AXELAR_VOTE_VOTED = "/axelar.vote.v1beta1.Voted";
/**
 * JSON serialization of `axelar.vote.v1beta1.Voted` -
 */
export type AxelarVoteVoted = {
    module?: string | undefined;
    action?: string | undefined;
    poll?: string | undefined;
    voter?: CwAccountAddr | undefined;
    state?: string | undefined;
};
