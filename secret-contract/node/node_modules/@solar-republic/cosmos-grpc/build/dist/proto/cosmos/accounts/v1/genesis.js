import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the accounts' module's genesis state.
 * @param sg_account_number - `account_number`: the latest account number.
 * @param a_accounts - `accounts`: the genesis accounts.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsGenesisState = (sg_account_number, a_accounts) => Protobuf() // ...
    .g(sg_account_number) // uint64 account_number = 1
    .B(a_accounts) // GenesisAccount[] accounts = 2
    .o;
/**
 * Encodes a `GenesisAccount` protobuf message: defines an account to be initialized in the genesis state.
 * @param sa_address - `address`: the address of the account.
 * @param s_account_type - `account_type`: the account type of the account.
 * @param a_states - `state`: the account state represented as a slice of raw key value byte pairs.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsGenesisAccount = (sa_address, s_account_type, a_states) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(s_account_type) // string account_type = 2
    .B(a_states) // KVPair[] state = 3
    .o;
/**
 * Encodes a `KVPair` protobuf message: defines a key value pair.
 * @param atu8_key - `key`: the key of the pair.
 * @param atu8_value - `value`: the value of the pair.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsKVPair = (atu8_key, atu8_value) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .b(atu8_value) // bytes value = 2
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsGenesisState}
 */
export const decodeCosmosAccountsGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0], [0, decodeCosmosAccountsGenesisAccount]);
/**
 * Decodes a protobuf GenesisAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsGenesisAccount}
 */
export const decodeCosmosAccountsGenesisAccount = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0], [0, 0, decodeCosmosAccountsKVPair]);
/**
 * Decodes a protobuf KVPair message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsKVPair}
 */
export const decodeCosmosAccountsKVPair = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Destructures the fields of a {@link CosmosAccountsGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account_number - the latest account number.
 *   - 1: accounts - the genesis accounts.
 */
export const destructCosmosAccountsGenesisState = (g_struct) => [g_struct.account_number, g_struct.accounts];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_GENESIS_STATE = '/cosmos.accounts.v1.GenesisState';
/**
 * Destructures the fields of a {@link CosmosAccountsGenesisAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address of the account.
 *   - 1: account_type - the account type of the account.
 *   - 2: state - the account state represented as a slice of raw key value byte pairs.
 */
export const destructCosmosAccountsGenesisAccount = (g_struct) => [g_struct.address, g_struct.account_type, g_struct.state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_GENESIS_ACCOUNT = '/cosmos.accounts.v1.GenesisAccount';
/**
 * Destructures the fields of a {@link CosmosAccountsKVPair} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key - the key of the pair.
 *   - 1: value - the value of the pair.
 */
export const destructCosmosAccountsKVPair = (g_struct) => [safe_base64_to_bytes(g_struct.key), safe_base64_to_bytes(g_struct.value)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_K_V_PAIR = '/cosmos.accounts.v1.KVPair';
//# sourceMappingURL=genesis.js.map