import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosAccountsAccountQueryRequest = Encoded<'/cosmos.accounts.v1.AccountQueryRequest'>;
export type EncodedCosmosAccountsAccountQueryResponse = Encoded<'/cosmos.accounts.v1.AccountQueryResponse'>;
/**
 * Encodes a `AccountQueryRequest` protobuf message: the request type for the Query/AccountQuery RPC
 * @param s_target - `target`: defines the account to be queried.
 * @param atu8_request - `request`: defines the query message being sent to the account.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAccountsAccountQueryRequest: (s_target?: Opt<string>, atu8_request?: Opt<Uint8Array>) => EncodedCosmosAccountsAccountQueryRequest;
/**
 * Encodes a `AccountQueryResponse` protobuf message: the response type for the Query/AccountQuery RPC method.
 * @param atu8_response - `response`: defines the query response of the account.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAccountsAccountQueryResponse: (atu8_response?: Opt<Uint8Array>) => EncodedCosmosAccountsAccountQueryResponse;
/**
 * A decoded protobuf AccountQueryRequest message
 *
 * Tuple where:
 *   - 0: target - defines the account to be queried.
 *   - 1: request - defines the query message being sent to the account.
 */
export type DecodedCosmosAccountsAccountQueryRequest = [
    s_target?: string,
    atu8_request?: Uint8Array
];
/**
 * Decodes a protobuf AccountQueryRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsAccountQueryRequest}
 */
export declare const decodeCosmosAccountsAccountQueryRequest: (atu8_payload: Uint8Array) => DecodedCosmosAccountsAccountQueryRequest;
/**
 * A decoded protobuf AccountQuery message
 *
 * Alias for: response - defines the query response of the account.
 */
export type DecodedCosmosAccountsAccountQueryResponse = [
    atu8_response?: Uint8Array
];
/**
 * Decodes a protobuf AccountQuery message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsAccountQueryResponse}
 */
export declare const decodeCosmosAccountsAccountQueryResponse: (atu8_payload: Uint8Array) => DecodedCosmosAccountsAccountQueryResponse;
/**
 * Destructures the fields of a {@link CosmosAccountsAccountQueryRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: target - defines the account to be queried.
 *   - 1: request - defines the query message being sent to the account.
 */
export declare const destructCosmosAccountsAccountQueryRequest: (g_struct: CosmosAccountsAccountQueryRequest) => [target?: string, request?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_ACCOUNT_QUERY_REQUEST = "/cosmos.accounts.v1.AccountQueryRequest";
/**
 * JSON serialization of `cosmos.accounts.v1.AccountQueryRequest` - the request type for the Query/AccountQuery RPC
 */
export type CosmosAccountsAccountQueryRequest = {
    target?: string | undefined;
    request?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAccountsAccountQueryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: response - defines the query response of the account.
 */
export declare const destructCosmosAccountsAccountQueryResponse: (g_struct: CosmosAccountsAccountQueryResponse) => [response?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_ACCOUNT_QUERY_RESPONSE = "/cosmos.accounts.v1.AccountQueryResponse";
/**
 * JSON serialization of `cosmos.accounts.v1.AccountQueryResponse` - the response type for the Query/AccountQuery RPC method.
 */
export type CosmosAccountsAccountQueryResponse = {
    response?: CwBase64 | undefined;
};
