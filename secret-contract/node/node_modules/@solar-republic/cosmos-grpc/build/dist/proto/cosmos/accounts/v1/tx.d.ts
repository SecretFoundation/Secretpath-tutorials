import type { WeakAccountAddr, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosAccountsMsgInit = Encoded<'/cosmos.accounts.v1.MsgInit'>;
export type EncodedCosmosAccountsMsgInitResponse = Encoded<'/cosmos.accounts.v1.MsgInitResponse'>;
export type EncodedCosmosAccountsMsgExecute = Encoded<'/cosmos.accounts.v1.MsgExecute'>;
export type EncodedCosmosAccountsMsgExecuteResponse = Encoded<'/cosmos.accounts.v1.MsgExecuteResponse'>;
/**
 * Encodes a `MsgInit` protobuf message: defines the Create request type for the Msg/Create RPC method.
 * @param sa_sender - `sender`: the address of the sender of this message.
 * @param s_account_type - `account_type`: the type of the account to be created.
 * @param atu8_message - `message`: the message to be sent to the account, it's up to the account implementation to decide what encoding format should be used to interpret this message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAccountsMsgInit: (sa_sender?: Opt<WeakAccountAddr>, s_account_type?: Opt<string>, atu8_message?: Opt<Uint8Array>) => EncodedCosmosAccountsMsgInit;
/**
 * Encodes a `MsgInitResponse` protobuf message: defines the Create response type for the Msg/Create RPC method.
 * @param sa_account - `account_address`: the address of the newly created account.
 * @param atu8_response - `response`: the response returned by the account implementation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAccountsMsgInitResponse: (sa_account?: Opt<WeakAccountAddr>, atu8_response?: Opt<Uint8Array>) => EncodedCosmosAccountsMsgInitResponse;
/**
 * Encodes a `MsgExecute` protobuf message: defines the Execute request type for the Msg/Execute RPC method.
 * @param sa_sender - `sender`: the address of the sender of this message.
 * @param s_target - `target`: the address of the account to be executed.
 * @param atu8_message - `message`: the message to be sent to the account, it's up to the account
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAccountsMsgExecute: (sa_sender?: Opt<WeakAccountAddr>, s_target?: Opt<string>, atu8_message?: Opt<Uint8Array>) => EncodedCosmosAccountsMsgExecute;
/**
 * Encodes a `MsgExecuteResponse` protobuf message: defines the Execute response type for the Msg/Execute RPC method.
 * @param atu8_response - `response`: the response returned by the account implementation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAccountsMsgExecuteResponse: (atu8_response?: Opt<Uint8Array>) => EncodedCosmosAccountsMsgExecuteResponse;
/**
 * A decoded protobuf Init message
 *
 * Tuple where:
 *   - 0: sender - the address of the sender of this message.
 *   - 1: account_type - the type of the account to be created.
 *   - 2: message - the message to be sent to the account, it's up to the account implementation to decide what encoding format should be used to interpret this message.
 */
export type DecodedCosmosAccountsMsgInit = [
    sa_sender?: CwAccountAddr,
    s_account_type?: string,
    atu8_message?: Uint8Array
];
/**
 * Decodes a protobuf Init message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgInit}
 */
export declare const decodeCosmosAccountsMsgInit: (atu8_payload: Uint8Array) => DecodedCosmosAccountsMsgInit;
/**
 * A decoded protobuf Init message
 *
 * Tuple where:
 *   - 0: account_address - the address of the newly created account.
 *   - 1: response - the response returned by the account implementation.
 */
export type DecodedCosmosAccountsMsgInitResponse = [
    sa_account?: CwAccountAddr,
    atu8_response?: Uint8Array
];
/**
 * Decodes a protobuf Init message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgInitResponse}
 */
export declare const decodeCosmosAccountsMsgInitResponse: (atu8_payload: Uint8Array) => DecodedCosmosAccountsMsgInitResponse;
/**
 * A decoded protobuf Execute message
 *
 * Tuple where:
 *   - 0: sender - the address of the sender of this message.
 *   - 1: target - the address of the account to be executed.
 *   - 2: message - the message to be sent to the account, it's up to the account
 */
export type DecodedCosmosAccountsMsgExecute = [
    sa_sender?: CwAccountAddr,
    s_target?: string,
    atu8_message?: Uint8Array
];
/**
 * Decodes a protobuf Execute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgExecute}
 */
export declare const decodeCosmosAccountsMsgExecute: (atu8_payload: Uint8Array) => DecodedCosmosAccountsMsgExecute;
/**
 * A decoded protobuf Execute message
 *
 * Alias for: response - the response returned by the account implementation.
 */
export type DecodedCosmosAccountsMsgExecuteResponse = [
    atu8_response?: Uint8Array
];
/**
 * Decodes a protobuf Execute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgExecuteResponse}
 */
export declare const decodeCosmosAccountsMsgExecuteResponse: (atu8_payload: Uint8Array) => DecodedCosmosAccountsMsgExecuteResponse;
/**
 * Destructures the fields of a {@link CosmosAccountsMsgInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the address of the sender of this message.
 *   - 1: account_type - the type of the account to be created.
 *   - 2: message - the message to be sent to the account, it's up to the account implementation to decide what encoding format should be used to interpret this message.
 */
export declare const destructCosmosAccountsMsgInit: (g_struct: CosmosAccountsMsgInit) => [sender?: CwAccountAddr, account_type?: string, message?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_INIT = "/cosmos.accounts.v1.MsgInit";
/**
 * JSON serialization of `cosmos.accounts.v1.MsgInit` - defines the Create request type for the Msg/Create RPC method.
 */
export type CosmosAccountsMsgInit = {
    sender?: CwAccountAddr | undefined;
    account_type?: string | undefined;
    message?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAccountsMsgInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account_address - the address of the newly created account.
 *   - 1: response - the response returned by the account implementation.
 */
export declare const destructCosmosAccountsMsgInitResponse: (g_struct: CosmosAccountsMsgInitResponse) => [account_address?: CwAccountAddr, response?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_INIT_RESPONSE = "/cosmos.accounts.v1.MsgInitResponse";
/**
 * JSON serialization of `cosmos.accounts.v1.MsgInitResponse` - defines the Create response type for the Msg/Create RPC method.
 */
export type CosmosAccountsMsgInitResponse = {
    account_address?: CwAccountAddr | undefined;
    response?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAccountsMsgExecute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the address of the sender of this message.
 *   - 1: target - the address of the account to be executed.
 *   - 2: message - the message to be sent to the account, it's up to the account
 */
export declare const destructCosmosAccountsMsgExecute: (g_struct: CosmosAccountsMsgExecute) => [sender?: CwAccountAddr, target?: string, message?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_EXECUTE = "/cosmos.accounts.v1.MsgExecute";
/**
 * JSON serialization of `cosmos.accounts.v1.MsgExecute` - defines the Execute request type for the Msg/Execute RPC method.
 */
export type CosmosAccountsMsgExecute = {
    sender?: CwAccountAddr | undefined;
    target?: string | undefined;
    message?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAccountsMsgExecuteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: response - the response returned by the account implementation.
 */
export declare const destructCosmosAccountsMsgExecuteResponse: (g_struct: CosmosAccountsMsgExecuteResponse) => [response?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_EXECUTE_RESPONSE = "/cosmos.accounts.v1.MsgExecuteResponse";
/**
 * JSON serialization of `cosmos.accounts.v1.MsgExecuteResponse` - defines the Execute response type for the Msg/Execute RPC method.
 */
export type CosmosAccountsMsgExecuteResponse = {
    response?: CwBase64 | undefined;
};
