import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `MsgInit` protobuf message: defines the Create request type for the Msg/Create RPC method.
 * @param sa_sender - `sender`: the address of the sender of this message.
 * @param s_account_type - `account_type`: the type of the account to be created.
 * @param atu8_message - `message`: the message to be sent to the account, it's up to the account implementation to decide what encoding format should be used to interpret this message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsMsgInit = (sa_sender, s_account_type, atu8_message) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_account_type) // string account_type = 2
    .b(atu8_message) // bytes message = 3
    .o;
/**
 * Encodes a `MsgInitResponse` protobuf message: defines the Create response type for the Msg/Create RPC method.
 * @param sa_account - `account_address`: the address of the newly created account.
 * @param atu8_response - `response`: the response returned by the account implementation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsMsgInitResponse = (sa_account, atu8_response) => Protobuf() // ...
    .s(sa_account) // string account_address = 1
    .b(atu8_response) // bytes response = 2
    .o;
/**
 * Encodes a `MsgExecute` protobuf message: defines the Execute request type for the Msg/Execute RPC method.
 * @param sa_sender - `sender`: the address of the sender of this message.
 * @param s_target - `target`: the address of the account to be executed.
 * @param atu8_message - `message`: the message to be sent to the account, it's up to the account
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsMsgExecute = (sa_sender, s_target, atu8_message) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_target) // string target = 2
    .b(atu8_message) // bytes message = 3
    .o;
/**
 * Encodes a `MsgExecuteResponse` protobuf message: defines the Execute response type for the Msg/Execute RPC method.
 * @param atu8_response - `response`: the response returned by the account implementation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAccountsMsgExecuteResponse = (atu8_response) => Protobuf() // ...
    .b(atu8_response) // bytes response = 1
    .o;
/**
 * Decodes a protobuf Init message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgInit}
 */
export const decodeCosmosAccountsMsgInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf Init message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgInitResponse}
 */
export const decodeCosmosAccountsMsgInitResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf Execute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgExecute}
 */
export const decodeCosmosAccountsMsgExecute = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf Execute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAccountsMsgExecuteResponse}
 */
export const decodeCosmosAccountsMsgExecuteResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link CosmosAccountsMsgInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the address of the sender of this message.
 *   - 1: account_type - the type of the account to be created.
 *   - 2: message - the message to be sent to the account, it's up to the account implementation to decide what encoding format should be used to interpret this message.
 */
export const destructCosmosAccountsMsgInit = (g_struct) => [g_struct.sender, g_struct.account_type, safe_base64_to_bytes(g_struct.message)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_INIT = '/cosmos.accounts.v1.MsgInit';
/**
 * Destructures the fields of a {@link CosmosAccountsMsgInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account_address - the address of the newly created account.
 *   - 1: response - the response returned by the account implementation.
 */
export const destructCosmosAccountsMsgInitResponse = (g_struct) => [g_struct.account_address, safe_base64_to_bytes(g_struct.response)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_INIT_RESPONSE = '/cosmos.accounts.v1.MsgInitResponse';
/**
 * Destructures the fields of a {@link CosmosAccountsMsgExecute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the address of the sender of this message.
 *   - 1: target - the address of the account to be executed.
 *   - 2: message - the message to be sent to the account, it's up to the account
 */
export const destructCosmosAccountsMsgExecute = (g_struct) => [g_struct.sender, g_struct.target, safe_base64_to_bytes(g_struct.message)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_EXECUTE = '/cosmos.accounts.v1.MsgExecute';
/**
 * Destructures the fields of a {@link CosmosAccountsMsgExecuteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: response - the response returned by the account implementation.
 */
export const destructCosmosAccountsMsgExecuteResponse = (g_struct) => [safe_base64_to_bytes(g_struct.response)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_ACCOUNTS_MSG_EXECUTE_RESPONSE = '/cosmos.accounts.v1.MsgExecuteResponse';
//# sourceMappingURL=tx.js.map