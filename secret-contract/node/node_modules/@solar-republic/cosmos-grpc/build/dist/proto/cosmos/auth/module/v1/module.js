/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
/**
 * Encodes a `Module` protobuf message: the config object for the auth module.
 * @param s_bech32_prefix - `bech32_prefix`: the bech32 account prefix for the app.
 * @param a_module_account_permissions - `module_account_permissions`: module account permissions.
 * @param s_authority - `authority`: defines the custom module authority. If not set, defaults to the governance module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthModuleModule = (s_bech32_prefix, a_module_account_permissions, s_authority) => Protobuf() // ...
    .s(s_bech32_prefix) // string bech32_prefix = 1
    .B(a_module_account_permissions) // ModuleAccountPermission[] module_account_permissions = 2
    .s(s_authority) // string authority = 3
    .o;
/**
 * Encodes a `ModuleAccountPermission` protobuf message: represents permissions for a module account.
 * @param s_account - `account`: the name of the module.
 * @param a_permissions - `permissions`: the permissions this module has. Currently recognized values are minter, burner and staking.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthModuleModuleAccountPermission = (s_account, a_permissions) => Protobuf() // ...
    .s(s_account) // string account = 1
    .S(a_permissions) // string[] permissions = 2
    .o;
/**
 * Decodes a protobuf Module message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleModule}
 */
export const decodeCosmosAuthModuleModule = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 5], [0, decodeCosmosAuthModuleModuleAccountPermission]);
/**
 * Decodes a protobuf ModuleAccountPermission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleModuleAccountPermission}
 */
export const decodeCosmosAuthModuleModuleAccountPermission = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Destructures the fields of a {@link CosmosAuthModuleModule} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bech32_prefix - the bech32 account prefix for the app.
 *   - 1: module_account_permissions - module account permissions.
 *   - 2: authority - defines the custom module authority. If not set, defaults to the governance module.
 */
export const destructCosmosAuthModuleModule = (g_struct) => [g_struct.bech32_prefix, g_struct.module_account_permissions, g_struct.authority];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_MODULE = '/cosmos.auth.module.v1.Module';
/**
 * Destructures the fields of a {@link CosmosAuthModuleModuleAccountPermission} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: account - the name of the module.
 *   - 1: permissions - the permissions this module has. Currently recognized values are minter, burner and staking.
 */
export const destructCosmosAuthModuleModuleAccountPermission = (g_struct) => [g_struct.account, g_struct.permissions];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_MODULE_ACCOUNT_PERMISSION = '/cosmos.auth.module.v1.ModuleAccountPermission';
//# sourceMappingURL=module.js.map