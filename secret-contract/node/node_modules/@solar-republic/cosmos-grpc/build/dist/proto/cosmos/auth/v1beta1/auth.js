import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, any } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `BaseAccount` protobuf message wrapped in the `Any` container: defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).
 * @param sa_address - `address`:
 * @param atu8_pub_key - `pub_key`:
 * @param sg_account_number - `account_number`:
 * @param sg_sequence - `sequence`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyBaseAccount = (sa_address, atu8_pub_key, sg_account_number, sg_sequence) => any('/cosmos.auth.v1beta1.BaseAccount', Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_pub_key) // Any pub_key = 2
    .g(sg_account_number) // uint64 account_number = 3
    .g(sg_sequence) // uint64 sequence = 4
    .o);
/**
 * Encodes a `ModuleAccount` protobuf message wrapped in the `Any` container: defines an account for modules that holds coins on a pool.
 * @param g_base_account - `base_account`:
 * @param s_name - `name`:
 * @param a_permissions - `permissions`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyModuleAccount = (atu8_base_account, s_name, a_permissions) => any('/cosmos.auth.v1beta1.ModuleAccount', Protobuf() // ...
    .b(atu8_base_account) // BaseAccount base_account = 1
    .s(s_name) // string name = 2
    .S(a_permissions) // string[] permissions = 3
    .o);
/**
 * Encodes a `BaseAccount` protobuf message: defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting).
 * @param sa_address - `address`:
 * @param atu8_pub_key - `pub_key`:
 * @param sg_account_number - `account_number`:
 * @param sg_sequence - `sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthBaseAccount = (sa_address, atu8_pub_key, sg_account_number, sg_sequence) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_pub_key) // Any pub_key = 2
    .g(sg_account_number) // uint64 account_number = 3
    .g(sg_sequence) // uint64 sequence = 4
    .o;
/**
 * Encodes a `ModuleAccount` protobuf message: defines an account for modules that holds coins on a pool.
 * @param g_base_account - `base_account`:
 * @param s_name - `name`:
 * @param a_permissions - `permissions`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthModuleAccount = (atu8_base_account, s_name, a_permissions) => Protobuf() // ...
    .b(atu8_base_account) // BaseAccount base_account = 1
    .s(s_name) // string name = 2
    .S(a_permissions) // string[] permissions = 3
    .o;
/**
 * Encodes a `ModuleCredential` protobuf message: represents a unclaimable pubkey for base accounts controlled by modules. Since: cosmos-sdk 0.47
 * @param s_module_name - `module_name`: the name of the module used for address derivation (passed into address.Module).
 * @param a_derivation_keys - `derivation_keys`: for deriving a module account address (passed into address.Module) adding more keys creates sub-account addresses (passed into address.Derive)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthModuleCredential = (s_module_name, a_derivation_keys) => Protobuf() // ...
    .s(s_module_name) // string module_name = 1
    .B(a_derivation_keys) // bytes[] derivation_keys = 2
    .o;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the auth module.
 * @param sg_max_memo_characters - `max_memo_characters`:
 * @param sg_tx_sig_limit - `tx_sig_limit`:
 * @param sg_tx_size_cost_per_byte - `tx_size_cost_per_byte`:
 * @param sg_sig_verify_cost_ed25519 - `sig_verify_cost_ed25519`:
 * @param sg_sig_verify_cost_secp256k1 - `sig_verify_cost_secp256k1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthParams = (sg_max_memo_characters, sg_tx_sig_limit, sg_tx_size_cost_per_byte, sg_sig_verify_cost_ed25519, sg_sig_verify_cost_secp256k1) => Protobuf() // ...
    .g(sg_max_memo_characters) // uint64 max_memo_characters = 1
    .g(sg_tx_sig_limit) // uint64 tx_sig_limit = 2
    .g(sg_tx_size_cost_per_byte) // uint64 tx_size_cost_per_byte = 3
    .g(sg_sig_verify_cost_ed25519) // uint64 sig_verify_cost_ed25519 = 4
    .g(sg_sig_verify_cost_secp256k1) // uint64 sig_verify_cost_secp256k1 = 5
    .o;
/**
 * Decodes a protobuf BaseAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthBaseAccount}
 */
export const decodeCosmosAuthBaseAccount = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 3, 3], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf ModuleAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleAccount}
 */
export const decodeCosmosAuthModuleAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 4], [decodeCosmosAuthBaseAccount]);
/**
 * Decodes a protobuf ModuleCredential message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthModuleCredential}
 */
export const decodeCosmosAuthModuleCredential = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthParams}
 */
export const decodeCosmosAuthParams = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 3, 3, 3]);
/**
 * Destructures the fields of a {@link CosmosAuthParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_memo_characters -
 *   - 1: tx_sig_limit -
 *   - 2: tx_size_cost_per_byte -
 *   - 3: sig_verify_cost_ed25519 -
 *   - 4: sig_verify_cost_secp256k1 -
 */
export const destructCosmosAuthParams = (g_struct) => [g_struct.max_memo_characters, g_struct.tx_sig_limit, g_struct.tx_size_cost_per_byte, g_struct.sig_verify_cost_ed25519, g_struct.sig_verify_cost_secp256k1];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_PARAMS = '/cosmos.auth.v1beta1.Params';
/**
 * Destructures the fields of a {@link CosmosAuthBaseAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: pub_key -
 *   - 2: account_number -
 *   - 3: sequence -
 */
export const destructCosmosAuthBaseAccount = (g_struct) => [g_struct.address, g_struct.pub_key, g_struct.account_number, g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_BASE_ACCOUNT = '/cosmos.auth.v1beta1.BaseAccount';
/**
 * Destructures the fields of a {@link CosmosAuthModuleAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_account -
 *   - 1: name -
 *   - 2: permissions -
 */
export const destructCosmosAuthModuleAccount = (g_struct) => [g_struct.base_account, g_struct.name, g_struct.permissions];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_ACCOUNT = '/cosmos.auth.v1beta1.ModuleAccount';
/**
 * Destructures the fields of a {@link CosmosAuthModuleCredential} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module_name - the name of the module used for address derivation (passed into address.Module).
 *   - 1: derivation_keys - for deriving a module account address (passed into address.Module) adding more keys creates sub-account addresses (passed into address.Derive)
 */
export const destructCosmosAuthModuleCredential = (g_struct) => [g_struct.module_name, map(g_struct.derivation_keys, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTH_MODULE_CREDENTIAL = '/cosmos.auth.v1beta1.ModuleCredential';
//# sourceMappingURL=auth.js.map