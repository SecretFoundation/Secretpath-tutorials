import { parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, any } from '../../../../api/protobuf-writer.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `GenericAuthorization` protobuf message wrapped in the `Any` container: gives the grantee unrestricted permissions to execute the provided method on behalf of the granter's account.
 * @param s_msg - `msg`: Msg, identified by it's type URL, to grant unrestricted permissions to execute
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyGenericAuthorization = (s_msg) => any('/cosmos.authz.v1beta1.GenericAuthorization', Protobuf() // ...
    .s(s_msg) // string msg = 1
    .o);
/**
 * Encodes a `GenericAuthorization` protobuf message: gives the grantee unrestricted permissions to execute the provided method on behalf of the granter's account.
 * @param s_msg - `msg`: Msg, identified by it's type URL, to grant unrestricted permissions to execute
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzGenericAuthorization = (s_msg) => Protobuf() // ...
    .s(s_msg) // string msg = 1
    .o;
/**
 * Encodes a `Grant` protobuf message: gives permissions to execute the provide method with expiration time.
 * @param atu8_authorization - `authorization`:
 * @param xt_expiration - `expiration`: time when the grant will expire and will be pruned. If null, then the grant doesn't have a time expiration (other conditions  in `authorization` may apply to invalidate the grant)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzGrant = (atu8_authorization, xt_expiration) => Protobuf() // ...
    .b(atu8_authorization) // Any authorization = 1
    .b(temporal(xt_expiration)) // Timestamp expiration = 2
    .o;
/**
 * Encodes a `GrantAuthorization` protobuf message: extends a grant with both the addresses of the grantee and granter. It is used in genesis.proto and query.proto
 * @param sa_granter - `granter`:
 * @param sa_grantee - `grantee`:
 * @param atu8_authorization - `authorization`:
 * @param xt_expiration - `expiration`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzGrantAuthorization = (sa_granter, sa_grantee, atu8_authorization, xt_expiration) => Protobuf() // ...
    .s(sa_granter) // string granter = 1
    .s(sa_grantee) // string grantee = 2
    .b(atu8_authorization) // Any authorization = 3
    .b(temporal(xt_expiration)) // Timestamp expiration = 4
    .o;
/**
 * Encodes a `GrantQueueItem` protobuf message: contains the list of TypeURL of a sdk.Msg.
 * @param a_msg_type_urls - `msg_type_urls`: contains the list of TypeURL of a sdk.Msg.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAuthzGrantQueueItem = (a_msg_type_urls) => Protobuf() // ...
    .S(a_msg_type_urls) // string[] msg_type_urls = 1
    .o;
/**
 * Decodes a protobuf GenericAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzGenericAuthorization}
 */
export const decodeCosmosAuthzGenericAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf Grant message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzGrant}
 */
export const decodeCosmosAuthzGrant = (atu8_payload) => decode_protobuf(atu8_payload, [1, [3, 1]], [decodeGoogleProtobufAny, decode_temporal]);
/**
 * Decodes a protobuf GrantAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzGrantAuthorization}
 */
export const decodeCosmosAuthzGrantAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, [3, 1]], [0, 0, decodeGoogleProtobufAny, decode_temporal]);
/**
 * Decodes a protobuf GrantQueueItem message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzGrantQueueItem}
 */
export const decodeCosmosAuthzGrantQueueItem = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Destructures the fields of a {@link CosmosAuthzGrant} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authorization -
 *   - 1: expiration - time when the grant will expire and will be pruned. If null, then the grant doesn't have a time expiration (other conditions  in `authorization` may apply to invalidate the grant)
 */
export const destructCosmosAuthzGrant = (g_struct) => [g_struct.authorization, parse_timestamp(g_struct.expiration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_GRANT = '/cosmos.authz.v1beta1.Grant';
/**
 * Destructures the fields of a {@link CosmosAuthzGrantAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: granter -
 *   - 1: grantee -
 *   - 2: authorization -
 *   - 3: expiration -
 */
export const destructCosmosAuthzGrantAuthorization = (g_struct) => [g_struct.granter, g_struct.grantee, g_struct.authorization, parse_timestamp(g_struct.expiration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_GRANT_AUTHORIZATION = '/cosmos.authz.v1beta1.GrantAuthorization';
/**
 * Destructures the fields of a {@link CosmosAuthzGenericAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg - Msg, identified by it's type URL, to grant unrestricted permissions to execute
 */
export const destructCosmosAuthzGenericAuthorization = (g_struct) => [g_struct.msg];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_GENERIC_AUTHORIZATION = '/cosmos.authz.v1beta1.GenericAuthorization';
/**
 * Destructures the fields of a {@link CosmosAuthzGrantQueueItem} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_type_urls - contains the list of TypeURL of a sdk.Msg.
 */
export const destructCosmosAuthzGrantQueueItem = (g_struct) => [g_struct.msg_type_urls];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTHZ_GRANT_QUEUE_ITEM = '/cosmos.authz.v1beta1.GrantQueueItem';
//# sourceMappingURL=authz.js.map