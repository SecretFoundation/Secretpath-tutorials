import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosAuthzGrantAuthorization, DecodedCosmosAuthzGrantAuthorization } from './authz.js';
export type EncodedCosmosAuthzGenesisState = Encoded<'/cosmos.authz.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the authz module's genesis state.
 * @param a_authorizations - `authorization`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAuthzGenesisState: (a_authorizations?: Opt<Encoded<'/cosmos.authz.v1beta1.GrantAuthorization'>[]>) => EncodedCosmosAuthzGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Alias for: authorization -
 */
export type DecodedCosmosAuthzGenesisState = [
    a_authorization?: DecodedCosmosAuthzGrantAuthorization[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAuthzGenesisState}
 */
export declare const decodeCosmosAuthzGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosAuthzGenesisState;
/**
 * Destructures the fields of a {@link CosmosAuthzGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authorization -
 */
export declare const destructCosmosAuthzGenesisState: (g_struct: CosmosAuthzGenesisState) => [authorization?: CosmosAuthzGrantAuthorization[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTHZ_GENESIS_STATE = "/cosmos.authz.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.authz.v1beta1.GenesisState` - defines the authz module's genesis state.
 */
export type CosmosAuthzGenesisState = {
    authorization?: CosmosAuthzGrantAuthorization[] | undefined;
};
