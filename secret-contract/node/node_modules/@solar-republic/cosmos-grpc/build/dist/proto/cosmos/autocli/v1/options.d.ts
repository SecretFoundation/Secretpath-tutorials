import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosAutocliModuleOptions = Encoded<'/cosmos.autocli.v1.ModuleOptions'>;
export type EncodedCosmosAutocliServiceCommandDescriptor = Encoded<'/cosmos.autocli.v1.ServiceCommandDescriptor'>;
export type EncodedCosmosAutocliRpcCommandOptions = Encoded<'/cosmos.autocli.v1.RpcCommandOptions'>;
export type EncodedCosmosAutocliFlagOptions = Encoded<'/cosmos.autocli.v1.FlagOptions'>;
export type EncodedCosmosAutocliPositionalArgDescriptor = Encoded<'/cosmos.autocli.v1.PositionalArgDescriptor'>;
export type EncodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry = Encoded<'/cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry'>;
export type EncodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry = Encoded<'/cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry'>;
/**
 * Encodes a `ModuleOptions` protobuf message: describes the CLI options for a Cosmos SDK module.
 * @param g_tx - `tx`: describes the tx commands for the module.
 * @param g_query - `query`: describes the queries commands for the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliModuleOptions: (atu8_tx?: Opt<Encoded<'/cosmos.autocli.v1.ServiceCommandDescriptor'>>, atu8_query?: Opt<Encoded<'/cosmos.autocli.v1.ServiceCommandDescriptor'>>) => EncodedCosmosAutocliModuleOptions;
/**
 * Encodes a `ServiceCommandDescriptor` protobuf message: describes a CLI command based on a protobuf service.
 * @param s_service - `service`: the fully qualified name of the protobuf service to build the command from. It can be left empty if sub_commands are used instead which may be the case if a module provides multiple tx and/or query services.
 * @param a_rpc_command_options - `rpc_command_options`: options for commands generated from rpc methods. If no options are specified for a given rpc method on the service, a command will be generated for that method with the default options.
 * @param a_sub_commands - `sub_commands`: a map of optional sub-commands for this command based on different protobuf services. The map key is used as the name of the sub-command.
 * @param b_enhance_custom_command - `enhance_custom_command`: s specifies whether to skip the service when generating commands, if a custom command already exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from gRPC. otherwise when a custom command exists, no commands will be generated for the service.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliServiceCommandDescriptor: (s_service?: Opt<string>, a_rpc_command_options?: Opt<Encoded<'/cosmos.autocli.v1.RpcCommandOptions'>[]>, a_sub_commands?: Opt<Encoded<'/cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry'>[]>, b_enhance_custom_command?: Opt<boolean | 0 | 1>) => EncodedCosmosAutocliServiceCommandDescriptor;
/**
 * Encodes a `RpcCommandOptions` protobuf message: specifies options for commands generated from protobuf rpc methods.
 * @param s_rpc_method - `rpc_method`: short name of the protobuf rpc method that this command is generated from.
 * @param s_use - `use`: the one-line usage method. It also allows specifying an alternate name for the command as the first word of the usage text. By default the name of an rpc command is the kebab-case short name of the rpc method.
 * @param s_long - `long`: the long message shown in the 'help <this-command>' output.
 * @param s_short - `short`: the short description shown in the 'help' output.
 * @param s_example - `example`: examples of how to use the command.
 * @param a_alias - `alias`: an array of aliases that can be used instead of the first word in Use.
 * @param a_suggest_fors - `suggest_for`: an array of command names for which this command will be suggested - similar to aliases but only suggests.
 * @param s_deprecated - `deprecated`: defines, if this command is deprecated and should print this string when used.
 * @param s_version - `version`: defines the version for this command. If this value is non-empty and the command does not define a "version" flag, a "version" boolean flag will be added to the command and, if specified, will print content of the "Version" variable. A shorthand "v" flag will also be added if the command does not define one.
 * @param a_flag_options - `flag_options`: options for flags generated from rpc request fields. By default all request fields are configured as flags. They can also be configured as positional args instead using positional_args.
 * @param a_positional_args - `positional_args`: specifies positional arguments for the command.
 * @param b_skip - `skip`: specifies whether to skip this rpc method when generating commands.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliRpcCommandOptions: (s_rpc_method?: Opt<string>, s_use?: Opt<string>, s_long?: Opt<string>, s_short?: Opt<string>, s_example?: Opt<string>, a_alias?: Opt<string[]>, a_suggest_fors?: Opt<string[]>, s_deprecated?: Opt<string>, s_version?: Opt<string>, a_flag_options?: Opt<Encoded<'/cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry'>[]>, a_positional_args?: Opt<Encoded<'/cosmos.autocli.v1.PositionalArgDescriptor'>[]>, b_skip?: Opt<boolean | 0 | 1>) => EncodedCosmosAutocliRpcCommandOptions;
/**
 * Encodes a `FlagOptions` protobuf message: options for flags generated from rpc request fields. By default, all request fields are configured as flags based on the kebab-case name of the field. Fields can be turned into positional arguments instead by using RpcCommandOptions.positional_args.
 * @param s_name - `name`: an alternate name to use for the field flag.
 * @param s_shorthand - `shorthand`: a one-letter abbreviated flag.
 * @param s_usage - `usage`: the help message.
 * @param s_default_value - `default_value`: the default value as text.
 * @param s_deprecated - `deprecated`: the usage text to show if this flag is deprecated.
 * @param s_shorthand_deprecated - `shorthand_deprecated`: the usage text to show if the shorthand of this flag is deprecated.
 * @param b_hidden - `hidden`: hides the flag from help/usage text
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliFlagOptions: (s_name?: Opt<string>, s_shorthand?: Opt<string>, s_usage?: Opt<string>, s_default_value?: Opt<string>, s_deprecated?: Opt<string>, s_shorthand_deprecated?: Opt<string>, b_hidden?: Opt<boolean | 0 | 1>) => EncodedCosmosAutocliFlagOptions;
/**
 * Encodes a `PositionalArgDescriptor` protobuf message: describes a positional argument.
 * @param s_proto_field - `proto_field`: specifies the proto field to use as the positional arg. Any fields used as positional args will not have a flag generated.
 * @param b_varargs - `varargs`: makes a positional parameter a varargs parameter. This can only be applied to last positional parameter and the proto_field must a repeated field. Note: It is mutually exclusive with optional.
 * @param b_optional - `optional`: makes the last positional parameter optional. Note: It is mutually exclusive with varargs.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliPositionalArgDescriptor: (s_proto_field?: Opt<string>, b_varargs?: Opt<boolean | 0 | 1>, b_optional?: Opt<boolean | 0 | 1>) => EncodedCosmosAutocliPositionalArgDescriptor;
/**
 * Encodes a `FlagOptionsEntry` protobuf message:
 * @param s_key - `key`:
 * @param g_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliRpcCommandOptionsFlagOptionsEntry: (s_key?: Opt<string>, atu8_value?: Opt<Encoded<'/cosmos.autocli.v1.FlagOptions'>>) => EncodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry;
/**
 * Encodes a `SubCommandsEntry` protobuf message:
 * @param s_key - `key`:
 * @param g_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosAutocliServiceCommandDescriptorSubCommandsEntry: (s_key?: Opt<string>, atu8_value?: Opt<Encoded<'/cosmos.autocli.v1.ServiceCommandDescriptor'>>) => EncodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry;
/**
 * A decoded protobuf ModuleOptions message
 *
 * Tuple where:
 *   - 0: tx - describes the tx commands for the module.
 *   - 1: query - describes the queries commands for the module.
 */
export type DecodedCosmosAutocliModuleOptions = [
    a_tx?: DecodedCosmosAutocliServiceCommandDescriptor,
    a_query?: DecodedCosmosAutocliServiceCommandDescriptor
];
/**
 * Decodes a protobuf ModuleOptions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliModuleOptions}
 */
export declare const decodeCosmosAutocliModuleOptions: (atu8_payload: Uint8Array) => DecodedCosmosAutocliModuleOptions;
/**
 * A decoded protobuf ServiceCommandDescriptor message
 *
 * Tuple where:
 *   - 0: service - the fully qualified name of the protobuf service to build the command from. It can be left empty if sub_commands are used instead which may be the case if a module provides multiple tx and/or query services.
 *   - 1: rpc_command_options - options for commands generated from rpc methods. If no options are specified for a given rpc method on the service, a command will be generated for that method with the default options.
 *   - 2: sub_commands - a map of optional sub-commands for this command based on different protobuf services. The map key is used as the name of the sub-command.
 *   - 3: enhance_custom_command - s specifies whether to skip the service when generating commands, if a custom command already exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from gRPC. otherwise when a custom command exists, no commands will be generated for the service.
 */
export type DecodedCosmosAutocliServiceCommandDescriptor = [
    s_service?: string,
    a_rpc_command_options?: DecodedCosmosAutocliRpcCommandOptions[],
    a_sub_commands?: DecodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry[],
    b_enhance_custom_command?: 0 | 1
];
/**
 * Decodes a protobuf ServiceCommandDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliServiceCommandDescriptor}
 */
export declare const decodeCosmosAutocliServiceCommandDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosAutocliServiceCommandDescriptor;
/**
 * A decoded protobuf RpcCommandOptions message
 *
 * Tuple where:
 *   - 0: rpc_method - short name of the protobuf rpc method that this command is generated from.
 *   - 1: use - the one-line usage method. It also allows specifying an alternate name for the command as the first word of the usage text. By default the name of an rpc command is the kebab-case short name of the rpc method.
 *   - 2: long - the long message shown in the 'help <this-command>' output.
 *   - 3: short - the short description shown in the 'help' output.
 *   - 4: example - examples of how to use the command.
 *   - 5: alias - an array of aliases that can be used instead of the first word in Use.
 *   - 6: suggest_for - an array of command names for which this command will be suggested - similar to aliases but only suggests.
 *   - 7: deprecated - defines, if this command is deprecated and should print this string when used.
 *   - 8: version - defines the version for this command. If this value is non-empty and the command does not define a "version" flag, a "version" boolean flag will be added to the command and, if specified, will print content of the "Version" variable. A shorthand "v" flag will also be added if the command does not define one.
 *   - 9: flag_options - options for flags generated from rpc request fields. By default all request fields are configured as flags. They can also be configured as positional args instead using positional_args.
 *   - 10: positional_args - specifies positional arguments for the command.
 *   - 11: skip - specifies whether to skip this rpc method when generating commands.
 */
export type DecodedCosmosAutocliRpcCommandOptions = [
    s_rpc_method?: string,
    s_use?: string,
    s_long?: string,
    s_short?: string,
    s_example?: string,
    a_alias?: string[],
    a_suggest_fors?: string[],
    s_deprecated?: string,
    s_version?: string,
    a_flag_options?: DecodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry[],
    a_positional_args?: DecodedCosmosAutocliPositionalArgDescriptor[],
    b_skip?: 0 | 1
];
/**
 * Decodes a protobuf RpcCommandOptions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliRpcCommandOptions}
 */
export declare const decodeCosmosAutocliRpcCommandOptions: (atu8_payload: Uint8Array) => DecodedCosmosAutocliRpcCommandOptions;
/**
 * A decoded protobuf FlagOptions message
 *
 * Tuple where:
 *   - 0: name - an alternate name to use for the field flag.
 *   - 1: shorthand - a one-letter abbreviated flag.
 *   - 2: usage - the help message.
 *   - 3: default_value - the default value as text.
 *   - 5: deprecated - the usage text to show if this flag is deprecated.
 *   - 6: shorthand_deprecated - the usage text to show if the shorthand of this flag is deprecated.
 *   - 7: hidden - hides the flag from help/usage text
 */
export type DecodedCosmosAutocliFlagOptions = [
    s_name?: string,
    s_shorthand?: string,
    s_usage?: string,
    s_default_value?: string,
    w_0?: undefined,
    s_deprecated?: string,
    s_shorthand_deprecated?: string,
    b_hidden?: 0 | 1
];
/**
 * Decodes a protobuf FlagOptions message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosAutocliFlagOptions}
 */
export declare const decodeCosmosAutocliFlagOptions: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosAutocliFlagOptions;
/**
 * A decoded protobuf PositionalArgDescriptor message
 *
 * Tuple where:
 *   - 0: proto_field - specifies the proto field to use as the positional arg. Any fields used as positional args will not have a flag generated.
 *   - 1: varargs - makes a positional parameter a varargs parameter. This can only be applied to last positional parameter and the proto_field must a repeated field. Note: It is mutually exclusive with optional.
 *   - 2: optional - makes the last positional parameter optional. Note: It is mutually exclusive with varargs.
 */
export type DecodedCosmosAutocliPositionalArgDescriptor = [
    s_proto_field?: string,
    b_varargs?: 0 | 1,
    b_optional?: 0 | 1
];
/**
 * Decodes a protobuf PositionalArgDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliPositionalArgDescriptor}
 */
export declare const decodeCosmosAutocliPositionalArgDescriptor: (atu8_payload: Uint8Array) => DecodedCosmosAutocliPositionalArgDescriptor;
/**
 * A decoded protobuf FlagOptionsEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry = [
    s_key?: string,
    a_value?: DecodedCosmosAutocliFlagOptions
];
/**
 * Decodes a protobuf FlagOptionsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry}
 */
export declare const decodeCosmosAutocliRpcCommandOptionsFlagOptionsEntry: (atu8_payload: Uint8Array) => DecodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry;
/**
 * A decoded protobuf SubCommandsEntry message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry = [
    s_key?: string,
    a_value?: DecodedCosmosAutocliServiceCommandDescriptor
];
/**
 * Decodes a protobuf SubCommandsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry}
 */
export declare const decodeCosmosAutocliServiceCommandDescriptorSubCommandsEntry: (atu8_payload: Uint8Array) => DecodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry;
/**
 * Destructures the fields of a {@link CosmosAutocliModuleOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - describes the tx commands for the module.
 *   - 1: query - describes the queries commands for the module.
 */
export declare const destructCosmosAutocliModuleOptions: (g_struct: CosmosAutocliModuleOptions) => [tx?: CosmosAutocliServiceCommandDescriptor, query?: CosmosAutocliServiceCommandDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_MODULE_OPTIONS = "/cosmos.autocli.v1.ModuleOptions";
/**
 * JSON serialization of `cosmos.autocli.v1.ModuleOptions` - describes the CLI options for a Cosmos SDK module.
 */
export type CosmosAutocliModuleOptions = {
    tx?: CosmosAutocliServiceCommandDescriptor | undefined;
    query?: CosmosAutocliServiceCommandDescriptor | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAutocliServiceCommandDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: service - the fully qualified name of the protobuf service to build the command from. It can be left empty if sub_commands are used instead which may be the case if a module provides multiple tx and/or query services.
 *   - 1: rpc_command_options - options for commands generated from rpc methods. If no options are specified for a given rpc method on the service, a command will be generated for that method with the default options.
 *   - 2: sub_commands - a map of optional sub-commands for this command based on different protobuf services. The map key is used as the name of the sub-command.
 *   - 3: enhance_custom_command - s specifies whether to skip the service when generating commands, if a custom command already exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from gRPC. otherwise when a custom command exists, no commands will be generated for the service.
 */
export declare const destructCosmosAutocliServiceCommandDescriptor: (g_struct: CosmosAutocliServiceCommandDescriptor) => [service?: string, rpc_command_options?: CosmosAutocliRpcCommandOptions[], sub_commands?: CosmosAutocliServiceCommandDescriptorSubCommandsEntry[], enhance_custom_command?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_SERVICE_COMMAND_DESCRIPTOR = "/cosmos.autocli.v1.ServiceCommandDescriptor";
/**
 * JSON serialization of `cosmos.autocli.v1.ServiceCommandDescriptor` - describes a CLI command based on a protobuf service.
 */
export type CosmosAutocliServiceCommandDescriptor = {
    service?: string | undefined;
    rpc_command_options?: CosmosAutocliRpcCommandOptions[] | undefined;
    sub_commands?: CosmosAutocliServiceCommandDescriptorSubCommandsEntry[] | undefined;
    enhance_custom_command?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAutocliRpcCommandOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rpc_method - short name of the protobuf rpc method that this command is generated from.
 *   - 1: use - the one-line usage method. It also allows specifying an alternate name for the command as the first word of the usage text. By default the name of an rpc command is the kebab-case short name of the rpc method.
 *   - 2: long - the long message shown in the 'help <this-command>' output.
 *   - 3: short - the short description shown in the 'help' output.
 *   - 4: example - examples of how to use the command.
 *   - 5: alias - an array of aliases that can be used instead of the first word in Use.
 *   - 6: suggest_for - an array of command names for which this command will be suggested - similar to aliases but only suggests.
 *   - 7: deprecated - defines, if this command is deprecated and should print this string when used.
 *   - 8: version - defines the version for this command. If this value is non-empty and the command does not define a "version" flag, a "version" boolean flag will be added to the command and, if specified, will print content of the "Version" variable. A shorthand "v" flag will also be added if the command does not define one.
 *   - 9: flag_options - options for flags generated from rpc request fields. By default all request fields are configured as flags. They can also be configured as positional args instead using positional_args.
 *   - 10: positional_args - specifies positional arguments for the command.
 *   - 11: skip - specifies whether to skip this rpc method when generating commands.
 */
export declare const destructCosmosAutocliRpcCommandOptions: (g_struct: CosmosAutocliRpcCommandOptions) => [rpc_method?: string, use?: string, long?: string, short?: string, example?: string, alias?: string[], suggest_for?: string[], deprecated?: string, version?: string, flag_options?: CosmosAutocliRpcCommandOptionsFlagOptionsEntry[], positional_args?: CosmosAutocliPositionalArgDescriptor[], skip?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_RPC_COMMAND_OPTIONS = "/cosmos.autocli.v1.RpcCommandOptions";
/**
 * JSON serialization of `cosmos.autocli.v1.RpcCommandOptions` - specifies options for commands generated from protobuf rpc methods.
 */
export type CosmosAutocliRpcCommandOptions = {
    rpc_method?: string | undefined;
    use?: string | undefined;
    long?: string | undefined;
    short?: string | undefined;
    example?: string | undefined;
    alias?: string[] | undefined;
    suggest_for?: string[] | undefined;
    deprecated?: string | undefined;
    version?: string | undefined;
    flag_options?: CosmosAutocliRpcCommandOptionsFlagOptionsEntry[] | undefined;
    positional_args?: CosmosAutocliPositionalArgDescriptor[] | undefined;
    skip?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAutocliRpcCommandOptionsFlagOptionsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructCosmosAutocliRpcCommandOptionsFlagOptionsEntry: (g_struct: CosmosAutocliRpcCommandOptionsFlagOptionsEntry) => [key?: string, value?: CosmosAutocliFlagOptions];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_RPC_COMMAND_OPTIONS_FLAG_OPTIONS_ENTRY = "/cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry";
/**
 * JSON serialization of `cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry` -
 */
export type CosmosAutocliRpcCommandOptionsFlagOptionsEntry = {
    key?: string | undefined;
    value?: CosmosAutocliFlagOptions | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAutocliFlagOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - an alternate name to use for the field flag.
 *   - 1: shorthand - a one-letter abbreviated flag.
 *   - 2: usage - the help message.
 *   - 3: default_value - the default value as text.
 *   - 5: deprecated - the usage text to show if this flag is deprecated.
 *   - 6: shorthand_deprecated - the usage text to show if the shorthand of this flag is deprecated.
 *   - 7: hidden - hides the flag from help/usage text
 */
export declare const destructCosmosAutocliFlagOptions: (g_struct: CosmosAutocliFlagOptions) => [name?: string, shorthand?: string, usage?: string, default_value?: string, EMPTY?: void, deprecated?: string, shorthand_deprecated?: string, hidden?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_FLAG_OPTIONS = "/cosmos.autocli.v1.FlagOptions";
/**
 * JSON serialization of `cosmos.autocli.v1.FlagOptions` - options for flags generated from rpc request fields. By default, all request fields are configured as flags based on the kebab-case name of the field. Fields can be turned into positional arguments instead by using RpcCommandOptions.positional_args.
 */
export type CosmosAutocliFlagOptions = {
    name?: string | undefined;
    shorthand?: string | undefined;
    usage?: string | undefined;
    default_value?: string | undefined;
    deprecated?: string | undefined;
    shorthand_deprecated?: string | undefined;
    hidden?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAutocliPositionalArgDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proto_field - specifies the proto field to use as the positional arg. Any fields used as positional args will not have a flag generated.
 *   - 1: varargs - makes a positional parameter a varargs parameter. This can only be applied to last positional parameter and the proto_field must a repeated field. Note: It is mutually exclusive with optional.
 *   - 2: optional - makes the last positional parameter optional. Note: It is mutually exclusive with varargs.
 */
export declare const destructCosmosAutocliPositionalArgDescriptor: (g_struct: CosmosAutocliPositionalArgDescriptor) => [proto_field?: string, varargs?: boolean, optional?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_POSITIONAL_ARG_DESCRIPTOR = "/cosmos.autocli.v1.PositionalArgDescriptor";
/**
 * JSON serialization of `cosmos.autocli.v1.PositionalArgDescriptor` - describes a positional argument.
 */
export type CosmosAutocliPositionalArgDescriptor = {
    proto_field?: string | undefined;
    varargs?: boolean | undefined;
    optional?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosAutocliServiceCommandDescriptorSubCommandsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructCosmosAutocliServiceCommandDescriptorSubCommandsEntry: (g_struct: CosmosAutocliServiceCommandDescriptorSubCommandsEntry) => [key?: string, value?: CosmosAutocliServiceCommandDescriptor];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_SERVICE_COMMAND_DESCRIPTOR_SUB_COMMANDS_ENTRY = "/cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry";
/**
 * JSON serialization of `cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry` -
 */
export type CosmosAutocliServiceCommandDescriptorSubCommandsEntry = {
    key?: string | undefined;
    value?: CosmosAutocliServiceCommandDescriptor | undefined;
};
