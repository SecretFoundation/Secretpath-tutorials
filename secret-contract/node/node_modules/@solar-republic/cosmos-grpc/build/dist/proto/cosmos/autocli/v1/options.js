/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `ModuleOptions` protobuf message: describes the CLI options for a Cosmos SDK module.
 * @param g_tx - `tx`: describes the tx commands for the module.
 * @param g_query - `query`: describes the queries commands for the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliModuleOptions = (atu8_tx, atu8_query) => Protobuf() // ...
    .b(atu8_tx) // ServiceCommandDescriptor tx = 1
    .b(atu8_query) // ServiceCommandDescriptor query = 2
    .o;
/**
 * Encodes a `ServiceCommandDescriptor` protobuf message: describes a CLI command based on a protobuf service.
 * @param s_service - `service`: the fully qualified name of the protobuf service to build the command from. It can be left empty if sub_commands are used instead which may be the case if a module provides multiple tx and/or query services.
 * @param a_rpc_command_options - `rpc_command_options`: options for commands generated from rpc methods. If no options are specified for a given rpc method on the service, a command will be generated for that method with the default options.
 * @param a_sub_commands - `sub_commands`: a map of optional sub-commands for this command based on different protobuf services. The map key is used as the name of the sub-command.
 * @param b_enhance_custom_command - `enhance_custom_command`: s specifies whether to skip the service when generating commands, if a custom command already exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from gRPC. otherwise when a custom command exists, no commands will be generated for the service.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliServiceCommandDescriptor = (s_service, a_rpc_command_options, a_sub_commands, b_enhance_custom_command) => Protobuf() // ...
    .s(s_service) // string service = 1
    .B(a_rpc_command_options) // RpcCommandOptions[] rpc_command_options = 2
    .B(a_sub_commands) // SubCommandsEntry[] sub_commands = 3
    .v(b_enhance_custom_command) // boolean enhance_custom_command = 4
    .o;
/**
 * Encodes a `RpcCommandOptions` protobuf message: specifies options for commands generated from protobuf rpc methods.
 * @param s_rpc_method - `rpc_method`: short name of the protobuf rpc method that this command is generated from.
 * @param s_use - `use`: the one-line usage method. It also allows specifying an alternate name for the command as the first word of the usage text. By default the name of an rpc command is the kebab-case short name of the rpc method.
 * @param s_long - `long`: the long message shown in the 'help <this-command>' output.
 * @param s_short - `short`: the short description shown in the 'help' output.
 * @param s_example - `example`: examples of how to use the command.
 * @param a_alias - `alias`: an array of aliases that can be used instead of the first word in Use.
 * @param a_suggest_fors - `suggest_for`: an array of command names for which this command will be suggested - similar to aliases but only suggests.
 * @param s_deprecated - `deprecated`: defines, if this command is deprecated and should print this string when used.
 * @param s_version - `version`: defines the version for this command. If this value is non-empty and the command does not define a "version" flag, a "version" boolean flag will be added to the command and, if specified, will print content of the "Version" variable. A shorthand "v" flag will also be added if the command does not define one.
 * @param a_flag_options - `flag_options`: options for flags generated from rpc request fields. By default all request fields are configured as flags. They can also be configured as positional args instead using positional_args.
 * @param a_positional_args - `positional_args`: specifies positional arguments for the command.
 * @param b_skip - `skip`: specifies whether to skip this rpc method when generating commands.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliRpcCommandOptions = (s_rpc_method, s_use, s_long, s_short, s_example, a_alias, a_suggest_fors, s_deprecated, s_version, a_flag_options, a_positional_args, b_skip) => Protobuf() // ...
    .s(s_rpc_method) // string rpc_method = 1
    .s(s_use) // string use = 2
    .s(s_long) // string long = 3
    .s(s_short) // string short = 4
    .s(s_example) // string example = 5
    .S(a_alias) // string[] alias = 6
    .S(a_suggest_fors) // string[] suggest_for = 7
    .s(s_deprecated) // string deprecated = 8
    .s(s_version) // string version = 9
    .B(a_flag_options) // FlagOptionsEntry[] flag_options = 10
    .B(a_positional_args) // PositionalArgDescriptor[] positional_args = 11
    .v(b_skip) // boolean skip = 12
    .o;
/**
 * Encodes a `FlagOptions` protobuf message: options for flags generated from rpc request fields. By default, all request fields are configured as flags based on the kebab-case name of the field. Fields can be turned into positional arguments instead by using RpcCommandOptions.positional_args.
 * @param s_name - `name`: an alternate name to use for the field flag.
 * @param s_shorthand - `shorthand`: a one-letter abbreviated flag.
 * @param s_usage - `usage`: the help message.
 * @param s_default_value - `default_value`: the default value as text.
 * @param s_deprecated - `deprecated`: the usage text to show if this flag is deprecated.
 * @param s_shorthand_deprecated - `shorthand_deprecated`: the usage text to show if the shorthand of this flag is deprecated.
 * @param b_hidden - `hidden`: hides the flag from help/usage text
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliFlagOptions = (s_name, s_shorthand, s_usage, s_default_value, s_deprecated, s_shorthand_deprecated, b_hidden) => Protobuf() // ...
    .s(s_name) // string name = 1
    .s(s_shorthand) // string shorthand = 2
    .s(s_usage) // string usage = 3
    .s(s_default_value) // string default_value = 4
    .s(s_deprecated, 6) // string deprecated = 6
    .s(s_shorthand_deprecated, 7) // string shorthand_deprecated = 7
    .v(b_hidden, 8) // boolean hidden = 8
    .o;
/**
 * Encodes a `PositionalArgDescriptor` protobuf message: describes a positional argument.
 * @param s_proto_field - `proto_field`: specifies the proto field to use as the positional arg. Any fields used as positional args will not have a flag generated.
 * @param b_varargs - `varargs`: makes a positional parameter a varargs parameter. This can only be applied to last positional parameter and the proto_field must a repeated field. Note: It is mutually exclusive with optional.
 * @param b_optional - `optional`: makes the last positional parameter optional. Note: It is mutually exclusive with varargs.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliPositionalArgDescriptor = (s_proto_field, b_varargs, b_optional) => Protobuf() // ...
    .s(s_proto_field) // string proto_field = 1
    .v(b_varargs) // boolean varargs = 2
    .v(b_optional) // boolean optional = 3
    .o;
/**
 * Encodes a `FlagOptionsEntry` protobuf message:
 * @param s_key - `key`:
 * @param g_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliRpcCommandOptionsFlagOptionsEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // FlagOptions value = 2
    .o;
/**
 * Encodes a `SubCommandsEntry` protobuf message:
 * @param s_key - `key`:
 * @param g_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosAutocliServiceCommandDescriptorSubCommandsEntry = (s_key, atu8_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .b(atu8_value) // ServiceCommandDescriptor value = 2
    .o;
/**
 * Decodes a protobuf ModuleOptions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliModuleOptions}
 */
export const decodeCosmosAutocliModuleOptions = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosAutocliServiceCommandDescriptor, decodeCosmosAutocliServiceCommandDescriptor]);
/**
 * Decodes a protobuf ServiceCommandDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliServiceCommandDescriptor}
 */
export const decodeCosmosAutocliServiceCommandDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 0, 1], [0, decodeCosmosAutocliRpcCommandOptions, decodeCosmosAutocliServiceCommandDescriptorSubCommandsEntry]);
/**
 * Decodes a protobuf RpcCommandOptions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliRpcCommandOptions}
 */
export const decodeCosmosAutocliRpcCommandOptions = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5, 4, 4, 5, 5, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, decodeCosmosAutocliRpcCommandOptionsFlagOptionsEntry, decodeCosmosAutocliPositionalArgDescriptor]);
/**
 * Decodes a protobuf FlagOptions message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosAutocliFlagOptions}
 */
export const decodeCosmosAutocliFlagOptions = ((atu8_payload, [s_name, s_shorthand, s_usage, s_default_value, , s_deprecated, s_shorthand_deprecated, b_hidden] = decode_protobuf(atu8_payload, [5, 5, 5, 5, 0, 5, 5, 1])) => [s_name, s_shorthand, s_usage, s_default_value, __UNDEFINED, s_deprecated, s_shorthand_deprecated, b_hidden]);
/**
 * Decodes a protobuf PositionalArgDescriptor message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliPositionalArgDescriptor}
 */
export const decodeCosmosAutocliPositionalArgDescriptor = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1]);
/**
 * Decodes a protobuf FlagOptionsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliRpcCommandOptionsFlagOptionsEntry}
 */
export const decodeCosmosAutocliRpcCommandOptionsFlagOptionsEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosAutocliFlagOptions]);
/**
 * Decodes a protobuf SubCommandsEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosAutocliServiceCommandDescriptorSubCommandsEntry}
 */
export const decodeCosmosAutocliServiceCommandDescriptorSubCommandsEntry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosAutocliServiceCommandDescriptor]);
/**
 * Destructures the fields of a {@link CosmosAutocliModuleOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx - describes the tx commands for the module.
 *   - 1: query - describes the queries commands for the module.
 */
export const destructCosmosAutocliModuleOptions = (g_struct) => [g_struct.tx, g_struct.query];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_MODULE_OPTIONS = '/cosmos.autocli.v1.ModuleOptions';
/**
 * Destructures the fields of a {@link CosmosAutocliServiceCommandDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: service - the fully qualified name of the protobuf service to build the command from. It can be left empty if sub_commands are used instead which may be the case if a module provides multiple tx and/or query services.
 *   - 1: rpc_command_options - options for commands generated from rpc methods. If no options are specified for a given rpc method on the service, a command will be generated for that method with the default options.
 *   - 2: sub_commands - a map of optional sub-commands for this command based on different protobuf services. The map key is used as the name of the sub-command.
 *   - 3: enhance_custom_command - s specifies whether to skip the service when generating commands, if a custom command already exists, or enhance the existing command. If set to true, the custom command will be enhanced with the services from gRPC. otherwise when a custom command exists, no commands will be generated for the service.
 */
export const destructCosmosAutocliServiceCommandDescriptor = (g_struct) => [g_struct.service, g_struct.rpc_command_options, g_struct.sub_commands, g_struct.enhance_custom_command];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_SERVICE_COMMAND_DESCRIPTOR = '/cosmos.autocli.v1.ServiceCommandDescriptor';
/**
 * Destructures the fields of a {@link CosmosAutocliRpcCommandOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rpc_method - short name of the protobuf rpc method that this command is generated from.
 *   - 1: use - the one-line usage method. It also allows specifying an alternate name for the command as the first word of the usage text. By default the name of an rpc command is the kebab-case short name of the rpc method.
 *   - 2: long - the long message shown in the 'help <this-command>' output.
 *   - 3: short - the short description shown in the 'help' output.
 *   - 4: example - examples of how to use the command.
 *   - 5: alias - an array of aliases that can be used instead of the first word in Use.
 *   - 6: suggest_for - an array of command names for which this command will be suggested - similar to aliases but only suggests.
 *   - 7: deprecated - defines, if this command is deprecated and should print this string when used.
 *   - 8: version - defines the version for this command. If this value is non-empty and the command does not define a "version" flag, a "version" boolean flag will be added to the command and, if specified, will print content of the "Version" variable. A shorthand "v" flag will also be added if the command does not define one.
 *   - 9: flag_options - options for flags generated from rpc request fields. By default all request fields are configured as flags. They can also be configured as positional args instead using positional_args.
 *   - 10: positional_args - specifies positional arguments for the command.
 *   - 11: skip - specifies whether to skip this rpc method when generating commands.
 */
export const destructCosmosAutocliRpcCommandOptions = (g_struct) => [g_struct.rpc_method, g_struct.use, g_struct.long, g_struct.short, g_struct.example, g_struct.alias, g_struct.suggest_for, g_struct.deprecated, g_struct.version, g_struct.flag_options, g_struct.positional_args, g_struct.skip];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_RPC_COMMAND_OPTIONS = '/cosmos.autocli.v1.RpcCommandOptions';
/**
 * Destructures the fields of a {@link CosmosAutocliRpcCommandOptionsFlagOptionsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructCosmosAutocliRpcCommandOptionsFlagOptionsEntry = (g_struct) => [g_struct.key, g_struct.value];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_RPC_COMMAND_OPTIONS_FLAG_OPTIONS_ENTRY = '/cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry';
/**
 * Destructures the fields of a {@link CosmosAutocliFlagOptions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - an alternate name to use for the field flag.
 *   - 1: shorthand - a one-letter abbreviated flag.
 *   - 2: usage - the help message.
 *   - 3: default_value - the default value as text.
 *   - 5: deprecated - the usage text to show if this flag is deprecated.
 *   - 6: shorthand_deprecated - the usage text to show if the shorthand of this flag is deprecated.
 *   - 7: hidden - hides the flag from help/usage text
 */
export const destructCosmosAutocliFlagOptions = (g_struct) => [g_struct.name, g_struct.shorthand, g_struct.usage, g_struct.default_value, __UNDEFINED, g_struct.deprecated, g_struct.shorthand_deprecated, g_struct.hidden];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_FLAG_OPTIONS = '/cosmos.autocli.v1.FlagOptions';
/**
 * Destructures the fields of a {@link CosmosAutocliPositionalArgDescriptor} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proto_field - specifies the proto field to use as the positional arg. Any fields used as positional args will not have a flag generated.
 *   - 1: varargs - makes a positional parameter a varargs parameter. This can only be applied to last positional parameter and the proto_field must a repeated field. Note: It is mutually exclusive with optional.
 *   - 2: optional - makes the last positional parameter optional. Note: It is mutually exclusive with varargs.
 */
export const destructCosmosAutocliPositionalArgDescriptor = (g_struct) => [g_struct.proto_field, g_struct.varargs, g_struct.optional];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_POSITIONAL_ARG_DESCRIPTOR = '/cosmos.autocli.v1.PositionalArgDescriptor';
/**
 * Destructures the fields of a {@link CosmosAutocliServiceCommandDescriptorSubCommandsEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructCosmosAutocliServiceCommandDescriptorSubCommandsEntry = (g_struct) => [g_struct.key, g_struct.value];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_AUTOCLI_SERVICE_COMMAND_DESCRIPTOR_SUB_COMMANDS_ENTRY = '/cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry';
//# sourceMappingURL=options.js.map