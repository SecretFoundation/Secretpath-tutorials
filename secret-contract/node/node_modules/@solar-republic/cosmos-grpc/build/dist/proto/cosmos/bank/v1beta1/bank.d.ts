import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type AnyCosmosBankSupply = Encoded<'cosmos.bank.v1beta1.SupplyI'>;
export type EncodedCosmosBankParams = Encoded<'/cosmos.bank.v1beta1.Params'>;
export type EncodedCosmosBankSendEnabled = Encoded<'/cosmos.bank.v1beta1.SendEnabled'>;
export type EncodedCosmosBankInput = Encoded<'/cosmos.bank.v1beta1.Input'>;
export type EncodedCosmosBankOutput = Encoded<'/cosmos.bank.v1beta1.Output'>;
export type EncodedCosmosBankSupply = Encoded<'/cosmos.bank.v1beta1.Supply' | 'cosmos.bank.v1beta1.SupplyI'>;
export type EncodedCosmosBankDenomUnit = Encoded<'/cosmos.bank.v1beta1.DenomUnit'>;
export type EncodedCosmosBankMetadata = Encoded<'/cosmos.bank.v1beta1.Metadata'>;
/**
 * Encodes a `Supply` protobuf message wrapped in the `Any` container: represents a struct that passively keeps track of the total supply amounts in the network. This message is deprecated now that supply is indexed by denom.
 * @param a_totals - `total`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anySupply: (a_totals?: Opt<SlimCoin[]>) => AnyCosmosBankSupply;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the bank module.
 * @param a_send_enableds - `send_enabled`: Deprecated: Use of SendEnabled in params is deprecated. For genesis, use the newly added send_enabled field in the genesis object. Storage, lookup, and manipulation of this information is now in the keeper. As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
 * @param b_default_send_enabled - `default_send_enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankParams: (a_send_enableds?: Opt<Encoded<'/cosmos.bank.v1beta1.SendEnabled'>[]>, b_default_send_enabled?: Opt<boolean | 0 | 1>) => EncodedCosmosBankParams;
/**
 * Encodes a `SendEnabled` protobuf message: maps coin denom to a send_enabled status (whether a denom is sendable).
 * @param s_denom - `denom`:
 * @param b_enabled - `enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankSendEnabled: (s_denom?: Opt<string>, b_enabled?: Opt<boolean | 0 | 1>) => EncodedCosmosBankSendEnabled;
/**
 * Encodes a `Input` protobuf message: models transaction input.
 * @param sa_address - `address`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankInput: (sa_address?: Opt<WeakAccountAddr>, a_coins?: Opt<SlimCoin[]>) => EncodedCosmosBankInput;
/**
 * Encodes a `Output` protobuf message: models transaction outputs.
 * @param sa_address - `address`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankOutput: (sa_address?: Opt<WeakAccountAddr>, a_coins?: Opt<SlimCoin[]>) => EncodedCosmosBankOutput;
/**
 * Encodes a `Supply` protobuf message: represents a struct that passively keeps track of the total supply amounts in the network. This message is deprecated now that supply is indexed by denom.
 * @param a_totals - `total`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankSupply: (a_totals?: Opt<SlimCoin[]>) => EncodedCosmosBankSupply;
/**
 * Encodes a `DenomUnit` protobuf message: represents a struct that describes a given denomination unit of the basic token.
 * @param s_denom - `denom`: represents the string name of the given denom unit (e.g uatom).
 * @param n_exponent - `exponent`: represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).
 * @param a_aliases - `aliases`: a list of string aliases for the given denom
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankDenomUnit: (s_denom?: Opt<string>, n_exponent?: Opt<number>, a_aliases?: Opt<string[]>) => EncodedCosmosBankDenomUnit;
/**
 * Encodes a `Metadata` protobuf message: represents a struct that describes a basic token.
 * @param s_description - `description`:
 * @param a_denom_units - `denom_units`: represents the list of DenomUnit's for a given coin
 * @param s_base - `base`: represents the base denom (should be the DenomUnit with exponent = 0).
 * @param s_display - `display`: indicates the suggested denom that should be displayed in clients.
 * @param s_name - `name`: defines the name of the token (eg: Cosmos Atom) Since: cosmos-sdk 0.43
 * @param s_symbol - `symbol`: the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display. Since: cosmos-sdk 0.43
 * @param s_uri - `uri`: URI to a document (on or off-chain) that contains additional information. Optional. Since: cosmos-sdk 0.46
 * @param s_uri_hash - `uri_hash`: URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankMetadata: (s_description?: Opt<string>, a_denom_units?: Opt<Encoded<'/cosmos.bank.v1beta1.DenomUnit'>[]>, s_base?: Opt<string>, s_display?: Opt<string>, s_name?: Opt<string>, s_symbol?: Opt<string>, s_uri?: Opt<string>, s_uri_hash?: Opt<string>) => EncodedCosmosBankMetadata;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: send_enabled - Deprecated: Use of SendEnabled in params is deprecated. For genesis, use the newly added send_enabled field in the genesis object. Storage, lookup, and manipulation of this information is now in the keeper. As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
 *   - 1: default_send_enabled -
 */
export type DecodedCosmosBankParams = [
    a_send_enabled?: DecodedCosmosBankSendEnabled[],
    b_default_send_enabled?: 0 | 1
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankParams}
 */
export declare const decodeCosmosBankParams: (atu8_payload: Uint8Array) => DecodedCosmosBankParams;
/**
 * A decoded protobuf SendEnabled message
 *
 * Tuple where:
 *   - 0: denom -
 *   - 1: enabled -
 */
export type DecodedCosmosBankSendEnabled = [
    s_denom?: string,
    b_enabled?: 0 | 1
];
/**
 * Decodes a protobuf SendEnabled message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankSendEnabled}
 */
export declare const decodeCosmosBankSendEnabled: (atu8_payload: Uint8Array) => DecodedCosmosBankSendEnabled;
/**
 * A decoded protobuf Input message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: coins -
 */
export type DecodedCosmosBankInput = [
    sa_address?: CwAccountAddr,
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Input message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankInput}
 */
export declare const decodeCosmosBankInput: (atu8_payload: Uint8Array) => DecodedCosmosBankInput;
/**
 * A decoded protobuf Output message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: coins -
 */
export type DecodedCosmosBankOutput = [
    sa_address?: CwAccountAddr,
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Output message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankOutput}
 */
export declare const decodeCosmosBankOutput: (atu8_payload: Uint8Array) => DecodedCosmosBankOutput;
/**
 * A decoded protobuf Supply message
 *
 * Alias for: total -
 */
export type DecodedCosmosBankSupply = [
    a_total?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Supply message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankSupply}
 */
export declare const decodeCosmosBankSupply: (atu8_payload: Uint8Array) => DecodedCosmosBankSupply;
/**
 * A decoded protobuf DenomUnit message
 *
 * Tuple where:
 *   - 0: denom - represents the string name of the given denom unit (e.g uatom).
 *   - 1: exponent - represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).
 *   - 2: aliases - a list of string aliases for the given denom
 */
export type DecodedCosmosBankDenomUnit = [
    s_denom?: string,
    n_exponent?: number,
    a_aliases?: string[]
];
/**
 * Decodes a protobuf DenomUnit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankDenomUnit}
 */
export declare const decodeCosmosBankDenomUnit: (atu8_payload: Uint8Array) => DecodedCosmosBankDenomUnit;
/**
 * A decoded protobuf Metadata message
 *
 * Tuple where:
 *   - 0: description -
 *   - 1: denom_units - represents the list of DenomUnit's for a given coin
 *   - 2: base - represents the base denom (should be the DenomUnit with exponent = 0).
 *   - 3: display - indicates the suggested denom that should be displayed in clients.
 *   - 4: name - defines the name of the token (eg: Cosmos Atom) Since: cosmos-sdk 0.43
 *   - 5: symbol - the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display. Since: cosmos-sdk 0.43
 *   - 6: uri - URI to a document (on or off-chain) that contains additional information. Optional. Since: cosmos-sdk 0.46
 *   - 7: uri_hash - URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional. Since: cosmos-sdk 0.46
 */
export type DecodedCosmosBankMetadata = [
    s_description?: string,
    a_denom_units?: DecodedCosmosBankDenomUnit[],
    s_base?: string,
    s_display?: string,
    s_name?: string,
    s_symbol?: string,
    s_uri?: string,
    s_uri_hash?: string
];
/**
 * Decodes a protobuf Metadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMetadata}
 */
export declare const decodeCosmosBankMetadata: (atu8_payload: Uint8Array) => DecodedCosmosBankMetadata;
/**
 * Destructures the fields of a {@link CosmosBankInput} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: coins -
 */
export declare const destructCosmosBankInput: (g_struct: CosmosBankInput) => [address?: CwAccountAddr, coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_INPUT = "/cosmos.bank.v1beta1.Input";
/**
 * JSON serialization of `cosmos.bank.v1beta1.Input` - models transaction input.
 */
export type CosmosBankInput = {
    address?: CwAccountAddr | undefined;
    coins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankOutput} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: coins -
 */
export declare const destructCosmosBankOutput: (g_struct: CosmosBankOutput) => [address?: CwAccountAddr, coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_OUTPUT = "/cosmos.bank.v1beta1.Output";
/**
 * JSON serialization of `cosmos.bank.v1beta1.Output` - models transaction outputs.
 */
export type CosmosBankOutput = {
    address?: CwAccountAddr | undefined;
    coins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: send_enabled - Deprecated: Use of SendEnabled in params is deprecated. For genesis, use the newly added send_enabled field in the genesis object. Storage, lookup, and manipulation of this information is now in the keeper. As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
 *   - 1: default_send_enabled -
 */
export declare const destructCosmosBankParams: (g_struct: CosmosBankParams) => [send_enabled?: CosmosBankSendEnabled[], default_send_enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_PARAMS = "/cosmos.bank.v1beta1.Params";
/**
 * JSON serialization of `cosmos.bank.v1beta1.Params` - defines the parameters for the bank module.
 */
export type CosmosBankParams = {
    send_enabled?: CosmosBankSendEnabled[] | undefined;
    default_send_enabled?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankSendEnabled} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: enabled -
 */
export declare const destructCosmosBankSendEnabled: (g_struct: CosmosBankSendEnabled) => [denom?: string, enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_SEND_ENABLED = "/cosmos.bank.v1beta1.SendEnabled";
/**
 * JSON serialization of `cosmos.bank.v1beta1.SendEnabled` - maps coin denom to a send_enabled status (whether a denom is sendable).
 */
export type CosmosBankSendEnabled = {
    denom?: string | undefined;
    enabled?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankSupply} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total -
 */
export declare const destructCosmosBankSupply: (g_struct: CosmosBankSupply) => [total?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_SUPPLY = "/cosmos.bank.v1beta1.Supply";
/**
 * JSON serialization of `cosmos.bank.v1beta1.Supply` - represents a struct that passively keeps track of the total supply amounts in the network. This message is deprecated now that supply is indexed by denom.
 */
export type CosmosBankSupply = {
    total?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankDenomUnit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - represents the string name of the given denom unit (e.g uatom).
 *   - 1: exponent - represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).
 *   - 2: aliases - a list of string aliases for the given denom
 */
export declare const destructCosmosBankDenomUnit: (g_struct: CosmosBankDenomUnit) => [denom?: string, exponent?: number, aliases?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_DENOM_UNIT = "/cosmos.bank.v1beta1.DenomUnit";
/**
 * JSON serialization of `cosmos.bank.v1beta1.DenomUnit` - represents a struct that describes a given denomination unit of the basic token.
 */
export type CosmosBankDenomUnit = {
    denom?: string | undefined;
    exponent?: number | undefined;
    aliases?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: description -
 *   - 1: denom_units - represents the list of DenomUnit's for a given coin
 *   - 2: base - represents the base denom (should be the DenomUnit with exponent = 0).
 *   - 3: display - indicates the suggested denom that should be displayed in clients.
 *   - 4: name - defines the name of the token (eg: Cosmos Atom) Since: cosmos-sdk 0.43
 *   - 5: symbol - the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display. Since: cosmos-sdk 0.43
 *   - 6: uri - URI to a document (on or off-chain) that contains additional information. Optional. Since: cosmos-sdk 0.46
 *   - 7: uri_hash - URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional. Since: cosmos-sdk 0.46
 */
export declare const destructCosmosBankMetadata: (g_struct: CosmosBankMetadata) => [description?: string, denom_units?: CosmosBankDenomUnit[], base?: string, display?: string, name?: string, symbol?: string, uri?: string, uri_hash?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_METADATA = "/cosmos.bank.v1beta1.Metadata";
/**
 * JSON serialization of `cosmos.bank.v1beta1.Metadata` - represents a struct that describes a basic token.
 */
export type CosmosBankMetadata = {
    description?: string | undefined;
    denom_units?: CosmosBankDenomUnit[] | undefined;
    base?: string | undefined;
    display?: string | undefined;
    name?: string | undefined;
    symbol?: string | undefined;
    uri?: string | undefined;
    uri_hash?: string | undefined;
};
