import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, any, coins } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Supply` protobuf message wrapped in the `Any` container: represents a struct that passively keeps track of the total supply amounts in the network. This message is deprecated now that supply is indexed by denom.
 * @param a_totals - `total`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anySupply = (a_totals) => any('/cosmos.bank.v1beta1.Supply', Protobuf() // ...
    .B(coins(a_totals)) // Coin[] total = 1
    .o);
/**
 * Encodes a `Params` protobuf message: defines the parameters for the bank module.
 * @param a_send_enableds - `send_enabled`: Deprecated: Use of SendEnabled in params is deprecated. For genesis, use the newly added send_enabled field in the genesis object. Storage, lookup, and manipulation of this information is now in the keeper. As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
 * @param b_default_send_enabled - `default_send_enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankParams = (a_send_enableds, b_default_send_enabled) => Protobuf() // ...
    .B(a_send_enableds) // SendEnabled[] send_enabled = 1
    .v(b_default_send_enabled) // boolean default_send_enabled = 2
    .o;
/**
 * Encodes a `SendEnabled` protobuf message: maps coin denom to a send_enabled status (whether a denom is sendable).
 * @param s_denom - `denom`:
 * @param b_enabled - `enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankSendEnabled = (s_denom, b_enabled) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .v(b_enabled) // boolean enabled = 2
    .o;
/**
 * Encodes a `Input` protobuf message: models transaction input.
 * @param sa_address - `address`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankInput = (sa_address, a_coins) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .B(coins(a_coins)) // Coin[] coins = 2
    .o;
/**
 * Encodes a `Output` protobuf message: models transaction outputs.
 * @param sa_address - `address`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankOutput = (sa_address, a_coins) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .B(coins(a_coins)) // Coin[] coins = 2
    .o;
/**
 * Encodes a `Supply` protobuf message: represents a struct that passively keeps track of the total supply amounts in the network. This message is deprecated now that supply is indexed by denom.
 * @param a_totals - `total`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankSupply = (a_totals) => Protobuf() // ...
    .B(coins(a_totals)) // Coin[] total = 1
    .o;
/**
 * Encodes a `DenomUnit` protobuf message: represents a struct that describes a given denomination unit of the basic token.
 * @param s_denom - `denom`: represents the string name of the given denom unit (e.g uatom).
 * @param n_exponent - `exponent`: represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).
 * @param a_aliases - `aliases`: a list of string aliases for the given denom
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankDenomUnit = (s_denom, n_exponent, a_aliases) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .v(n_exponent) // uint32 exponent = 2
    .S(a_aliases) // string[] aliases = 3
    .o;
/**
 * Encodes a `Metadata` protobuf message: represents a struct that describes a basic token.
 * @param s_description - `description`:
 * @param a_denom_units - `denom_units`: represents the list of DenomUnit's for a given coin
 * @param s_base - `base`: represents the base denom (should be the DenomUnit with exponent = 0).
 * @param s_display - `display`: indicates the suggested denom that should be displayed in clients.
 * @param s_name - `name`: defines the name of the token (eg: Cosmos Atom) Since: cosmos-sdk 0.43
 * @param s_symbol - `symbol`: the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display. Since: cosmos-sdk 0.43
 * @param s_uri - `uri`: URI to a document (on or off-chain) that contains additional information. Optional. Since: cosmos-sdk 0.46
 * @param s_uri_hash - `uri_hash`: URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMetadata = (s_description, a_denom_units, s_base, s_display, s_name, s_symbol, s_uri, s_uri_hash) => Protobuf() // ...
    .s(s_description) // string description = 1
    .B(a_denom_units) // DenomUnit[] denom_units = 2
    .s(s_base) // string base = 3
    .s(s_display) // string display = 4
    .s(s_name) // string name = 5
    .s(s_symbol) // string symbol = 6
    .s(s_uri) // string uri = 7
    .s(s_uri_hash) // string uri_hash = 8
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankParams}
 */
export const decodeCosmosBankParams = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosBankSendEnabled]);
/**
 * Decodes a protobuf SendEnabled message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankSendEnabled}
 */
export const decodeCosmosBankSendEnabled = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf Input message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankInput}
 */
export const decodeCosmosBankInput = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decode_coin]);
/**
 * Decodes a protobuf Output message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankOutput}
 */
export const decodeCosmosBankOutput = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decode_coin]);
/**
 * Decodes a protobuf Supply message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankSupply}
 */
export const decodeCosmosBankSupply = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf DenomUnit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankDenomUnit}
 */
export const decodeCosmosBankDenomUnit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 4]);
/**
 * Decodes a protobuf Metadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMetadata}
 */
export const decodeCosmosBankMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 5, 5, 5, 5, 5, 5], [0, decodeCosmosBankDenomUnit]);
/**
 * Destructures the fields of a {@link CosmosBankInput} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: coins -
 */
export const destructCosmosBankInput = (g_struct) => [g_struct.address, g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_INPUT = '/cosmos.bank.v1beta1.Input';
/**
 * Destructures the fields of a {@link CosmosBankOutput} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: coins -
 */
export const destructCosmosBankOutput = (g_struct) => [g_struct.address, g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_OUTPUT = '/cosmos.bank.v1beta1.Output';
/**
 * Destructures the fields of a {@link CosmosBankParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: send_enabled - Deprecated: Use of SendEnabled in params is deprecated. For genesis, use the newly added send_enabled field in the genesis object. Storage, lookup, and manipulation of this information is now in the keeper. As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
 *   - 1: default_send_enabled -
 */
export const destructCosmosBankParams = (g_struct) => [g_struct.send_enabled, g_struct.default_send_enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_PARAMS = '/cosmos.bank.v1beta1.Params';
/**
 * Destructures the fields of a {@link CosmosBankSendEnabled} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: enabled -
 */
export const destructCosmosBankSendEnabled = (g_struct) => [g_struct.denom, g_struct.enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_SEND_ENABLED = '/cosmos.bank.v1beta1.SendEnabled';
/**
 * Destructures the fields of a {@link CosmosBankSupply} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total -
 */
export const destructCosmosBankSupply = (g_struct) => [g_struct.total];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_SUPPLY = '/cosmos.bank.v1beta1.Supply';
/**
 * Destructures the fields of a {@link CosmosBankDenomUnit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - represents the string name of the given denom unit (e.g uatom).
 *   - 1: exponent - represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).
 *   - 2: aliases - a list of string aliases for the given denom
 */
export const destructCosmosBankDenomUnit = (g_struct) => [g_struct.denom, g_struct.exponent, g_struct.aliases];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_DENOM_UNIT = '/cosmos.bank.v1beta1.DenomUnit';
/**
 * Destructures the fields of a {@link CosmosBankMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: description -
 *   - 1: denom_units - represents the list of DenomUnit's for a given coin
 *   - 2: base - represents the base denom (should be the DenomUnit with exponent = 0).
 *   - 3: display - indicates the suggested denom that should be displayed in clients.
 *   - 4: name - defines the name of the token (eg: Cosmos Atom) Since: cosmos-sdk 0.43
 *   - 5: symbol - the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display. Since: cosmos-sdk 0.43
 *   - 6: uri - URI to a document (on or off-chain) that contains additional information. Optional. Since: cosmos-sdk 0.46
 *   - 7: uri_hash - URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional. Since: cosmos-sdk 0.46
 */
export const destructCosmosBankMetadata = (g_struct) => [g_struct.description, g_struct.denom_units, g_struct.base, g_struct.display, g_struct.name, g_struct.symbol, g_struct.uri, g_struct.uri_hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_METADATA = '/cosmos.bank.v1beta1.Metadata';
//# sourceMappingURL=bank.js.map