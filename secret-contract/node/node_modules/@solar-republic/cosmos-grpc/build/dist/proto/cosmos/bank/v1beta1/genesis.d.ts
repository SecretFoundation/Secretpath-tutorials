import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBankParams, DecodedCosmosBankParams, CosmosBankMetadata, DecodedCosmosBankMetadata, CosmosBankSendEnabled, DecodedCosmosBankSendEnabled } from './bank.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type EncodedCosmosBankGenesisState = Encoded<'/cosmos.bank.v1beta1.GenesisState'>;
export type EncodedCosmosBankBalance = Encoded<'/cosmos.bank.v1beta1.Balance'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the bank module's genesis state.
 * @param g_params - `params`: defines all the parameters of the module.
 * @param a_balances - `balances`: an array containing the balances of all the accounts.
 * @param a_supplys - `supply`: represents the total supply. If it is left empty, then supply will be calculated based on the provided balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
 * @param a_denom_metadatas - `denom_metadata`: defines the metadata of the different coins.
 * @param a_send_enableds - `send_enabled`: defines the denoms where send is enabled or disabled. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankGenesisState: (atu8_params?: Opt<Encoded<'/cosmos.bank.v1beta1.Params'>>, a_balances?: Opt<Encoded<'/cosmos.bank.v1beta1.Balance'>[]>, a_supplys?: Opt<SlimCoin[]>, a_denom_metadatas?: Opt<Encoded<'/cosmos.bank.v1beta1.Metadata'>[]>, a_send_enableds?: Opt<Encoded<'/cosmos.bank.v1beta1.SendEnabled'>[]>) => EncodedCosmosBankGenesisState;
/**
 * Encodes a `Balance` protobuf message: defines an account address and balance pair used in the bank module's genesis state.
 * @param sa_address - `address`: the address of the balance holder.
 * @param a_coins - `coins`: defines the different coins this balance holds.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBankBalance: (sa_address?: Opt<WeakAccountAddr>, a_coins?: Opt<SlimCoin[]>) => EncodedCosmosBankBalance;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - defines all the parameters of the module.
 *   - 1: balances - an array containing the balances of all the accounts.
 *   - 2: supply - represents the total supply. If it is left empty, then supply will be calculated based on the provided balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
 *   - 3: denom_metadata - defines the metadata of the different coins.
 *   - 4: send_enabled - defines the denoms where send is enabled or disabled. Since: cosmos-sdk 0.47
 */
export type DecodedCosmosBankGenesisState = [
    a_params?: DecodedCosmosBankParams,
    a_balances?: DecodedCosmosBankBalance[],
    a_supply?: [
        string,
        string
    ][],
    a_denom_metadata?: DecodedCosmosBankMetadata[],
    a_send_enabled?: DecodedCosmosBankSendEnabled[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankGenesisState}
 */
export declare const decodeCosmosBankGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosBankGenesisState;
/**
 * A decoded protobuf Balance message
 *
 * Tuple where:
 *   - 0: address - the address of the balance holder.
 *   - 1: coins - defines the different coins this balance holds.
 */
export type DecodedCosmosBankBalance = [
    sa_address?: CwAccountAddr,
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Balance message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankBalance}
 */
export declare const decodeCosmosBankBalance: (atu8_payload: Uint8Array) => DecodedCosmosBankBalance;
/**
 * Destructures the fields of a {@link CosmosBankGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines all the parameters of the module.
 *   - 1: balances - an array containing the balances of all the accounts.
 *   - 2: supply - represents the total supply. If it is left empty, then supply will be calculated based on the provided balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
 *   - 3: denom_metadata - defines the metadata of the different coins.
 *   - 4: send_enabled - defines the denoms where send is enabled or disabled. Since: cosmos-sdk 0.47
 */
export declare const destructCosmosBankGenesisState: (g_struct: CosmosBankGenesisState) => [params?: CosmosBankParams, balances?: CosmosBankBalance[], supply?: CosmosBaseCoin[], denom_metadata?: CosmosBankMetadata[], send_enabled?: CosmosBankSendEnabled[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_GENESIS_STATE = "/cosmos.bank.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.bank.v1beta1.GenesisState` - defines the bank module's genesis state.
 */
export type CosmosBankGenesisState = {
    params?: CosmosBankParams | undefined;
    balances?: CosmosBankBalance[] | undefined;
    supply?: CosmosBaseCoin[] | undefined;
    denom_metadata?: CosmosBankMetadata[] | undefined;
    send_enabled?: CosmosBankSendEnabled[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBankBalance} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address of the balance holder.
 *   - 1: coins - defines the different coins this balance holds.
 */
export declare const destructCosmosBankBalance: (g_struct: CosmosBankBalance) => [address?: CwAccountAddr, coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BANK_BALANCE = "/cosmos.bank.v1beta1.Balance";
/**
 * JSON serialization of `cosmos.bank.v1beta1.Balance` - defines an account address and balance pair used in the bank module's genesis state.
 */
export type CosmosBankBalance = {
    address?: CwAccountAddr | undefined;
    coins?: CosmosBaseCoin[] | undefined;
};
