import { oda } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin, coins } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBankParams, decodeCosmosBankMetadata, decodeCosmosBankSendEnabled } from './bank.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
const SR_LCD_COSMOS_BANK_QUERY = '/cosmos/bank/v1beta1/';
/**
 * Queries the balance of a single coin for a single account.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the address to query balances for.
 * @param s_denom - the coin denom to query balances for.
 * @returns a tuple where:
 *   - 0: balance - the balance of the coin.
 */
export const queryCosmosBankBalance = restful_grpc((sa_address, s_denom) => [SR_LCD_COSMOS_BANK_QUERY + 'balances/' + sa_address + '/by_denom', {
        denom: s_denom,
    }]);
/**
 * Queries the balance of all coins for a single account. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the address to query balances for.
 * @param g_pagination - defines an optional pagination for the request.
 * @param b_resolve_denom - the flag to resolve the denom into a human-readable form from the metadata. Since: cosmos-sdk 0.50
 * @returns a tuple where:
 *   - 0: balances - the balances of all the coins.
 *   - 1: pagination - the balances of all the coins.
 */
export const queryCosmosBankAllBalances = restful_grpc((sa_address, g_pagination, b_resolve_denom) => [SR_LCD_COSMOS_BANK_QUERY + 'balances/' + sa_address, {
        pagination: g_pagination,
        resolve_denom: b_resolve_denom,
    }]);
/**
 * Queries the spendable balance of all coins for a single account. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set. Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the address to query spendable balances for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: balances - the spendable balances of all the coins.
 *   - 1: pagination - the spendable balances of all the coins.
 */
export const queryCosmosBankSpendableBalances = restful_grpc((sa_address, g_pagination) => [SR_LCD_COSMOS_BANK_QUERY + 'spendable_balances/' + sa_address, {
        pagination: g_pagination,
    }]);
/**
 * Queries the spendable balance of a single denom for a single account. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the address to query balances for.
 * @param s_denom - the coin denom to query balances for.
 * @returns a tuple where:
 *   - 0: balance - the balance of the coin.
 */
export const queryCosmosBankSpendableBalanceByDenom = restful_grpc((sa_address, s_denom) => [SR_LCD_COSMOS_BANK_QUERY + 'spendable_balances/' + sa_address + '/by_denom', {
        denom: s_denom,
    }]);
/**
 * Queries the total supply of all coins. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request. Since: cosmos-sdk 0.43
 * @returns a tuple where:
 *   - 0: supply - the supply of the coins
 *   - 1: pagination - the supply of the coins
 */
export const queryCosmosBankTotalSupply = restful_grpc(g_pagination => [SR_LCD_COSMOS_BANK_QUERY + 'supply', {
        pagination: g_pagination,
    }]);
/**
 * Queries the supply of a single coin. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - the coin denom to query balances for.
 * @returns a tuple where:
 *   - 0: amount - the supply of the coin.
 */
export const queryCosmosBankSupplyOf = restful_grpc(s_denom => [SR_LCD_COSMOS_BANK_QUERY + 'supply/by_denom', {
        denom: s_denom,
    }]);
/**
 * Queries the parameters of x/bank module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - provides the parameters of the bank module.
 */
export const queryCosmosBankParams = restful_grpc(() => [SR_LCD_COSMOS_BANK_QUERY + 'params']);
/**
 * DenomsMetadata queries the client metadata of a given coin denomination.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - the coin denom to query the metadata for.
 * @returns a tuple where:
 *   - 0: metadata - describes and provides all the client information for the requested token.
 */
export const queryCosmosBankDenomMetadata = restful_grpc(s_denom => [SR_LCD_COSMOS_BANK_QUERY + 'denoms_metadata/' + s_denom]);
/**
 * DenomsMetadata queries the client metadata of a given coin denomination.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - the coin denom to query the metadata for.
 * @returns a tuple where:
 *   - 0: metadata - describes and provides all the client information for the requested token.
 */
export const queryCosmosBankDenomMetadataByQueryString = restful_grpc(s_denom => [SR_LCD_COSMOS_BANK_QUERY + 'denoms_metadata_by_query_string', {
        denom: s_denom,
    }]);
/**
 * Queries the client metadata for all registered coin denominations.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: metadatas - metadata provides the client information for all the registered tokens.
 *   - 1: pagination - metadata provides the client information for all the registered tokens.
 */
export const queryCosmosBankDenomsMetadata = restful_grpc(g_pagination => [SR_LCD_COSMOS_BANK_QUERY + 'denoms_metadata', {
        pagination: g_pagination,
    }]);
/**
 * Queries for all account addresses that own a particular token denomination. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set. Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - defines the coin denomination to query all account holders for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: denom_owners - the 'denom_owners' response property
 *   - 1: pagination - the 'denom_owners' response property
 */
export const queryCosmosBankDenomOwners = restful_grpc((s_denom, g_pagination) => [SR_LCD_COSMOS_BANK_QUERY + 'denom_owners/' + s_denom, {
        pagination: g_pagination,
    }]);
/**
 * Queries for SendEnabled entries. This query only returns denominations that have specific SendEnabled settings. Any denomination that does not have a specific setting will use the default params.default_send_enabled, and will not be returned by this query. Since: cosmos-sdk 0.47
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param a_denoms - the specific denoms you want look up. Leave empty to get all entries.
 * @param g_pagination - defines an optional pagination for the request. This field is only read if the denoms field is empty.
 * @returns a tuple where:
 *   - 0: send_enabled - the 'send_enabled' response property
 *   - 1: pagination - the 'send_enabled' response property
 */
export const queryCosmosBankSendEnabled = restful_grpc((a_denoms, g_pagination) => [SR_LCD_COSMOS_BANK_QUERY + 'send_enabled', {
        denoms: a_denoms,
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryBalanceRequest` protobuf message: the request type for the Query/Balance RPC method.
 * @param sa_address - `address`: the address to query balances for.
 * @param s_denom - `denom`: the coin denom to query balances for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryBalanceRequest = (sa_address, s_denom) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(s_denom) // string denom = 2
    .o;
/**
 * Encodes a `QueryBalanceResponse` protobuf message: the response type for the Query/Balance RPC method.
 * @param a_balance - `balance`: the balance of the coin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryBalanceResponse = (a_balance) => Protobuf() // ...
    .b(coin(a_balance)) // Coin balance = 1
    .o;
/**
 * Encodes a `QueryAllBalancesRequest` protobuf message: QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
 * @param sa_address - `address`: the address to query balances for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param b_resolve_denom - `resolve_denom`: the flag to resolve the denom into a human-readable form from the metadata. Since: cosmos-sdk 0.50
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryAllBalancesRequest = (sa_address, atu8_pagination, b_resolve_denom) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .v(b_resolve_denom) // boolean resolve_denom = 3
    .o;
/**
 * Encodes a `QueryAllBalancesResponse` protobuf message: the response type for the Query/AllBalances RPC method.
 * @param a_balances - `balances`: the balances of all the coins.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryAllBalancesResponse = (a_balances, atu8_pagination) => Protobuf() // ...
    .B(coins(a_balances)) // Coin[] balances = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QuerySpendableBalancesRequest` protobuf message: defines the gRPC request structure for querying an account's spendable balances. Since: cosmos-sdk 0.46
 * @param sa_address - `address`: the address to query spendable balances for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySpendableBalancesRequest = (sa_address, atu8_pagination) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QuerySpendableBalancesResponse` protobuf message: defines the gRPC response structure for querying an account's spendable balances. Since: cosmos-sdk 0.46
 * @param a_balances - `balances`: the spendable balances of all the coins.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySpendableBalancesResponse = (a_balances, atu8_pagination) => Protobuf() // ...
    .B(coins(a_balances)) // Coin[] balances = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QuerySpendableBalanceByDenomRequest` protobuf message: defines the gRPC request structure for querying an account's spendable balance for a specific denom. Since: cosmos-sdk 0.47
 * @param sa_address - `address`: the address to query balances for.
 * @param s_denom - `denom`: the coin denom to query balances for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySpendableBalanceByDenomRequest = (sa_address, s_denom) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(s_denom) // string denom = 2
    .o;
/**
 * Encodes a `QuerySpendableBalanceByDenomResponse` protobuf message: defines the gRPC response structure for querying an account's spendable balance for a specific denom. Since: cosmos-sdk 0.47
 * @param a_balance - `balance`: the balance of the coin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySpendableBalanceByDenomResponse = (a_balance) => Protobuf() // ...
    .b(coin(a_balance)) // Coin balance = 1
    .o;
/**
 * Encodes a `QueryTotalSupplyRequest` protobuf message: the request type for the Query/TotalSupply RPC method.
 * @param g_pagination - `pagination`: defines an optional pagination for the request. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryTotalSupplyRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryTotalSupplyResponse` protobuf message: the response type for the Query/TotalSupply RPC method
 * @param a_supplys - `supply`: the supply of the coins
 * @param g_pagination - `pagination`: defines the pagination in the response. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryTotalSupplyResponse = (a_supplys, atu8_pagination) => Protobuf() // ...
    .B(coins(a_supplys)) // Coin[] supply = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QuerySupplyOfRequest` protobuf message: the request type for the Query/SupplyOf RPC method.
 * @param s_denom - `denom`: the coin denom to query balances for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySupplyOfRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QuerySupplyOfResponse` protobuf message: the response type for the Query/SupplyOf RPC method.
 * @param a_amount - `amount`: the supply of the coin.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySupplyOfResponse = (a_amount) => Protobuf() // ...
    .b(coin(a_amount)) // Coin amount = 1
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: defines the request type for querying x/bank parameters.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: defines the response type for querying x/bank parameters.
 * @param g_params - `params`: provides the parameters of the bank module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryDenomsMetadataRequest` protobuf message: the request type for the Query/DenomsMetadata RPC method.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomsMetadataRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryDenomsMetadataResponse` protobuf message: the response type for the Query/DenomsMetadata RPC method.
 * @param a_metadatas - `metadatas`: metadata provides the client information for all the registered tokens.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomsMetadataResponse = (a_metadatas, atu8_pagination) => Protobuf() // ...
    .B(a_metadatas) // Metadata[] metadatas = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryDenomMetadataRequest` protobuf message: the request type for the Query/DenomMetadata RPC method.
 * @param s_denom - `denom`: the coin denom to query the metadata for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomMetadataRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QueryDenomMetadataResponse` protobuf message: the response type for the Query/DenomMetadata RPC method.
 * @param g_metadata - `metadata`: describes and provides all the client information for the requested token.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomMetadataResponse = (atu8_metadata) => Protobuf() // ...
    .b(atu8_metadata) // Metadata metadata = 1
    .o;
/**
 * Encodes a `QueryDenomMetadataByQueryStringRequest` protobuf message: the request type for the Query/DenomMetadata RPC method. Identical with QueryDenomMetadataRequest but receives denom as query string.
 * @param s_denom - `denom`: the coin denom to query the metadata for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomMetadataByQueryStringRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QueryDenomMetadataByQueryStringResponse` protobuf message: the response type for the Query/DenomMetadata RPC method. Identical with QueryDenomMetadataResponse but receives denom as query string in request.
 * @param g_metadata - `metadata`: describes and provides all the client information for the requested token.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomMetadataByQueryStringResponse = (atu8_metadata) => Protobuf() // ...
    .b(atu8_metadata) // Metadata metadata = 1
    .o;
/**
 * Encodes a `QueryDenomOwnersRequest` protobuf message: defines the request type for the DenomOwners RPC query, which queries for a paginated set of all account holders of a particular denomination.
 * @param s_denom - `denom`: defines the coin denomination to query all account holders for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomOwnersRequest = (s_denom, atu8_pagination) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `DenomOwner` protobuf message: defines structure representing an account that owns or holds a particular denominated token. It contains the account address and account balance of the denominated token. Since: cosmos-sdk 0.46
 * @param sa_address - `address`: defines the address that owns a particular denomination.
 * @param a_balance - `balance`: the balance of the denominated coin for an account.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankDenomOwner = (sa_address, a_balance) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(coin(a_balance)) // Coin balance = 2
    .o;
/**
 * Encodes a `QueryDenomOwnersResponse` protobuf message: defines the RPC response of a DenomOwners RPC query. Since: cosmos-sdk 0.46
 * @param a_denom_owners - `denom_owners`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQueryDenomOwnersResponse = (a_denom_owners, atu8_pagination) => Protobuf() // ...
    .B(a_denom_owners) // DenomOwner[] denom_owners = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QuerySendEnabledRequest` protobuf message: defines the RPC request for looking up SendEnabled entries. Since: cosmos-sdk 0.47
 * @param a_denoms - `denoms`: the specific denoms you want look up. Leave empty to get all entries.
 * @param g_pagination - `pagination`: defines an optional pagination for the request. This field is only read if the denoms field is empty.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySendEnabledRequest = (a_denoms, atu8_pagination) => Protobuf() // ...
    .S(a_denoms) // string[] denoms = 1
    .b(atu8_pagination, 99) // PageRequest pagination = 99
    .o;
/**
 * Encodes a `QuerySendEnabledResponse` protobuf message: defines the RPC response of a SendEnable query. Since: cosmos-sdk 0.47
 * @param a_send_enableds - `send_enabled`:
 * @param g_pagination - `pagination`: defines the pagination in the response. This field is only populated if the denoms field in the request is empty.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankQuerySendEnabledResponse = (a_send_enableds, atu8_pagination) => Protobuf() // ...
    .B(a_send_enableds) // SendEnabled[] send_enabled = 1
    .b(atu8_pagination, 99) // PageResponse pagination = 99
    .o;
/**
 * Decodes a protobuf QueryBalanceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryBalanceRequest}
 */
export const decodeCosmosBankQueryBalanceRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryBalance message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryBalanceResponse}
 */
export const decodeCosmosBankQueryBalanceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Decodes a protobuf QueryAllBalancesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryAllBalancesRequest}
 */
export const decodeCosmosBankQueryAllBalancesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryAllBalances message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryAllBalancesResponse}
 */
export const decodeCosmosBankQueryAllBalancesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decode_coin, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QuerySpendableBalancesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQuerySpendableBalancesRequest}
 */
export const decodeCosmosBankQuerySpendableBalancesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QuerySpendableBalances message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQuerySpendableBalancesResponse}
 */
export const decodeCosmosBankQuerySpendableBalancesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decode_coin, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QuerySpendableBalanceByDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQuerySpendableBalanceByDenomRequest}
 */
export const decodeCosmosBankQuerySpendableBalanceByDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QuerySpendableBalanceByDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQuerySpendableBalanceByDenomResponse}
 */
export const decodeCosmosBankQuerySpendableBalanceByDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Decodes a protobuf QueryTotalSupplyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryTotalSupplyRequest}
 */
export const decodeCosmosBankQueryTotalSupplyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryTotalSupply message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryTotalSupplyResponse}
 */
export const decodeCosmosBankQueryTotalSupplyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decode_coin, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QuerySupplyOfRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQuerySupplyOfRequest}
 */
export const decodeCosmosBankQuerySupplyOfRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QuerySupplyOf message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQuerySupplyOfResponse}
 */
export const decodeCosmosBankQuerySupplyOfResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryParamsRequest}
 */
export const decodeCosmosBankQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryParamsResponse}
 */
export const decodeCosmosBankQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBankParams]);
/**
 * Decodes a protobuf QueryDenomsMetadataRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomsMetadataRequest}
 */
export const decodeCosmosBankQueryDenomsMetadataRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDenomsMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomsMetadataResponse}
 */
export const decodeCosmosBankQueryDenomsMetadataResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosBankMetadata, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryDenomMetadataRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomMetadataRequest}
 */
export const decodeCosmosBankQueryDenomMetadataRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDenomMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomMetadataResponse}
 */
export const decodeCosmosBankQueryDenomMetadataResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBankMetadata]);
/**
 * Decodes a protobuf QueryDenomMetadataByQueryStringRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomMetadataByQueryStringRequest}
 */
export const decodeCosmosBankQueryDenomMetadataByQueryStringRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDenomMetadataByQueryString message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomMetadataByQueryStringResponse}
 */
export const decodeCosmosBankQueryDenomMetadataByQueryStringResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBankMetadata]);
/**
 * Decodes a protobuf QueryDenomOwnersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomOwnersRequest}
 */
export const decodeCosmosBankQueryDenomOwnersRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf DenomOwner message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankDenomOwner}
 */
export const decodeCosmosBankDenomOwner = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decode_coin]);
/**
 * Decodes a protobuf QueryDenomOwners message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankQueryDenomOwnersResponse}
 */
export const decodeCosmosBankQueryDenomOwnersResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosBankDenomOwner, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QuerySendEnabledRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosBankQuerySendEnabledRequest}
 */
export const decodeCosmosBankQuerySendEnabledRequest = ((atu8_payload, a_decoded = decode_protobuf(atu8_payload, [4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, decodeCosmosBaseQueryPageRequest]), { 98: a_pagination } = a_decoded, [a_denoms] = a_decoded) => oda([a_denoms], {
    98: a_pagination,
}));
/**
 * Decodes a protobuf QuerySendEnabled message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosBankQuerySendEnabledResponse}
 */
export const decodeCosmosBankQuerySendEnabledResponse = ((atu8_payload, a_decoded = decode_protobuf(atu8_payload, [0], [decodeCosmosBankSendEnabled, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, decodeCosmosBaseQueryPageResponse]), { 98: a_pagination } = a_decoded, [a_send_enabled] = a_decoded) => oda([a_send_enabled], {
    98: a_pagination,
}));
/**
 * Destructures the fields of a {@link CosmosBankQueryBalanceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address to query balances for.
 *   - 1: denom - the coin denom to query balances for.
 */
export const destructCosmosBankQueryBalanceRequest = (g_struct) => [g_struct.address, g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_BALANCE_REQUEST = '/cosmos.bank.v1beta1.QueryBalanceRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryBalanceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: balance - the balance of the coin.
 */
export const destructCosmosBankQueryBalanceResponse = (g_struct) => [g_struct.balance];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_BALANCE_RESPONSE = '/cosmos.bank.v1beta1.QueryBalanceResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryAllBalancesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address to query balances for.
 *   - 1: pagination - defines an optional pagination for the request.
 *   - 2: resolve_denom - the flag to resolve the denom into a human-readable form from the metadata. Since: cosmos-sdk 0.50
 */
export const destructCosmosBankQueryAllBalancesRequest = (g_struct) => [g_struct.address, g_struct.pagination, g_struct.resolve_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_ALL_BALANCES_REQUEST = '/cosmos.bank.v1beta1.QueryAllBalancesRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryAllBalancesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: balances - the balances of all the coins.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosBankQueryAllBalancesResponse = (g_struct) => [g_struct.balances, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_ALL_BALANCES_RESPONSE = '/cosmos.bank.v1beta1.QueryAllBalancesResponse';
/**
 * Destructures the fields of a {@link CosmosBankQuerySpendableBalancesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address to query spendable balances for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosBankQuerySpendableBalancesRequest = (g_struct) => [g_struct.address, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SPENDABLE_BALANCES_REQUEST = '/cosmos.bank.v1beta1.QuerySpendableBalancesRequest';
/**
 * Destructures the fields of a {@link CosmosBankQuerySpendableBalancesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: balances - the spendable balances of all the coins.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosBankQuerySpendableBalancesResponse = (g_struct) => [g_struct.balances, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SPENDABLE_BALANCES_RESPONSE = '/cosmos.bank.v1beta1.QuerySpendableBalancesResponse';
/**
 * Destructures the fields of a {@link CosmosBankQuerySpendableBalanceByDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address to query balances for.
 *   - 1: denom - the coin denom to query balances for.
 */
export const destructCosmosBankQuerySpendableBalanceByDenomRequest = (g_struct) => [g_struct.address, g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SPENDABLE_BALANCE_BY_DENOM_REQUEST = '/cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest';
/**
 * Destructures the fields of a {@link CosmosBankQuerySpendableBalanceByDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: balance - the balance of the coin.
 */
export const destructCosmosBankQuerySpendableBalanceByDenomResponse = (g_struct) => [g_struct.balance];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SPENDABLE_BALANCE_BY_DENOM_RESPONSE = '/cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryTotalSupplyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request. Since: cosmos-sdk 0.43
 */
export const destructCosmosBankQueryTotalSupplyRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_TOTAL_SUPPLY_REQUEST = '/cosmos.bank.v1beta1.QueryTotalSupplyRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryTotalSupplyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: supply - the supply of the coins
 *   - 1: pagination - defines the pagination in the response. Since: cosmos-sdk 0.43
 */
export const destructCosmosBankQueryTotalSupplyResponse = (g_struct) => [g_struct.supply, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_TOTAL_SUPPLY_RESPONSE = '/cosmos.bank.v1beta1.QueryTotalSupplyResponse';
/**
 * Destructures the fields of a {@link CosmosBankQuerySupplyOfRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - the coin denom to query balances for.
 */
export const destructCosmosBankQuerySupplyOfRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SUPPLY_OF_REQUEST = '/cosmos.bank.v1beta1.QuerySupplyOfRequest';
/**
 * Destructures the fields of a {@link CosmosBankQuerySupplyOfResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount - the supply of the coin.
 */
export const destructCosmosBankQuerySupplyOfResponse = (g_struct) => [g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SUPPLY_OF_RESPONSE = '/cosmos.bank.v1beta1.QuerySupplyOfResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBankQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_PARAMS_REQUEST = '/cosmos.bank.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - provides the parameters of the bank module.
 */
export const destructCosmosBankQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_PARAMS_RESPONSE = '/cosmos.bank.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomsMetadataRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export const destructCosmosBankQueryDenomsMetadataRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOMS_METADATA_REQUEST = '/cosmos.bank.v1beta1.QueryDenomsMetadataRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomsMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: metadatas - metadata provides the client information for all the registered tokens.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosBankQueryDenomsMetadataResponse = (g_struct) => [g_struct.metadatas, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOMS_METADATA_RESPONSE = '/cosmos.bank.v1beta1.QueryDenomsMetadataResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomMetadataRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - the coin denom to query the metadata for.
 */
export const destructCosmosBankQueryDenomMetadataRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOM_METADATA_REQUEST = '/cosmos.bank.v1beta1.QueryDenomMetadataRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: metadata - describes and provides all the client information for the requested token.
 */
export const destructCosmosBankQueryDenomMetadataResponse = (g_struct) => [g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOM_METADATA_RESPONSE = '/cosmos.bank.v1beta1.QueryDenomMetadataResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomMetadataByQueryStringRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - the coin denom to query the metadata for.
 */
export const destructCosmosBankQueryDenomMetadataByQueryStringRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOM_METADATA_BY_QUERY_STRING_REQUEST = '/cosmos.bank.v1beta1.QueryDenomMetadataByQueryStringRequest';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomMetadataByQueryStringResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: metadata - describes and provides all the client information for the requested token.
 */
export const destructCosmosBankQueryDenomMetadataByQueryStringResponse = (g_struct) => [g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOM_METADATA_BY_QUERY_STRING_RESPONSE = '/cosmos.bank.v1beta1.QueryDenomMetadataByQueryStringResponse';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomOwnersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - defines the coin denomination to query all account holders for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosBankQueryDenomOwnersRequest = (g_struct) => [g_struct.denom, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOM_OWNERS_REQUEST = '/cosmos.bank.v1beta1.QueryDenomOwnersRequest';
/**
 * Destructures the fields of a {@link CosmosBankDenomOwner} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - defines the address that owns a particular denomination.
 *   - 1: balance - the balance of the denominated coin for an account.
 */
export const destructCosmosBankDenomOwner = (g_struct) => [g_struct.address, g_struct.balance];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_DENOM_OWNER = '/cosmos.bank.v1beta1.DenomOwner';
/**
 * Destructures the fields of a {@link CosmosBankQueryDenomOwnersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_owners -
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosBankQueryDenomOwnersResponse = (g_struct) => [g_struct.denom_owners, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_DENOM_OWNERS_RESPONSE = '/cosmos.bank.v1beta1.QueryDenomOwnersResponse';
/**
 * Destructures the fields of a {@link CosmosBankQuerySendEnabledRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denoms - the specific denoms you want look up. Leave empty to get all entries.
 *   - 98: pagination - defines an optional pagination for the request. This field is only read if the denoms field is empty.
 */
export const destructCosmosBankQuerySendEnabledRequest = (g_struct) => oda([g_struct.denoms], {
    99: g_struct.pagination,
});
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SEND_ENABLED_REQUEST = '/cosmos.bank.v1beta1.QuerySendEnabledRequest';
/**
 * Destructures the fields of a {@link CosmosBankQuerySendEnabledResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: send_enabled -
 *   - 98: pagination - defines the pagination in the response. This field is only populated if the denoms field in the request is empty.
 */
export const destructCosmosBankQuerySendEnabledResponse = (g_struct) => oda([g_struct.send_enabled], {
    99: g_struct.pagination,
});
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_QUERY_SEND_ENABLED_RESPONSE = '/cosmos.bank.v1beta1.QuerySendEnabledResponse';
//# sourceMappingURL=query.js.map