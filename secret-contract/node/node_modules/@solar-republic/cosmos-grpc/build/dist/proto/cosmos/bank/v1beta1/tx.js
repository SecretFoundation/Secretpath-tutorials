import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { decodeCosmosBankInput, decodeCosmosBankOutput, decodeCosmosBankParams, decodeCosmosBankSendEnabled } from './bank.js';
/**
 * Encodes a `MsgSend` protobuf message: represents a message to send coins from one account to another.
 * @param sa_from - `from_address`:
 * @param sa_to - `to_address`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgSend = (sa_from, sa_to, a_amounts) => Protobuf() // ...
    .s(sa_from) // string from_address = 1
    .s(sa_to) // string to_address = 2
    .B(coins(a_amounts)) // Coin[] amount = 3
    .o;
/**
 * Encodes a `MsgSendResponse` protobuf message: defines the Msg/Send response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgSendResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgMultiSend` protobuf message: represents an arbitrary multi-in, multi-out send message.
 * @param a_inputs - `inputs`: Inputs, despite being `repeated`, only allows one sender input. This is checked in MsgMultiSend's ValidateBasic.
 * @param a_outputs - `outputs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgMultiSend = (a_inputs, a_outputs) => Protobuf() // ...
    .B(a_inputs) // Input[] inputs = 1
    .B(a_outputs) // Output[] outputs = 2
    .o;
/**
 * Encodes a `MsgMultiSendResponse` protobuf message: defines the Msg/MultiSend response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgMultiSendResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/bank parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetSendEnabled` protobuf message: the Msg/SetSendEnabled request type. Only entries to add/update/delete need to be included. Existing SendEnabled entries that are not included in this message are left unchanged. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module.
 * @param a_send_enableds - `send_enabled`: the list of entries to add or update.
 * @param a_use_default_fors - `use_default_for`: a list of denoms that should use the params.default_send_enabled value. Denoms listed here will have their SendEnabled entries deleted. If a denom is included that doesn't have a SendEnabled entry, it will be ignored.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgSetSendEnabled = (s_authority, a_send_enableds, a_use_default_fors) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .B(a_send_enableds) // SendEnabled[] send_enabled = 2
    .S(a_use_default_fors) // string[] use_default_for = 3
    .o;
/**
 * Encodes a `MsgSetSendEnabledResponse` protobuf message: defines the Msg/SetSendEnabled response type. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgSetSendEnabledResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgBurn` protobuf message: defines a message for burning coins. Since: cosmos-sdk 0.51
 * @param sa_from - `from_address`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgBurn = (sa_from, a_amounts) => Protobuf() // ...
    .s(sa_from) // string from_address = 1
    .B(coins(a_amounts)) // Coin[] amount = 2
    .o;
/**
 * Encodes a `MsgBurnResponse` protobuf message: defines the Msg/Burn response type. Since: cosmos-sdk 0.51
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBankMsgBurnResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf Send message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgSend}
 */
export const decodeCosmosBankMsgSend = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf Send message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgSendResponse}
 */
export const decodeCosmosBankMsgSendResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf MultiSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgMultiSend}
 */
export const decodeCosmosBankMsgMultiSend = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0], [decodeCosmosBankInput, decodeCosmosBankOutput]);
/**
 * Decodes a protobuf MultiSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgMultiSendResponse}
 */
export const decodeCosmosBankMsgMultiSendResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgUpdateParams}
 */
export const decodeCosmosBankMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBankParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgUpdateParamsResponse}
 */
export const decodeCosmosBankMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetSendEnabled message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgSetSendEnabled}
 */
export const decodeCosmosBankMsgSetSendEnabled = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 4], [0, decodeCosmosBankSendEnabled]);
/**
 * Decodes a protobuf SetSendEnabled message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgSetSendEnabledResponse}
 */
export const decodeCosmosBankMsgSetSendEnabledResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Burn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgBurn}
 */
export const decodeCosmosBankMsgBurn = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decode_coin]);
/**
 * Decodes a protobuf Burn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBankMsgBurnResponse}
 */
export const decodeCosmosBankMsgBurnResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmosBankMsgSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: from_address -
 *   - 1: to_address -
 *   - 2: amount -
 */
export const destructCosmosBankMsgSend = (g_struct) => [g_struct.from_address, g_struct.to_address, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_SEND = '/cosmos.bank.v1beta1.MsgSend';
/**
 * Destructures the fields of a {@link CosmosBankMsgSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBankMsgSendResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_SEND_RESPONSE = '/cosmos.bank.v1beta1.MsgSendResponse';
/**
 * Destructures the fields of a {@link CosmosBankMsgMultiSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: inputs - Inputs, despite being `repeated`, only allows one sender input. This is checked in MsgMultiSend's ValidateBasic.
 *   - 1: outputs -
 */
export const destructCosmosBankMsgMultiSend = (g_struct) => [g_struct.inputs, g_struct.outputs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_MULTI_SEND = '/cosmos.bank.v1beta1.MsgMultiSend';
/**
 * Destructures the fields of a {@link CosmosBankMsgMultiSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBankMsgMultiSendResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_MULTI_SEND_RESPONSE = '/cosmos.bank.v1beta1.MsgMultiSendResponse';
/**
 * Destructures the fields of a {@link CosmosBankMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/bank parameters to update. NOTE: All parameters must be supplied.
 */
export const destructCosmosBankMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_UPDATE_PARAMS = '/cosmos.bank.v1beta1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link CosmosBankMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBankMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_UPDATE_PARAMS_RESPONSE = '/cosmos.bank.v1beta1.MsgUpdateParamsResponse';
/**
 * Destructures the fields of a {@link CosmosBankMsgSetSendEnabled} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module.
 *   - 1: send_enabled - the list of entries to add or update.
 *   - 2: use_default_for - a list of denoms that should use the params.default_send_enabled value. Denoms listed here will have their SendEnabled entries deleted. If a denom is included that doesn't have a SendEnabled entry, it will be ignored.
 */
export const destructCosmosBankMsgSetSendEnabled = (g_struct) => [g_struct.authority, g_struct.send_enabled, g_struct.use_default_for];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_SET_SEND_ENABLED = '/cosmos.bank.v1beta1.MsgSetSendEnabled';
/**
 * Destructures the fields of a {@link CosmosBankMsgSetSendEnabledResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBankMsgSetSendEnabledResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_SET_SEND_ENABLED_RESPONSE = '/cosmos.bank.v1beta1.MsgSetSendEnabledResponse';
/**
 * Destructures the fields of a {@link CosmosBankMsgBurn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: from_address -
 *   - 1: amount -
 */
export const destructCosmosBankMsgBurn = (g_struct) => [g_struct.from_address, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_BURN = '/cosmos.bank.v1beta1.MsgBurn';
/**
 * Destructures the fields of a {@link CosmosBankMsgBurnResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBankMsgBurnResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BANK_MSG_BURN_RESPONSE = '/cosmos.bank.v1beta1.MsgBurnResponse';
//# sourceMappingURL=tx.js.map