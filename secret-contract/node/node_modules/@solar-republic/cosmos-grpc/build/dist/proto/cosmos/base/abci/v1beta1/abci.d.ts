import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import type { TendermintAbciEvent, DecodedTendermintAbciEvent } from '../../../../tendermint/abci/types.js';
import type { TendermintTypesBlock, DecodedTendermintTypesBlock } from '../../../../tendermint/types/block.js';
export type EncodedCosmosBaseAbciTxResponse = Encoded<'/cosmos.base.abci.v1beta1.TxResponse'>;
export type EncodedCosmosBaseAbciABCIMessageLog = Encoded<'/cosmos.base.abci.v1beta1.ABCIMessageLog'>;
export type EncodedCosmosBaseAbciStringEvent = Encoded<'/cosmos.base.abci.v1beta1.StringEvent'>;
export type EncodedCosmosBaseAbciAttribute = Encoded<'/cosmos.base.abci.v1beta1.Attribute'>;
export type EncodedCosmosBaseAbciGasInfo = Encoded<'/cosmos.base.abci.v1beta1.GasInfo'>;
export type EncodedCosmosBaseAbciResult = Encoded<'/cosmos.base.abci.v1beta1.Result'>;
export type EncodedCosmosBaseAbciSimulationResponse = Encoded<'/cosmos.base.abci.v1beta1.SimulationResponse'>;
export type EncodedCosmosBaseAbciMsgData = Encoded<'/cosmos.base.abci.v1beta1.MsgData'>;
export type EncodedCosmosBaseAbciTxMsgData = Encoded<'/cosmos.base.abci.v1beta1.TxMsgData'>;
export type EncodedCosmosBaseAbciSearchTxsResult = Encoded<'/cosmos.base.abci.v1beta1.SearchTxsResult'>;
export type EncodedCosmosBaseAbciSearchBlocksResult = Encoded<'/cosmos.base.abci.v1beta1.SearchBlocksResult'>;
/**
 * Encodes a `TxResponse` protobuf message: defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 * @param sg_height - `height`: The block height
 * @param s_txhash - `txhash`: The transaction hash.
 * @param s_codespace - `codespace`: Namespace for the Code
 * @param n_code - `code`: Response code.
 * @param s_data - `data`: Result bytes, if any.
 * @param s_raw_log - `raw_log`: The output of the application's logger (raw string). May be non-deterministic.
 * @param a_logs - `logs`: The output of the application's logger (typed). May be non-deterministic.
 * @param s_info - `info`: Additional information. May be non-deterministic.
 * @param sg_gas_wanted - `gas_wanted`: Amount of gas requested for transaction.
 * @param sg_gas_used - `gas_used`: Amount of gas consumed by transaction.
 * @param atu8_tx - `tx`: The request transaction bytes.
 * @param s_timestamp - `timestamp`: Time of the previous block. For heights > 1, it's the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it's genesis time.
 * @param a_events - `events`: Events defines all the events emitted by processing a transaction. Note, these events include those emitted by processing all the messages and those emitted from the ante. Whereas Logs contains the events, with additional metadata, emitted only by processing the messages. Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciTxResponse: (sg_height?: Opt<WeakInt64Str>, s_txhash?: Opt<string>, s_codespace?: Opt<string>, n_code?: Opt<number>, s_data?: Opt<string>, s_raw_log?: Opt<string>, a_logs?: Opt<Encoded<'/cosmos.base.abci.v1beta1.ABCIMessageLog'>[]>, s_info?: Opt<string>, sg_gas_wanted?: Opt<WeakInt64Str>, sg_gas_used?: Opt<WeakInt64Str>, atu8_tx?: Opt<Uint8Array>, s_timestamp?: Opt<string>, a_events?: Opt<Encoded<'/tendermint.abci.Event'>[]>) => EncodedCosmosBaseAbciTxResponse;
/**
 * Encodes a `ABCIMessageLog` protobuf message: defines a structure containing an indexed tx ABCI message log.
 * @param n_msg_index - `msg_index`:
 * @param s_log - `log`:
 * @param a_events - `events`: Events contains a slice of Event objects that were emitted during some execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciABCIMessageLog: (n_msg_index?: Opt<number>, s_log?: Opt<string>, a_events?: Opt<Encoded<'/cosmos.base.abci.v1beta1.StringEvent'>[]>) => EncodedCosmosBaseAbciABCIMessageLog;
/**
 * Encodes a `StringEvent` protobuf message: defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 * @param s_type - `type`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciStringEvent: (s_type?: Opt<string>, a_attributes?: Opt<Encoded<'/cosmos.base.abci.v1beta1.Attribute'>[]>) => EncodedCosmosBaseAbciStringEvent;
/**
 * Encodes a `Attribute` protobuf message: defines an attribute wrapper where the key and value are strings instead of raw bytes.
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciAttribute: (s_key?: Opt<string>, s_value?: Opt<string>) => EncodedCosmosBaseAbciAttribute;
/**
 * Encodes a `GasInfo` protobuf message: defines tx execution gas context.
 * @param sg_gas_wanted - `gas_wanted`: GasWanted is the maximum units of work we allow this tx to perform.
 * @param sg_gas_used - `gas_used`: GasUsed is the amount of gas actually consumed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciGasInfo: (sg_gas_wanted?: Opt<WeakUint64Str>, sg_gas_used?: Opt<WeakUint64Str>) => EncodedCosmosBaseAbciGasInfo;
/**
 * Encodes a `Result` protobuf message: the union of ResponseFormat and ResponseCheckTx.
 * @param atu8_data - `data`: Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions. Deprecated. This field is still populated, but prefer msg_response instead because it also contains the Msg response typeURL.
 * @param s_log - `log`: Log contains the log information from message or handler execution.
 * @param a_events - `events`: Events contains a slice of Event objects that were emitted during message or handler execution.
 * @param a_msg_responses - `msg_responses`: contains the Msg handler responses type packed in Anys. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciResult: (atu8_data?: Opt<Uint8Array>, s_log?: Opt<string>, a_events?: Opt<Encoded<'/tendermint.abci.Event'>[]>, a_msg_responses?: Opt<Uint8Array[]>) => EncodedCosmosBaseAbciResult;
/**
 * Encodes a `SimulationResponse` protobuf message: defines the response generated when a transaction is successfully simulated.
 * @param g_gas_info - `gas_info`:
 * @param g_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciSimulationResponse: (atu8_gas_info?: Opt<Encoded<'/cosmos.base.abci.v1beta1.GasInfo'>>, atu8_result?: Opt<Encoded<'/cosmos.base.abci.v1beta1.Result'>>) => EncodedCosmosBaseAbciSimulationResponse;
/**
 * Encodes a `MsgData` protobuf message: defines the data returned in a Result object during message execution.
 * @param s_msg_type - `msg_type`:
 * @param atu8_data - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciMsgData: (s_msg_type?: Opt<string>, atu8_data?: Opt<Uint8Array>) => EncodedCosmosBaseAbciMsgData;
/**
 * Encodes a `TxMsgData` protobuf message: defines a list of MsgData. A transaction will have a MsgData object for each message.
 * @param a_datas - `data`: field is deprecated and not populated.
 * @param a_msg_responses - `msg_responses`: contains the Msg handler responses packed into Anys. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciTxMsgData: (a_datas?: Opt<Encoded<'/cosmos.base.abci.v1beta1.MsgData'>[]>, a_msg_responses?: Opt<Uint8Array[]>) => EncodedCosmosBaseAbciTxMsgData;
/**
 * Encodes a `SearchTxsResult` protobuf message: defines a structure for querying txs pageable
 * @param sg_total_count - `total_count`: Count of all txs
 * @param sg_count - `count`: Count of txs in current page
 * @param sg_page_number - `page_number`: Index of current page, start from 1
 * @param sg_page_total - `page_total`: Count of total pages
 * @param sg_limit - `limit`: Max count txs per page
 * @param a_txs - `txs`: List of txs in current page
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciSearchTxsResult: (sg_total_count?: Opt<WeakUint64Str>, sg_count?: Opt<WeakUint64Str>, sg_page_number?: Opt<WeakUint64Str>, sg_page_total?: Opt<WeakUint64Str>, sg_limit?: Opt<WeakUint64Str>, a_txs?: Opt<Encoded<'/cosmos.base.abci.v1beta1.TxResponse'>[]>) => EncodedCosmosBaseAbciSearchTxsResult;
/**
 * Encodes a `SearchBlocksResult` protobuf message: defines a structure for querying blocks pageable
 * @param sg_total_count - `total_count`: Count of all blocks
 * @param sg_count - `count`: Count of blocks in current page
 * @param sg_page_number - `page_number`: Index of current page, start from 1
 * @param sg_page_total - `page_total`: Count of total pages
 * @param sg_limit - `limit`: Max count blocks per page
 * @param a_blocks - `blocks`: List of blocks in current page
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosBaseAbciSearchBlocksResult: (sg_total_count?: Opt<WeakInt64Str>, sg_count?: Opt<WeakInt64Str>, sg_page_number?: Opt<WeakInt64Str>, sg_page_total?: Opt<WeakInt64Str>, sg_limit?: Opt<WeakInt64Str>, a_blocks?: Opt<Encoded<'/tendermint.types.Block'>[]>) => EncodedCosmosBaseAbciSearchBlocksResult;
/**
 * A decoded protobuf Tx message
 *
 * Tuple where:
 *   - 0: height - The block height
 *   - 1: txhash - The transaction hash.
 *   - 2: codespace - Namespace for the Code
 *   - 3: code - Response code.
 *   - 4: data - Result bytes, if any.
 *   - 5: raw_log - The output of the application's logger (raw string). May be non-deterministic.
 *   - 6: logs - The output of the application's logger (typed). May be non-deterministic.
 *   - 7: info - Additional information. May be non-deterministic.
 *   - 8: gas_wanted - Amount of gas requested for transaction.
 *   - 9: gas_used - Amount of gas consumed by transaction.
 *   - 10: tx - The request transaction bytes.
 *   - 11: timestamp - Time of the previous block. For heights > 1, it's the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it's genesis time.
 *   - 12: events - Events defines all the events emitted by processing a transaction. Note, these events include those emitted by processing all the messages and those emitted from the ante. Whereas Logs contains the events, with additional metadata, emitted only by processing the messages. Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
 */
export type DecodedCosmosBaseAbciTxResponse = [
    sg_height?: CwInt64,
    s_txhash?: string,
    s_codespace?: string,
    n_code?: number,
    s_data?: string,
    s_raw_log?: string,
    a_logs?: DecodedCosmosBaseAbciABCIMessageLog[],
    s_info?: string,
    sg_gas_wanted?: CwInt64,
    sg_gas_used?: CwInt64,
    a_tx?: DecodedGoogleProtobufAny,
    s_timestamp?: string,
    a_events?: DecodedTendermintAbciEvent[]
];
/**
 * Decodes a protobuf Tx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciTxResponse}
 */
export declare const decodeCosmosBaseAbciTxResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciTxResponse;
/**
 * A decoded protobuf ABCIMessageLog message
 *
 * Tuple where:
 *   - 0: msg_index -
 *   - 1: log -
 *   - 2: events - Events contains a slice of Event objects that were emitted during some execution.
 */
export type DecodedCosmosBaseAbciABCIMessageLog = [
    n_msg_index?: number,
    s_log?: string,
    a_events?: DecodedCosmosBaseAbciStringEvent[]
];
/**
 * Decodes a protobuf ABCIMessageLog message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciABCIMessageLog}
 */
export declare const decodeCosmosBaseAbciABCIMessageLog: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciABCIMessageLog;
/**
 * A decoded protobuf StringEvent message
 *
 * Tuple where:
 *   - 0: type -
 *   - 1: attributes -
 */
export type DecodedCosmosBaseAbciStringEvent = [
    s_type?: string,
    a_attributes?: DecodedCosmosBaseAbciAttribute[]
];
/**
 * Decodes a protobuf StringEvent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciStringEvent}
 */
export declare const decodeCosmosBaseAbciStringEvent: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciStringEvent;
/**
 * A decoded protobuf Attribute message
 *
 * Tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export type DecodedCosmosBaseAbciAttribute = [
    s_key?: string,
    s_value?: string
];
/**
 * Decodes a protobuf Attribute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciAttribute}
 */
export declare const decodeCosmosBaseAbciAttribute: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciAttribute;
/**
 * A decoded protobuf GasInfo message
 *
 * Tuple where:
 *   - 0: gas_wanted - GasWanted is the maximum units of work we allow this tx to perform.
 *   - 1: gas_used - GasUsed is the amount of gas actually consumed.
 */
export type DecodedCosmosBaseAbciGasInfo = [
    sg_gas_wanted?: CwUint64,
    sg_gas_used?: CwUint64
];
/**
 * Decodes a protobuf GasInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciGasInfo}
 */
export declare const decodeCosmosBaseAbciGasInfo: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciGasInfo;
/**
 * A decoded protobuf Result message
 *
 * Tuple where:
 *   - 0: data - Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions. Deprecated. This field is still populated, but prefer msg_response instead because it also contains the Msg response typeURL.
 *   - 1: log - Log contains the log information from message or handler execution.
 *   - 2: events - Events contains a slice of Event objects that were emitted during message or handler execution.
 *   - 3: msg_responses - contains the Msg handler responses type packed in Anys. Since: cosmos-sdk 0.46
 */
export type DecodedCosmosBaseAbciResult = [
    atu8_data?: Uint8Array,
    s_log?: string,
    a_events?: DecodedTendermintAbciEvent[],
    a_msg_responses?: DecodedGoogleProtobufAny[]
];
/**
 * Decodes a protobuf Result message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciResult}
 */
export declare const decodeCosmosBaseAbciResult: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciResult;
/**
 * A decoded protobuf Simulation message
 *
 * Tuple where:
 *   - 0: gas_info -
 *   - 1: result -
 */
export type DecodedCosmosBaseAbciSimulationResponse = [
    a_gas_info?: DecodedCosmosBaseAbciGasInfo,
    a_result?: DecodedCosmosBaseAbciResult
];
/**
 * Decodes a protobuf Simulation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciSimulationResponse}
 */
export declare const decodeCosmosBaseAbciSimulationResponse: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciSimulationResponse;
/**
 * A decoded protobuf Data message
 *
 * Tuple where:
 *   - 0: msg_type -
 *   - 1: data -
 */
export type DecodedCosmosBaseAbciMsgData = [
    s_msg_type?: string,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf Data message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciMsgData}
 */
export declare const decodeCosmosBaseAbciMsgData: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciMsgData;
/**
 * A decoded protobuf TxMsgData message
 *
 * Tuple where:
 *   - 0: data - field is deprecated and not populated.
 *   - 1: msg_responses - contains the Msg handler responses packed into Anys. Since: cosmos-sdk 0.46
 */
export type DecodedCosmosBaseAbciTxMsgData = [
    a_data?: DecodedCosmosBaseAbciMsgData[],
    a_msg_responses?: DecodedGoogleProtobufAny[]
];
/**
 * Decodes a protobuf TxMsgData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciTxMsgData}
 */
export declare const decodeCosmosBaseAbciTxMsgData: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciTxMsgData;
/**
 * A decoded protobuf SearchTxsResult message
 *
 * Tuple where:
 *   - 0: total_count - Count of all txs
 *   - 1: count - Count of txs in current page
 *   - 2: page_number - Index of current page, start from 1
 *   - 3: page_total - Count of total pages
 *   - 4: limit - Max count txs per page
 *   - 5: txs - List of txs in current page
 */
export type DecodedCosmosBaseAbciSearchTxsResult = [
    sg_total_count?: CwUint64,
    sg_count?: CwUint64,
    sg_page_number?: CwUint64,
    sg_page_total?: CwUint64,
    sg_limit?: CwUint64,
    a_txs?: DecodedCosmosBaseAbciTxResponse[]
];
/**
 * Decodes a protobuf SearchTxsResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciSearchTxsResult}
 */
export declare const decodeCosmosBaseAbciSearchTxsResult: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciSearchTxsResult;
/**
 * A decoded protobuf SearchBlocksResult message
 *
 * Tuple where:
 *   - 0: total_count - Count of all blocks
 *   - 1: count - Count of blocks in current page
 *   - 2: page_number - Index of current page, start from 1
 *   - 3: page_total - Count of total pages
 *   - 4: limit - Max count blocks per page
 *   - 5: blocks - List of blocks in current page
 */
export type DecodedCosmosBaseAbciSearchBlocksResult = [
    sg_total_count?: CwInt64,
    sg_count?: CwInt64,
    sg_page_number?: CwInt64,
    sg_page_total?: CwInt64,
    sg_limit?: CwInt64,
    a_blocks?: DecodedTendermintTypesBlock[]
];
/**
 * Decodes a protobuf SearchBlocksResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciSearchBlocksResult}
 */
export declare const decodeCosmosBaseAbciSearchBlocksResult: (atu8_payload: Uint8Array) => DecodedCosmosBaseAbciSearchBlocksResult;
/**
 * Destructures the fields of a {@link CosmosBaseAbciTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - The block height
 *   - 1: txhash - The transaction hash.
 *   - 2: codespace - Namespace for the Code
 *   - 3: code - Response code.
 *   - 4: data - Result bytes, if any.
 *   - 5: raw_log - The output of the application's logger (raw string). May be non-deterministic.
 *   - 6: logs - The output of the application's logger (typed). May be non-deterministic.
 *   - 7: info - Additional information. May be non-deterministic.
 *   - 8: gas_wanted - Amount of gas requested for transaction.
 *   - 9: gas_used - Amount of gas consumed by transaction.
 *   - 10: tx - The request transaction bytes.
 *   - 11: timestamp - Time of the previous block. For heights > 1, it's the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it's genesis time.
 *   - 12: events - Events defines all the events emitted by processing a transaction. Note, these events include those emitted by processing all the messages and those emitted from the ante. Whereas Logs contains the events, with additional metadata, emitted only by processing the messages. Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
 */
export declare const destructCosmosBaseAbciTxResponse: (g_struct: CosmosBaseAbciTxResponse) => [height?: CwInt64, txhash?: string, codespace?: string, code?: number, data?: string, raw_log?: string, logs?: CosmosBaseAbciABCIMessageLog[], info?: string, gas_wanted?: CwInt64, gas_used?: CwInt64, tx?: JsonAny, timestamp?: string, events?: TendermintAbciEvent[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_TX_RESPONSE = "/cosmos.base.abci.v1beta1.TxResponse";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.TxResponse` - defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 */
export type CosmosBaseAbciTxResponse = {
    height?: CwInt64 | undefined;
    txhash?: string | undefined;
    codespace?: string | undefined;
    code?: number | undefined;
    data?: string | undefined;
    raw_log?: string | undefined;
    logs?: CosmosBaseAbciABCIMessageLog[] | undefined;
    info?: string | undefined;
    gas_wanted?: CwInt64 | undefined;
    gas_used?: CwInt64 | undefined;
    tx?: JsonAny | undefined;
    timestamp?: string | undefined;
    events?: TendermintAbciEvent[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciABCIMessageLog} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_index -
 *   - 1: log -
 *   - 2: events - Events contains a slice of Event objects that were emitted during some execution.
 */
export declare const destructCosmosBaseAbciABCIMessageLog: (g_struct: CosmosBaseAbciABCIMessageLog) => [msg_index?: number, log?: string, events?: CosmosBaseAbciStringEvent[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_A_B_C_I_MESSAGE_LOG = "/cosmos.base.abci.v1beta1.ABCIMessageLog";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.ABCIMessageLog` - defines a structure containing an indexed tx ABCI message log.
 */
export type CosmosBaseAbciABCIMessageLog = {
    msg_index?: number | undefined;
    log?: string | undefined;
    events?: CosmosBaseAbciStringEvent[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciStringEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: attributes -
 */
export declare const destructCosmosBaseAbciStringEvent: (g_struct: CosmosBaseAbciStringEvent) => [type_?: string, attributes?: CosmosBaseAbciAttribute[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_STRING_EVENT = "/cosmos.base.abci.v1beta1.StringEvent";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.StringEvent` - defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 */
export type CosmosBaseAbciStringEvent = {
    type?: string | undefined;
    attributes?: CosmosBaseAbciAttribute[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciAttribute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export declare const destructCosmosBaseAbciAttribute: (g_struct: CosmosBaseAbciAttribute) => [key?: string, value?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_ATTRIBUTE = "/cosmos.base.abci.v1beta1.Attribute";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.Attribute` - defines an attribute wrapper where the key and value are strings instead of raw bytes.
 */
export type CosmosBaseAbciAttribute = {
    key?: string | undefined;
    value?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciGasInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gas_wanted - GasWanted is the maximum units of work we allow this tx to perform.
 *   - 1: gas_used - GasUsed is the amount of gas actually consumed.
 */
export declare const destructCosmosBaseAbciGasInfo: (g_struct: CosmosBaseAbciGasInfo) => [gas_wanted?: CwUint64, gas_used?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_GAS_INFO = "/cosmos.base.abci.v1beta1.GasInfo";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.GasInfo` - defines tx execution gas context.
 */
export type CosmosBaseAbciGasInfo = {
    gas_wanted?: CwUint64 | undefined;
    gas_used?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions. Deprecated. This field is still populated, but prefer msg_response instead because it also contains the Msg response typeURL.
 *   - 1: log - Log contains the log information from message or handler execution.
 *   - 2: events - Events contains a slice of Event objects that were emitted during message or handler execution.
 *   - 3: msg_responses - contains the Msg handler responses type packed in Anys. Since: cosmos-sdk 0.46
 */
export declare const destructCosmosBaseAbciResult: (g_struct: CosmosBaseAbciResult) => [data?: Uint8Array, log?: string, events?: TendermintAbciEvent[], msg_responses?: JsonAny[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_RESULT = "/cosmos.base.abci.v1beta1.Result";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.Result` - the union of ResponseFormat and ResponseCheckTx.
 */
export type CosmosBaseAbciResult = {
    data?: CwBase64 | undefined;
    log?: string | undefined;
    events?: TendermintAbciEvent[] | undefined;
    msg_responses?: JsonAny[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciSimulationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gas_info -
 *   - 1: result -
 */
export declare const destructCosmosBaseAbciSimulationResponse: (g_struct: CosmosBaseAbciSimulationResponse) => [gas_info?: CosmosBaseAbciGasInfo, result?: CosmosBaseAbciResult];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_SIMULATION_RESPONSE = "/cosmos.base.abci.v1beta1.SimulationResponse";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.SimulationResponse` - defines the response generated when a transaction is successfully simulated.
 */
export type CosmosBaseAbciSimulationResponse = {
    gas_info?: CosmosBaseAbciGasInfo | undefined;
    result?: CosmosBaseAbciResult | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciMsgData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_type -
 *   - 1: data -
 */
export declare const destructCosmosBaseAbciMsgData: (g_struct: CosmosBaseAbciMsgData) => [msg_type?: string, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_MSG_DATA = "/cosmos.base.abci.v1beta1.MsgData";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.MsgData` - defines the data returned in a Result object during message execution.
 */
export type CosmosBaseAbciMsgData = {
    msg_type?: string | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciTxMsgData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - field is deprecated and not populated.
 *   - 1: msg_responses - contains the Msg handler responses packed into Anys. Since: cosmos-sdk 0.46
 */
export declare const destructCosmosBaseAbciTxMsgData: (g_struct: CosmosBaseAbciTxMsgData) => [data?: CosmosBaseAbciMsgData[], msg_responses?: JsonAny[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_TX_MSG_DATA = "/cosmos.base.abci.v1beta1.TxMsgData";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.TxMsgData` - defines a list of MsgData. A transaction will have a MsgData object for each message.
 */
export type CosmosBaseAbciTxMsgData = {
    data?: CosmosBaseAbciMsgData[] | undefined;
    msg_responses?: JsonAny[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciSearchTxsResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_count - Count of all txs
 *   - 1: count - Count of txs in current page
 *   - 2: page_number - Index of current page, start from 1
 *   - 3: page_total - Count of total pages
 *   - 4: limit - Max count txs per page
 *   - 5: txs - List of txs in current page
 */
export declare const destructCosmosBaseAbciSearchTxsResult: (g_struct: CosmosBaseAbciSearchTxsResult) => [total_count?: CwUint64, count?: CwUint64, page_number?: CwUint64, page_total?: CwUint64, limit?: CwUint64, txs?: CosmosBaseAbciTxResponse[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_SEARCH_TXS_RESULT = "/cosmos.base.abci.v1beta1.SearchTxsResult";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.SearchTxsResult` - defines a structure for querying txs pageable
 */
export type CosmosBaseAbciSearchTxsResult = {
    total_count?: CwUint64 | undefined;
    count?: CwUint64 | undefined;
    page_number?: CwUint64 | undefined;
    page_total?: CwUint64 | undefined;
    limit?: CwUint64 | undefined;
    txs?: CosmosBaseAbciTxResponse[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosBaseAbciSearchBlocksResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_count - Count of all blocks
 *   - 1: count - Count of blocks in current page
 *   - 2: page_number - Index of current page, start from 1
 *   - 3: page_total - Count of total pages
 *   - 4: limit - Max count blocks per page
 *   - 5: blocks - List of blocks in current page
 */
export declare const destructCosmosBaseAbciSearchBlocksResult: (g_struct: CosmosBaseAbciSearchBlocksResult) => [total_count?: CwInt64, count?: CwInt64, page_number?: CwInt64, page_total?: CwInt64, limit?: CwInt64, blocks?: TendermintTypesBlock[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_SEARCH_BLOCKS_RESULT = "/cosmos.base.abci.v1beta1.SearchBlocksResult";
/**
 * JSON serialization of `cosmos.base.abci.v1beta1.SearchBlocksResult` - defines a structure for querying blocks pageable
 */
export type CosmosBaseAbciSearchBlocksResult = {
    total_count?: CwInt64 | undefined;
    count?: CwInt64 | undefined;
    page_number?: CwInt64 | undefined;
    page_total?: CwInt64 | undefined;
    limit?: CwInt64 | undefined;
    blocks?: TendermintTypesBlock[] | undefined;
};
