import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import { decodeTendermintAbciEvent } from '../../../../tendermint/abci/types.js';
import { decodeTendermintTypesBlock } from '../../../../tendermint/types/block.js';
/**
 * Encodes a `TxResponse` protobuf message: defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 * @param sg_height - `height`: The block height
 * @param s_txhash - `txhash`: The transaction hash.
 * @param s_codespace - `codespace`: Namespace for the Code
 * @param n_code - `code`: Response code.
 * @param s_data - `data`: Result bytes, if any.
 * @param s_raw_log - `raw_log`: The output of the application's logger (raw string). May be non-deterministic.
 * @param a_logs - `logs`: The output of the application's logger (typed). May be non-deterministic.
 * @param s_info - `info`: Additional information. May be non-deterministic.
 * @param sg_gas_wanted - `gas_wanted`: Amount of gas requested for transaction.
 * @param sg_gas_used - `gas_used`: Amount of gas consumed by transaction.
 * @param atu8_tx - `tx`: The request transaction bytes.
 * @param s_timestamp - `timestamp`: Time of the previous block. For heights > 1, it's the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it's genesis time.
 * @param a_events - `events`: Events defines all the events emitted by processing a transaction. Note, these events include those emitted by processing all the messages and those emitted from the ante. Whereas Logs contains the events, with additional metadata, emitted only by processing the messages. Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciTxResponse = (sg_height, s_txhash, s_codespace, n_code, s_data, s_raw_log, a_logs, s_info, sg_gas_wanted, sg_gas_used, atu8_tx, s_timestamp, a_events) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .s(s_txhash) // string txhash = 2
    .s(s_codespace) // string codespace = 3
    .v(n_code) // uint32 code = 4
    .s(s_data) // string data = 5
    .s(s_raw_log) // string raw_log = 6
    .B(a_logs) // ABCIMessageLog[] logs = 7
    .s(s_info) // string info = 8
    .g(sg_gas_wanted) // int32 gas_wanted = 9
    .g(sg_gas_used) // int32 gas_used = 10
    .b(atu8_tx) // Any tx = 11
    .s(s_timestamp) // string timestamp = 12
    .B(a_events) // Event[] events = 13
    .o;
/**
 * Encodes a `ABCIMessageLog` protobuf message: defines a structure containing an indexed tx ABCI message log.
 * @param n_msg_index - `msg_index`:
 * @param s_log - `log`:
 * @param a_events - `events`: Events contains a slice of Event objects that were emitted during some execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciABCIMessageLog = (n_msg_index, s_log, a_events) => Protobuf() // ...
    .v(n_msg_index) // uint32 msg_index = 1
    .s(s_log) // string log = 2
    .B(a_events) // StringEvent[] events = 3
    .o;
/**
 * Encodes a `StringEvent` protobuf message: defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 * @param s_type - `type`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciStringEvent = (s_type, a_attributes) => Protobuf() // ...
    .s(s_type) // string type = 1
    .B(a_attributes) // Attribute[] attributes = 2
    .o;
/**
 * Encodes a `Attribute` protobuf message: defines an attribute wrapper where the key and value are strings instead of raw bytes.
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciAttribute = (s_key, s_value) => Protobuf() // ...
    .s(s_key) // string key = 1
    .s(s_value) // string value = 2
    .o;
/**
 * Encodes a `GasInfo` protobuf message: defines tx execution gas context.
 * @param sg_gas_wanted - `gas_wanted`: GasWanted is the maximum units of work we allow this tx to perform.
 * @param sg_gas_used - `gas_used`: GasUsed is the amount of gas actually consumed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciGasInfo = (sg_gas_wanted, sg_gas_used) => Protobuf() // ...
    .g(sg_gas_wanted) // uint64 gas_wanted = 1
    .g(sg_gas_used) // uint64 gas_used = 2
    .o;
/**
 * Encodes a `Result` protobuf message: the union of ResponseFormat and ResponseCheckTx.
 * @param atu8_data - `data`: Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions. Deprecated. This field is still populated, but prefer msg_response instead because it also contains the Msg response typeURL.
 * @param s_log - `log`: Log contains the log information from message or handler execution.
 * @param a_events - `events`: Events contains a slice of Event objects that were emitted during message or handler execution.
 * @param a_msg_responses - `msg_responses`: contains the Msg handler responses type packed in Anys. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciResult = (atu8_data, s_log, a_events, a_msg_responses) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .s(s_log) // string log = 2
    .B(a_events) // Event[] events = 3
    .B(a_msg_responses) // Any[] msg_responses = 4
    .o;
/**
 * Encodes a `SimulationResponse` protobuf message: defines the response generated when a transaction is successfully simulated.
 * @param g_gas_info - `gas_info`:
 * @param g_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciSimulationResponse = (atu8_gas_info, atu8_result) => Protobuf() // ...
    .b(atu8_gas_info) // GasInfo gas_info = 1
    .b(atu8_result) // Result result = 2
    .o;
/**
 * Encodes a `MsgData` protobuf message: defines the data returned in a Result object during message execution.
 * @param s_msg_type - `msg_type`:
 * @param atu8_data - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciMsgData = (s_msg_type, atu8_data) => Protobuf() // ...
    .s(s_msg_type) // string msg_type = 1
    .b(atu8_data) // bytes data = 2
    .o;
/**
 * Encodes a `TxMsgData` protobuf message: defines a list of MsgData. A transaction will have a MsgData object for each message.
 * @param a_datas - `data`: field is deprecated and not populated.
 * @param a_msg_responses - `msg_responses`: contains the Msg handler responses packed into Anys. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciTxMsgData = (a_datas, a_msg_responses) => Protobuf() // ...
    .B(a_datas) // MsgData[] data = 1
    .B(a_msg_responses) // Any[] msg_responses = 2
    .o;
/**
 * Encodes a `SearchTxsResult` protobuf message: defines a structure for querying txs pageable
 * @param sg_total_count - `total_count`: Count of all txs
 * @param sg_count - `count`: Count of txs in current page
 * @param sg_page_number - `page_number`: Index of current page, start from 1
 * @param sg_page_total - `page_total`: Count of total pages
 * @param sg_limit - `limit`: Max count txs per page
 * @param a_txs - `txs`: List of txs in current page
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciSearchTxsResult = (sg_total_count, sg_count, sg_page_number, sg_page_total, sg_limit, a_txs) => Protobuf() // ...
    .g(sg_total_count) // uint64 total_count = 1
    .g(sg_count) // uint64 count = 2
    .g(sg_page_number) // uint64 page_number = 3
    .g(sg_page_total) // uint64 page_total = 4
    .g(sg_limit) // uint64 limit = 5
    .B(a_txs) // TxResponse[] txs = 6
    .o;
/**
 * Encodes a `SearchBlocksResult` protobuf message: defines a structure for querying blocks pageable
 * @param sg_total_count - `total_count`: Count of all blocks
 * @param sg_count - `count`: Count of blocks in current page
 * @param sg_page_number - `page_number`: Index of current page, start from 1
 * @param sg_page_total - `page_total`: Count of total pages
 * @param sg_limit - `limit`: Max count blocks per page
 * @param a_blocks - `blocks`: List of blocks in current page
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseAbciSearchBlocksResult = (sg_total_count, sg_count, sg_page_number, sg_page_total, sg_limit, a_blocks) => Protobuf() // ...
    .g(sg_total_count) // int32 total_count = 1
    .g(sg_count) // int32 count = 2
    .g(sg_page_number) // int32 page_number = 3
    .g(sg_page_total) // int32 page_total = 4
    .g(sg_limit) // int32 limit = 5
    .B(a_blocks) // Block[] blocks = 6
    .o;
/**
 * Decodes a protobuf Tx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciTxResponse}
 */
export const decodeCosmosBaseAbciTxResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 1, 5, 5, 0, 5, 3, 3, 1, 5, 0], [0, 0, 0, 0, 0, 0, decodeCosmosBaseAbciABCIMessageLog, 0, 0, 0, decodeGoogleProtobufAny, 0, decodeTendermintAbciEvent]);
/**
 * Decodes a protobuf ABCIMessageLog message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciABCIMessageLog}
 */
export const decodeCosmosBaseAbciABCIMessageLog = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 0], [0, 0, decodeCosmosBaseAbciStringEvent]);
/**
 * Decodes a protobuf StringEvent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciStringEvent}
 */
export const decodeCosmosBaseAbciStringEvent = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeCosmosBaseAbciAttribute]);
/**
 * Decodes a protobuf Attribute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciAttribute}
 */
export const decodeCosmosBaseAbciAttribute = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf GasInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciGasInfo}
 */
export const decodeCosmosBaseAbciGasInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf Result message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciResult}
 */
export const decodeCosmosBaseAbciResult = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 0, 0], [0, 0, decodeTendermintAbciEvent, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf Simulation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciSimulationResponse}
 */
export const decodeCosmosBaseAbciSimulationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosBaseAbciGasInfo, decodeCosmosBaseAbciResult]);
/**
 * Decodes a protobuf Data message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciMsgData}
 */
export const decodeCosmosBaseAbciMsgData = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf TxMsgData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciTxMsgData}
 */
export const decodeCosmosBaseAbciTxMsgData = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0], [decodeCosmosBaseAbciMsgData, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SearchTxsResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciSearchTxsResult}
 */
export const decodeCosmosBaseAbciSearchTxsResult = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, decodeCosmosBaseAbciTxResponse]);
/**
 * Decodes a protobuf SearchBlocksResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseAbciSearchBlocksResult}
 */
export const decodeCosmosBaseAbciSearchBlocksResult = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 3, 3, 3, 0], [0, 0, 0, 0, 0, decodeTendermintTypesBlock]);
/**
 * Destructures the fields of a {@link CosmosBaseAbciTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - The block height
 *   - 1: txhash - The transaction hash.
 *   - 2: codespace - Namespace for the Code
 *   - 3: code - Response code.
 *   - 4: data - Result bytes, if any.
 *   - 5: raw_log - The output of the application's logger (raw string). May be non-deterministic.
 *   - 6: logs - The output of the application's logger (typed). May be non-deterministic.
 *   - 7: info - Additional information. May be non-deterministic.
 *   - 8: gas_wanted - Amount of gas requested for transaction.
 *   - 9: gas_used - Amount of gas consumed by transaction.
 *   - 10: tx - The request transaction bytes.
 *   - 11: timestamp - Time of the previous block. For heights > 1, it's the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it's genesis time.
 *   - 12: events - Events defines all the events emitted by processing a transaction. Note, these events include those emitted by processing all the messages and those emitted from the ante. Whereas Logs contains the events, with additional metadata, emitted only by processing the messages. Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
 */
export const destructCosmosBaseAbciTxResponse = (g_struct) => [g_struct.height, g_struct.txhash, g_struct.codespace, g_struct.code, g_struct.data, g_struct.raw_log, g_struct.logs, g_struct.info, g_struct.gas_wanted, g_struct.gas_used, g_struct.tx, g_struct.timestamp, g_struct.events];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_TX_RESPONSE = '/cosmos.base.abci.v1beta1.TxResponse';
/**
 * Destructures the fields of a {@link CosmosBaseAbciABCIMessageLog} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_index -
 *   - 1: log -
 *   - 2: events - Events contains a slice of Event objects that were emitted during some execution.
 */
export const destructCosmosBaseAbciABCIMessageLog = (g_struct) => [g_struct.msg_index, g_struct.log, g_struct.events];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_A_B_C_I_MESSAGE_LOG = '/cosmos.base.abci.v1beta1.ABCIMessageLog';
/**
 * Destructures the fields of a {@link CosmosBaseAbciStringEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: attributes -
 */
export const destructCosmosBaseAbciStringEvent = (g_struct) => [g_struct.type, g_struct.attributes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_STRING_EVENT = '/cosmos.base.abci.v1beta1.StringEvent';
/**
 * Destructures the fields of a {@link CosmosBaseAbciAttribute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 */
export const destructCosmosBaseAbciAttribute = (g_struct) => [g_struct.key, g_struct.value];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_ATTRIBUTE = '/cosmos.base.abci.v1beta1.Attribute';
/**
 * Destructures the fields of a {@link CosmosBaseAbciGasInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gas_wanted - GasWanted is the maximum units of work we allow this tx to perform.
 *   - 1: gas_used - GasUsed is the amount of gas actually consumed.
 */
export const destructCosmosBaseAbciGasInfo = (g_struct) => [g_struct.gas_wanted, g_struct.gas_used];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_GAS_INFO = '/cosmos.base.abci.v1beta1.GasInfo';
/**
 * Destructures the fields of a {@link CosmosBaseAbciResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions. Deprecated. This field is still populated, but prefer msg_response instead because it also contains the Msg response typeURL.
 *   - 1: log - Log contains the log information from message or handler execution.
 *   - 2: events - Events contains a slice of Event objects that were emitted during message or handler execution.
 *   - 3: msg_responses - contains the Msg handler responses type packed in Anys. Since: cosmos-sdk 0.46
 */
export const destructCosmosBaseAbciResult = (g_struct) => [safe_base64_to_bytes(g_struct.data), g_struct.log, g_struct.events, g_struct.msg_responses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_RESULT = '/cosmos.base.abci.v1beta1.Result';
/**
 * Destructures the fields of a {@link CosmosBaseAbciSimulationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gas_info -
 *   - 1: result -
 */
export const destructCosmosBaseAbciSimulationResponse = (g_struct) => [g_struct.gas_info, g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_SIMULATION_RESPONSE = '/cosmos.base.abci.v1beta1.SimulationResponse';
/**
 * Destructures the fields of a {@link CosmosBaseAbciMsgData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: msg_type -
 *   - 1: data -
 */
export const destructCosmosBaseAbciMsgData = (g_struct) => [g_struct.msg_type, safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_MSG_DATA = '/cosmos.base.abci.v1beta1.MsgData';
/**
 * Destructures the fields of a {@link CosmosBaseAbciTxMsgData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - field is deprecated and not populated.
 *   - 1: msg_responses - contains the Msg handler responses packed into Anys. Since: cosmos-sdk 0.46
 */
export const destructCosmosBaseAbciTxMsgData = (g_struct) => [g_struct.data, g_struct.msg_responses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_TX_MSG_DATA = '/cosmos.base.abci.v1beta1.TxMsgData';
/**
 * Destructures the fields of a {@link CosmosBaseAbciSearchTxsResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_count - Count of all txs
 *   - 1: count - Count of txs in current page
 *   - 2: page_number - Index of current page, start from 1
 *   - 3: page_total - Count of total pages
 *   - 4: limit - Max count txs per page
 *   - 5: txs - List of txs in current page
 */
export const destructCosmosBaseAbciSearchTxsResult = (g_struct) => [g_struct.total_count, g_struct.count, g_struct.page_number, g_struct.page_total, g_struct.limit, g_struct.txs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_SEARCH_TXS_RESULT = '/cosmos.base.abci.v1beta1.SearchTxsResult';
/**
 * Destructures the fields of a {@link CosmosBaseAbciSearchBlocksResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_count - Count of all blocks
 *   - 1: count - Count of blocks in current page
 *   - 2: page_number - Index of current page, start from 1
 *   - 3: page_total - Count of total pages
 *   - 4: limit - Max count blocks per page
 *   - 5: blocks - List of blocks in current page
 */
export const destructCosmosBaseAbciSearchBlocksResult = (g_struct) => [g_struct.total_count, g_struct.count, g_struct.page_number, g_struct.page_total, g_struct.limit, g_struct.blocks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_ABCI_SEARCH_BLOCKS_RESULT = '/cosmos.base.abci.v1beta1.SearchBlocksResult';
//# sourceMappingURL=abci.js.map