import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `PageRequest` protobuf message: to be embedded in gRPC request messages for efficient pagination. Ex: message SomeRequest { Foo some_parameter = 1; PageRequest pagination = 2; }
 * @param atu8_key - `key`: a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
 * @param sg_offset - `offset`: a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
 * @param sg_limit - `limit`: the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 * @param b_count_total - `count_total`: set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
 * @param b_reverse - `reverse`: set to true if results are to be returned in the descending order. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseQueryPageRequest = (atu8_key, sg_offset, sg_limit, b_count_total, b_reverse) => Protobuf() // ...
    .b(atu8_key) // bytes key = 1
    .g(sg_offset) // uint64 offset = 2
    .g(sg_limit) // uint64 limit = 3
    .v(b_count_total) // boolean count_total = 4
    .v(b_reverse) // boolean reverse = 5
    .o;
/**
 * Encodes a `PageResponse` protobuf message: to be embedded in gRPC response messages where the corresponding request message has used PageRequest. message SomeResponse { repeated Bar results = 1; PageResponse page = 2; }
 * @param atu8_next_key - `next_key`: the key to be passed to PageRequest.key to query the next page most efficiently. It will be empty if there are no more results.
 * @param sg_total - `total`: total number of results available if PageRequest.count_total was set, its value is undefined otherwise
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseQueryPageResponse = (atu8_next_key, sg_total) => Protobuf() // ...
    .b(atu8_next_key) // bytes next_key = 1
    .g(sg_total) // uint64 total = 2
    .o;
/**
 * Decodes a protobuf PageRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseQueryPageRequest}
 */
export const decodeCosmosBaseQueryPageRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 3, 1, 1]);
/**
 * Decodes a protobuf Page message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseQueryPageResponse}
 */
export const decodeCosmosBaseQueryPageResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3]);
/**
 * Destructures the fields of a {@link CosmosBaseQueryPageRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key - a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
 *   - 1: offset - a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
 *   - 2: limit - the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
 *   - 3: count_total - set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
 *   - 4: reverse - set to true if results are to be returned in the descending order. Since: cosmos-sdk 0.43
 */
export const destructCosmosBaseQueryPageRequest = (g_struct) => [safe_base64_to_bytes(g_struct.key), g_struct.offset, g_struct.limit, g_struct.count_total, g_struct.reverse];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_QUERY_PAGE_REQUEST = '/cosmos.base.query.v1beta1.PageRequest';
/**
 * Destructures the fields of a {@link CosmosBaseQueryPageResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_key - the key to be passed to PageRequest.key to query the next page most efficiently. It will be empty if there are no more results.
 *   - 1: total - total number of results available if PageRequest.count_total was set, its value is undefined otherwise
 */
export const destructCosmosBaseQueryPageResponse = (g_struct) => [safe_base64_to_bytes(g_struct.next_key), g_struct.total];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_QUERY_PAGE_RESPONSE = '/cosmos.base.query.v1beta1.PageResponse';
//# sourceMappingURL=pagination.js.map