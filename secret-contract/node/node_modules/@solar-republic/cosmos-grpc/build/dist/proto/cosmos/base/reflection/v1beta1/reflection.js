/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../../api/transport.js';
const SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE = '/cosmos/base/reflection/v1beta1/interfaces';
/**
 * Lists all the interfaces registered in the interface registry.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: interface_names - an array of all the registered interfaces.
 */
export const queryCosmosBaseReflectionListAllInterfaces = restful_grpc(() => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE]);
/**
 * List all the concrete types that implement a given interface.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_interface_name - defines the interface to query the implementations for.
 * @returns a tuple where:
 *   - 0: implementation_message_names - the 'implementation_message_names' response property
 */
export const queryCosmosBaseReflectionListImplementations = restful_grpc(s_interface_name => [SR_LCD_COSMOS_BASE_REFLECTION_REFLECTIONSERVICE + '/' + s_interface_name + '/implementations']);
/**
 * Encodes a `ListAllInterfacesRequest` protobuf message: the request type of the ListAllInterfaces RPC.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionListAllInterfacesRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ListAllInterfacesResponse` protobuf message: the response type of the ListAllInterfaces RPC.
 * @param a_interface_names - `interface_names`: an array of all the registered interfaces.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionListAllInterfacesResponse = (a_interface_names) => Protobuf() // ...
    .S(a_interface_names) // string[] interface_names = 1
    .o;
/**
 * Encodes a `ListImplementationsRequest` protobuf message: the request type of the ListImplementations RPC.
 * @param s_interface_name - `interface_name`: defines the interface to query the implementations for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionListImplementationsRequest = (s_interface_name) => Protobuf() // ...
    .s(s_interface_name) // string interface_name = 1
    .o;
/**
 * Encodes a `ListImplementationsResponse` protobuf message: the response type of the ListImplementations RPC.
 * @param a_implementation_message_names - `implementation_message_names`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseReflectionListImplementationsResponse = (a_implementation_message_names) => Protobuf() // ...
    .S(a_implementation_message_names) // string[] implementation_message_names = 1
    .o;
/**
 * Decodes a protobuf ListAllInterfacesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListAllInterfacesRequest}
 */
export const decodeCosmosBaseReflectionListAllInterfacesRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ListAllInterfaces message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListAllInterfacesResponse}
 */
export const decodeCosmosBaseReflectionListAllInterfacesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf ListImplementationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListImplementationsRequest}
 */
export const decodeCosmosBaseReflectionListImplementationsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf ListImplementations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseReflectionListImplementationsResponse}
 */
export const decodeCosmosBaseReflectionListImplementationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListAllInterfacesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosBaseReflectionListAllInterfacesRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_ALL_INTERFACES_REQUEST = '/cosmos.base.reflection.v1beta1.ListAllInterfacesRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListAllInterfacesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interface_names - an array of all the registered interfaces.
 */
export const destructCosmosBaseReflectionListAllInterfacesResponse = (g_struct) => [g_struct.interface_names];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_ALL_INTERFACES_RESPONSE = '/cosmos.base.reflection.v1beta1.ListAllInterfacesResponse';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListImplementationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interface_name - defines the interface to query the implementations for.
 */
export const destructCosmosBaseReflectionListImplementationsRequest = (g_struct) => [g_struct.interface_name];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_IMPLEMENTATIONS_REQUEST = '/cosmos.base.reflection.v1beta1.ListImplementationsRequest';
/**
 * Destructures the fields of a {@link CosmosBaseReflectionListImplementationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: implementation_message_names -
 */
export const destructCosmosBaseReflectionListImplementationsResponse = (g_struct) => [g_struct.implementation_message_names];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_REFLECTION_LIST_IMPLEMENTATIONS_RESPONSE = '/cosmos.base.reflection.v1beta1.ListImplementationsResponse';
//# sourceMappingURL=reflection.js.map