import { parse_timestamp } from '../../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeTendermintTypesEvidenceList } from '../../../../tendermint/types/evidence.js';
import { decodeTendermintTypesData, decodeTendermintTypesCommit, decodeTendermintTypesBlockID } from '../../../../tendermint/types/types.js';
import { decodeTendermintVersionConsensus } from '../../../../tendermint/version/types.js';
/**
 * Encodes a `Block` protobuf message: tendermint type Block, with the Header proposer address field converted to bech32 string.
 * @param g_header - `header`:
 * @param g_data - `data`:
 * @param g_evidence - `evidence`:
 * @param g_last_commit - `last_commit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseTendermintBlock = (atu8_header, atu8_data, atu8_evidence, atu8_last_commit) => Protobuf() // ...
    .b(atu8_header) // Header header = 1
    .b(atu8_data) // Data data = 2
    .b(atu8_evidence) // EvidenceList evidence = 3
    .b(atu8_last_commit) // Commit last_commit = 4
    .o;
/**
 * Encodes a `Header` protobuf message: defines the structure of a Tendermint block header.
 * @param g_version - `version`: basic block info
 * @param si_chain - `chain_id`:
 * @param sg_height - `height`:
 * @param xt_time - `time`:
 * @param g_last_block_id - `last_block_id`: prev block info
 * @param atu8_last_commit_hash - `last_commit_hash`: hashes of block data
 * @param atu8_data_hash - `data_hash`:
 * @param atu8_validators_hash - `validators_hash`: hashes from the app output from the prev block
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_consensus_hash - `consensus_hash`:
 * @param atu8_app_hash - `app_hash`:
 * @param atu8_last_results_hash - `last_results_hash`:
 * @param atu8_evidence_hash - `evidence_hash`: consensus info
 * @param sa_proposer - `proposer_address`: the original block proposer address, formatted as a Bech32 string. In Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string for better UX.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseTendermintHeader = (atu8_version, si_chain, sg_height, xt_time, atu8_last_block_id, atu8_last_commit_hash, atu8_data_hash, atu8_validators_hash, atu8_next_validators_hash, atu8_consensus_hash, atu8_app_hash, atu8_last_results_hash, atu8_evidence_hash, sa_proposer) => Protobuf() // ...
    .b(atu8_version) // Consensus version = 1
    .s(si_chain) // string chain_id = 2
    .g(sg_height) // int32 height = 3
    .b(temporal(xt_time)) // Timestamp time = 4
    .b(atu8_last_block_id) // BlockID last_block_id = 5
    .b(atu8_last_commit_hash) // bytes last_commit_hash = 6
    .b(atu8_data_hash) // bytes data_hash = 7
    .b(atu8_validators_hash) // bytes validators_hash = 8
    .b(atu8_next_validators_hash) // bytes next_validators_hash = 9
    .b(atu8_consensus_hash) // bytes consensus_hash = 10
    .b(atu8_app_hash) // bytes app_hash = 11
    .b(atu8_last_results_hash) // bytes last_results_hash = 12
    .b(atu8_evidence_hash) // bytes evidence_hash = 13
    .s(sa_proposer) // string proposer_address = 14
    .o;
/**
 * Decodes a protobuf Block message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseTendermintBlock}
 */
export const decodeCosmosBaseTendermintBlock = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1], [decodeCosmosBaseTendermintHeader, decodeTendermintTypesData, decodeTendermintTypesEvidenceList, decodeTendermintTypesCommit]);
/**
 * Decodes a protobuf Header message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseTendermintHeader}
 */
export const decodeCosmosBaseTendermintHeader = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3, [3, 1], 1, 1, 1, 1, 1, 1, 1, 1, 1, 5], [decodeTendermintVersionConsensus, 0, 0, decode_temporal, decodeTendermintTypesBlockID]);
/**
 * Destructures the fields of a {@link CosmosBaseTendermintBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: header -
 *   - 1: data -
 *   - 2: evidence -
 *   - 3: last_commit -
 */
export const destructCosmosBaseTendermintBlock = (g_struct) => [g_struct.header, g_struct.data, g_struct.evidence, g_struct.last_commit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_TENDERMINT_BLOCK = '/cosmos.base.tendermint.v1beta1.Block';
/**
 * Destructures the fields of a {@link CosmosBaseTendermintHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version - basic block info
 *   - 1: chain_id -
 *   - 2: height -
 *   - 3: time -
 *   - 4: last_block_id - prev block info
 *   - 5: last_commit_hash - hashes of block data
 *   - 6: data_hash -
 *   - 7: validators_hash - hashes from the app output from the prev block
 *   - 8: next_validators_hash -
 *   - 9: consensus_hash -
 *   - 10: app_hash -
 *   - 11: last_results_hash -
 *   - 12: evidence_hash - consensus info
 *   - 13: proposer_address - the original block proposer address, formatted as a Bech32 string. In Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string for better UX.
 */
export const destructCosmosBaseTendermintHeader = (g_struct) => [g_struct.version, g_struct.chain_id, g_struct.height, parse_timestamp(g_struct.time), g_struct.last_block_id, safe_base64_to_bytes(g_struct.last_commit_hash), safe_base64_to_bytes(g_struct.data_hash), safe_base64_to_bytes(g_struct.validators_hash), safe_base64_to_bytes(g_struct.next_validators_hash), safe_base64_to_bytes(g_struct.consensus_hash), safe_base64_to_bytes(g_struct.app_hash), safe_base64_to_bytes(g_struct.last_results_hash), safe_base64_to_bytes(g_struct.evidence_hash), g_struct.proposer_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_TENDERMINT_HEADER = '/cosmos.base.tendermint.v1beta1.Header';
//# sourceMappingURL=types.js.map