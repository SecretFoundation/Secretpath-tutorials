/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Coin` protobuf message: defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @param s_denom - `denom`:
 * @param s_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseCoin = (s_denom, s_amount) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .s(s_amount) // string amount = 2
    .o;
/**
 * Encodes a `DecCoin` protobuf message: defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 * @param s_denom - `denom`:
 * @param s_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosBaseDecCoin = (s_denom, s_amount) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .s(s_amount) // string amount = 2
    .o;
/**
 * Decodes a protobuf Coin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseCoin}
 */
export const decodeCosmosBaseCoin = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf DecCoin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosBaseDecCoin}
 */
export const decodeCosmosBaseDecCoin = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Destructures the fields of a {@link CosmosBaseCoin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: amount -
 */
export const destructCosmosBaseCoin = (g_struct) => [g_struct.denom, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_COIN = '/cosmos.base.v1beta1.Coin';
/**
 * Destructures the fields of a {@link CosmosBaseDecCoin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: amount -
 */
export const destructCosmosBaseDecCoin = (g_struct) => [g_struct.denom, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_BASE_DEC_COIN = '/cosmos.base.v1beta1.DecCoin';
//# sourceMappingURL=coin.js.map