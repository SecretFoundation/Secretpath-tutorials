import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosCircuitPermissions, DecodedCosmosCircuitPermissions } from './types.js';
export type EncodedCosmosCircuitMsgAuthorizeCircuitBreaker = Encoded<'/cosmos.circuit.v1.MsgAuthorizeCircuitBreaker'>;
export type EncodedCosmosCircuitMsgAuthorizeCircuitBreakerResponse = Encoded<'/cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse'>;
export type EncodedCosmosCircuitMsgTripCircuitBreaker = Encoded<'/cosmos.circuit.v1.MsgTripCircuitBreaker'>;
export type EncodedCosmosCircuitMsgTripCircuitBreakerResponse = Encoded<'/cosmos.circuit.v1.MsgTripCircuitBreakerResponse'>;
export type EncodedCosmosCircuitMsgResetCircuitBreaker = Encoded<'/cosmos.circuit.v1.MsgResetCircuitBreaker'>;
export type EncodedCosmosCircuitMsgResetCircuitBreakerResponse = Encoded<'/cosmos.circuit.v1.MsgResetCircuitBreakerResponse'>;
/**
 * Encodes a `MsgAuthorizeCircuitBreaker` protobuf message: defines the Msg/AuthorizeCircuitBreaker request type.
 * @param sa_granter - `granter`: the granter of the circuit breaker permissions and must have LEVEL_SUPER_ADMIN.
 * @param sa_grantee - `grantee`: the account authorized with the provided permissions.
 * @param g_permissions - `permissions`: the circuit breaker permissions that the grantee receives. These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can be specified to revoke all permissions.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCircuitMsgAuthorizeCircuitBreaker: (sa_granter?: Opt<WeakAccountAddr>, sa_grantee?: Opt<WeakAccountAddr>, atu8_permissions?: Opt<Encoded<'/cosmos.circuit.v1.Permissions'>>) => EncodedCosmosCircuitMsgAuthorizeCircuitBreaker;
/**
 * Encodes a `MsgAuthorizeCircuitBreakerResponse` protobuf message: defines the Msg/AuthorizeCircuitBreaker response type.
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCircuitMsgAuthorizeCircuitBreakerResponse: (b_success?: Opt<boolean | 0 | 1>) => EncodedCosmosCircuitMsgAuthorizeCircuitBreakerResponse;
/**
 * Encodes a `MsgTripCircuitBreaker` protobuf message: defines the Msg/TripCircuitBreaker request type.
 * @param s_authority - `authority`: the account authorized to trip the circuit breaker.
 * @param a_msg_type_urls - `msg_type_urls`: specifies a list of type URLs to immediately stop processing. IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY. This value is validated against the authority's permissions and if the authority does not have permissions to trip the specified msg type URLs (or all URLs), the operation will fail.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCircuitMsgTripCircuitBreaker: (s_authority?: Opt<string>, a_msg_type_urls?: Opt<string[]>) => EncodedCosmosCircuitMsgTripCircuitBreaker;
/**
 * Encodes a `MsgTripCircuitBreakerResponse` protobuf message: defines the Msg/TripCircuitBreaker response type.
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCircuitMsgTripCircuitBreakerResponse: (b_success?: Opt<boolean | 0 | 1>) => EncodedCosmosCircuitMsgTripCircuitBreakerResponse;
/**
 * Encodes a `MsgResetCircuitBreaker` protobuf message: defines the Msg/ResetCircuitBreaker request type.
 * @param s_authority - `authority`: the account authorized to trip or reset the circuit breaker.
 * @param a_msg_type_urls - `msg_type_urls`: specifies a list of Msg type URLs to resume processing. If it is left empty all Msg processing for type URLs that the account is authorized to trip will resume.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCircuitMsgResetCircuitBreaker: (s_authority?: Opt<string>, a_msg_type_urls?: Opt<string[]>) => EncodedCosmosCircuitMsgResetCircuitBreaker;
/**
 * Encodes a `MsgResetCircuitBreakerResponse` protobuf message: defines the Msg/ResetCircuitBreaker response type.
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCircuitMsgResetCircuitBreakerResponse: (b_success?: Opt<boolean | 0 | 1>) => EncodedCosmosCircuitMsgResetCircuitBreakerResponse;
/**
 * A decoded protobuf AuthorizeCircuitBreaker message
 *
 * Tuple where:
 *   - 0: granter - the granter of the circuit breaker permissions and must have LEVEL_SUPER_ADMIN.
 *   - 1: grantee - the account authorized with the provided permissions.
 *   - 2: permissions - the circuit breaker permissions that the grantee receives. These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can be specified to revoke all permissions.
 */
export type DecodedCosmosCircuitMsgAuthorizeCircuitBreaker = [
    sa_granter?: CwAccountAddr,
    sa_grantee?: CwAccountAddr,
    a_permissions?: DecodedCosmosCircuitPermissions
];
/**
 * Decodes a protobuf AuthorizeCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgAuthorizeCircuitBreaker}
 */
export declare const decodeCosmosCircuitMsgAuthorizeCircuitBreaker: (atu8_payload: Uint8Array) => DecodedCosmosCircuitMsgAuthorizeCircuitBreaker;
/**
 * A decoded protobuf AuthorizeCircuitBreaker message
 *
 * Alias for: success -
 */
export type DecodedCosmosCircuitMsgAuthorizeCircuitBreakerResponse = [
    b_success?: 0 | 1
];
/**
 * Decodes a protobuf AuthorizeCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgAuthorizeCircuitBreakerResponse}
 */
export declare const decodeCosmosCircuitMsgAuthorizeCircuitBreakerResponse: (atu8_payload: Uint8Array) => DecodedCosmosCircuitMsgAuthorizeCircuitBreakerResponse;
/**
 * A decoded protobuf TripCircuitBreaker message
 *
 * Tuple where:
 *   - 0: authority - the account authorized to trip the circuit breaker.
 *   - 1: msg_type_urls - specifies a list of type URLs to immediately stop processing. IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY. This value is validated against the authority's permissions and if the authority does not have permissions to trip the specified msg type URLs (or all URLs), the operation will fail.
 */
export type DecodedCosmosCircuitMsgTripCircuitBreaker = [
    s_authority?: string,
    a_msg_type_urls?: string[]
];
/**
 * Decodes a protobuf TripCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgTripCircuitBreaker}
 */
export declare const decodeCosmosCircuitMsgTripCircuitBreaker: (atu8_payload: Uint8Array) => DecodedCosmosCircuitMsgTripCircuitBreaker;
/**
 * A decoded protobuf TripCircuitBreaker message
 *
 * Alias for: success -
 */
export type DecodedCosmosCircuitMsgTripCircuitBreakerResponse = [
    b_success?: 0 | 1
];
/**
 * Decodes a protobuf TripCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgTripCircuitBreakerResponse}
 */
export declare const decodeCosmosCircuitMsgTripCircuitBreakerResponse: (atu8_payload: Uint8Array) => DecodedCosmosCircuitMsgTripCircuitBreakerResponse;
/**
 * A decoded protobuf ResetCircuitBreaker message
 *
 * Tuple where:
 *   - 0: authority - the account authorized to trip or reset the circuit breaker.
 *   - 2: msg_type_urls - specifies a list of Msg type URLs to resume processing. If it is left empty all Msg processing for type URLs that the account is authorized to trip will resume.
 */
export type DecodedCosmosCircuitMsgResetCircuitBreaker = [
    s_authority?: string,
    w_0?: undefined,
    a_msg_type_urls?: string[]
];
/**
 * Decodes a protobuf ResetCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosCircuitMsgResetCircuitBreaker}
 */
export declare const decodeCosmosCircuitMsgResetCircuitBreaker: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosCircuitMsgResetCircuitBreaker;
/**
 * A decoded protobuf ResetCircuitBreaker message
 *
 * Alias for: success -
 */
export type DecodedCosmosCircuitMsgResetCircuitBreakerResponse = [
    b_success?: 0 | 1
];
/**
 * Decodes a protobuf ResetCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgResetCircuitBreakerResponse}
 */
export declare const decodeCosmosCircuitMsgResetCircuitBreakerResponse: (atu8_payload: Uint8Array) => DecodedCosmosCircuitMsgResetCircuitBreakerResponse;
/**
 * Destructures the fields of a {@link CosmosCircuitMsgAuthorizeCircuitBreaker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: granter - the granter of the circuit breaker permissions and must have LEVEL_SUPER_ADMIN.
 *   - 1: grantee - the account authorized with the provided permissions.
 *   - 2: permissions - the circuit breaker permissions that the grantee receives. These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can be specified to revoke all permissions.
 */
export declare const destructCosmosCircuitMsgAuthorizeCircuitBreaker: (g_struct: CosmosCircuitMsgAuthorizeCircuitBreaker) => [granter?: CwAccountAddr, grantee?: CwAccountAddr, permissions?: CosmosCircuitPermissions];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_AUTHORIZE_CIRCUIT_BREAKER = "/cosmos.circuit.v1.MsgAuthorizeCircuitBreaker";
/**
 * JSON serialization of `cosmos.circuit.v1.MsgAuthorizeCircuitBreaker` - defines the Msg/AuthorizeCircuitBreaker request type.
 */
export type CosmosCircuitMsgAuthorizeCircuitBreaker = {
    granter?: CwAccountAddr | undefined;
    grantee?: CwAccountAddr | undefined;
    permissions?: CosmosCircuitPermissions | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCircuitMsgAuthorizeCircuitBreakerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export declare const destructCosmosCircuitMsgAuthorizeCircuitBreakerResponse: (g_struct: CosmosCircuitMsgAuthorizeCircuitBreakerResponse) => [success?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_AUTHORIZE_CIRCUIT_BREAKER_RESPONSE = "/cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse";
/**
 * JSON serialization of `cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse` - defines the Msg/AuthorizeCircuitBreaker response type.
 */
export type CosmosCircuitMsgAuthorizeCircuitBreakerResponse = {
    success?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCircuitMsgTripCircuitBreaker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the account authorized to trip the circuit breaker.
 *   - 1: msg_type_urls - specifies a list of type URLs to immediately stop processing. IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY. This value is validated against the authority's permissions and if the authority does not have permissions to trip the specified msg type URLs (or all URLs), the operation will fail.
 */
export declare const destructCosmosCircuitMsgTripCircuitBreaker: (g_struct: CosmosCircuitMsgTripCircuitBreaker) => [authority?: string, msg_type_urls?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_TRIP_CIRCUIT_BREAKER = "/cosmos.circuit.v1.MsgTripCircuitBreaker";
/**
 * JSON serialization of `cosmos.circuit.v1.MsgTripCircuitBreaker` - defines the Msg/TripCircuitBreaker request type.
 */
export type CosmosCircuitMsgTripCircuitBreaker = {
    authority?: string | undefined;
    msg_type_urls?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCircuitMsgTripCircuitBreakerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export declare const destructCosmosCircuitMsgTripCircuitBreakerResponse: (g_struct: CosmosCircuitMsgTripCircuitBreakerResponse) => [success?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_TRIP_CIRCUIT_BREAKER_RESPONSE = "/cosmos.circuit.v1.MsgTripCircuitBreakerResponse";
/**
 * JSON serialization of `cosmos.circuit.v1.MsgTripCircuitBreakerResponse` - defines the Msg/TripCircuitBreaker response type.
 */
export type CosmosCircuitMsgTripCircuitBreakerResponse = {
    success?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCircuitMsgResetCircuitBreaker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the account authorized to trip or reset the circuit breaker.
 *   - 2: msg_type_urls - specifies a list of Msg type URLs to resume processing. If it is left empty all Msg processing for type URLs that the account is authorized to trip will resume.
 */
export declare const destructCosmosCircuitMsgResetCircuitBreaker: (g_struct: CosmosCircuitMsgResetCircuitBreaker) => [authority?: string, EMPTY?: void, msg_type_urls?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_RESET_CIRCUIT_BREAKER = "/cosmos.circuit.v1.MsgResetCircuitBreaker";
/**
 * JSON serialization of `cosmos.circuit.v1.MsgResetCircuitBreaker` - defines the Msg/ResetCircuitBreaker request type.
 */
export type CosmosCircuitMsgResetCircuitBreaker = {
    authority?: string | undefined;
    msg_type_urls?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCircuitMsgResetCircuitBreakerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export declare const destructCosmosCircuitMsgResetCircuitBreakerResponse: (g_struct: CosmosCircuitMsgResetCircuitBreakerResponse) => [success?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_RESET_CIRCUIT_BREAKER_RESPONSE = "/cosmos.circuit.v1.MsgResetCircuitBreakerResponse";
/**
 * JSON serialization of `cosmos.circuit.v1.MsgResetCircuitBreakerResponse` - defines the Msg/ResetCircuitBreaker response type.
 */
export type CosmosCircuitMsgResetCircuitBreakerResponse = {
    success?: boolean | undefined;
};
