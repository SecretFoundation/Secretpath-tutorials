import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeCosmosCircuitPermissions } from './types.js';
/**
 * Encodes a `MsgAuthorizeCircuitBreaker` protobuf message: defines the Msg/AuthorizeCircuitBreaker request type.
 * @param sa_granter - `granter`: the granter of the circuit breaker permissions and must have LEVEL_SUPER_ADMIN.
 * @param sa_grantee - `grantee`: the account authorized with the provided permissions.
 * @param g_permissions - `permissions`: the circuit breaker permissions that the grantee receives. These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can be specified to revoke all permissions.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCircuitMsgAuthorizeCircuitBreaker = (sa_granter, sa_grantee, atu8_permissions) => Protobuf() // ...
    .s(sa_granter) // string granter = 1
    .s(sa_grantee) // string grantee = 2
    .b(atu8_permissions) // Permissions permissions = 3
    .o;
/**
 * Encodes a `MsgAuthorizeCircuitBreakerResponse` protobuf message: defines the Msg/AuthorizeCircuitBreaker response type.
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCircuitMsgAuthorizeCircuitBreakerResponse = (b_success) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .o;
/**
 * Encodes a `MsgTripCircuitBreaker` protobuf message: defines the Msg/TripCircuitBreaker request type.
 * @param s_authority - `authority`: the account authorized to trip the circuit breaker.
 * @param a_msg_type_urls - `msg_type_urls`: specifies a list of type URLs to immediately stop processing. IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY. This value is validated against the authority's permissions and if the authority does not have permissions to trip the specified msg type URLs (or all URLs), the operation will fail.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCircuitMsgTripCircuitBreaker = (s_authority, a_msg_type_urls) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .S(a_msg_type_urls) // string[] msg_type_urls = 2
    .o;
/**
 * Encodes a `MsgTripCircuitBreakerResponse` protobuf message: defines the Msg/TripCircuitBreaker response type.
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCircuitMsgTripCircuitBreakerResponse = (b_success) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .o;
/**
 * Encodes a `MsgResetCircuitBreaker` protobuf message: defines the Msg/ResetCircuitBreaker request type.
 * @param s_authority - `authority`: the account authorized to trip or reset the circuit breaker.
 * @param a_msg_type_urls - `msg_type_urls`: specifies a list of Msg type URLs to resume processing. If it is left empty all Msg processing for type URLs that the account is authorized to trip will resume.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCircuitMsgResetCircuitBreaker = (s_authority, a_msg_type_urls) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .S(a_msg_type_urls, 3) // string[] msg_type_urls = 3
    .o;
/**
 * Encodes a `MsgResetCircuitBreakerResponse` protobuf message: defines the Msg/ResetCircuitBreaker response type.
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosCircuitMsgResetCircuitBreakerResponse = (b_success) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .o;
/**
 * Decodes a protobuf AuthorizeCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgAuthorizeCircuitBreaker}
 */
export const decodeCosmosCircuitMsgAuthorizeCircuitBreaker = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeCosmosCircuitPermissions]);
/**
 * Decodes a protobuf AuthorizeCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgAuthorizeCircuitBreakerResponse}
 */
export const decodeCosmosCircuitMsgAuthorizeCircuitBreakerResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf TripCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgTripCircuitBreaker}
 */
export const decodeCosmosCircuitMsgTripCircuitBreaker = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf TripCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgTripCircuitBreakerResponse}
 */
export const decodeCosmosCircuitMsgTripCircuitBreakerResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ResetCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosCircuitMsgResetCircuitBreaker}
 */
export const decodeCosmosCircuitMsgResetCircuitBreaker = ((atu8_payload, [s_authority, , a_msg_type_urls] = decode_protobuf(atu8_payload, [5, 0, 4])) => [s_authority, __UNDEFINED, a_msg_type_urls]);
/**
 * Decodes a protobuf ResetCircuitBreaker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCircuitMsgResetCircuitBreakerResponse}
 */
export const decodeCosmosCircuitMsgResetCircuitBreakerResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link CosmosCircuitMsgAuthorizeCircuitBreaker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: granter - the granter of the circuit breaker permissions and must have LEVEL_SUPER_ADMIN.
 *   - 1: grantee - the account authorized with the provided permissions.
 *   - 2: permissions - the circuit breaker permissions that the grantee receives. These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can be specified to revoke all permissions.
 */
export const destructCosmosCircuitMsgAuthorizeCircuitBreaker = (g_struct) => [g_struct.granter, g_struct.grantee, g_struct.permissions];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_AUTHORIZE_CIRCUIT_BREAKER = '/cosmos.circuit.v1.MsgAuthorizeCircuitBreaker';
/**
 * Destructures the fields of a {@link CosmosCircuitMsgAuthorizeCircuitBreakerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export const destructCosmosCircuitMsgAuthorizeCircuitBreakerResponse = (g_struct) => [g_struct.success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_AUTHORIZE_CIRCUIT_BREAKER_RESPONSE = '/cosmos.circuit.v1.MsgAuthorizeCircuitBreakerResponse';
/**
 * Destructures the fields of a {@link CosmosCircuitMsgTripCircuitBreaker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the account authorized to trip the circuit breaker.
 *   - 1: msg_type_urls - specifies a list of type URLs to immediately stop processing. IF IT IS LEFT EMPTY, ALL MSG PROCESSING WILL STOP IMMEDIATELY. This value is validated against the authority's permissions and if the authority does not have permissions to trip the specified msg type URLs (or all URLs), the operation will fail.
 */
export const destructCosmosCircuitMsgTripCircuitBreaker = (g_struct) => [g_struct.authority, g_struct.msg_type_urls];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_TRIP_CIRCUIT_BREAKER = '/cosmos.circuit.v1.MsgTripCircuitBreaker';
/**
 * Destructures the fields of a {@link CosmosCircuitMsgTripCircuitBreakerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export const destructCosmosCircuitMsgTripCircuitBreakerResponse = (g_struct) => [g_struct.success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_TRIP_CIRCUIT_BREAKER_RESPONSE = '/cosmos.circuit.v1.MsgTripCircuitBreakerResponse';
/**
 * Destructures the fields of a {@link CosmosCircuitMsgResetCircuitBreaker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the account authorized to trip or reset the circuit breaker.
 *   - 2: msg_type_urls - specifies a list of Msg type URLs to resume processing. If it is left empty all Msg processing for type URLs that the account is authorized to trip will resume.
 */
export const destructCosmosCircuitMsgResetCircuitBreaker = (g_struct) => [g_struct.authority, __UNDEFINED, g_struct.msg_type_urls];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_RESET_CIRCUIT_BREAKER = '/cosmos.circuit.v1.MsgResetCircuitBreaker';
/**
 * Destructures the fields of a {@link CosmosCircuitMsgResetCircuitBreakerResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export const destructCosmosCircuitMsgResetCircuitBreakerResponse = (g_struct) => [g_struct.success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_CIRCUIT_MSG_RESET_CIRCUIT_BREAKER_RESPONSE = '/cosmos.circuit.v1.MsgResetCircuitBreakerResponse';
//# sourceMappingURL=tx.js.map