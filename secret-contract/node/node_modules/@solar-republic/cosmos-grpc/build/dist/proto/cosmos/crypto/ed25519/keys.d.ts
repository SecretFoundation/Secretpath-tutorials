import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosCryptoEd25519PubKey = Encoded<'/cosmos.crypto.ed25519.PubKey'>;
export type EncodedCosmosCryptoEd25519PrivKey = Encoded<'/cosmos.crypto.ed25519.PrivKey'>;
/**
 * Encodes a `PubKey` protobuf message: an ed25519 public key for handling Tendermint keys in SDK. It's needed for Any serialization and SDK compatibility. It must not be used in a non Tendermint key context because it doesn't implement ADR-28. Nevertheless, you will like to use ed25519 in app user level then you must create a new proto message and follow ADR-28 for Address construction.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoEd25519PubKey: (atu8_key?: Opt<Uint8Array>) => EncodedCosmosCryptoEd25519PubKey;
/**
 * Encodes a `PrivKey` protobuf message: defines a ed25519 private key. NOTE: ed25519 keys must not be used in SDK apps except in a tendermint validator context.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoEd25519PrivKey: (atu8_key?: Opt<Uint8Array>) => EncodedCosmosCryptoEd25519PrivKey;
/**
 * A decoded protobuf PubKey message
 *
 * Alias for: key -
 */
export type DecodedCosmosCryptoEd25519PubKey = [
    atu8_key?: Uint8Array
];
/**
 * Decodes a protobuf PubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoEd25519PubKey}
 */
export declare const decodeCosmosCryptoEd25519PubKey: (atu8_payload: Uint8Array) => DecodedCosmosCryptoEd25519PubKey;
/**
 * A decoded protobuf PrivKey message
 *
 * Alias for: key -
 */
export type DecodedCosmosCryptoEd25519PrivKey = [
    atu8_key?: Uint8Array
];
/**
 * Decodes a protobuf PrivKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoEd25519PrivKey}
 */
export declare const decodeCosmosCryptoEd25519PrivKey: (atu8_payload: Uint8Array) => DecodedCosmosCryptoEd25519PrivKey;
/**
 * Destructures the fields of a {@link CosmosCryptoEd25519PubKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export declare const destructCosmosCryptoEd25519PubKey: (g_struct: CosmosCryptoEd25519PubKey) => [key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_ED25519_PUB_KEY = "/cosmos.crypto.ed25519.PubKey";
/**
 * JSON serialization of `cosmos.crypto.ed25519.PubKey` - an ed25519 public key for handling Tendermint keys in SDK. It's needed for Any serialization and SDK compatibility. It must not be used in a non Tendermint key context because it doesn't implement ADR-28. Nevertheless, you will like to use ed25519 in app user level then you must create a new proto message and follow ADR-28 for Address construction.
 */
export type CosmosCryptoEd25519PubKey = {
    key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoEd25519PrivKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export declare const destructCosmosCryptoEd25519PrivKey: (g_struct: CosmosCryptoEd25519PrivKey) => [key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_ED25519_PRIV_KEY = "/cosmos.crypto.ed25519.PrivKey";
/**
 * JSON serialization of `cosmos.crypto.ed25519.PrivKey` - defines a ed25519 private key. NOTE: ed25519 keys must not be used in SDK apps except in a tendermint validator context.
 */
export type CosmosCryptoEd25519PrivKey = {
    key?: CwBase64 | undefined;
};
