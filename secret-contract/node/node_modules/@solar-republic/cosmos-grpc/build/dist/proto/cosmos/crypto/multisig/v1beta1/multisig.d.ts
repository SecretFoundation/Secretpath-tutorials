import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedCosmosCryptoMultisigMultiSignature = Encoded<'/cosmos.crypto.multisig.v1beta1.MultiSignature'>;
export type EncodedCosmosCryptoMultisigCompactBitArray = Encoded<'/cosmos.crypto.multisig.v1beta1.CompactBitArray'>;
/**
 * Encodes a `MultiSignature` protobuf message: wraps the signatures from a multisig.LegacyAminoPubKey. See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers signed and with which modes.
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoMultisigMultiSignature: (a_signatures?: Opt<Uint8Array[]>) => EncodedCosmosCryptoMultisigMultiSignature;
/**
 * Encodes a `CompactBitArray` protobuf message: an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage.
 * @param n_extra_bits_stored - `extra_bits_stored`:
 * @param atu8_elems - `elems`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoMultisigCompactBitArray: (n_extra_bits_stored?: Opt<number>, atu8_elems?: Opt<Uint8Array>) => EncodedCosmosCryptoMultisigCompactBitArray;
/**
 * A decoded protobuf MultiSignature message
 *
 * Alias for: signatures -
 */
export type DecodedCosmosCryptoMultisigMultiSignature = [
    a_signatures?: Uint8Array[]
];
/**
 * Decodes a protobuf MultiSignature message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoMultisigMultiSignature}
 */
export declare const decodeCosmosCryptoMultisigMultiSignature: (atu8_payload: Uint8Array) => DecodedCosmosCryptoMultisigMultiSignature;
/**
 * A decoded protobuf CompactBitArray message
 *
 * Tuple where:
 *   - 0: extra_bits_stored -
 *   - 1: elems -
 */
export type DecodedCosmosCryptoMultisigCompactBitArray = [
    n_extra_bits_stored?: number,
    atu8_elems?: Uint8Array
];
/**
 * Decodes a protobuf CompactBitArray message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoMultisigCompactBitArray}
 */
export declare const decodeCosmosCryptoMultisigCompactBitArray: (atu8_payload: Uint8Array) => DecodedCosmosCryptoMultisigCompactBitArray;
/**
 * Destructures the fields of a {@link CosmosCryptoMultisigMultiSignature} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signatures -
 */
export declare const destructCosmosCryptoMultisigMultiSignature: (g_struct: CosmosCryptoMultisigMultiSignature) => [signatures?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_MULTISIG_MULTI_SIGNATURE = "/cosmos.crypto.multisig.v1beta1.MultiSignature";
/**
 * JSON serialization of `cosmos.crypto.multisig.v1beta1.MultiSignature` - wraps the signatures from a multisig.LegacyAminoPubKey. See cosmos.tx.v1betata1.ModeInfo.Multi for how to specify which signers signed and with which modes.
 */
export type CosmosCryptoMultisigMultiSignature = {
    signatures?: CwBase64[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoMultisigCompactBitArray} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: extra_bits_stored -
 *   - 1: elems -
 */
export declare const destructCosmosCryptoMultisigCompactBitArray: (g_struct: CosmosCryptoMultisigCompactBitArray) => [extra_bits_stored?: number, elems?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_MULTISIG_COMPACT_BIT_ARRAY = "/cosmos.crypto.multisig.v1beta1.CompactBitArray";
/**
 * JSON serialization of `cosmos.crypto.multisig.v1beta1.CompactBitArray` - an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage.
 */
export type CosmosCryptoMultisigCompactBitArray = {
    extra_bits_stored?: number | undefined;
    elems?: CwBase64 | undefined;
};
