import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosCryptoSecp256k1PubKey = Encoded<'/cosmos.crypto.secp256k1.PubKey'>;
export type EncodedCosmosCryptoSecp256k1PrivKey = Encoded<'/cosmos.crypto.secp256k1.PrivKey'>;
/**
 * Encodes a `PubKey` protobuf message: defines a secp256k1 public key Key is the compressed form of the pubkey. The first byte depends is a 0x02 byte if the y-coordinate is the lexicographically largest of the two associated with the x-coordinate. Otherwise the first byte is a 0x03. This prefix is followed with the x-coordinate.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoSecp256k1PubKey: (atu8_key?: Opt<Uint8Array>) => EncodedCosmosCryptoSecp256k1PubKey;
/**
 * Encodes a `PrivKey` protobuf message: defines a secp256k1 private key.
 * @param atu8_key - `key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoSecp256k1PrivKey: (atu8_key?: Opt<Uint8Array>) => EncodedCosmosCryptoSecp256k1PrivKey;
/**
 * A decoded protobuf PubKey message
 *
 * Alias for: key -
 */
export type DecodedCosmosCryptoSecp256k1PubKey = [
    atu8_key?: Uint8Array
];
/**
 * Decodes a protobuf PubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256k1PubKey}
 */
export declare const decodeCosmosCryptoSecp256k1PubKey: (atu8_payload: Uint8Array) => DecodedCosmosCryptoSecp256k1PubKey;
/**
 * A decoded protobuf PrivKey message
 *
 * Alias for: key -
 */
export type DecodedCosmosCryptoSecp256k1PrivKey = [
    atu8_key?: Uint8Array
];
/**
 * Decodes a protobuf PrivKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256k1PrivKey}
 */
export declare const decodeCosmosCryptoSecp256k1PrivKey: (atu8_payload: Uint8Array) => DecodedCosmosCryptoSecp256k1PrivKey;
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256k1PubKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export declare const destructCosmosCryptoSecp256k1PubKey: (g_struct: CosmosCryptoSecp256k1PubKey) => [key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256K1_PUB_KEY = "/cosmos.crypto.secp256k1.PubKey";
/**
 * JSON serialization of `cosmos.crypto.secp256k1.PubKey` - defines a secp256k1 public key Key is the compressed form of the pubkey. The first byte depends is a 0x02 byte if the y-coordinate is the lexicographically largest of the two associated with the x-coordinate. Otherwise the first byte is a 0x03. This prefix is followed with the x-coordinate.
 */
export type CosmosCryptoSecp256k1PubKey = {
    key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256k1PrivKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 */
export declare const destructCosmosCryptoSecp256k1PrivKey: (g_struct: CosmosCryptoSecp256k1PrivKey) => [key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256K1_PRIV_KEY = "/cosmos.crypto.secp256k1.PrivKey";
/**
 * JSON serialization of `cosmos.crypto.secp256k1.PrivKey` - defines a secp256k1 private key.
 */
export type CosmosCryptoSecp256k1PrivKey = {
    key?: CwBase64 | undefined;
};
