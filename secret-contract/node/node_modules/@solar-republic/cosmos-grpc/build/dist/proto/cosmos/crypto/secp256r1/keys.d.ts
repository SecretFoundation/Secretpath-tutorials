import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosCryptoSecp256r1PubKey = Encoded<'/cosmos.crypto.secp256r1.PubKey'>;
export type EncodedCosmosCryptoSecp256r1PrivKey = Encoded<'/cosmos.crypto.secp256r1.PrivKey'>;
/**
 * Encodes a `PubKey` protobuf message: defines a secp256r1 ECDSA public key.
 * @param atu8_key - `key`: Point on secp256r1 curve in a compressed representation as specified in section 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoSecp256r1PubKey: (atu8_key?: Opt<Uint8Array>) => EncodedCosmosCryptoSecp256r1PubKey;
/**
 * Encodes a `PrivKey` protobuf message: defines a secp256r1 ECDSA private key.
 * @param atu8_secret - `secret`: number serialized using big-endian encoding
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosCryptoSecp256r1PrivKey: (atu8_secret?: Opt<Uint8Array>) => EncodedCosmosCryptoSecp256r1PrivKey;
/**
 * A decoded protobuf PubKey message
 *
 * Alias for: key - Point on secp256r1 curve in a compressed representation as specified in section 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
 */
export type DecodedCosmosCryptoSecp256r1PubKey = [
    atu8_key?: Uint8Array
];
/**
 * Decodes a protobuf PubKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256r1PubKey}
 */
export declare const decodeCosmosCryptoSecp256r1PubKey: (atu8_payload: Uint8Array) => DecodedCosmosCryptoSecp256r1PubKey;
/**
 * A decoded protobuf PrivKey message
 *
 * Alias for: secret - number serialized using big-endian encoding
 */
export type DecodedCosmosCryptoSecp256r1PrivKey = [
    atu8_secret?: Uint8Array
];
/**
 * Decodes a protobuf PrivKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosCryptoSecp256r1PrivKey}
 */
export declare const decodeCosmosCryptoSecp256r1PrivKey: (atu8_payload: Uint8Array) => DecodedCosmosCryptoSecp256r1PrivKey;
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256r1PubKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key - Point on secp256r1 curve in a compressed representation as specified in section 4.3.6 of ANSI X9.62: https://webstore.ansi.org/standards/ascx9/ansix9621998
 */
export declare const destructCosmosCryptoSecp256r1PubKey: (g_struct: CosmosCryptoSecp256r1PubKey) => [key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256R1_PUB_KEY = "/cosmos.crypto.secp256r1.PubKey";
/**
 * JSON serialization of `cosmos.crypto.secp256r1.PubKey` - defines a secp256r1 ECDSA public key.
 */
export type CosmosCryptoSecp256r1PubKey = {
    key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosCryptoSecp256r1PrivKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: secret - number serialized using big-endian encoding
 */
export declare const destructCosmosCryptoSecp256r1PrivKey: (g_struct: CosmosCryptoSecp256r1PrivKey) => [secret?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_CRYPTO_SECP256R1_PRIV_KEY = "/cosmos.crypto.secp256r1.PrivKey";
/**
 * JSON serialization of `cosmos.crypto.secp256r1.PrivKey` - defines a secp256r1 ECDSA private key.
 */
export type CosmosCryptoSecp256r1PrivKey = {
    secret?: CwBase64 | undefined;
};
