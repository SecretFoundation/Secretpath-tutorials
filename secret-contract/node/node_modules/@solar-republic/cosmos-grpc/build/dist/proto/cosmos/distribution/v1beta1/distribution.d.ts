import type { WeakUint64Str, WeakAccountAddr, WeakValidatorAddr, SlimCoin, CwUint64, CwAccountAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseDecCoin, DecodedCosmosBaseDecCoin, CosmosBaseCoin } from '../../base/v1beta1/coin.js';
export type AnyCosmosDistributionCommunityPoolSpendProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type AnyCosmosDistributionCommunityPoolSpendProposalWithDeposit = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosDistributionParams = Encoded<'/cosmos.distribution.v1beta1.Params'>;
export type EncodedCosmosDistributionValidatorHistoricalRewards = Encoded<'/cosmos.distribution.v1beta1.ValidatorHistoricalRewards'>;
export type EncodedCosmosDistributionValidatorCurrentRewards = Encoded<'/cosmos.distribution.v1beta1.ValidatorCurrentRewards'>;
export type EncodedCosmosDistributionValidatorAccumulatedCommission = Encoded<'/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission'>;
export type EncodedCosmosDistributionValidatorOutstandingRewards = Encoded<'/cosmos.distribution.v1beta1.ValidatorOutstandingRewards'>;
export type EncodedCosmosDistributionValidatorSlashEvent = Encoded<'/cosmos.distribution.v1beta1.ValidatorSlashEvent'>;
export type EncodedCosmosDistributionValidatorSlashEvents = Encoded<'/cosmos.distribution.v1beta1.ValidatorSlashEvents'>;
export type EncodedCosmosDistributionFeePool = Encoded<'/cosmos.distribution.v1beta1.FeePool'>;
export type EncodedCosmosDistributionCommunityPoolSpendProposal = Encoded<'/cosmos.distribution.v1beta1.CommunityPoolSpendProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosDistributionDelegatorStartingInfo = Encoded<'/cosmos.distribution.v1beta1.DelegatorStartingInfo'>;
export type EncodedCosmosDistributionDelegationDelegatorReward = Encoded<'/cosmos.distribution.v1beta1.DelegationDelegatorReward'>;
export type EncodedCosmosDistributionCommunityPoolSpendProposalWithDeposit = Encoded<'/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit' | 'cosmos.gov.v1beta1.Content'>;
/**
 * Encodes a `CommunityPoolSpendProposal` protobuf message wrapped in the `Any` container: details a proposal for use of community funds, together with how many coins are proposed to be spent, and to which recipient account. Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no longer a need for an explicit CommunityPoolSpendProposal. To spend community pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov module via a v1 governance proposal.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyCommunityPoolSpendProposal: (s_title?: Opt<string>, s_description?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>, a_amounts?: Opt<SlimCoin[]>) => AnyCosmosDistributionCommunityPoolSpendProposal;
/**
 * Encodes a `CommunityPoolSpendProposalWithDeposit` protobuf message wrapped in the `Any` container: defines a CommunityPoolSpendProposal with a deposit Deprecated: Do not use.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param s_amount - `amount`:
 * @param s_deposit - `deposit`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyCommunityPoolSpendProposalWithDeposit: (s_title?: Opt<string>, s_description?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>, s_amount?: Opt<string>, s_deposit?: Opt<string>) => AnyCosmosDistributionCommunityPoolSpendProposalWithDeposit;
/**
 * Encodes a `Params` protobuf message: defines the set of params for the distribution module.
 * @param s_community_tax - `community_tax`:
 * @param s_base_proposer_reward - `base_proposer_reward`: Deprecated: The base_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 * @param s_bonus_proposer_reward - `bonus_proposer_reward`: Deprecated: The bonus_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 * @param b_withdraw_addr_enabled - `withdraw_addr_enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionParams: (s_community_tax?: Opt<string>, s_base_proposer_reward?: Opt<string>, s_bonus_proposer_reward?: Opt<string>, b_withdraw_addr_enabled?: Opt<boolean | 0 | 1>) => EncodedCosmosDistributionParams;
/**
 * Encodes a `ValidatorHistoricalRewards` protobuf message: represents historical rewards for a validator. Height is implicit within the store key. Cumulative reward ratio is the sum from the zeroeth period until this period of rewards / tokens, per the spec. The reference count indicates the number of objects which might need to reference this historical entry at any point. ReferenceCount = number of outstanding delegations which ended the associated period (and might need to read that record) + number of slashes which ended the associated period (and might need to read that record) + one per validator for the zeroeth period, set on initialization
 * @param a_cumulative_reward_ratios - `cumulative_reward_ratio`:
 * @param n_reference_count - `reference_count`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorHistoricalRewards: (a_cumulative_reward_ratios?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>, n_reference_count?: Opt<number>) => EncodedCosmosDistributionValidatorHistoricalRewards;
/**
 * Encodes a `ValidatorCurrentRewards` protobuf message: represents current rewards and current period for a validator kept as a running counter and incremented each block as long as the validator's tokens remain constant.
 * @param a_rewards - `rewards`:
 * @param sg_period - `period`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorCurrentRewards: (a_rewards?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>, sg_period?: Opt<WeakUint64Str>) => EncodedCosmosDistributionValidatorCurrentRewards;
/**
 * Encodes a `ValidatorAccumulatedCommission` protobuf message: represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time.
 * @param a_commissions - `commission`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorAccumulatedCommission: (a_commissions?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>) => EncodedCosmosDistributionValidatorAccumulatedCommission;
/**
 * Encodes a `ValidatorOutstandingRewards` protobuf message: represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 * @param a_rewards - `rewards`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorOutstandingRewards: (a_rewards?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>) => EncodedCosmosDistributionValidatorOutstandingRewards;
/**
 * Encodes a `ValidatorSlashEvent` protobuf message: represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 * @param sg_validator_period - `validator_period`:
 * @param s_fraction - `fraction`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorSlashEvent: (sg_validator_period?: Opt<WeakUint64Str>, s_fraction?: Opt<string>) => EncodedCosmosDistributionValidatorSlashEvent;
/**
 * Encodes a `ValidatorSlashEvents` protobuf message: a collection of ValidatorSlashEvent messages.
 * @param a_validator_slash_events - `validator_slash_events`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionValidatorSlashEvents: (a_validator_slash_events?: Opt<Encoded<'/cosmos.distribution.v1beta1.ValidatorSlashEvent'>[]>) => EncodedCosmosDistributionValidatorSlashEvents;
/**
 * Encodes a `FeePool` protobuf message: the global fee pool for distribution.
 * @param a_community_pools - `community_pool`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionFeePool: (a_community_pools?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>) => EncodedCosmosDistributionFeePool;
/**
 * Encodes a `CommunityPoolSpendProposal` protobuf message: details a proposal for use of community funds, together with how many coins are proposed to be spent, and to which recipient account. Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no longer a need for an explicit CommunityPoolSpendProposal. To spend community pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov module via a v1 governance proposal.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionCommunityPoolSpendProposal: (s_title?: Opt<string>, s_description?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>, a_amounts?: Opt<SlimCoin[]>) => EncodedCosmosDistributionCommunityPoolSpendProposal;
/**
 * Encodes a `DelegatorStartingInfo` protobuf message: represents the starting info for a delegator reward period. It tracks the previous validator period, the delegation's amount of staking token, and the creation height (to check later on if any slashes have occurred). NOTE: Even though validators are slashed to whole staking tokens, the delegators within the validator may be left with less than a full token, thus sdk.Dec is used.
 * @param sg_previous_period - `previous_period`:
 * @param s_stake - `stake`:
 * @param sg_height - `height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionDelegatorStartingInfo: (sg_previous_period?: Opt<WeakUint64Str>, s_stake?: Opt<string>, sg_height?: Opt<WeakUint64Str>) => EncodedCosmosDistributionDelegatorStartingInfo;
/**
 * Encodes a `DelegationDelegatorReward` protobuf message: represents the properties of a delegator's delegation reward.
 * @param sa_validator - `validator_address`:
 * @param a_rewards - `reward`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionDelegationDelegatorReward: (sa_validator?: Opt<WeakValidatorAddr>, a_rewards?: Opt<Encoded<'/cosmos.base.v1beta1.DecCoin'>[]>) => EncodedCosmosDistributionDelegationDelegatorReward;
/**
 * Encodes a `CommunityPoolSpendProposalWithDeposit` protobuf message: defines a CommunityPoolSpendProposal with a deposit Deprecated: Do not use.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param sa_recipient - `recipient`:
 * @param s_amount - `amount`:
 * @param s_deposit - `deposit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosDistributionCommunityPoolSpendProposalWithDeposit: (s_title?: Opt<string>, s_description?: Opt<string>, sa_recipient?: Opt<WeakAccountAddr>, s_amount?: Opt<string>, s_deposit?: Opt<string>) => EncodedCosmosDistributionCommunityPoolSpendProposalWithDeposit;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: community_tax -
 *   - 1: base_proposer_reward - Deprecated: The base_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 *   - 2: bonus_proposer_reward - Deprecated: The bonus_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 *   - 3: withdraw_addr_enabled -
 */
export type DecodedCosmosDistributionParams = [
    s_community_tax?: string,
    s_base_proposer_reward?: string,
    s_bonus_proposer_reward?: string,
    b_withdraw_addr_enabled?: 0 | 1
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionParams}
 */
export declare const decodeCosmosDistributionParams: (atu8_payload: Uint8Array) => DecodedCosmosDistributionParams;
/**
 * A decoded protobuf ValidatorHistoricalRewards message
 *
 * Tuple where:
 *   - 0: cumulative_reward_ratio -
 *   - 1: reference_count -
 */
export type DecodedCosmosDistributionValidatorHistoricalRewards = [
    a_cumulative_reward_ratio?: DecodedCosmosBaseDecCoin[],
    n_reference_count?: number
];
/**
 * Decodes a protobuf ValidatorHistoricalRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorHistoricalRewards}
 */
export declare const decodeCosmosDistributionValidatorHistoricalRewards: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorHistoricalRewards;
/**
 * A decoded protobuf ValidatorCurrentRewards message
 *
 * Tuple where:
 *   - 0: rewards -
 *   - 1: period -
 */
export type DecodedCosmosDistributionValidatorCurrentRewards = [
    a_rewards?: DecodedCosmosBaseDecCoin[],
    sg_period?: CwUint64
];
/**
 * Decodes a protobuf ValidatorCurrentRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorCurrentRewards}
 */
export declare const decodeCosmosDistributionValidatorCurrentRewards: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorCurrentRewards;
/**
 * A decoded protobuf ValidatorAccumulatedCommission message
 *
 * Alias for: commission -
 */
export type DecodedCosmosDistributionValidatorAccumulatedCommission = [
    a_commission?: DecodedCosmosBaseDecCoin[]
];
/**
 * Decodes a protobuf ValidatorAccumulatedCommission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorAccumulatedCommission}
 */
export declare const decodeCosmosDistributionValidatorAccumulatedCommission: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorAccumulatedCommission;
/**
 * A decoded protobuf ValidatorOutstandingRewards message
 *
 * Alias for: rewards -
 */
export type DecodedCosmosDistributionValidatorOutstandingRewards = [
    a_rewards?: DecodedCosmosBaseDecCoin[]
];
/**
 * Decodes a protobuf ValidatorOutstandingRewards message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorOutstandingRewards}
 */
export declare const decodeCosmosDistributionValidatorOutstandingRewards: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorOutstandingRewards;
/**
 * A decoded protobuf ValidatorSlashEvent message
 *
 * Tuple where:
 *   - 0: validator_period -
 *   - 1: fraction -
 */
export type DecodedCosmosDistributionValidatorSlashEvent = [
    sg_validator_period?: CwUint64,
    s_fraction?: string
];
/**
 * Decodes a protobuf ValidatorSlashEvent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorSlashEvent}
 */
export declare const decodeCosmosDistributionValidatorSlashEvent: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorSlashEvent;
/**
 * A decoded protobuf ValidatorSlashEvents message
 *
 * Alias for: validator_slash_events -
 */
export type DecodedCosmosDistributionValidatorSlashEvents = [
    a_validator_slash_events?: DecodedCosmosDistributionValidatorSlashEvent[]
];
/**
 * Decodes a protobuf ValidatorSlashEvents message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionValidatorSlashEvents}
 */
export declare const decodeCosmosDistributionValidatorSlashEvents: (atu8_payload: Uint8Array) => DecodedCosmosDistributionValidatorSlashEvents;
/**
 * A decoded protobuf FeePool message
 *
 * Alias for: community_pool -
 */
export type DecodedCosmosDistributionFeePool = [
    a_community_pool?: DecodedCosmosBaseDecCoin[]
];
/**
 * Decodes a protobuf FeePool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionFeePool}
 */
export declare const decodeCosmosDistributionFeePool: (atu8_payload: Uint8Array) => DecodedCosmosDistributionFeePool;
/**
 * A decoded protobuf CommunityPoolSpendProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: recipient -
 *   - 3: amount -
 */
export type DecodedCosmosDistributionCommunityPoolSpendProposal = [
    s_title?: string,
    s_description?: string,
    sa_recipient?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf CommunityPoolSpendProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionCommunityPoolSpendProposal}
 */
export declare const decodeCosmosDistributionCommunityPoolSpendProposal: (atu8_payload: Uint8Array) => DecodedCosmosDistributionCommunityPoolSpendProposal;
/**
 * A decoded protobuf DelegatorStartingInfo message
 *
 * Tuple where:
 *   - 0: previous_period -
 *   - 1: stake -
 *   - 2: height -
 */
export type DecodedCosmosDistributionDelegatorStartingInfo = [
    sg_previous_period?: CwUint64,
    s_stake?: string,
    sg_height?: CwUint64
];
/**
 * Decodes a protobuf DelegatorStartingInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegatorStartingInfo}
 */
export declare const decodeCosmosDistributionDelegatorStartingInfo: (atu8_payload: Uint8Array) => DecodedCosmosDistributionDelegatorStartingInfo;
/**
 * A decoded protobuf DelegationDelegatorReward message
 *
 * Tuple where:
 *   - 0: validator_address -
 *   - 1: reward -
 */
export type DecodedCosmosDistributionDelegationDelegatorReward = [
    sa_validator?: CwValidatorAddr,
    a_reward?: DecodedCosmosBaseDecCoin[]
];
/**
 * Decodes a protobuf DelegationDelegatorReward message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionDelegationDelegatorReward}
 */
export declare const decodeCosmosDistributionDelegationDelegatorReward: (atu8_payload: Uint8Array) => DecodedCosmosDistributionDelegationDelegatorReward;
/**
 * A decoded protobuf CommunityPoolSpendProposalWithDeposit message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: recipient -
 *   - 3: amount -
 *   - 4: deposit -
 */
export type DecodedCosmosDistributionCommunityPoolSpendProposalWithDeposit = [
    s_title?: string,
    s_description?: string,
    sa_recipient?: CwAccountAddr,
    s_amount?: string,
    s_deposit?: string
];
/**
 * Decodes a protobuf CommunityPoolSpendProposalWithDeposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosDistributionCommunityPoolSpendProposalWithDeposit}
 */
export declare const decodeCosmosDistributionCommunityPoolSpendProposalWithDeposit: (atu8_payload: Uint8Array) => DecodedCosmosDistributionCommunityPoolSpendProposalWithDeposit;
/**
 * Destructures the fields of a {@link CosmosDistributionParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: community_tax -
 *   - 1: base_proposer_reward - Deprecated: The base_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 *   - 2: bonus_proposer_reward - Deprecated: The bonus_proposer_reward field is deprecated and is no longer used in the x/distribution module's reward mechanism.
 *   - 3: withdraw_addr_enabled -
 */
export declare const destructCosmosDistributionParams: (g_struct: CosmosDistributionParams) => [community_tax?: string, base_proposer_reward?: string, bonus_proposer_reward?: string, withdraw_addr_enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_PARAMS = "/cosmos.distribution.v1beta1.Params";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.Params` - defines the set of params for the distribution module.
 */
export type CosmosDistributionParams = {
    community_tax?: string | undefined;
    base_proposer_reward?: string | undefined;
    bonus_proposer_reward?: string | undefined;
    withdraw_addr_enabled?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorHistoricalRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cumulative_reward_ratio -
 *   - 1: reference_count -
 */
export declare const destructCosmosDistributionValidatorHistoricalRewards: (g_struct: CosmosDistributionValidatorHistoricalRewards) => [cumulative_reward_ratio?: CosmosBaseDecCoin[], reference_count?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_HISTORICAL_REWARDS = "/cosmos.distribution.v1beta1.ValidatorHistoricalRewards";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorHistoricalRewards` - represents historical rewards for a validator. Height is implicit within the store key. Cumulative reward ratio is the sum from the zeroeth period until this period of rewards / tokens, per the spec. The reference count indicates the number of objects which might need to reference this historical entry at any point. ReferenceCount = number of outstanding delegations which ended the associated period (and might need to read that record) + number of slashes which ended the associated period (and might need to read that record) + one per validator for the zeroeth period, set on initialization
 */
export type CosmosDistributionValidatorHistoricalRewards = {
    cumulative_reward_ratio?: CosmosBaseDecCoin[] | undefined;
    reference_count?: number | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorCurrentRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards -
 *   - 1: period -
 */
export declare const destructCosmosDistributionValidatorCurrentRewards: (g_struct: CosmosDistributionValidatorCurrentRewards) => [rewards?: CosmosBaseDecCoin[], period?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_CURRENT_REWARDS = "/cosmos.distribution.v1beta1.ValidatorCurrentRewards";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorCurrentRewards` - represents current rewards and current period for a validator kept as a running counter and incremented each block as long as the validator's tokens remain constant.
 */
export type CosmosDistributionValidatorCurrentRewards = {
    rewards?: CosmosBaseDecCoin[] | undefined;
    period?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorAccumulatedCommission} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commission -
 */
export declare const destructCosmosDistributionValidatorAccumulatedCommission: (g_struct: CosmosDistributionValidatorAccumulatedCommission) => [commission?: CosmosBaseDecCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_ACCUMULATED_COMMISSION = "/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorAccumulatedCommission` - represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time.
 */
export type CosmosDistributionValidatorAccumulatedCommission = {
    commission?: CosmosBaseDecCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorOutstandingRewards} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rewards -
 */
export declare const destructCosmosDistributionValidatorOutstandingRewards: (g_struct: CosmosDistributionValidatorOutstandingRewards) => [rewards?: CosmosBaseDecCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_OUTSTANDING_REWARDS = "/cosmos.distribution.v1beta1.ValidatorOutstandingRewards";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorOutstandingRewards` - represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 */
export type CosmosDistributionValidatorOutstandingRewards = {
    rewards?: CosmosBaseDecCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorSlashEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_period -
 *   - 1: fraction -
 */
export declare const destructCosmosDistributionValidatorSlashEvent: (g_struct: CosmosDistributionValidatorSlashEvent) => [validator_period?: CwUint64, fraction?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_SLASH_EVENT = "/cosmos.distribution.v1beta1.ValidatorSlashEvent";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorSlashEvent` - represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 */
export type CosmosDistributionValidatorSlashEvent = {
    validator_period?: CwUint64 | undefined;
    fraction?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionValidatorSlashEvents} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_slash_events -
 */
export declare const destructCosmosDistributionValidatorSlashEvents: (g_struct: CosmosDistributionValidatorSlashEvents) => [validator_slash_events?: CosmosDistributionValidatorSlashEvent[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_VALIDATOR_SLASH_EVENTS = "/cosmos.distribution.v1beta1.ValidatorSlashEvents";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.ValidatorSlashEvents` - a collection of ValidatorSlashEvent messages.
 */
export type CosmosDistributionValidatorSlashEvents = {
    validator_slash_events?: CosmosDistributionValidatorSlashEvent[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionFeePool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: community_pool -
 */
export declare const destructCosmosDistributionFeePool: (g_struct: CosmosDistributionFeePool) => [community_pool?: CosmosBaseDecCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_FEE_POOL = "/cosmos.distribution.v1beta1.FeePool";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.FeePool` - the global fee pool for distribution.
 */
export type CosmosDistributionFeePool = {
    community_pool?: CosmosBaseDecCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionCommunityPoolSpendProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: recipient -
 *   - 3: amount -
 */
export declare const destructCosmosDistributionCommunityPoolSpendProposal: (g_struct: CosmosDistributionCommunityPoolSpendProposal) => [title?: string, description?: string, recipient?: CwAccountAddr, amount?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_COMMUNITY_POOL_SPEND_PROPOSAL = "/cosmos.distribution.v1beta1.CommunityPoolSpendProposal";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.CommunityPoolSpendProposal` - details a proposal for use of community funds, together with how many coins are proposed to be spent, and to which recipient account. Deprecated: Do not use. As of the Cosmos SDK release v0.47.x, there is no longer a need for an explicit CommunityPoolSpendProposal. To spend community pool funds, a simple MsgCommunityPoolSpend can be invoked from the x/gov module via a v1 governance proposal.
 */
export type CosmosDistributionCommunityPoolSpendProposal = {
    title?: string | undefined;
    description?: string | undefined;
    recipient?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionDelegatorStartingInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: previous_period -
 *   - 1: stake -
 *   - 2: height -
 */
export declare const destructCosmosDistributionDelegatorStartingInfo: (g_struct: CosmosDistributionDelegatorStartingInfo) => [previous_period?: CwUint64, stake?: string, height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATOR_STARTING_INFO = "/cosmos.distribution.v1beta1.DelegatorStartingInfo";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.DelegatorStartingInfo` - represents the starting info for a delegator reward period. It tracks the previous validator period, the delegation's amount of staking token, and the creation height (to check later on if any slashes have occurred). NOTE: Even though validators are slashed to whole staking tokens, the delegators within the validator may be left with less than a full token, thus sdk.Dec is used.
 */
export type CosmosDistributionDelegatorStartingInfo = {
    previous_period?: CwUint64 | undefined;
    stake?: string | undefined;
    height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionDelegationDelegatorReward} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address -
 *   - 1: reward -
 */
export declare const destructCosmosDistributionDelegationDelegatorReward: (g_struct: CosmosDistributionDelegationDelegatorReward) => [validator_address?: CwValidatorAddr, reward?: CosmosBaseDecCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_DELEGATION_DELEGATOR_REWARD = "/cosmos.distribution.v1beta1.DelegationDelegatorReward";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.DelegationDelegatorReward` - represents the properties of a delegator's delegation reward.
 */
export type CosmosDistributionDelegationDelegatorReward = {
    validator_address?: CwValidatorAddr | undefined;
    reward?: CosmosBaseDecCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosDistributionCommunityPoolSpendProposalWithDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: recipient -
 *   - 3: amount -
 *   - 4: deposit -
 */
export declare const destructCosmosDistributionCommunityPoolSpendProposalWithDeposit: (g_struct: CosmosDistributionCommunityPoolSpendProposalWithDeposit) => [title?: string, description?: string, recipient?: CwAccountAddr, amount?: string, deposit?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_DISTRIBUTION_COMMUNITY_POOL_SPEND_PROPOSAL_WITH_DEPOSIT = "/cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit";
/**
 * JSON serialization of `cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit` - defines a CommunityPoolSpendProposal with a deposit Deprecated: Do not use.
 */
export type CosmosDistributionCommunityPoolSpendProposalWithDeposit = {
    title?: string | undefined;
    description?: string | undefined;
    recipient?: CwAccountAddr | undefined;
    amount?: string | undefined;
    deposit?: string | undefined;
};
