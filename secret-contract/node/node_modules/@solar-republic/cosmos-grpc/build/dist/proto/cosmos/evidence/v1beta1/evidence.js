import { parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Equivocation` protobuf message: implements the Evidence interface and defines evidence of double signing misbehavior.
 * @param sg_height - `height`: the equivocation height.
 * @param xt_time - `time`: the equivocation time.
 * @param sg_power - `power`: the equivocation validator power.
 * @param sa_consensus - `consensus_address`: the equivocation validator consensus address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceEquivocation = (sg_height, xt_time, sg_power, sa_consensus) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .b(temporal(xt_time)) // Timestamp time = 2
    .g(sg_power) // int32 power = 3
    .s(sa_consensus) // string consensus_address = 4
    .o;
/**
 * Decodes a protobuf Equivocation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceEquivocation}
 */
export const decodeCosmosEvidenceEquivocation = (atu8_payload) => decode_protobuf(atu8_payload, [3, [3, 1], 3, 5], [0, decode_temporal]);
/**
 * Destructures the fields of a {@link CosmosEvidenceEquivocation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - the equivocation height.
 *   - 1: time - the equivocation time.
 *   - 2: power - the equivocation validator power.
 *   - 3: consensus_address - the equivocation validator consensus address.
 */
export const destructCosmosEvidenceEquivocation = (g_struct) => [g_struct.height, parse_timestamp(g_struct.time), g_struct.power, g_struct.consensus_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_EQUIVOCATION = '/cosmos.evidence.v1beta1.Equivocation';
//# sourceMappingURL=evidence.js.map