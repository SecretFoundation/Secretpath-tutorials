import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64, safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
const SR_LCD_COSMOS_EVIDENCE_QUERY = '/cosmos/evidence/v1beta1/evidence/';
/**
 * Queries evidence based on evidence hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_evidence_hash - defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 * @param s_hash - defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 * @returns a tuple where:
 *   - 0: evidence - returns the requested evidence.
 */
export const queryCosmosEvidenceEvidence = restful_grpc((atu8_evidence_hash, s_hash) => [SR_LCD_COSMOS_EVIDENCE_QUERY + s_hash, {
        evidence_hash: safe_bytes_to_base64(atu8_evidence_hash),
    }]);
/**
 * Queries all evidence.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: evidence - returns all evidences.
 *   - 1: pagination - returns all evidences.
 */
export const queryCosmosEvidenceAllEvidence = restful_grpc(g_pagination => ['/cosmos/evidence/v1beta1/evidence', {
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryEvidenceRequest` protobuf message: the request type for the Query/Evidence RPC method.
 * @param atu8_evidence_hash - `evidence_hash`: defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 * @param s_hash - `hash`: defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceQueryEvidenceRequest = (atu8_evidence_hash, s_hash) => Protobuf() // ...
    .b(atu8_evidence_hash) // bytes evidence_hash = 1
    .s(s_hash) // string hash = 2
    .o;
/**
 * Encodes a `QueryEvidenceResponse` protobuf message: the response type for the Query/Evidence RPC method.
 * @param atu8_evidence - `evidence`: returns the requested evidence.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceQueryEvidenceResponse = (atu8_evidence) => Protobuf() // ...
    .b(atu8_evidence) // Any evidence = 1
    .o;
/**
 * Encodes a `QueryAllEvidenceRequest` protobuf message: QueryEvidenceRequest is the request type for the Query/AllEvidence RPC method.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceQueryAllEvidenceRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryAllEvidenceResponse` protobuf message: the response type for the Query/AllEvidence RPC method.
 * @param a_evidences - `evidence`: returns all evidences.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceQueryAllEvidenceResponse = (a_evidences, atu8_pagination) => Protobuf() // ...
    .B(a_evidences) // Any[] evidence = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Decodes a protobuf QueryEvidenceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryEvidenceRequest}
 */
export const decodeCosmosEvidenceQueryEvidenceRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5]);
/**
 * Decodes a protobuf QueryEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryEvidenceResponse}
 */
export const decodeCosmosEvidenceQueryEvidenceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf QueryAllEvidenceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryAllEvidenceRequest}
 */
export const decodeCosmosEvidenceQueryAllEvidenceRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryAllEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceQueryAllEvidenceResponse}
 */
export const decodeCosmosEvidenceQueryAllEvidenceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeGoogleProtobufAny, decodeCosmosBaseQueryPageResponse]);
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryEvidenceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence_hash - defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.
 *   - 1: hash - defines the evidence hash of the requested evidence. Since: cosmos-sdk 0.47
 */
export const destructCosmosEvidenceQueryEvidenceRequest = (g_struct) => [safe_base64_to_bytes(g_struct.evidence_hash), g_struct.hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_EVIDENCE_REQUEST = '/cosmos.evidence.v1beta1.QueryEvidenceRequest';
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryEvidenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence - returns the requested evidence.
 */
export const destructCosmosEvidenceQueryEvidenceResponse = (g_struct) => [g_struct.evidence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_EVIDENCE_RESPONSE = '/cosmos.evidence.v1beta1.QueryEvidenceResponse';
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryAllEvidenceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export const destructCosmosEvidenceQueryAllEvidenceRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_ALL_EVIDENCE_REQUEST = '/cosmos.evidence.v1beta1.QueryAllEvidenceRequest';
/**
 * Destructures the fields of a {@link CosmosEvidenceQueryAllEvidenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence - returns all evidences.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosEvidenceQueryAllEvidenceResponse = (g_struct) => [g_struct.evidence, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_QUERY_ALL_EVIDENCE_RESPONSE = '/cosmos.evidence.v1beta1.QueryAllEvidenceResponse';
//# sourceMappingURL=query.js.map