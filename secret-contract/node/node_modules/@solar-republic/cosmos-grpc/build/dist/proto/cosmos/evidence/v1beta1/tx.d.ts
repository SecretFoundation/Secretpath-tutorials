import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedCosmosEvidenceMsgSubmitEvidence = Encoded<'/cosmos.evidence.v1beta1.MsgSubmitEvidence'>;
export type EncodedCosmosEvidenceMsgSubmitEvidenceResponse = Encoded<'/cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse'>;
/**
 * Encodes a `MsgSubmitEvidence` protobuf message: represents a message that supports submitting arbitrary Evidence of misbehavior such as equivocation or counterfactual signing.
 * @param s_submitter - `submitter`: the signer account address of evidence.
 * @param atu8_evidence - `evidence`: defines the evidence of misbehavior.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceMsgSubmitEvidence: (s_submitter?: Opt<string>, atu8_evidence?: Opt<Encoded<'cosmos.evidence.v1beta1.Evidence'>>) => EncodedCosmosEvidenceMsgSubmitEvidence;
/**
 * Encodes a `MsgSubmitEvidenceResponse` protobuf message: defines the Msg/SubmitEvidence response type.
 * @param atu8_hash - `hash`: defines the hash of the evidence.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosEvidenceMsgSubmitEvidenceResponse: (atu8_hash?: Opt<Uint8Array>) => EncodedCosmosEvidenceMsgSubmitEvidenceResponse;
/**
 * A decoded protobuf SubmitEvidence message
 *
 * Tuple where:
 *   - 0: submitter - the signer account address of evidence.
 *   - 1: evidence - defines the evidence of misbehavior.
 */
export type DecodedCosmosEvidenceMsgSubmitEvidence = [
    s_submitter?: string,
    a_evidence?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf SubmitEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceMsgSubmitEvidence}
 */
export declare const decodeCosmosEvidenceMsgSubmitEvidence: (atu8_payload: Uint8Array) => DecodedCosmosEvidenceMsgSubmitEvidence;
/**
 * A decoded protobuf SubmitEvidence message
 *
 * Alias for: hash - defines the hash of the evidence.
 */
export type DecodedCosmosEvidenceMsgSubmitEvidenceResponse = [
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    atu8_hash?: Uint8Array
];
/**
 * Decodes a protobuf SubmitEvidence message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosEvidenceMsgSubmitEvidenceResponse}
 */
export declare const decodeCosmosEvidenceMsgSubmitEvidenceResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosEvidenceMsgSubmitEvidenceResponse;
/**
 * Destructures the fields of a {@link CosmosEvidenceMsgSubmitEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: submitter - the signer account address of evidence.
 *   - 1: evidence - defines the evidence of misbehavior.
 */
export declare const destructCosmosEvidenceMsgSubmitEvidence: (g_struct: CosmosEvidenceMsgSubmitEvidence) => [submitter?: string, evidence?: JsonAny<string>];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_MSG_SUBMIT_EVIDENCE = "/cosmos.evidence.v1beta1.MsgSubmitEvidence";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.MsgSubmitEvidence` - represents a message that supports submitting arbitrary Evidence of misbehavior such as equivocation or counterfactual signing.
 */
export type CosmosEvidenceMsgSubmitEvidence = {
    submitter?: string | undefined;
    evidence?: JsonAny<string> | undefined;
};
/**
 * Destructures the fields of a {@link CosmosEvidenceMsgSubmitEvidenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 3: hash - defines the hash of the evidence.
 */
export declare const destructCosmosEvidenceMsgSubmitEvidenceResponse: (g_struct: CosmosEvidenceMsgSubmitEvidenceResponse) => [EMPTY?: void, EMPTY?: void, EMPTY?: void, hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_MSG_SUBMIT_EVIDENCE_RESPONSE = "/cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse";
/**
 * JSON serialization of `cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse` - defines the Msg/SubmitEvidence response type.
 */
export type CosmosEvidenceMsgSubmitEvidenceResponse = {
    hash?: CwBase64 | undefined;
};
