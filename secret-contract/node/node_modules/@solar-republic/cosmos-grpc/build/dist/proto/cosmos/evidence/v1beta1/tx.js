import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `MsgSubmitEvidence` protobuf message: represents a message that supports submitting arbitrary Evidence of misbehavior such as equivocation or counterfactual signing.
 * @param s_submitter - `submitter`: the signer account address of evidence.
 * @param atu8_evidence - `evidence`: defines the evidence of misbehavior.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceMsgSubmitEvidence = (s_submitter, atu8_evidence) => Protobuf() // ...
    .s(s_submitter) // string submitter = 1
    .b(atu8_evidence) // Any evidence = 2
    .o;
/**
 * Encodes a `MsgSubmitEvidenceResponse` protobuf message: defines the Msg/SubmitEvidence response type.
 * @param atu8_hash - `hash`: defines the hash of the evidence.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosEvidenceMsgSubmitEvidenceResponse = (atu8_hash) => Protobuf() // ...
    .b(atu8_hash, 4) // bytes hash = 4
    .o;
/**
 * Decodes a protobuf SubmitEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosEvidenceMsgSubmitEvidence}
 */
export const decodeCosmosEvidenceMsgSubmitEvidence = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf SubmitEvidence message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosEvidenceMsgSubmitEvidenceResponse}
 */
export const decodeCosmosEvidenceMsgSubmitEvidenceResponse = ((atu8_payload, [, , , atu8_hash] = decode_protobuf(atu8_payload, [0, 0, 0, 1])) => [__UNDEFINED, __UNDEFINED, __UNDEFINED, atu8_hash]);
/**
 * Destructures the fields of a {@link CosmosEvidenceMsgSubmitEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: submitter - the signer account address of evidence.
 *   - 1: evidence - defines the evidence of misbehavior.
 */
export const destructCosmosEvidenceMsgSubmitEvidence = (g_struct) => [g_struct.submitter, g_struct.evidence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_MSG_SUBMIT_EVIDENCE = '/cosmos.evidence.v1beta1.MsgSubmitEvidence';
/**
 * Destructures the fields of a {@link CosmosEvidenceMsgSubmitEvidenceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 3: hash - defines the hash of the evidence.
 */
export const destructCosmosEvidenceMsgSubmitEvidenceResponse = (g_struct) => [__UNDEFINED, __UNDEFINED, __UNDEFINED, safe_base64_to_bytes(g_struct.hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_EVIDENCE_MSG_SUBMIT_EVIDENCE_RESPONSE = '/cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse';
//# sourceMappingURL=tx.js.map