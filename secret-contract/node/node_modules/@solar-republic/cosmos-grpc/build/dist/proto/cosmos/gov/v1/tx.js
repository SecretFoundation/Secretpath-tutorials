import { parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, coins } from '../../../../api/protobuf-writer.js';
import { decodeCosmosGovWeightedVoteOption, decodeCosmosGovParams } from './gov.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `MsgSubmitProposal` protobuf message: defines an sdk.Msg type that supports submitting arbitrary proposal Content.
 * @param a_messages - `messages`: the arbitrary messages to be executed if proposal passes.
 * @param a_initial_deposits - `initial_deposit`: the deposit value that must be paid at proposal submission.
 * @param s_proposer - `proposer`: the account address of the proposer.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the proposal.
 * @param s_title - `title`: the title of the proposal. Since: cosmos-sdk 0.47
 * @param s_summary - `summary`: the summary of the proposal Since: cosmos-sdk 0.47
 * @param b_expedited - `expedited`: defines if the proposal is expedited or not Since: cosmos-sdk 0.50
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgSubmitProposal = (a_messages, a_initial_deposits, s_proposer, s_metadata, s_title, s_summary, b_expedited) => Protobuf() // ...
    .B(a_messages) // Any[] messages = 1
    .B(coins(a_initial_deposits)) // Coin[] initial_deposit = 2
    .s(s_proposer) // string proposer = 3
    .s(s_metadata) // string metadata = 4
    .s(s_title) // string title = 5
    .s(s_summary) // string summary = 6
    .v(b_expedited) // boolean expedited = 7
    .o;
/**
 * Encodes a `MsgSubmitProposalResponse` protobuf message: defines the Msg/SubmitProposal response type.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgSubmitProposalResponse = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `MsgExecLegacyContent` protobuf message: used to wrap the legacy content field into a message. This ensures backwards compatibility with v1beta1.MsgSubmitProposal.
 * @param atu8_content - `content`: the proposal's content.
 * @param s_authority - `authority`: must be the gov module address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgExecLegacyContent = (atu8_content, s_authority) => Protobuf() // ...
    .b(atu8_content) // Any content = 1
    .s(s_authority) // string authority = 2
    .o;
/**
 * Encodes a `MsgExecLegacyContentResponse` protobuf message: defines the Msg/ExecLegacyContent response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgExecLegacyContentResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgVote` protobuf message: defines a message to cast a vote.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address for the proposal.
 * @param xc_option - `option`: defines the vote option.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the Vote.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVote = (sg_proposal_id, sa_voter, xc_option, s_metadata) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .v(xc_option) // VoteOption option = 3
    .s(s_metadata) // string metadata = 4
    .o;
/**
 * Encodes a `MsgVoteResponse` protobuf message: defines the Msg/Vote response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVoteResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgVoteWeighted` protobuf message: defines a message to cast a vote.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address for the proposal.
 * @param a_options - `options`: defines the weighted vote options.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the VoteWeighted.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVoteWeighted = (sg_proposal_id, sa_voter, a_options, s_metadata) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .B(a_options) // WeightedVoteOption[] options = 3
    .s(s_metadata) // string metadata = 4
    .o;
/**
 * Encodes a `MsgVoteWeightedResponse` protobuf message: defines the Msg/VoteWeighted response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVoteWeightedResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgDeposit` protobuf message: defines a message to submit a deposit to an existing proposal.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @param a_amounts - `amount`: to be deposited by depositor.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgDeposit = (sg_proposal_id, sa_depositor, a_amounts) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_depositor) // string depositor = 2
    .B(coins(a_amounts)) // Coin[] amount = 3
    .o;
/**
 * Encodes a `MsgDepositResponse` protobuf message: defines the Msg/Deposit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgDepositResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/gov parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgCancelProposal` protobuf message: the Msg/CancelProposal request type. Since: cosmos-sdk 0.50
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param s_proposer - `proposer`: the account address of the proposer.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgCancelProposal = (sg_proposal_id, s_proposer) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(s_proposer) // string proposer = 2
    .o;
/**
 * Encodes a `MsgCancelProposalResponse` protobuf message: defines the response structure for executing a MsgCancelProposal message. Since: cosmos-sdk 0.50
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param xt_canceled_time - `canceled_time`: the time when proposal is canceled.
 * @param sg_canceled_height - `canceled_height`: defines the block height at which the proposal is canceled.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgCancelProposalResponse = (sg_proposal_id, xt_canceled_time, sg_canceled_height) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .b(temporal(xt_canceled_time)) // Timestamp canceled_time = 2
    .g(sg_canceled_height) // uint64 canceled_height = 3
    .o;
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgSubmitProposal}
 */
export const decodeCosmosGovMsgSubmitProposal = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 5, 5, 5, 5, 1], [decodeGoogleProtobufAny, decode_coin]);
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgSubmitProposalResponse}
 */
export const decodeCosmosGovMsgSubmitProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf ExecLegacyContent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgExecLegacyContent}
 */
export const decodeCosmosGovMsgExecLegacyContent = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5], [decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf ExecLegacyContent message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgExecLegacyContentResponse}
 */
export const decodeCosmosGovMsgExecLegacyContentResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVote}
 */
export const decodeCosmosGovMsgVote = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 5]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteResponse}
 */
export const decodeCosmosGovMsgVoteResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf VoteWeighted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteWeighted}
 */
export const decodeCosmosGovMsgVoteWeighted = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 0, 5], [0, 0, decodeCosmosGovWeightedVoteOption]);
/**
 * Decodes a protobuf VoteWeighted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteWeightedResponse}
 */
export const decodeCosmosGovMsgVoteWeightedResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgDeposit}
 */
export const decodeCosmosGovMsgDeposit = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgDepositResponse}
 */
export const decodeCosmosGovMsgDepositResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgUpdateParams}
 */
export const decodeCosmosGovMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosGovParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgUpdateParamsResponse}
 */
export const decodeCosmosGovMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf CancelProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgCancelProposal}
 */
export const decodeCosmosGovMsgCancelProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf CancelProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgCancelProposalResponse}
 */
export const decodeCosmosGovMsgCancelProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, [3, 1], 3], [0, decode_temporal]);
/**
 * Destructures the fields of a {@link CosmosGovMsgSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: messages - the arbitrary messages to be executed if proposal passes.
 *   - 1: initial_deposit - the deposit value that must be paid at proposal submission.
 *   - 2: proposer - the account address of the proposer.
 *   - 3: metadata - any arbitrary metadata attached to the proposal.
 *   - 4: title - the title of the proposal. Since: cosmos-sdk 0.47
 *   - 5: summary - the summary of the proposal Since: cosmos-sdk 0.47
 *   - 6: expedited - defines if the proposal is expedited or not Since: cosmos-sdk 0.50
 */
export const destructCosmosGovMsgSubmitProposal = (g_struct) => [g_struct.messages, g_struct.initial_deposit, g_struct.proposer, g_struct.metadata, g_struct.title, g_struct.summary, g_struct.expedited];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_SUBMIT_PROPOSAL = '/cosmos.gov.v1.MsgSubmitProposal';
/**
 * Destructures the fields of a {@link CosmosGovMsgSubmitProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 */
export const destructCosmosGovMsgSubmitProposalResponse = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_SUBMIT_PROPOSAL_RESPONSE = '/cosmos.gov.v1.MsgSubmitProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgExecLegacyContent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: content - the proposal's content.
 *   - 1: authority - must be the gov module address.
 */
export const destructCosmosGovMsgExecLegacyContent = (g_struct) => [g_struct.content, g_struct.authority];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_EXEC_LEGACY_CONTENT = '/cosmos.gov.v1.MsgExecLegacyContent';
/**
 * Destructures the fields of a {@link CosmosGovMsgExecLegacyContentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgExecLegacyContentResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_EXEC_LEGACY_CONTENT_RESPONSE = '/cosmos.gov.v1.MsgExecLegacyContentResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: option - defines the vote option.
 *   - 3: metadata - any arbitrary metadata attached to the Vote.
 */
export const destructCosmosGovMsgVote = (g_struct) => [g_struct.proposal_id, g_struct.voter, g_struct.option, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE = '/cosmos.gov.v1.MsgVote';
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgVoteResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_RESPONSE = '/cosmos.gov.v1.MsgVoteResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteWeighted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: options - defines the weighted vote options.
 *   - 3: metadata - any arbitrary metadata attached to the VoteWeighted.
 */
export const destructCosmosGovMsgVoteWeighted = (g_struct) => [g_struct.proposal_id, g_struct.voter, g_struct.options, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_WEIGHTED = '/cosmos.gov.v1.MsgVoteWeighted';
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteWeightedResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgVoteWeightedResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_WEIGHTED_RESPONSE = '/cosmos.gov.v1.MsgVoteWeightedResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export const destructCosmosGovMsgDeposit = (g_struct) => [g_struct.proposal_id, g_struct.depositor, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_DEPOSIT = '/cosmos.gov.v1.MsgDeposit';
/**
 * Destructures the fields of a {@link CosmosGovMsgDepositResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgDepositResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_DEPOSIT_RESPONSE = '/cosmos.gov.v1.MsgDepositResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/gov parameters to update. NOTE: All parameters must be supplied.
 */
export const destructCosmosGovMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_UPDATE_PARAMS = '/cosmos.gov.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link CosmosGovMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_UPDATE_PARAMS_RESPONSE = '/cosmos.gov.v1.MsgUpdateParamsResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgCancelProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: proposer - the account address of the proposer.
 */
export const destructCosmosGovMsgCancelProposal = (g_struct) => [g_struct.proposal_id, g_struct.proposer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_CANCEL_PROPOSAL = '/cosmos.gov.v1.MsgCancelProposal';
/**
 * Destructures the fields of a {@link CosmosGovMsgCancelProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: canceled_time - the time when proposal is canceled.
 *   - 2: canceled_height - defines the block height at which the proposal is canceled.
 */
export const destructCosmosGovMsgCancelProposalResponse = (g_struct) => [g_struct.proposal_id, parse_timestamp(g_struct.canceled_time), g_struct.canceled_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_CANCEL_PROPOSAL_RESPONSE = '/cosmos.gov.v1.MsgCancelProposalResponse';
//# sourceMappingURL=tx.js.map