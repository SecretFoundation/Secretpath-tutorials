import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt, WeakTimestampStr, WeakDurationStr } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
import type { CosmosDistributionCommunityPoolSpendProposal, CosmosDistributionCommunityPoolSpendProposalWithDeposit } from '../../distribution/v1beta1/distribution.js';
import type { CosmosParamsParameterChangeProposal } from '../../params/v1beta1/params.js';
import type { CosmosUpgradeSoftwareUpgradeProposal, CosmosUpgradeCancelSoftwareUpgradeProposal } from '../../upgrade/v1beta1/upgrade.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
import type { IbcCoreClientClientUpdateProposal, IbcCoreClientUpgradeProposal } from '../../../ibc/core/client/v1/client.js';
import type { OsmosisGammReplaceMigrationRecordsProposal, OsmosisGammUpdateMigrationRecordsProposal, OsmosisGammCreateConcentratedLiquidityPoolsAndLinktoCFMMProposal, OsmosisGammSetScalingFactorControllerProposal } from '../../../osmosis/gamm/v1beta1/gov.js';
import type { OsmosisPoolincentivesReplacePoolIncentivesProposal, OsmosisPoolincentivesUpdatePoolIncentivesProposal } from '../../../osmosis/pool-incentives/v1beta1/gov.js';
import type { OsmosisProtorevSetProtoRevEnabledProposal, OsmosisProtorevSetProtoRevAdminAccountProposal } from '../../../osmosis/protorev/v1beta1/gov.js';
import type { OsmosisSuperfluidSetSuperfluidAssetsProposal, OsmosisSuperfluidRemoveSuperfluidAssetsProposal, OsmosisSuperfluidUpdateUnpoolWhiteListProposal } from '../../../osmosis/superfluid/v1beta1/gov.js';
import type { OsmosisTxfeesUpdateFeeTokenProposal } from '../../../osmosis/txfees/v1beta1/gov.js';
export type AnyCosmosGovTextProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosGovWeightedVoteOption = Encoded<'/cosmos.gov.v1beta1.WeightedVoteOption'>;
export type EncodedCosmosGovTextProposal = Encoded<'/cosmos.gov.v1beta1.TextProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosGovDeposit = Encoded<'/cosmos.gov.v1beta1.Deposit'>;
export type EncodedCosmosGovProposal = Encoded<'/cosmos.gov.v1beta1.Proposal'>;
export type EncodedCosmosGovTallyResult = Encoded<'/cosmos.gov.v1beta1.TallyResult'>;
export type EncodedCosmosGovVote = Encoded<'/cosmos.gov.v1beta1.Vote'>;
export type EncodedCosmosGovDepositParams = Encoded<'/cosmos.gov.v1beta1.DepositParams'>;
export type EncodedCosmosGovVotingParams = Encoded<'/cosmos.gov.v1beta1.VotingParams'>;
export type EncodedCosmosGovTallyParams = Encoded<'/cosmos.gov.v1beta1.TallyParams'>;
/**
 * Encodes a `TextProposal` protobuf message wrapped in the `Any` container: defines a standard text proposal whose changes need to be manually updated in case of approval.
 * @param s_title - `title`: of the proposal.
 * @param s_description - `description`: associated with the proposal.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyTextProposal: (s_title?: Opt<string>, s_description?: Opt<string>) => AnyCosmosGovTextProposal;
/**
 * Encodes a `WeightedVoteOption` protobuf message: defines a unit of vote for vote split. Since: cosmos-sdk 0.43
 * @param xc_option - `option`: defines the valid vote options, it must not contain duplicate vote options.
 * @param s_weight - `weight`: the vote weight associated with the vote option.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovWeightedVoteOption: (xc_option?: Opt<ProtoEnumCosmosGovVoteOption>, s_weight?: Opt<string>) => EncodedCosmosGovWeightedVoteOption;
/**
 * Encodes a `TextProposal` protobuf message: defines a standard text proposal whose changes need to be manually updated in case of approval.
 * @param s_title - `title`: of the proposal.
 * @param s_description - `description`: associated with the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovTextProposal: (s_title?: Opt<string>, s_description?: Opt<string>) => EncodedCosmosGovTextProposal;
/**
 * Encodes a `Deposit` protobuf message: defines an amount deposited by an account address to an active proposal.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @param a_amounts - `amount`: to be deposited by depositor.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovDeposit: (sg_proposal_id?: Opt<WeakUint64Str>, sa_depositor?: Opt<WeakAccountAddr>, a_amounts?: Opt<SlimCoin[]>) => EncodedCosmosGovDeposit;
/**
 * Encodes a `Proposal` protobuf message: defines the core field members of a governance proposal.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param atu8_content - `content`: the proposal's content.
 * @param xc_status - `status`: defines the proposal status.
 * @param g_final_tally_result - `final_tally_result`: the final tally result of the proposal. When querying a proposal via gRPC, this field is not populated until the proposal's voting period has ended.
 * @param xt_submit_time - `submit_time`: the time of proposal submission.
 * @param xt_deposit_end_time - `deposit_end_time`: the end time for deposition.
 * @param a_total_deposits - `total_deposit`: the total deposit on the proposal.
 * @param xt_voting_start_time - `voting_start_time`: the starting time to vote on a proposal.
 * @param xt_voting_end_time - `voting_end_time`: the end time of voting on a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovProposal: (sg_proposal_id?: Opt<WeakUint64Str>, atu8_content?: Opt<Encoded<'cosmos.gov.v1beta1.Content'>>, xc_status?: Opt<ProtoEnumCosmosGovProposalStatus>, atu8_final_tally_result?: Opt<Encoded<'/cosmos.gov.v1beta1.TallyResult'>>, xt_submit_time?: Opt<number>, xt_deposit_end_time?: Opt<number>, a_total_deposits?: Opt<SlimCoin[]>, xt_voting_start_time?: Opt<number>, xt_voting_end_time?: Opt<number>) => EncodedCosmosGovProposal;
/**
 * Encodes a `TallyResult` protobuf message: defines a standard tally for a governance proposal.
 * @param s_yes - `yes`: the number of yes votes on a proposal.
 * @param s_abstain - `abstain`: the number of abstain votes on a proposal.
 * @param s_no - `no`: the number of no votes on a proposal.
 * @param s_no_with_veto - `no_with_veto`: the number of no with veto votes on a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovTallyResult: (s_yes?: Opt<string>, s_abstain?: Opt<string>, s_no?: Opt<string>, s_no_with_veto?: Opt<string>) => EncodedCosmosGovTallyResult;
/**
 * Encodes a `Vote` protobuf message: defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address of the proposal.
 * @param xc_option - `option`: Deprecated: Prefer to use `options` instead. This field is set in queries if and only if `len(options) == 1` and that option has weight 1. In all other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
 * @param a_options - `options`: the weighted vote options. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovVote: (sg_proposal_id?: Opt<WeakUint64Str>, sa_voter?: Opt<WeakAccountAddr>, xc_option?: Opt<ProtoEnumCosmosGovVoteOption>, a_options?: Opt<Encoded<'/cosmos.gov.v1beta1.WeightedVoteOption'>[]>) => EncodedCosmosGovVote;
/**
 * Encodes a `DepositParams` protobuf message: defines the params for deposits on governance proposals.
 * @param a_min_deposits - `min_deposit`: Minimum deposit for a proposal to enter voting period.
 * @param xt_max_deposit_period - `max_deposit_period`: Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovDepositParams: (a_min_deposits?: Opt<SlimCoin[]>, xt_max_deposit_period?: Opt<number>) => EncodedCosmosGovDepositParams;
/**
 * Encodes a `VotingParams` protobuf message: defines the params for voting on governance proposals.
 * @param xt_voting_period - `voting_period`: Duration of the voting period.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovVotingParams: (xt_voting_period?: Opt<number>) => EncodedCosmosGovVotingParams;
/**
 * Encodes a `TallyParams` protobuf message: defines the params for tallying votes on governance proposals.
 * @param atu8_quorum - `quorum`: Minimum percentage of total stake needed to vote for a result to be considered valid.
 * @param atu8_threshold - `threshold`: Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 * @param atu8_veto_threshold - `veto_threshold`: Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGovTallyParams: (atu8_quorum?: Opt<Uint8Array>, atu8_threshold?: Opt<Uint8Array>, atu8_veto_threshold?: Opt<Uint8Array>) => EncodedCosmosGovTallyParams;
/**
 * A decoded protobuf WeightedVoteOption message
 *
 * Tuple where:
 *   - 0: option - defines the valid vote options, it must not contain duplicate vote options.
 *   - 1: weight - the vote weight associated with the vote option.
 */
export type DecodedCosmosGovWeightedVoteOption = [
    xc_option?: ProtoEnumCosmosGovVoteOption,
    s_weight?: string
];
/**
 * Decodes a protobuf WeightedVoteOption message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovWeightedVoteOption}
 */
export declare const decodeCosmosGovWeightedVoteOption: (atu8_payload: Uint8Array) => DecodedCosmosGovWeightedVoteOption;
/**
 * A decoded protobuf TextProposal message
 *
 * Tuple where:
 *   - 0: title - of the proposal.
 *   - 1: description - associated with the proposal.
 */
export type DecodedCosmosGovTextProposal = [
    s_title?: string,
    s_description?: string
];
/**
 * Decodes a protobuf TextProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovTextProposal}
 */
export declare const decodeCosmosGovTextProposal: (atu8_payload: Uint8Array) => DecodedCosmosGovTextProposal;
/**
 * A decoded protobuf Deposit message
 *
 * Tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export type DecodedCosmosGovDeposit = [
    sg_proposal_id?: CwUint64,
    sa_depositor?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovDeposit}
 */
export declare const decodeCosmosGovDeposit: (atu8_payload: Uint8Array) => DecodedCosmosGovDeposit;
/**
 * A decoded protobuf Proposal message
 *
 * Tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: content - the proposal's content.
 *   - 2: status - defines the proposal status.
 *   - 3: final_tally_result - the final tally result of the proposal. When querying a proposal via gRPC, this field is not populated until the proposal's voting period has ended.
 *   - 4: submit_time - the time of proposal submission.
 *   - 5: deposit_end_time - the end time for deposition.
 *   - 6: total_deposit - the total deposit on the proposal.
 *   - 7: voting_start_time - the starting time to vote on a proposal.
 *   - 8: voting_end_time - the end time of voting on a proposal.
 */
export type DecodedCosmosGovProposal = [
    sg_proposal_id?: CwUint64,
    a_content?: DecodedGoogleProtobufAny,
    xc_status?: ProtoEnumCosmosGovProposalStatus,
    a_final_tally_result?: DecodedCosmosGovTallyResult,
    a_submit_time?: [
        string,
        number
    ],
    a_deposit_end_time?: [
        string,
        number
    ],
    a_total_deposit?: [
        string,
        string
    ][],
    a_voting_start_time?: [
        string,
        number
    ],
    a_voting_end_time?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf Proposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovProposal}
 */
export declare const decodeCosmosGovProposal: (atu8_payload: Uint8Array) => DecodedCosmosGovProposal;
/**
 * A decoded protobuf TallyResult message
 *
 * Tuple where:
 *   - 0: yes - the number of yes votes on a proposal.
 *   - 1: abstain - the number of abstain votes on a proposal.
 *   - 2: no - the number of no votes on a proposal.
 *   - 3: no_with_veto - the number of no with veto votes on a proposal.
 */
export type DecodedCosmosGovTallyResult = [
    s_yes?: string,
    s_abstain?: string,
    s_no?: string,
    s_no_with_veto?: string
];
/**
 * Decodes a protobuf TallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovTallyResult}
 */
export declare const decodeCosmosGovTallyResult: (atu8_payload: Uint8Array) => DecodedCosmosGovTallyResult;
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address of the proposal.
 *   - 2: option - Deprecated: Prefer to use `options` instead. This field is set in queries if and only if `len(options) == 1` and that option has weight 1. In all other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
 *   - 3: options - the weighted vote options. Since: cosmos-sdk 0.43
 */
export type DecodedCosmosGovVote = [
    sg_proposal_id?: CwUint64,
    sa_voter?: CwAccountAddr,
    xc_option?: ProtoEnumCosmosGovVoteOption,
    a_options?: DecodedCosmosGovWeightedVoteOption[]
];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovVote}
 */
export declare const decodeCosmosGovVote: (atu8_payload: Uint8Array) => DecodedCosmosGovVote;
/**
 * A decoded protobuf DepositParams message
 *
 * Tuple where:
 *   - 0: min_deposit - Minimum deposit for a proposal to enter voting period.
 *   - 1: max_deposit_period - Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 */
export type DecodedCosmosGovDepositParams = [
    a_min_deposit?: [
        string,
        string
    ][],
    a_max_deposit_period?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf DepositParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovDepositParams}
 */
export declare const decodeCosmosGovDepositParams: (atu8_payload: Uint8Array) => DecodedCosmosGovDepositParams;
/**
 * A decoded protobuf VotingParams message
 *
 * Alias for: voting_period - Duration of the voting period.
 */
export type DecodedCosmosGovVotingParams = [
    a_voting_period?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf VotingParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovVotingParams}
 */
export declare const decodeCosmosGovVotingParams: (atu8_payload: Uint8Array) => DecodedCosmosGovVotingParams;
/**
 * A decoded protobuf TallyParams message
 *
 * Tuple where:
 *   - 0: quorum - Minimum percentage of total stake needed to vote for a result to be considered valid.
 *   - 1: threshold - Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 *   - 2: veto_threshold - Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 */
export type DecodedCosmosGovTallyParams = [
    atu8_quorum?: Uint8Array,
    atu8_threshold?: Uint8Array,
    atu8_veto_threshold?: Uint8Array
];
/**
 * Decodes a protobuf TallyParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovTallyParams}
 */
export declare const decodeCosmosGovTallyParams: (atu8_payload: Uint8Array) => DecodedCosmosGovTallyParams;
/**
 * Destructures the fields of a {@link CosmosGovWeightedVoteOption} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: option - defines the valid vote options, it must not contain duplicate vote options.
 *   - 1: weight - the vote weight associated with the vote option.
 */
export declare const destructCosmosGovWeightedVoteOption: (g_struct: CosmosGovWeightedVoteOption) => [option?: JsonEnumCosmosGovVoteOption, weight?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_WEIGHTED_VOTE_OPTION = "/cosmos.gov.v1beta1.WeightedVoteOption";
/**
 * JSON serialization of `cosmos.gov.v1beta1.WeightedVoteOption` - defines a unit of vote for vote split. Since: cosmos-sdk 0.43
 */
export type CosmosGovWeightedVoteOption = {
    option?: JsonEnumCosmosGovVoteOption | undefined;
    weight?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovTextProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - of the proposal.
 *   - 1: description - associated with the proposal.
 */
export declare const destructCosmosGovTextProposal: (g_struct: CosmosGovTextProposal) => [title?: string, description?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_TEXT_PROPOSAL = "/cosmos.gov.v1beta1.TextProposal";
/**
 * JSON serialization of `cosmos.gov.v1beta1.TextProposal` - defines a standard text proposal whose changes need to be manually updated in case of approval.
 */
export type CosmosGovTextProposal = {
    title?: string | undefined;
    description?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export declare const destructCosmosGovDeposit: (g_struct: CosmosGovDeposit) => [proposal_id?: CwUint64, depositor?: CwAccountAddr, amount?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_DEPOSIT = "/cosmos.gov.v1beta1.Deposit";
/**
 * JSON serialization of `cosmos.gov.v1beta1.Deposit` - defines an amount deposited by an account address to an active proposal.
 */
export type CosmosGovDeposit = {
    proposal_id?: CwUint64 | undefined;
    depositor?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: content - the proposal's content.
 *   - 2: status - defines the proposal status.
 *   - 3: final_tally_result - the final tally result of the proposal. When querying a proposal via gRPC, this field is not populated until the proposal's voting period has ended.
 *   - 4: submit_time - the time of proposal submission.
 *   - 5: deposit_end_time - the end time for deposition.
 *   - 6: total_deposit - the total deposit on the proposal.
 *   - 7: voting_start_time - the starting time to vote on a proposal.
 *   - 8: voting_end_time - the end time of voting on a proposal.
 */
export declare const destructCosmosGovProposal: (g_struct: CosmosGovProposal) => [proposal_id?: CwUint64, content?: JsonAny<string, CosmosDistributionCommunityPoolSpendProposal | CosmosDistributionCommunityPoolSpendProposalWithDeposit | CosmosParamsParameterChangeProposal | CosmosUpgradeSoftwareUpgradeProposal | CosmosUpgradeCancelSoftwareUpgradeProposal | IbcCoreClientClientUpdateProposal | IbcCoreClientUpgradeProposal | OsmosisGammReplaceMigrationRecordsProposal | OsmosisGammUpdateMigrationRecordsProposal | OsmosisGammCreateConcentratedLiquidityPoolsAndLinktoCFMMProposal | OsmosisGammSetScalingFactorControllerProposal | OsmosisPoolincentivesReplacePoolIncentivesProposal | OsmosisPoolincentivesUpdatePoolIncentivesProposal | OsmosisProtorevSetProtoRevEnabledProposal | OsmosisProtorevSetProtoRevAdminAccountProposal | OsmosisSuperfluidSetSuperfluidAssetsProposal | OsmosisSuperfluidRemoveSuperfluidAssetsProposal | OsmosisSuperfluidUpdateUnpoolWhiteListProposal | OsmosisTxfeesUpdateFeeTokenProposal | CosmosGovTextProposal>, status?: JsonEnumCosmosGovProposalStatus, final_tally_result?: CosmosGovTallyResult, submit_time?: number, deposit_end_time?: number, total_deposit?: CosmosBaseCoin[], voting_start_time?: number, voting_end_time?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_PROPOSAL = "/cosmos.gov.v1beta1.Proposal";
/**
 * JSON serialization of `cosmos.gov.v1beta1.Proposal` - defines the core field members of a governance proposal.
 */
export type CosmosGovProposal = {
    proposal_id?: CwUint64 | undefined;
    content?: JsonAny<string, CosmosUpgradeSoftwareUpgradeProposal | CosmosUpgradeCancelSoftwareUpgradeProposal | CosmosDistributionCommunityPoolSpendProposal | CosmosDistributionCommunityPoolSpendProposalWithDeposit | CosmosParamsParameterChangeProposal | CosmosGovTextProposal | IbcCoreClientClientUpdateProposal | IbcCoreClientUpgradeProposal | OsmosisProtorevSetProtoRevEnabledProposal | OsmosisProtorevSetProtoRevAdminAccountProposal | OsmosisGammReplaceMigrationRecordsProposal | OsmosisGammUpdateMigrationRecordsProposal | OsmosisGammCreateConcentratedLiquidityPoolsAndLinktoCFMMProposal | OsmosisGammSetScalingFactorControllerProposal | OsmosisSuperfluidSetSuperfluidAssetsProposal | OsmosisSuperfluidRemoveSuperfluidAssetsProposal | OsmosisSuperfluidUpdateUnpoolWhiteListProposal | OsmosisTxfeesUpdateFeeTokenProposal | OsmosisPoolincentivesReplacePoolIncentivesProposal | OsmosisPoolincentivesUpdatePoolIncentivesProposal> | undefined;
    status?: JsonEnumCosmosGovProposalStatus | undefined;
    final_tally_result?: CosmosGovTallyResult | undefined;
    submit_time?: WeakTimestampStr | undefined;
    deposit_end_time?: WeakTimestampStr | undefined;
    total_deposit?: CosmosBaseCoin[] | undefined;
    voting_start_time?: WeakTimestampStr | undefined;
    voting_end_time?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovTallyResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: yes - the number of yes votes on a proposal.
 *   - 1: abstain - the number of abstain votes on a proposal.
 *   - 2: no - the number of no votes on a proposal.
 *   - 3: no_with_veto - the number of no with veto votes on a proposal.
 */
export declare const destructCosmosGovTallyResult: (g_struct: CosmosGovTallyResult) => [yes?: string, abstain?: string, no?: string, no_with_veto?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_TALLY_RESULT = "/cosmos.gov.v1beta1.TallyResult";
/**
 * JSON serialization of `cosmos.gov.v1beta1.TallyResult` - defines a standard tally for a governance proposal.
 */
export type CosmosGovTallyResult = {
    yes?: string | undefined;
    abstain?: string | undefined;
    no?: string | undefined;
    no_with_veto?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address of the proposal.
 *   - 2: option - Deprecated: Prefer to use `options` instead. This field is set in queries if and only if `len(options) == 1` and that option has weight 1. In all other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
 *   - 3: options - the weighted vote options. Since: cosmos-sdk 0.43
 */
export declare const destructCosmosGovVote: (g_struct: CosmosGovVote) => [proposal_id?: CwUint64, voter?: CwAccountAddr, option?: JsonEnumCosmosGovVoteOption, options?: CosmosGovWeightedVoteOption[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_VOTE = "/cosmos.gov.v1beta1.Vote";
/**
 * JSON serialization of `cosmos.gov.v1beta1.Vote` - defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 */
export type CosmosGovVote = {
    proposal_id?: CwUint64 | undefined;
    voter?: CwAccountAddr | undefined;
    option?: JsonEnumCosmosGovVoteOption | undefined;
    options?: CosmosGovWeightedVoteOption[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovDepositParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: min_deposit - Minimum deposit for a proposal to enter voting period.
 *   - 1: max_deposit_period - Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.
 */
export declare const destructCosmosGovDepositParams: (g_struct: CosmosGovDepositParams) => [min_deposit?: CosmosBaseCoin[], max_deposit_period?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_DEPOSIT_PARAMS = "/cosmos.gov.v1beta1.DepositParams";
/**
 * JSON serialization of `cosmos.gov.v1beta1.DepositParams` - defines the params for deposits on governance proposals.
 */
export type CosmosGovDepositParams = {
    min_deposit?: CosmosBaseCoin[] | undefined;
    max_deposit_period?: WeakDurationStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovVotingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voting_period - Duration of the voting period.
 */
export declare const destructCosmosGovVotingParams: (g_struct: CosmosGovVotingParams) => [voting_period?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_VOTING_PARAMS = "/cosmos.gov.v1beta1.VotingParams";
/**
 * JSON serialization of `cosmos.gov.v1beta1.VotingParams` - defines the params for voting on governance proposals.
 */
export type CosmosGovVotingParams = {
    voting_period?: WeakDurationStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGovTallyParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: quorum - Minimum percentage of total stake needed to vote for a result to be considered valid.
 *   - 1: threshold - Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
 *   - 2: veto_threshold - Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.
 */
export declare const destructCosmosGovTallyParams: (g_struct: CosmosGovTallyParams) => [quorum?: Uint8Array, threshold?: Uint8Array, veto_threshold?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GOV_TALLY_PARAMS = "/cosmos.gov.v1beta1.TallyParams";
/**
 * JSON serialization of `cosmos.gov.v1beta1.TallyParams` - defines the params for tallying votes on governance proposals.
 */
export type CosmosGovTallyParams = {
    quorum?: CwBase64 | undefined;
    threshold?: CwBase64 | undefined;
    veto_threshold?: CwBase64 | undefined;
};
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines a no-op vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export declare const XC_PROTO_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines a no-op vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export declare const SI_JSON_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED = "OptionEmpty";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export declare const XC_PROTO_COSMOS_GOV_VOTE_OPTION_YES = 1;
/**
 * JSON enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export declare const SI_JSON_COSMOS_GOV_VOTE_OPTION_YES = "OptionYes";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export declare const XC_PROTO_COSMOS_GOV_VOTE_OPTION_ABSTAIN = 2;
/**
 * JSON enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export declare const SI_JSON_COSMOS_GOV_VOTE_OPTION_ABSTAIN = "OptionAbstain";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export declare const XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO = 3;
/**
 * JSON enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export declare const SI_JSON_COSMOS_GOV_VOTE_OPTION_NO = "OptionNo";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovVoteOption}
 */
export declare const XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO = 4;
/**
 * JSON enum value for `cosmos.gov.v1beta1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovVoteOption}
 */
export declare const SI_JSON_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO = "OptionNoWithVeto";
/**
 * Raw protobuf enum values for `cosmos.gov.v1beta1.VoteOption` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_GOV_VOTE_OPTION_YES}
 *   - {@link XC_PROTO_COSMOS_GOV_VOTE_OPTION_ABSTAIN}
 *   - {@link XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO}
 *   - {@link XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO}
 */
export type ProtoEnumCosmosGovVoteOption = typeof XC_PROTO_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED | typeof XC_PROTO_COSMOS_GOV_VOTE_OPTION_YES | typeof XC_PROTO_COSMOS_GOV_VOTE_OPTION_ABSTAIN | typeof XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO | typeof XC_PROTO_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO;
/**
 * JSON enum values for `cosmos.gov.v1beta1.VoteOption` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_GOV_VOTE_OPTION_YES}
 *   - {@link SI_JSON_COSMOS_GOV_VOTE_OPTION_ABSTAIN}
 *   - {@link SI_JSON_COSMOS_GOV_VOTE_OPTION_NO}
 *   - {@link SI_JSON_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO}
 */
export type JsonEnumCosmosGovVoteOption = typeof SI_JSON_COSMOS_GOV_VOTE_OPTION_UNSPECIFIED | typeof SI_JSON_COSMOS_GOV_VOTE_OPTION_YES | typeof SI_JSON_COSMOS_GOV_VOTE_OPTION_ABSTAIN | typeof SI_JSON_COSMOS_GOV_VOTE_OPTION_NO | typeof SI_JSON_COSMOS_GOV_VOTE_OPTION_NO_WITH_VETO;
/**
 * Maps a protobuf enum int value for `cosmos.gov.v1beta1.VoteOption` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosGovVoteOption: Record<ProtoEnumCosmosGovVoteOption, JsonEnumCosmosGovVoteOption>;
/**
 * Maps a JSON enum string value for `cosmos.gov.v1beta1.VoteOption` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosGovVoteOption: Record<JsonEnumCosmosGovVoteOption, ProtoEnumCosmosGovVoteOption>;
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - defines the default proposal status.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - defines the default proposal status.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export declare const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED = "StatusNil";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_DEPOSIT_PERIOD** - defines a proposal status during the deposit period.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD = 1;
/**
 * JSON enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_DEPOSIT_PERIOD** - defines a proposal status during the deposit period.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export declare const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD = "StatusDepositPeriod";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_VOTING_PERIOD** - defines a proposal status during the voting period.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD = 2;
/**
 * JSON enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_VOTING_PERIOD** - defines a proposal status during the voting period.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export declare const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD = "StatusVotingPeriod";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_PASSED** - defines a proposal status of a proposal that has passed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_PASSED = 3;
/**
 * JSON enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_PASSED** - defines a proposal status of a proposal that has passed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export declare const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_PASSED = "StatusPassed";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - defines a proposal status of a proposal that has been rejected.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_REJECTED = 4;
/**
 * JSON enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - defines a proposal status of a proposal that has been rejected.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export declare const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_REJECTED = "StatusRejected";
/**
 * Protobuf enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_FAILED** - defines a proposal status of a proposal that has failed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGovProposalStatus}
 */
export declare const XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_FAILED = 5;
/**
 * JSON enum value for `cosmos.gov.v1beta1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_FAILED** - defines a proposal status of a proposal that has failed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGovProposalStatus}
 */
export declare const SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_FAILED = "StatusFailed";
/**
 * Raw protobuf enum values for `cosmos.gov.v1beta1.ProposalStatus` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD}
 *   - {@link XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD}
 *   - {@link XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_PASSED}
 *   - {@link XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_REJECTED}
 *   - {@link XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_FAILED}
 */
export type ProtoEnumCosmosGovProposalStatus = typeof XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED | typeof XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD | typeof XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD | typeof XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_PASSED | typeof XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_REJECTED | typeof XC_PROTO_COSMOS_GOV_PROPOSAL_STATUS_FAILED;
/**
 * JSON enum values for `cosmos.gov.v1beta1.ProposalStatus` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD}
 *   - {@link SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD}
 *   - {@link SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_PASSED}
 *   - {@link SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_REJECTED}
 *   - {@link SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_FAILED}
 */
export type JsonEnumCosmosGovProposalStatus = typeof SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_UNSPECIFIED | typeof SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_DEPOSIT_PERIOD | typeof SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_VOTING_PERIOD | typeof SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_PASSED | typeof SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_REJECTED | typeof SI_JSON_COSMOS_GOV_PROPOSAL_STATUS_FAILED;
/**
 * Maps a protobuf enum int value for `cosmos.gov.v1beta1.ProposalStatus` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosGovProposalStatus: Record<ProtoEnumCosmosGovProposalStatus, JsonEnumCosmosGovProposalStatus>;
/**
 * Maps a JSON enum string value for `cosmos.gov.v1beta1.ProposalStatus` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosGovProposalStatus: Record<JsonEnumCosmosGovProposalStatus, ProtoEnumCosmosGovProposalStatus>;
