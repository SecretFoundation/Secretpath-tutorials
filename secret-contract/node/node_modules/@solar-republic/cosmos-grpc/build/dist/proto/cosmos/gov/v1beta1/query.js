import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeCosmosGovProposal, decodeCosmosGovVote, decodeCosmosGovVotingParams, decodeCosmosGovDepositParams, decodeCosmosGovTallyParams, decodeCosmosGovDeposit, decodeCosmosGovTallyResult } from './gov.js';
const SR_LCD_COSMOS_GOV_QUERY = '/cosmos/gov/v1beta1/p';
/**
 * Queries proposal details based on ProposalID.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - defines the unique id of the proposal.
 * @returns a tuple where:
 *   - 0: proposal - the 'proposal' response property
 */
export const queryCosmosGovProposal = restful_grpc(sg_proposal_id => [SR_LCD_COSMOS_GOV_QUERY + 'roposals/' + sg_proposal_id]);
/**
 * Queries all proposals based on given status.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param xc_proposal_status - defines the status of the proposals.
 * @param sa_voter - defines the voter address for the proposals.
 * @param sa_depositor - defines the deposit addresses from the proposals.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: proposals - defines all the requested governance proposals.
 *   - 1: pagination - defines all the requested governance proposals.
 */
export const queryCosmosGovProposals = restful_grpc((xc_proposal_status, sa_voter, sa_depositor, g_pagination) => [SR_LCD_COSMOS_GOV_QUERY + 'roposals', {
        proposal_status: xc_proposal_status,
        voter: sa_voter,
        depositor: sa_depositor,
        pagination: g_pagination,
    }]);
/**
 * Queries voted information based on proposalID, voterAddr. Due to how we handle state, this query would error for proposals that has already been finished.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - defines the unique id of the proposal.
 * @param sa_voter - defines the voter address for the proposals.
 * @returns a tuple where:
 *   - 0: vote - defines the queried vote.
 */
export const queryCosmosGovVote = restful_grpc((sg_proposal_id, sa_voter) => [SR_LCD_COSMOS_GOV_QUERY + 'roposals/' + sg_proposal_id + '/votes/' + sa_voter]);
/**
 * Queries votes of a given proposal.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - defines the unique id of the proposal.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: votes - defines the queried votes.
 *   - 1: pagination - defines the queried votes.
 */
export const queryCosmosGovVotes = restful_grpc((sg_proposal_id, g_pagination) => [SR_LCD_COSMOS_GOV_QUERY + 'roposals/' + sg_proposal_id + '/votes', {
        pagination: g_pagination,
    }]);
/**
 * Queries all parameters of the gov module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_params_type - defines which parameters to query for, can be one of "voting", "tallying" or "deposit".
 * @returns a tuple where:
 *   - 0: voting_params - defines the parameters related to voting.
 *   - 1: deposit_params - defines the parameters related to voting.
 *   - 2: tally_params - defines the parameters related to voting.
 */
export const queryCosmosGovParams = restful_grpc(s_params_type => [SR_LCD_COSMOS_GOV_QUERY + 'arams/' + s_params_type]);
/**
 * Queries single deposit information based on proposalID, depositor address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - defines the unique id of the proposal.
 * @param sa_depositor - defines the deposit addresses from the proposals.
 * @returns a tuple where:
 *   - 0: deposit - defines the requested deposit.
 */
export const queryCosmosGovDeposit = restful_grpc((sg_proposal_id, sa_depositor) => [SR_LCD_COSMOS_GOV_QUERY + 'roposals/' + sg_proposal_id + '/deposits/' + sa_depositor]);
/**
 * Queries all deposits of a single proposal.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - defines the unique id of the proposal.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: deposits - defines the requested deposits.
 *   - 1: pagination - defines the requested deposits.
 */
export const queryCosmosGovDeposits = restful_grpc((sg_proposal_id, g_pagination) => [SR_LCD_COSMOS_GOV_QUERY + 'roposals/' + sg_proposal_id + '/deposits', {
        pagination: g_pagination,
    }]);
/**
 * Queries the tally of a proposal vote.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - defines the unique id of the proposal.
 * @returns a tuple where:
 *   - 0: tally - defines the requested tally.
 */
export const queryCosmosGovTallyResult = restful_grpc(sg_proposal_id => [SR_LCD_COSMOS_GOV_QUERY + 'roposals/' + sg_proposal_id + '/tally']);
/**
 * Encodes a `QueryProposalRequest` protobuf message: the request type for the Query/Proposal RPC method.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryProposalRequest = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `QueryProposalResponse` protobuf message: the response type for the Query/Proposal RPC method.
 * @param g_proposal - `proposal`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryProposalResponse = (atu8_proposal) => Protobuf() // ...
    .b(atu8_proposal) // Proposal proposal = 1
    .o;
/**
 * Encodes a `QueryProposalsRequest` protobuf message: the request type for the Query/Proposals RPC method.
 * @param xc_proposal_status - `proposal_status`: defines the status of the proposals.
 * @param sa_voter - `voter`: defines the voter address for the proposals.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryProposalsRequest = (xc_proposal_status, sa_voter, sa_depositor, atu8_pagination) => Protobuf() // ...
    .v(xc_proposal_status) // ProposalStatus proposal_status = 1
    .s(sa_voter) // string voter = 2
    .s(sa_depositor) // string depositor = 3
    .b(atu8_pagination) // PageRequest pagination = 4
    .o;
/**
 * Encodes a `QueryProposalsResponse` protobuf message: the response type for the Query/Proposals RPC method.
 * @param a_proposals - `proposals`: defines all the requested governance proposals.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryProposalsResponse = (a_proposals, atu8_pagination) => Protobuf() // ...
    .B(a_proposals) // Proposal[] proposals = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryVoteRequest` protobuf message: the request type for the Query/Vote RPC method.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: defines the voter address for the proposals.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryVoteRequest = (sg_proposal_id, sa_voter) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .o;
/**
 * Encodes a `QueryVoteResponse` protobuf message: the response type for the Query/Vote RPC method.
 * @param g_vote - `vote`: defines the queried vote.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryVoteResponse = (atu8_vote) => Protobuf() // ...
    .b(atu8_vote) // Vote vote = 1
    .o;
/**
 * Encodes a `QueryVotesRequest` protobuf message: the request type for the Query/Votes RPC method.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryVotesRequest = (sg_proposal_id, atu8_pagination) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryVotesResponse` protobuf message: the response type for the Query/Votes RPC method.
 * @param a_votes - `votes`: defines the queried votes.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryVotesResponse = (a_votes, atu8_pagination) => Protobuf() // ...
    .B(a_votes) // Vote[] votes = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @param s_params_type - `params_type`: defines which parameters to query for, can be one of "voting", "tallying" or "deposit".
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryParamsRequest = (s_params_type) => Protobuf() // ...
    .s(s_params_type) // string params_type = 1
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_voting_params - `voting_params`: defines the parameters related to voting.
 * @param g_deposit_params - `deposit_params`: defines the parameters related to deposit.
 * @param g_tally_params - `tally_params`: defines the parameters related to tally.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryParamsResponse = (atu8_voting_params, atu8_deposit_params, atu8_tally_params) => Protobuf() // ...
    .b(atu8_voting_params) // VotingParams voting_params = 1
    .b(atu8_deposit_params) // DepositParams deposit_params = 2
    .b(atu8_tally_params) // TallyParams tally_params = 3
    .o;
/**
 * Encodes a `QueryDepositRequest` protobuf message: the request type for the Query/Deposit RPC method.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryDepositRequest = (sg_proposal_id, sa_depositor) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_depositor) // string depositor = 2
    .o;
/**
 * Encodes a `QueryDepositResponse` protobuf message: the response type for the Query/Deposit RPC method.
 * @param g_deposit - `deposit`: defines the requested deposit.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryDepositResponse = (atu8_deposit) => Protobuf() // ...
    .b(atu8_deposit) // Deposit deposit = 1
    .o;
/**
 * Encodes a `QueryDepositsRequest` protobuf message: the request type for the Query/Deposits RPC method.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryDepositsRequest = (sg_proposal_id, atu8_pagination) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryDepositsResponse` protobuf message: the response type for the Query/Deposits RPC method.
 * @param a_deposits - `deposits`: defines the requested deposits.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryDepositsResponse = (a_deposits, atu8_pagination) => Protobuf() // ...
    .B(a_deposits) // Deposit[] deposits = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryTallyResultRequest` protobuf message: the request type for the Query/Tally RPC method.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryTallyResultRequest = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `QueryTallyResultResponse` protobuf message: the response type for the Query/Tally RPC method.
 * @param g_tally - `tally`: defines the requested tally.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovQueryTallyResultResponse = (atu8_tally) => Protobuf() // ...
    .b(atu8_tally) // TallyResult tally = 1
    .o;
/**
 * Decodes a protobuf QueryProposalRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryProposalRequest}
 */
export const decodeCosmosGovQueryProposalRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryProposalResponse}
 */
export const decodeCosmosGovQueryProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGovProposal]);
/**
 * Decodes a protobuf QueryProposalsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryProposalsRequest}
 */
export const decodeCosmosGovQueryProposalsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 1], [0, 0, 0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryProposals message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryProposalsResponse}
 */
export const decodeCosmosGovQueryProposalsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGovProposal, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryVoteRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryVoteRequest}
 */
export const decodeCosmosGovQueryVoteRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf QueryVote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryVoteResponse}
 */
export const decodeCosmosGovQueryVoteResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGovVote]);
/**
 * Decodes a protobuf QueryVotesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryVotesRequest}
 */
export const decodeCosmosGovQueryVotesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryVotes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryVotesResponse}
 */
export const decodeCosmosGovQueryVotesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGovVote, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryParamsRequest}
 */
export const decodeCosmosGovQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryParamsResponse}
 */
export const decodeCosmosGovQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [decodeCosmosGovVotingParams, decodeCosmosGovDepositParams, decodeCosmosGovTallyParams]);
/**
 * Decodes a protobuf QueryDepositRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryDepositRequest}
 */
export const decodeCosmosGovQueryDepositRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf QueryDeposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryDepositResponse}
 */
export const decodeCosmosGovQueryDepositResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGovDeposit]);
/**
 * Decodes a protobuf QueryDepositsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryDepositsRequest}
 */
export const decodeCosmosGovQueryDepositsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDeposits message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryDepositsResponse}
 */
export const decodeCosmosGovQueryDepositsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGovDeposit, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryTallyResultRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryTallyResultRequest}
 */
export const decodeCosmosGovQueryTallyResultRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryTallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovQueryTallyResultResponse}
 */
export const decodeCosmosGovQueryTallyResultResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGovTallyResult]);
/**
 * Destructures the fields of a {@link CosmosGovQueryProposalRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 */
export const destructCosmosGovQueryProposalRequest = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_PROPOSAL_REQUEST = '/cosmos.gov.v1beta1.QueryProposalRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal -
 */
export const destructCosmosGovQueryProposalResponse = (g_struct) => [g_struct.proposal];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_PROPOSAL_RESPONSE = '/cosmos.gov.v1beta1.QueryProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryProposalsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_status - defines the status of the proposals.
 *   - 1: voter - defines the voter address for the proposals.
 *   - 2: depositor - defines the deposit addresses from the proposals.
 *   - 3: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGovQueryProposalsRequest = (g_struct) => [g_struct.proposal_status, g_struct.voter, g_struct.depositor, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_PROPOSALS_REQUEST = '/cosmos.gov.v1beta1.QueryProposalsRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryProposalsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposals - defines all the requested governance proposals.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGovQueryProposalsResponse = (g_struct) => [g_struct.proposals, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_PROPOSALS_RESPONSE = '/cosmos.gov.v1beta1.QueryProposalsResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryVoteRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - defines the voter address for the proposals.
 */
export const destructCosmosGovQueryVoteRequest = (g_struct) => [g_struct.proposal_id, g_struct.voter];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_VOTE_REQUEST = '/cosmos.gov.v1beta1.QueryVoteRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote - defines the queried vote.
 */
export const destructCosmosGovQueryVoteResponse = (g_struct) => [g_struct.vote];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_VOTE_RESPONSE = '/cosmos.gov.v1beta1.QueryVoteResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryVotesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGovQueryVotesRequest = (g_struct) => [g_struct.proposal_id, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_VOTES_REQUEST = '/cosmos.gov.v1beta1.QueryVotesRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryVotesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: votes - defines the queried votes.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGovQueryVotesResponse = (g_struct) => [g_struct.votes, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_VOTES_RESPONSE = '/cosmos.gov.v1beta1.QueryVotesResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params_type - defines which parameters to query for, can be one of "voting", "tallying" or "deposit".
 */
export const destructCosmosGovQueryParamsRequest = (g_struct) => [g_struct.params_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_PARAMS_REQUEST = '/cosmos.gov.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voting_params - defines the parameters related to voting.
 *   - 1: deposit_params - defines the parameters related to deposit.
 *   - 2: tally_params - defines the parameters related to tally.
 */
export const destructCosmosGovQueryParamsResponse = (g_struct) => [g_struct.voting_params, g_struct.deposit_params, g_struct.tally_params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_PARAMS_RESPONSE = '/cosmos.gov.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryDepositRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 */
export const destructCosmosGovQueryDepositRequest = (g_struct) => [g_struct.proposal_id, g_struct.depositor];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_DEPOSIT_REQUEST = '/cosmos.gov.v1beta1.QueryDepositRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryDepositResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deposit - defines the requested deposit.
 */
export const destructCosmosGovQueryDepositResponse = (g_struct) => [g_struct.deposit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_DEPOSIT_RESPONSE = '/cosmos.gov.v1beta1.QueryDepositResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryDepositsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGovQueryDepositsRequest = (g_struct) => [g_struct.proposal_id, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_DEPOSITS_REQUEST = '/cosmos.gov.v1beta1.QueryDepositsRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryDepositsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deposits - defines the requested deposits.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGovQueryDepositsResponse = (g_struct) => [g_struct.deposits, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_DEPOSITS_RESPONSE = '/cosmos.gov.v1beta1.QueryDepositsResponse';
/**
 * Destructures the fields of a {@link CosmosGovQueryTallyResultRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 */
export const destructCosmosGovQueryTallyResultRequest = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_TALLY_RESULT_REQUEST = '/cosmos.gov.v1beta1.QueryTallyResultRequest';
/**
 * Destructures the fields of a {@link CosmosGovQueryTallyResultResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tally - defines the requested tally.
 */
export const destructCosmosGovQueryTallyResultResponse = (g_struct) => [g_struct.tally];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_QUERY_TALLY_RESULT_RESPONSE = '/cosmos.gov.v1beta1.QueryTallyResultResponse';
//# sourceMappingURL=query.js.map