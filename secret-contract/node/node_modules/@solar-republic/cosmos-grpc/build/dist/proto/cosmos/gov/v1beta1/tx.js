import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { decodeCosmosGovWeightedVoteOption } from './gov.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `MsgSubmitProposal` protobuf message: defines an sdk.Msg type that supports submitting arbitrary proposal Content.
 * @param atu8_content - `content`: the proposal's content.
 * @param a_initial_deposits - `initial_deposit`: the deposit value that must be paid at proposal submission.
 * @param s_proposer - `proposer`: the account address of the proposer.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgSubmitProposal = (atu8_content, a_initial_deposits, s_proposer) => Protobuf() // ...
    .b(atu8_content) // Any content = 1
    .B(coins(a_initial_deposits)) // Coin[] initial_deposit = 2
    .s(s_proposer) // string proposer = 3
    .o;
/**
 * Encodes a `MsgSubmitProposalResponse` protobuf message: defines the Msg/SubmitProposal response type.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgSubmitProposalResponse = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `MsgVote` protobuf message: defines a message to cast a vote.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address for the proposal.
 * @param xc_option - `option`: defines the vote option.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVote = (sg_proposal_id, sa_voter, xc_option) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .v(xc_option) // VoteOption option = 3
    .o;
/**
 * Encodes a `MsgVoteResponse` protobuf message: defines the Msg/Vote response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVoteResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgVoteWeighted` protobuf message: defines a message to cast a vote. Since: cosmos-sdk 0.43
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_voter - `voter`: the voter address for the proposal.
 * @param a_options - `options`: defines the weighted vote options.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVoteWeighted = (sg_proposal_id, sa_voter, a_options) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .B(a_options) // WeightedVoteOption[] options = 3
    .o;
/**
 * Encodes a `MsgVoteWeightedResponse` protobuf message: defines the Msg/VoteWeighted response type. Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgVoteWeightedResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgDeposit` protobuf message: defines a message to submit a deposit to an existing proposal.
 * @param sg_proposal_id - `proposal_id`: defines the unique id of the proposal.
 * @param sa_depositor - `depositor`: defines the deposit addresses from the proposals.
 * @param a_amounts - `amount`: to be deposited by depositor.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgDeposit = (sg_proposal_id, sa_depositor, a_amounts) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_depositor) // string depositor = 2
    .B(coins(a_amounts)) // Coin[] amount = 3
    .o;
/**
 * Encodes a `MsgDepositResponse` protobuf message: defines the Msg/Deposit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGovMsgDepositResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgSubmitProposal}
 */
export const decodeCosmosGovMsgSubmitProposal = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 5], [decodeGoogleProtobufAny, decode_coin]);
/**
 * Decodes a protobuf SubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgSubmitProposalResponse}
 */
export const decodeCosmosGovMsgSubmitProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVote}
 */
export const decodeCosmosGovMsgVote = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteResponse}
 */
export const decodeCosmosGovMsgVoteResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf VoteWeighted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteWeighted}
 */
export const decodeCosmosGovMsgVoteWeighted = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 0], [0, 0, decodeCosmosGovWeightedVoteOption]);
/**
 * Decodes a protobuf VoteWeighted message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgVoteWeightedResponse}
 */
export const decodeCosmosGovMsgVoteWeightedResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgDeposit}
 */
export const decodeCosmosGovMsgDeposit = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf Deposit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGovMsgDepositResponse}
 */
export const decodeCosmosGovMsgDepositResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmosGovMsgSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: content - the proposal's content.
 *   - 1: initial_deposit - the deposit value that must be paid at proposal submission.
 *   - 2: proposer - the account address of the proposer.
 */
export const destructCosmosGovMsgSubmitProposal = (g_struct) => [g_struct.content, g_struct.initial_deposit, g_struct.proposer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_SUBMIT_PROPOSAL = '/cosmos.gov.v1beta1.MsgSubmitProposal';
/**
 * Destructures the fields of a {@link CosmosGovMsgSubmitProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 */
export const destructCosmosGovMsgSubmitProposalResponse = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_SUBMIT_PROPOSAL_RESPONSE = '/cosmos.gov.v1beta1.MsgSubmitProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: option - defines the vote option.
 */
export const destructCosmosGovMsgVote = (g_struct) => [g_struct.proposal_id, g_struct.voter, g_struct.option];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE = '/cosmos.gov.v1beta1.MsgVote';
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgVoteResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_RESPONSE = '/cosmos.gov.v1beta1.MsgVoteResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteWeighted} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: voter - the voter address for the proposal.
 *   - 2: options - defines the weighted vote options.
 */
export const destructCosmosGovMsgVoteWeighted = (g_struct) => [g_struct.proposal_id, g_struct.voter, g_struct.options];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_WEIGHTED = '/cosmos.gov.v1beta1.MsgVoteWeighted';
/**
 * Destructures the fields of a {@link CosmosGovMsgVoteWeightedResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgVoteWeightedResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_VOTE_WEIGHTED_RESPONSE = '/cosmos.gov.v1beta1.MsgVoteWeightedResponse';
/**
 * Destructures the fields of a {@link CosmosGovMsgDeposit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - defines the unique id of the proposal.
 *   - 1: depositor - defines the deposit addresses from the proposals.
 *   - 2: amount - to be deposited by depositor.
 */
export const destructCosmosGovMsgDeposit = (g_struct) => [g_struct.proposal_id, g_struct.depositor, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_DEPOSIT = '/cosmos.gov.v1beta1.MsgDeposit';
/**
 * Destructures the fields of a {@link CosmosGovMsgDepositResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosGovMsgDepositResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GOV_MSG_DEPOSIT_RESPONSE = '/cosmos.gov.v1beta1.MsgDepositResponse';
//# sourceMappingURL=tx.js.map