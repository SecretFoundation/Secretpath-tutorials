import { parse_duration } from '../../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../../../api/protobuf-writer.js';
/**
 * Encodes a `Module` protobuf message: the config object of the group module.
 * @param xt_max_execution_period - `max_execution_period`: defines the max duration after a proposal's voting period ends that members can send a MsgExec to execute the proposal.
 * @param sg_max_metadata_len - `max_metadata_len`: defines the max length of the metadata bytes field for various entities within the group module. Defaults to 255 if not explicitly set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupModuleModule = (xt_max_execution_period, sg_max_metadata_len) => Protobuf() // ...
    .b(temporal(xt_max_execution_period)) // Duration max_execution_period = 1
    .g(sg_max_metadata_len) // uint64 max_metadata_len = 2
    .o;
/**
 * Decodes a protobuf Module message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupModuleModule}
 */
export const decodeCosmosGroupModuleModule = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1], 3], [decode_temporal]);
/**
 * Destructures the fields of a {@link CosmosGroupModuleModule} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_execution_period - defines the max duration after a proposal's voting period ends that members can send a MsgExec to execute the proposal.
 *   - 1: max_metadata_len - defines the max length of the metadata bytes field for various entities within the group module. Defaults to 255 if not explicitly set.
 */
export const destructCosmosGroupModuleModule = (g_struct) => [parse_duration(g_struct.max_execution_period), g_struct.max_metadata_len];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MODULE_MODULE = '/cosmos.group.module.v1.Module';
//# sourceMappingURL=module.js.map