import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeCosmosGroupTallyResult } from './types.js';
/**
 * Encodes a `EventCreateGroup` protobuf message: an event emitted when a group is created.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventCreateGroup = (sg_group_id) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .o;
/**
 * Encodes a `EventUpdateGroup` protobuf message: an event emitted when a group is updated.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventUpdateGroup = (sg_group_id) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .o;
/**
 * Encodes a `EventCreateGroupPolicy` protobuf message: an event emitted when a group policy is created.
 * @param sa_address - `address`: the account address of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventCreateGroupPolicy = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Encodes a `EventUpdateGroupPolicy` protobuf message: an event emitted when a group policy is updated.
 * @param sa_address - `address`: the account address of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventUpdateGroupPolicy = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Encodes a `EventSubmitProposal` protobuf message: an event emitted when a proposal is created.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventSubmitProposal = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `EventWithdrawProposal` protobuf message: an event emitted when a proposal is withdrawn.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventWithdrawProposal = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `EventVote` protobuf message: an event emitted when a voter votes on a proposal.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventVote = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `EventExec` protobuf message: an event emitted when a proposal is executed.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @param xc_result - `result`: the proposal execution result.
 * @param s_logs - `logs`: contains error logs in case the execution result is FAILURE.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventExec = (sg_proposal_id, xc_result, s_logs) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .v(xc_result) // ProposalExecutorResult result = 2
    .s(s_logs) // string logs = 3
    .o;
/**
 * Encodes a `EventLeaveGroup` protobuf message: an event emitted when group member leaves the group.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param sa_address - `address`: the account address of the group member.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventLeaveGroup = (sg_group_id, sa_address) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .s(sa_address) // string address = 2
    .o;
/**
 * Encodes a `EventProposalPruned` protobuf message: an event emitted when a proposal is pruned.
 * @param sg_proposal_id - `proposal_id`: the unique ID of the proposal.
 * @param xc_status - `status`: the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
 * @param g_tally_result - `tally_result`: the proposal tally result (when applicable).
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupEventProposalPruned = (sg_proposal_id, xc_status, atu8_tally_result) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .v(xc_status) // ProposalStatus status = 2
    .b(atu8_tally_result) // TallyResult tally_result = 3
    .o;
/**
 * Decodes a protobuf EventCreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventCreateGroup}
 */
export const decodeCosmosGroupEventCreateGroup = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf EventUpdateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventUpdateGroup}
 */
export const decodeCosmosGroupEventUpdateGroup = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf EventCreateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventCreateGroupPolicy}
 */
export const decodeCosmosGroupEventCreateGroupPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf EventUpdateGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventUpdateGroupPolicy}
 */
export const decodeCosmosGroupEventUpdateGroupPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf EventSubmitProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventSubmitProposal}
 */
export const decodeCosmosGroupEventSubmitProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf EventWithdrawProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventWithdrawProposal}
 */
export const decodeCosmosGroupEventWithdrawProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf EventVote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventVote}
 */
export const decodeCosmosGroupEventVote = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf EventExec message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventExec}
 */
export const decodeCosmosGroupEventExec = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 5]);
/**
 * Decodes a protobuf EventLeaveGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventLeaveGroup}
 */
export const decodeCosmosGroupEventLeaveGroup = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf EventProposalPruned message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupEventProposalPruned}
 */
export const decodeCosmosGroupEventProposalPruned = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1], [0, 0, decodeCosmosGroupTallyResult]);
/**
 * Destructures the fields of a {@link CosmosGroupEventCreateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 */
export const destructCosmosGroupEventCreateGroup = (g_struct) => [g_struct.group_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_CREATE_GROUP = '/cosmos.group.v1.EventCreateGroup';
/**
 * Destructures the fields of a {@link CosmosGroupEventUpdateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 */
export const destructCosmosGroupEventUpdateGroup = (g_struct) => [g_struct.group_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_UPDATE_GROUP = '/cosmos.group.v1.EventUpdateGroup';
/**
 * Destructures the fields of a {@link CosmosGroupEventCreateGroupPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy.
 */
export const destructCosmosGroupEventCreateGroupPolicy = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_CREATE_GROUP_POLICY = '/cosmos.group.v1.EventCreateGroupPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupEventUpdateGroupPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy.
 */
export const destructCosmosGroupEventUpdateGroupPolicy = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_UPDATE_GROUP_POLICY = '/cosmos.group.v1.EventUpdateGroupPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupEventSubmitProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 */
export const destructCosmosGroupEventSubmitProposal = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_SUBMIT_PROPOSAL = '/cosmos.group.v1.EventSubmitProposal';
/**
 * Destructures the fields of a {@link CosmosGroupEventWithdrawProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 */
export const destructCosmosGroupEventWithdrawProposal = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_WITHDRAW_PROPOSAL = '/cosmos.group.v1.EventWithdrawProposal';
/**
 * Destructures the fields of a {@link CosmosGroupEventVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 */
export const destructCosmosGroupEventVote = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_VOTE = '/cosmos.group.v1.EventVote';
/**
 * Destructures the fields of a {@link CosmosGroupEventExec} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 *   - 1: result - the proposal execution result.
 *   - 2: logs - contains error logs in case the execution result is FAILURE.
 */
export const destructCosmosGroupEventExec = (g_struct) => [g_struct.proposal_id, g_struct.result, g_struct.logs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_EXEC = '/cosmos.group.v1.EventExec';
/**
 * Destructures the fields of a {@link CosmosGroupEventLeaveGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: address - the account address of the group member.
 */
export const destructCosmosGroupEventLeaveGroup = (g_struct) => [g_struct.group_id, g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_LEAVE_GROUP = '/cosmos.group.v1.EventLeaveGroup';
/**
 * Destructures the fields of a {@link CosmosGroupEventProposalPruned} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of the proposal.
 *   - 1: status - the proposal status (UNSPECIFIED, SUBMITTED, ACCEPTED, REJECTED, ABORTED, WITHDRAWN).
 *   - 2: tally_result - the proposal tally result (when applicable).
 */
export const destructCosmosGroupEventProposalPruned = (g_struct) => [g_struct.proposal_id, g_struct.status, g_struct.tally_result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_EVENT_PROPOSAL_PRUNED = '/cosmos.group.v1.EventProposalPruned';
//# sourceMappingURL=events.js.map