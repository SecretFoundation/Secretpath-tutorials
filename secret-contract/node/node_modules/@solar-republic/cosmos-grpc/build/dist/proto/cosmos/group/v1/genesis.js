import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { decodeCosmosGroupGroupInfo, decodeCosmosGroupGroupMember, decodeCosmosGroupGroupPolicyInfo, decodeCosmosGroupProposal, decodeCosmosGroupVote } from './types.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the group module's genesis state.
 * @param sg_group_seq - `group_seq`: the group table orm.Sequence, it is used to get the next group ID.
 * @param a_groups - `groups`: the list of groups info.
 * @param a_group_members - `group_members`: the list of groups members.
 * @param sg_group_policy_seq - `group_policy_seq`: the group policy table orm.Sequence, it is used to generate the next group policy account address.
 * @param a_group_policies - `group_policies`: the list of group policies info.
 * @param sg_proposal_seq - `proposal_seq`: the proposal table orm.Sequence, it is used to get the next proposal ID.
 * @param a_proposals - `proposals`: the list of proposals.
 * @param a_votes - `votes`: the list of votes.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupGenesisState = (sg_group_seq, a_groups, a_group_members, sg_group_policy_seq, a_group_policies, sg_proposal_seq, a_proposals, a_votes) => Protobuf() // ...
    .g(sg_group_seq) // uint64 group_seq = 1
    .B(a_groups) // GroupInfo[] groups = 2
    .B(a_group_members) // GroupMember[] group_members = 3
    .g(sg_group_policy_seq) // uint64 group_policy_seq = 4
    .B(a_group_policies) // GroupPolicyInfo[] group_policies = 5
    .g(sg_proposal_seq) // uint64 proposal_seq = 6
    .B(a_proposals) // Proposal[] proposals = 7
    .B(a_votes) // Vote[] votes = 8
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGenesisState}
 */
export const decodeCosmosGroupGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0, 0, 3, 0, 3, 0, 0], [0, decodeCosmosGroupGroupInfo, decodeCosmosGroupGroupMember, 0, decodeCosmosGroupGroupPolicyInfo, 0, decodeCosmosGroupProposal, decodeCosmosGroupVote]);
/**
 * Destructures the fields of a {@link CosmosGroupGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_seq - the group table orm.Sequence, it is used to get the next group ID.
 *   - 1: groups - the list of groups info.
 *   - 2: group_members - the list of groups members.
 *   - 3: group_policy_seq - the group policy table orm.Sequence, it is used to generate the next group policy account address.
 *   - 4: group_policies - the list of group policies info.
 *   - 5: proposal_seq - the proposal table orm.Sequence, it is used to get the next proposal ID.
 *   - 6: proposals - the list of proposals.
 *   - 7: votes - the list of votes.
 */
export const destructCosmosGroupGenesisState = (g_struct) => [g_struct.group_seq, g_struct.groups, g_struct.group_members, g_struct.group_policy_seq, g_struct.group_policies, g_struct.proposal_seq, g_struct.proposals, g_struct.votes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_GENESIS_STATE = '/cosmos.group.v1.GenesisState';
//# sourceMappingURL=genesis.js.map