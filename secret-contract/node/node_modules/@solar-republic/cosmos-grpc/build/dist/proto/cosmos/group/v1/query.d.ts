/// <reference types="node" />
import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import type { CosmosGroupGroupInfo, DecodedCosmosGroupGroupInfo, CosmosGroupGroupPolicyInfo, DecodedCosmosGroupGroupPolicyInfo, CosmosGroupGroupMember, DecodedCosmosGroupGroupMember, CosmosGroupProposal, DecodedCosmosGroupProposal, CosmosGroupVote, DecodedCosmosGroupVote, CosmosGroupTallyResult, DecodedCosmosGroupTallyResult } from './types.js';
export type EncodedCosmosGroupQueryGroupInfoRequest = Encoded<'/cosmos.group.v1.QueryGroupInfoRequest'>;
export type EncodedCosmosGroupQueryGroupInfoResponse = Encoded<'/cosmos.group.v1.QueryGroupInfoResponse'>;
export type EncodedCosmosGroupQueryGroupPolicyInfoRequest = Encoded<'/cosmos.group.v1.QueryGroupPolicyInfoRequest'>;
export type EncodedCosmosGroupQueryGroupPolicyInfoResponse = Encoded<'/cosmos.group.v1.QueryGroupPolicyInfoResponse'>;
export type EncodedCosmosGroupQueryGroupMembersRequest = Encoded<'/cosmos.group.v1.QueryGroupMembersRequest'>;
export type EncodedCosmosGroupQueryGroupMembersResponse = Encoded<'/cosmos.group.v1.QueryGroupMembersResponse'>;
export type EncodedCosmosGroupQueryGroupsByAdminRequest = Encoded<'/cosmos.group.v1.QueryGroupsByAdminRequest'>;
export type EncodedCosmosGroupQueryGroupsByAdminResponse = Encoded<'/cosmos.group.v1.QueryGroupsByAdminResponse'>;
export type EncodedCosmosGroupQueryGroupPoliciesByGroupRequest = Encoded<'/cosmos.group.v1.QueryGroupPoliciesByGroupRequest'>;
export type EncodedCosmosGroupQueryGroupPoliciesByGroupResponse = Encoded<'/cosmos.group.v1.QueryGroupPoliciesByGroupResponse'>;
export type EncodedCosmosGroupQueryGroupPoliciesByAdminRequest = Encoded<'/cosmos.group.v1.QueryGroupPoliciesByAdminRequest'>;
export type EncodedCosmosGroupQueryGroupPoliciesByAdminResponse = Encoded<'/cosmos.group.v1.QueryGroupPoliciesByAdminResponse'>;
export type EncodedCosmosGroupQueryProposalRequest = Encoded<'/cosmos.group.v1.QueryProposalRequest'>;
export type EncodedCosmosGroupQueryProposalResponse = Encoded<'/cosmos.group.v1.QueryProposalResponse'>;
export type EncodedCosmosGroupQueryProposalsByGroupPolicyRequest = Encoded<'/cosmos.group.v1.QueryProposalsByGroupPolicyRequest'>;
export type EncodedCosmosGroupQueryProposalsByGroupPolicyResponse = Encoded<'/cosmos.group.v1.QueryProposalsByGroupPolicyResponse'>;
export type EncodedCosmosGroupQueryVoteByProposalVoterRequest = Encoded<'/cosmos.group.v1.QueryVoteByProposalVoterRequest'>;
export type EncodedCosmosGroupQueryVoteByProposalVoterResponse = Encoded<'/cosmos.group.v1.QueryVoteByProposalVoterResponse'>;
export type EncodedCosmosGroupQueryVotesByProposalRequest = Encoded<'/cosmos.group.v1.QueryVotesByProposalRequest'>;
export type EncodedCosmosGroupQueryVotesByProposalResponse = Encoded<'/cosmos.group.v1.QueryVotesByProposalResponse'>;
export type EncodedCosmosGroupQueryVotesByVoterRequest = Encoded<'/cosmos.group.v1.QueryVotesByVoterRequest'>;
export type EncodedCosmosGroupQueryVotesByVoterResponse = Encoded<'/cosmos.group.v1.QueryVotesByVoterResponse'>;
export type EncodedCosmosGroupQueryGroupsByMemberRequest = Encoded<'/cosmos.group.v1.QueryGroupsByMemberRequest'>;
export type EncodedCosmosGroupQueryGroupsByMemberResponse = Encoded<'/cosmos.group.v1.QueryGroupsByMemberResponse'>;
export type EncodedCosmosGroupQueryTallyResultRequest = Encoded<'/cosmos.group.v1.QueryTallyResultRequest'>;
export type EncodedCosmosGroupQueryTallyResultResponse = Encoded<'/cosmos.group.v1.QueryTallyResultResponse'>;
export type EncodedCosmosGroupQueryGroupsRequest = Encoded<'/cosmos.group.v1.QueryGroupsRequest'>;
export type EncodedCosmosGroupQueryGroupsResponse = Encoded<'/cosmos.group.v1.QueryGroupsResponse'>;
/**
 * Queries group info based on group id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_id - the unique ID of the group.
 * @returns a tuple where:
 *   - 0: info - the GroupInfo of the group.
 */
export declare const queryCosmosGroupGroupInfo: (z_req: string | ({
    origin: string;
} & RequestInit), sg_group_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupInfoResponse>>;
/**
 * Queries group policy info based on account address of group policy.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the account address of the group policy.
 * @returns a tuple where:
 *   - 0: info - the GroupPolicyInfo of the group policy.
 */
export declare const queryCosmosGroupGroupPolicyInfo: (z_req: string | ({
    origin: string;
} & RequestInit), sa_address?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupPolicyInfoResponse>>;
/**
 * Queries members of a group by group id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_id - the unique ID of the group.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: members - the members of the group with given group_id.
 *   - 1: pagination - the members of the group with given group_id.
 */
export declare const queryCosmosGroupGroupMembers: (z_req: string | ({
    origin: string;
} & RequestInit), sg_group_id?: Opt<`${bigint}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupMembersResponse>>;
/**
 * Queries groups by admin address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account address of a group's admin.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided admin.
 *   - 1: pagination - the groups info with the provided admin.
 */
export declare const queryCosmosGroupGroupsByAdmin: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupsByAdminResponse>>;
/**
 * Queries group policies by group id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_id - the unique ID of the group policy's group.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info associated with the provided group.
 *   - 1: pagination - the group policies info associated with the provided group.
 */
export declare const queryCosmosGroupGroupPoliciesByGroup: (z_req: string | ({
    origin: string;
} & RequestInit), sg_group_id?: Opt<`${bigint}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupPoliciesByGroupResponse>>;
/**
 * Queries group policies by admin address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the admin address of the group policy.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info with provided admin.
 *   - 1: pagination - the group policies info with provided admin.
 */
export declare const queryCosmosGroupGroupPoliciesByAdmin: (z_req: string | ({
    origin: string;
} & RequestInit), s_admin?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupPoliciesByAdminResponse>>;
/**
 * Queries a proposal based on proposal id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique ID of a proposal.
 * @returns a tuple where:
 *   - 0: proposal - the proposal info.
 */
export declare const queryCosmosGroupProposal: (z_req: string | ({
    origin: string;
} & RequestInit), sg_proposal_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryProposalResponse>>;
/**
 * Queries proposals based on account address of group policy.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the account address of the group policy related to proposals.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: proposals - the proposals with given group policy.
 *   - 1: pagination - the proposals with given group policy.
 */
export declare const queryCosmosGroupProposalsByGroupPolicy: (z_req: string | ({
    origin: string;
} & RequestInit), sa_address?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryProposalsByGroupPolicyResponse>>;
/**
 * Queries a vote by proposal id and voter.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique ID of a proposal.
 * @param sa_voter - a proposal voter account address.
 * @returns a tuple where:
 *   - 0: vote - the vote with given proposal_id and voter.
 */
export declare const queryCosmosGroupVoteByProposalVoter: (z_req: string | ({
    origin: string;
} & RequestInit), sg_proposal_id?: Opt<`${bigint}`>, sa_voter?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryVoteByProposalVoterResponse>>;
/**
 * Queries a vote by proposal id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique ID of a proposal.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: votes - the list of votes for given proposal_id.
 *   - 1: pagination - the list of votes for given proposal_id.
 */
export declare const queryCosmosGroupVotesByProposal: (z_req: string | ({
    origin: string;
} & RequestInit), sg_proposal_id?: Opt<`${bigint}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryVotesByProposalResponse>>;
/**
 * Queries a vote by voter.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_voter - a proposal voter account address.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: votes - the list of votes by given voter.
 *   - 1: pagination - the list of votes by given voter.
 */
export declare const queryCosmosGroupVotesByVoter: (z_req: string | ({
    origin: string;
} & RequestInit), sa_voter?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryVotesByVoterResponse>>;
/**
 * Queries groups by member address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the group member address.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided group member.
 *   - 1: pagination - the groups info with the provided group member.
 */
export declare const queryCosmosGroupGroupsByMember: (z_req: string | ({
    origin: string;
} & RequestInit), sa_address?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupsByMemberResponse>>;
/**
 * Returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique id of a proposal.
 * @returns a tuple where:
 *   - 0: tally - defines the requested tally.
 */
export declare const queryCosmosGroupTallyResult: (z_req: string | ({
    origin: string;
} & RequestInit), sg_proposal_id?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryTallyResultResponse>>;
/**
 * Queries all groups in state. Since: cosmos-sdk 0.47.1
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: groups - `groups` is all the groups present in state.
 *   - 1: pagination - `groups` is all the groups present in state.
 */
export declare const queryCosmosGroupGroups: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosGroupQueryGroupsResponse>>;
/**
 * Encodes a `QueryGroupInfoRequest` protobuf message: the Query/GroupInfo request type.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupInfoRequest: (sg_group_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupQueryGroupInfoRequest;
/**
 * Encodes a `QueryGroupInfoResponse` protobuf message: the Query/GroupInfo response type.
 * @param g_info - `info`: the GroupInfo of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupInfoResponse: (atu8_info?: Opt<Encoded<'/cosmos.group.v1.GroupInfo'>>) => EncodedCosmosGroupQueryGroupInfoResponse;
/**
 * Encodes a `QueryGroupPolicyInfoRequest` protobuf message: the Query/GroupPolicyInfo request type.
 * @param sa_address - `address`: the account address of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupPolicyInfoRequest: (sa_address?: Opt<WeakAccountAddr>) => EncodedCosmosGroupQueryGroupPolicyInfoRequest;
/**
 * Encodes a `QueryGroupPolicyInfoResponse` protobuf message: the Query/GroupPolicyInfo response type.
 * @param g_info - `info`: the GroupPolicyInfo of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupPolicyInfoResponse: (atu8_info?: Opt<Encoded<'/cosmos.group.v1.GroupPolicyInfo'>>) => EncodedCosmosGroupQueryGroupPolicyInfoResponse;
/**
 * Encodes a `QueryGroupMembersRequest` protobuf message: the Query/GroupMembers request type.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupMembersRequest: (sg_group_id?: Opt<WeakUint64Str>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryGroupMembersRequest;
/**
 * Encodes a `QueryGroupMembersResponse` protobuf message: the Query/GroupMembersResponse response type.
 * @param a_members - `members`: the members of the group with given group_id.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupMembersResponse: (a_members?: Opt<Encoded<'/cosmos.group.v1.GroupMember'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryGroupMembersResponse;
/**
 * Encodes a `QueryGroupsByAdminRequest` protobuf message: the Query/GroupsByAdmin request type.
 * @param s_admin - `admin`: the account address of a group's admin.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupsByAdminRequest: (s_admin?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryGroupsByAdminRequest;
/**
 * Encodes a `QueryGroupsByAdminResponse` protobuf message: the Query/GroupsByAdminResponse response type.
 * @param a_groups - `groups`: the groups info with the provided admin.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupsByAdminResponse: (a_groups?: Opt<Encoded<'/cosmos.group.v1.GroupInfo'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryGroupsByAdminResponse;
/**
 * Encodes a `QueryGroupPoliciesByGroupRequest` protobuf message: the Query/GroupPoliciesByGroup request type.
 * @param sg_group_id - `group_id`: the unique ID of the group policy's group.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupPoliciesByGroupRequest: (sg_group_id?: Opt<WeakUint64Str>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryGroupPoliciesByGroupRequest;
/**
 * Encodes a `QueryGroupPoliciesByGroupResponse` protobuf message: the Query/GroupPoliciesByGroup response type.
 * @param a_group_policies - `group_policies`: the group policies info associated with the provided group.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupPoliciesByGroupResponse: (a_group_policies?: Opt<Encoded<'/cosmos.group.v1.GroupPolicyInfo'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryGroupPoliciesByGroupResponse;
/**
 * Encodes a `QueryGroupPoliciesByAdminRequest` protobuf message: the Query/GroupPoliciesByAdmin request type.
 * @param s_admin - `admin`: the admin address of the group policy.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupPoliciesByAdminRequest: (s_admin?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryGroupPoliciesByAdminRequest;
/**
 * Encodes a `QueryGroupPoliciesByAdminResponse` protobuf message: the Query/GroupPoliciesByAdmin response type.
 * @param a_group_policies - `group_policies`: the group policies info with provided admin.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupPoliciesByAdminResponse: (a_group_policies?: Opt<Encoded<'/cosmos.group.v1.GroupPolicyInfo'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryGroupPoliciesByAdminResponse;
/**
 * Encodes a `QueryProposalRequest` protobuf message: the Query/Proposal request type.
 * @param sg_proposal_id - `proposal_id`: the unique ID of a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryProposalRequest: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupQueryProposalRequest;
/**
 * Encodes a `QueryProposalResponse` protobuf message: the Query/Proposal response type.
 * @param g_proposal - `proposal`: the proposal info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryProposalResponse: (atu8_proposal?: Opt<Encoded<'/cosmos.group.v1.Proposal'>>) => EncodedCosmosGroupQueryProposalResponse;
/**
 * Encodes a `QueryProposalsByGroupPolicyRequest` protobuf message: the Query/ProposalByGroupPolicy request type.
 * @param sa_address - `address`: the account address of the group policy related to proposals.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryProposalsByGroupPolicyRequest: (sa_address?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryProposalsByGroupPolicyRequest;
/**
 * Encodes a `QueryProposalsByGroupPolicyResponse` protobuf message: the Query/ProposalByGroupPolicy response type.
 * @param a_proposals - `proposals`: the proposals with given group policy.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryProposalsByGroupPolicyResponse: (a_proposals?: Opt<Encoded<'/cosmos.group.v1.Proposal'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryProposalsByGroupPolicyResponse;
/**
 * Encodes a `QueryVoteByProposalVoterRequest` protobuf message: the Query/VoteByProposalVoter request type.
 * @param sg_proposal_id - `proposal_id`: the unique ID of a proposal.
 * @param sa_voter - `voter`: a proposal voter account address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryVoteByProposalVoterRequest: (sg_proposal_id?: Opt<WeakUint64Str>, sa_voter?: Opt<WeakAccountAddr>) => EncodedCosmosGroupQueryVoteByProposalVoterRequest;
/**
 * Encodes a `QueryVoteByProposalVoterResponse` protobuf message: the Query/VoteByProposalVoter response type.
 * @param g_vote - `vote`: the vote with given proposal_id and voter.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryVoteByProposalVoterResponse: (atu8_vote?: Opt<Encoded<'/cosmos.group.v1.Vote'>>) => EncodedCosmosGroupQueryVoteByProposalVoterResponse;
/**
 * Encodes a `QueryVotesByProposalRequest` protobuf message: the Query/VotesByProposal request type.
 * @param sg_proposal_id - `proposal_id`: the unique ID of a proposal.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryVotesByProposalRequest: (sg_proposal_id?: Opt<WeakUint64Str>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryVotesByProposalRequest;
/**
 * Encodes a `QueryVotesByProposalResponse` protobuf message: the Query/VotesByProposal response type.
 * @param a_votes - `votes`: the list of votes for given proposal_id.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryVotesByProposalResponse: (a_votes?: Opt<Encoded<'/cosmos.group.v1.Vote'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryVotesByProposalResponse;
/**
 * Encodes a `QueryVotesByVoterRequest` protobuf message: the Query/VotesByVoter request type.
 * @param sa_voter - `voter`: a proposal voter account address.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryVotesByVoterRequest: (sa_voter?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryVotesByVoterRequest;
/**
 * Encodes a `QueryVotesByVoterResponse` protobuf message: the Query/VotesByVoter response type.
 * @param a_votes - `votes`: the list of votes by given voter.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryVotesByVoterResponse: (a_votes?: Opt<Encoded<'/cosmos.group.v1.Vote'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryVotesByVoterResponse;
/**
 * Encodes a `QueryGroupsByMemberRequest` protobuf message: the Query/GroupsByMember request type.
 * @param sa_address - `address`: the group member address.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupsByMemberRequest: (sa_address?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryGroupsByMemberRequest;
/**
 * Encodes a `QueryGroupsByMemberResponse` protobuf message: the Query/GroupsByMember response type.
 * @param a_groups - `groups`: the groups info with the provided group member.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupsByMemberResponse: (a_groups?: Opt<Encoded<'/cosmos.group.v1.GroupInfo'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryGroupsByMemberResponse;
/**
 * Encodes a `QueryTallyResultRequest` protobuf message: the Query/TallyResult request type.
 * @param sg_proposal_id - `proposal_id`: the unique id of a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryTallyResultRequest: (sg_proposal_id?: Opt<WeakUint64Str>) => EncodedCosmosGroupQueryTallyResultRequest;
/**
 * Encodes a `QueryTallyResultResponse` protobuf message: the Query/TallyResult response type.
 * @param g_tally - `tally`: defines the requested tally.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryTallyResultResponse: (atu8_tally?: Opt<Encoded<'/cosmos.group.v1.TallyResult'>>) => EncodedCosmosGroupQueryTallyResultResponse;
/**
 * Encodes a `QueryGroupsRequest` protobuf message: the Query/Groups request type. Since: cosmos-sdk 0.47.1
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupsRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosGroupQueryGroupsRequest;
/**
 * Encodes a `QueryGroupsResponse` protobuf message: the Query/Groups response type. Since: cosmos-sdk 0.47.1
 * @param a_groups - `groups`: `groups` is all the groups present in state.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosGroupQueryGroupsResponse: (a_groups?: Opt<Encoded<'/cosmos.group.v1.GroupInfo'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosGroupQueryGroupsResponse;
/**
 * A decoded protobuf QueryGroupInfoRequest message
 *
 * Alias for: group_id - the unique ID of the group.
 */
export type DecodedCosmosGroupQueryGroupInfoRequest = [
    sg_group_id?: CwUint64
];
/**
 * Decodes a protobuf QueryGroupInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupInfoRequest}
 */
export declare const decodeCosmosGroupQueryGroupInfoRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupInfoRequest;
/**
 * A decoded protobuf QueryGroupInfo message
 *
 * Alias for: info - the GroupInfo of the group.
 */
export type DecodedCosmosGroupQueryGroupInfoResponse = [
    a_info?: DecodedCosmosGroupGroupInfo
];
/**
 * Decodes a protobuf QueryGroupInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupInfoResponse}
 */
export declare const decodeCosmosGroupQueryGroupInfoResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupInfoResponse;
/**
 * A decoded protobuf QueryGroupPolicyInfoRequest message
 *
 * Alias for: address - the account address of the group policy.
 */
export type DecodedCosmosGroupQueryGroupPolicyInfoRequest = [
    sa_address?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryGroupPolicyInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPolicyInfoRequest}
 */
export declare const decodeCosmosGroupQueryGroupPolicyInfoRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupPolicyInfoRequest;
/**
 * A decoded protobuf QueryGroupPolicyInfo message
 *
 * Alias for: info - the GroupPolicyInfo of the group policy.
 */
export type DecodedCosmosGroupQueryGroupPolicyInfoResponse = [
    a_info?: DecodedCosmosGroupGroupPolicyInfo
];
/**
 * Decodes a protobuf QueryGroupPolicyInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPolicyInfoResponse}
 */
export declare const decodeCosmosGroupQueryGroupPolicyInfoResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupPolicyInfoResponse;
/**
 * A decoded protobuf QueryGroupMembersRequest message
 *
 * Tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryGroupMembersRequest = [
    sg_group_id?: CwUint64,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryGroupMembersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupMembersRequest}
 */
export declare const decodeCosmosGroupQueryGroupMembersRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupMembersRequest;
/**
 * A decoded protobuf QueryGroupMembers message
 *
 * Tuple where:
 *   - 0: members - the members of the group with given group_id.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryGroupMembersResponse = [
    a_members?: DecodedCosmosGroupGroupMember[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryGroupMembers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupMembersResponse}
 */
export declare const decodeCosmosGroupQueryGroupMembersResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupMembersResponse;
/**
 * A decoded protobuf QueryGroupsByAdminRequest message
 *
 * Tuple where:
 *   - 0: admin - the account address of a group's admin.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryGroupsByAdminRequest = [
    s_admin?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryGroupsByAdminRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByAdminRequest}
 */
export declare const decodeCosmosGroupQueryGroupsByAdminRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupsByAdminRequest;
/**
 * A decoded protobuf QueryGroupsByAdmin message
 *
 * Tuple where:
 *   - 0: groups - the groups info with the provided admin.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryGroupsByAdminResponse = [
    a_groups?: DecodedCosmosGroupGroupInfo[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryGroupsByAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByAdminResponse}
 */
export declare const decodeCosmosGroupQueryGroupsByAdminResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupsByAdminResponse;
/**
 * A decoded protobuf QueryGroupPoliciesByGroupRequest message
 *
 * Tuple where:
 *   - 0: group_id - the unique ID of the group policy's group.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryGroupPoliciesByGroupRequest = [
    sg_group_id?: CwUint64,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryGroupPoliciesByGroupRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByGroupRequest}
 */
export declare const decodeCosmosGroupQueryGroupPoliciesByGroupRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupPoliciesByGroupRequest;
/**
 * A decoded protobuf QueryGroupPoliciesByGroup message
 *
 * Tuple where:
 *   - 0: group_policies - the group policies info associated with the provided group.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryGroupPoliciesByGroupResponse = [
    a_group_policies?: DecodedCosmosGroupGroupPolicyInfo[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryGroupPoliciesByGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByGroupResponse}
 */
export declare const decodeCosmosGroupQueryGroupPoliciesByGroupResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupPoliciesByGroupResponse;
/**
 * A decoded protobuf QueryGroupPoliciesByAdminRequest message
 *
 * Tuple where:
 *   - 0: admin - the admin address of the group policy.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryGroupPoliciesByAdminRequest = [
    s_admin?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryGroupPoliciesByAdminRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByAdminRequest}
 */
export declare const decodeCosmosGroupQueryGroupPoliciesByAdminRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupPoliciesByAdminRequest;
/**
 * A decoded protobuf QueryGroupPoliciesByAdmin message
 *
 * Tuple where:
 *   - 0: group_policies - the group policies info with provided admin.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryGroupPoliciesByAdminResponse = [
    a_group_policies?: DecodedCosmosGroupGroupPolicyInfo[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryGroupPoliciesByAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByAdminResponse}
 */
export declare const decodeCosmosGroupQueryGroupPoliciesByAdminResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupPoliciesByAdminResponse;
/**
 * A decoded protobuf QueryProposalRequest message
 *
 * Alias for: proposal_id - the unique ID of a proposal.
 */
export type DecodedCosmosGroupQueryProposalRequest = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf QueryProposalRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalRequest}
 */
export declare const decodeCosmosGroupQueryProposalRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryProposalRequest;
/**
 * A decoded protobuf QueryProposal message
 *
 * Alias for: proposal - the proposal info.
 */
export type DecodedCosmosGroupQueryProposalResponse = [
    a_proposal?: DecodedCosmosGroupProposal
];
/**
 * Decodes a protobuf QueryProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalResponse}
 */
export declare const decodeCosmosGroupQueryProposalResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryProposalResponse;
/**
 * A decoded protobuf QueryProposalsByGroupPolicyRequest message
 *
 * Tuple where:
 *   - 0: address - the account address of the group policy related to proposals.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryProposalsByGroupPolicyRequest = [
    sa_address?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryProposalsByGroupPolicyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalsByGroupPolicyRequest}
 */
export declare const decodeCosmosGroupQueryProposalsByGroupPolicyRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryProposalsByGroupPolicyRequest;
/**
 * A decoded protobuf QueryProposalsByGroupPolicy message
 *
 * Tuple where:
 *   - 0: proposals - the proposals with given group policy.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryProposalsByGroupPolicyResponse = [
    a_proposals?: DecodedCosmosGroupProposal[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryProposalsByGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalsByGroupPolicyResponse}
 */
export declare const decodeCosmosGroupQueryProposalsByGroupPolicyResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryProposalsByGroupPolicyResponse;
/**
 * A decoded protobuf QueryVoteByProposalVoterRequest message
 *
 * Tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 *   - 1: voter - a proposal voter account address.
 */
export type DecodedCosmosGroupQueryVoteByProposalVoterRequest = [
    sg_proposal_id?: CwUint64,
    sa_voter?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryVoteByProposalVoterRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVoteByProposalVoterRequest}
 */
export declare const decodeCosmosGroupQueryVoteByProposalVoterRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryVoteByProposalVoterRequest;
/**
 * A decoded protobuf QueryVoteByProposalVoter message
 *
 * Alias for: vote - the vote with given proposal_id and voter.
 */
export type DecodedCosmosGroupQueryVoteByProposalVoterResponse = [
    a_vote?: DecodedCosmosGroupVote
];
/**
 * Decodes a protobuf QueryVoteByProposalVoter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVoteByProposalVoterResponse}
 */
export declare const decodeCosmosGroupQueryVoteByProposalVoterResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryVoteByProposalVoterResponse;
/**
 * A decoded protobuf QueryVotesByProposalRequest message
 *
 * Tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryVotesByProposalRequest = [
    sg_proposal_id?: CwUint64,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryVotesByProposalRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByProposalRequest}
 */
export declare const decodeCosmosGroupQueryVotesByProposalRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryVotesByProposalRequest;
/**
 * A decoded protobuf QueryVotesByProposal message
 *
 * Tuple where:
 *   - 0: votes - the list of votes for given proposal_id.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryVotesByProposalResponse = [
    a_votes?: DecodedCosmosGroupVote[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryVotesByProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByProposalResponse}
 */
export declare const decodeCosmosGroupQueryVotesByProposalResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryVotesByProposalResponse;
/**
 * A decoded protobuf QueryVotesByVoterRequest message
 *
 * Tuple where:
 *   - 0: voter - a proposal voter account address.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryVotesByVoterRequest = [
    sa_voter?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryVotesByVoterRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByVoterRequest}
 */
export declare const decodeCosmosGroupQueryVotesByVoterRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryVotesByVoterRequest;
/**
 * A decoded protobuf QueryVotesByVoter message
 *
 * Tuple where:
 *   - 0: votes - the list of votes by given voter.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryVotesByVoterResponse = [
    a_votes?: DecodedCosmosGroupVote[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryVotesByVoter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByVoterResponse}
 */
export declare const decodeCosmosGroupQueryVotesByVoterResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryVotesByVoterResponse;
/**
 * A decoded protobuf QueryGroupsByMemberRequest message
 *
 * Tuple where:
 *   - 0: address - the group member address.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryGroupsByMemberRequest = [
    sa_address?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryGroupsByMemberRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByMemberRequest}
 */
export declare const decodeCosmosGroupQueryGroupsByMemberRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupsByMemberRequest;
/**
 * A decoded protobuf QueryGroupsByMember message
 *
 * Tuple where:
 *   - 0: groups - the groups info with the provided group member.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryGroupsByMemberResponse = [
    a_groups?: DecodedCosmosGroupGroupInfo[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryGroupsByMember message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByMemberResponse}
 */
export declare const decodeCosmosGroupQueryGroupsByMemberResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupsByMemberResponse;
/**
 * A decoded protobuf QueryTallyResultRequest message
 *
 * Alias for: proposal_id - the unique id of a proposal.
 */
export type DecodedCosmosGroupQueryTallyResultRequest = [
    sg_proposal_id?: CwUint64
];
/**
 * Decodes a protobuf QueryTallyResultRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryTallyResultRequest}
 */
export declare const decodeCosmosGroupQueryTallyResultRequest: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryTallyResultRequest;
/**
 * A decoded protobuf QueryTallyResult message
 *
 * Alias for: tally - defines the requested tally.
 */
export type DecodedCosmosGroupQueryTallyResultResponse = [
    a_tally?: DecodedCosmosGroupTallyResult
];
/**
 * Decodes a protobuf QueryTallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryTallyResultResponse}
 */
export declare const decodeCosmosGroupQueryTallyResultResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryTallyResultResponse;
/**
 * A decoded protobuf QueryGroupsRequest message
 *
 * Alias for: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosGroupQueryGroupsRequest = [
    w_0?: undefined,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryGroupsRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosGroupQueryGroupsRequest}
 */
export declare const decodeCosmosGroupQueryGroupsRequest: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosGroupQueryGroupsRequest;
/**
 * A decoded protobuf QueryGroups message
 *
 * Tuple where:
 *   - 0: groups - `groups` is all the groups present in state.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosGroupQueryGroupsResponse = [
    a_groups?: DecodedCosmosGroupGroupInfo[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryGroups message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsResponse}
 */
export declare const decodeCosmosGroupQueryGroupsResponse: (atu8_payload: Uint8Array) => DecodedCosmosGroupQueryGroupsResponse;
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 */
export declare const destructCosmosGroupQueryGroupInfoRequest: (g_struct: CosmosGroupQueryGroupInfoRequest) => [group_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_INFO_REQUEST = "/cosmos.group.v1.QueryGroupInfoRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupInfoRequest` - the Query/GroupInfo request type.
 */
export type CosmosGroupQueryGroupInfoRequest = {
    group_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info - the GroupInfo of the group.
 */
export declare const destructCosmosGroupQueryGroupInfoResponse: (g_struct: CosmosGroupQueryGroupInfoResponse) => [info?: CosmosGroupGroupInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_INFO_RESPONSE = "/cosmos.group.v1.QueryGroupInfoResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupInfoResponse` - the Query/GroupInfo response type.
 */
export type CosmosGroupQueryGroupInfoResponse = {
    info?: CosmosGroupGroupInfo | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPolicyInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy.
 */
export declare const destructCosmosGroupQueryGroupPolicyInfoRequest: (g_struct: CosmosGroupQueryGroupPolicyInfoRequest) => [address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICY_INFO_REQUEST = "/cosmos.group.v1.QueryGroupPolicyInfoRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupPolicyInfoRequest` - the Query/GroupPolicyInfo request type.
 */
export type CosmosGroupQueryGroupPolicyInfoRequest = {
    address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPolicyInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info - the GroupPolicyInfo of the group policy.
 */
export declare const destructCosmosGroupQueryGroupPolicyInfoResponse: (g_struct: CosmosGroupQueryGroupPolicyInfoResponse) => [info?: CosmosGroupGroupPolicyInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICY_INFO_RESPONSE = "/cosmos.group.v1.QueryGroupPolicyInfoResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupPolicyInfoResponse` - the Query/GroupPolicyInfo response type.
 */
export type CosmosGroupQueryGroupPolicyInfoResponse = {
    info?: CosmosGroupGroupPolicyInfo | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupMembersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryGroupMembersRequest: (g_struct: CosmosGroupQueryGroupMembersRequest) => [group_id?: CwUint64, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_MEMBERS_REQUEST = "/cosmos.group.v1.QueryGroupMembersRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupMembersRequest` - the Query/GroupMembers request type.
 */
export type CosmosGroupQueryGroupMembersRequest = {
    group_id?: CwUint64 | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupMembersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: members - the members of the group with given group_id.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryGroupMembersResponse: (g_struct: CosmosGroupQueryGroupMembersResponse) => [members?: CosmosGroupGroupMember[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_MEMBERS_RESPONSE = "/cosmos.group.v1.QueryGroupMembersResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupMembersResponse` - the Query/GroupMembersResponse response type.
 */
export type CosmosGroupQueryGroupMembersResponse = {
    members?: CosmosGroupGroupMember[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByAdminRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of a group's admin.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryGroupsByAdminRequest: (g_struct: CosmosGroupQueryGroupsByAdminRequest) => [admin?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_ADMIN_REQUEST = "/cosmos.group.v1.QueryGroupsByAdminRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupsByAdminRequest` - the Query/GroupsByAdmin request type.
 */
export type CosmosGroupQueryGroupsByAdminRequest = {
    admin?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided admin.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryGroupsByAdminResponse: (g_struct: CosmosGroupQueryGroupsByAdminResponse) => [groups?: CosmosGroupGroupInfo[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_ADMIN_RESPONSE = "/cosmos.group.v1.QueryGroupsByAdminResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupsByAdminResponse` - the Query/GroupsByAdminResponse response type.
 */
export type CosmosGroupQueryGroupsByAdminResponse = {
    groups?: CosmosGroupGroupInfo[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByGroupRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group policy's group.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryGroupPoliciesByGroupRequest: (g_struct: CosmosGroupQueryGroupPoliciesByGroupRequest) => [group_id?: CwUint64, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_GROUP_REQUEST = "/cosmos.group.v1.QueryGroupPoliciesByGroupRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupPoliciesByGroupRequest` - the Query/GroupPoliciesByGroup request type.
 */
export type CosmosGroupQueryGroupPoliciesByGroupRequest = {
    group_id?: CwUint64 | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info associated with the provided group.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryGroupPoliciesByGroupResponse: (g_struct: CosmosGroupQueryGroupPoliciesByGroupResponse) => [group_policies?: CosmosGroupGroupPolicyInfo[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_GROUP_RESPONSE = "/cosmos.group.v1.QueryGroupPoliciesByGroupResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupPoliciesByGroupResponse` - the Query/GroupPoliciesByGroup response type.
 */
export type CosmosGroupQueryGroupPoliciesByGroupResponse = {
    group_policies?: CosmosGroupGroupPolicyInfo[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByAdminRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the admin address of the group policy.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryGroupPoliciesByAdminRequest: (g_struct: CosmosGroupQueryGroupPoliciesByAdminRequest) => [admin?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_ADMIN_REQUEST = "/cosmos.group.v1.QueryGroupPoliciesByAdminRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupPoliciesByAdminRequest` - the Query/GroupPoliciesByAdmin request type.
 */
export type CosmosGroupQueryGroupPoliciesByAdminRequest = {
    admin?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info with provided admin.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryGroupPoliciesByAdminResponse: (g_struct: CosmosGroupQueryGroupPoliciesByAdminResponse) => [group_policies?: CosmosGroupGroupPolicyInfo[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_ADMIN_RESPONSE = "/cosmos.group.v1.QueryGroupPoliciesByAdminResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupPoliciesByAdminResponse` - the Query/GroupPoliciesByAdmin response type.
 */
export type CosmosGroupQueryGroupPoliciesByAdminResponse = {
    group_policies?: CosmosGroupGroupPolicyInfo[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 */
export declare const destructCosmosGroupQueryProposalRequest: (g_struct: CosmosGroupQueryProposalRequest) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSAL_REQUEST = "/cosmos.group.v1.QueryProposalRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryProposalRequest` - the Query/Proposal request type.
 */
export type CosmosGroupQueryProposalRequest = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal - the proposal info.
 */
export declare const destructCosmosGroupQueryProposalResponse: (g_struct: CosmosGroupQueryProposalResponse) => [proposal?: CosmosGroupProposal];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSAL_RESPONSE = "/cosmos.group.v1.QueryProposalResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryProposalResponse` - the Query/Proposal response type.
 */
export type CosmosGroupQueryProposalResponse = {
    proposal?: CosmosGroupProposal | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalsByGroupPolicyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy related to proposals.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryProposalsByGroupPolicyRequest: (g_struct: CosmosGroupQueryProposalsByGroupPolicyRequest) => [address?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSALS_BY_GROUP_POLICY_REQUEST = "/cosmos.group.v1.QueryProposalsByGroupPolicyRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryProposalsByGroupPolicyRequest` - the Query/ProposalByGroupPolicy request type.
 */
export type CosmosGroupQueryProposalsByGroupPolicyRequest = {
    address?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalsByGroupPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposals - the proposals with given group policy.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryProposalsByGroupPolicyResponse: (g_struct: CosmosGroupQueryProposalsByGroupPolicyResponse) => [proposals?: CosmosGroupProposal[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSALS_BY_GROUP_POLICY_RESPONSE = "/cosmos.group.v1.QueryProposalsByGroupPolicyResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryProposalsByGroupPolicyResponse` - the Query/ProposalByGroupPolicy response type.
 */
export type CosmosGroupQueryProposalsByGroupPolicyResponse = {
    proposals?: CosmosGroupProposal[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryVoteByProposalVoterRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 *   - 1: voter - a proposal voter account address.
 */
export declare const destructCosmosGroupQueryVoteByProposalVoterRequest: (g_struct: CosmosGroupQueryVoteByProposalVoterRequest) => [proposal_id?: CwUint64, voter?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTE_BY_PROPOSAL_VOTER_REQUEST = "/cosmos.group.v1.QueryVoteByProposalVoterRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryVoteByProposalVoterRequest` - the Query/VoteByProposalVoter request type.
 */
export type CosmosGroupQueryVoteByProposalVoterRequest = {
    proposal_id?: CwUint64 | undefined;
    voter?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryVoteByProposalVoterResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote - the vote with given proposal_id and voter.
 */
export declare const destructCosmosGroupQueryVoteByProposalVoterResponse: (g_struct: CosmosGroupQueryVoteByProposalVoterResponse) => [vote?: CosmosGroupVote];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTE_BY_PROPOSAL_VOTER_RESPONSE = "/cosmos.group.v1.QueryVoteByProposalVoterResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryVoteByProposalVoterResponse` - the Query/VoteByProposalVoter response type.
 */
export type CosmosGroupQueryVoteByProposalVoterResponse = {
    vote?: CosmosGroupVote | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByProposalRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryVotesByProposalRequest: (g_struct: CosmosGroupQueryVotesByProposalRequest) => [proposal_id?: CwUint64, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_PROPOSAL_REQUEST = "/cosmos.group.v1.QueryVotesByProposalRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryVotesByProposalRequest` - the Query/VotesByProposal request type.
 */
export type CosmosGroupQueryVotesByProposalRequest = {
    proposal_id?: CwUint64 | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: votes - the list of votes for given proposal_id.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryVotesByProposalResponse: (g_struct: CosmosGroupQueryVotesByProposalResponse) => [votes?: CosmosGroupVote[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_PROPOSAL_RESPONSE = "/cosmos.group.v1.QueryVotesByProposalResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryVotesByProposalResponse` - the Query/VotesByProposal response type.
 */
export type CosmosGroupQueryVotesByProposalResponse = {
    votes?: CosmosGroupVote[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByVoterRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voter - a proposal voter account address.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryVotesByVoterRequest: (g_struct: CosmosGroupQueryVotesByVoterRequest) => [voter?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_VOTER_REQUEST = "/cosmos.group.v1.QueryVotesByVoterRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryVotesByVoterRequest` - the Query/VotesByVoter request type.
 */
export type CosmosGroupQueryVotesByVoterRequest = {
    voter?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByVoterResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: votes - the list of votes by given voter.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryVotesByVoterResponse: (g_struct: CosmosGroupQueryVotesByVoterResponse) => [votes?: CosmosGroupVote[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_VOTER_RESPONSE = "/cosmos.group.v1.QueryVotesByVoterResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryVotesByVoterResponse` - the Query/VotesByVoter response type.
 */
export type CosmosGroupQueryVotesByVoterResponse = {
    votes?: CosmosGroupVote[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByMemberRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the group member address.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryGroupsByMemberRequest: (g_struct: CosmosGroupQueryGroupsByMemberRequest) => [address?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_MEMBER_REQUEST = "/cosmos.group.v1.QueryGroupsByMemberRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupsByMemberRequest` - the Query/GroupsByMember request type.
 */
export type CosmosGroupQueryGroupsByMemberRequest = {
    address?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByMemberResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided group member.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryGroupsByMemberResponse: (g_struct: CosmosGroupQueryGroupsByMemberResponse) => [groups?: CosmosGroupGroupInfo[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_MEMBER_RESPONSE = "/cosmos.group.v1.QueryGroupsByMemberResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupsByMemberResponse` - the Query/GroupsByMember response type.
 */
export type CosmosGroupQueryGroupsByMemberResponse = {
    groups?: CosmosGroupGroupInfo[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryTallyResultRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique id of a proposal.
 */
export declare const destructCosmosGroupQueryTallyResultRequest: (g_struct: CosmosGroupQueryTallyResultRequest) => [proposal_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_TALLY_RESULT_REQUEST = "/cosmos.group.v1.QueryTallyResultRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryTallyResultRequest` - the Query/TallyResult request type.
 */
export type CosmosGroupQueryTallyResultRequest = {
    proposal_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryTallyResultResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tally - defines the requested tally.
 */
export declare const destructCosmosGroupQueryTallyResultResponse: (g_struct: CosmosGroupQueryTallyResultResponse) => [tally?: CosmosGroupTallyResult];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_TALLY_RESULT_RESPONSE = "/cosmos.group.v1.QueryTallyResultResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryTallyResultResponse` - the Query/TallyResult response type.
 */
export type CosmosGroupQueryTallyResultResponse = {
    tally?: CosmosGroupTallyResult | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosGroupQueryGroupsRequest: (g_struct: CosmosGroupQueryGroupsRequest) => [EMPTY?: void, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_REQUEST = "/cosmos.group.v1.QueryGroupsRequest";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupsRequest` - the Query/Groups request type. Since: cosmos-sdk 0.47.1
 */
export type CosmosGroupQueryGroupsRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups - `groups` is all the groups present in state.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosGroupQueryGroupsResponse: (g_struct: CosmosGroupQueryGroupsResponse) => [groups?: CosmosGroupGroupInfo[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_RESPONSE = "/cosmos.group.v1.QueryGroupsResponse";
/**
 * JSON serialization of `cosmos.group.v1.QueryGroupsResponse` - the Query/Groups response type. Since: cosmos-sdk 0.47.1
 */
export type CosmosGroupQueryGroupsResponse = {
    groups?: CosmosGroupGroupInfo[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
