import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import { decodeCosmosGroupGroupInfo, decodeCosmosGroupGroupPolicyInfo, decodeCosmosGroupGroupMember, decodeCosmosGroupProposal, decodeCosmosGroupVote, decodeCosmosGroupTallyResult } from './types.js';
const SR_LCD_COSMOS_GROUP_QUERY = '/cosmos/group/v1/';
/**
 * Queries group info based on group id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_id - the unique ID of the group.
 * @returns a tuple where:
 *   - 0: info - the GroupInfo of the group.
 */
export const queryCosmosGroupGroupInfo = restful_grpc(sg_group_id => [SR_LCD_COSMOS_GROUP_QUERY + 'group_info/' + sg_group_id]);
/**
 * Queries group policy info based on account address of group policy.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the account address of the group policy.
 * @returns a tuple where:
 *   - 0: info - the GroupPolicyInfo of the group policy.
 */
export const queryCosmosGroupGroupPolicyInfo = restful_grpc(sa_address => [SR_LCD_COSMOS_GROUP_QUERY + 'group_policy_info/' + sa_address]);
/**
 * Queries members of a group by group id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_id - the unique ID of the group.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: members - the members of the group with given group_id.
 *   - 1: pagination - the members of the group with given group_id.
 */
export const queryCosmosGroupGroupMembers = restful_grpc((sg_group_id, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'group_members/' + sg_group_id, {
        pagination: g_pagination,
    }]);
/**
 * Queries groups by admin address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the account address of a group's admin.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided admin.
 *   - 1: pagination - the groups info with the provided admin.
 */
export const queryCosmosGroupGroupsByAdmin = restful_grpc((s_admin, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'groups_by_admin/' + s_admin, {
        pagination: g_pagination,
    }]);
/**
 * Queries group policies by group id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_id - the unique ID of the group policy's group.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info associated with the provided group.
 *   - 1: pagination - the group policies info associated with the provided group.
 */
export const queryCosmosGroupGroupPoliciesByGroup = restful_grpc((sg_group_id, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'group_policies_by_group/' + sg_group_id, {
        pagination: g_pagination,
    }]);
/**
 * Queries group policies by admin address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_admin - the admin address of the group policy.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info with provided admin.
 *   - 1: pagination - the group policies info with provided admin.
 */
export const queryCosmosGroupGroupPoliciesByAdmin = restful_grpc((s_admin, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'group_policies_by_admin/' + s_admin, {
        pagination: g_pagination,
    }]);
/**
 * Queries a proposal based on proposal id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique ID of a proposal.
 * @returns a tuple where:
 *   - 0: proposal - the proposal info.
 */
export const queryCosmosGroupProposal = restful_grpc(sg_proposal_id => [SR_LCD_COSMOS_GROUP_QUERY + 'proposal/' + sg_proposal_id]);
/**
 * Queries proposals based on account address of group policy.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the account address of the group policy related to proposals.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: proposals - the proposals with given group policy.
 *   - 1: pagination - the proposals with given group policy.
 */
export const queryCosmosGroupProposalsByGroupPolicy = restful_grpc((sa_address, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'proposals_by_group_policy/' + sa_address, {
        pagination: g_pagination,
    }]);
/**
 * Queries a vote by proposal id and voter.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique ID of a proposal.
 * @param sa_voter - a proposal voter account address.
 * @returns a tuple where:
 *   - 0: vote - the vote with given proposal_id and voter.
 */
export const queryCosmosGroupVoteByProposalVoter = restful_grpc((sg_proposal_id, sa_voter) => [SR_LCD_COSMOS_GROUP_QUERY + 'vote_by_proposal_voter/' + sg_proposal_id + '/' + sa_voter]);
/**
 * Queries a vote by proposal id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique ID of a proposal.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: votes - the list of votes for given proposal_id.
 *   - 1: pagination - the list of votes for given proposal_id.
 */
export const queryCosmosGroupVotesByProposal = restful_grpc((sg_proposal_id, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'votes_by_proposal/' + sg_proposal_id, {
        pagination: g_pagination,
    }]);
/**
 * Queries a vote by voter.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_voter - a proposal voter account address.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: votes - the list of votes by given voter.
 *   - 1: pagination - the list of votes by given voter.
 */
export const queryCosmosGroupVotesByVoter = restful_grpc((sa_voter, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'votes_by_voter/' + sa_voter, {
        pagination: g_pagination,
    }]);
/**
 * Queries groups by member address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_address - the group member address.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided group member.
 *   - 1: pagination - the groups info with the provided group member.
 */
export const queryCosmosGroupGroupsByMember = restful_grpc((sa_address, g_pagination) => [SR_LCD_COSMOS_GROUP_QUERY + 'groups_by_member/' + sa_address, {
        pagination: g_pagination,
    }]);
/**
 * Returns the tally result of a proposal. If the proposal is still in voting period, then this query computes the current tally state, which might not be final. On the other hand, if the proposal is final, then it simply returns the `final_tally_result` state stored in the proposal itself.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_proposal_id - the unique id of a proposal.
 * @returns a tuple where:
 *   - 0: tally - defines the requested tally.
 */
export const queryCosmosGroupTallyResult = restful_grpc(sg_proposal_id => [SR_LCD_COSMOS_GROUP_QUERY + 'proposals/' + sg_proposal_id + '/tally']);
/**
 * Queries all groups in state. Since: cosmos-sdk 0.47.1
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: groups - `groups` is all the groups present in state.
 *   - 1: pagination - `groups` is all the groups present in state.
 */
export const queryCosmosGroupGroups = restful_grpc(g_pagination => [SR_LCD_COSMOS_GROUP_QUERY + 'groups', {
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryGroupInfoRequest` protobuf message: the Query/GroupInfo request type.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupInfoRequest = (sg_group_id) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .o;
/**
 * Encodes a `QueryGroupInfoResponse` protobuf message: the Query/GroupInfo response type.
 * @param g_info - `info`: the GroupInfo of the group.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupInfoResponse = (atu8_info) => Protobuf() // ...
    .b(atu8_info) // GroupInfo info = 1
    .o;
/**
 * Encodes a `QueryGroupPolicyInfoRequest` protobuf message: the Query/GroupPolicyInfo request type.
 * @param sa_address - `address`: the account address of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupPolicyInfoRequest = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Encodes a `QueryGroupPolicyInfoResponse` protobuf message: the Query/GroupPolicyInfo response type.
 * @param g_info - `info`: the GroupPolicyInfo of the group policy.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupPolicyInfoResponse = (atu8_info) => Protobuf() // ...
    .b(atu8_info) // GroupPolicyInfo info = 1
    .o;
/**
 * Encodes a `QueryGroupMembersRequest` protobuf message: the Query/GroupMembers request type.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupMembersRequest = (sg_group_id, atu8_pagination) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryGroupMembersResponse` protobuf message: the Query/GroupMembersResponse response type.
 * @param a_members - `members`: the members of the group with given group_id.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupMembersResponse = (a_members, atu8_pagination) => Protobuf() // ...
    .B(a_members) // GroupMember[] members = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryGroupsByAdminRequest` protobuf message: the Query/GroupsByAdmin request type.
 * @param s_admin - `admin`: the account address of a group's admin.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupsByAdminRequest = (s_admin, atu8_pagination) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryGroupsByAdminResponse` protobuf message: the Query/GroupsByAdminResponse response type.
 * @param a_groups - `groups`: the groups info with the provided admin.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupsByAdminResponse = (a_groups, atu8_pagination) => Protobuf() // ...
    .B(a_groups) // GroupInfo[] groups = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryGroupPoliciesByGroupRequest` protobuf message: the Query/GroupPoliciesByGroup request type.
 * @param sg_group_id - `group_id`: the unique ID of the group policy's group.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupPoliciesByGroupRequest = (sg_group_id, atu8_pagination) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryGroupPoliciesByGroupResponse` protobuf message: the Query/GroupPoliciesByGroup response type.
 * @param a_group_policies - `group_policies`: the group policies info associated with the provided group.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupPoliciesByGroupResponse = (a_group_policies, atu8_pagination) => Protobuf() // ...
    .B(a_group_policies) // GroupPolicyInfo[] group_policies = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryGroupPoliciesByAdminRequest` protobuf message: the Query/GroupPoliciesByAdmin request type.
 * @param s_admin - `admin`: the admin address of the group policy.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupPoliciesByAdminRequest = (s_admin, atu8_pagination) => Protobuf() // ...
    .s(s_admin) // string admin = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryGroupPoliciesByAdminResponse` protobuf message: the Query/GroupPoliciesByAdmin response type.
 * @param a_group_policies - `group_policies`: the group policies info with provided admin.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupPoliciesByAdminResponse = (a_group_policies, atu8_pagination) => Protobuf() // ...
    .B(a_group_policies) // GroupPolicyInfo[] group_policies = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryProposalRequest` protobuf message: the Query/Proposal request type.
 * @param sg_proposal_id - `proposal_id`: the unique ID of a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryProposalRequest = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `QueryProposalResponse` protobuf message: the Query/Proposal response type.
 * @param g_proposal - `proposal`: the proposal info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryProposalResponse = (atu8_proposal) => Protobuf() // ...
    .b(atu8_proposal) // Proposal proposal = 1
    .o;
/**
 * Encodes a `QueryProposalsByGroupPolicyRequest` protobuf message: the Query/ProposalByGroupPolicy request type.
 * @param sa_address - `address`: the account address of the group policy related to proposals.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryProposalsByGroupPolicyRequest = (sa_address, atu8_pagination) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryProposalsByGroupPolicyResponse` protobuf message: the Query/ProposalByGroupPolicy response type.
 * @param a_proposals - `proposals`: the proposals with given group policy.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryProposalsByGroupPolicyResponse = (a_proposals, atu8_pagination) => Protobuf() // ...
    .B(a_proposals) // Proposal[] proposals = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryVoteByProposalVoterRequest` protobuf message: the Query/VoteByProposalVoter request type.
 * @param sg_proposal_id - `proposal_id`: the unique ID of a proposal.
 * @param sa_voter - `voter`: a proposal voter account address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryVoteByProposalVoterRequest = (sg_proposal_id, sa_voter) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .o;
/**
 * Encodes a `QueryVoteByProposalVoterResponse` protobuf message: the Query/VoteByProposalVoter response type.
 * @param g_vote - `vote`: the vote with given proposal_id and voter.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryVoteByProposalVoterResponse = (atu8_vote) => Protobuf() // ...
    .b(atu8_vote) // Vote vote = 1
    .o;
/**
 * Encodes a `QueryVotesByProposalRequest` protobuf message: the Query/VotesByProposal request type.
 * @param sg_proposal_id - `proposal_id`: the unique ID of a proposal.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryVotesByProposalRequest = (sg_proposal_id, atu8_pagination) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryVotesByProposalResponse` protobuf message: the Query/VotesByProposal response type.
 * @param a_votes - `votes`: the list of votes for given proposal_id.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryVotesByProposalResponse = (a_votes, atu8_pagination) => Protobuf() // ...
    .B(a_votes) // Vote[] votes = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryVotesByVoterRequest` protobuf message: the Query/VotesByVoter request type.
 * @param sa_voter - `voter`: a proposal voter account address.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryVotesByVoterRequest = (sa_voter, atu8_pagination) => Protobuf() // ...
    .s(sa_voter) // string voter = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryVotesByVoterResponse` protobuf message: the Query/VotesByVoter response type.
 * @param a_votes - `votes`: the list of votes by given voter.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryVotesByVoterResponse = (a_votes, atu8_pagination) => Protobuf() // ...
    .B(a_votes) // Vote[] votes = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryGroupsByMemberRequest` protobuf message: the Query/GroupsByMember request type.
 * @param sa_address - `address`: the group member address.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupsByMemberRequest = (sa_address, atu8_pagination) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryGroupsByMemberResponse` protobuf message: the Query/GroupsByMember response type.
 * @param a_groups - `groups`: the groups info with the provided group member.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupsByMemberResponse = (a_groups, atu8_pagination) => Protobuf() // ...
    .B(a_groups) // GroupInfo[] groups = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryTallyResultRequest` protobuf message: the Query/TallyResult request type.
 * @param sg_proposal_id - `proposal_id`: the unique id of a proposal.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryTallyResultRequest = (sg_proposal_id) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .o;
/**
 * Encodes a `QueryTallyResultResponse` protobuf message: the Query/TallyResult response type.
 * @param g_tally - `tally`: defines the requested tally.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryTallyResultResponse = (atu8_tally) => Protobuf() // ...
    .b(atu8_tally) // TallyResult tally = 1
    .o;
/**
 * Encodes a `QueryGroupsRequest` protobuf message: the Query/Groups request type. Since: cosmos-sdk 0.47.1
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupsRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination, 2) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryGroupsResponse` protobuf message: the Query/Groups response type. Since: cosmos-sdk 0.47.1
 * @param a_groups - `groups`: `groups` is all the groups present in state.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupQueryGroupsResponse = (a_groups, atu8_pagination) => Protobuf() // ...
    .B(a_groups) // GroupInfo[] groups = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Decodes a protobuf QueryGroupInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupInfoRequest}
 */
export const decodeCosmosGroupQueryGroupInfoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryGroupInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupInfoResponse}
 */
export const decodeCosmosGroupQueryGroupInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGroupGroupInfo]);
/**
 * Decodes a protobuf QueryGroupPolicyInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPolicyInfoRequest}
 */
export const decodeCosmosGroupQueryGroupPolicyInfoRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryGroupPolicyInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPolicyInfoResponse}
 */
export const decodeCosmosGroupQueryGroupPolicyInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGroupGroupPolicyInfo]);
/**
 * Decodes a protobuf QueryGroupMembersRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupMembersRequest}
 */
export const decodeCosmosGroupQueryGroupMembersRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryGroupMembers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupMembersResponse}
 */
export const decodeCosmosGroupQueryGroupMembersResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupGroupMember, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryGroupsByAdminRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByAdminRequest}
 */
export const decodeCosmosGroupQueryGroupsByAdminRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryGroupsByAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByAdminResponse}
 */
export const decodeCosmosGroupQueryGroupsByAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupGroupInfo, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryGroupPoliciesByGroupRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByGroupRequest}
 */
export const decodeCosmosGroupQueryGroupPoliciesByGroupRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryGroupPoliciesByGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByGroupResponse}
 */
export const decodeCosmosGroupQueryGroupPoliciesByGroupResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupGroupPolicyInfo, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryGroupPoliciesByAdminRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByAdminRequest}
 */
export const decodeCosmosGroupQueryGroupPoliciesByAdminRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryGroupPoliciesByAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupPoliciesByAdminResponse}
 */
export const decodeCosmosGroupQueryGroupPoliciesByAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupGroupPolicyInfo, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryProposalRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalRequest}
 */
export const decodeCosmosGroupQueryProposalRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalResponse}
 */
export const decodeCosmosGroupQueryProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGroupProposal]);
/**
 * Decodes a protobuf QueryProposalsByGroupPolicyRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalsByGroupPolicyRequest}
 */
export const decodeCosmosGroupQueryProposalsByGroupPolicyRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryProposalsByGroupPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryProposalsByGroupPolicyResponse}
 */
export const decodeCosmosGroupQueryProposalsByGroupPolicyResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupProposal, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryVoteByProposalVoterRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVoteByProposalVoterRequest}
 */
export const decodeCosmosGroupQueryVoteByProposalVoterRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf QueryVoteByProposalVoter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVoteByProposalVoterResponse}
 */
export const decodeCosmosGroupQueryVoteByProposalVoterResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGroupVote]);
/**
 * Decodes a protobuf QueryVotesByProposalRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByProposalRequest}
 */
export const decodeCosmosGroupQueryVotesByProposalRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryVotesByProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByProposalResponse}
 */
export const decodeCosmosGroupQueryVotesByProposalResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupVote, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryVotesByVoterRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByVoterRequest}
 */
export const decodeCosmosGroupQueryVotesByVoterRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryVotesByVoter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryVotesByVoterResponse}
 */
export const decodeCosmosGroupQueryVotesByVoterResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupVote, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryGroupsByMemberRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByMemberRequest}
 */
export const decodeCosmosGroupQueryGroupsByMemberRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryGroupsByMember message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsByMemberResponse}
 */
export const decodeCosmosGroupQueryGroupsByMemberResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupGroupInfo, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryTallyResultRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryTallyResultRequest}
 */
export const decodeCosmosGroupQueryTallyResultRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryTallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryTallyResultResponse}
 */
export const decodeCosmosGroupQueryTallyResultResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosGroupTallyResult]);
/**
 * Decodes a protobuf QueryGroupsRequest message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosGroupQueryGroupsRequest}
 */
export const decodeCosmosGroupQueryGroupsRequest = ((atu8_payload, [, a_pagination] = decode_protobuf(atu8_payload, [0, 1], [0, decodeCosmosBaseQueryPageRequest])) => [__UNDEFINED, a_pagination]);
/**
 * Decodes a protobuf QueryGroups message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupQueryGroupsResponse}
 */
export const decodeCosmosGroupQueryGroupsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeCosmosGroupGroupInfo, decodeCosmosBaseQueryPageResponse]);
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 */
export const destructCosmosGroupQueryGroupInfoRequest = (g_struct) => [g_struct.group_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_INFO_REQUEST = '/cosmos.group.v1.QueryGroupInfoRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info - the GroupInfo of the group.
 */
export const destructCosmosGroupQueryGroupInfoResponse = (g_struct) => [g_struct.info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_INFO_RESPONSE = '/cosmos.group.v1.QueryGroupInfoResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPolicyInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy.
 */
export const destructCosmosGroupQueryGroupPolicyInfoRequest = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICY_INFO_REQUEST = '/cosmos.group.v1.QueryGroupPolicyInfoRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPolicyInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info - the GroupPolicyInfo of the group policy.
 */
export const destructCosmosGroupQueryGroupPolicyInfoResponse = (g_struct) => [g_struct.info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICY_INFO_RESPONSE = '/cosmos.group.v1.QueryGroupPolicyInfoResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupMembersRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryGroupMembersRequest = (g_struct) => [g_struct.group_id, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_MEMBERS_REQUEST = '/cosmos.group.v1.QueryGroupMembersRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupMembersResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: members - the members of the group with given group_id.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryGroupMembersResponse = (g_struct) => [g_struct.members, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_MEMBERS_RESPONSE = '/cosmos.group.v1.QueryGroupMembersResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByAdminRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the account address of a group's admin.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryGroupsByAdminRequest = (g_struct) => [g_struct.admin, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_ADMIN_REQUEST = '/cosmos.group.v1.QueryGroupsByAdminRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided admin.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryGroupsByAdminResponse = (g_struct) => [g_struct.groups, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_ADMIN_RESPONSE = '/cosmos.group.v1.QueryGroupsByAdminResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByGroupRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group policy's group.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryGroupPoliciesByGroupRequest = (g_struct) => [g_struct.group_id, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_GROUP_REQUEST = '/cosmos.group.v1.QueryGroupPoliciesByGroupRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByGroupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info associated with the provided group.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryGroupPoliciesByGroupResponse = (g_struct) => [g_struct.group_policies, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_GROUP_RESPONSE = '/cosmos.group.v1.QueryGroupPoliciesByGroupResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByAdminRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin - the admin address of the group policy.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryGroupPoliciesByAdminRequest = (g_struct) => [g_struct.admin, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_ADMIN_REQUEST = '/cosmos.group.v1.QueryGroupPoliciesByAdminRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupPoliciesByAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_policies - the group policies info with provided admin.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryGroupPoliciesByAdminResponse = (g_struct) => [g_struct.group_policies, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUP_POLICIES_BY_ADMIN_RESPONSE = '/cosmos.group.v1.QueryGroupPoliciesByAdminResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 */
export const destructCosmosGroupQueryProposalRequest = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSAL_REQUEST = '/cosmos.group.v1.QueryProposalRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal - the proposal info.
 */
export const destructCosmosGroupQueryProposalResponse = (g_struct) => [g_struct.proposal];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSAL_RESPONSE = '/cosmos.group.v1.QueryProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalsByGroupPolicyRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of the group policy related to proposals.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryProposalsByGroupPolicyRequest = (g_struct) => [g_struct.address, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSALS_BY_GROUP_POLICY_REQUEST = '/cosmos.group.v1.QueryProposalsByGroupPolicyRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryProposalsByGroupPolicyResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposals - the proposals with given group policy.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryProposalsByGroupPolicyResponse = (g_struct) => [g_struct.proposals, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_PROPOSALS_BY_GROUP_POLICY_RESPONSE = '/cosmos.group.v1.QueryProposalsByGroupPolicyResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryVoteByProposalVoterRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 *   - 1: voter - a proposal voter account address.
 */
export const destructCosmosGroupQueryVoteByProposalVoterRequest = (g_struct) => [g_struct.proposal_id, g_struct.voter];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTE_BY_PROPOSAL_VOTER_REQUEST = '/cosmos.group.v1.QueryVoteByProposalVoterRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryVoteByProposalVoterResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote - the vote with given proposal_id and voter.
 */
export const destructCosmosGroupQueryVoteByProposalVoterResponse = (g_struct) => [g_struct.vote];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTE_BY_PROPOSAL_VOTER_RESPONSE = '/cosmos.group.v1.QueryVoteByProposalVoterResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByProposalRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique ID of a proposal.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryVotesByProposalRequest = (g_struct) => [g_struct.proposal_id, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_PROPOSAL_REQUEST = '/cosmos.group.v1.QueryVotesByProposalRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByProposalResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: votes - the list of votes for given proposal_id.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryVotesByProposalResponse = (g_struct) => [g_struct.votes, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_PROPOSAL_RESPONSE = '/cosmos.group.v1.QueryVotesByProposalResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByVoterRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voter - a proposal voter account address.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryVotesByVoterRequest = (g_struct) => [g_struct.voter, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_VOTER_REQUEST = '/cosmos.group.v1.QueryVotesByVoterRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryVotesByVoterResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: votes - the list of votes by given voter.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryVotesByVoterResponse = (g_struct) => [g_struct.votes, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_VOTES_BY_VOTER_RESPONSE = '/cosmos.group.v1.QueryVotesByVoterResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByMemberRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the group member address.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryGroupsByMemberRequest = (g_struct) => [g_struct.address, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_MEMBER_REQUEST = '/cosmos.group.v1.QueryGroupsByMemberRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsByMemberResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups - the groups info with the provided group member.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryGroupsByMemberResponse = (g_struct) => [g_struct.groups, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_BY_MEMBER_RESPONSE = '/cosmos.group.v1.QueryGroupsByMemberResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryTallyResultRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - the unique id of a proposal.
 */
export const destructCosmosGroupQueryTallyResultRequest = (g_struct) => [g_struct.proposal_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_TALLY_RESULT_REQUEST = '/cosmos.group.v1.QueryTallyResultRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryTallyResultResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tally - defines the requested tally.
 */
export const destructCosmosGroupQueryTallyResultResponse = (g_struct) => [g_struct.tally];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_TALLY_RESULT_RESPONSE = '/cosmos.group.v1.QueryTallyResultResponse';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructCosmosGroupQueryGroupsRequest = (g_struct) => [__UNDEFINED, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_REQUEST = '/cosmos.group.v1.QueryGroupsRequest';
/**
 * Destructures the fields of a {@link CosmosGroupQueryGroupsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups - `groups` is all the groups present in state.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructCosmosGroupQueryGroupsResponse = (g_struct) => [g_struct.groups, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_QUERY_GROUPS_RESPONSE = '/cosmos.group.v1.QueryGroupsResponse';
//# sourceMappingURL=query.js.map