import { parse_duration, parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, any } from '../../../../api/protobuf-writer.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
/**
 * Encodes a `ThresholdDecisionPolicy` protobuf message wrapped in the `Any` container: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The sum of all `YES` voter's weights is greater or equal than the defined `threshold`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_threshold - `threshold`: the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyThresholdDecisionPolicy = (s_threshold, atu8_windows) => any('/cosmos.group.v1.ThresholdDecisionPolicy', Protobuf() // ...
    .s(s_threshold) // string threshold = 1
    .b(atu8_windows) // DecisionPolicyWindows windows = 2
    .o);
/**
 * Encodes a `PercentageDecisionPolicy` protobuf message wrapped in the `Any` container: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The percentage of all `YES` voters' weights out of the total group weight is greater or equal than the given `percentage`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_percentage - `percentage`: the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyPercentageDecisionPolicy = (s_percentage, atu8_windows) => any('/cosmos.group.v1.PercentageDecisionPolicy', Protobuf() // ...
    .s(s_percentage) // string percentage = 1
    .b(atu8_windows) // DecisionPolicyWindows windows = 2
    .o);
/**
 * Encodes a `Member` protobuf message: represents a group member with an account address, non-zero weight, metadata and added_at timestamp.
 * @param sa_address - `address`: the member's account address.
 * @param s_weight - `weight`: the member's voting weight that should be greater than 0.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the member.
 * @param xt_added_at - `added_at`: a timestamp specifying when a member was added.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMember = (sa_address, s_weight, s_metadata, xt_added_at) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(s_weight) // string weight = 2
    .s(s_metadata) // string metadata = 3
    .b(temporal(xt_added_at)) // Timestamp added_at = 4
    .o;
/**
 * Encodes a `MemberRequest` protobuf message: represents a group member to be used in Msg server requests. Contrary to `Member`, it doesn't have any `added_at` field since this field cannot be set as part of requests.
 * @param sa_address - `address`: the member's account address.
 * @param s_weight - `weight`: the member's voting weight that should be greater than 0.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the member.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupMemberRequest = (sa_address, s_weight, s_metadata) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(s_weight) // string weight = 2
    .s(s_metadata) // string metadata = 3
    .o;
/**
 * Encodes a `ThresholdDecisionPolicy` protobuf message: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The sum of all `YES` voter's weights is greater or equal than the defined `threshold`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_threshold - `threshold`: the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupThresholdDecisionPolicy = (s_threshold, atu8_windows) => Protobuf() // ...
    .s(s_threshold) // string threshold = 1
    .b(atu8_windows) // DecisionPolicyWindows windows = 2
    .o;
/**
 * Encodes a `PercentageDecisionPolicy` protobuf message: a decision policy where a proposal passes when it satisfies the two following conditions: 1. The percentage of all `YES` voters' weights out of the total group weight is greater or equal than the given `percentage`. 2. The voting and execution periods of the proposal respect the parameters given by `windows`.
 * @param s_percentage - `percentage`: the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 * @param g_windows - `windows`: defines the different windows for voting and execution.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupPercentageDecisionPolicy = (s_percentage, atu8_windows) => Protobuf() // ...
    .s(s_percentage) // string percentage = 1
    .b(atu8_windows) // DecisionPolicyWindows windows = 2
    .o;
/**
 * Encodes a `DecisionPolicyWindows` protobuf message: defines the different windows for voting and execution.
 * @param xt_voting_period - `voting_period`: the duration from submission of a proposal to the end of voting period Within this times votes can be submitted with MsgVote.
 * @param xt_min_execution_period - `min_execution_period`: the minimum duration after the proposal submission where members can start sending MsgExec. This means that the window for sending a MsgExec transaction is: `[ submission + min_execution_period ; submission + voting_period + max_execution_period]` where max_execution_period is a app-specific config, defined in the keeper. If not set, min_execution_period will default to 0. Please make sure to set a `min_execution_period` that is smaller than `voting_period + max_execution_period`, or else the above execution window is empty, meaning that all proposals created with this decision policy won't be able to be executed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupDecisionPolicyWindows = (xt_voting_period, xt_min_execution_period) => Protobuf() // ...
    .b(temporal(xt_voting_period)) // Duration voting_period = 1
    .b(temporal(xt_min_execution_period)) // Duration min_execution_period = 2
    .o;
/**
 * Encodes a `GroupInfo` protobuf message: represents the high-level on-chain information for a group.
 * @param sg_id - `id`: the unique ID of the group.
 * @param s_admin - `admin`: the account address of the group's admin.
 * @param s_metadata - `metadata`: any arbitrary metadata to attached to the group. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
 * @param sg_version - `version`: used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail
 * @param s_total_weight - `total_weight`: the sum of the group members' weights.
 * @param xt_created_at - `created_at`: a timestamp specifying when a group was created.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupGroupInfo = (sg_id, s_admin, s_metadata, sg_version, s_total_weight, xt_created_at) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .s(s_admin) // string admin = 2
    .s(s_metadata) // string metadata = 3
    .g(sg_version) // uint64 version = 4
    .s(s_total_weight) // string total_weight = 5
    .b(temporal(xt_created_at)) // Timestamp created_at = 6
    .o;
/**
 * Encodes a `GroupMember` protobuf message: represents the relationship between a group and a member.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param g_member - `member`: the member data.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupGroupMember = (sg_group_id, atu8_member) => Protobuf() // ...
    .g(sg_group_id) // uint64 group_id = 1
    .b(atu8_member) // Member member = 2
    .o;
/**
 * Encodes a `GroupPolicyInfo` protobuf message: represents the high-level on-chain information for a group policy.
 * @param sa_address - `address`: the account address of group policy.
 * @param sg_group_id - `group_id`: the unique ID of the group.
 * @param s_admin - `admin`: the account address of the group admin.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the group policy. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
 * @param sg_version - `version`: used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal.
 * @param atu8_decision_policy - `decision_policy`: specifies the group policy's decision policy.
 * @param xt_created_at - `created_at`: a timestamp specifying when a group policy was created.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupGroupPolicyInfo = (sa_address, sg_group_id, s_admin, s_metadata, sg_version, atu8_decision_policy, xt_created_at) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .g(sg_group_id) // uint64 group_id = 2
    .s(s_admin) // string admin = 3
    .s(s_metadata) // string metadata = 4
    .g(sg_version) // uint64 version = 5
    .b(atu8_decision_policy) // Any decision_policy = 6
    .b(temporal(xt_created_at)) // Timestamp created_at = 7
    .o;
/**
 * Encodes a `Proposal` protobuf message: defines a group proposal. Any member of a group can submit a proposal for a group policy to decide upon. A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal passes as well as some optional metadata associated with the proposal.
 * @param sg_id - `id`: the unique id of the proposal.
 * @param sa_group_policy - `group_policy_address`: the account address of group policy.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#proposal-4
 * @param a_proposers - `proposers`: the account addresses of the proposers.
 * @param xt_submit_time - `submit_time`: a timestamp specifying when a proposal was submitted.
 * @param sg_group_version - `group_version`: tracks the version of the group at proposal submission. This field is here for informational purposes only.
 * @param sg_group_policy_version - `group_policy_version`: tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.
 * @param xc_status - `status`: represents the high level position in the life cycle of the proposal. Initial value is Submitted.
 * @param g_final_tally_result - `final_tally_result`: contains the sums of all weighted votes for this proposal for each vote option. It is empty at submission, and only populated after tallying, at voting period end or at proposal execution, whichever happens first.
 * @param xt_voting_period_end - `voting_period_end`: the timestamp before which voting must be done. Unless a successful MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.
 * @param xc_executor_result - `executor_result`: the final result of the proposal execution. Initial value is NotRun.
 * @param a_messages - `messages`: a list of `sdk.Msg`s that will be executed if the proposal passes.
 * @param s_title - `title`: the title of the proposal Since: cosmos-sdk 0.47
 * @param s_summary - `summary`: a short summary of the proposal Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupProposal = (sg_id, sa_group_policy, s_metadata, a_proposers, xt_submit_time, sg_group_version, sg_group_policy_version, xc_status, atu8_final_tally_result, xt_voting_period_end, xc_executor_result, a_messages, s_title, s_summary) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .s(sa_group_policy) // string group_policy_address = 2
    .s(s_metadata) // string metadata = 3
    .S(a_proposers) // string[] proposers = 4
    .b(temporal(xt_submit_time)) // Timestamp submit_time = 5
    .g(sg_group_version) // uint64 group_version = 6
    .g(sg_group_policy_version) // uint64 group_policy_version = 7
    .v(xc_status) // ProposalStatus status = 8
    .b(atu8_final_tally_result) // TallyResult final_tally_result = 9
    .b(temporal(xt_voting_period_end)) // Timestamp voting_period_end = 10
    .v(xc_executor_result) // ProposalExecutorResult executor_result = 11
    .B(a_messages) // Any[] messages = 12
    .s(s_title) // string title = 13
    .s(s_summary) // string summary = 14
    .o;
/**
 * Encodes a `TallyResult` protobuf message: represents the sum of weighted votes for each vote option.
 * @param s_yes_count - `yes_count`: the weighted sum of yes votes.
 * @param s_abstain_count - `abstain_count`: the weighted sum of abstainers.
 * @param s_no_count - `no_count`: the weighted sum of no votes.
 * @param s_no_with_veto_count - `no_with_veto_count`: the weighted sum of veto.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupTallyResult = (s_yes_count, s_abstain_count, s_no_count, s_no_with_veto_count) => Protobuf() // ...
    .s(s_yes_count) // string yes_count = 1
    .s(s_abstain_count) // string abstain_count = 2
    .s(s_no_count) // string no_count = 3
    .s(s_no_with_veto_count) // string no_with_veto_count = 4
    .o;
/**
 * Encodes a `Vote` protobuf message: represents a vote for a proposal.string metadata
 * @param sg_proposal_id - `proposal_id`: proposal is the unique ID of the proposal.
 * @param sa_voter - `voter`: the account address of the voter.
 * @param xc_option - `option`: the voter's choice on the proposal.
 * @param s_metadata - `metadata`: any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
 * @param xt_submit_time - `submit_time`: the timestamp when the vote was submitted.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosGroupVote = (sg_proposal_id, sa_voter, xc_option, s_metadata, xt_submit_time) => Protobuf() // ...
    .g(sg_proposal_id) // uint64 proposal_id = 1
    .s(sa_voter) // string voter = 2
    .v(xc_option) // VoteOption option = 3
    .s(s_metadata) // string metadata = 4
    .b(temporal(xt_submit_time)) // Timestamp submit_time = 5
    .o;
/**
 * Decodes a protobuf Member message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMember}
 */
export const decodeCosmosGroupMember = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, [3, 1]], [0, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf MemberRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupMemberRequest}
 */
export const decodeCosmosGroupMemberRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf ThresholdDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupThresholdDecisionPolicy}
 */
export const decodeCosmosGroupThresholdDecisionPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosGroupDecisionPolicyWindows]);
/**
 * Decodes a protobuf PercentageDecisionPolicy message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupPercentageDecisionPolicy}
 */
export const decodeCosmosGroupPercentageDecisionPolicy = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosGroupDecisionPolicyWindows]);
/**
 * Decodes a protobuf DecisionPolicyWindows message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupDecisionPolicyWindows}
 */
export const decodeCosmosGroupDecisionPolicyWindows = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1], [3, 1]], [decode_temporal, decode_temporal]);
/**
 * Decodes a protobuf GroupInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGroupInfo}
 */
export const decodeCosmosGroupGroupInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 3, 5, [3, 1]], [0, 0, 0, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf GroupMember message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGroupMember}
 */
export const decodeCosmosGroupGroupMember = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmosGroupMember]);
/**
 * Decodes a protobuf GroupPolicyInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupGroupPolicyInfo}
 */
export const decodeCosmosGroupGroupPolicyInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5, 5, 3, 1, [3, 1]], [0, 0, 0, 0, 0, decodeGoogleProtobufAny, decode_temporal]);
/**
 * Decodes a protobuf Proposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupProposal}
 */
export const decodeCosmosGroupProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 4, [3, 1], 3, 3, 1, 1, [3, 1], 1, 0, 5, 5], [0, 0, 0, 0, decode_temporal, 0, 0, 0, decodeCosmosGroupTallyResult, decode_temporal, 0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf TallyResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupTallyResult}
 */
export const decodeCosmosGroupTallyResult = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosGroupVote}
 */
export const decodeCosmosGroupVote = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 1, 5, [3, 1]], [0, 0, 0, 0, decode_temporal]);
/**
 * Destructures the fields of a {@link CosmosGroupMemberRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the member's account address.
 *   - 1: weight - the member's voting weight that should be greater than 0.
 *   - 2: metadata - any arbitrary metadata attached to the member.
 */
export const destructCosmosGroupMemberRequest = (g_struct) => [g_struct.address, g_struct.weight, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MEMBER_REQUEST = '/cosmos.group.v1.MemberRequest';
/**
 * Destructures the fields of a {@link CosmosGroupTallyResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: yes_count - the weighted sum of yes votes.
 *   - 1: abstain_count - the weighted sum of abstainers.
 *   - 2: no_count - the weighted sum of no votes.
 *   - 3: no_with_veto_count - the weighted sum of veto.
 */
export const destructCosmosGroupTallyResult = (g_struct) => [g_struct.yes_count, g_struct.abstain_count, g_struct.no_count, g_struct.no_with_veto_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_TALLY_RESULT = '/cosmos.group.v1.TallyResult';
/**
 * Destructures the fields of a {@link CosmosGroupMember} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the member's account address.
 *   - 1: weight - the member's voting weight that should be greater than 0.
 *   - 2: metadata - any arbitrary metadata attached to the member.
 *   - 3: added_at - a timestamp specifying when a member was added.
 */
export const destructCosmosGroupMember = (g_struct) => [g_struct.address, g_struct.weight, g_struct.metadata, parse_timestamp(g_struct.added_at)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_MEMBER = '/cosmos.group.v1.Member';
/**
 * Destructures the fields of a {@link CosmosGroupThresholdDecisionPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: threshold - the minimum weighted sum of `YES` votes that must be met or exceeded for a proposal to succeed.
 *   - 1: windows - defines the different windows for voting and execution.
 */
export const destructCosmosGroupThresholdDecisionPolicy = (g_struct) => [g_struct.threshold, g_struct.windows];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_THRESHOLD_DECISION_POLICY = '/cosmos.group.v1.ThresholdDecisionPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupDecisionPolicyWindows} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: voting_period - the duration from submission of a proposal to the end of voting period Within this times votes can be submitted with MsgVote.
 *   - 1: min_execution_period - the minimum duration after the proposal submission where members can start sending MsgExec. This means that the window for sending a MsgExec transaction is: `[ submission + min_execution_period ; submission + voting_period + max_execution_period]` where max_execution_period is a app-specific config, defined in the keeper. If not set, min_execution_period will default to 0. Please make sure to set a `min_execution_period` that is smaller than `voting_period + max_execution_period`, or else the above execution window is empty, meaning that all proposals created with this decision policy won't be able to be executed.
 */
export const destructCosmosGroupDecisionPolicyWindows = (g_struct) => [parse_duration(g_struct.voting_period), parse_duration(g_struct.min_execution_period)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_DECISION_POLICY_WINDOWS = '/cosmos.group.v1.DecisionPolicyWindows';
/**
 * Destructures the fields of a {@link CosmosGroupPercentageDecisionPolicy} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: percentage - the minimum percentage of the weighted sum of `YES` votes must meet for a proposal to succeed.
 *   - 1: windows - defines the different windows for voting and execution.
 */
export const destructCosmosGroupPercentageDecisionPolicy = (g_struct) => [g_struct.percentage, g_struct.windows];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_PERCENTAGE_DECISION_POLICY = '/cosmos.group.v1.PercentageDecisionPolicy';
/**
 * Destructures the fields of a {@link CosmosGroupGroupInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - the unique ID of the group.
 *   - 1: admin - the account address of the group's admin.
 *   - 2: metadata - any arbitrary metadata to attached to the group. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
 *   - 3: version - used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail
 *   - 4: total_weight - the sum of the group members' weights.
 *   - 5: created_at - a timestamp specifying when a group was created.
 */
export const destructCosmosGroupGroupInfo = (g_struct) => [g_struct.id, g_struct.admin, g_struct.metadata, g_struct.version, g_struct.total_weight, parse_timestamp(g_struct.created_at)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_GROUP_INFO = '/cosmos.group.v1.GroupInfo';
/**
 * Destructures the fields of a {@link CosmosGroupGroupMember} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_id - the unique ID of the group.
 *   - 1: member - the member data.
 */
export const destructCosmosGroupGroupMember = (g_struct) => [g_struct.group_id, g_struct.member];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_GROUP_MEMBER = '/cosmos.group.v1.GroupMember';
/**
 * Destructures the fields of a {@link CosmosGroupGroupPolicyInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the account address of group policy.
 *   - 1: group_id - the unique ID of the group.
 *   - 2: admin - the account address of the group admin.
 *   - 3: metadata - any arbitrary metadata attached to the group policy. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
 *   - 4: version - used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal.
 *   - 5: decision_policy - specifies the group policy's decision policy.
 *   - 6: created_at - a timestamp specifying when a group policy was created.
 */
export const destructCosmosGroupGroupPolicyInfo = (g_struct) => [g_struct.address, g_struct.group_id, g_struct.admin, g_struct.metadata, g_struct.version, g_struct.decision_policy, parse_timestamp(g_struct.created_at)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_GROUP_POLICY_INFO = '/cosmos.group.v1.GroupPolicyInfo';
/**
 * Destructures the fields of a {@link CosmosGroupProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - the unique id of the proposal.
 *   - 1: group_policy_address - the account address of group policy.
 *   - 2: metadata - any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#proposal-4
 *   - 3: proposers - the account addresses of the proposers.
 *   - 4: submit_time - a timestamp specifying when a proposal was submitted.
 *   - 5: group_version - tracks the version of the group at proposal submission. This field is here for informational purposes only.
 *   - 6: group_policy_version - tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.
 *   - 7: status - represents the high level position in the life cycle of the proposal. Initial value is Submitted.
 *   - 8: final_tally_result - contains the sums of all weighted votes for this proposal for each vote option. It is empty at submission, and only populated after tallying, at voting period end or at proposal execution, whichever happens first.
 *   - 9: voting_period_end - the timestamp before which voting must be done. Unless a successful MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.
 *   - 10: executor_result - the final result of the proposal execution. Initial value is NotRun.
 *   - 11: messages - a list of `sdk.Msg`s that will be executed if the proposal passes.
 *   - 12: title - the title of the proposal Since: cosmos-sdk 0.47
 *   - 13: summary - a short summary of the proposal Since: cosmos-sdk 0.47
 */
export const destructCosmosGroupProposal = (g_struct) => [g_struct.id, g_struct.group_policy_address, g_struct.metadata, g_struct.proposers, parse_timestamp(g_struct.submit_time), g_struct.group_version, g_struct.group_policy_version, g_struct.status, g_struct.final_tally_result, parse_timestamp(g_struct.voting_period_end), g_struct.executor_result, g_struct.messages, g_struct.title, g_struct.summary];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_PROPOSAL = '/cosmos.group.v1.Proposal';
/**
 * Destructures the fields of a {@link CosmosGroupVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: proposal_id - proposal is the unique ID of the proposal.
 *   - 1: voter - the account address of the voter.
 *   - 2: option - the voter's choice on the proposal.
 *   - 3: metadata - any arbitrary metadata attached to the vote. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#vote-2
 *   - 4: submit_time - the timestamp when the vote was submitted.
 */
export const destructCosmosGroupVote = (g_struct) => [g_struct.proposal_id, g_struct.voter, g_struct.option, g_struct.metadata, parse_timestamp(g_struct.submit_time)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_GROUP_VOTE = '/cosmos.group.v1.Vote';
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines an unspecified vote option which will return an error.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_UNSPECIFIED** - defines an unspecified vote option which will return an error.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export const SI_JSON_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED = 'VOTE_OPTION_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_YES = 1;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_YES** - defines a yes vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export const SI_JSON_COSMOS_GROUP_VOTE_OPTION_YES = 'VOTE_OPTION_YES';
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_ABSTAIN = 2;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_ABSTAIN** - defines an abstain vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export const SI_JSON_COSMOS_GROUP_VOTE_OPTION_ABSTAIN = 'VOTE_OPTION_ABSTAIN';
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO = 3;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO** - defines a no vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export const SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO = 'VOTE_OPTION_NO';
/**
 * Protobuf enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupVoteOption}
 */
export const XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO = 4;
/**
 * JSON enum value for `cosmos.group.v1.VoteOption`.
 *
 * **VOTE_OPTION_NO_WITH_VETO** - defines a no with veto vote option.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupVoteOption}
 */
export const SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO = 'VOTE_OPTION_NO_WITH_VETO';
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.VoteOption` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosGroupVoteOption = {
    [XC_PROTO_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED]: SI_JSON_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED,
    [XC_PROTO_COSMOS_GROUP_VOTE_OPTION_YES]: SI_JSON_COSMOS_GROUP_VOTE_OPTION_YES,
    [XC_PROTO_COSMOS_GROUP_VOTE_OPTION_ABSTAIN]: SI_JSON_COSMOS_GROUP_VOTE_OPTION_ABSTAIN,
    [XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO]: SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO,
    [XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO]: SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO,
};
/**
 * Maps a JSON enum string value for `cosmos.group.v1.VoteOption` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosGroupVoteOption = {
    [SI_JSON_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED]: XC_PROTO_COSMOS_GROUP_VOTE_OPTION_UNSPECIFIED,
    [SI_JSON_COSMOS_GROUP_VOTE_OPTION_YES]: XC_PROTO_COSMOS_GROUP_VOTE_OPTION_YES,
    [SI_JSON_COSMOS_GROUP_VOTE_OPTION_ABSTAIN]: XC_PROTO_COSMOS_GROUP_VOTE_OPTION_ABSTAIN,
    [SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO]: XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO,
    [SI_JSON_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO]: XC_PROTO_COSMOS_GROUP_VOTE_OPTION_NO_WITH_VETO,
};
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED** - An empty value is not allowed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED** - An empty value is not allowed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = 'PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_NOT_RUN** - We have not yet run the executor.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_NOT_RUN** - We have not yet run the executor.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 'PROPOSAL_EXECUTOR_RESULT_NOT_RUN';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_SUCCESS** - The executor was successful and proposed action updated state.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_SUCCESS** - The executor was successful and proposed action updated state.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS = 'PROPOSAL_EXECUTOR_RESULT_SUCCESS';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_FAILURE** - The executor returned an error and proposed action didn't update state.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalExecutorResult}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE = 3;
/**
 * JSON enum value for `cosmos.group.v1.ProposalExecutorResult`.
 *
 * **PROPOSAL_EXECUTOR_RESULT_FAILURE** - The executor returned an error and proposed action didn't update state.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalExecutorResult}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE = 'PROPOSAL_EXECUTOR_RESULT_FAILURE';
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.ProposalExecutorResult` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosGroupProposalExecutorResult = {
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED]: SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN]: SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS]: SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE]: SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE,
};
/**
 * Maps a JSON enum string value for `cosmos.group.v1.ProposalExecutorResult` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosGroupProposalExecutorResult = {
    [SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED]: XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN]: XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_NOT_RUN,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS]: XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_SUCCESS,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE]: XC_PROTO_COSMOS_GROUP_PROPOSAL_EXECUTOR_RESULT_FAILURE,
};
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - An empty value is invalid and not allowed.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_UNSPECIFIED** - An empty value is invalid and not allowed.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED = 'PROPOSAL_STATUS_UNSPECIFIED';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_SUBMITTED** - Initial status of a proposal when submitted.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED = 1;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_SUBMITTED** - Initial status of a proposal when submitted.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED = 'PROPOSAL_STATUS_SUBMITTED';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ACCEPTED** - Final status of a proposal when the final tally is done and the outcome passes the group policy's decision policy.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED = 2;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ACCEPTED** - Final status of a proposal when the final tally is done and the outcome passes the group policy's decision policy.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED = 'PROPOSAL_STATUS_ACCEPTED';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - Final status of a proposal when the final tally is done and the outcome is rejected by the group policy's decision policy.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED = 3;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_REJECTED** - Final status of a proposal when the final tally is done and the outcome is rejected by the group policy's decision policy.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED = 'PROPOSAL_STATUS_REJECTED';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ABORTED** - Final status of a proposal when the group policy is modified before the final tally.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED = 4;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_ABORTED** - Final status of a proposal when the group policy is modified before the final tally.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED = 'PROPOSAL_STATUS_ABORTED';
/**
 * Protobuf enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_WITHDRAWN** - A proposal can be withdrawn before the voting start time by the owner. When this happens the final status is Withdrawn.
 *
 * Belongs to enum type {@link ProtoEnumCosmosGroupProposalStatus}
 */
export const XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN = 5;
/**
 * JSON enum value for `cosmos.group.v1.ProposalStatus`.
 *
 * **PROPOSAL_STATUS_WITHDRAWN** - A proposal can be withdrawn before the voting start time by the owner. When this happens the final status is Withdrawn.
 *
 * Belongs to enum type {@link JsonEnumCosmosGroupProposalStatus}
 */
export const SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN = 'PROPOSAL_STATUS_WITHDRAWN';
/**
 * Maps a protobuf enum int value for `cosmos.group.v1.ProposalStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosGroupProposalStatus = {
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED]: SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED]: SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED]: SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED]: SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED]: SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED,
    [XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN]: SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN,
};
/**
 * Maps a JSON enum string value for `cosmos.group.v1.ProposalStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosGroupProposalStatus = {
    [SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED]: XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_UNSPECIFIED,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED]: XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_SUBMITTED,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED]: XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ACCEPTED,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED]: XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_REJECTED,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED]: XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_ABORTED,
    [SI_JSON_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN]: XC_PROTO_COSMOS_GROUP_PROPOSAL_STATUS_WITHDRAWN,
};
//# sourceMappingURL=types.js.map