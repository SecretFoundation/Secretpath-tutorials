import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `EventSend` protobuf message: emitted on Msg/Send
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the nft
 * @param sa_sender - `sender`: the address of the owner of nft
 * @param sa_receiver - `receiver`: the receiver address of nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftEventSend = (si_class, s_id, sa_sender, sa_receiver) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(s_id) // string id = 2
    .s(sa_sender) // string sender = 3
    .s(sa_receiver) // string receiver = 4
    .o;
/**
 * Encodes a `EventMint` protobuf message: emitted on Mint
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftEventMint = (si_class, s_id, sa_owner) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(s_id) // string id = 2
    .s(sa_owner) // string owner = 3
    .o;
/**
 * Encodes a `EventBurn` protobuf message: emitted on Burn
 * @param si_class - `class_id`: associated with the nft
 * @param s_id - `id`: a unique identifier of the nft
 * @param sa_owner - `owner`: the owner address of the nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosNftEventBurn = (si_class, s_id, sa_owner) => Protobuf() // ...
    .s(si_class) // string class_id = 1
    .s(s_id) // string id = 2
    .s(sa_owner) // string owner = 3
    .o;
/**
 * Decodes a protobuf EventSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEventSend}
 */
export const decodeCosmosNftEventSend = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf EventMint message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEventMint}
 */
export const decodeCosmosNftEventMint = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf EventBurn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftEventBurn}
 */
export const decodeCosmosNftEventBurn = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Destructures the fields of a {@link CosmosNftEventSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: sender - the address of the owner of nft
 *   - 3: receiver - the receiver address of nft
 */
export const destructCosmosNftEventSend = (g_struct) => [g_struct.class_id, g_struct.id, g_struct.sender, g_struct.receiver];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_EVENT_SEND = '/cosmos.nft.v1beta1.EventSend';
/**
 * Destructures the fields of a {@link CosmosNftEventMint} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: owner - the owner address of the nft
 */
export const destructCosmosNftEventMint = (g_struct) => [g_struct.class_id, g_struct.id, g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_EVENT_MINT = '/cosmos.nft.v1beta1.EventMint';
/**
 * Destructures the fields of a {@link CosmosNftEventBurn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - associated with the nft
 *   - 1: id - a unique identifier of the nft
 *   - 2: owner - the owner address of the nft
 */
export const destructCosmosNftEventBurn = (g_struct) => [g_struct.class_id, g_struct.id, g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_NFT_EVENT_BURN = '/cosmos.nft.v1beta1.EventBurn';
//# sourceMappingURL=event.js.map