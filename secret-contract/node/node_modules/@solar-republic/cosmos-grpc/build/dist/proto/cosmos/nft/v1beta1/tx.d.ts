import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmosNftMsgSend = Encoded<'/cosmos.nft.v1beta1.MsgSend'>;
export type EncodedCosmosNftMsgSendResponse = Encoded<'/cosmos.nft.v1beta1.MsgSendResponse'>;
/**
 * Encodes a `MsgSend` protobuf message: represents a message to send a nft from one account to another account.
 * @param si_class - `class_id`: defines the unique identifier of the nft classification, similar to the contract address of ERC721
 * @param s_id - `id`: defines the unique identification of nft
 * @param sa_sender - `sender`: the address of the owner of nft
 * @param sa_receiver - `receiver`: the receiver address of nft
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftMsgSend: (si_class?: Opt<string>, s_id?: Opt<string>, sa_sender?: Opt<WeakAccountAddr>, sa_receiver?: Opt<WeakAccountAddr>) => EncodedCosmosNftMsgSend;
/**
 * Encodes a `MsgSendResponse` protobuf message: defines the Msg/Send response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosNftMsgSendResponse: () => EncodedCosmosNftMsgSendResponse;
/**
 * A decoded protobuf Send message
 *
 * Tuple where:
 *   - 0: class_id - defines the unique identifier of the nft classification, similar to the contract address of ERC721
 *   - 1: id - defines the unique identification of nft
 *   - 2: sender - the address of the owner of nft
 *   - 3: receiver - the receiver address of nft
 */
export type DecodedCosmosNftMsgSend = [
    si_class?: string,
    s_id?: string,
    sa_sender?: CwAccountAddr,
    sa_receiver?: CwAccountAddr
];
/**
 * Decodes a protobuf Send message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftMsgSend}
 */
export declare const decodeCosmosNftMsgSend: (atu8_payload: Uint8Array) => DecodedCosmosNftMsgSend;
/**
 * A decoded protobuf Send message
 *
 * Tuple where:
 */
export type DecodedCosmosNftMsgSendResponse = [];
/**
 * Decodes a protobuf Send message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosNftMsgSendResponse}
 */
export declare const decodeCosmosNftMsgSendResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link CosmosNftMsgSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: class_id - defines the unique identifier of the nft classification, similar to the contract address of ERC721
 *   - 1: id - defines the unique identification of nft
 *   - 2: sender - the address of the owner of nft
 *   - 3: receiver - the receiver address of nft
 */
export declare const destructCosmosNftMsgSend: (g_struct: CosmosNftMsgSend) => [class_id?: string, id?: string, sender?: CwAccountAddr, receiver?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_MSG_SEND = "/cosmos.nft.v1beta1.MsgSend";
/**
 * JSON serialization of `cosmos.nft.v1beta1.MsgSend` - represents a message to send a nft from one account to another account.
 */
export type CosmosNftMsgSend = {
    class_id?: string | undefined;
    id?: string | undefined;
    sender?: CwAccountAddr | undefined;
    receiver?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosNftMsgSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosNftMsgSendResponse: (g_struct: CosmosNftMsgSendResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_NFT_MSG_SEND_RESPONSE = "/cosmos.nft.v1beta1.MsgSendResponse";
/**
 * JSON serialization of `cosmos.nft.v1beta1.MsgSendResponse` - defines the Msg/Send response type.
 */
export type CosmosNftMsgSendResponse = {};
