import type { Encoded } from '../../../../../api/types.js';
export type EncodedCosmosOrmModuleModule = Encoded<'/cosmos.orm.module.v1alpha1.Module'>;
/**
 * Encodes a `Module` protobuf message: defines the ORM module which adds providers to the app container for ORM ModuleDB's and in the future will automatically register query services for modules that use the ORM.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmModuleModule: () => EncodedCosmosOrmModuleModule;
/**
 * A decoded protobuf Module message
 *
 * Tuple where:
 */
export type DecodedCosmosOrmModuleModule = [];
/**
 * Decodes a protobuf Module message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmModuleModule}
 */
export declare const decodeCosmosOrmModuleModule: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link CosmosOrmModuleModule} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosOrmModuleModule: (g_struct: CosmosOrmModuleModule) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_MODULE_MODULE = "/cosmos.orm.module.v1alpha1.Module";
/**
 * JSON serialization of `cosmos.orm.module.v1alpha1.Module` - defines the ORM module which adds providers to the app container for ORM ModuleDB's and in the future will automatically register query services for modules that use the ORM.
 */
export type CosmosOrmModuleModule = {};
