import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt, WeakTimestampStr, WeakDurationStr } from '../../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../base/query/v1beta1/pagination.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
export type EncodedCosmosOrmQueryGetRequest = Encoded<'/cosmos.orm.query.v1alpha1.GetRequest'>;
export type EncodedCosmosOrmQueryGetResponse = Encoded<'/cosmos.orm.query.v1alpha1.GetResponse'>;
export type EncodedCosmosOrmQueryListRequest = Encoded<'/cosmos.orm.query.v1alpha1.ListRequest'>;
export type EncodedCosmosOrmQueryListResponse = Encoded<'/cosmos.orm.query.v1alpha1.ListResponse'>;
export type EncodedCosmosOrmQueryIndexValue = Encoded<'/cosmos.orm.query.v1alpha1.IndexValue'>;
export type EncodedCosmosOrmQueryListRequestPrefix = Encoded<'/cosmos.orm.query.v1alpha1.ListRequest.Prefix'>;
export type EncodedCosmosOrmQueryListRequestRange = Encoded<'/cosmos.orm.query.v1alpha1.ListRequest.Range'>;
/**
 * Encodes a `GetRequest` protobuf message: the Query/Get request type.
 * @param s_message_name - `message_name`: the fully-qualified message name of the ORM table being queried.
 * @param s_index - `index`: the index fields expression used in orm definitions. If it is empty, the table's primary key is assumed. If it is non-empty, it must refer to an unique index.
 * @param a_values - `values`: the values of the fields corresponding to the requested index. There must be as many values provided as there are fields in the index and these values must correspond to the index field types.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryGetRequest: (s_message_name?: Opt<string>, s_index?: Opt<string>, a_values?: Opt<Encoded<'/cosmos.orm.query.v1alpha1.IndexValue'>[]>) => EncodedCosmosOrmQueryGetRequest;
/**
 * Encodes a `GetResponse` protobuf message: the Query/Get response type.
 * @param atu8_result - `result`: the result of the get query. If no value is found, the gRPC status code NOT_FOUND will be returned.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryGetResponse: (atu8_result?: Opt<Uint8Array>) => EncodedCosmosOrmQueryGetResponse;
/**
 * Encodes a `ListRequest` protobuf message: the Query/List request type.
 * @param s_message_name - `message_name`: the fully-qualified message name of the ORM table being queried.
 * @param s_index - `index`: the index fields expression used in orm definitions. If it is empty, the table's primary key is assumed.
 * @param g_prefix - `prefix`: defines a prefix query.
 * @param g_range - `range`: defines a range query.
 * @param g_pagination - `pagination`: the pagination request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryListRequest: (s_message_name?: Opt<string>, s_index?: Opt<string>, atu8_prefix?: Opt<Encoded<'/cosmos.orm.query.v1alpha1.ListRequest.Prefix'>>, atu8_range?: Opt<Encoded<'/cosmos.orm.query.v1alpha1.ListRequest.Range'>>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosOrmQueryListRequest;
/**
 * Encodes a `ListResponse` protobuf message: the Query/List response type.
 * @param a_results - `results`: the results of the query.
 * @param g_pagination - `pagination`: the pagination response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryListResponse: (a_results?: Opt<Uint8Array[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosOrmQueryListResponse;
/**
 * Encodes a `IndexValue` protobuf message: represents the value of a field in an ORM index expression.
 * @param sg_uint - `uint`: specifies a value for an uint32, fixed32, uint64, or fixed64 index field.
 * @param sg_int - `int`: 64 specifies a value for an int32, sfixed32, int64, or sfixed64 index field.
 * @param s_str - `str`: specifies a value for a string index field.
 * @param atu8_bytes - `bytes`: specifies a value for a bytes index field.
 * @param s_enum - `enum`: specifies a value for an enum index field.
 * @param b_bool - `bool`: specifies a value for a bool index field.
 * @param xt_timestamp - `timestamp`: specifies a value for a timestamp index field.
 * @param xt_duration - `duration`: specifies a value for a duration index field.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryIndexValue: (sg_uint?: Opt<WeakUint64Str>, sg_int?: Opt<WeakInt64Str>, s_str?: Opt<string>, atu8_bytes?: Opt<Uint8Array>, s_enum?: Opt<string>, b_bool?: Opt<boolean | 0 | 1>, xt_timestamp?: Opt<number>, xt_duration?: Opt<number>) => EncodedCosmosOrmQueryIndexValue;
/**
 * Encodes a `Prefix` protobuf message:
 * @param a_values - `values`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryListRequestPrefix: (a_values?: Opt<Encoded<'/cosmos.orm.query.v1alpha1.IndexValue'>[]>) => EncodedCosmosOrmQueryListRequestPrefix;
/**
 * Encodes a `Range` protobuf message:
 * @param a_starts - `start`:
 * @param a_ends - `end`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosOrmQueryListRequestRange: (a_starts?: Opt<Encoded<'/cosmos.orm.query.v1alpha1.IndexValue'>[]>, a_ends?: Opt<Encoded<'/cosmos.orm.query.v1alpha1.IndexValue'>[]>) => EncodedCosmosOrmQueryListRequestRange;
/**
 * A decoded protobuf GetRequest message
 *
 * Tuple where:
 *   - 0: message_name - the fully-qualified message name of the ORM table being queried.
 *   - 1: index - the index fields expression used in orm definitions. If it is empty, the table's primary key is assumed. If it is non-empty, it must refer to an unique index.
 *   - 2: values - the values of the fields corresponding to the requested index. There must be as many values provided as there are fields in the index and these values must correspond to the index field types.
 */
export type DecodedCosmosOrmQueryGetRequest = [
    s_message_name?: string,
    s_index?: string,
    a_values?: DecodedCosmosOrmQueryIndexValue[]
];
/**
 * Decodes a protobuf GetRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmQueryGetRequest}
 */
export declare const decodeCosmosOrmQueryGetRequest: (atu8_payload: Uint8Array) => DecodedCosmosOrmQueryGetRequest;
/**
 * A decoded protobuf Get message
 *
 * Alias for: result - the result of the get query. If no value is found, the gRPC status code NOT_FOUND will be returned.
 */
export type DecodedCosmosOrmQueryGetResponse = [
    a_result?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf Get message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmQueryGetResponse}
 */
export declare const decodeCosmosOrmQueryGetResponse: (atu8_payload: Uint8Array) => DecodedCosmosOrmQueryGetResponse;
/**
 * A decoded protobuf ListRequest message
 *
 * Tuple where:
 *   - 0: message_name - the fully-qualified message name of the ORM table being queried.
 *   - 1: index - the index fields expression used in orm definitions. If it is empty, the table's primary key is assumed.
 *   - 2: prefix - defines a prefix query.
 *   - 3: range - defines a range query.
 *   - 4: pagination - the pagination request.
 */
export type DecodedCosmosOrmQueryListRequest = [
    s_message_name?: string,
    s_index?: string,
    a_prefix?: DecodedCosmosOrmQueryListRequestPrefix,
    a_range?: DecodedCosmosOrmQueryListRequestRange,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf ListRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmQueryListRequest}
 */
export declare const decodeCosmosOrmQueryListRequest: (atu8_payload: Uint8Array) => DecodedCosmosOrmQueryListRequest;
/**
 * A decoded protobuf List message
 *
 * Tuple where:
 *   - 0: results - the results of the query.
 *   - 4: pagination - the pagination response.
 */
export type DecodedCosmosOrmQueryListResponse = [
    a_results?: DecodedGoogleProtobufAny[],
    w_0?: undefined,
    w_1?: undefined,
    w_2?: undefined,
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf List message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosOrmQueryListResponse}
 */
export declare const decodeCosmosOrmQueryListResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosOrmQueryListResponse;
/**
 * A decoded protobuf IndexValue message
 *
 * Tuple where:
 *   - 0: uint - specifies a value for an uint32, fixed32, uint64, or fixed64 index field.
 *   - 1: int - 64 specifies a value for an int32, sfixed32, int64, or sfixed64 index field.
 *   - 2: str - specifies a value for a string index field.
 *   - 3: bytes - specifies a value for a bytes index field.
 *   - 4: enum - specifies a value for an enum index field.
 *   - 5: bool - specifies a value for a bool index field.
 *   - 6: timestamp - specifies a value for a timestamp index field.
 *   - 7: duration - specifies a value for a duration index field.
 */
export type DecodedCosmosOrmQueryIndexValue = [
    sg_uint?: CwUint64,
    sg_int?: CwInt64,
    s_str?: string,
    atu8_bytes?: Uint8Array,
    s_enum?: string,
    b_bool?: 0 | 1,
    a_timestamp?: [
        string,
        number
    ],
    a_duration?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf IndexValue message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmQueryIndexValue}
 */
export declare const decodeCosmosOrmQueryIndexValue: (atu8_payload: Uint8Array) => DecodedCosmosOrmQueryIndexValue;
/**
 * A decoded protobuf Prefix message
 *
 * Alias for: values -
 */
export type DecodedCosmosOrmQueryListRequestPrefix = [
    a_values?: DecodedCosmosOrmQueryIndexValue[]
];
/**
 * Decodes a protobuf Prefix message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmQueryListRequestPrefix}
 */
export declare const decodeCosmosOrmQueryListRequestPrefix: (atu8_payload: Uint8Array) => DecodedCosmosOrmQueryListRequestPrefix;
/**
 * A decoded protobuf Range message
 *
 * Tuple where:
 *   - 0: start -
 *   - 1: end -
 */
export type DecodedCosmosOrmQueryListRequestRange = [
    a_start?: DecodedCosmosOrmQueryIndexValue[],
    a_end?: DecodedCosmosOrmQueryIndexValue[]
];
/**
 * Decodes a protobuf Range message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosOrmQueryListRequestRange}
 */
export declare const decodeCosmosOrmQueryListRequestRange: (atu8_payload: Uint8Array) => DecodedCosmosOrmQueryListRequestRange;
/**
 * Destructures the fields of a {@link CosmosOrmQueryGetRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_name - the fully-qualified message name of the ORM table being queried.
 *   - 1: index - the index fields expression used in orm definitions. If it is empty, the table's primary key is assumed. If it is non-empty, it must refer to an unique index.
 *   - 2: values - the values of the fields corresponding to the requested index. There must be as many values provided as there are fields in the index and these values must correspond to the index field types.
 */
export declare const destructCosmosOrmQueryGetRequest: (g_struct: CosmosOrmQueryGetRequest) => [message_name?: string, index?: string, values?: CosmosOrmQueryIndexValue[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_GET_REQUEST = "/cosmos.orm.query.v1alpha1.GetRequest";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.GetRequest` - the Query/Get request type.
 */
export type CosmosOrmQueryGetRequest = {
    message_name?: string | undefined;
    index?: string | undefined;
    values?: CosmosOrmQueryIndexValue[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmQueryIndexValue} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: uint - specifies a value for an uint32, fixed32, uint64, or fixed64 index field.
 *   - 1: int - 64 specifies a value for an int32, sfixed32, int64, or sfixed64 index field.
 *   - 2: str - specifies a value for a string index field.
 *   - 3: bytes - specifies a value for a bytes index field.
 *   - 4: enum - specifies a value for an enum index field.
 *   - 5: bool - specifies a value for a bool index field.
 *   - 6: timestamp - specifies a value for a timestamp index field.
 *   - 7: duration - specifies a value for a duration index field.
 */
export declare const destructCosmosOrmQueryIndexValue: (g_struct: CosmosOrmQueryIndexValue) => [uint?: CwUint64, int?: CwInt64, str?: string, bytes?: Uint8Array, enum_?: string, bool?: boolean, timestamp?: number, duration?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_INDEX_VALUE = "/cosmos.orm.query.v1alpha1.IndexValue";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.IndexValue` - represents the value of a field in an ORM index expression.
 */
export type CosmosOrmQueryIndexValue = {
    uint?: CwUint64 | undefined;
    int?: CwInt64 | undefined;
    str?: string | undefined;
    bytes?: CwBase64 | undefined;
    enum?: string | undefined;
    bool?: boolean | undefined;
    timestamp?: WeakTimestampStr | undefined;
    duration?: WeakDurationStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmQueryGetResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result - the result of the get query. If no value is found, the gRPC status code NOT_FOUND will be returned.
 */
export declare const destructCosmosOrmQueryGetResponse: (g_struct: CosmosOrmQueryGetResponse) => [result?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_GET_RESPONSE = "/cosmos.orm.query.v1alpha1.GetResponse";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.GetResponse` - the Query/Get response type.
 */
export type CosmosOrmQueryGetResponse = {
    result?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmQueryListRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message_name - the fully-qualified message name of the ORM table being queried.
 *   - 1: index - the index fields expression used in orm definitions. If it is empty, the table's primary key is assumed.
 *   - 2: prefix - defines a prefix query.
 *   - 3: range - defines a range query.
 *   - 4: pagination - the pagination request.
 */
export declare const destructCosmosOrmQueryListRequest: (g_struct: CosmosOrmQueryListRequest) => [message_name?: string, index?: string, prefix?: CosmosOrmQueryListRequestPrefix, range?: CosmosOrmQueryListRequestRange, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_LIST_REQUEST = "/cosmos.orm.query.v1alpha1.ListRequest";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.ListRequest` - the Query/List request type.
 */
export type CosmosOrmQueryListRequest = {
    message_name?: string | undefined;
    index?: string | undefined;
    prefix?: CosmosOrmQueryListRequestPrefix | undefined;
    range?: CosmosOrmQueryListRequestRange | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmQueryListRequestPrefix} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: values -
 */
export declare const destructCosmosOrmQueryListRequestPrefix: (g_struct: CosmosOrmQueryListRequestPrefix) => [values?: CosmosOrmQueryIndexValue[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_LIST_REQUEST_PREFIX = "/cosmos.orm.query.v1alpha1.ListRequest.Prefix";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.ListRequest.Prefix` -
 */
export type CosmosOrmQueryListRequestPrefix = {
    values?: CosmosOrmQueryIndexValue[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmQueryListRequestRange} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: start -
 *   - 1: end -
 */
export declare const destructCosmosOrmQueryListRequestRange: (g_struct: CosmosOrmQueryListRequestRange) => [start?: CosmosOrmQueryIndexValue[], end?: CosmosOrmQueryIndexValue[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_LIST_REQUEST_RANGE = "/cosmos.orm.query.v1alpha1.ListRequest.Range";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.ListRequest.Range` -
 */
export type CosmosOrmQueryListRequestRange = {
    start?: CosmosOrmQueryIndexValue[] | undefined;
    end?: CosmosOrmQueryIndexValue[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosOrmQueryListResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: results - the results of the query.
 *   - 4: pagination - the pagination response.
 */
export declare const destructCosmosOrmQueryListResponse: (g_struct: CosmosOrmQueryListResponse) => [results?: JsonAny[], EMPTY?: void, EMPTY?: void, EMPTY?: void, pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_ORM_QUERY_LIST_RESPONSE = "/cosmos.orm.query.v1alpha1.ListResponse";
/**
 * JSON serialization of `cosmos.orm.query.v1alpha1.ListResponse` - the Query/List response type.
 */
export type CosmosOrmQueryListResponse = {
    results?: JsonAny[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
