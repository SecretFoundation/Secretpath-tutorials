import type { Encoded, Opt } from '../../../../api/types.js';
export type AnyCosmosParamsParameterChangeProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosParamsParameterChangeProposal = Encoded<'/cosmos.params.v1beta1.ParameterChangeProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosParamsParamChange = Encoded<'/cosmos.params.v1beta1.ParamChange'>;
/**
 * Encodes a `ParameterChangeProposal` protobuf message wrapped in the `Any` container: defines a proposal to change one or more parameters.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_changes - `changes`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyParameterChangeProposal: (s_title?: Opt<string>, s_description?: Opt<string>, a_changes?: Opt<Encoded<'/cosmos.params.v1beta1.ParamChange'>[]>) => AnyCosmosParamsParameterChangeProposal;
/**
 * Encodes a `ParameterChangeProposal` protobuf message: defines a proposal to change one or more parameters.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_changes - `changes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsParameterChangeProposal: (s_title?: Opt<string>, s_description?: Opt<string>, a_changes?: Opt<Encoded<'/cosmos.params.v1beta1.ParamChange'>[]>) => EncodedCosmosParamsParameterChangeProposal;
/**
 * Encodes a `ParamChange` protobuf message: defines an individual parameter change, for use in ParameterChangeProposal.
 * @param s_subspace - `subspace`:
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsParamChange: (s_subspace?: Opt<string>, s_key?: Opt<string>, s_value?: Opt<string>) => EncodedCosmosParamsParamChange;
/**
 * A decoded protobuf ParameterChangeProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: changes -
 */
export type DecodedCosmosParamsParameterChangeProposal = [
    s_title?: string,
    s_description?: string,
    a_changes?: DecodedCosmosParamsParamChange[]
];
/**
 * Decodes a protobuf ParameterChangeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsParameterChangeProposal}
 */
export declare const decodeCosmosParamsParameterChangeProposal: (atu8_payload: Uint8Array) => DecodedCosmosParamsParameterChangeProposal;
/**
 * A decoded protobuf ParamChange message
 *
 * Tuple where:
 *   - 0: subspace -
 *   - 1: key -
 *   - 2: value -
 */
export type DecodedCosmosParamsParamChange = [
    s_subspace?: string,
    s_key?: string,
    s_value?: string
];
/**
 * Decodes a protobuf ParamChange message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsParamChange}
 */
export declare const decodeCosmosParamsParamChange: (atu8_payload: Uint8Array) => DecodedCosmosParamsParamChange;
/**
 * Destructures the fields of a {@link CosmosParamsParamChange} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspace -
 *   - 1: key -
 *   - 2: value -
 */
export declare const destructCosmosParamsParamChange: (g_struct: CosmosParamsParamChange) => [subspace?: string, key?: string, value?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_PARAM_CHANGE = "/cosmos.params.v1beta1.ParamChange";
/**
 * JSON serialization of `cosmos.params.v1beta1.ParamChange` - defines an individual parameter change, for use in ParameterChangeProposal.
 */
export type CosmosParamsParamChange = {
    subspace?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosParamsParameterChangeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: changes -
 */
export declare const destructCosmosParamsParameterChangeProposal: (g_struct: CosmosParamsParameterChangeProposal) => [title?: string, description?: string, changes?: CosmosParamsParamChange[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_PARAMETER_CHANGE_PROPOSAL = "/cosmos.params.v1beta1.ParameterChangeProposal";
/**
 * JSON serialization of `cosmos.params.v1beta1.ParameterChangeProposal` - defines a proposal to change one or more parameters.
 */
export type CosmosParamsParameterChangeProposal = {
    title?: string | undefined;
    description?: string | undefined;
    changes?: CosmosParamsParamChange[] | undefined;
};
