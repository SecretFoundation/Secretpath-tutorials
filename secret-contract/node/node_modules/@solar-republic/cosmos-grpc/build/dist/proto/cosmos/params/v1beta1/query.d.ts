/// <reference types="node" />
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosParamsParamChange, DecodedCosmosParamsParamChange } from './params.js';
export type EncodedCosmosParamsQueryParamsRequest = Encoded<'/cosmos.params.v1beta1.QueryParamsRequest'>;
export type EncodedCosmosParamsQueryParamsResponse = Encoded<'/cosmos.params.v1beta1.QueryParamsResponse'>;
export type EncodedCosmosParamsQuerySubspacesRequest = Encoded<'/cosmos.params.v1beta1.QuerySubspacesRequest'>;
export type EncodedCosmosParamsQuerySubspacesResponse = Encoded<'/cosmos.params.v1beta1.QuerySubspacesResponse'>;
export type EncodedCosmosParamsSubspace = Encoded<'/cosmos.params.v1beta1.Subspace'>;
/**
 * Queries a specific parameter of a module, given its subspace and key.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_subspace - defines the module to query the parameter for.
 * @param s_key - defines the key of the parameter in the subspace.
 * @returns a tuple where:
 *   - 0: param - defines the queried parameter.
 */
export declare const queryCosmosParamsParams: (z_req: string | ({
    origin: string;
} & RequestInit), s_subspace?: Opt<string>, s_key?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosParamsQueryParamsResponse>>;
/**
 * Queries for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: subspaces - the 'subspaces' response property
 */
export declare const queryCosmosParamsSubspaces: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosParamsQuerySubspacesResponse>>;
/**
 * Encodes a `QueryParamsRequest` protobuf message: request type for the Query/Params RPC method.
 * @param s_subspace - `subspace`: defines the module to query the parameter for.
 * @param s_key - `key`: defines the key of the parameter in the subspace.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsQueryParamsRequest: (s_subspace?: Opt<string>, s_key?: Opt<string>) => EncodedCosmosParamsQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: response type for the Query/Params RPC method.
 * @param g_param - `param`: defines the queried parameter.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsQueryParamsResponse: (atu8_param?: Opt<Encoded<'/cosmos.params.v1beta1.ParamChange'>>) => EncodedCosmosParamsQueryParamsResponse;
/**
 * Encodes a `QuerySubspacesRequest` protobuf message: defines a request type for querying for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsQuerySubspacesRequest: () => EncodedCosmosParamsQuerySubspacesRequest;
/**
 * Encodes a `QuerySubspacesResponse` protobuf message: defines the response types for querying for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 * @param a_subspaces - `subspaces`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsQuerySubspacesResponse: (a_subspaces?: Opt<Encoded<'/cosmos.params.v1beta1.Subspace'>[]>) => EncodedCosmosParamsQuerySubspacesResponse;
/**
 * Encodes a `Subspace` protobuf message: defines a parameter subspace name and all the keys that exist for the subspace. Since: cosmos-sdk 0.46
 * @param s_subspace - `subspace`:
 * @param a_keys - `keys`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosParamsSubspace: (s_subspace?: Opt<string>, a_keys?: Opt<string[]>) => EncodedCosmosParamsSubspace;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 *   - 0: subspace - defines the module to query the parameter for.
 *   - 1: key - defines the key of the parameter in the subspace.
 */
export type DecodedCosmosParamsQueryParamsRequest = [
    s_subspace?: string,
    s_key?: string
];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQueryParamsRequest}
 */
export declare const decodeCosmosParamsQueryParamsRequest: (atu8_payload: Uint8Array) => DecodedCosmosParamsQueryParamsRequest;
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: param - defines the queried parameter.
 */
export type DecodedCosmosParamsQueryParamsResponse = [
    a_param?: DecodedCosmosParamsParamChange
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQueryParamsResponse}
 */
export declare const decodeCosmosParamsQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedCosmosParamsQueryParamsResponse;
/**
 * A decoded protobuf QuerySubspacesRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosParamsQuerySubspacesRequest = [];
/**
 * Decodes a protobuf QuerySubspacesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQuerySubspacesRequest}
 */
export declare const decodeCosmosParamsQuerySubspacesRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QuerySubspaces message
 *
 * Alias for: subspaces -
 */
export type DecodedCosmosParamsQuerySubspacesResponse = [
    a_subspaces?: DecodedCosmosParamsSubspace[]
];
/**
 * Decodes a protobuf QuerySubspaces message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQuerySubspacesResponse}
 */
export declare const decodeCosmosParamsQuerySubspacesResponse: (atu8_payload: Uint8Array) => DecodedCosmosParamsQuerySubspacesResponse;
/**
 * A decoded protobuf Subspace message
 *
 * Tuple where:
 *   - 0: subspace -
 *   - 1: keys -
 */
export type DecodedCosmosParamsSubspace = [
    s_subspace?: string,
    a_keys?: string[]
];
/**
 * Decodes a protobuf Subspace message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsSubspace}
 */
export declare const decodeCosmosParamsSubspace: (atu8_payload: Uint8Array) => DecodedCosmosParamsSubspace;
/**
 * Destructures the fields of a {@link CosmosParamsQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspace - defines the module to query the parameter for.
 *   - 1: key - defines the key of the parameter in the subspace.
 */
export declare const destructCosmosParamsQueryParamsRequest: (g_struct: CosmosParamsQueryParamsRequest) => [subspace?: string, key?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_PARAMS_REQUEST = "/cosmos.params.v1beta1.QueryParamsRequest";
/**
 * JSON serialization of `cosmos.params.v1beta1.QueryParamsRequest` - request type for the Query/Params RPC method.
 */
export type CosmosParamsQueryParamsRequest = {
    subspace?: string | undefined;
    key?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosParamsQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: param - defines the queried parameter.
 */
export declare const destructCosmosParamsQueryParamsResponse: (g_struct: CosmosParamsQueryParamsResponse) => [param?: CosmosParamsParamChange];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_PARAMS_RESPONSE = "/cosmos.params.v1beta1.QueryParamsResponse";
/**
 * JSON serialization of `cosmos.params.v1beta1.QueryParamsResponse` - response type for the Query/Params RPC method.
 */
export type CosmosParamsQueryParamsResponse = {
    param?: CosmosParamsParamChange | undefined;
};
/**
 * Destructures the fields of a {@link CosmosParamsQuerySubspacesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosParamsQuerySubspacesRequest: (g_struct: CosmosParamsQuerySubspacesRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_SUBSPACES_REQUEST = "/cosmos.params.v1beta1.QuerySubspacesRequest";
/**
 * JSON serialization of `cosmos.params.v1beta1.QuerySubspacesRequest` - defines a request type for querying for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 */
export type CosmosParamsQuerySubspacesRequest = {};
/**
 * Destructures the fields of a {@link CosmosParamsQuerySubspacesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspaces -
 */
export declare const destructCosmosParamsQuerySubspacesResponse: (g_struct: CosmosParamsQuerySubspacesResponse) => [subspaces?: CosmosParamsSubspace[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_SUBSPACES_RESPONSE = "/cosmos.params.v1beta1.QuerySubspacesResponse";
/**
 * JSON serialization of `cosmos.params.v1beta1.QuerySubspacesResponse` - defines the response types for querying for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 */
export type CosmosParamsQuerySubspacesResponse = {
    subspaces?: CosmosParamsSubspace[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosParamsSubspace} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspace -
 *   - 1: keys -
 */
export declare const destructCosmosParamsSubspace: (g_struct: CosmosParamsSubspace) => [subspace?: string, keys?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_PARAMS_SUBSPACE = "/cosmos.params.v1beta1.Subspace";
/**
 * JSON serialization of `cosmos.params.v1beta1.Subspace` - defines a parameter subspace name and all the keys that exist for the subspace. Since: cosmos-sdk 0.46
 */
export type CosmosParamsSubspace = {
    subspace?: string | undefined;
    keys?: string[] | undefined;
};
