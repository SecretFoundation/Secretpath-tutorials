/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosParamsParamChange } from './params.js';
const SR_LCD_COSMOS_PARAMS_QUERY = '/cosmos/params/v1beta1/';
/**
 * Queries a specific parameter of a module, given its subspace and key.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_subspace - defines the module to query the parameter for.
 * @param s_key - defines the key of the parameter in the subspace.
 * @returns a tuple where:
 *   - 0: param - defines the queried parameter.
 */
export const queryCosmosParamsParams = restful_grpc((s_subspace, s_key) => [SR_LCD_COSMOS_PARAMS_QUERY + 'params', {
        subspace: s_subspace,
        key: s_key,
    }]);
/**
 * Queries for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: subspaces - the 'subspaces' response property
 */
export const queryCosmosParamsSubspaces = restful_grpc(() => [SR_LCD_COSMOS_PARAMS_QUERY + 'subspaces']);
/**
 * Encodes a `QueryParamsRequest` protobuf message: request type for the Query/Params RPC method.
 * @param s_subspace - `subspace`: defines the module to query the parameter for.
 * @param s_key - `key`: defines the key of the parameter in the subspace.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosParamsQueryParamsRequest = (s_subspace, s_key) => Protobuf() // ...
    .s(s_subspace) // string subspace = 1
    .s(s_key) // string key = 2
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: response type for the Query/Params RPC method.
 * @param g_param - `param`: defines the queried parameter.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosParamsQueryParamsResponse = (atu8_param) => Protobuf() // ...
    .b(atu8_param) // ParamChange param = 1
    .o;
/**
 * Encodes a `QuerySubspacesRequest` protobuf message: defines a request type for querying for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosParamsQuerySubspacesRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QuerySubspacesResponse` protobuf message: defines the response types for querying for all registered subspaces and all keys for a subspace. Since: cosmos-sdk 0.46
 * @param a_subspaces - `subspaces`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosParamsQuerySubspacesResponse = (a_subspaces) => Protobuf() // ...
    .B(a_subspaces) // Subspace[] subspaces = 1
    .o;
/**
 * Encodes a `Subspace` protobuf message: defines a parameter subspace name and all the keys that exist for the subspace. Since: cosmos-sdk 0.46
 * @param s_subspace - `subspace`:
 * @param a_keys - `keys`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosParamsSubspace = (s_subspace, a_keys) => Protobuf() // ...
    .s(s_subspace) // string subspace = 1
    .S(a_keys) // string[] keys = 2
    .o;
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQueryParamsRequest}
 */
export const decodeCosmosParamsQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQueryParamsResponse}
 */
export const decodeCosmosParamsQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosParamsParamChange]);
/**
 * Decodes a protobuf QuerySubspacesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQuerySubspacesRequest}
 */
export const decodeCosmosParamsQuerySubspacesRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QuerySubspaces message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsQuerySubspacesResponse}
 */
export const decodeCosmosParamsQuerySubspacesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosParamsSubspace]);
/**
 * Decodes a protobuf Subspace message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosParamsSubspace}
 */
export const decodeCosmosParamsSubspace = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Destructures the fields of a {@link CosmosParamsQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspace - defines the module to query the parameter for.
 *   - 1: key - defines the key of the parameter in the subspace.
 */
export const destructCosmosParamsQueryParamsRequest = (g_struct) => [g_struct.subspace, g_struct.key];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_PARAMS_REQUEST = '/cosmos.params.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link CosmosParamsQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: param - defines the queried parameter.
 */
export const destructCosmosParamsQueryParamsResponse = (g_struct) => [g_struct.param];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_PARAMS_RESPONSE = '/cosmos.params.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link CosmosParamsQuerySubspacesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosParamsQuerySubspacesRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_SUBSPACES_REQUEST = '/cosmos.params.v1beta1.QuerySubspacesRequest';
/**
 * Destructures the fields of a {@link CosmosParamsQuerySubspacesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspaces -
 */
export const destructCosmosParamsQuerySubspacesResponse = (g_struct) => [g_struct.subspaces];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PARAMS_QUERY_SUBSPACES_RESPONSE = '/cosmos.params.v1beta1.QuerySubspacesResponse';
/**
 * Destructures the fields of a {@link CosmosParamsSubspace} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subspace -
 *   - 1: keys -
 */
export const destructCosmosParamsSubspace = (g_struct) => [g_struct.subspace, g_struct.keys];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PARAMS_SUBSPACE = '/cosmos.params.v1beta1.Subspace';
//# sourceMappingURL=query.js.map