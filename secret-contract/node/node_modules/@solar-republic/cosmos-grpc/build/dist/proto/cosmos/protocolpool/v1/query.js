/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseDecCoin } from '../../base/v1beta1/coin.js';
const SR_LCD_COSMOS_PROTOCOLPOOL_QUERY = '/cosmos/protocolpool/v1/community_pool';
/**
 * Queries the community pool coins.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: pool - defines community pool's coins.
 */
export const queryCosmosProtocolpoolCommunityPool = restful_grpc(() => [SR_LCD_COSMOS_PROTOCOLPOOL_QUERY]);
/**
 * Encodes a `QueryCommunityPoolRequest` protobuf message: the request type for the Query/CommunityPool RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosProtocolpoolQueryCommunityPoolRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryCommunityPoolResponse` protobuf message: the response type for the Query/CommunityPool RPC method.
 * @param a_pools - `pool`: defines community pool's coins.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosProtocolpoolQueryCommunityPoolResponse = (a_pools) => Protobuf() // ...
    .B(a_pools) // DecCoin[] pool = 1
    .o;
/**
 * Decodes a protobuf QueryCommunityPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolQueryCommunityPoolRequest}
 */
export const decodeCosmosProtocolpoolQueryCommunityPoolRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryCommunityPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosProtocolpoolQueryCommunityPoolResponse}
 */
export const decodeCosmosProtocolpoolQueryCommunityPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Destructures the fields of a {@link CosmosProtocolpoolQueryCommunityPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosProtocolpoolQueryCommunityPoolRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_QUERY_COMMUNITY_POOL_REQUEST = '/cosmos.protocolpool.v1.QueryCommunityPoolRequest';
/**
 * Destructures the fields of a {@link CosmosProtocolpoolQueryCommunityPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - defines community pool's coins.
 */
export const destructCosmosProtocolpoolQueryCommunityPoolResponse = (g_struct) => [g_struct.pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_PROTOCOLPOOL_QUERY_COMMUNITY_POOL_RESPONSE = '/cosmos.protocolpool.v1.QueryCommunityPoolResponse';
//# sourceMappingURL=query.js.map