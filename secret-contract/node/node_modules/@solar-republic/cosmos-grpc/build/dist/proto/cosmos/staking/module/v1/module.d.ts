import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedCosmosStakingModuleModule = Encoded<'/cosmos.staking.module.v1.Module'>;
/**
 * Encodes a `Module` protobuf message: the config object of the staking module.
 * @param a_hooks_orders - `hooks_order`: specifies the order of staking hooks and should be a list of module names which provide a staking hooks instance. If no order is provided, then hooks will be applied in alphabetical order of module names.
 * @param s_authority - `authority`: defines the custom module authority. If not set, defaults to the governance module.
 * @param s_bech32_prefix_validator - `bech32_prefix_validator`: the bech32 validator prefix for the app.
 * @param s_bech32_prefix_consensus - `bech32_prefix_consensus`: the bech32 consensus node prefix for the app.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingModuleModule: (a_hooks_orders?: Opt<string[]>, s_authority?: Opt<string>, s_bech32_prefix_validator?: Opt<string>, s_bech32_prefix_consensus?: Opt<string>) => EncodedCosmosStakingModuleModule;
/**
 * A decoded protobuf Module message
 *
 * Tuple where:
 *   - 0: hooks_order - specifies the order of staking hooks and should be a list of module names which provide a staking hooks instance. If no order is provided, then hooks will be applied in alphabetical order of module names.
 *   - 1: authority - defines the custom module authority. If not set, defaults to the governance module.
 *   - 2: bech32_prefix_validator - the bech32 validator prefix for the app.
 *   - 3: bech32_prefix_consensus - the bech32 consensus node prefix for the app.
 */
export type DecodedCosmosStakingModuleModule = [
    a_hooks_orders?: string[],
    s_authority?: string,
    s_bech32_prefix_validator?: string,
    s_bech32_prefix_consensus?: string
];
/**
 * Decodes a protobuf Module message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingModuleModule}
 */
export declare const decodeCosmosStakingModuleModule: (atu8_payload: Uint8Array) => DecodedCosmosStakingModuleModule;
/**
 * Destructures the fields of a {@link CosmosStakingModuleModule} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hooks_order - specifies the order of staking hooks and should be a list of module names which provide a staking hooks instance. If no order is provided, then hooks will be applied in alphabetical order of module names.
 *   - 1: authority - defines the custom module authority. If not set, defaults to the governance module.
 *   - 2: bech32_prefix_validator - the bech32 validator prefix for the app.
 *   - 3: bech32_prefix_consensus - the bech32 consensus node prefix for the app.
 */
export declare const destructCosmosStakingModuleModule: (g_struct: CosmosStakingModuleModule) => [hooks_order?: string[], authority?: string, bech32_prefix_validator?: string, bech32_prefix_consensus?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_MODULE_MODULE = "/cosmos.staking.module.v1.Module";
/**
 * JSON serialization of `cosmos.staking.module.v1.Module` - the config object of the staking module.
 */
export type CosmosStakingModuleModule = {
    hooks_order?: string[] | undefined;
    authority?: string | undefined;
    bech32_prefix_validator?: string | undefined;
    bech32_prefix_consensus?: string | undefined;
};
