import type { WeakInt64Str, WeakAccountAddr, CwInt64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosStakingParams, DecodedCosmosStakingParams, CosmosStakingValidator, DecodedCosmosStakingValidator, CosmosStakingDelegation, DecodedCosmosStakingDelegation, CosmosStakingUnbondingDelegation, DecodedCosmosStakingUnbondingDelegation, CosmosStakingRedelegation, DecodedCosmosStakingRedelegation } from './staking.js';
export type EncodedCosmosStakingGenesisState = Encoded<'/cosmos.staking.v1beta1.GenesisState'>;
export type EncodedCosmosStakingLastValidatorPower = Encoded<'/cosmos.staking.v1beta1.LastValidatorPower'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the staking module's genesis state.
 * @param g_params - `params`: defines all the parameters of related to deposit.
 * @param atu8_last_total_power - `last_total_power`: tracks the total amounts of bonded tokens recorded during the previous end block.
 * @param a_last_validator_powers - `last_validator_powers`: a special index that provides a historical list of the last-block's bonded validators.
 * @param a_validators - `validators`: defines the validator set at genesis.
 * @param a_delegations - `delegations`: defines the delegations active at genesis.
 * @param a_unbonding_delegations - `unbonding_delegations`: defines the unbonding delegations active at genesis.
 * @param a_redelegations - `redelegations`: defines the redelegations active at genesis.
 * @param b_exported - `exported`: defines a bool to identify whether the chain dealing with exported or initialized genesis.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingGenesisState: (atu8_params?: Opt<Encoded<'/cosmos.staking.v1beta1.Params'>>, atu8_last_total_power?: Opt<Uint8Array>, a_last_validator_powers?: Opt<Encoded<'/cosmos.staking.v1beta1.LastValidatorPower'>[]>, a_validators?: Opt<Encoded<'/cosmos.staking.v1beta1.Validator'>[]>, a_delegations?: Opt<Encoded<'/cosmos.staking.v1beta1.Delegation'>[]>, a_unbonding_delegations?: Opt<Encoded<'/cosmos.staking.v1beta1.UnbondingDelegation'>[]>, a_redelegations?: Opt<Encoded<'/cosmos.staking.v1beta1.Redelegation'>[]>, b_exported?: Opt<boolean | 0 | 1>) => EncodedCosmosStakingGenesisState;
/**
 * Encodes a `LastValidatorPower` protobuf message: required for validator set update logic.
 * @param sa_address - `address`: the address of the validator.
 * @param sg_power - `power`: defines the power of the validator.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingLastValidatorPower: (sa_address?: Opt<WeakAccountAddr>, sg_power?: Opt<WeakInt64Str>) => EncodedCosmosStakingLastValidatorPower;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - defines all the parameters of related to deposit.
 *   - 1: last_total_power - tracks the total amounts of bonded tokens recorded during the previous end block.
 *   - 2: last_validator_powers - a special index that provides a historical list of the last-block's bonded validators.
 *   - 3: validators - defines the validator set at genesis.
 *   - 4: delegations - defines the delegations active at genesis.
 *   - 5: unbonding_delegations - defines the unbonding delegations active at genesis.
 *   - 6: redelegations - defines the redelegations active at genesis.
 *   - 7: exported - defines a bool to identify whether the chain dealing with exported or initialized genesis.
 */
export type DecodedCosmosStakingGenesisState = [
    a_params?: DecodedCosmosStakingParams,
    atu8_last_total_power?: Uint8Array,
    a_last_validator_powers?: DecodedCosmosStakingLastValidatorPower[],
    a_validators?: DecodedCosmosStakingValidator[],
    a_delegations?: DecodedCosmosStakingDelegation[],
    a_unbonding_delegations?: DecodedCosmosStakingUnbondingDelegation[],
    a_redelegations?: DecodedCosmosStakingRedelegation[],
    b_exported?: 0 | 1
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingGenesisState}
 */
export declare const decodeCosmosStakingGenesisState: (atu8_payload: Uint8Array) => DecodedCosmosStakingGenesisState;
/**
 * A decoded protobuf LastValidatorPower message
 *
 * Tuple where:
 *   - 0: address - the address of the validator.
 *   - 1: power - defines the power of the validator.
 */
export type DecodedCosmosStakingLastValidatorPower = [
    sa_address?: CwAccountAddr,
    sg_power?: CwInt64
];
/**
 * Decodes a protobuf LastValidatorPower message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingLastValidatorPower}
 */
export declare const decodeCosmosStakingLastValidatorPower: (atu8_payload: Uint8Array) => DecodedCosmosStakingLastValidatorPower;
/**
 * Destructures the fields of a {@link CosmosStakingGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines all the parameters of related to deposit.
 *   - 1: last_total_power - tracks the total amounts of bonded tokens recorded during the previous end block.
 *   - 2: last_validator_powers - a special index that provides a historical list of the last-block's bonded validators.
 *   - 3: validators - defines the validator set at genesis.
 *   - 4: delegations - defines the delegations active at genesis.
 *   - 5: unbonding_delegations - defines the unbonding delegations active at genesis.
 *   - 6: redelegations - defines the redelegations active at genesis.
 *   - 7: exported - defines a bool to identify whether the chain dealing with exported or initialized genesis.
 */
export declare const destructCosmosStakingGenesisState: (g_struct: CosmosStakingGenesisState) => [params?: CosmosStakingParams, last_total_power?: Uint8Array, last_validator_powers?: CosmosStakingLastValidatorPower[], validators?: CosmosStakingValidator[], delegations?: CosmosStakingDelegation[], unbonding_delegations?: CosmosStakingUnbondingDelegation[], redelegations?: CosmosStakingRedelegation[], exported?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_GENESIS_STATE = "/cosmos.staking.v1beta1.GenesisState";
/**
 * JSON serialization of `cosmos.staking.v1beta1.GenesisState` - defines the staking module's genesis state.
 */
export type CosmosStakingGenesisState = {
    params?: CosmosStakingParams | undefined;
    last_total_power?: CwBase64 | undefined;
    last_validator_powers?: CosmosStakingLastValidatorPower[] | undefined;
    validators?: CosmosStakingValidator[] | undefined;
    delegations?: CosmosStakingDelegation[] | undefined;
    unbonding_delegations?: CosmosStakingUnbondingDelegation[] | undefined;
    redelegations?: CosmosStakingRedelegation[] | undefined;
    exported?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingLastValidatorPower} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - the address of the validator.
 *   - 1: power - defines the power of the validator.
 */
export declare const destructCosmosStakingLastValidatorPower: (g_struct: CosmosStakingLastValidatorPower) => [address?: CwAccountAddr, power?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_LAST_VALIDATOR_POWER = "/cosmos.staking.v1beta1.LastValidatorPower";
/**
 * JSON serialization of `cosmos.staking.v1beta1.LastValidatorPower` - required for validator set update logic.
 */
export type CosmosStakingLastValidatorPower = {
    address?: CwAccountAddr | undefined;
    power?: CwInt64 | undefined;
};
