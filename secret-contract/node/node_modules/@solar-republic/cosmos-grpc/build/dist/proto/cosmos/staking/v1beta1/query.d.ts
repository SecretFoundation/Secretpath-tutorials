/// <reference types="node" />
import type { WeakInt64Str, WeakAccountAddr, WeakValidatorAddr, CwInt64, CwAccountAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../base/query/v1beta1/pagination.js';
import type { CosmosStakingValidator, DecodedCosmosStakingValidator, CosmosStakingDelegationResponse, DecodedCosmosStakingDelegationResponse, CosmosStakingUnbondingDelegation, DecodedCosmosStakingUnbondingDelegation, CosmosStakingRedelegationResponse, DecodedCosmosStakingRedelegationResponse, CosmosStakingHistoricalInfo, DecodedCosmosStakingHistoricalInfo, CosmosStakingHistoricalRecord, DecodedCosmosStakingHistoricalRecord, CosmosStakingPool, DecodedCosmosStakingPool, CosmosStakingParams, DecodedCosmosStakingParams } from './staking.js';
export type EncodedCosmosStakingQueryValidatorsRequest = Encoded<'/cosmos.staking.v1beta1.QueryValidatorsRequest'>;
export type EncodedCosmosStakingQueryValidatorsResponse = Encoded<'/cosmos.staking.v1beta1.QueryValidatorsResponse'>;
export type EncodedCosmosStakingQueryValidatorRequest = Encoded<'/cosmos.staking.v1beta1.QueryValidatorRequest'>;
export type EncodedCosmosStakingQueryValidatorResponse = Encoded<'/cosmos.staking.v1beta1.QueryValidatorResponse'>;
export type EncodedCosmosStakingQueryValidatorDelegationsRequest = Encoded<'/cosmos.staking.v1beta1.QueryValidatorDelegationsRequest'>;
export type EncodedCosmosStakingQueryValidatorDelegationsResponse = Encoded<'/cosmos.staking.v1beta1.QueryValidatorDelegationsResponse'>;
export type EncodedCosmosStakingQueryValidatorUnbondingDelegationsRequest = Encoded<'/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest'>;
export type EncodedCosmosStakingQueryValidatorUnbondingDelegationsResponse = Encoded<'/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse'>;
export type EncodedCosmosStakingQueryDelegationRequest = Encoded<'/cosmos.staking.v1beta1.QueryDelegationRequest'>;
export type EncodedCosmosStakingQueryDelegationResponse = Encoded<'/cosmos.staking.v1beta1.QueryDelegationResponse'>;
export type EncodedCosmosStakingQueryUnbondingDelegationRequest = Encoded<'/cosmos.staking.v1beta1.QueryUnbondingDelegationRequest'>;
export type EncodedCosmosStakingQueryUnbondingDelegationResponse = Encoded<'/cosmos.staking.v1beta1.QueryUnbondingDelegationResponse'>;
export type EncodedCosmosStakingQueryDelegatorDelegationsRequest = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest'>;
export type EncodedCosmosStakingQueryDelegatorDelegationsResponse = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse'>;
export type EncodedCosmosStakingQueryDelegatorUnbondingDelegationsRequest = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest'>;
export type EncodedCosmosStakingQueryDelegatorUnbondingDelegationsResponse = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse'>;
export type EncodedCosmosStakingQueryRedelegationsRequest = Encoded<'/cosmos.staking.v1beta1.QueryRedelegationsRequest'>;
export type EncodedCosmosStakingQueryRedelegationsResponse = Encoded<'/cosmos.staking.v1beta1.QueryRedelegationsResponse'>;
export type EncodedCosmosStakingQueryDelegatorValidatorsRequest = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest'>;
export type EncodedCosmosStakingQueryDelegatorValidatorsResponse = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse'>;
export type EncodedCosmosStakingQueryDelegatorValidatorRequest = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorValidatorRequest'>;
export type EncodedCosmosStakingQueryDelegatorValidatorResponse = Encoded<'/cosmos.staking.v1beta1.QueryDelegatorValidatorResponse'>;
export type EncodedCosmosStakingQueryHistoricalInfoRequest = Encoded<'/cosmos.staking.v1beta1.QueryHistoricalInfoRequest'>;
export type EncodedCosmosStakingQueryHistoricalInfoResponse = Encoded<'/cosmos.staking.v1beta1.QueryHistoricalInfoResponse'>;
export type EncodedCosmosStakingQueryPoolRequest = Encoded<'/cosmos.staking.v1beta1.QueryPoolRequest'>;
export type EncodedCosmosStakingQueryPoolResponse = Encoded<'/cosmos.staking.v1beta1.QueryPoolResponse'>;
export type EncodedCosmosStakingQueryParamsRequest = Encoded<'/cosmos.staking.v1beta1.QueryParamsRequest'>;
export type EncodedCosmosStakingQueryParamsResponse = Encoded<'/cosmos.staking.v1beta1.QueryParamsResponse'>;
/**
 * Queries all validators that match the given status. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_status - enables to query for validators matching a given status.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: validators - contains all the queried validators.
 *   - 1: pagination - contains all the queried validators.
 */
export declare const queryCosmosStakingValidators: (z_req: string | ({
    origin: string;
} & RequestInit), s_status?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryValidatorsResponse>>;
/**
 * Queries validator info for given validator address.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export declare const queryCosmosStakingValidator: (z_req: string | ({
    origin: string;
} & RequestInit), sa_validator?: Opt<`${string}valoper1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryValidatorResponse>>;
/**
 * Queries delegate info for given validator. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: delegation_responses - the 'delegation_responses' response property
 *   - 1: pagination - the 'delegation_responses' response property
 */
export declare const queryCosmosStakingValidatorDelegations: (z_req: string | ({
    origin: string;
} & RequestInit), sa_validator?: Opt<`${string}valoper1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryValidatorDelegationsResponse>>;
/**
 * Queries unbonding delegations of a validator. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_validator - defines the validator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: unbonding_responses - the 'unbonding_responses' response property
 *   - 1: pagination - the 'unbonding_responses' response property
 */
export declare const queryCosmosStakingValidatorUnbondingDelegations: (z_req: string | ({
    origin: string;
} & RequestInit), sa_validator?: Opt<`${string}valoper1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryValidatorUnbondingDelegationsResponse>>;
/**
 * Queries delegate info for given validator delegator pair.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: delegation_response - s defines the delegation info of a delegation.
 */
export declare const queryCosmosStakingDelegation: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, sa_validator?: Opt<`${string}valoper1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryDelegationResponse>>;
/**
 * Queries unbonding info for given validator delegator pair.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: unbond - defines the unbonding information of a delegation.
 */
export declare const queryCosmosStakingUnbondingDelegation: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, sa_validator?: Opt<`${string}valoper1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryUnbondingDelegationResponse>>;
/**
 * Queries all delegations of a given delegator address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: delegation_responses - defines all the delegations' info of a delegator.
 *   - 1: pagination - defines all the delegations' info of a delegator.
 */
export declare const queryCosmosStakingDelegatorDelegations: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryDelegatorDelegationsResponse>>;
/**
 * Queries all unbonding delegations of a given delegator address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: unbonding_responses - the 'unbonding_responses' response property
 *   - 1: pagination - the 'unbonding_responses' response property
 */
export declare const queryCosmosStakingDelegatorUnbondingDelegations: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryDelegatorUnbondingDelegationsResponse>>;
/**
 * Queries redelegations of given address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_src_validator - defines the validator address to redelegate from.
 * @param sa_dst_validator - defines the validator address to redelegate to.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: redelegation_responses - the 'redelegation_responses' response property
 *   - 1: pagination - the 'redelegation_responses' response property
 */
export declare const queryCosmosStakingRedelegations: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, sa_src_validator?: Opt<`${string}valoper1${string}`>, sa_dst_validator?: Opt<`${string}valoper1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryRedelegationsResponse>>;
/**
 * Queries all validators info for given delegator address. When called from another module, this query might consume a high amount of gas if the pagination field is incorrectly set.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: validators - defines the validators' info of a delegator.
 *   - 1: pagination - defines the validators' info of a delegator.
 */
export declare const queryCosmosStakingDelegatorValidators: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryDelegatorValidatorsResponse>>;
/**
 * Queries validator info for given delegator validator pair.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_delegator_addr - defines the delegator address to query for.
 * @param sa_validator - defines the validator address to query for.
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export declare const queryCosmosStakingDelegatorValidator: (z_req: string | ({
    origin: string;
} & RequestInit), sa_delegator_addr?: Opt<`${string}1${string}`>, sa_validator?: Opt<`${string}valoper1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryDelegatorValidatorResponse>>;
/**
 * Queries the historical info for given height.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_height - defines at which height to query the historical info.
 * @returns a tuple where:
 *   - 0: hist - defines the historical info at the given height.
 *   - 1: historical_record - defines the historical info at the given height.
 */
export declare const queryCosmosStakingHistoricalInfo: (z_req: string | ({
    origin: string;
} & RequestInit), sg_height?: Opt<`${bigint}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryHistoricalInfoResponse>>;
/**
 * Queries the pool info.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: pool - defines the pool info.
 */
export declare const queryCosmosStakingPool: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryPoolResponse>>;
/**
 * Parameters queries the staking parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export declare const queryCosmosStakingParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<CosmosStakingQueryParamsResponse>>;
/**
 * Encodes a `QueryValidatorsRequest` protobuf message: request type for Query/Validators RPC method.
 * @param s_status - `status`: enables to query for validators matching a given status.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorsRequest: (s_status?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryValidatorsRequest;
/**
 * Encodes a `QueryValidatorsResponse` protobuf message: response type for the Query/Validators RPC method
 * @param a_validators - `validators`: contains all the queried validators.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorsResponse: (a_validators?: Opt<Encoded<'/cosmos.staking.v1beta1.Validator'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryValidatorsResponse;
/**
 * Encodes a `QueryValidatorRequest` protobuf message: response type for the Query/Validator RPC method
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorRequest: (sa_validator?: Opt<WeakValidatorAddr>) => EncodedCosmosStakingQueryValidatorRequest;
/**
 * Encodes a `QueryValidatorResponse` protobuf message: response type for the Query/Validator RPC method
 * @param g_validator - `validator`: defines the validator info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorResponse: (atu8_validator?: Opt<Encoded<'/cosmos.staking.v1beta1.Validator'>>) => EncodedCosmosStakingQueryValidatorResponse;
/**
 * Encodes a `QueryValidatorDelegationsRequest` protobuf message: request type for the Query/ValidatorDelegations RPC method
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorDelegationsRequest: (sa_validator?: Opt<WeakValidatorAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryValidatorDelegationsRequest;
/**
 * Encodes a `QueryValidatorDelegationsResponse` protobuf message: response type for the Query/ValidatorDelegations RPC method
 * @param a_delegation_responses - `delegation_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorDelegationsResponse: (a_delegation_responses?: Opt<Encoded<'/cosmos.staking.v1beta1.DelegationResponse'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryValidatorDelegationsResponse;
/**
 * Encodes a `QueryValidatorUnbondingDelegationsRequest` protobuf message: required type for the Query/ValidatorUnbondingDelegations RPC method
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorUnbondingDelegationsRequest: (sa_validator?: Opt<WeakValidatorAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryValidatorUnbondingDelegationsRequest;
/**
 * Encodes a `QueryValidatorUnbondingDelegationsResponse` protobuf message: response type for the Query/ValidatorUnbondingDelegations RPC method.
 * @param a_unbonding_responses - `unbonding_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryValidatorUnbondingDelegationsResponse: (a_unbonding_responses?: Opt<Encoded<'/cosmos.staking.v1beta1.UnbondingDelegation'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryValidatorUnbondingDelegationsResponse;
/**
 * Encodes a `QueryDelegationRequest` protobuf message: request type for the Query/Delegation RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegationRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>) => EncodedCosmosStakingQueryDelegationRequest;
/**
 * Encodes a `QueryDelegationResponse` protobuf message: response type for the Query/Delegation RPC method.
 * @param g_delegation_response - `delegation_response`: s defines the delegation info of a delegation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegationResponse: (atu8_delegation_response?: Opt<Encoded<'/cosmos.staking.v1beta1.DelegationResponse'>>) => EncodedCosmosStakingQueryDelegationResponse;
/**
 * Encodes a `QueryUnbondingDelegationRequest` protobuf message: request type for the Query/UnbondingDelegation RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryUnbondingDelegationRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>) => EncodedCosmosStakingQueryUnbondingDelegationRequest;
/**
 * Encodes a `QueryUnbondingDelegationResponse` protobuf message: QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 * @param g_unbond - `unbond`: defines the unbonding information of a delegation.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryUnbondingDelegationResponse: (atu8_unbond?: Opt<Encoded<'/cosmos.staking.v1beta1.UnbondingDelegation'>>) => EncodedCosmosStakingQueryUnbondingDelegationResponse;
/**
 * Encodes a `QueryDelegatorDelegationsRequest` protobuf message: request type for the Query/DelegatorDelegations RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorDelegationsRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryDelegatorDelegationsRequest;
/**
 * Encodes a `QueryDelegatorDelegationsResponse` protobuf message: response type for the Query/DelegatorDelegations RPC method.
 * @param a_delegation_responses - `delegation_responses`: defines all the delegations' info of a delegator.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorDelegationsResponse: (a_delegation_responses?: Opt<Encoded<'/cosmos.staking.v1beta1.DelegationResponse'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryDelegatorDelegationsResponse;
/**
 * Encodes a `QueryDelegatorUnbondingDelegationsRequest` protobuf message: request type for the Query/DelegatorUnbondingDelegations RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorUnbondingDelegationsRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryDelegatorUnbondingDelegationsRequest;
/**
 * Encodes a `QueryDelegatorUnbondingDelegationsResponse` protobuf message: QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 * @param a_unbonding_responses - `unbonding_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorUnbondingDelegationsResponse: (a_unbonding_responses?: Opt<Encoded<'/cosmos.staking.v1beta1.UnbondingDelegation'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryDelegatorUnbondingDelegationsResponse;
/**
 * Encodes a `QueryRedelegationsRequest` protobuf message: request type for the Query/Redelegations RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_src_validator - `src_validator_addr`: defines the validator address to redelegate from.
 * @param sa_dst_validator - `dst_validator_addr`: defines the validator address to redelegate to.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryRedelegationsRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, sa_src_validator?: Opt<WeakValidatorAddr>, sa_dst_validator?: Opt<WeakValidatorAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryRedelegationsRequest;
/**
 * Encodes a `QueryRedelegationsResponse` protobuf message: response type for the Query/Redelegations RPC method.
 * @param a_redelegation_responses - `redelegation_responses`:
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryRedelegationsResponse: (a_redelegation_responses?: Opt<Encoded<'/cosmos.staking.v1beta1.RedelegationResponse'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryRedelegationsResponse;
/**
 * Encodes a `QueryDelegatorValidatorsRequest` protobuf message: request type for the Query/DelegatorValidators RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorValidatorsRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedCosmosStakingQueryDelegatorValidatorsRequest;
/**
 * Encodes a `QueryDelegatorValidatorsResponse` protobuf message: response type for the Query/DelegatorValidators RPC method.
 * @param a_validators - `validators`: defines the validators' info of a delegator.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorValidatorsResponse: (a_validators?: Opt<Encoded<'/cosmos.staking.v1beta1.Validator'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedCosmosStakingQueryDelegatorValidatorsResponse;
/**
 * Encodes a `QueryDelegatorValidatorRequest` protobuf message: request type for the Query/DelegatorValidator RPC method.
 * @param sa_delegator_addr - `delegator_addr`: defines the delegator address to query for.
 * @param sa_validator - `validator_addr`: defines the validator address to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorValidatorRequest: (sa_delegator_addr?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>) => EncodedCosmosStakingQueryDelegatorValidatorRequest;
/**
 * Encodes a `QueryDelegatorValidatorResponse` protobuf message: response type for the Query/DelegatorValidator RPC method.
 * @param g_validator - `validator`: defines the validator info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryDelegatorValidatorResponse: (atu8_validator?: Opt<Encoded<'/cosmos.staking.v1beta1.Validator'>>) => EncodedCosmosStakingQueryDelegatorValidatorResponse;
/**
 * Encodes a `QueryHistoricalInfoRequest` protobuf message: request type for the Query/HistoricalInfo RPC method.
 * @param sg_height - `height`: defines at which height to query the historical info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryHistoricalInfoRequest: (sg_height?: Opt<WeakInt64Str>) => EncodedCosmosStakingQueryHistoricalInfoRequest;
/**
 * Encodes a `QueryHistoricalInfoResponse` protobuf message: response type for the Query/HistoricalInfo RPC method.
 * @param g_hist - `hist`: defines the historical info at the given height.
 * @param g_historical_record - `historical_record`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryHistoricalInfoResponse: (atu8_hist?: Opt<Encoded<'/cosmos.staking.v1beta1.HistoricalInfo'>>, atu8_historical_record?: Opt<Encoded<'/cosmos.staking.v1beta1.HistoricalRecord'>>) => EncodedCosmosStakingQueryHistoricalInfoResponse;
/**
 * Encodes a `QueryPoolRequest` protobuf message: request type for the Query/Pool RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryPoolRequest: () => EncodedCosmosStakingQueryPoolRequest;
/**
 * Encodes a `QueryPoolResponse` protobuf message: response type for the Query/Pool RPC method.
 * @param g_pool - `pool`: defines the pool info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryPoolResponse: (atu8_pool?: Opt<Encoded<'/cosmos.staking.v1beta1.Pool'>>) => EncodedCosmosStakingQueryPoolResponse;
/**
 * Encodes a `QueryParamsRequest` protobuf message: request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryParamsRequest: () => EncodedCosmosStakingQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: response type for the Query/Params RPC method.
 * @param g_params - `params`: holds all the parameters of this module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingQueryParamsResponse: (atu8_params?: Opt<Encoded<'/cosmos.staking.v1beta1.Params'>>) => EncodedCosmosStakingQueryParamsResponse;
/**
 * A decoded protobuf QueryValidatorsRequest message
 *
 * Tuple where:
 *   - 0: status - enables to query for validators matching a given status.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryValidatorsRequest = [
    s_status?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryValidatorsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorsRequest}
 */
export declare const decodeCosmosStakingQueryValidatorsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorsRequest;
/**
 * A decoded protobuf QueryValidators message
 *
 * Tuple where:
 *   - 0: validators - contains all the queried validators.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryValidatorsResponse = [
    a_validators?: DecodedCosmosStakingValidator[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorsResponse}
 */
export declare const decodeCosmosStakingQueryValidatorsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorsResponse;
/**
 * A decoded protobuf QueryValidatorRequest message
 *
 * Alias for: validator_addr - defines the validator address to query for.
 */
export type DecodedCosmosStakingQueryValidatorRequest = [
    sa_validator?: CwValidatorAddr
];
/**
 * Decodes a protobuf QueryValidatorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorRequest}
 */
export declare const decodeCosmosStakingQueryValidatorRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorRequest;
/**
 * A decoded protobuf QueryValidator message
 *
 * Alias for: validator - defines the validator info.
 */
export type DecodedCosmosStakingQueryValidatorResponse = [
    a_validator?: DecodedCosmosStakingValidator
];
/**
 * Decodes a protobuf QueryValidator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorResponse}
 */
export declare const decodeCosmosStakingQueryValidatorResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorResponse;
/**
 * A decoded protobuf QueryValidatorDelegationsRequest message
 *
 * Tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryValidatorDelegationsRequest = [
    sa_validator?: CwValidatorAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryValidatorDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorDelegationsRequest}
 */
export declare const decodeCosmosStakingQueryValidatorDelegationsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorDelegationsRequest;
/**
 * A decoded protobuf QueryValidatorDelegations message
 *
 * Tuple where:
 *   - 0: delegation_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryValidatorDelegationsResponse = [
    a_delegation_responses?: DecodedCosmosStakingDelegationResponse[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryValidatorDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorDelegationsResponse}
 */
export declare const decodeCosmosStakingQueryValidatorDelegationsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorDelegationsResponse;
/**
 * A decoded protobuf QueryValidatorUnbondingDelegationsRequest message
 *
 * Tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryValidatorUnbondingDelegationsRequest = [
    sa_validator?: CwValidatorAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryValidatorUnbondingDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorUnbondingDelegationsRequest}
 */
export declare const decodeCosmosStakingQueryValidatorUnbondingDelegationsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorUnbondingDelegationsRequest;
/**
 * A decoded protobuf QueryValidatorUnbondingDelegations message
 *
 * Tuple where:
 *   - 0: unbonding_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryValidatorUnbondingDelegationsResponse = [
    a_unbonding_responses?: DecodedCosmosStakingUnbondingDelegation[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryValidatorUnbondingDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryValidatorUnbondingDelegationsResponse}
 */
export declare const decodeCosmosStakingQueryValidatorUnbondingDelegationsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryValidatorUnbondingDelegationsResponse;
/**
 * A decoded protobuf QueryDelegationRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export type DecodedCosmosStakingQueryDelegationRequest = [
    sa_delegator_addr?: CwAccountAddr,
    sa_validator?: CwValidatorAddr
];
/**
 * Decodes a protobuf QueryDelegationRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegationRequest}
 */
export declare const decodeCosmosStakingQueryDelegationRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegationRequest;
/**
 * A decoded protobuf QueryDelegation message
 *
 * Alias for: delegation_response - s defines the delegation info of a delegation.
 */
export type DecodedCosmosStakingQueryDelegationResponse = [
    a_delegation_response?: DecodedCosmosStakingDelegationResponse
];
/**
 * Decodes a protobuf QueryDelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegationResponse}
 */
export declare const decodeCosmosStakingQueryDelegationResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegationResponse;
/**
 * A decoded protobuf QueryUnbondingDelegationRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export type DecodedCosmosStakingQueryUnbondingDelegationRequest = [
    sa_delegator_addr?: CwAccountAddr,
    sa_validator?: CwValidatorAddr
];
/**
 * Decodes a protobuf QueryUnbondingDelegationRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryUnbondingDelegationRequest}
 */
export declare const decodeCosmosStakingQueryUnbondingDelegationRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryUnbondingDelegationRequest;
/**
 * A decoded protobuf QueryUnbondingDelegation message
 *
 * Alias for: unbond - defines the unbonding information of a delegation.
 */
export type DecodedCosmosStakingQueryUnbondingDelegationResponse = [
    a_unbond?: DecodedCosmosStakingUnbondingDelegation
];
/**
 * Decodes a protobuf QueryUnbondingDelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryUnbondingDelegationResponse}
 */
export declare const decodeCosmosStakingQueryUnbondingDelegationResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryUnbondingDelegationResponse;
/**
 * A decoded protobuf QueryDelegatorDelegationsRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryDelegatorDelegationsRequest = [
    sa_delegator_addr?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryDelegatorDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorDelegationsRequest}
 */
export declare const decodeCosmosStakingQueryDelegatorDelegationsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorDelegationsRequest;
/**
 * A decoded protobuf QueryDelegatorDelegations message
 *
 * Tuple where:
 *   - 0: delegation_responses - defines all the delegations' info of a delegator.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryDelegatorDelegationsResponse = [
    a_delegation_responses?: DecodedCosmosStakingDelegationResponse[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryDelegatorDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorDelegationsResponse}
 */
export declare const decodeCosmosStakingQueryDelegatorDelegationsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorDelegationsResponse;
/**
 * A decoded protobuf QueryDelegatorUnbondingDelegationsRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryDelegatorUnbondingDelegationsRequest = [
    sa_delegator_addr?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryDelegatorUnbondingDelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorUnbondingDelegationsRequest}
 */
export declare const decodeCosmosStakingQueryDelegatorUnbondingDelegationsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorUnbondingDelegationsRequest;
/**
 * A decoded protobuf QueryDelegatorUnbondingDelegations message
 *
 * Tuple where:
 *   - 0: unbonding_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryDelegatorUnbondingDelegationsResponse = [
    a_unbonding_responses?: DecodedCosmosStakingUnbondingDelegation[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryDelegatorUnbondingDelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorUnbondingDelegationsResponse}
 */
export declare const decodeCosmosStakingQueryDelegatorUnbondingDelegationsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorUnbondingDelegationsResponse;
/**
 * A decoded protobuf QueryRedelegationsRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: src_validator_addr - defines the validator address to redelegate from.
 *   - 2: dst_validator_addr - defines the validator address to redelegate to.
 *   - 3: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryRedelegationsRequest = [
    sa_delegator_addr?: CwAccountAddr,
    sa_src_validator?: CwValidatorAddr,
    sa_dst_validator?: CwValidatorAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryRedelegationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryRedelegationsRequest}
 */
export declare const decodeCosmosStakingQueryRedelegationsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryRedelegationsRequest;
/**
 * A decoded protobuf QueryRedelegations message
 *
 * Tuple where:
 *   - 0: redelegation_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryRedelegationsResponse = [
    a_redelegation_responses?: DecodedCosmosStakingRedelegationResponse[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryRedelegations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryRedelegationsResponse}
 */
export declare const decodeCosmosStakingQueryRedelegationsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryRedelegationsResponse;
/**
 * A decoded protobuf QueryDelegatorValidatorsRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedCosmosStakingQueryDelegatorValidatorsRequest = [
    sa_delegator_addr?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryDelegatorValidatorsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorsRequest}
 */
export declare const decodeCosmosStakingQueryDelegatorValidatorsRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorValidatorsRequest;
/**
 * A decoded protobuf QueryDelegatorValidators message
 *
 * Tuple where:
 *   - 0: validators - defines the validators' info of a delegator.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedCosmosStakingQueryDelegatorValidatorsResponse = [
    a_validators?: DecodedCosmosStakingValidator[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryDelegatorValidators message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorsResponse}
 */
export declare const decodeCosmosStakingQueryDelegatorValidatorsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorValidatorsResponse;
/**
 * A decoded protobuf QueryDelegatorValidatorRequest message
 *
 * Tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export type DecodedCosmosStakingQueryDelegatorValidatorRequest = [
    sa_delegator_addr?: CwAccountAddr,
    sa_validator?: CwValidatorAddr
];
/**
 * Decodes a protobuf QueryDelegatorValidatorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorRequest}
 */
export declare const decodeCosmosStakingQueryDelegatorValidatorRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorValidatorRequest;
/**
 * A decoded protobuf QueryDelegatorValidator message
 *
 * Alias for: validator - defines the validator info.
 */
export type DecodedCosmosStakingQueryDelegatorValidatorResponse = [
    a_validator?: DecodedCosmosStakingValidator
];
/**
 * Decodes a protobuf QueryDelegatorValidator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryDelegatorValidatorResponse}
 */
export declare const decodeCosmosStakingQueryDelegatorValidatorResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryDelegatorValidatorResponse;
/**
 * A decoded protobuf QueryHistoricalInfoRequest message
 *
 * Alias for: height - defines at which height to query the historical info.
 */
export type DecodedCosmosStakingQueryHistoricalInfoRequest = [
    sg_height?: CwInt64
];
/**
 * Decodes a protobuf QueryHistoricalInfoRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryHistoricalInfoRequest}
 */
export declare const decodeCosmosStakingQueryHistoricalInfoRequest: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryHistoricalInfoRequest;
/**
 * A decoded protobuf QueryHistoricalInfo message
 *
 * Tuple where:
 *   - 0: hist - defines the historical info at the given height.
 *   - 1: historical_record -
 */
export type DecodedCosmosStakingQueryHistoricalInfoResponse = [
    a_hist?: DecodedCosmosStakingHistoricalInfo,
    a_historical_record?: DecodedCosmosStakingHistoricalRecord
];
/**
 * Decodes a protobuf QueryHistoricalInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryHistoricalInfoResponse}
 */
export declare const decodeCosmosStakingQueryHistoricalInfoResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryHistoricalInfoResponse;
/**
 * A decoded protobuf QueryPoolRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosStakingQueryPoolRequest = [];
/**
 * Decodes a protobuf QueryPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryPoolRequest}
 */
export declare const decodeCosmosStakingQueryPoolRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryPool message
 *
 * Alias for: pool - defines the pool info.
 */
export type DecodedCosmosStakingQueryPoolResponse = [
    a_pool?: DecodedCosmosStakingPool
];
/**
 * Decodes a protobuf QueryPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryPoolResponse}
 */
export declare const decodeCosmosStakingQueryPoolResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryPoolResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedCosmosStakingQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryParamsRequest}
 */
export declare const decodeCosmosStakingQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - holds all the parameters of this module.
 */
export type DecodedCosmosStakingQueryParamsResponse = [
    a_params?: DecodedCosmosStakingParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingQueryParamsResponse}
 */
export declare const decodeCosmosStakingQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingQueryParamsResponse;
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: status - enables to query for validators matching a given status.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryValidatorsRequest: (g_struct: CosmosStakingQueryValidatorsRequest) => [status?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATORS_REQUEST = "/cosmos.staking.v1beta1.QueryValidatorsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorsRequest` - request type for Query/Validators RPC method.
 */
export type CosmosStakingQueryValidatorsRequest = {
    status?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators - contains all the queried validators.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryValidatorsResponse: (g_struct: CosmosStakingQueryValidatorsResponse) => [validators?: CosmosStakingValidator[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATORS_RESPONSE = "/cosmos.staking.v1beta1.QueryValidatorsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorsResponse` - response type for the Query/Validators RPC method
 */
export type CosmosStakingQueryValidatorsResponse = {
    validators?: CosmosStakingValidator[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 */
export declare const destructCosmosStakingQueryValidatorRequest: (g_struct: CosmosStakingQueryValidatorRequest) => [validator_addr?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_REQUEST = "/cosmos.staking.v1beta1.QueryValidatorRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorRequest` - response type for the Query/Validator RPC method
 */
export type CosmosStakingQueryValidatorRequest = {
    validator_addr?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export declare const destructCosmosStakingQueryValidatorResponse: (g_struct: CosmosStakingQueryValidatorResponse) => [validator?: CosmosStakingValidator];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_RESPONSE = "/cosmos.staking.v1beta1.QueryValidatorResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorResponse` - response type for the Query/Validator RPC method
 */
export type CosmosStakingQueryValidatorResponse = {
    validator?: CosmosStakingValidator | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryValidatorDelegationsRequest: (g_struct: CosmosStakingQueryValidatorDelegationsRequest) => [validator_addr?: CwValidatorAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_DELEGATIONS_REQUEST = "/cosmos.staking.v1beta1.QueryValidatorDelegationsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorDelegationsRequest` - request type for the Query/ValidatorDelegations RPC method
 */
export type CosmosStakingQueryValidatorDelegationsRequest = {
    validator_addr?: CwValidatorAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryValidatorDelegationsResponse: (g_struct: CosmosStakingQueryValidatorDelegationsResponse) => [delegation_responses?: CosmosStakingDelegationResponse[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_DELEGATIONS_RESPONSE = "/cosmos.staking.v1beta1.QueryValidatorDelegationsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorDelegationsResponse` - response type for the Query/ValidatorDelegations RPC method
 */
export type CosmosStakingQueryValidatorDelegationsResponse = {
    delegation_responses?: CosmosStakingDelegationResponse[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorUnbondingDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_addr - defines the validator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryValidatorUnbondingDelegationsRequest: (g_struct: CosmosStakingQueryValidatorUnbondingDelegationsRequest) => [validator_addr?: CwValidatorAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_UNBONDING_DELEGATIONS_REQUEST = "/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsRequest` - required type for the Query/ValidatorUnbondingDelegations RPC method
 */
export type CosmosStakingQueryValidatorUnbondingDelegationsRequest = {
    validator_addr?: CwValidatorAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryValidatorUnbondingDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbonding_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryValidatorUnbondingDelegationsResponse: (g_struct: CosmosStakingQueryValidatorUnbondingDelegationsResponse) => [unbonding_responses?: CosmosStakingUnbondingDelegation[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_VALIDATOR_UNBONDING_DELEGATIONS_RESPONSE = "/cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse` - response type for the Query/ValidatorUnbondingDelegations RPC method.
 */
export type CosmosStakingQueryValidatorUnbondingDelegationsResponse = {
    unbonding_responses?: CosmosStakingUnbondingDelegation[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegationRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export declare const destructCosmosStakingQueryDelegationRequest: (g_struct: CosmosStakingQueryDelegationRequest) => [delegator_addr?: CwAccountAddr, validator_addr?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATION_REQUEST = "/cosmos.staking.v1beta1.QueryDelegationRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegationRequest` - request type for the Query/Delegation RPC method.
 */
export type CosmosStakingQueryDelegationRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    validator_addr?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation_response - s defines the delegation info of a delegation.
 */
export declare const destructCosmosStakingQueryDelegationResponse: (g_struct: CosmosStakingQueryDelegationResponse) => [delegation_response?: CosmosStakingDelegationResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATION_RESPONSE = "/cosmos.staking.v1beta1.QueryDelegationResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegationResponse` - response type for the Query/Delegation RPC method.
 */
export type CosmosStakingQueryDelegationResponse = {
    delegation_response?: CosmosStakingDelegationResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryUnbondingDelegationRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export declare const destructCosmosStakingQueryUnbondingDelegationRequest: (g_struct: CosmosStakingQueryUnbondingDelegationRequest) => [delegator_addr?: CwAccountAddr, validator_addr?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_UNBONDING_DELEGATION_REQUEST = "/cosmos.staking.v1beta1.QueryUnbondingDelegationRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryUnbondingDelegationRequest` - request type for the Query/UnbondingDelegation RPC method.
 */
export type CosmosStakingQueryUnbondingDelegationRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    validator_addr?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryUnbondingDelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbond - defines the unbonding information of a delegation.
 */
export declare const destructCosmosStakingQueryUnbondingDelegationResponse: (g_struct: CosmosStakingQueryUnbondingDelegationResponse) => [unbond?: CosmosStakingUnbondingDelegation];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_UNBONDING_DELEGATION_RESPONSE = "/cosmos.staking.v1beta1.QueryUnbondingDelegationResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryUnbondingDelegationResponse` - QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 */
export type CosmosStakingQueryUnbondingDelegationResponse = {
    unbond?: CosmosStakingUnbondingDelegation | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryDelegatorDelegationsRequest: (g_struct: CosmosStakingQueryDelegatorDelegationsRequest) => [delegator_addr?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_DELEGATIONS_REQUEST = "/cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorDelegationsRequest` - request type for the Query/DelegatorDelegations RPC method.
 */
export type CosmosStakingQueryDelegatorDelegationsRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation_responses - defines all the delegations' info of a delegator.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryDelegatorDelegationsResponse: (g_struct: CosmosStakingQueryDelegatorDelegationsResponse) => [delegation_responses?: CosmosStakingDelegationResponse[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_DELEGATIONS_RESPONSE = "/cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse` - response type for the Query/DelegatorDelegations RPC method.
 */
export type CosmosStakingQueryDelegatorDelegationsResponse = {
    delegation_responses?: CosmosStakingDelegationResponse[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorUnbondingDelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryDelegatorUnbondingDelegationsRequest: (g_struct: CosmosStakingQueryDelegatorUnbondingDelegationsRequest) => [delegator_addr?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_UNBONDING_DELEGATIONS_REQUEST = "/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsRequest` - request type for the Query/DelegatorUnbondingDelegations RPC method.
 */
export type CosmosStakingQueryDelegatorUnbondingDelegationsRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorUnbondingDelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbonding_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryDelegatorUnbondingDelegationsResponse: (g_struct: CosmosStakingQueryDelegatorUnbondingDelegationsResponse) => [unbonding_responses?: CosmosStakingUnbondingDelegation[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_UNBONDING_DELEGATIONS_RESPONSE = "/cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse` - QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 */
export type CosmosStakingQueryDelegatorUnbondingDelegationsResponse = {
    unbonding_responses?: CosmosStakingUnbondingDelegation[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryRedelegationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: src_validator_addr - defines the validator address to redelegate from.
 *   - 2: dst_validator_addr - defines the validator address to redelegate to.
 *   - 3: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryRedelegationsRequest: (g_struct: CosmosStakingQueryRedelegationsRequest) => [delegator_addr?: CwAccountAddr, src_validator_addr?: CwValidatorAddr, dst_validator_addr?: CwValidatorAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_REDELEGATIONS_REQUEST = "/cosmos.staking.v1beta1.QueryRedelegationsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryRedelegationsRequest` - request type for the Query/Redelegations RPC method.
 */
export type CosmosStakingQueryRedelegationsRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    src_validator_addr?: CwValidatorAddr | undefined;
    dst_validator_addr?: CwValidatorAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryRedelegationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: redelegation_responses -
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryRedelegationsResponse: (g_struct: CosmosStakingQueryRedelegationsResponse) => [redelegation_responses?: CosmosStakingRedelegationResponse[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_REDELEGATIONS_RESPONSE = "/cosmos.staking.v1beta1.QueryRedelegationsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryRedelegationsResponse` - response type for the Query/Redelegations RPC method.
 */
export type CosmosStakingQueryRedelegationsResponse = {
    redelegation_responses?: CosmosStakingRedelegationResponse[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructCosmosStakingQueryDelegatorValidatorsRequest: (g_struct: CosmosStakingQueryDelegatorValidatorsRequest) => [delegator_addr?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATORS_REQUEST = "/cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorValidatorsRequest` - request type for the Query/DelegatorValidators RPC method.
 */
export type CosmosStakingQueryDelegatorValidatorsRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validators - defines the validators' info of a delegator.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructCosmosStakingQueryDelegatorValidatorsResponse: (g_struct: CosmosStakingQueryDelegatorValidatorsResponse) => [validators?: CosmosStakingValidator[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATORS_RESPONSE = "/cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse` - response type for the Query/DelegatorValidators RPC method.
 */
export type CosmosStakingQueryDelegatorValidatorsResponse = {
    validators?: CosmosStakingValidator[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_addr - defines the delegator address to query for.
 *   - 1: validator_addr - defines the validator address to query for.
 */
export declare const destructCosmosStakingQueryDelegatorValidatorRequest: (g_struct: CosmosStakingQueryDelegatorValidatorRequest) => [delegator_addr?: CwAccountAddr, validator_addr?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATOR_REQUEST = "/cosmos.staking.v1beta1.QueryDelegatorValidatorRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorValidatorRequest` - request type for the Query/DelegatorValidator RPC method.
 */
export type CosmosStakingQueryDelegatorValidatorRequest = {
    delegator_addr?: CwAccountAddr | undefined;
    validator_addr?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryDelegatorValidatorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator - defines the validator info.
 */
export declare const destructCosmosStakingQueryDelegatorValidatorResponse: (g_struct: CosmosStakingQueryDelegatorValidatorResponse) => [validator?: CosmosStakingValidator];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_DELEGATOR_VALIDATOR_RESPONSE = "/cosmos.staking.v1beta1.QueryDelegatorValidatorResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryDelegatorValidatorResponse` - response type for the Query/DelegatorValidator RPC method.
 */
export type CosmosStakingQueryDelegatorValidatorResponse = {
    validator?: CosmosStakingValidator | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryHistoricalInfoRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - defines at which height to query the historical info.
 */
export declare const destructCosmosStakingQueryHistoricalInfoRequest: (g_struct: CosmosStakingQueryHistoricalInfoRequest) => [height?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_HISTORICAL_INFO_REQUEST = "/cosmos.staking.v1beta1.QueryHistoricalInfoRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryHistoricalInfoRequest` - request type for the Query/HistoricalInfo RPC method.
 */
export type CosmosStakingQueryHistoricalInfoRequest = {
    height?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryHistoricalInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hist - defines the historical info at the given height.
 *   - 1: historical_record -
 */
export declare const destructCosmosStakingQueryHistoricalInfoResponse: (g_struct: CosmosStakingQueryHistoricalInfoResponse) => [hist?: CosmosStakingHistoricalInfo, historical_record?: CosmosStakingHistoricalRecord];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_HISTORICAL_INFO_RESPONSE = "/cosmos.staking.v1beta1.QueryHistoricalInfoResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryHistoricalInfoResponse` - response type for the Query/HistoricalInfo RPC method.
 */
export type CosmosStakingQueryHistoricalInfoResponse = {
    hist?: CosmosStakingHistoricalInfo | undefined;
    historical_record?: CosmosStakingHistoricalRecord | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosStakingQueryPoolRequest: (g_struct: CosmosStakingQueryPoolRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_POOL_REQUEST = "/cosmos.staking.v1beta1.QueryPoolRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryPoolRequest` - request type for the Query/Pool RPC method.
 */
export type CosmosStakingQueryPoolRequest = {};
/**
 * Destructures the fields of a {@link CosmosStakingQueryPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - defines the pool info.
 */
export declare const destructCosmosStakingQueryPoolResponse: (g_struct: CosmosStakingQueryPoolResponse) => [pool?: CosmosStakingPool];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_POOL_RESPONSE = "/cosmos.staking.v1beta1.QueryPoolResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryPoolResponse` - response type for the Query/Pool RPC method.
 */
export type CosmosStakingQueryPoolResponse = {
    pool?: CosmosStakingPool | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmosStakingQueryParamsRequest: (g_struct: CosmosStakingQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_PARAMS_REQUEST = "/cosmos.staking.v1beta1.QueryParamsRequest";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryParamsRequest` - request type for the Query/Params RPC method.
 */
export type CosmosStakingQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link CosmosStakingQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export declare const destructCosmosStakingQueryParamsResponse: (g_struct: CosmosStakingQueryParamsResponse) => [params?: CosmosStakingParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_QUERY_PARAMS_RESPONSE = "/cosmos.staking.v1beta1.QueryParamsResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.QueryParamsResponse` - response type for the Query/Params RPC method.
 */
export type CosmosStakingQueryParamsResponse = {
    params?: CosmosStakingParams | undefined;
};
