import type { WeakInt64Str, WeakUint64Str, WeakAccountAddr, WeakValidatorAddr, SlimCoin, CwInt64, CwUint64, CwBase64, CwAccountAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt, WeakTimestampStr, WeakDurationStr } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../base/v1beta1/coin.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
import type { TendermintAbciValidatorUpdate, DecodedTendermintAbciValidatorUpdate } from '../../../tendermint/abci/types.js';
import type { TendermintTypesHeader, DecodedTendermintTypesHeader } from '../../../tendermint/types/types.js';
export type EncodedCosmosStakingHistoricalInfo = Encoded<'/cosmos.staking.v1beta1.HistoricalInfo'>;
export type EncodedCosmosStakingHistoricalRecord = Encoded<'/cosmos.staking.v1beta1.HistoricalRecord'>;
export type EncodedCosmosStakingCommissionRates = Encoded<'/cosmos.staking.v1beta1.CommissionRates'>;
export type EncodedCosmosStakingCommission = Encoded<'/cosmos.staking.v1beta1.Commission'>;
export type EncodedCosmosStakingDescription = Encoded<'/cosmos.staking.v1beta1.Description'>;
export type EncodedCosmosStakingValidator = Encoded<'/cosmos.staking.v1beta1.Validator'>;
export type EncodedCosmosStakingValAddresses = Encoded<'/cosmos.staking.v1beta1.ValAddresses'>;
export type EncodedCosmosStakingDVPair = Encoded<'/cosmos.staking.v1beta1.DVPair'>;
export type EncodedCosmosStakingDVPairs = Encoded<'/cosmos.staking.v1beta1.DVPairs'>;
export type EncodedCosmosStakingDVVTriplet = Encoded<'/cosmos.staking.v1beta1.DVVTriplet'>;
export type EncodedCosmosStakingDVVTriplets = Encoded<'/cosmos.staking.v1beta1.DVVTriplets'>;
export type EncodedCosmosStakingDelegation = Encoded<'/cosmos.staking.v1beta1.Delegation'>;
export type EncodedCosmosStakingUnbondingDelegation = Encoded<'/cosmos.staking.v1beta1.UnbondingDelegation'>;
export type EncodedCosmosStakingUnbondingDelegationEntry = Encoded<'/cosmos.staking.v1beta1.UnbondingDelegationEntry'>;
export type EncodedCosmosStakingRedelegationEntry = Encoded<'/cosmos.staking.v1beta1.RedelegationEntry'>;
export type EncodedCosmosStakingRedelegation = Encoded<'/cosmos.staking.v1beta1.Redelegation'>;
export type EncodedCosmosStakingParams = Encoded<'/cosmos.staking.v1beta1.Params'>;
export type EncodedCosmosStakingDelegationResponse = Encoded<'/cosmos.staking.v1beta1.DelegationResponse'>;
export type EncodedCosmosStakingRedelegationEntryResponse = Encoded<'/cosmos.staking.v1beta1.RedelegationEntryResponse'>;
export type EncodedCosmosStakingRedelegationResponse = Encoded<'/cosmos.staking.v1beta1.RedelegationResponse'>;
export type EncodedCosmosStakingPool = Encoded<'/cosmos.staking.v1beta1.Pool'>;
export type EncodedCosmosStakingValidatorUpdates = Encoded<'/cosmos.staking.v1beta1.ValidatorUpdates'>;
/**
 * Encodes a `HistoricalInfo` protobuf message: contains header and validator information for a given block. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter).
 * @param g_header - `header`:
 * @param a_valsets - `valset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingHistoricalInfo: (atu8_header?: Opt<Encoded<'/tendermint.types.Header'>>, a_valsets?: Opt<Encoded<'/cosmos.staking.v1beta1.Validator'>[]>) => EncodedCosmosStakingHistoricalInfo;
/**
 * Encodes a `HistoricalRecord` protobuf message: Historical contains a set of minimum values needed for evaluating historical validator sets and blocks. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter).
 * @param atu8_apphash - `apphash`:
 * @param xt_time - `time`:
 * @param atu8_validators_hash - `validators_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingHistoricalRecord: (atu8_apphash?: Opt<Uint8Array>, xt_time?: Opt<number>, atu8_validators_hash?: Opt<Uint8Array>) => EncodedCosmosStakingHistoricalRecord;
/**
 * Encodes a `CommissionRates` protobuf message: defines the initial commission rates to be used for creating a validator.
 * @param s_rate - `rate`: the commission rate charged to delegators, as a fraction.
 * @param s_max_rate - `max_rate`: defines the maximum commission rate which validator can ever charge, as a fraction.
 * @param s_max_change_rate - `max_change_rate`: defines the maximum daily increase of the validator commission, as a fraction.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingCommissionRates: (s_rate?: Opt<string>, s_max_rate?: Opt<string>, s_max_change_rate?: Opt<string>) => EncodedCosmosStakingCommissionRates;
/**
 * Encodes a `Commission` protobuf message: defines commission parameters for a given validator.
 * @param g_commission_rates - `commission_rates`: defines the initial commission rates to be used for creating a validator.
 * @param xt_update_time - `update_time`: the last time the commission rate was changed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingCommission: (atu8_commission_rates?: Opt<Encoded<'/cosmos.staking.v1beta1.CommissionRates'>>, xt_update_time?: Opt<number>) => EncodedCosmosStakingCommission;
/**
 * Encodes a `Description` protobuf message: defines a validator description.
 * @param s_moniker - `moniker`: defines a human-readable name for the validator.
 * @param s_identity - `identity`: defines an optional identity signature (ex. UPort or Keybase).
 * @param s_website - `website`: defines an optional website link.
 * @param s_security_contact - `security_contact`: defines an optional email for security contact.
 * @param s_details - `details`: define other optional details.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDescription: (s_moniker?: Opt<string>, s_identity?: Opt<string>, s_website?: Opt<string>, s_security_contact?: Opt<string>, s_details?: Opt<string>) => EncodedCosmosStakingDescription;
/**
 * Encodes a `Validator` protobuf message: defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 * @param sa_operator - `operator_address`: defines the address of the validator's operator; bech encoded in JSON.
 * @param atu8_consensus_pubkey - `consensus_pubkey`: the consensus public key of the validator, as a Protobuf Any.
 * @param b_jailed - `jailed`: defined whether the validator has been jailed from bonded status or not.
 * @param xc_status - `status`: the validator status (bonded/unbonding/unbonded).
 * @param s_tokens - `tokens`: define the delegated tokens (incl. self-delegation).
 * @param s_delegator_shares - `delegator_shares`: defines total shares issued to a validator's delegators.
 * @param g_description - `description`: defines the description terms for the validator.
 * @param sg_unbonding_height - `unbonding_height`: defines, if unbonding, the height at which this validator has begun unbonding.
 * @param xt_unbonding_time - `unbonding_time`: defines, if unbonding, the min time for the validator to complete unbonding.
 * @param g_commission - `commission`: defines the commission parameters.
 * @param s_min_self_delegation - `min_self_delegation`: the validator's self declared minimum self delegation. Since: cosmos-sdk 0.46
 * @param sg_unbonding_on_hold_ref_count - `unbonding_on_hold_ref_count`: strictly positive if this validator's unbonding has been stopped by external modules
 * @param a_unbonding_ids - `unbonding_ids`: list of unbonding ids, each uniquely identifing an unbonding of this validator
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingValidator: (sa_operator?: Opt<WeakAccountAddr>, atu8_consensus_pubkey?: Opt<Encoded<'cosmos.crypto.PubKey'>>, b_jailed?: Opt<boolean | 0 | 1>, xc_status?: Opt<ProtoEnumCosmosStakingBondStatus>, s_tokens?: Opt<string>, s_delegator_shares?: Opt<string>, atu8_description?: Opt<Encoded<'/cosmos.staking.v1beta1.Description'>>, sg_unbonding_height?: Opt<WeakInt64Str>, xt_unbonding_time?: Opt<number>, atu8_commission?: Opt<Encoded<'/cosmos.staking.v1beta1.Commission'>>, s_min_self_delegation?: Opt<string>, sg_unbonding_on_hold_ref_count?: Opt<WeakInt64Str>, a_unbonding_ids?: Opt<WeakUint64Str[]>) => EncodedCosmosStakingValidator;
/**
 * Encodes a `ValAddresses` protobuf message: defines a repeated set of validator addresses.
 * @param a_addresses - `addresses`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingValAddresses: (a_addresses?: Opt<string[]>) => EncodedCosmosStakingValAddresses;
/**
 * Encodes a `DVPair` protobuf message: struct that just has a delegator-validator pair with no other data. It is intended to be used as a marshalable pointer. For example, a DVPair can be used to construct the key to getting an UnbondingDelegation from state.
 * @param sa_delegator - `delegator_address`:
 * @param sa_validator - `validator_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDVPair: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>) => EncodedCosmosStakingDVPair;
/**
 * Encodes a `DVPairs` protobuf message: defines an array of DVPair objects.
 * @param a_pairs - `pairs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDVPairs: (a_pairs?: Opt<Encoded<'/cosmos.staking.v1beta1.DVPair'>[]>) => EncodedCosmosStakingDVPairs;
/**
 * Encodes a `DVVTriplet` protobuf message: struct that just has a delegator-validator-validator triplet with no other data. It is intended to be used as a marshalable pointer. For example, a DVVTriplet can be used to construct the key to getting a Redelegation from state.
 * @param sa_delegator - `delegator_address`:
 * @param sa_validator_src - `validator_src_address`:
 * @param sa_validator_dst - `validator_dst_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDVVTriplet: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator_src?: Opt<WeakValidatorAddr>, sa_validator_dst?: Opt<WeakValidatorAddr>) => EncodedCosmosStakingDVVTriplet;
/**
 * Encodes a `DVVTriplets` protobuf message: defines an array of DVVTriplet objects.
 * @param a_triplets - `triplets`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDVVTriplets: (a_triplets?: Opt<Encoded<'/cosmos.staking.v1beta1.DVVTriplet'>[]>) => EncodedCosmosStakingDVVTriplets;
/**
 * Encodes a `Delegation` protobuf message: represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 * @param sa_delegator - `delegator_address`: the encoded address of the delegator.
 * @param sa_validator - `validator_address`: the encoded address of the validator.
 * @param s_shares - `shares`: define the delegation shares received.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDelegation: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>, s_shares?: Opt<string>) => EncodedCosmosStakingDelegation;
/**
 * Encodes a `UnbondingDelegation` protobuf message: stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list.
 * @param sa_delegator - `delegator_address`: the encoded address of the delegator.
 * @param sa_validator - `validator_address`: the encoded address of the validator.
 * @param a_entries - `entries`: the unbonding delegation entries.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingUnbondingDelegation: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator?: Opt<WeakValidatorAddr>, a_entries?: Opt<Encoded<'/cosmos.staking.v1beta1.UnbondingDelegationEntry'>[]>) => EncodedCosmosStakingUnbondingDelegation;
/**
 * Encodes a `UnbondingDelegationEntry` protobuf message: defines an unbonding object with relevant metadata.
 * @param sg_creation_height - `creation_height`: the height which the unbonding took place.
 * @param xt_completion_time - `completion_time`: the unix time for unbonding completion.
 * @param s_initial_balance - `initial_balance`: defines the tokens initially scheduled to receive at completion.
 * @param s_balance - `balance`: defines the tokens to receive at completion.
 * @param sg_unbonding_id - `unbonding_id`: Incrementing id that uniquely identifies this entry
 * @param sg_unbonding_on_hold_ref_count - `unbonding_on_hold_ref_count`: Strictly positive if this entry's unbonding has been stopped by external modules
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingUnbondingDelegationEntry: (sg_creation_height?: Opt<WeakInt64Str>, xt_completion_time?: Opt<number>, s_initial_balance?: Opt<string>, s_balance?: Opt<string>, sg_unbonding_id?: Opt<WeakUint64Str>, sg_unbonding_on_hold_ref_count?: Opt<WeakInt64Str>) => EncodedCosmosStakingUnbondingDelegationEntry;
/**
 * Encodes a `RedelegationEntry` protobuf message: defines a redelegation object with relevant metadata.
 * @param sg_creation_height - `creation_height`: defines the height which the redelegation took place.
 * @param xt_completion_time - `completion_time`: defines the unix time for redelegation completion.
 * @param s_initial_balance - `initial_balance`: defines the initial balance when redelegation started.
 * @param s_shares_dst - `shares_dst`: the amount of destination-validator shares created by redelegation.
 * @param sg_unbonding_id - `unbonding_id`: Incrementing id that uniquely identifies this entry
 * @param sg_unbonding_on_hold_ref_count - `unbonding_on_hold_ref_count`: Strictly positive if this entry's unbonding has been stopped by external modules
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingRedelegationEntry: (sg_creation_height?: Opt<WeakInt64Str>, xt_completion_time?: Opt<number>, s_initial_balance?: Opt<string>, s_shares_dst?: Opt<string>, sg_unbonding_id?: Opt<WeakUint64Str>, sg_unbonding_on_hold_ref_count?: Opt<WeakInt64Str>) => EncodedCosmosStakingRedelegationEntry;
/**
 * Encodes a `Redelegation` protobuf message: contains the list of a particular delegator's redelegating bonds from a particular source validator to a particular destination validator.
 * @param sa_delegator - `delegator_address`: the bech32-encoded address of the delegator.
 * @param sa_validator_src - `validator_src_address`: the validator redelegation source operator address.
 * @param sa_validator_dst - `validator_dst_address`: the validator redelegation destination operator address.
 * @param a_entries - `entries`: the redelegation entries.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingRedelegation: (sa_delegator?: Opt<WeakAccountAddr>, sa_validator_src?: Opt<WeakValidatorAddr>, sa_validator_dst?: Opt<WeakValidatorAddr>, a_entries?: Opt<Encoded<'/cosmos.staking.v1beta1.RedelegationEntry'>[]>) => EncodedCosmosStakingRedelegation;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/staking module.
 * @param xt_unbonding_time - `unbonding_time`: the time duration of unbonding.
 * @param n_max_validators - `max_validators`: the maximum number of validators.
 * @param n_max_entries - `max_entries`: the max entries for either unbonding delegation or redelegation (per pair/trio).
 * @param n_historical_entries - `historical_entries`: the number of historical entries to persist.
 * @param s_bond_denom - `bond_denom`: defines the bondable coin denomination.
 * @param s_min_commission_rate - `min_commission_rate`: the chain-wide minimum commission rate that a validator can charge their delegators
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingParams: (xt_unbonding_time?: Opt<number>, n_max_validators?: Opt<number>, n_max_entries?: Opt<number>, n_historical_entries?: Opt<number>, s_bond_denom?: Opt<string>, s_min_commission_rate?: Opt<string>) => EncodedCosmosStakingParams;
/**
 * Encodes a `DelegationResponse` protobuf message: equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 * @param g_delegation - `delegation`:
 * @param a_balance - `balance`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingDelegationResponse: (atu8_delegation?: Opt<Encoded<'/cosmos.staking.v1beta1.Delegation'>>, a_balance?: Opt<SlimCoin>) => EncodedCosmosStakingDelegationResponse;
/**
 * Encodes a `RedelegationEntryResponse` protobuf message: equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 * @param g_redelegation_entry - `redelegation_entry`:
 * @param s_balance - `balance`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingRedelegationEntryResponse: (atu8_redelegation_entry?: Opt<Encoded<'/cosmos.staking.v1beta1.RedelegationEntry'>>, s_balance?: Opt<string>) => EncodedCosmosStakingRedelegationEntryResponse;
/**
 * Encodes a `RedelegationResponse` protobuf message: equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 * @param g_redelegation - `redelegation`:
 * @param a_entries - `entries`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingRedelegationResponse: (atu8_redelegation?: Opt<Encoded<'/cosmos.staking.v1beta1.Redelegation'>>, a_entries?: Opt<Encoded<'/cosmos.staking.v1beta1.RedelegationEntryResponse'>[]>) => EncodedCosmosStakingRedelegationResponse;
/**
 * Encodes a `Pool` protobuf message: used for tracking bonded and not-bonded token supply of the bond denomination.
 * @param s_not_bonded_tokens - `not_bonded_tokens`:
 * @param s_bonded_tokens - `bonded_tokens`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingPool: (s_not_bonded_tokens?: Opt<string>, s_bonded_tokens?: Opt<string>) => EncodedCosmosStakingPool;
/**
 * Encodes a `ValidatorUpdates` protobuf message: defines an array of abci.ValidatorUpdate objects. TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 * @param a_updates - `updates`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosStakingValidatorUpdates: (a_updates?: Opt<Encoded<'/tendermint.abci.ValidatorUpdate'>[]>) => EncodedCosmosStakingValidatorUpdates;
/**
 * A decoded protobuf HistoricalInfo message
 *
 * Tuple where:
 *   - 0: header -
 *   - 1: valset -
 */
export type DecodedCosmosStakingHistoricalInfo = [
    a_header?: DecodedTendermintTypesHeader,
    a_valset?: DecodedCosmosStakingValidator[]
];
/**
 * Decodes a protobuf HistoricalInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingHistoricalInfo}
 */
export declare const decodeCosmosStakingHistoricalInfo: (atu8_payload: Uint8Array) => DecodedCosmosStakingHistoricalInfo;
/**
 * A decoded protobuf HistoricalRecord message
 *
 * Tuple where:
 *   - 0: apphash -
 *   - 1: time -
 *   - 2: validators_hash -
 */
export type DecodedCosmosStakingHistoricalRecord = [
    atu8_apphash?: Uint8Array,
    a_time?: [
        string,
        number
    ],
    atu8_validators_hash?: Uint8Array
];
/**
 * Decodes a protobuf HistoricalRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingHistoricalRecord}
 */
export declare const decodeCosmosStakingHistoricalRecord: (atu8_payload: Uint8Array) => DecodedCosmosStakingHistoricalRecord;
/**
 * A decoded protobuf CommissionRates message
 *
 * Tuple where:
 *   - 0: rate - the commission rate charged to delegators, as a fraction.
 *   - 1: max_rate - defines the maximum commission rate which validator can ever charge, as a fraction.
 *   - 2: max_change_rate - defines the maximum daily increase of the validator commission, as a fraction.
 */
export type DecodedCosmosStakingCommissionRates = [
    s_rate?: string,
    s_max_rate?: string,
    s_max_change_rate?: string
];
/**
 * Decodes a protobuf CommissionRates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingCommissionRates}
 */
export declare const decodeCosmosStakingCommissionRates: (atu8_payload: Uint8Array) => DecodedCosmosStakingCommissionRates;
/**
 * A decoded protobuf Commission message
 *
 * Tuple where:
 *   - 0: commission_rates - defines the initial commission rates to be used for creating a validator.
 *   - 1: update_time - the last time the commission rate was changed.
 */
export type DecodedCosmosStakingCommission = [
    a_commission_rates?: DecodedCosmosStakingCommissionRates,
    a_update_time?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf Commission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingCommission}
 */
export declare const decodeCosmosStakingCommission: (atu8_payload: Uint8Array) => DecodedCosmosStakingCommission;
/**
 * A decoded protobuf Description message
 *
 * Tuple where:
 *   - 0: moniker - defines a human-readable name for the validator.
 *   - 1: identity - defines an optional identity signature (ex. UPort or Keybase).
 *   - 2: website - defines an optional website link.
 *   - 3: security_contact - defines an optional email for security contact.
 *   - 4: details - define other optional details.
 */
export type DecodedCosmosStakingDescription = [
    s_moniker?: string,
    s_identity?: string,
    s_website?: string,
    s_security_contact?: string,
    s_details?: string
];
/**
 * Decodes a protobuf Description message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDescription}
 */
export declare const decodeCosmosStakingDescription: (atu8_payload: Uint8Array) => DecodedCosmosStakingDescription;
/**
 * A decoded protobuf Validator message
 *
 * Tuple where:
 *   - 0: operator_address - defines the address of the validator's operator; bech encoded in JSON.
 *   - 1: consensus_pubkey - the consensus public key of the validator, as a Protobuf Any.
 *   - 2: jailed - defined whether the validator has been jailed from bonded status or not.
 *   - 3: status - the validator status (bonded/unbonding/unbonded).
 *   - 4: tokens - define the delegated tokens (incl. self-delegation).
 *   - 5: delegator_shares - defines total shares issued to a validator's delegators.
 *   - 6: description - defines the description terms for the validator.
 *   - 7: unbonding_height - defines, if unbonding, the height at which this validator has begun unbonding.
 *   - 8: unbonding_time - defines, if unbonding, the min time for the validator to complete unbonding.
 *   - 9: commission - defines the commission parameters.
 *   - 10: min_self_delegation - the validator's self declared minimum self delegation. Since: cosmos-sdk 0.46
 *   - 11: unbonding_on_hold_ref_count - strictly positive if this validator's unbonding has been stopped by external modules
 *   - 12: unbonding_ids - list of unbonding ids, each uniquely identifing an unbonding of this validator
 */
export type DecodedCosmosStakingValidator = [
    sa_operator?: CwAccountAddr,
    a_consensus_pubkey?: DecodedGoogleProtobufAny,
    b_jailed?: 0 | 1,
    xc_status?: ProtoEnumCosmosStakingBondStatus,
    s_tokens?: string,
    s_delegator_shares?: string,
    a_description?: DecodedCosmosStakingDescription,
    sg_unbonding_height?: CwInt64,
    a_unbonding_time?: [
        string,
        number
    ],
    a_commission?: DecodedCosmosStakingCommission,
    s_min_self_delegation?: string,
    sg_unbonding_on_hold_ref_count?: CwInt64,
    a_unbonding_ids?: CwUint64[]
];
/**
 * Decodes a protobuf Validator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingValidator}
 */
export declare const decodeCosmosStakingValidator: (atu8_payload: Uint8Array) => DecodedCosmosStakingValidator;
/**
 * A decoded protobuf ValAddresses message
 *
 * Alias for: addresses -
 */
export type DecodedCosmosStakingValAddresses = [
    a_addresses?: string[]
];
/**
 * Decodes a protobuf ValAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingValAddresses}
 */
export declare const decodeCosmosStakingValAddresses: (atu8_payload: Uint8Array) => DecodedCosmosStakingValAddresses;
/**
 * A decoded protobuf DVPair message
 *
 * Tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_address -
 */
export type DecodedCosmosStakingDVPair = [
    sa_delegator?: CwAccountAddr,
    sa_validator?: CwValidatorAddr
];
/**
 * Decodes a protobuf DVPair message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVPair}
 */
export declare const decodeCosmosStakingDVPair: (atu8_payload: Uint8Array) => DecodedCosmosStakingDVPair;
/**
 * A decoded protobuf DVPairs message
 *
 * Alias for: pairs -
 */
export type DecodedCosmosStakingDVPairs = [
    a_pairs?: DecodedCosmosStakingDVPair[]
];
/**
 * Decodes a protobuf DVPairs message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVPairs}
 */
export declare const decodeCosmosStakingDVPairs: (atu8_payload: Uint8Array) => DecodedCosmosStakingDVPairs;
/**
 * A decoded protobuf DVVTriplet message
 *
 * Tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_src_address -
 *   - 2: validator_dst_address -
 */
export type DecodedCosmosStakingDVVTriplet = [
    sa_delegator?: CwAccountAddr,
    sa_validator_src?: CwValidatorAddr,
    sa_validator_dst?: CwValidatorAddr
];
/**
 * Decodes a protobuf DVVTriplet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVVTriplet}
 */
export declare const decodeCosmosStakingDVVTriplet: (atu8_payload: Uint8Array) => DecodedCosmosStakingDVVTriplet;
/**
 * A decoded protobuf DVVTriplets message
 *
 * Alias for: triplets -
 */
export type DecodedCosmosStakingDVVTriplets = [
    a_triplets?: DecodedCosmosStakingDVVTriplet[]
];
/**
 * Decodes a protobuf DVVTriplets message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVVTriplets}
 */
export declare const decodeCosmosStakingDVVTriplets: (atu8_payload: Uint8Array) => DecodedCosmosStakingDVVTriplets;
/**
 * A decoded protobuf Delegation message
 *
 * Tuple where:
 *   - 0: delegator_address - the encoded address of the delegator.
 *   - 1: validator_address - the encoded address of the validator.
 *   - 2: shares - define the delegation shares received.
 */
export type DecodedCosmosStakingDelegation = [
    sa_delegator?: CwAccountAddr,
    sa_validator?: CwValidatorAddr,
    s_shares?: string
];
/**
 * Decodes a protobuf Delegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDelegation}
 */
export declare const decodeCosmosStakingDelegation: (atu8_payload: Uint8Array) => DecodedCosmosStakingDelegation;
/**
 * A decoded protobuf UnbondingDelegation message
 *
 * Tuple where:
 *   - 0: delegator_address - the encoded address of the delegator.
 *   - 1: validator_address - the encoded address of the validator.
 *   - 2: entries - the unbonding delegation entries.
 */
export type DecodedCosmosStakingUnbondingDelegation = [
    sa_delegator?: CwAccountAddr,
    sa_validator?: CwValidatorAddr,
    a_entries?: DecodedCosmosStakingUnbondingDelegationEntry[]
];
/**
 * Decodes a protobuf UnbondingDelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingUnbondingDelegation}
 */
export declare const decodeCosmosStakingUnbondingDelegation: (atu8_payload: Uint8Array) => DecodedCosmosStakingUnbondingDelegation;
/**
 * A decoded protobuf UnbondingDelegationEntry message
 *
 * Tuple where:
 *   - 0: creation_height - the height which the unbonding took place.
 *   - 1: completion_time - the unix time for unbonding completion.
 *   - 2: initial_balance - defines the tokens initially scheduled to receive at completion.
 *   - 3: balance - defines the tokens to receive at completion.
 *   - 4: unbonding_id - Incrementing id that uniquely identifies this entry
 *   - 5: unbonding_on_hold_ref_count - Strictly positive if this entry's unbonding has been stopped by external modules
 */
export type DecodedCosmosStakingUnbondingDelegationEntry = [
    sg_creation_height?: CwInt64,
    a_completion_time?: [
        string,
        number
    ],
    s_initial_balance?: string,
    s_balance?: string,
    sg_unbonding_id?: CwUint64,
    sg_unbonding_on_hold_ref_count?: CwInt64
];
/**
 * Decodes a protobuf UnbondingDelegationEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingUnbondingDelegationEntry}
 */
export declare const decodeCosmosStakingUnbondingDelegationEntry: (atu8_payload: Uint8Array) => DecodedCosmosStakingUnbondingDelegationEntry;
/**
 * A decoded protobuf RedelegationEntry message
 *
 * Tuple where:
 *   - 0: creation_height - defines the height which the redelegation took place.
 *   - 1: completion_time - defines the unix time for redelegation completion.
 *   - 2: initial_balance - defines the initial balance when redelegation started.
 *   - 3: shares_dst - the amount of destination-validator shares created by redelegation.
 *   - 4: unbonding_id - Incrementing id that uniquely identifies this entry
 *   - 5: unbonding_on_hold_ref_count - Strictly positive if this entry's unbonding has been stopped by external modules
 */
export type DecodedCosmosStakingRedelegationEntry = [
    sg_creation_height?: CwInt64,
    a_completion_time?: [
        string,
        number
    ],
    s_initial_balance?: string,
    s_shares_dst?: string,
    sg_unbonding_id?: CwUint64,
    sg_unbonding_on_hold_ref_count?: CwInt64
];
/**
 * Decodes a protobuf RedelegationEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingRedelegationEntry}
 */
export declare const decodeCosmosStakingRedelegationEntry: (atu8_payload: Uint8Array) => DecodedCosmosStakingRedelegationEntry;
/**
 * A decoded protobuf Redelegation message
 *
 * Tuple where:
 *   - 0: delegator_address - the bech32-encoded address of the delegator.
 *   - 1: validator_src_address - the validator redelegation source operator address.
 *   - 2: validator_dst_address - the validator redelegation destination operator address.
 *   - 3: entries - the redelegation entries.
 */
export type DecodedCosmosStakingRedelegation = [
    sa_delegator?: CwAccountAddr,
    sa_validator_src?: CwValidatorAddr,
    sa_validator_dst?: CwValidatorAddr,
    a_entries?: DecodedCosmosStakingRedelegationEntry[]
];
/**
 * Decodes a protobuf Redelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingRedelegation}
 */
export declare const decodeCosmosStakingRedelegation: (atu8_payload: Uint8Array) => DecodedCosmosStakingRedelegation;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: unbonding_time - the time duration of unbonding.
 *   - 1: max_validators - the maximum number of validators.
 *   - 2: max_entries - the max entries for either unbonding delegation or redelegation (per pair/trio).
 *   - 3: historical_entries - the number of historical entries to persist.
 *   - 4: bond_denom - defines the bondable coin denomination.
 *   - 5: min_commission_rate - the chain-wide minimum commission rate that a validator can charge their delegators
 */
export type DecodedCosmosStakingParams = [
    a_unbonding_time?: [
        string,
        number
    ],
    n_max_validators?: number,
    n_max_entries?: number,
    n_historical_entries?: number,
    s_bond_denom?: string,
    s_min_commission_rate?: string
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingParams}
 */
export declare const decodeCosmosStakingParams: (atu8_payload: Uint8Array) => DecodedCosmosStakingParams;
/**
 * A decoded protobuf Delegation message
 *
 * Tuple where:
 *   - 0: delegation -
 *   - 1: balance -
 */
export type DecodedCosmosStakingDelegationResponse = [
    a_delegation?: DecodedCosmosStakingDelegation,
    a_balance?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf Delegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDelegationResponse}
 */
export declare const decodeCosmosStakingDelegationResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingDelegationResponse;
/**
 * A decoded protobuf RedelegationEntry message
 *
 * Tuple where:
 *   - 0: redelegation_entry -
 *   - 3: balance -
 */
export type DecodedCosmosStakingRedelegationEntryResponse = [
    a_redelegation_entry?: DecodedCosmosStakingRedelegationEntry,
    w_0?: undefined,
    w_1?: undefined,
    s_balance?: string
];
/**
 * Decodes a protobuf RedelegationEntry message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosStakingRedelegationEntryResponse}
 */
export declare const decodeCosmosStakingRedelegationEntryResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmosStakingRedelegationEntryResponse;
/**
 * A decoded protobuf Redelegation message
 *
 * Tuple where:
 *   - 0: redelegation -
 *   - 1: entries -
 */
export type DecodedCosmosStakingRedelegationResponse = [
    a_redelegation?: DecodedCosmosStakingRedelegation,
    a_entries?: DecodedCosmosStakingRedelegationEntryResponse[]
];
/**
 * Decodes a protobuf Redelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingRedelegationResponse}
 */
export declare const decodeCosmosStakingRedelegationResponse: (atu8_payload: Uint8Array) => DecodedCosmosStakingRedelegationResponse;
/**
 * A decoded protobuf Pool message
 *
 * Tuple where:
 *   - 0: not_bonded_tokens -
 *   - 1: bonded_tokens -
 */
export type DecodedCosmosStakingPool = [
    s_not_bonded_tokens?: string,
    s_bonded_tokens?: string
];
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingPool}
 */
export declare const decodeCosmosStakingPool: (atu8_payload: Uint8Array) => DecodedCosmosStakingPool;
/**
 * A decoded protobuf ValidatorUpdates message
 *
 * Alias for: updates -
 */
export type DecodedCosmosStakingValidatorUpdates = [
    a_updates?: DecodedTendermintAbciValidatorUpdate[]
];
/**
 * Decodes a protobuf ValidatorUpdates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingValidatorUpdates}
 */
export declare const decodeCosmosStakingValidatorUpdates: (atu8_payload: Uint8Array) => DecodedCosmosStakingValidatorUpdates;
/**
 * Destructures the fields of a {@link CosmosStakingDescription} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: moniker - defines a human-readable name for the validator.
 *   - 1: identity - defines an optional identity signature (ex. UPort or Keybase).
 *   - 2: website - defines an optional website link.
 *   - 3: security_contact - defines an optional email for security contact.
 *   - 4: details - define other optional details.
 */
export declare const destructCosmosStakingDescription: (g_struct: CosmosStakingDescription) => [moniker?: string, identity?: string, website?: string, security_contact?: string, details?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_DESCRIPTION = "/cosmos.staking.v1beta1.Description";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Description` - defines a validator description.
 */
export type CosmosStakingDescription = {
    moniker?: string | undefined;
    identity?: string | undefined;
    website?: string | undefined;
    security_contact?: string | undefined;
    details?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingCommissionRates} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rate - the commission rate charged to delegators, as a fraction.
 *   - 1: max_rate - defines the maximum commission rate which validator can ever charge, as a fraction.
 *   - 2: max_change_rate - defines the maximum daily increase of the validator commission, as a fraction.
 */
export declare const destructCosmosStakingCommissionRates: (g_struct: CosmosStakingCommissionRates) => [rate?: string, max_rate?: string, max_change_rate?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_COMMISSION_RATES = "/cosmos.staking.v1beta1.CommissionRates";
/**
 * JSON serialization of `cosmos.staking.v1beta1.CommissionRates` - defines the initial commission rates to be used for creating a validator.
 */
export type CosmosStakingCommissionRates = {
    rate?: string | undefined;
    max_rate?: string | undefined;
    max_change_rate?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbonding_time - the time duration of unbonding.
 *   - 1: max_validators - the maximum number of validators.
 *   - 2: max_entries - the max entries for either unbonding delegation or redelegation (per pair/trio).
 *   - 3: historical_entries - the number of historical entries to persist.
 *   - 4: bond_denom - defines the bondable coin denomination.
 *   - 5: min_commission_rate - the chain-wide minimum commission rate that a validator can charge their delegators
 */
export declare const destructCosmosStakingParams: (g_struct: CosmosStakingParams) => [unbonding_time?: number, max_validators?: number, max_entries?: number, historical_entries?: number, bond_denom?: string, min_commission_rate?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_PARAMS = "/cosmos.staking.v1beta1.Params";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Params` - defines the parameters for the x/staking module.
 */
export type CosmosStakingParams = {
    unbonding_time?: WeakDurationStr | undefined;
    max_validators?: number | undefined;
    max_entries?: number | undefined;
    historical_entries?: number | undefined;
    bond_denom?: string | undefined;
    min_commission_rate?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: operator_address - defines the address of the validator's operator; bech encoded in JSON.
 *   - 1: consensus_pubkey - the consensus public key of the validator, as a Protobuf Any.
 *   - 2: jailed - defined whether the validator has been jailed from bonded status or not.
 *   - 3: status - the validator status (bonded/unbonding/unbonded).
 *   - 4: tokens - define the delegated tokens (incl. self-delegation).
 *   - 5: delegator_shares - defines total shares issued to a validator's delegators.
 *   - 6: description - defines the description terms for the validator.
 *   - 7: unbonding_height - defines, if unbonding, the height at which this validator has begun unbonding.
 *   - 8: unbonding_time - defines, if unbonding, the min time for the validator to complete unbonding.
 *   - 9: commission - defines the commission parameters.
 *   - 10: min_self_delegation - the validator's self declared minimum self delegation. Since: cosmos-sdk 0.46
 *   - 11: unbonding_on_hold_ref_count - strictly positive if this validator's unbonding has been stopped by external modules
 *   - 12: unbonding_ids - list of unbonding ids, each uniquely identifing an unbonding of this validator
 */
export declare const destructCosmosStakingValidator: (g_struct: CosmosStakingValidator) => [operator_address?: CwAccountAddr, consensus_pubkey?: JsonAny<string>, jailed?: boolean, status?: JsonEnumCosmosStakingBondStatus, tokens?: string, delegator_shares?: string, description?: CosmosStakingDescription, unbonding_height?: CwInt64, unbonding_time?: number, commission?: CosmosStakingCommission, min_self_delegation?: string, unbonding_on_hold_ref_count?: CwInt64, unbonding_ids?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_VALIDATOR = "/cosmos.staking.v1beta1.Validator";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Validator` - defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 */
export type CosmosStakingValidator = {
    operator_address?: CwAccountAddr | undefined;
    consensus_pubkey?: JsonAny<string> | undefined;
    jailed?: boolean | undefined;
    status?: JsonEnumCosmosStakingBondStatus | undefined;
    tokens?: string | undefined;
    delegator_shares?: string | undefined;
    description?: CosmosStakingDescription | undefined;
    unbonding_height?: CwInt64 | undefined;
    unbonding_time?: WeakTimestampStr | undefined;
    commission?: CosmosStakingCommission | undefined;
    min_self_delegation?: string | undefined;
    unbonding_on_hold_ref_count?: CwInt64 | undefined;
    unbonding_ids?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingCommission} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commission_rates - defines the initial commission rates to be used for creating a validator.
 *   - 1: update_time - the last time the commission rate was changed.
 */
export declare const destructCosmosStakingCommission: (g_struct: CosmosStakingCommission) => [commission_rates?: CosmosStakingCommissionRates, update_time?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_COMMISSION = "/cosmos.staking.v1beta1.Commission";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Commission` - defines commission parameters for a given validator.
 */
export type CosmosStakingCommission = {
    commission_rates?: CosmosStakingCommissionRates | undefined;
    update_time?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingDelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation -
 *   - 1: balance -
 */
export declare const destructCosmosStakingDelegationResponse: (g_struct: CosmosStakingDelegationResponse) => [delegation?: CosmosStakingDelegation, balance?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_DELEGATION_RESPONSE = "/cosmos.staking.v1beta1.DelegationResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.DelegationResponse` - equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 */
export type CosmosStakingDelegationResponse = {
    delegation?: CosmosStakingDelegation | undefined;
    balance?: CosmosBaseCoin | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingDelegation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the encoded address of the delegator.
 *   - 1: validator_address - the encoded address of the validator.
 *   - 2: shares - define the delegation shares received.
 */
export declare const destructCosmosStakingDelegation: (g_struct: CosmosStakingDelegation) => [delegator_address?: CwAccountAddr, validator_address?: CwValidatorAddr, shares?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_DELEGATION = "/cosmos.staking.v1beta1.Delegation";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Delegation` - represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 */
export type CosmosStakingDelegation = {
    delegator_address?: CwAccountAddr | undefined;
    validator_address?: CwValidatorAddr | undefined;
    shares?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingUnbondingDelegation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the encoded address of the delegator.
 *   - 1: validator_address - the encoded address of the validator.
 *   - 2: entries - the unbonding delegation entries.
 */
export declare const destructCosmosStakingUnbondingDelegation: (g_struct: CosmosStakingUnbondingDelegation) => [delegator_address?: CwAccountAddr, validator_address?: CwValidatorAddr, entries?: CosmosStakingUnbondingDelegationEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_UNBONDING_DELEGATION = "/cosmos.staking.v1beta1.UnbondingDelegation";
/**
 * JSON serialization of `cosmos.staking.v1beta1.UnbondingDelegation` - stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list.
 */
export type CosmosStakingUnbondingDelegation = {
    delegator_address?: CwAccountAddr | undefined;
    validator_address?: CwValidatorAddr | undefined;
    entries?: CosmosStakingUnbondingDelegationEntry[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingUnbondingDelegationEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: creation_height - the height which the unbonding took place.
 *   - 1: completion_time - the unix time for unbonding completion.
 *   - 2: initial_balance - defines the tokens initially scheduled to receive at completion.
 *   - 3: balance - defines the tokens to receive at completion.
 *   - 4: unbonding_id - Incrementing id that uniquely identifies this entry
 *   - 5: unbonding_on_hold_ref_count - Strictly positive if this entry's unbonding has been stopped by external modules
 */
export declare const destructCosmosStakingUnbondingDelegationEntry: (g_struct: CosmosStakingUnbondingDelegationEntry) => [creation_height?: CwInt64, completion_time?: number, initial_balance?: string, balance?: string, unbonding_id?: CwUint64, unbonding_on_hold_ref_count?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_UNBONDING_DELEGATION_ENTRY = "/cosmos.staking.v1beta1.UnbondingDelegationEntry";
/**
 * JSON serialization of `cosmos.staking.v1beta1.UnbondingDelegationEntry` - defines an unbonding object with relevant metadata.
 */
export type CosmosStakingUnbondingDelegationEntry = {
    creation_height?: CwInt64 | undefined;
    completion_time?: WeakTimestampStr | undefined;
    initial_balance?: string | undefined;
    balance?: string | undefined;
    unbonding_id?: CwUint64 | undefined;
    unbonding_on_hold_ref_count?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingRedelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: redelegation -
 *   - 1: entries -
 */
export declare const destructCosmosStakingRedelegationResponse: (g_struct: CosmosStakingRedelegationResponse) => [redelegation?: CosmosStakingRedelegation, entries?: CosmosStakingRedelegationEntryResponse[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION_RESPONSE = "/cosmos.staking.v1beta1.RedelegationResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.RedelegationResponse` - equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 */
export type CosmosStakingRedelegationResponse = {
    redelegation?: CosmosStakingRedelegation | undefined;
    entries?: CosmosStakingRedelegationEntryResponse[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingRedelegation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the bech32-encoded address of the delegator.
 *   - 1: validator_src_address - the validator redelegation source operator address.
 *   - 2: validator_dst_address - the validator redelegation destination operator address.
 *   - 3: entries - the redelegation entries.
 */
export declare const destructCosmosStakingRedelegation: (g_struct: CosmosStakingRedelegation) => [delegator_address?: CwAccountAddr, validator_src_address?: CwValidatorAddr, validator_dst_address?: CwValidatorAddr, entries?: CosmosStakingRedelegationEntry[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION = "/cosmos.staking.v1beta1.Redelegation";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Redelegation` - contains the list of a particular delegator's redelegating bonds from a particular source validator to a particular destination validator.
 */
export type CosmosStakingRedelegation = {
    delegator_address?: CwAccountAddr | undefined;
    validator_src_address?: CwValidatorAddr | undefined;
    validator_dst_address?: CwValidatorAddr | undefined;
    entries?: CosmosStakingRedelegationEntry[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingRedelegationEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: creation_height - defines the height which the redelegation took place.
 *   - 1: completion_time - defines the unix time for redelegation completion.
 *   - 2: initial_balance - defines the initial balance when redelegation started.
 *   - 3: shares_dst - the amount of destination-validator shares created by redelegation.
 *   - 4: unbonding_id - Incrementing id that uniquely identifies this entry
 *   - 5: unbonding_on_hold_ref_count - Strictly positive if this entry's unbonding has been stopped by external modules
 */
export declare const destructCosmosStakingRedelegationEntry: (g_struct: CosmosStakingRedelegationEntry) => [creation_height?: CwInt64, completion_time?: number, initial_balance?: string, shares_dst?: string, unbonding_id?: CwUint64, unbonding_on_hold_ref_count?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION_ENTRY = "/cosmos.staking.v1beta1.RedelegationEntry";
/**
 * JSON serialization of `cosmos.staking.v1beta1.RedelegationEntry` - defines a redelegation object with relevant metadata.
 */
export type CosmosStakingRedelegationEntry = {
    creation_height?: CwInt64 | undefined;
    completion_time?: WeakTimestampStr | undefined;
    initial_balance?: string | undefined;
    shares_dst?: string | undefined;
    unbonding_id?: CwUint64 | undefined;
    unbonding_on_hold_ref_count?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingRedelegationEntryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: redelegation_entry -
 *   - 3: balance -
 */
export declare const destructCosmosStakingRedelegationEntryResponse: (g_struct: CosmosStakingRedelegationEntryResponse) => [redelegation_entry?: CosmosStakingRedelegationEntry, EMPTY?: void, EMPTY?: void, balance?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION_ENTRY_RESPONSE = "/cosmos.staking.v1beta1.RedelegationEntryResponse";
/**
 * JSON serialization of `cosmos.staking.v1beta1.RedelegationEntryResponse` - equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 */
export type CosmosStakingRedelegationEntryResponse = {
    redelegation_entry?: CosmosStakingRedelegationEntry | undefined;
    balance?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingHistoricalInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: header -
 *   - 1: valset -
 */
export declare const destructCosmosStakingHistoricalInfo: (g_struct: CosmosStakingHistoricalInfo) => [header?: TendermintTypesHeader, valset?: CosmosStakingValidator[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_HISTORICAL_INFO = "/cosmos.staking.v1beta1.HistoricalInfo";
/**
 * JSON serialization of `cosmos.staking.v1beta1.HistoricalInfo` - contains header and validator information for a given block. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter).
 */
export type CosmosStakingHistoricalInfo = {
    header?: TendermintTypesHeader | undefined;
    valset?: CosmosStakingValidator[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingHistoricalRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: apphash -
 *   - 1: time -
 *   - 2: validators_hash -
 */
export declare const destructCosmosStakingHistoricalRecord: (g_struct: CosmosStakingHistoricalRecord) => [apphash?: Uint8Array, time?: number, validators_hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_HISTORICAL_RECORD = "/cosmos.staking.v1beta1.HistoricalRecord";
/**
 * JSON serialization of `cosmos.staking.v1beta1.HistoricalRecord` - Historical contains a set of minimum values needed for evaluating historical validator sets and blocks. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter).
 */
export type CosmosStakingHistoricalRecord = {
    apphash?: CwBase64 | undefined;
    time?: WeakTimestampStr | undefined;
    validators_hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: not_bonded_tokens -
 *   - 1: bonded_tokens -
 */
export declare const destructCosmosStakingPool: (g_struct: CosmosStakingPool) => [not_bonded_tokens?: string, bonded_tokens?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_POOL = "/cosmos.staking.v1beta1.Pool";
/**
 * JSON serialization of `cosmos.staking.v1beta1.Pool` - used for tracking bonded and not-bonded token supply of the bond denomination.
 */
export type CosmosStakingPool = {
    not_bonded_tokens?: string | undefined;
    bonded_tokens?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingValAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: addresses -
 */
export declare const destructCosmosStakingValAddresses: (g_struct: CosmosStakingValAddresses) => [addresses?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_VAL_ADDRESSES = "/cosmos.staking.v1beta1.ValAddresses";
/**
 * JSON serialization of `cosmos.staking.v1beta1.ValAddresses` - defines a repeated set of validator addresses.
 */
export type CosmosStakingValAddresses = {
    addresses?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingDVPair} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_address -
 */
export declare const destructCosmosStakingDVPair: (g_struct: CosmosStakingDVPair) => [delegator_address?: CwAccountAddr, validator_address?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_PAIR = "/cosmos.staking.v1beta1.DVPair";
/**
 * JSON serialization of `cosmos.staking.v1beta1.DVPair` - struct that just has a delegator-validator pair with no other data. It is intended to be used as a marshalable pointer. For example, a DVPair can be used to construct the key to getting an UnbondingDelegation from state.
 */
export type CosmosStakingDVPair = {
    delegator_address?: CwAccountAddr | undefined;
    validator_address?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingDVPairs} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pairs -
 */
export declare const destructCosmosStakingDVPairs: (g_struct: CosmosStakingDVPairs) => [pairs?: CosmosStakingDVPair[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_PAIRS = "/cosmos.staking.v1beta1.DVPairs";
/**
 * JSON serialization of `cosmos.staking.v1beta1.DVPairs` - defines an array of DVPair objects.
 */
export type CosmosStakingDVPairs = {
    pairs?: CosmosStakingDVPair[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingDVVTriplet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_src_address -
 *   - 2: validator_dst_address -
 */
export declare const destructCosmosStakingDVVTriplet: (g_struct: CosmosStakingDVVTriplet) => [delegator_address?: CwAccountAddr, validator_src_address?: CwValidatorAddr, validator_dst_address?: CwValidatorAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_V_TRIPLET = "/cosmos.staking.v1beta1.DVVTriplet";
/**
 * JSON serialization of `cosmos.staking.v1beta1.DVVTriplet` - struct that just has a delegator-validator-validator triplet with no other data. It is intended to be used as a marshalable pointer. For example, a DVVTriplet can be used to construct the key to getting a Redelegation from state.
 */
export type CosmosStakingDVVTriplet = {
    delegator_address?: CwAccountAddr | undefined;
    validator_src_address?: CwValidatorAddr | undefined;
    validator_dst_address?: CwValidatorAddr | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingDVVTriplets} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: triplets -
 */
export declare const destructCosmosStakingDVVTriplets: (g_struct: CosmosStakingDVVTriplets) => [triplets?: CosmosStakingDVVTriplet[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_V_TRIPLETS = "/cosmos.staking.v1beta1.DVVTriplets";
/**
 * JSON serialization of `cosmos.staking.v1beta1.DVVTriplets` - defines an array of DVVTriplet objects.
 */
export type CosmosStakingDVVTriplets = {
    triplets?: CosmosStakingDVVTriplet[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmosStakingValidatorUpdates} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: updates -
 */
export declare const destructCosmosStakingValidatorUpdates: (g_struct: CosmosStakingValidatorUpdates) => [updates?: TendermintAbciValidatorUpdate[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_STAKING_VALIDATOR_UPDATES = "/cosmos.staking.v1beta1.ValidatorUpdates";
/**
 * JSON serialization of `cosmos.staking.v1beta1.ValidatorUpdates` - defines an array of abci.ValidatorUpdate objects. TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 */
export type CosmosStakingValidatorUpdates = {
    updates?: TendermintAbciValidatorUpdate[] | undefined;
};
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNSPECIFIED** - UNSPECIFIED defines an invalid validator status.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export declare const XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNSPECIFIED** - UNSPECIFIED defines an invalid validator status.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export declare const SI_JSON_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED = "Unspecified";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDED** - UNBONDED defines a validator that is not bonded.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export declare const XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDED = 1;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDED** - UNBONDED defines a validator that is not bonded.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export declare const SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDED = "Unbonded";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDING** - UNBONDING defines a validator that is unbonding.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export declare const XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDING = 2;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDING** - UNBONDING defines a validator that is unbonding.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export declare const SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDING = "Unbonding";
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_BONDED** - BONDED defines a validator that is bonded.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export declare const XC_PROTO_COSMOS_STAKING_BOND_STATUS_BONDED = 3;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_BONDED** - BONDED defines a validator that is bonded.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export declare const SI_JSON_COSMOS_STAKING_BOND_STATUS_BONDED = "Bonded";
/**
 * Raw protobuf enum values for `cosmos.staking.v1beta1.BondStatus` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED}
 *   - {@link XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDED}
 *   - {@link XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDING}
 *   - {@link XC_PROTO_COSMOS_STAKING_BOND_STATUS_BONDED}
 */
export type ProtoEnumCosmosStakingBondStatus = typeof XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED | typeof XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDED | typeof XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDING | typeof XC_PROTO_COSMOS_STAKING_BOND_STATUS_BONDED;
/**
 * JSON enum values for `cosmos.staking.v1beta1.BondStatus` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED}
 *   - {@link SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDED}
 *   - {@link SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDING}
 *   - {@link SI_JSON_COSMOS_STAKING_BOND_STATUS_BONDED}
 */
export type JsonEnumCosmosStakingBondStatus = typeof SI_JSON_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED | typeof SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDED | typeof SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDING | typeof SI_JSON_COSMOS_STAKING_BOND_STATUS_BONDED;
/**
 * Maps a protobuf enum int value for `cosmos.staking.v1beta1.BondStatus` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumCosmosStakingBondStatus: Record<ProtoEnumCosmosStakingBondStatus, JsonEnumCosmosStakingBondStatus>;
/**
 * Maps a JSON enum string value for `cosmos.staking.v1beta1.BondStatus` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumCosmosStakingBondStatus: Record<JsonEnumCosmosStakingBondStatus, ProtoEnumCosmosStakingBondStatus>;
