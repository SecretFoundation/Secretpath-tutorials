import { __UNDEFINED } from '@blake.regalia/belt';
import { parse_duration, parse_timestamp } from '../../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../../api/protobuf-reader.js';
import { Protobuf, temporal, coin } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../google/protobuf/any.js';
import { decodeTendermintAbciValidatorUpdate } from '../../../tendermint/abci/types.js';
import { decodeTendermintTypesHeader } from '../../../tendermint/types/types.js';
/**
 * Encodes a `HistoricalInfo` protobuf message: contains header and validator information for a given block. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter).
 * @param g_header - `header`:
 * @param a_valsets - `valset`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingHistoricalInfo = (atu8_header, a_valsets) => Protobuf() // ...
    .b(atu8_header) // Header header = 1
    .B(a_valsets) // Validator[] valset = 2
    .o;
/**
 * Encodes a `HistoricalRecord` protobuf message: Historical contains a set of minimum values needed for evaluating historical validator sets and blocks. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter).
 * @param atu8_apphash - `apphash`:
 * @param xt_time - `time`:
 * @param atu8_validators_hash - `validators_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingHistoricalRecord = (atu8_apphash, xt_time, atu8_validators_hash) => Protobuf() // ...
    .b(atu8_apphash) // bytes apphash = 1
    .b(temporal(xt_time)) // Timestamp time = 2
    .b(atu8_validators_hash) // bytes validators_hash = 3
    .o;
/**
 * Encodes a `CommissionRates` protobuf message: defines the initial commission rates to be used for creating a validator.
 * @param s_rate - `rate`: the commission rate charged to delegators, as a fraction.
 * @param s_max_rate - `max_rate`: defines the maximum commission rate which validator can ever charge, as a fraction.
 * @param s_max_change_rate - `max_change_rate`: defines the maximum daily increase of the validator commission, as a fraction.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingCommissionRates = (s_rate, s_max_rate, s_max_change_rate) => Protobuf() // ...
    .s(s_rate) // string rate = 1
    .s(s_max_rate) // string max_rate = 2
    .s(s_max_change_rate) // string max_change_rate = 3
    .o;
/**
 * Encodes a `Commission` protobuf message: defines commission parameters for a given validator.
 * @param g_commission_rates - `commission_rates`: defines the initial commission rates to be used for creating a validator.
 * @param xt_update_time - `update_time`: the last time the commission rate was changed.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingCommission = (atu8_commission_rates, xt_update_time) => Protobuf() // ...
    .b(atu8_commission_rates) // CommissionRates commission_rates = 1
    .b(temporal(xt_update_time)) // Timestamp update_time = 2
    .o;
/**
 * Encodes a `Description` protobuf message: defines a validator description.
 * @param s_moniker - `moniker`: defines a human-readable name for the validator.
 * @param s_identity - `identity`: defines an optional identity signature (ex. UPort or Keybase).
 * @param s_website - `website`: defines an optional website link.
 * @param s_security_contact - `security_contact`: defines an optional email for security contact.
 * @param s_details - `details`: define other optional details.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDescription = (s_moniker, s_identity, s_website, s_security_contact, s_details) => Protobuf() // ...
    .s(s_moniker) // string moniker = 1
    .s(s_identity) // string identity = 2
    .s(s_website) // string website = 3
    .s(s_security_contact) // string security_contact = 4
    .s(s_details) // string details = 5
    .o;
/**
 * Encodes a `Validator` protobuf message: defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 * @param sa_operator - `operator_address`: defines the address of the validator's operator; bech encoded in JSON.
 * @param atu8_consensus_pubkey - `consensus_pubkey`: the consensus public key of the validator, as a Protobuf Any.
 * @param b_jailed - `jailed`: defined whether the validator has been jailed from bonded status or not.
 * @param xc_status - `status`: the validator status (bonded/unbonding/unbonded).
 * @param s_tokens - `tokens`: define the delegated tokens (incl. self-delegation).
 * @param s_delegator_shares - `delegator_shares`: defines total shares issued to a validator's delegators.
 * @param g_description - `description`: defines the description terms for the validator.
 * @param sg_unbonding_height - `unbonding_height`: defines, if unbonding, the height at which this validator has begun unbonding.
 * @param xt_unbonding_time - `unbonding_time`: defines, if unbonding, the min time for the validator to complete unbonding.
 * @param g_commission - `commission`: defines the commission parameters.
 * @param s_min_self_delegation - `min_self_delegation`: the validator's self declared minimum self delegation. Since: cosmos-sdk 0.46
 * @param sg_unbonding_on_hold_ref_count - `unbonding_on_hold_ref_count`: strictly positive if this validator's unbonding has been stopped by external modules
 * @param a_unbonding_ids - `unbonding_ids`: list of unbonding ids, each uniquely identifing an unbonding of this validator
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingValidator = (sa_operator, atu8_consensus_pubkey, b_jailed, xc_status, s_tokens, s_delegator_shares, atu8_description, sg_unbonding_height, xt_unbonding_time, atu8_commission, s_min_self_delegation, sg_unbonding_on_hold_ref_count, a_unbonding_ids) => Protobuf() // ...
    .s(sa_operator) // string operator_address = 1
    .b(atu8_consensus_pubkey) // Any consensus_pubkey = 2
    .v(b_jailed) // boolean jailed = 3
    .v(xc_status) // BondStatus status = 4
    .s(s_tokens) // string tokens = 5
    .s(s_delegator_shares) // string delegator_shares = 6
    .b(atu8_description) // Description description = 7
    .g(sg_unbonding_height) // int32 unbonding_height = 8
    .b(temporal(xt_unbonding_time)) // Timestamp unbonding_time = 9
    .b(atu8_commission) // Commission commission = 10
    .s(s_min_self_delegation) // string min_self_delegation = 11
    .g(sg_unbonding_on_hold_ref_count) // int32 unbonding_on_hold_ref_count = 12
    .G(a_unbonding_ids) // uint64[] unbonding_ids = 13
    .o;
/**
 * Encodes a `ValAddresses` protobuf message: defines a repeated set of validator addresses.
 * @param a_addresses - `addresses`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingValAddresses = (a_addresses) => Protobuf() // ...
    .S(a_addresses) // string[] addresses = 1
    .o;
/**
 * Encodes a `DVPair` protobuf message: struct that just has a delegator-validator pair with no other data. It is intended to be used as a marshalable pointer. For example, a DVPair can be used to construct the key to getting an UnbondingDelegation from state.
 * @param sa_delegator - `delegator_address`:
 * @param sa_validator - `validator_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDVPair = (sa_delegator, sa_validator) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator) // string validator_address = 2
    .o;
/**
 * Encodes a `DVPairs` protobuf message: defines an array of DVPair objects.
 * @param a_pairs - `pairs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDVPairs = (a_pairs) => Protobuf() // ...
    .B(a_pairs) // DVPair[] pairs = 1
    .o;
/**
 * Encodes a `DVVTriplet` protobuf message: struct that just has a delegator-validator-validator triplet with no other data. It is intended to be used as a marshalable pointer. For example, a DVVTriplet can be used to construct the key to getting a Redelegation from state.
 * @param sa_delegator - `delegator_address`:
 * @param sa_validator_src - `validator_src_address`:
 * @param sa_validator_dst - `validator_dst_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDVVTriplet = (sa_delegator, sa_validator_src, sa_validator_dst) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator_src) // string validator_src_address = 2
    .s(sa_validator_dst) // string validator_dst_address = 3
    .o;
/**
 * Encodes a `DVVTriplets` protobuf message: defines an array of DVVTriplet objects.
 * @param a_triplets - `triplets`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDVVTriplets = (a_triplets) => Protobuf() // ...
    .B(a_triplets) // DVVTriplet[] triplets = 1
    .o;
/**
 * Encodes a `Delegation` protobuf message: represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 * @param sa_delegator - `delegator_address`: the encoded address of the delegator.
 * @param sa_validator - `validator_address`: the encoded address of the validator.
 * @param s_shares - `shares`: define the delegation shares received.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDelegation = (sa_delegator, sa_validator, s_shares) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator) // string validator_address = 2
    .s(s_shares) // string shares = 3
    .o;
/**
 * Encodes a `UnbondingDelegation` protobuf message: stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list.
 * @param sa_delegator - `delegator_address`: the encoded address of the delegator.
 * @param sa_validator - `validator_address`: the encoded address of the validator.
 * @param a_entries - `entries`: the unbonding delegation entries.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingUnbondingDelegation = (sa_delegator, sa_validator, a_entries) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator) // string validator_address = 2
    .B(a_entries) // UnbondingDelegationEntry[] entries = 3
    .o;
/**
 * Encodes a `UnbondingDelegationEntry` protobuf message: defines an unbonding object with relevant metadata.
 * @param sg_creation_height - `creation_height`: the height which the unbonding took place.
 * @param xt_completion_time - `completion_time`: the unix time for unbonding completion.
 * @param s_initial_balance - `initial_balance`: defines the tokens initially scheduled to receive at completion.
 * @param s_balance - `balance`: defines the tokens to receive at completion.
 * @param sg_unbonding_id - `unbonding_id`: Incrementing id that uniquely identifies this entry
 * @param sg_unbonding_on_hold_ref_count - `unbonding_on_hold_ref_count`: Strictly positive if this entry's unbonding has been stopped by external modules
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingUnbondingDelegationEntry = (sg_creation_height, xt_completion_time, s_initial_balance, s_balance, sg_unbonding_id, sg_unbonding_on_hold_ref_count) => Protobuf() // ...
    .g(sg_creation_height) // int32 creation_height = 1
    .b(temporal(xt_completion_time)) // Timestamp completion_time = 2
    .s(s_initial_balance) // string initial_balance = 3
    .s(s_balance) // string balance = 4
    .g(sg_unbonding_id) // uint64 unbonding_id = 5
    .g(sg_unbonding_on_hold_ref_count) // int32 unbonding_on_hold_ref_count = 6
    .o;
/**
 * Encodes a `RedelegationEntry` protobuf message: defines a redelegation object with relevant metadata.
 * @param sg_creation_height - `creation_height`: defines the height which the redelegation took place.
 * @param xt_completion_time - `completion_time`: defines the unix time for redelegation completion.
 * @param s_initial_balance - `initial_balance`: defines the initial balance when redelegation started.
 * @param s_shares_dst - `shares_dst`: the amount of destination-validator shares created by redelegation.
 * @param sg_unbonding_id - `unbonding_id`: Incrementing id that uniquely identifies this entry
 * @param sg_unbonding_on_hold_ref_count - `unbonding_on_hold_ref_count`: Strictly positive if this entry's unbonding has been stopped by external modules
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingRedelegationEntry = (sg_creation_height, xt_completion_time, s_initial_balance, s_shares_dst, sg_unbonding_id, sg_unbonding_on_hold_ref_count) => Protobuf() // ...
    .g(sg_creation_height) // int32 creation_height = 1
    .b(temporal(xt_completion_time)) // Timestamp completion_time = 2
    .s(s_initial_balance) // string initial_balance = 3
    .s(s_shares_dst) // string shares_dst = 4
    .g(sg_unbonding_id) // uint64 unbonding_id = 5
    .g(sg_unbonding_on_hold_ref_count) // int32 unbonding_on_hold_ref_count = 6
    .o;
/**
 * Encodes a `Redelegation` protobuf message: contains the list of a particular delegator's redelegating bonds from a particular source validator to a particular destination validator.
 * @param sa_delegator - `delegator_address`: the bech32-encoded address of the delegator.
 * @param sa_validator_src - `validator_src_address`: the validator redelegation source operator address.
 * @param sa_validator_dst - `validator_dst_address`: the validator redelegation destination operator address.
 * @param a_entries - `entries`: the redelegation entries.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingRedelegation = (sa_delegator, sa_validator_src, sa_validator_dst, a_entries) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator_src) // string validator_src_address = 2
    .s(sa_validator_dst) // string validator_dst_address = 3
    .B(a_entries) // RedelegationEntry[] entries = 4
    .o;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the x/staking module.
 * @param xt_unbonding_time - `unbonding_time`: the time duration of unbonding.
 * @param n_max_validators - `max_validators`: the maximum number of validators.
 * @param n_max_entries - `max_entries`: the max entries for either unbonding delegation or redelegation (per pair/trio).
 * @param n_historical_entries - `historical_entries`: the number of historical entries to persist.
 * @param s_bond_denom - `bond_denom`: defines the bondable coin denomination.
 * @param s_min_commission_rate - `min_commission_rate`: the chain-wide minimum commission rate that a validator can charge their delegators
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingParams = (xt_unbonding_time, n_max_validators, n_max_entries, n_historical_entries, s_bond_denom, s_min_commission_rate) => Protobuf() // ...
    .b(temporal(xt_unbonding_time)) // Duration unbonding_time = 1
    .v(n_max_validators) // uint32 max_validators = 2
    .v(n_max_entries) // uint32 max_entries = 3
    .v(n_historical_entries) // uint32 historical_entries = 4
    .s(s_bond_denom) // string bond_denom = 5
    .s(s_min_commission_rate) // string min_commission_rate = 6
    .o;
/**
 * Encodes a `DelegationResponse` protobuf message: equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 * @param g_delegation - `delegation`:
 * @param a_balance - `balance`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingDelegationResponse = (atu8_delegation, a_balance) => Protobuf() // ...
    .b(atu8_delegation) // Delegation delegation = 1
    .b(coin(a_balance)) // Coin balance = 2
    .o;
/**
 * Encodes a `RedelegationEntryResponse` protobuf message: equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 * @param g_redelegation_entry - `redelegation_entry`:
 * @param s_balance - `balance`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingRedelegationEntryResponse = (atu8_redelegation_entry, s_balance) => Protobuf() // ...
    .b(atu8_redelegation_entry) // RedelegationEntry redelegation_entry = 1
    .s(s_balance, 4) // string balance = 4
    .o;
/**
 * Encodes a `RedelegationResponse` protobuf message: equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 * @param g_redelegation - `redelegation`:
 * @param a_entries - `entries`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingRedelegationResponse = (atu8_redelegation, a_entries) => Protobuf() // ...
    .b(atu8_redelegation) // Redelegation redelegation = 1
    .B(a_entries) // RedelegationEntryResponse[] entries = 2
    .o;
/**
 * Encodes a `Pool` protobuf message: used for tracking bonded and not-bonded token supply of the bond denomination.
 * @param s_not_bonded_tokens - `not_bonded_tokens`:
 * @param s_bonded_tokens - `bonded_tokens`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingPool = (s_not_bonded_tokens, s_bonded_tokens) => Protobuf() // ...
    .s(s_not_bonded_tokens) // string not_bonded_tokens = 1
    .s(s_bonded_tokens) // string bonded_tokens = 2
    .o;
/**
 * Encodes a `ValidatorUpdates` protobuf message: defines an array of abci.ValidatorUpdate objects. TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
 * @param a_updates - `updates`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosStakingValidatorUpdates = (a_updates) => Protobuf() // ...
    .B(a_updates) // ValidatorUpdate[] updates = 1
    .o;
/**
 * Decodes a protobuf HistoricalInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingHistoricalInfo}
 */
export const decodeCosmosStakingHistoricalInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [decodeTendermintTypesHeader, decodeCosmosStakingValidator]);
/**
 * Decodes a protobuf HistoricalRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingHistoricalRecord}
 */
export const decodeCosmosStakingHistoricalRecord = (atu8_payload) => decode_protobuf(atu8_payload, [1, [3, 1], 1], [0, decode_temporal]);
/**
 * Decodes a protobuf CommissionRates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingCommissionRates}
 */
export const decodeCosmosStakingCommissionRates = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf Commission message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingCommission}
 */
export const decodeCosmosStakingCommission = (atu8_payload) => decode_protobuf(atu8_payload, [1, [3, 1]], [decodeCosmosStakingCommissionRates, decode_temporal]);
/**
 * Decodes a protobuf Description message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDescription}
 */
export const decodeCosmosStakingDescription = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 5]);
/**
 * Decodes a protobuf Validator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingValidator}
 */
export const decodeCosmosStakingValidator = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 1, 5, 5, 1, 3, [3, 1], 1, 5, 3, 2], [0, decodeGoogleProtobufAny, 0, 0, 0, 0, decodeCosmosStakingDescription, 0, decode_temporal, decodeCosmosStakingCommission]);
/**
 * Decodes a protobuf ValAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingValAddresses}
 */
export const decodeCosmosStakingValAddresses = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf DVPair message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVPair}
 */
export const decodeCosmosStakingDVPair = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf DVPairs message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVPairs}
 */
export const decodeCosmosStakingDVPairs = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosStakingDVPair]);
/**
 * Decodes a protobuf DVVTriplet message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVVTriplet}
 */
export const decodeCosmosStakingDVVTriplet = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf DVVTriplets message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDVVTriplets}
 */
export const decodeCosmosStakingDVVTriplets = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosStakingDVVTriplet]);
/**
 * Decodes a protobuf Delegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDelegation}
 */
export const decodeCosmosStakingDelegation = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf UnbondingDelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingUnbondingDelegation}
 */
export const decodeCosmosStakingUnbondingDelegation = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0], [0, 0, decodeCosmosStakingUnbondingDelegationEntry]);
/**
 * Decodes a protobuf UnbondingDelegationEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingUnbondingDelegationEntry}
 */
export const decodeCosmosStakingUnbondingDelegationEntry = (atu8_payload) => decode_protobuf(atu8_payload, [3, [3, 1], 5, 5, 3, 3], [0, decode_temporal]);
/**
 * Decodes a protobuf RedelegationEntry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingRedelegationEntry}
 */
export const decodeCosmosStakingRedelegationEntry = (atu8_payload) => decode_protobuf(atu8_payload, [3, [3, 1], 5, 5, 3, 3], [0, decode_temporal]);
/**
 * Decodes a protobuf Redelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingRedelegation}
 */
export const decodeCosmosStakingRedelegation = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 0], [0, 0, 0, decodeCosmosStakingRedelegationEntry]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingParams}
 */
export const decodeCosmosStakingParams = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1], 1, 1, 1, 5, 5], [decode_temporal]);
/**
 * Decodes a protobuf Delegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingDelegationResponse}
 */
export const decodeCosmosStakingDelegationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeCosmosStakingDelegation, decode_coin]);
/**
 * Decodes a protobuf RedelegationEntry message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosStakingRedelegationEntryResponse}
 */
export const decodeCosmosStakingRedelegationEntryResponse = ((atu8_payload, [a_redelegation_entry, , , s_balance] = decode_protobuf(atu8_payload, [1, 0, 0, 5], [decodeCosmosStakingRedelegationEntry])) => [a_redelegation_entry, __UNDEFINED, __UNDEFINED, s_balance]);
/**
 * Decodes a protobuf Redelegation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingRedelegationResponse}
 */
export const decodeCosmosStakingRedelegationResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [decodeCosmosStakingRedelegation, decodeCosmosStakingRedelegationEntryResponse]);
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingPool}
 */
export const decodeCosmosStakingPool = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ValidatorUpdates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosStakingValidatorUpdates}
 */
export const decodeCosmosStakingValidatorUpdates = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeTendermintAbciValidatorUpdate]);
/**
 * Destructures the fields of a {@link CosmosStakingDescription} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: moniker - defines a human-readable name for the validator.
 *   - 1: identity - defines an optional identity signature (ex. UPort or Keybase).
 *   - 2: website - defines an optional website link.
 *   - 3: security_contact - defines an optional email for security contact.
 *   - 4: details - define other optional details.
 */
export const destructCosmosStakingDescription = (g_struct) => [g_struct.moniker, g_struct.identity, g_struct.website, g_struct.security_contact, g_struct.details];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_DESCRIPTION = '/cosmos.staking.v1beta1.Description';
/**
 * Destructures the fields of a {@link CosmosStakingCommissionRates} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: rate - the commission rate charged to delegators, as a fraction.
 *   - 1: max_rate - defines the maximum commission rate which validator can ever charge, as a fraction.
 *   - 2: max_change_rate - defines the maximum daily increase of the validator commission, as a fraction.
 */
export const destructCosmosStakingCommissionRates = (g_struct) => [g_struct.rate, g_struct.max_rate, g_struct.max_change_rate];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_COMMISSION_RATES = '/cosmos.staking.v1beta1.CommissionRates';
/**
 * Destructures the fields of a {@link CosmosStakingParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unbonding_time - the time duration of unbonding.
 *   - 1: max_validators - the maximum number of validators.
 *   - 2: max_entries - the max entries for either unbonding delegation or redelegation (per pair/trio).
 *   - 3: historical_entries - the number of historical entries to persist.
 *   - 4: bond_denom - defines the bondable coin denomination.
 *   - 5: min_commission_rate - the chain-wide minimum commission rate that a validator can charge their delegators
 */
export const destructCosmosStakingParams = (g_struct) => [parse_duration(g_struct.unbonding_time), g_struct.max_validators, g_struct.max_entries, g_struct.historical_entries, g_struct.bond_denom, g_struct.min_commission_rate];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_PARAMS = '/cosmos.staking.v1beta1.Params';
/**
 * Destructures the fields of a {@link CosmosStakingValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: operator_address - defines the address of the validator's operator; bech encoded in JSON.
 *   - 1: consensus_pubkey - the consensus public key of the validator, as a Protobuf Any.
 *   - 2: jailed - defined whether the validator has been jailed from bonded status or not.
 *   - 3: status - the validator status (bonded/unbonding/unbonded).
 *   - 4: tokens - define the delegated tokens (incl. self-delegation).
 *   - 5: delegator_shares - defines total shares issued to a validator's delegators.
 *   - 6: description - defines the description terms for the validator.
 *   - 7: unbonding_height - defines, if unbonding, the height at which this validator has begun unbonding.
 *   - 8: unbonding_time - defines, if unbonding, the min time for the validator to complete unbonding.
 *   - 9: commission - defines the commission parameters.
 *   - 10: min_self_delegation - the validator's self declared minimum self delegation. Since: cosmos-sdk 0.46
 *   - 11: unbonding_on_hold_ref_count - strictly positive if this validator's unbonding has been stopped by external modules
 *   - 12: unbonding_ids - list of unbonding ids, each uniquely identifing an unbonding of this validator
 */
export const destructCosmosStakingValidator = (g_struct) => [g_struct.operator_address, g_struct.consensus_pubkey, g_struct.jailed, g_struct.status, g_struct.tokens, g_struct.delegator_shares, g_struct.description, g_struct.unbonding_height, parse_timestamp(g_struct.unbonding_time), g_struct.commission, g_struct.min_self_delegation, g_struct.unbonding_on_hold_ref_count, g_struct.unbonding_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_VALIDATOR = '/cosmos.staking.v1beta1.Validator';
/**
 * Destructures the fields of a {@link CosmosStakingCommission} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commission_rates - defines the initial commission rates to be used for creating a validator.
 *   - 1: update_time - the last time the commission rate was changed.
 */
export const destructCosmosStakingCommission = (g_struct) => [g_struct.commission_rates, parse_timestamp(g_struct.update_time)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_COMMISSION = '/cosmos.staking.v1beta1.Commission';
/**
 * Destructures the fields of a {@link CosmosStakingDelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegation -
 *   - 1: balance -
 */
export const destructCosmosStakingDelegationResponse = (g_struct) => [g_struct.delegation, g_struct.balance];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_DELEGATION_RESPONSE = '/cosmos.staking.v1beta1.DelegationResponse';
/**
 * Destructures the fields of a {@link CosmosStakingDelegation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the encoded address of the delegator.
 *   - 1: validator_address - the encoded address of the validator.
 *   - 2: shares - define the delegation shares received.
 */
export const destructCosmosStakingDelegation = (g_struct) => [g_struct.delegator_address, g_struct.validator_address, g_struct.shares];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_DELEGATION = '/cosmos.staking.v1beta1.Delegation';
/**
 * Destructures the fields of a {@link CosmosStakingUnbondingDelegation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the encoded address of the delegator.
 *   - 1: validator_address - the encoded address of the validator.
 *   - 2: entries - the unbonding delegation entries.
 */
export const destructCosmosStakingUnbondingDelegation = (g_struct) => [g_struct.delegator_address, g_struct.validator_address, g_struct.entries];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_UNBONDING_DELEGATION = '/cosmos.staking.v1beta1.UnbondingDelegation';
/**
 * Destructures the fields of a {@link CosmosStakingUnbondingDelegationEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: creation_height - the height which the unbonding took place.
 *   - 1: completion_time - the unix time for unbonding completion.
 *   - 2: initial_balance - defines the tokens initially scheduled to receive at completion.
 *   - 3: balance - defines the tokens to receive at completion.
 *   - 4: unbonding_id - Incrementing id that uniquely identifies this entry
 *   - 5: unbonding_on_hold_ref_count - Strictly positive if this entry's unbonding has been stopped by external modules
 */
export const destructCosmosStakingUnbondingDelegationEntry = (g_struct) => [g_struct.creation_height, parse_timestamp(g_struct.completion_time), g_struct.initial_balance, g_struct.balance, g_struct.unbonding_id, g_struct.unbonding_on_hold_ref_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_UNBONDING_DELEGATION_ENTRY = '/cosmos.staking.v1beta1.UnbondingDelegationEntry';
/**
 * Destructures the fields of a {@link CosmosStakingRedelegationResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: redelegation -
 *   - 1: entries -
 */
export const destructCosmosStakingRedelegationResponse = (g_struct) => [g_struct.redelegation, g_struct.entries];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION_RESPONSE = '/cosmos.staking.v1beta1.RedelegationResponse';
/**
 * Destructures the fields of a {@link CosmosStakingRedelegation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address - the bech32-encoded address of the delegator.
 *   - 1: validator_src_address - the validator redelegation source operator address.
 *   - 2: validator_dst_address - the validator redelegation destination operator address.
 *   - 3: entries - the redelegation entries.
 */
export const destructCosmosStakingRedelegation = (g_struct) => [g_struct.delegator_address, g_struct.validator_src_address, g_struct.validator_dst_address, g_struct.entries];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION = '/cosmos.staking.v1beta1.Redelegation';
/**
 * Destructures the fields of a {@link CosmosStakingRedelegationEntry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: creation_height - defines the height which the redelegation took place.
 *   - 1: completion_time - defines the unix time for redelegation completion.
 *   - 2: initial_balance - defines the initial balance when redelegation started.
 *   - 3: shares_dst - the amount of destination-validator shares created by redelegation.
 *   - 4: unbonding_id - Incrementing id that uniquely identifies this entry
 *   - 5: unbonding_on_hold_ref_count - Strictly positive if this entry's unbonding has been stopped by external modules
 */
export const destructCosmosStakingRedelegationEntry = (g_struct) => [g_struct.creation_height, parse_timestamp(g_struct.completion_time), g_struct.initial_balance, g_struct.shares_dst, g_struct.unbonding_id, g_struct.unbonding_on_hold_ref_count];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION_ENTRY = '/cosmos.staking.v1beta1.RedelegationEntry';
/**
 * Destructures the fields of a {@link CosmosStakingRedelegationEntryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: redelegation_entry -
 *   - 3: balance -
 */
export const destructCosmosStakingRedelegationEntryResponse = (g_struct) => [g_struct.redelegation_entry, __UNDEFINED, __UNDEFINED, g_struct.balance];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_REDELEGATION_ENTRY_RESPONSE = '/cosmos.staking.v1beta1.RedelegationEntryResponse';
/**
 * Destructures the fields of a {@link CosmosStakingHistoricalInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: header -
 *   - 1: valset -
 */
export const destructCosmosStakingHistoricalInfo = (g_struct) => [g_struct.header, g_struct.valset];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_HISTORICAL_INFO = '/cosmos.staking.v1beta1.HistoricalInfo';
/**
 * Destructures the fields of a {@link CosmosStakingHistoricalRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: apphash -
 *   - 1: time -
 *   - 2: validators_hash -
 */
export const destructCosmosStakingHistoricalRecord = (g_struct) => [safe_base64_to_bytes(g_struct.apphash), parse_timestamp(g_struct.time), safe_base64_to_bytes(g_struct.validators_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_HISTORICAL_RECORD = '/cosmos.staking.v1beta1.HistoricalRecord';
/**
 * Destructures the fields of a {@link CosmosStakingPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: not_bonded_tokens -
 *   - 1: bonded_tokens -
 */
export const destructCosmosStakingPool = (g_struct) => [g_struct.not_bonded_tokens, g_struct.bonded_tokens];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_POOL = '/cosmos.staking.v1beta1.Pool';
/**
 * Destructures the fields of a {@link CosmosStakingValAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: addresses -
 */
export const destructCosmosStakingValAddresses = (g_struct) => [g_struct.addresses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_VAL_ADDRESSES = '/cosmos.staking.v1beta1.ValAddresses';
/**
 * Destructures the fields of a {@link CosmosStakingDVPair} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_address -
 */
export const destructCosmosStakingDVPair = (g_struct) => [g_struct.delegator_address, g_struct.validator_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_PAIR = '/cosmos.staking.v1beta1.DVPair';
/**
 * Destructures the fields of a {@link CosmosStakingDVPairs} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pairs -
 */
export const destructCosmosStakingDVPairs = (g_struct) => [g_struct.pairs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_PAIRS = '/cosmos.staking.v1beta1.DVPairs';
/**
 * Destructures the fields of a {@link CosmosStakingDVVTriplet} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_src_address -
 *   - 2: validator_dst_address -
 */
export const destructCosmosStakingDVVTriplet = (g_struct) => [g_struct.delegator_address, g_struct.validator_src_address, g_struct.validator_dst_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_V_TRIPLET = '/cosmos.staking.v1beta1.DVVTriplet';
/**
 * Destructures the fields of a {@link CosmosStakingDVVTriplets} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: triplets -
 */
export const destructCosmosStakingDVVTriplets = (g_struct) => [g_struct.triplets];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_D_V_V_TRIPLETS = '/cosmos.staking.v1beta1.DVVTriplets';
/**
 * Destructures the fields of a {@link CosmosStakingValidatorUpdates} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: updates -
 */
export const destructCosmosStakingValidatorUpdates = (g_struct) => [g_struct.updates];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_STAKING_VALIDATOR_UPDATES = '/cosmos.staking.v1beta1.ValidatorUpdates';
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNSPECIFIED** - UNSPECIFIED defines an invalid validator status.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export const XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED = 0;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNSPECIFIED** - UNSPECIFIED defines an invalid validator status.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export const SI_JSON_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED = 'Unspecified';
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDED** - UNBONDED defines a validator that is not bonded.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export const XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDED = 1;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDED** - UNBONDED defines a validator that is not bonded.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export const SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDED = 'Unbonded';
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDING** - UNBONDING defines a validator that is unbonding.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export const XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDING = 2;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_UNBONDING** - UNBONDING defines a validator that is unbonding.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export const SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDING = 'Unbonding';
/**
 * Protobuf enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_BONDED** - BONDED defines a validator that is bonded.
 *
 * Belongs to enum type {@link ProtoEnumCosmosStakingBondStatus}
 */
export const XC_PROTO_COSMOS_STAKING_BOND_STATUS_BONDED = 3;
/**
 * JSON enum value for `cosmos.staking.v1beta1.BondStatus`.
 *
 * **BOND_STATUS_BONDED** - BONDED defines a validator that is bonded.
 *
 * Belongs to enum type {@link JsonEnumCosmosStakingBondStatus}
 */
export const SI_JSON_COSMOS_STAKING_BOND_STATUS_BONDED = 'Bonded';
/**
 * Maps a protobuf enum int value for `cosmos.staking.v1beta1.BondStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumCosmosStakingBondStatus = {
    [XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED]: SI_JSON_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED,
    [XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDED]: SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDED,
    [XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDING]: SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDING,
    [XC_PROTO_COSMOS_STAKING_BOND_STATUS_BONDED]: SI_JSON_COSMOS_STAKING_BOND_STATUS_BONDED,
};
/**
 * Maps a JSON enum string value for `cosmos.staking.v1beta1.BondStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumCosmosStakingBondStatus = {
    [SI_JSON_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED]: XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNSPECIFIED,
    [SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDED]: XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDED,
    [SI_JSON_COSMOS_STAKING_BOND_STATUS_UNBONDING]: XC_PROTO_COSMOS_STAKING_BOND_STATUS_UNBONDING,
    [SI_JSON_COSMOS_STAKING_BOND_STATUS_BONDED]: XC_PROTO_COSMOS_STAKING_BOND_STATUS_BONDED,
};
//# sourceMappingURL=staking.js.map