import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosUpgradePlan, decodeCosmosUpgradeModuleVersion } from './upgrade.js';
const SR_LCD_COSMOS_UPGRADE_QUERY = '/cosmos/upgrade/v1beta1/';
/**
 * Queries the current upgrade plan.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: plan - the current upgrade plan.
 */
export const queryCosmosUpgradeCurrentPlan = restful_grpc(() => [SR_LCD_COSMOS_UPGRADE_QUERY + 'current_plan']);
/**
 * Queries a previously applied upgrade plan by its name.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_name - the name of the applied plan to query for.
 * @returns a tuple where:
 *   - 0: height - the block height at which the plan was applied.
 */
export const queryCosmosUpgradeAppliedPlan = restful_grpc(s_name => [SR_LCD_COSMOS_UPGRADE_QUERY + 'applied_plan/' + s_name]);
/**
 * Queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_last_height - last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 * @returns a tuple where:
 *   - 0: upgraded_consensus_state - Since: cosmos-sdk 0.43
 */
export const queryCosmosUpgradeUpgradedConsensusState = restful_grpc(sg_last_height => [SR_LCD_COSMOS_UPGRADE_QUERY + 'upgraded_consensus_state/' + sg_last_height]);
/**
 * Queries the list of module versions from state. Since: cosmos-sdk 0.43
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_module_name - a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 * @returns a tuple where:
 *   - 0: module_versions - a list of module names with their consensus versions.
 */
export const queryCosmosUpgradeModuleVersions = restful_grpc(s_module_name => [SR_LCD_COSMOS_UPGRADE_QUERY + 'module_versions', {
        module_name: s_module_name,
    }]);
/**
 * Returns the account with authority to conduct upgrades Since: cosmos-sdk 0.46
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: address - the 'address' response property
 */
export const queryCosmosUpgradeAuthority = restful_grpc(() => [SR_LCD_COSMOS_UPGRADE_QUERY + 'authority']);
/**
 * Encodes a `QueryCurrentPlanRequest` protobuf message: the request type for the Query/CurrentPlan RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryCurrentPlanRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryCurrentPlanResponse` protobuf message: the response type for the Query/CurrentPlan RPC method.
 * @param g_plan - `plan`: the current upgrade plan.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryCurrentPlanResponse = (atu8_plan) => Protobuf() // ...
    .b(atu8_plan) // Plan plan = 1
    .o;
/**
 * Encodes a `QueryAppliedPlanRequest` protobuf message: QueryCurrentPlanRequest is the request type for the Query/AppliedPlan RPC method.
 * @param s_name - `name`: the name of the applied plan to query for.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryAppliedPlanRequest = (s_name) => Protobuf() // ...
    .s(s_name) // string name = 1
    .o;
/**
 * Encodes a `QueryAppliedPlanResponse` protobuf message: the response type for the Query/AppliedPlan RPC method.
 * @param sg_height - `height`: the block height at which the plan was applied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryAppliedPlanResponse = (sg_height) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .o;
/**
 * Encodes a `QueryUpgradedConsensusStateRequest` protobuf message: the request type for the Query/UpgradedConsensusState RPC method.
 * @param sg_last_height - `last_height`: last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryUpgradedConsensusStateRequest = (sg_last_height) => Protobuf() // ...
    .g(sg_last_height) // int32 last_height = 1
    .o;
/**
 * Encodes a `QueryUpgradedConsensusStateResponse` protobuf message: the response type for the Query/UpgradedConsensusState RPC method.
 * @param atu8_upgraded_consensus_state - `upgraded_consensus_state`: Since: cosmos-sdk 0.43
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryUpgradedConsensusStateResponse = (atu8_upgraded_consensus_state) => Protobuf() // ...
    .b(atu8_upgraded_consensus_state, 2) // bytes upgraded_consensus_state = 2
    .o;
/**
 * Encodes a `QueryModuleVersionsRequest` protobuf message: the request type for the Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
 * @param s_module_name - `module_name`: a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryModuleVersionsRequest = (s_module_name) => Protobuf() // ...
    .s(s_module_name) // string module_name = 1
    .o;
/**
 * Encodes a `QueryModuleVersionsResponse` protobuf message: the response type for the Query/ModuleVersions RPC method. Since: cosmos-sdk 0.43
 * @param a_module_versions - `module_versions`: a list of module names with their consensus versions.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryModuleVersionsResponse = (a_module_versions) => Protobuf() // ...
    .B(a_module_versions) // ModuleVersion[] module_versions = 1
    .o;
/**
 * Encodes a `QueryAuthorityRequest` protobuf message: the request type for Query/Authority Since: cosmos-sdk 0.46
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryAuthorityRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryAuthorityResponse` protobuf message: the response type for Query/Authority Since: cosmos-sdk 0.46
 * @param sa_address - `address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosUpgradeQueryAuthorityResponse = (sa_address) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .o;
/**
 * Decodes a protobuf QueryCurrentPlanRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryCurrentPlanRequest}
 */
export const decodeCosmosUpgradeQueryCurrentPlanRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryCurrentPlan message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryCurrentPlanResponse}
 */
export const decodeCosmosUpgradeQueryCurrentPlanResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosUpgradePlan]);
/**
 * Decodes a protobuf QueryAppliedPlanRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAppliedPlanRequest}
 */
export const decodeCosmosUpgradeQueryAppliedPlanRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryAppliedPlan message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAppliedPlanResponse}
 */
export const decodeCosmosUpgradeQueryAppliedPlanResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryUpgradedConsensusStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryUpgradedConsensusStateRequest}
 */
export const decodeCosmosUpgradeQueryUpgradedConsensusStateRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryUpgradedConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmosUpgradeQueryUpgradedConsensusStateResponse}
 */
export const decodeCosmosUpgradeQueryUpgradedConsensusStateResponse = ((atu8_payload, [, atu8_upgraded_consensus_state] = decode_protobuf(atu8_payload, [0, 1])) => [__UNDEFINED, atu8_upgraded_consensus_state]);
/**
 * Decodes a protobuf QueryModuleVersionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryModuleVersionsRequest}
 */
export const decodeCosmosUpgradeQueryModuleVersionsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryModuleVersions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryModuleVersionsResponse}
 */
export const decodeCosmosUpgradeQueryModuleVersionsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosUpgradeModuleVersion]);
/**
 * Decodes a protobuf QueryAuthorityRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAuthorityRequest}
 */
export const decodeCosmosUpgradeQueryAuthorityRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryAuthority message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeQueryAuthorityResponse}
 */
export const decodeCosmosUpgradeQueryAuthorityResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryCurrentPlanRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosUpgradeQueryCurrentPlanRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_CURRENT_PLAN_REQUEST = '/cosmos.upgrade.v1beta1.QueryCurrentPlanRequest';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryCurrentPlanResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: plan - the current upgrade plan.
 */
export const destructCosmosUpgradeQueryCurrentPlanResponse = (g_struct) => [g_struct.plan];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_CURRENT_PLAN_RESPONSE = '/cosmos.upgrade.v1beta1.QueryCurrentPlanResponse';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAppliedPlanRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - the name of the applied plan to query for.
 */
export const destructCosmosUpgradeQueryAppliedPlanRequest = (g_struct) => [g_struct.name];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_APPLIED_PLAN_REQUEST = '/cosmos.upgrade.v1beta1.QueryAppliedPlanRequest';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAppliedPlanResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - the block height at which the plan was applied.
 */
export const destructCosmosUpgradeQueryAppliedPlanResponse = (g_struct) => [g_struct.height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_APPLIED_PLAN_RESPONSE = '/cosmos.upgrade.v1beta1.QueryAppliedPlanResponse';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryUpgradedConsensusStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: last_height - last height of the current chain must be sent in request as this is the height under which next consensus state is stored
 */
export const destructCosmosUpgradeQueryUpgradedConsensusStateRequest = (g_struct) => [g_struct.last_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_UPGRADED_CONSENSUS_STATE_REQUEST = '/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryUpgradedConsensusStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: upgraded_consensus_state - Since: cosmos-sdk 0.43
 */
export const destructCosmosUpgradeQueryUpgradedConsensusStateResponse = (g_struct) => [__UNDEFINED, safe_base64_to_bytes(g_struct.upgraded_consensus_state)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_UPGRADED_CONSENSUS_STATE_RESPONSE = '/cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryModuleVersionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module_name - a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state
 */
export const destructCosmosUpgradeQueryModuleVersionsRequest = (g_struct) => [g_struct.module_name];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_MODULE_VERSIONS_REQUEST = '/cosmos.upgrade.v1beta1.QueryModuleVersionsRequest';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryModuleVersionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: module_versions - a list of module names with their consensus versions.
 */
export const destructCosmosUpgradeQueryModuleVersionsResponse = (g_struct) => [g_struct.module_versions];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_MODULE_VERSIONS_RESPONSE = '/cosmos.upgrade.v1beta1.QueryModuleVersionsResponse';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAuthorityRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmosUpgradeQueryAuthorityRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_AUTHORITY_REQUEST = '/cosmos.upgrade.v1beta1.QueryAuthorityRequest';
/**
 * Destructures the fields of a {@link CosmosUpgradeQueryAuthorityResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 */
export const destructCosmosUpgradeQueryAuthorityResponse = (g_struct) => [g_struct.address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_UPGRADE_QUERY_AUTHORITY_RESPONSE = '/cosmos.upgrade.v1beta1.QueryAuthorityResponse';
//# sourceMappingURL=query.js.map