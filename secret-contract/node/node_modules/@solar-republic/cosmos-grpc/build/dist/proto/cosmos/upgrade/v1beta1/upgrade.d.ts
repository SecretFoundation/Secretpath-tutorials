import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt, WeakTimestampStr } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type AnyCosmosUpgradeSoftwareUpgradeProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type AnyCosmosUpgradeCancelSoftwareUpgradeProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosUpgradePlan = Encoded<'/cosmos.upgrade.v1beta1.Plan'>;
export type EncodedCosmosUpgradeSoftwareUpgradeProposal = Encoded<'/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosUpgradeCancelSoftwareUpgradeProposal = Encoded<'/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedCosmosUpgradeModuleVersion = Encoded<'/cosmos.upgrade.v1beta1.ModuleVersion'>;
/**
 * Encodes a `SoftwareUpgradeProposal` protobuf message wrapped in the `Any` container: a gov Content type for initiating a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgSoftwareUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @param g_plan - `plan`: of the proposal
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anySoftwareUpgradeProposal: (s_title?: Opt<string>, s_description?: Opt<string>, atu8_plan?: Opt<Encoded<'/cosmos.upgrade.v1beta1.Plan'>>) => AnyCosmosUpgradeSoftwareUpgradeProposal;
/**
 * Encodes a `CancelSoftwareUpgradeProposal` protobuf message wrapped in the `Any` container: a gov Content type for cancelling a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgCancelUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyCancelSoftwareUpgradeProposal: (s_title?: Opt<string>, s_description?: Opt<string>) => AnyCosmosUpgradeCancelSoftwareUpgradeProposal;
/**
 * Encodes a `Plan` protobuf message: specifies information about a planned upgrade and when it should occur.
 * @param s_name - `name`: Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special "on-upgrade" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
 * @param xt_time - `time`: Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
 * @param sg_height - `height`: The height at which the upgrade must be performed.
 * @param s_info - `info`: Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to
 * @param atu8_upgraded_client_state - `upgraded_client_state`: Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradePlan: (s_name?: Opt<string>, xt_time?: Opt<number>, sg_height?: Opt<WeakInt64Str>, s_info?: Opt<string>, atu8_upgraded_client_state?: Opt<Uint8Array>) => EncodedCosmosUpgradePlan;
/**
 * Encodes a `SoftwareUpgradeProposal` protobuf message: a gov Content type for initiating a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgSoftwareUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @param g_plan - `plan`: of the proposal
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeSoftwareUpgradeProposal: (s_title?: Opt<string>, s_description?: Opt<string>, atu8_plan?: Opt<Encoded<'/cosmos.upgrade.v1beta1.Plan'>>) => EncodedCosmosUpgradeSoftwareUpgradeProposal;
/**
 * Encodes a `CancelSoftwareUpgradeProposal` protobuf message: a gov Content type for cancelling a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgCancelUpgrade.
 * @param s_title - `title`: of the proposal
 * @param s_description - `description`: of the proposal
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeCancelSoftwareUpgradeProposal: (s_title?: Opt<string>, s_description?: Opt<string>) => EncodedCosmosUpgradeCancelSoftwareUpgradeProposal;
/**
 * Encodes a `ModuleVersion` protobuf message: specifies a module and its consensus version. Since: cosmos-sdk 0.43
 * @param s_name - `name`: of the app module
 * @param sg_version - `version`: consensus version of the app module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmosUpgradeModuleVersion: (s_name?: Opt<string>, sg_version?: Opt<WeakUint64Str>) => EncodedCosmosUpgradeModuleVersion;
/**
 * A decoded protobuf Plan message
 *
 * Tuple where:
 *   - 0: name - Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special "on-upgrade" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
 *   - 1: time - Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
 *   - 2: height - The height at which the upgrade must be performed.
 *   - 3: info - Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to
 *   - 4: upgraded_client_state - Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.
 */
export type DecodedCosmosUpgradePlan = [
    s_name?: string,
    a_time?: [
        string,
        number
    ],
    sg_height?: CwInt64,
    s_info?: string,
    a_upgraded_client_state?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf Plan message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradePlan}
 */
export declare const decodeCosmosUpgradePlan: (atu8_payload: Uint8Array) => DecodedCosmosUpgradePlan;
/**
 * A decoded protobuf SoftwareUpgradeProposal message
 *
 * Tuple where:
 *   - 0: title - of the proposal
 *   - 1: description - of the proposal
 *   - 2: plan - of the proposal
 */
export type DecodedCosmosUpgradeSoftwareUpgradeProposal = [
    s_title?: string,
    s_description?: string,
    a_plan?: DecodedCosmosUpgradePlan
];
/**
 * Decodes a protobuf SoftwareUpgradeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeSoftwareUpgradeProposal}
 */
export declare const decodeCosmosUpgradeSoftwareUpgradeProposal: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeSoftwareUpgradeProposal;
/**
 * A decoded protobuf CancelSoftwareUpgradeProposal message
 *
 * Tuple where:
 *   - 0: title - of the proposal
 *   - 1: description - of the proposal
 */
export type DecodedCosmosUpgradeCancelSoftwareUpgradeProposal = [
    s_title?: string,
    s_description?: string
];
/**
 * Decodes a protobuf CancelSoftwareUpgradeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeCancelSoftwareUpgradeProposal}
 */
export declare const decodeCosmosUpgradeCancelSoftwareUpgradeProposal: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeCancelSoftwareUpgradeProposal;
/**
 * A decoded protobuf ModuleVersion message
 *
 * Tuple where:
 *   - 0: name - of the app module
 *   - 1: version - consensus version of the app module
 */
export type DecodedCosmosUpgradeModuleVersion = [
    s_name?: string,
    sg_version?: CwUint64
];
/**
 * Decodes a protobuf ModuleVersion message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosUpgradeModuleVersion}
 */
export declare const decodeCosmosUpgradeModuleVersion: (atu8_payload: Uint8Array) => DecodedCosmosUpgradeModuleVersion;
/**
 * Destructures the fields of a {@link CosmosUpgradePlan} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special "on-upgrade" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
 *   - 1: time - Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
 *   - 2: height - The height at which the upgrade must be performed.
 *   - 3: info - Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to
 *   - 4: upgraded_client_state - Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.
 */
export declare const destructCosmosUpgradePlan: (g_struct: CosmosUpgradePlan) => [name?: string, time?: number, height?: CwInt64, info?: string, upgraded_client_state?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_PLAN = "/cosmos.upgrade.v1beta1.Plan";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.Plan` - specifies information about a planned upgrade and when it should occur.
 */
export type CosmosUpgradePlan = {
    name?: string | undefined;
    time?: WeakTimestampStr | undefined;
    height?: CwInt64 | undefined;
    info?: string | undefined;
    upgraded_client_state?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeSoftwareUpgradeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - of the proposal
 *   - 1: description - of the proposal
 *   - 2: plan - of the proposal
 */
export declare const destructCosmosUpgradeSoftwareUpgradeProposal: (g_struct: CosmosUpgradeSoftwareUpgradeProposal) => [title?: string, description?: string, plan?: CosmosUpgradePlan];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_SOFTWARE_UPGRADE_PROPOSAL = "/cosmos.upgrade.v1beta1.SoftwareUpgradeProposal";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.SoftwareUpgradeProposal` - a gov Content type for initiating a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgSoftwareUpgrade.
 */
export type CosmosUpgradeSoftwareUpgradeProposal = {
    title?: string | undefined;
    description?: string | undefined;
    plan?: CosmosUpgradePlan | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeCancelSoftwareUpgradeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - of the proposal
 *   - 1: description - of the proposal
 */
export declare const destructCosmosUpgradeCancelSoftwareUpgradeProposal: (g_struct: CosmosUpgradeCancelSoftwareUpgradeProposal) => [title?: string, description?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_CANCEL_SOFTWARE_UPGRADE_PROPOSAL = "/cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal` - a gov Content type for cancelling a software upgrade. Deprecated: This legacy proposal is deprecated in favor of Msg-based gov proposals, see MsgCancelUpgrade.
 */
export type CosmosUpgradeCancelSoftwareUpgradeProposal = {
    title?: string | undefined;
    description?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmosUpgradeModuleVersion} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - of the app module
 *   - 1: version - consensus version of the app module
 */
export declare const destructCosmosUpgradeModuleVersion: (g_struct: CosmosUpgradeModuleVersion) => [name?: string, version?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMOS_UPGRADE_MODULE_VERSION = "/cosmos.upgrade.v1beta1.ModuleVersion";
/**
 * JSON serialization of `cosmos.upgrade.v1beta1.ModuleVersion` - specifies a module and its consensus version. Since: cosmos-sdk 0.43
 */
export type CosmosUpgradeModuleVersion = {
    name?: string | undefined;
    version?: CwUint64 | undefined;
};
