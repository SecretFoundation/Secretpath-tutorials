import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { decodeCosmosAuthBaseAccount } from '../../auth/v1beta1/auth.js';
/**
 * Encodes a `BaseVestingAccount` protobuf message: implements the VestingAccount interface. It contains all the necessary fields needed for any vesting account implementation.
 * @param g_base_account - `base_account`:
 * @param a_original_vestings - `original_vesting`:
 * @param a_delegated_frees - `delegated_free`:
 * @param a_delegated_vestings - `delegated_vesting`:
 * @param sg_end_time - `end_time`: Vesting end time, as unix timestamp (in seconds).
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosVestingBaseVestingAccount = (atu8_base_account, a_original_vestings, a_delegated_frees, a_delegated_vestings, sg_end_time) => Protobuf() // ...
    .b(atu8_base_account) // BaseAccount base_account = 1
    .B(coins(a_original_vestings)) // Coin[] original_vesting = 2
    .B(coins(a_delegated_frees)) // Coin[] delegated_free = 3
    .B(coins(a_delegated_vestings)) // Coin[] delegated_vesting = 4
    .g(sg_end_time) // int32 end_time = 5
    .o;
/**
 * Encodes a `ContinuousVestingAccount` protobuf message: implements the VestingAccount interface. It continuously vests by unlocking coins linearly with respect to time.
 * @param g_base_vesting_account - `base_vesting_account`:
 * @param sg_start_time - `start_time`: Vesting start time, as unix timestamp (in seconds).
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosVestingContinuousVestingAccount = (atu8_base_vesting_account, sg_start_time) => Protobuf() // ...
    .b(atu8_base_vesting_account) // BaseVestingAccount base_vesting_account = 1
    .g(sg_start_time) // int32 start_time = 2
    .o;
/**
 * Encodes a `DelayedVestingAccount` protobuf message: implements the VestingAccount interface. It vests all coins after a specific time, but non prior. In other words, it keeps them locked until a specified time.
 * @param g_base_vesting_account - `base_vesting_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosVestingDelayedVestingAccount = (atu8_base_vesting_account) => Protobuf() // ...
    .b(atu8_base_vesting_account) // BaseVestingAccount base_vesting_account = 1
    .o;
/**
 * Encodes a `Period` protobuf message: defines a length of time and amount of coins that will vest.
 * @param sg_length - `length`: Period duration in seconds.
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosVestingPeriod = (sg_length, a_amounts) => Protobuf() // ...
    .g(sg_length) // int32 length = 1
    .B(coins(a_amounts)) // Coin[] amount = 2
    .o;
/**
 * Encodes a `PeriodicVestingAccount` protobuf message: implements the VestingAccount interface. It periodically vests by unlocking coins during each specified period.
 * @param g_base_vesting_account - `base_vesting_account`:
 * @param sg_start_time - `start_time`:
 * @param a_vesting_periods - `vesting_periods`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosVestingPeriodicVestingAccount = (atu8_base_vesting_account, sg_start_time, a_vesting_periods) => Protobuf() // ...
    .b(atu8_base_vesting_account) // BaseVestingAccount base_vesting_account = 1
    .g(sg_start_time) // int32 start_time = 2
    .B(a_vesting_periods) // Period[] vesting_periods = 3
    .o;
/**
 * Encodes a `PermanentLockedAccount` protobuf message: implements the VestingAccount interface. It does not ever release coins, locking them indefinitely. Coins in this account can still be used for delegating and for governance votes even while locked. Since: cosmos-sdk 0.43
 * @param g_base_vesting_account - `base_vesting_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmosVestingPermanentLockedAccount = (atu8_base_vesting_account) => Protobuf() // ...
    .b(atu8_base_vesting_account) // BaseVestingAccount base_vesting_account = 1
    .o;
/**
 * Decodes a protobuf BaseVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingBaseVestingAccount}
 */
export const decodeCosmosVestingBaseVestingAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 0, 0, 3], [decodeCosmosAuthBaseAccount, decode_coin, decode_coin, decode_coin]);
/**
 * Decodes a protobuf ContinuousVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingContinuousVestingAccount}
 */
export const decodeCosmosVestingContinuousVestingAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeCosmosVestingBaseVestingAccount]);
/**
 * Decodes a protobuf DelayedVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingDelayedVestingAccount}
 */
export const decodeCosmosVestingDelayedVestingAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosVestingBaseVestingAccount]);
/**
 * Decodes a protobuf Period message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingPeriod}
 */
export const decodeCosmosVestingPeriod = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0], [0, decode_coin]);
/**
 * Decodes a protobuf PeriodicVestingAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingPeriodicVestingAccount}
 */
export const decodeCosmosVestingPeriodicVestingAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 0], [decodeCosmosVestingBaseVestingAccount, 0, decodeCosmosVestingPeriod]);
/**
 * Decodes a protobuf PermanentLockedAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmosVestingPermanentLockedAccount}
 */
export const decodeCosmosVestingPermanentLockedAccount = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosVestingBaseVestingAccount]);
/**
 * Destructures the fields of a {@link CosmosVestingPeriod} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: length - Period duration in seconds.
 *   - 1: amount -
 */
export const destructCosmosVestingPeriod = (g_struct) => [g_struct.length, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_VESTING_PERIOD = '/cosmos.vesting.v1beta1.Period';
/**
 * Destructures the fields of a {@link CosmosVestingBaseVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_account -
 *   - 1: original_vesting -
 *   - 2: delegated_free -
 *   - 3: delegated_vesting -
 *   - 4: end_time - Vesting end time, as unix timestamp (in seconds).
 */
export const destructCosmosVestingBaseVestingAccount = (g_struct) => [g_struct.base_account, g_struct.original_vesting, g_struct.delegated_free, g_struct.delegated_vesting, g_struct.end_time];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_VESTING_BASE_VESTING_ACCOUNT = '/cosmos.vesting.v1beta1.BaseVestingAccount';
/**
 * Destructures the fields of a {@link CosmosVestingContinuousVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 *   - 1: start_time - Vesting start time, as unix timestamp (in seconds).
 */
export const destructCosmosVestingContinuousVestingAccount = (g_struct) => [g_struct.base_vesting_account, g_struct.start_time];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_VESTING_CONTINUOUS_VESTING_ACCOUNT = '/cosmos.vesting.v1beta1.ContinuousVestingAccount';
/**
 * Destructures the fields of a {@link CosmosVestingDelayedVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 */
export const destructCosmosVestingDelayedVestingAccount = (g_struct) => [g_struct.base_vesting_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_VESTING_DELAYED_VESTING_ACCOUNT = '/cosmos.vesting.v1beta1.DelayedVestingAccount';
/**
 * Destructures the fields of a {@link CosmosVestingPeriodicVestingAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 *   - 1: start_time -
 *   - 2: vesting_periods -
 */
export const destructCosmosVestingPeriodicVestingAccount = (g_struct) => [g_struct.base_vesting_account, g_struct.start_time, g_struct.vesting_periods];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_VESTING_PERIODIC_VESTING_ACCOUNT = '/cosmos.vesting.v1beta1.PeriodicVestingAccount';
/**
 * Destructures the fields of a {@link CosmosVestingPermanentLockedAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_vesting_account -
 */
export const destructCosmosVestingPermanentLockedAccount = (g_struct) => [g_struct.base_vesting_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMOS_VESTING_PERMANENT_LOCKED_ACCOUNT = '/cosmos.vesting.v1beta1.PermanentLockedAccount';
//# sourceMappingURL=vesting.js.map