import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedCosmwasmWasmMsgIBCSend = Encoded<'/cosmwasm.wasm.v1.MsgIBCSend'>;
export type EncodedCosmwasmWasmMsgIBCSendResponse = Encoded<'/cosmwasm.wasm.v1.MsgIBCSendResponse'>;
export type EncodedCosmwasmWasmMsgIBCCloseChannel = Encoded<'/cosmwasm.wasm.v1.MsgIBCCloseChannel'>;
/**
 * Encodes a `MsgIBCSend` protobuf message:
 * @param s_channel - `channel`: the channel by which the packet will be sent
 * @param sg_timeout_height - `timeout_height`: Timeout height relative to the current block height. The timeout is disabled when set to 0.
 * @param sg_timeout_timestamp - `timeout_timestamp`: Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0.
 * @param atu8_data - `data`: Data is the payload to transfer. We must not make assumption what format or content is in here.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgIBCSend: (s_channel?: Opt<string>, sg_timeout_height?: Opt<WeakUint64Str>, sg_timeout_timestamp?: Opt<WeakUint64Str>, atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgIBCSend;
/**
 * Encodes a `MsgIBCSendResponse` protobuf message:
 * @param sg_sequence - `sequence`: Sequence number of the IBC packet sent
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgIBCSendResponse: (sg_sequence?: Opt<WeakUint64Str>) => EncodedCosmwasmWasmMsgIBCSendResponse;
/**
 * Encodes a `MsgIBCCloseChannel` protobuf message: port and channel need to be owned by the contract
 * @param s_channel - `channel`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgIBCCloseChannel: (s_channel?: Opt<string>) => EncodedCosmwasmWasmMsgIBCCloseChannel;
/**
 * A decoded protobuf IBCSend message
 *
 * Tuple where:
 *   - 1: channel - the channel by which the packet will be sent
 *   - 3: timeout_height - Timeout height relative to the current block height. The timeout is disabled when set to 0.
 *   - 4: timeout_timestamp - Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0.
 *   - 5: data - Data is the payload to transfer. We must not make assumption what format or content is in here.
 */
export type DecodedCosmwasmWasmMsgIBCSend = [
    w_0?: undefined,
    s_channel?: string,
    w_0?: undefined,
    sg_timeout_height?: CwUint64,
    sg_timeout_timestamp?: CwUint64,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf IBCSend message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgIBCSend}
 */
export declare const decodeCosmwasmWasmMsgIBCSend: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmwasmWasmMsgIBCSend;
/**
 * A decoded protobuf IBCSend message
 *
 * Alias for: sequence - Sequence number of the IBC packet sent
 */
export type DecodedCosmwasmWasmMsgIBCSendResponse = [
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf IBCSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgIBCSendResponse}
 */
export declare const decodeCosmwasmWasmMsgIBCSendResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgIBCSendResponse;
/**
 * A decoded protobuf IBCCloseChannel message
 *
 * Alias for: channel -
 */
export type DecodedCosmwasmWasmMsgIBCCloseChannel = [
    w_0?: undefined,
    s_channel?: string
];
/**
 * Decodes a protobuf IBCCloseChannel message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgIBCCloseChannel}
 */
export declare const decodeCosmwasmWasmMsgIBCCloseChannel: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmwasmWasmMsgIBCCloseChannel;
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgIBCSend} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: channel - the channel by which the packet will be sent
 *   - 3: timeout_height - Timeout height relative to the current block height. The timeout is disabled when set to 0.
 *   - 4: timeout_timestamp - Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0.
 *   - 5: data - Data is the payload to transfer. We must not make assumption what format or content is in here.
 */
export declare const destructCosmwasmWasmMsgIBCSend: (g_struct: CosmwasmWasmMsgIBCSend) => [EMPTY?: void, channel?: string, EMPTY?: void, timeout_height?: CwUint64, timeout_timestamp?: CwUint64, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_I_B_C_SEND = "/cosmwasm.wasm.v1.MsgIBCSend";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgIBCSend` -
 */
export type CosmwasmWasmMsgIBCSend = {
    channel?: string | undefined;
    timeout_height?: CwUint64 | undefined;
    timeout_timestamp?: CwUint64 | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgIBCSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - Sequence number of the IBC packet sent
 */
export declare const destructCosmwasmWasmMsgIBCSendResponse: (g_struct: CosmwasmWasmMsgIBCSendResponse) => [sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_I_B_C_SEND_RESPONSE = "/cosmwasm.wasm.v1.MsgIBCSendResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgIBCSendResponse` -
 */
export type CosmwasmWasmMsgIBCSendResponse = {
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgIBCCloseChannel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: channel -
 */
export declare const destructCosmwasmWasmMsgIBCCloseChannel: (g_struct: CosmwasmWasmMsgIBCCloseChannel) => [EMPTY?: void, channel?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_I_B_C_CLOSE_CHANNEL = "/cosmwasm.wasm.v1.MsgIBCCloseChannel";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgIBCCloseChannel` - port and channel need to be owned by the contract
 */
export type CosmwasmWasmMsgIBCCloseChannel = {
    channel?: string | undefined;
};
