import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
import type { CosmwasmWasmAccessConfig, DecodedCosmwasmWasmAccessConfig, CosmwasmWasmParams, DecodedCosmwasmWasmParams } from './types.js';
export type EncodedCosmwasmWasmMsgStoreCode = Encoded<'/cosmwasm.wasm.v1.MsgStoreCode'>;
export type EncodedCosmwasmWasmMsgStoreCodeResponse = Encoded<'/cosmwasm.wasm.v1.MsgStoreCodeResponse'>;
export type EncodedCosmwasmWasmMsgInstantiateContract = Encoded<'/cosmwasm.wasm.v1.MsgInstantiateContract'>;
export type EncodedCosmwasmWasmMsgInstantiateContractResponse = Encoded<'/cosmwasm.wasm.v1.MsgInstantiateContractResponse'>;
export type EncodedCosmwasmWasmMsgInstantiateContract2 = Encoded<'/cosmwasm.wasm.v1.MsgInstantiateContract2'>;
export type EncodedCosmwasmWasmMsgInstantiateContract2Response = Encoded<'/cosmwasm.wasm.v1.MsgInstantiateContract2Response'>;
export type EncodedCosmwasmWasmMsgExecuteContract = Encoded<'/cosmwasm.wasm.v1.MsgExecuteContract'>;
export type EncodedCosmwasmWasmMsgExecuteContractResponse = Encoded<'/cosmwasm.wasm.v1.MsgExecuteContractResponse'>;
export type EncodedCosmwasmWasmMsgMigrateContract = Encoded<'/cosmwasm.wasm.v1.MsgMigrateContract'>;
export type EncodedCosmwasmWasmMsgMigrateContractResponse = Encoded<'/cosmwasm.wasm.v1.MsgMigrateContractResponse'>;
export type EncodedCosmwasmWasmMsgUpdateAdmin = Encoded<'/cosmwasm.wasm.v1.MsgUpdateAdmin'>;
export type EncodedCosmwasmWasmMsgUpdateAdminResponse = Encoded<'/cosmwasm.wasm.v1.MsgUpdateAdminResponse'>;
export type EncodedCosmwasmWasmMsgClearAdmin = Encoded<'/cosmwasm.wasm.v1.MsgClearAdmin'>;
export type EncodedCosmwasmWasmMsgClearAdminResponse = Encoded<'/cosmwasm.wasm.v1.MsgClearAdminResponse'>;
export type EncodedCosmwasmWasmAccessConfigUpdate = Encoded<'/cosmwasm.wasm.v1.AccessConfigUpdate'>;
export type EncodedCosmwasmWasmMsgUpdateInstantiateConfig = Encoded<'/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig'>;
export type EncodedCosmwasmWasmMsgUpdateInstantiateConfigResponse = Encoded<'/cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse'>;
export type EncodedCosmwasmWasmMsgUpdateParams = Encoded<'/cosmwasm.wasm.v1.MsgUpdateParams'>;
export type EncodedCosmwasmWasmMsgUpdateParamsResponse = Encoded<'/cosmwasm.wasm.v1.MsgUpdateParamsResponse'>;
export type EncodedCosmwasmWasmMsgSudoContract = Encoded<'/cosmwasm.wasm.v1.MsgSudoContract'>;
export type EncodedCosmwasmWasmMsgSudoContractResponse = Encoded<'/cosmwasm.wasm.v1.MsgSudoContractResponse'>;
export type EncodedCosmwasmWasmMsgPinCodes = Encoded<'/cosmwasm.wasm.v1.MsgPinCodes'>;
export type EncodedCosmwasmWasmMsgPinCodesResponse = Encoded<'/cosmwasm.wasm.v1.MsgPinCodesResponse'>;
export type EncodedCosmwasmWasmMsgUnpinCodes = Encoded<'/cosmwasm.wasm.v1.MsgUnpinCodes'>;
export type EncodedCosmwasmWasmMsgUnpinCodesResponse = Encoded<'/cosmwasm.wasm.v1.MsgUnpinCodesResponse'>;
export type EncodedCosmwasmWasmMsgStoreAndInstantiateContract = Encoded<'/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract'>;
export type EncodedCosmwasmWasmMsgStoreAndInstantiateContractResponse = Encoded<'/cosmwasm.wasm.v1.MsgStoreAndInstantiateContractResponse'>;
export type EncodedCosmwasmWasmMsgAddCodeUploadParamsAddresses = Encoded<'/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses'>;
export type EncodedCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse = Encoded<'/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddressesResponse'>;
export type EncodedCosmwasmWasmMsgRemoveCodeUploadParamsAddresses = Encoded<'/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses'>;
export type EncodedCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse = Encoded<'/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddressesResponse'>;
export type EncodedCosmwasmWasmMsgStoreAndMigrateContract = Encoded<'/cosmwasm.wasm.v1.MsgStoreAndMigrateContract'>;
export type EncodedCosmwasmWasmMsgStoreAndMigrateContractResponse = Encoded<'/cosmwasm.wasm.v1.MsgStoreAndMigrateContractResponse'>;
export type EncodedCosmwasmWasmMsgUpdateContractLabel = Encoded<'/cosmwasm.wasm.v1.MsgUpdateContractLabel'>;
export type EncodedCosmwasmWasmMsgUpdateContractLabelResponse = Encoded<'/cosmwasm.wasm.v1.MsgUpdateContractLabelResponse'>;
/**
 * Encodes a `MsgStoreCode` protobuf message: submit Wasm code to the system
 * @param sa_sender - `sender`: Sender is the actor that signed the messages
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission access control to apply on contract creation, optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgStoreCode: (sa_sender?: Opt<WeakAccountAddr>, atu8_wasm_byte_code?: Opt<Uint8Array>, atu8_instantiate_permission?: Opt<Encoded<'/cosmwasm.wasm.v1.AccessConfig'>>) => EncodedCosmwasmWasmMsgStoreCode;
/**
 * Encodes a `MsgStoreCodeResponse` protobuf message: returns store result data.
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param atu8_checksum - `checksum`: Checksum is the sha256 hash of the stored code
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgStoreCodeResponse: (sg_code_id?: Opt<WeakUint64Str>, atu8_checksum?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgStoreCodeResponse;
/**
 * Encodes a `MsgInstantiateContract` protobuf message: create a new smart contract instance for the given code id.
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param s_label - `label`: Label is optional metadata to be stored with a contract instance.
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on instantiation
 * @param a_funds - `funds`: Funds coins that are transferred to the contract on instantiation
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgInstantiateContract: (sa_sender?: Opt<WeakAccountAddr>, s_admin?: Opt<string>, sg_code_id?: Opt<WeakUint64Str>, s_label?: Opt<string>, atu8_msg?: Opt<Uint8Array>, a_funds?: Opt<SlimCoin[]>) => EncodedCosmwasmWasmMsgInstantiateContract;
/**
 * Encodes a `MsgInstantiateContractResponse` protobuf message: return instantiation result data
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgInstantiateContractResponse: (sa_address?: Opt<WeakAccountAddr>, atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgInstantiateContractResponse;
/**
 * Encodes a `MsgInstantiateContract2` protobuf message: create a new smart contract instance for the given code id with a predicable address.
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param s_label - `label`: Label is optional metadata to be stored with a contract instance.
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on instantiation
 * @param a_funds - `funds`: Funds coins that are transferred to the contract on instantiation
 * @param atu8_salt - `salt`: Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
 * @param b_fix_msg - `fix_msg`: FixMsg include the msg value into the hash for the predictable address. Default is false
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgInstantiateContract2: (sa_sender?: Opt<WeakAccountAddr>, s_admin?: Opt<string>, sg_code_id?: Opt<WeakUint64Str>, s_label?: Opt<string>, atu8_msg?: Opt<Uint8Array>, a_funds?: Opt<SlimCoin[]>, atu8_salt?: Opt<Uint8Array>, b_fix_msg?: Opt<boolean | 0 | 1>) => EncodedCosmwasmWasmMsgInstantiateContract2;
/**
 * Encodes a `MsgInstantiateContract2Response` protobuf message: return instantiation result data
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgInstantiateContract2Response: (sa_address?: Opt<WeakAccountAddr>, atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgInstantiateContract2Response;
/**
 * Encodes a `MsgExecuteContract` protobuf message: submits the given message data to a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract
 * @param a_funds - `funds`: Funds coins that are transferred to the contract on execution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgExecuteContract: (sa_sender?: Opt<WeakAccountAddr>, s_contract?: Opt<string>, atu8_msg?: Opt<Uint8Array>, a_funds?: Opt<SlimCoin[]>) => EncodedCosmwasmWasmMsgExecuteContract;
/**
 * Encodes a `MsgExecuteContractResponse` protobuf message: returns execution result data.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgExecuteContractResponse: (atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgExecuteContractResponse;
/**
 * Encodes a `MsgMigrateContract` protobuf message: runs a code upgrade/ downgrade for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param sg_code_id - `code_id`: CodeID references the new WASM code
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on migration
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgMigrateContract: (sa_sender?: Opt<WeakAccountAddr>, s_contract?: Opt<string>, sg_code_id?: Opt<WeakUint64Str>, atu8_msg?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgMigrateContract;
/**
 * Encodes a `MsgMigrateContractResponse` protobuf message: returns contract migration result data.
 * @param atu8_data - `data`: Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgMigrateContractResponse: (atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgMigrateContractResponse;
/**
 * Encodes a `MsgUpdateAdmin` protobuf message: sets a new admin for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_new_admin - `new_admin`: NewAdmin address to be set
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateAdmin: (sa_sender?: Opt<WeakAccountAddr>, s_new_admin?: Opt<string>, s_contract?: Opt<string>) => EncodedCosmwasmWasmMsgUpdateAdmin;
/**
 * Encodes a `MsgUpdateAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateAdminResponse: () => EncodedCosmwasmWasmMsgUpdateAdminResponse;
/**
 * Encodes a `MsgClearAdmin` protobuf message: removes any admin stored for a smart contract
 * @param sa_sender - `sender`: Sender is the actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgClearAdmin: (sa_sender?: Opt<WeakAccountAddr>, s_contract?: Opt<string>) => EncodedCosmwasmWasmMsgClearAdmin;
/**
 * Encodes a `MsgClearAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgClearAdminResponse: () => EncodedCosmwasmWasmMsgClearAdminResponse;
/**
 * Encodes a `AccessConfigUpdate` protobuf message: contains the code id and the access config to be applied.
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code to be updated
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission to apply to the set of code ids
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmAccessConfigUpdate: (sg_code_id?: Opt<WeakUint64Str>, atu8_instantiate_permission?: Opt<Encoded<'/cosmwasm.wasm.v1.AccessConfig'>>) => EncodedCosmwasmWasmAccessConfigUpdate;
/**
 * Encodes a `MsgUpdateInstantiateConfig` protobuf message: updates instantiate config for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param sg_code_id - `code_id`: CodeID references the stored WASM code
 * @param g_new_instantiate_permission - `new_instantiate_permission`: NewInstantiatePermission is the new access control
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateInstantiateConfig: (sa_sender?: Opt<WeakAccountAddr>, sg_code_id?: Opt<WeakUint64Str>, atu8_new_instantiate_permission?: Opt<Encoded<'/cosmwasm.wasm.v1.AccessConfig'>>) => EncodedCosmwasmWasmMsgUpdateInstantiateConfig;
/**
 * Encodes a `MsgUpdateInstantiateConfigResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateInstantiateConfigResponse: () => EncodedCosmwasmWasmMsgUpdateInstantiateConfigResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the MsgUpdateParams request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param g_params - `params`: defines the x/wasm parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateParams: (s_authority?: Opt<string>, atu8_params?: Opt<Encoded<'/cosmwasm.wasm.v1.Params'>>) => EncodedCosmwasmWasmMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: 0.40
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateParamsResponse: () => EncodedCosmwasmWasmMsgUpdateParamsResponse;
/**
 * Encodes a `MsgSudoContract` protobuf message: the MsgSudoContract request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract as sudo
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgSudoContract: (s_authority?: Opt<string>, s_contract?: Opt<string>, atu8_msg?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgSudoContract;
/**
 * Encodes a `MsgSudoContractResponse` protobuf message: defines the response structure for executing a MsgSudoContract message. Since: 0.40
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgSudoContractResponse: (atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgSudoContractResponse;
/**
 * Encodes a `MsgPinCodes` protobuf message: the MsgPinCodes request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_code_ids - `code_ids`: CodeIDs references the new WASM codes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgPinCodes: (s_authority?: Opt<string>, a_code_ids?: Opt<WeakUint64Str[]>) => EncodedCosmwasmWasmMsgPinCodes;
/**
 * Encodes a `MsgPinCodesResponse` protobuf message: defines the response structure for executing a MsgPinCodes message. Since: 0.40
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgPinCodesResponse: () => EncodedCosmwasmWasmMsgPinCodesResponse;
/**
 * Encodes a `MsgUnpinCodes` protobuf message: the MsgUnpinCodes request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_code_ids - `code_ids`: CodeIDs references the WASM codes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUnpinCodes: (s_authority?: Opt<string>, a_code_ids?: Opt<WeakUint64Str[]>) => EncodedCosmwasmWasmMsgUnpinCodes;
/**
 * Encodes a `MsgUnpinCodesResponse` protobuf message: defines the response structure for executing a MsgUnpinCodes message. Since: 0.40
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUnpinCodesResponse: () => EncodedCosmwasmWasmMsgUnpinCodesResponse;
/**
 * Encodes a `MsgStoreAndInstantiateContract` protobuf message: the MsgStoreAndInstantiateContract request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission to apply on contract creation, optional
 * @param b_unpin_code - `unpin_code`: UnpinCode code on upload, optional. As default the uploaded contract is pinned to cache.
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @param s_label - `label`: Label is optional metadata to be stored with a constract instance.
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on instantiation
 * @param a_funds - `funds`: Funds coins that are transferred from the authority account to the contract on instantiation
 * @param s_source - `source`: Source is the URL where the code is hosted
 * @param s_builder - `builder`: Builder is the docker image used to build the code deterministically, used for smart contract verification
 * @param atu8_code_hash - `code_hash`: CodeHash is the SHA256 sum of the code outputted by builder, used for smart contract verification
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgStoreAndInstantiateContract: (s_authority?: Opt<string>, atu8_wasm_byte_code?: Opt<Uint8Array>, atu8_instantiate_permission?: Opt<Encoded<'/cosmwasm.wasm.v1.AccessConfig'>>, b_unpin_code?: Opt<boolean | 0 | 1>, s_admin?: Opt<string>, s_label?: Opt<string>, atu8_msg?: Opt<Uint8Array>, a_funds?: Opt<SlimCoin[]>, s_source?: Opt<string>, s_builder?: Opt<string>, atu8_code_hash?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgStoreAndInstantiateContract;
/**
 * Encodes a `MsgStoreAndInstantiateContractResponse` protobuf message: defines the response structure for executing a MsgStoreAndInstantiateContract message. Since: 0.40
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgStoreAndInstantiateContractResponse: (sa_address?: Opt<WeakAccountAddr>, atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgStoreAndInstantiateContractResponse;
/**
 * Encodes a `MsgAddCodeUploadParamsAddresses` protobuf message: the MsgAddCodeUploadParamsAddresses request type.
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_addresses - `addresses`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgAddCodeUploadParamsAddresses: (s_authority?: Opt<string>, a_addresses?: Opt<string[]>) => EncodedCosmwasmWasmMsgAddCodeUploadParamsAddresses;
/**
 * Encodes a `MsgAddCodeUploadParamsAddressesResponse` protobuf message: defines the response structure for executing a MsgAddCodeUploadParamsAddresses message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse: () => EncodedCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse;
/**
 * Encodes a `MsgRemoveCodeUploadParamsAddresses` protobuf message: the MsgRemoveCodeUploadParamsAddresses request type.
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_addresses - `addresses`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgRemoveCodeUploadParamsAddresses: (s_authority?: Opt<string>, a_addresses?: Opt<string[]>) => EncodedCosmwasmWasmMsgRemoveCodeUploadParamsAddresses;
/**
 * Encodes a `MsgRemoveCodeUploadParamsAddressesResponse` protobuf message: defines the response structure for executing a MsgRemoveCodeUploadParamsAddresses message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse: () => EncodedCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse;
/**
 * Encodes a `MsgStoreAndMigrateContract` protobuf message: the MsgStoreAndMigrateContract request type. Since: 0.42
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission to apply on contract creation, optional
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on migration
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgStoreAndMigrateContract: (s_authority?: Opt<string>, atu8_wasm_byte_code?: Opt<Uint8Array>, atu8_instantiate_permission?: Opt<Encoded<'/cosmwasm.wasm.v1.AccessConfig'>>, s_contract?: Opt<string>, atu8_msg?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgStoreAndMigrateContract;
/**
 * Encodes a `MsgStoreAndMigrateContractResponse` protobuf message: defines the response structure for executing a MsgStoreAndMigrateContract message. Since: 0.42
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param atu8_checksum - `checksum`: Checksum is the sha256 hash of the stored code
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgStoreAndMigrateContractResponse: (sg_code_id?: Opt<WeakUint64Str>, atu8_checksum?: Opt<Uint8Array>, atu8_data?: Opt<Uint8Array>) => EncodedCosmwasmWasmMsgStoreAndMigrateContractResponse;
/**
 * Encodes a `MsgUpdateContractLabel` protobuf message: sets a new label for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_new_label - `new_label`: NewLabel string to be set
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateContractLabel: (sa_sender?: Opt<WeakAccountAddr>, s_new_label?: Opt<string>, s_contract?: Opt<string>) => EncodedCosmwasmWasmMsgUpdateContractLabel;
/**
 * Encodes a `MsgUpdateContractLabelResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeCosmwasmWasmMsgUpdateContractLabelResponse: () => EncodedCosmwasmWasmMsgUpdateContractLabelResponse;
/**
 * A decoded protobuf StoreCode message
 *
 * Tuple where:
 *   - 0: sender - Sender is the actor that signed the messages
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 4: instantiate_permission - InstantiatePermission access control to apply on contract creation, optional
 */
export type DecodedCosmwasmWasmMsgStoreCode = [
    sa_sender?: CwAccountAddr,
    atu8_wasm_byte_code?: Uint8Array,
    w_0?: undefined,
    w_1?: undefined,
    a_instantiate_permission?: DecodedCosmwasmWasmAccessConfig
];
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgStoreCode}
 */
export declare const decodeCosmwasmWasmMsgStoreCode: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmwasmWasmMsgStoreCode;
/**
 * A decoded protobuf StoreCode message
 *
 * Tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 *   - 1: checksum - Checksum is the sha256 hash of the stored code
 */
export type DecodedCosmwasmWasmMsgStoreCodeResponse = [
    sg_code_id?: CwUint64,
    atu8_checksum?: Uint8Array
];
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreCodeResponse}
 */
export declare const decodeCosmwasmWasmMsgStoreCodeResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgStoreCodeResponse;
/**
 * A decoded protobuf InstantiateContract message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: admin - Admin is an optional address that can execute migrations
 *   - 2: code_id - CodeID is the reference to the stored WASM code
 *   - 3: label - Label is optional metadata to be stored with a contract instance.
 *   - 4: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 5: funds - Funds coins that are transferred to the contract on instantiation
 */
export type DecodedCosmwasmWasmMsgInstantiateContract = [
    sa_sender?: CwAccountAddr,
    s_admin?: string,
    sg_code_id?: CwUint64,
    s_label?: string,
    atu8_msg?: Uint8Array,
    a_funds?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContract}
 */
export declare const decodeCosmwasmWasmMsgInstantiateContract: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgInstantiateContract;
/**
 * A decoded protobuf InstantiateContract message
 *
 * Tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export type DecodedCosmwasmWasmMsgInstantiateContractResponse = [
    sa_address?: CwAccountAddr,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContractResponse}
 */
export declare const decodeCosmwasmWasmMsgInstantiateContractResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgInstantiateContractResponse;
/**
 * A decoded protobuf InstantiateContract2 message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: admin - Admin is an optional address that can execute migrations
 *   - 2: code_id - CodeID is the reference to the stored WASM code
 *   - 3: label - Label is optional metadata to be stored with a contract instance.
 *   - 4: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 5: funds - Funds coins that are transferred to the contract on instantiation
 *   - 6: salt - Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
 *   - 7: fix_msg - FixMsg include the msg value into the hash for the predictable address. Default is false
 */
export type DecodedCosmwasmWasmMsgInstantiateContract2 = [
    sa_sender?: CwAccountAddr,
    s_admin?: string,
    sg_code_id?: CwUint64,
    s_label?: string,
    atu8_msg?: Uint8Array,
    a_funds?: [
        string,
        string
    ][],
    atu8_salt?: Uint8Array,
    b_fix_msg?: 0 | 1
];
/**
 * Decodes a protobuf InstantiateContract2 message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContract2}
 */
export declare const decodeCosmwasmWasmMsgInstantiateContract2: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgInstantiateContract2;
/**
 * A decoded protobuf InstantiateContract2 message
 *
 * Tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export type DecodedCosmwasmWasmMsgInstantiateContract2Response = [
    sa_address?: CwAccountAddr,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf InstantiateContract2 message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContract2Response}
 */
export declare const decodeCosmwasmWasmMsgInstantiateContract2Response: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgInstantiateContract2Response;
/**
 * A decoded protobuf ExecuteContract message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: msg - Msg json encoded message to be passed to the contract
 *   - 4: funds - Funds coins that are transferred to the contract on execution
 */
export type DecodedCosmwasmWasmMsgExecuteContract = [
    sa_sender?: CwAccountAddr,
    s_contract?: string,
    atu8_msg?: Uint8Array,
    w_0?: undefined,
    a_funds?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgExecuteContract}
 */
export declare const decodeCosmwasmWasmMsgExecuteContract: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmwasmWasmMsgExecuteContract;
/**
 * A decoded protobuf ExecuteContract message
 *
 * Alias for: data - Data contains bytes to returned from the contract
 */
export type DecodedCosmwasmWasmMsgExecuteContractResponse = [
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgExecuteContractResponse}
 */
export declare const decodeCosmwasmWasmMsgExecuteContractResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgExecuteContractResponse;
/**
 * A decoded protobuf MigrateContract message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: code_id - CodeID references the new WASM code
 *   - 3: msg - Msg json encoded message to be passed to the contract on migration
 */
export type DecodedCosmwasmWasmMsgMigrateContract = [
    sa_sender?: CwAccountAddr,
    s_contract?: string,
    sg_code_id?: CwUint64,
    atu8_msg?: Uint8Array
];
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgMigrateContract}
 */
export declare const decodeCosmwasmWasmMsgMigrateContract: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgMigrateContract;
/**
 * A decoded protobuf MigrateContract message
 *
 * Alias for: data - Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 */
export type DecodedCosmwasmWasmMsgMigrateContractResponse = [
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgMigrateContractResponse}
 */
export declare const decodeCosmwasmWasmMsgMigrateContractResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgMigrateContractResponse;
/**
 * A decoded protobuf UpdateAdmin message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_admin - NewAdmin address to be set
 *   - 2: contract - Contract is the address of the smart contract
 */
export type DecodedCosmwasmWasmMsgUpdateAdmin = [
    sa_sender?: CwAccountAddr,
    s_new_admin?: string,
    s_contract?: string
];
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateAdmin}
 */
export declare const decodeCosmwasmWasmMsgUpdateAdmin: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgUpdateAdmin;
/**
 * A decoded protobuf UpdateAdmin message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgUpdateAdminResponse = [];
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateAdminResponse}
 */
export declare const decodeCosmwasmWasmMsgUpdateAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ClearAdmin message
 *
 * Tuple where:
 *   - 0: sender - Sender is the actor that signed the messages
 *   - 2: contract - Contract is the address of the smart contract
 */
export type DecodedCosmwasmWasmMsgClearAdmin = [
    sa_sender?: CwAccountAddr,
    w_0?: undefined,
    s_contract?: string
];
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgClearAdmin}
 */
export declare const decodeCosmwasmWasmMsgClearAdmin: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmwasmWasmMsgClearAdmin;
/**
 * A decoded protobuf ClearAdmin message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgClearAdminResponse = [];
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgClearAdminResponse}
 */
export declare const decodeCosmwasmWasmMsgClearAdminResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf AccessConfigUpdate message
 *
 * Tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code to be updated
 *   - 1: instantiate_permission - InstantiatePermission to apply to the set of code ids
 */
export type DecodedCosmwasmWasmAccessConfigUpdate = [
    sg_code_id?: CwUint64,
    a_instantiate_permission?: DecodedCosmwasmWasmAccessConfig
];
/**
 * Decodes a protobuf AccessConfigUpdate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAccessConfigUpdate}
 */
export declare const decodeCosmwasmWasmAccessConfigUpdate: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmAccessConfigUpdate;
/**
 * A decoded protobuf UpdateInstantiateConfig message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: code_id - CodeID references the stored WASM code
 *   - 2: new_instantiate_permission - NewInstantiatePermission is the new access control
 */
export type DecodedCosmwasmWasmMsgUpdateInstantiateConfig = [
    sa_sender?: CwAccountAddr,
    sg_code_id?: CwUint64,
    a_new_instantiate_permission?: DecodedCosmwasmWasmAccessConfig
];
/**
 * Decodes a protobuf UpdateInstantiateConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateInstantiateConfig}
 */
export declare const decodeCosmwasmWasmMsgUpdateInstantiateConfig: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgUpdateInstantiateConfig;
/**
 * A decoded protobuf UpdateInstantiateConfig message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgUpdateInstantiateConfigResponse = [];
/**
 * Decodes a protobuf UpdateInstantiateConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateInstantiateConfigResponse}
 */
export declare const decodeCosmwasmWasmMsgUpdateInstantiateConfigResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: params - defines the x/wasm parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedCosmwasmWasmMsgUpdateParams = [
    s_authority?: string,
    a_params?: DecodedCosmwasmWasmParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateParams}
 */
export declare const decodeCosmwasmWasmMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateParamsResponse}
 */
export declare const decodeCosmwasmWasmMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SudoContract message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: msg - Msg json encoded message to be passed to the contract as sudo
 */
export type DecodedCosmwasmWasmMsgSudoContract = [
    s_authority?: string,
    s_contract?: string,
    atu8_msg?: Uint8Array
];
/**
 * Decodes a protobuf SudoContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgSudoContract}
 */
export declare const decodeCosmwasmWasmMsgSudoContract: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgSudoContract;
/**
 * A decoded protobuf SudoContract message
 *
 * Alias for: data - Data contains bytes to returned from the contract
 */
export type DecodedCosmwasmWasmMsgSudoContractResponse = [
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf SudoContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgSudoContractResponse}
 */
export declare const decodeCosmwasmWasmMsgSudoContractResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgSudoContractResponse;
/**
 * A decoded protobuf PinCodes message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: code_ids - CodeIDs references the new WASM codes
 */
export type DecodedCosmwasmWasmMsgPinCodes = [
    s_authority?: string,
    a_code_ids?: CwUint64[]
];
/**
 * Decodes a protobuf PinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgPinCodes}
 */
export declare const decodeCosmwasmWasmMsgPinCodes: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgPinCodes;
/**
 * A decoded protobuf PinCodes message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgPinCodesResponse = [];
/**
 * Decodes a protobuf PinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgPinCodesResponse}
 */
export declare const decodeCosmwasmWasmMsgPinCodesResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UnpinCodes message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: code_ids - CodeIDs references the WASM codes
 */
export type DecodedCosmwasmWasmMsgUnpinCodes = [
    s_authority?: string,
    a_code_ids?: CwUint64[]
];
/**
 * Decodes a protobuf UnpinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUnpinCodes}
 */
export declare const decodeCosmwasmWasmMsgUnpinCodes: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgUnpinCodes;
/**
 * A decoded protobuf UnpinCodes message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgUnpinCodesResponse = [];
/**
 * Decodes a protobuf UnpinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUnpinCodesResponse}
 */
export declare const decodeCosmwasmWasmMsgUnpinCodesResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf StoreAndInstantiateContract message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 2: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 3: instantiate_permission - InstantiatePermission to apply on contract creation, optional
 *   - 4: unpin_code - UnpinCode code on upload, optional. As default the uploaded contract is pinned to cache.
 *   - 5: admin - Admin is an optional address that can execute migrations
 *   - 6: label - Label is optional metadata to be stored with a constract instance.
 *   - 7: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 8: funds - Funds coins that are transferred from the authority account to the contract on instantiation
 *   - 9: source - Source is the URL where the code is hosted
 *   - 10: builder - Builder is the docker image used to build the code deterministically, used for smart contract verification
 *   - 11: code_hash - CodeHash is the SHA256 sum of the code outputted by builder, used for smart contract verification
 */
export type DecodedCosmwasmWasmMsgStoreAndInstantiateContract = [
    s_authority?: string,
    w_0?: undefined,
    atu8_wasm_byte_code?: Uint8Array,
    a_instantiate_permission?: DecodedCosmwasmWasmAccessConfig,
    b_unpin_code?: 0 | 1,
    s_admin?: string,
    s_label?: string,
    atu8_msg?: Uint8Array,
    a_funds?: [
        string,
        string
    ][],
    s_source?: string,
    s_builder?: string,
    atu8_code_hash?: Uint8Array
];
/**
 * Decodes a protobuf StoreAndInstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndInstantiateContract}
 */
export declare const decodeCosmwasmWasmMsgStoreAndInstantiateContract: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedCosmwasmWasmMsgStoreAndInstantiateContract;
/**
 * A decoded protobuf StoreAndInstantiateContract message
 *
 * Tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export type DecodedCosmwasmWasmMsgStoreAndInstantiateContractResponse = [
    sa_address?: CwAccountAddr,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf StoreAndInstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndInstantiateContractResponse}
 */
export declare const decodeCosmwasmWasmMsgStoreAndInstantiateContractResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgStoreAndInstantiateContractResponse;
/**
 * A decoded protobuf AddCodeUploadParamsAddresses message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: addresses -
 */
export type DecodedCosmwasmWasmMsgAddCodeUploadParamsAddresses = [
    s_authority?: string,
    a_addresses?: string[]
];
/**
 * Decodes a protobuf AddCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgAddCodeUploadParamsAddresses}
 */
export declare const decodeCosmwasmWasmMsgAddCodeUploadParamsAddresses: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgAddCodeUploadParamsAddresses;
/**
 * A decoded protobuf AddCodeUploadParamsAddresses message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse = [];
/**
 * Decodes a protobuf AddCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse}
 */
export declare const decodeCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RemoveCodeUploadParamsAddresses message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: addresses -
 */
export type DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddresses = [
    s_authority?: string,
    a_addresses?: string[]
];
/**
 * Decodes a protobuf RemoveCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddresses}
 */
export declare const decodeCosmwasmWasmMsgRemoveCodeUploadParamsAddresses: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddresses;
/**
 * A decoded protobuf RemoveCodeUploadParamsAddresses message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse = [];
/**
 * Decodes a protobuf RemoveCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse}
 */
export declare const decodeCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf StoreAndMigrateContract message
 *
 * Tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 2: instantiate_permission - InstantiatePermission to apply on contract creation, optional
 *   - 3: contract - Contract is the address of the smart contract
 *   - 4: msg - Msg json encoded message to be passed to the contract on migration
 */
export type DecodedCosmwasmWasmMsgStoreAndMigrateContract = [
    s_authority?: string,
    atu8_wasm_byte_code?: Uint8Array,
    a_instantiate_permission?: DecodedCosmwasmWasmAccessConfig,
    s_contract?: string,
    atu8_msg?: Uint8Array
];
/**
 * Decodes a protobuf StoreAndMigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndMigrateContract}
 */
export declare const decodeCosmwasmWasmMsgStoreAndMigrateContract: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgStoreAndMigrateContract;
/**
 * A decoded protobuf StoreAndMigrateContract message
 *
 * Tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 *   - 1: checksum - Checksum is the sha256 hash of the stored code
 *   - 2: data - Data contains bytes to returned from the contract
 */
export type DecodedCosmwasmWasmMsgStoreAndMigrateContractResponse = [
    sg_code_id?: CwUint64,
    atu8_checksum?: Uint8Array,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf StoreAndMigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndMigrateContractResponse}
 */
export declare const decodeCosmwasmWasmMsgStoreAndMigrateContractResponse: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgStoreAndMigrateContractResponse;
/**
 * A decoded protobuf UpdateContractLabel message
 *
 * Tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_label - NewLabel string to be set
 *   - 2: contract - Contract is the address of the smart contract
 */
export type DecodedCosmwasmWasmMsgUpdateContractLabel = [
    sa_sender?: CwAccountAddr,
    s_new_label?: string,
    s_contract?: string
];
/**
 * Decodes a protobuf UpdateContractLabel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateContractLabel}
 */
export declare const decodeCosmwasmWasmMsgUpdateContractLabel: (atu8_payload: Uint8Array) => DecodedCosmwasmWasmMsgUpdateContractLabel;
/**
 * A decoded protobuf UpdateContractLabel message
 *
 * Tuple where:
 */
export type DecodedCosmwasmWasmMsgUpdateContractLabelResponse = [];
/**
 * Decodes a protobuf UpdateContractLabel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateContractLabelResponse}
 */
export declare const decodeCosmwasmWasmMsgUpdateContractLabelResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreCode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the actor that signed the messages
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 4: instantiate_permission - InstantiatePermission access control to apply on contract creation, optional
 */
export declare const destructCosmwasmWasmMsgStoreCode: (g_struct: CosmwasmWasmMsgStoreCode) => [sender?: CwAccountAddr, wasm_byte_code?: Uint8Array, EMPTY?: void, EMPTY?: void, instantiate_permission?: CosmwasmWasmAccessConfig];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_CODE = "/cosmwasm.wasm.v1.MsgStoreCode";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgStoreCode` - submit Wasm code to the system
 */
export type CosmwasmWasmMsgStoreCode = {
    sender?: CwAccountAddr | undefined;
    wasm_byte_code?: CwBase64 | undefined;
    instantiate_permission?: CosmwasmWasmAccessConfig | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreCodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 *   - 1: checksum - Checksum is the sha256 hash of the stored code
 */
export declare const destructCosmwasmWasmMsgStoreCodeResponse: (g_struct: CosmwasmWasmMsgStoreCodeResponse) => [code_id?: CwUint64, checksum?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_CODE_RESPONSE = "/cosmwasm.wasm.v1.MsgStoreCodeResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgStoreCodeResponse` - returns store result data.
 */
export type CosmwasmWasmMsgStoreCodeResponse = {
    code_id?: CwUint64 | undefined;
    checksum?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: admin - Admin is an optional address that can execute migrations
 *   - 2: code_id - CodeID is the reference to the stored WASM code
 *   - 3: label - Label is optional metadata to be stored with a contract instance.
 *   - 4: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 5: funds - Funds coins that are transferred to the contract on instantiation
 */
export declare const destructCosmwasmWasmMsgInstantiateContract: (g_struct: CosmwasmWasmMsgInstantiateContract) => [sender?: CwAccountAddr, admin?: string, code_id?: CwUint64, label?: string, msg?: Uint8Array, funds?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT = "/cosmwasm.wasm.v1.MsgInstantiateContract";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgInstantiateContract` - create a new smart contract instance for the given code id.
 */
export type CosmwasmWasmMsgInstantiateContract = {
    sender?: CwAccountAddr | undefined;
    admin?: string | undefined;
    code_id?: CwUint64 | undefined;
    label?: string | undefined;
    msg?: CwBase64 | undefined;
    funds?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export declare const destructCosmwasmWasmMsgInstantiateContractResponse: (g_struct: CosmwasmWasmMsgInstantiateContractResponse) => [address?: CwAccountAddr, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT_RESPONSE = "/cosmwasm.wasm.v1.MsgInstantiateContractResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgInstantiateContractResponse` - return instantiation result data
 */
export type CosmwasmWasmMsgInstantiateContractResponse = {
    address?: CwAccountAddr | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContract2} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: admin - Admin is an optional address that can execute migrations
 *   - 2: code_id - CodeID is the reference to the stored WASM code
 *   - 3: label - Label is optional metadata to be stored with a contract instance.
 *   - 4: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 5: funds - Funds coins that are transferred to the contract on instantiation
 *   - 6: salt - Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
 *   - 7: fix_msg - FixMsg include the msg value into the hash for the predictable address. Default is false
 */
export declare const destructCosmwasmWasmMsgInstantiateContract2: (g_struct: CosmwasmWasmMsgInstantiateContract2) => [sender?: CwAccountAddr, admin?: string, code_id?: CwUint64, label?: string, msg?: Uint8Array, funds?: CosmosBaseCoin[], salt?: Uint8Array, fix_msg?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT2 = "/cosmwasm.wasm.v1.MsgInstantiateContract2";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgInstantiateContract2` - create a new smart contract instance for the given code id with a predicable address.
 */
export type CosmwasmWasmMsgInstantiateContract2 = {
    sender?: CwAccountAddr | undefined;
    admin?: string | undefined;
    code_id?: CwUint64 | undefined;
    label?: string | undefined;
    msg?: CwBase64 | undefined;
    funds?: CosmosBaseCoin[] | undefined;
    salt?: CwBase64 | undefined;
    fix_msg?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContract2Response} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export declare const destructCosmwasmWasmMsgInstantiateContract2Response: (g_struct: CosmwasmWasmMsgInstantiateContract2Response) => [address?: CwAccountAddr, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT2_RESPONSE = "/cosmwasm.wasm.v1.MsgInstantiateContract2Response";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgInstantiateContract2Response` - return instantiation result data
 */
export type CosmwasmWasmMsgInstantiateContract2Response = {
    address?: CwAccountAddr | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgExecuteContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: msg - Msg json encoded message to be passed to the contract
 *   - 4: funds - Funds coins that are transferred to the contract on execution
 */
export declare const destructCosmwasmWasmMsgExecuteContract: (g_struct: CosmwasmWasmMsgExecuteContract) => [sender?: CwAccountAddr, contract?: string, msg?: Uint8Array, EMPTY?: void, funds?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_EXECUTE_CONTRACT = "/cosmwasm.wasm.v1.MsgExecuteContract";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgExecuteContract` - submits the given message data to a smart contract
 */
export type CosmwasmWasmMsgExecuteContract = {
    sender?: CwAccountAddr | undefined;
    contract?: string | undefined;
    msg?: CwBase64 | undefined;
    funds?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgExecuteContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains bytes to returned from the contract
 */
export declare const destructCosmwasmWasmMsgExecuteContractResponse: (g_struct: CosmwasmWasmMsgExecuteContractResponse) => [data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_EXECUTE_CONTRACT_RESPONSE = "/cosmwasm.wasm.v1.MsgExecuteContractResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgExecuteContractResponse` - returns execution result data.
 */
export type CosmwasmWasmMsgExecuteContractResponse = {
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgMigrateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: code_id - CodeID references the new WASM code
 *   - 3: msg - Msg json encoded message to be passed to the contract on migration
 */
export declare const destructCosmwasmWasmMsgMigrateContract: (g_struct: CosmwasmWasmMsgMigrateContract) => [sender?: CwAccountAddr, contract?: string, code_id?: CwUint64, msg?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_MIGRATE_CONTRACT = "/cosmwasm.wasm.v1.MsgMigrateContract";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgMigrateContract` - runs a code upgrade/ downgrade for a smart contract
 */
export type CosmwasmWasmMsgMigrateContract = {
    sender?: CwAccountAddr | undefined;
    contract?: string | undefined;
    code_id?: CwUint64 | undefined;
    msg?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgMigrateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 */
export declare const destructCosmwasmWasmMsgMigrateContractResponse: (g_struct: CosmwasmWasmMsgMigrateContractResponse) => [data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_MIGRATE_CONTRACT_RESPONSE = "/cosmwasm.wasm.v1.MsgMigrateContractResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgMigrateContractResponse` - returns contract migration result data.
 */
export type CosmwasmWasmMsgMigrateContractResponse = {
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_admin - NewAdmin address to be set
 *   - 2: contract - Contract is the address of the smart contract
 */
export declare const destructCosmwasmWasmMsgUpdateAdmin: (g_struct: CosmwasmWasmMsgUpdateAdmin) => [sender?: CwAccountAddr, new_admin?: string, contract?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_ADMIN = "/cosmwasm.wasm.v1.MsgUpdateAdmin";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateAdmin` - sets a new admin for a smart contract
 */
export type CosmwasmWasmMsgUpdateAdmin = {
    sender?: CwAccountAddr | undefined;
    new_admin?: string | undefined;
    contract?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgUpdateAdminResponse: (g_struct: CosmwasmWasmMsgUpdateAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_ADMIN_RESPONSE = "/cosmwasm.wasm.v1.MsgUpdateAdminResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateAdminResponse` - returns empty data
 */
export type CosmwasmWasmMsgUpdateAdminResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgClearAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the actor that signed the messages
 *   - 2: contract - Contract is the address of the smart contract
 */
export declare const destructCosmwasmWasmMsgClearAdmin: (g_struct: CosmwasmWasmMsgClearAdmin) => [sender?: CwAccountAddr, EMPTY?: void, contract?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_CLEAR_ADMIN = "/cosmwasm.wasm.v1.MsgClearAdmin";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgClearAdmin` - removes any admin stored for a smart contract
 */
export type CosmwasmWasmMsgClearAdmin = {
    sender?: CwAccountAddr | undefined;
    contract?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgClearAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgClearAdminResponse: (g_struct: CosmwasmWasmMsgClearAdminResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_CLEAR_ADMIN_RESPONSE = "/cosmwasm.wasm.v1.MsgClearAdminResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgClearAdminResponse` - returns empty data
 */
export type CosmwasmWasmMsgClearAdminResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmAccessConfigUpdate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code to be updated
 *   - 1: instantiate_permission - InstantiatePermission to apply to the set of code ids
 */
export declare const destructCosmwasmWasmAccessConfigUpdate: (g_struct: CosmwasmWasmAccessConfigUpdate) => [code_id?: CwUint64, instantiate_permission?: CosmwasmWasmAccessConfig];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_ACCESS_CONFIG_UPDATE = "/cosmwasm.wasm.v1.AccessConfigUpdate";
/**
 * JSON serialization of `cosmwasm.wasm.v1.AccessConfigUpdate` - contains the code id and the access config to be applied.
 */
export type CosmwasmWasmAccessConfigUpdate = {
    code_id?: CwUint64 | undefined;
    instantiate_permission?: CosmwasmWasmAccessConfig | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateInstantiateConfig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: code_id - CodeID references the stored WASM code
 *   - 2: new_instantiate_permission - NewInstantiatePermission is the new access control
 */
export declare const destructCosmwasmWasmMsgUpdateInstantiateConfig: (g_struct: CosmwasmWasmMsgUpdateInstantiateConfig) => [sender?: CwAccountAddr, code_id?: CwUint64, new_instantiate_permission?: CosmwasmWasmAccessConfig];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_INSTANTIATE_CONFIG = "/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateInstantiateConfig` - updates instantiate config for a smart contract
 */
export type CosmwasmWasmMsgUpdateInstantiateConfig = {
    sender?: CwAccountAddr | undefined;
    code_id?: CwUint64 | undefined;
    new_instantiate_permission?: CosmwasmWasmAccessConfig | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateInstantiateConfigResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgUpdateInstantiateConfigResponse: (g_struct: CosmwasmWasmMsgUpdateInstantiateConfigResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_INSTANTIATE_CONFIG_RESPONSE = "/cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse` - returns empty data
 */
export type CosmwasmWasmMsgUpdateInstantiateConfigResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: params - defines the x/wasm parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructCosmwasmWasmMsgUpdateParams: (g_struct: CosmwasmWasmMsgUpdateParams) => [authority?: string, params?: CosmwasmWasmParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_PARAMS = "/cosmwasm.wasm.v1.MsgUpdateParams";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateParams` - the MsgUpdateParams request type. Since: 0.40
 */
export type CosmwasmWasmMsgUpdateParams = {
    authority?: string | undefined;
    params?: CosmwasmWasmParams | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgUpdateParamsResponse: (g_struct: CosmwasmWasmMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_PARAMS_RESPONSE = "/cosmwasm.wasm.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateParamsResponse` - defines the response structure for executing a MsgUpdateParams message. Since: 0.40
 */
export type CosmwasmWasmMsgUpdateParamsResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgSudoContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: msg - Msg json encoded message to be passed to the contract as sudo
 */
export declare const destructCosmwasmWasmMsgSudoContract: (g_struct: CosmwasmWasmMsgSudoContract) => [authority?: string, contract?: string, msg?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_SUDO_CONTRACT = "/cosmwasm.wasm.v1.MsgSudoContract";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgSudoContract` - the MsgSudoContract request type. Since: 0.40
 */
export type CosmwasmWasmMsgSudoContract = {
    authority?: string | undefined;
    contract?: string | undefined;
    msg?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgSudoContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains bytes to returned from the contract
 */
export declare const destructCosmwasmWasmMsgSudoContractResponse: (g_struct: CosmwasmWasmMsgSudoContractResponse) => [data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_SUDO_CONTRACT_RESPONSE = "/cosmwasm.wasm.v1.MsgSudoContractResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgSudoContractResponse` - defines the response structure for executing a MsgSudoContract message. Since: 0.40
 */
export type CosmwasmWasmMsgSudoContractResponse = {
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgPinCodes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: code_ids - CodeIDs references the new WASM codes
 */
export declare const destructCosmwasmWasmMsgPinCodes: (g_struct: CosmwasmWasmMsgPinCodes) => [authority?: string, code_ids?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_PIN_CODES = "/cosmwasm.wasm.v1.MsgPinCodes";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgPinCodes` - the MsgPinCodes request type. Since: 0.40
 */
export type CosmwasmWasmMsgPinCodes = {
    authority?: string | undefined;
    code_ids?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgPinCodesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgPinCodesResponse: (g_struct: CosmwasmWasmMsgPinCodesResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_PIN_CODES_RESPONSE = "/cosmwasm.wasm.v1.MsgPinCodesResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgPinCodesResponse` - defines the response structure for executing a MsgPinCodes message. Since: 0.40
 */
export type CosmwasmWasmMsgPinCodesResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUnpinCodes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: code_ids - CodeIDs references the WASM codes
 */
export declare const destructCosmwasmWasmMsgUnpinCodes: (g_struct: CosmwasmWasmMsgUnpinCodes) => [authority?: string, code_ids?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UNPIN_CODES = "/cosmwasm.wasm.v1.MsgUnpinCodes";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUnpinCodes` - the MsgUnpinCodes request type. Since: 0.40
 */
export type CosmwasmWasmMsgUnpinCodes = {
    authority?: string | undefined;
    code_ids?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUnpinCodesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgUnpinCodesResponse: (g_struct: CosmwasmWasmMsgUnpinCodesResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UNPIN_CODES_RESPONSE = "/cosmwasm.wasm.v1.MsgUnpinCodesResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUnpinCodesResponse` - defines the response structure for executing a MsgUnpinCodes message. Since: 0.40
 */
export type CosmwasmWasmMsgUnpinCodesResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndInstantiateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 2: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 3: instantiate_permission - InstantiatePermission to apply on contract creation, optional
 *   - 4: unpin_code - UnpinCode code on upload, optional. As default the uploaded contract is pinned to cache.
 *   - 5: admin - Admin is an optional address that can execute migrations
 *   - 6: label - Label is optional metadata to be stored with a constract instance.
 *   - 7: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 8: funds - Funds coins that are transferred from the authority account to the contract on instantiation
 *   - 9: source - Source is the URL where the code is hosted
 *   - 10: builder - Builder is the docker image used to build the code deterministically, used for smart contract verification
 *   - 11: code_hash - CodeHash is the SHA256 sum of the code outputted by builder, used for smart contract verification
 */
export declare const destructCosmwasmWasmMsgStoreAndInstantiateContract: (g_struct: CosmwasmWasmMsgStoreAndInstantiateContract) => [authority?: string, EMPTY?: void, wasm_byte_code?: Uint8Array, instantiate_permission?: CosmwasmWasmAccessConfig, unpin_code?: boolean, admin?: string, label?: string, msg?: Uint8Array, funds?: CosmosBaseCoin[], source?: string, builder?: string, code_hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_INSTANTIATE_CONTRACT = "/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgStoreAndInstantiateContract` - the MsgStoreAndInstantiateContract request type. Since: 0.40
 */
export type CosmwasmWasmMsgStoreAndInstantiateContract = {
    authority?: string | undefined;
    wasm_byte_code?: CwBase64 | undefined;
    instantiate_permission?: CosmwasmWasmAccessConfig | undefined;
    unpin_code?: boolean | undefined;
    admin?: string | undefined;
    label?: string | undefined;
    msg?: CwBase64 | undefined;
    funds?: CosmosBaseCoin[] | undefined;
    source?: string | undefined;
    builder?: string | undefined;
    code_hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndInstantiateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export declare const destructCosmwasmWasmMsgStoreAndInstantiateContractResponse: (g_struct: CosmwasmWasmMsgStoreAndInstantiateContractResponse) => [address?: CwAccountAddr, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_INSTANTIATE_CONTRACT_RESPONSE = "/cosmwasm.wasm.v1.MsgStoreAndInstantiateContractResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgStoreAndInstantiateContractResponse` - defines the response structure for executing a MsgStoreAndInstantiateContract message. Since: 0.40
 */
export type CosmwasmWasmMsgStoreAndInstantiateContractResponse = {
    address?: CwAccountAddr | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgAddCodeUploadParamsAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: addresses -
 */
export declare const destructCosmwasmWasmMsgAddCodeUploadParamsAddresses: (g_struct: CosmwasmWasmMsgAddCodeUploadParamsAddresses) => [authority?: string, addresses?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_ADD_CODE_UPLOAD_PARAMS_ADDRESSES = "/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses` - the MsgAddCodeUploadParamsAddresses request type.
 */
export type CosmwasmWasmMsgAddCodeUploadParamsAddresses = {
    authority?: string | undefined;
    addresses?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgAddCodeUploadParamsAddressesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse: (g_struct: CosmwasmWasmMsgAddCodeUploadParamsAddressesResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_ADD_CODE_UPLOAD_PARAMS_ADDRESSES_RESPONSE = "/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddressesResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddressesResponse` - defines the response structure for executing a MsgAddCodeUploadParamsAddresses message.
 */
export type CosmwasmWasmMsgAddCodeUploadParamsAddressesResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgRemoveCodeUploadParamsAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: addresses -
 */
export declare const destructCosmwasmWasmMsgRemoveCodeUploadParamsAddresses: (g_struct: CosmwasmWasmMsgRemoveCodeUploadParamsAddresses) => [authority?: string, addresses?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_REMOVE_CODE_UPLOAD_PARAMS_ADDRESSES = "/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses` - the MsgRemoveCodeUploadParamsAddresses request type.
 */
export type CosmwasmWasmMsgRemoveCodeUploadParamsAddresses = {
    authority?: string | undefined;
    addresses?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse: (g_struct: CosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_REMOVE_CODE_UPLOAD_PARAMS_ADDRESSES_RESPONSE = "/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddressesResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddressesResponse` - defines the response structure for executing a MsgRemoveCodeUploadParamsAddresses message.
 */
export type CosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse = {};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndMigrateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 2: instantiate_permission - InstantiatePermission to apply on contract creation, optional
 *   - 3: contract - Contract is the address of the smart contract
 *   - 4: msg - Msg json encoded message to be passed to the contract on migration
 */
export declare const destructCosmwasmWasmMsgStoreAndMigrateContract: (g_struct: CosmwasmWasmMsgStoreAndMigrateContract) => [authority?: string, wasm_byte_code?: Uint8Array, instantiate_permission?: CosmwasmWasmAccessConfig, contract?: string, msg?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_MIGRATE_CONTRACT = "/cosmwasm.wasm.v1.MsgStoreAndMigrateContract";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgStoreAndMigrateContract` - the MsgStoreAndMigrateContract request type. Since: 0.42
 */
export type CosmwasmWasmMsgStoreAndMigrateContract = {
    authority?: string | undefined;
    wasm_byte_code?: CwBase64 | undefined;
    instantiate_permission?: CosmwasmWasmAccessConfig | undefined;
    contract?: string | undefined;
    msg?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndMigrateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 *   - 1: checksum - Checksum is the sha256 hash of the stored code
 *   - 2: data - Data contains bytes to returned from the contract
 */
export declare const destructCosmwasmWasmMsgStoreAndMigrateContractResponse: (g_struct: CosmwasmWasmMsgStoreAndMigrateContractResponse) => [code_id?: CwUint64, checksum?: Uint8Array, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_MIGRATE_CONTRACT_RESPONSE = "/cosmwasm.wasm.v1.MsgStoreAndMigrateContractResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgStoreAndMigrateContractResponse` - defines the response structure for executing a MsgStoreAndMigrateContract message. Since: 0.42
 */
export type CosmwasmWasmMsgStoreAndMigrateContractResponse = {
    code_id?: CwUint64 | undefined;
    checksum?: CwBase64 | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateContractLabel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_label - NewLabel string to be set
 *   - 2: contract - Contract is the address of the smart contract
 */
export declare const destructCosmwasmWasmMsgUpdateContractLabel: (g_struct: CosmwasmWasmMsgUpdateContractLabel) => [sender?: CwAccountAddr, new_label?: string, contract?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_CONTRACT_LABEL = "/cosmwasm.wasm.v1.MsgUpdateContractLabel";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateContractLabel` - sets a new label for a smart contract
 */
export type CosmwasmWasmMsgUpdateContractLabel = {
    sender?: CwAccountAddr | undefined;
    new_label?: string | undefined;
    contract?: string | undefined;
};
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateContractLabelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructCosmwasmWasmMsgUpdateContractLabelResponse: (g_struct: CosmwasmWasmMsgUpdateContractLabelResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_CONTRACT_LABEL_RESPONSE = "/cosmwasm.wasm.v1.MsgUpdateContractLabelResponse";
/**
 * JSON serialization of `cosmwasm.wasm.v1.MsgUpdateContractLabelResponse` - returns empty data
 */
export type CosmwasmWasmMsgUpdateContractLabelResponse = {};
