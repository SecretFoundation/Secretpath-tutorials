import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmwasmWasmAccessConfig, decodeCosmwasmWasmParams } from './types.js';
/**
 * Encodes a `MsgStoreCode` protobuf message: submit Wasm code to the system
 * @param sa_sender - `sender`: Sender is the actor that signed the messages
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission access control to apply on contract creation, optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgStoreCode = (sa_sender, atu8_wasm_byte_code, atu8_instantiate_permission) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .b(atu8_wasm_byte_code) // bytes wasm_byte_code = 2
    .b(atu8_instantiate_permission, 5) // AccessConfig instantiate_permission = 5
    .o;
/**
 * Encodes a `MsgStoreCodeResponse` protobuf message: returns store result data.
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param atu8_checksum - `checksum`: Checksum is the sha256 hash of the stored code
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgStoreCodeResponse = (sg_code_id, atu8_checksum) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .b(atu8_checksum) // bytes checksum = 2
    .o;
/**
 * Encodes a `MsgInstantiateContract` protobuf message: create a new smart contract instance for the given code id.
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param s_label - `label`: Label is optional metadata to be stored with a contract instance.
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on instantiation
 * @param a_funds - `funds`: Funds coins that are transferred to the contract on instantiation
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgInstantiateContract = (sa_sender, s_admin, sg_code_id, s_label, atu8_msg, a_funds) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_admin) // string admin = 2
    .g(sg_code_id) // uint64 code_id = 3
    .s(s_label) // string label = 4
    .b(atu8_msg) // bytes msg = 5
    .B(coins(a_funds)) // Coin[] funds = 6
    .o;
/**
 * Encodes a `MsgInstantiateContractResponse` protobuf message: return instantiation result data
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgInstantiateContractResponse = (sa_address, atu8_data) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_data) // bytes data = 2
    .o;
/**
 * Encodes a `MsgInstantiateContract2` protobuf message: create a new smart contract instance for the given code id with a predicable address.
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param s_label - `label`: Label is optional metadata to be stored with a contract instance.
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on instantiation
 * @param a_funds - `funds`: Funds coins that are transferred to the contract on instantiation
 * @param atu8_salt - `salt`: Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
 * @param b_fix_msg - `fix_msg`: FixMsg include the msg value into the hash for the predictable address. Default is false
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgInstantiateContract2 = (sa_sender, s_admin, sg_code_id, s_label, atu8_msg, a_funds, atu8_salt, b_fix_msg) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_admin) // string admin = 2
    .g(sg_code_id) // uint64 code_id = 3
    .s(s_label) // string label = 4
    .b(atu8_msg) // bytes msg = 5
    .B(coins(a_funds)) // Coin[] funds = 6
    .b(atu8_salt) // bytes salt = 7
    .v(b_fix_msg) // boolean fix_msg = 8
    .o;
/**
 * Encodes a `MsgInstantiateContract2Response` protobuf message: return instantiation result data
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgInstantiateContract2Response = (sa_address, atu8_data) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_data) // bytes data = 2
    .o;
/**
 * Encodes a `MsgExecuteContract` protobuf message: submits the given message data to a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract
 * @param a_funds - `funds`: Funds coins that are transferred to the contract on execution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgExecuteContract = (sa_sender, s_contract, atu8_msg, a_funds) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_contract) // string contract = 2
    .b(atu8_msg) // bytes msg = 3
    .B(coins(a_funds), 5) // Coin[] funds = 5
    .o;
/**
 * Encodes a `MsgExecuteContractResponse` protobuf message: returns execution result data.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgExecuteContractResponse = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `MsgMigrateContract` protobuf message: runs a code upgrade/ downgrade for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param sg_code_id - `code_id`: CodeID references the new WASM code
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on migration
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgMigrateContract = (sa_sender, s_contract, sg_code_id, atu8_msg) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_contract) // string contract = 2
    .g(sg_code_id) // uint64 code_id = 3
    .b(atu8_msg) // bytes msg = 4
    .o;
/**
 * Encodes a `MsgMigrateContractResponse` protobuf message: returns contract migration result data.
 * @param atu8_data - `data`: Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgMigrateContractResponse = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `MsgUpdateAdmin` protobuf message: sets a new admin for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_new_admin - `new_admin`: NewAdmin address to be set
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateAdmin = (sa_sender, s_new_admin, s_contract) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_new_admin) // string new_admin = 2
    .s(s_contract) // string contract = 3
    .o;
/**
 * Encodes a `MsgUpdateAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgClearAdmin` protobuf message: removes any admin stored for a smart contract
 * @param sa_sender - `sender`: Sender is the actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgClearAdmin = (sa_sender, s_contract) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_contract, 3) // string contract = 3
    .o;
/**
 * Encodes a `MsgClearAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgClearAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `AccessConfigUpdate` protobuf message: contains the code id and the access config to be applied.
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code to be updated
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission to apply to the set of code ids
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmAccessConfigUpdate = (sg_code_id, atu8_instantiate_permission) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .b(atu8_instantiate_permission) // AccessConfig instantiate_permission = 2
    .o;
/**
 * Encodes a `MsgUpdateInstantiateConfig` protobuf message: updates instantiate config for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param sg_code_id - `code_id`: CodeID references the stored WASM code
 * @param g_new_instantiate_permission - `new_instantiate_permission`: NewInstantiatePermission is the new access control
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateInstantiateConfig = (sa_sender, sg_code_id, atu8_new_instantiate_permission) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .g(sg_code_id) // uint64 code_id = 2
    .b(atu8_new_instantiate_permission) // AccessConfig new_instantiate_permission = 3
    .o;
/**
 * Encodes a `MsgUpdateInstantiateConfigResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateInstantiateConfigResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the MsgUpdateParams request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param g_params - `params`: defines the x/wasm parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: 0.40
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSudoContract` protobuf message: the MsgSudoContract request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract as sudo
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgSudoContract = (s_authority, s_contract, atu8_msg) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .s(s_contract) // string contract = 2
    .b(atu8_msg) // bytes msg = 3
    .o;
/**
 * Encodes a `MsgSudoContractResponse` protobuf message: defines the response structure for executing a MsgSudoContract message. Since: 0.40
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgSudoContractResponse = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `MsgPinCodes` protobuf message: the MsgPinCodes request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_code_ids - `code_ids`: CodeIDs references the new WASM codes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgPinCodes = (s_authority, a_code_ids) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .G(a_code_ids) // uint64[] code_ids = 2
    .o;
/**
 * Encodes a `MsgPinCodesResponse` protobuf message: defines the response structure for executing a MsgPinCodes message. Since: 0.40
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgPinCodesResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUnpinCodes` protobuf message: the MsgUnpinCodes request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_code_ids - `code_ids`: CodeIDs references the WASM codes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUnpinCodes = (s_authority, a_code_ids) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .G(a_code_ids) // uint64[] code_ids = 2
    .o;
/**
 * Encodes a `MsgUnpinCodesResponse` protobuf message: defines the response structure for executing a MsgUnpinCodes message. Since: 0.40
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUnpinCodesResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgStoreAndInstantiateContract` protobuf message: the MsgStoreAndInstantiateContract request type. Since: 0.40
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission to apply on contract creation, optional
 * @param b_unpin_code - `unpin_code`: UnpinCode code on upload, optional. As default the uploaded contract is pinned to cache.
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @param s_label - `label`: Label is optional metadata to be stored with a constract instance.
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on instantiation
 * @param a_funds - `funds`: Funds coins that are transferred from the authority account to the contract on instantiation
 * @param s_source - `source`: Source is the URL where the code is hosted
 * @param s_builder - `builder`: Builder is the docker image used to build the code deterministically, used for smart contract verification
 * @param atu8_code_hash - `code_hash`: CodeHash is the SHA256 sum of the code outputted by builder, used for smart contract verification
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgStoreAndInstantiateContract = (s_authority, atu8_wasm_byte_code, atu8_instantiate_permission, b_unpin_code, s_admin, s_label, atu8_msg, a_funds, s_source, s_builder, atu8_code_hash) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_wasm_byte_code, 3) // bytes wasm_byte_code = 3
    .b(atu8_instantiate_permission, 4) // AccessConfig instantiate_permission = 4
    .v(b_unpin_code, 5) // boolean unpin_code = 5
    .s(s_admin, 6) // string admin = 6
    .s(s_label, 7) // string label = 7
    .b(atu8_msg, 8) // bytes msg = 8
    .B(coins(a_funds), 9) // Coin[] funds = 9
    .s(s_source, 10) // string source = 10
    .s(s_builder, 11) // string builder = 11
    .b(atu8_code_hash, 12) // bytes code_hash = 12
    .o;
/**
 * Encodes a `MsgStoreAndInstantiateContractResponse` protobuf message: defines the response structure for executing a MsgStoreAndInstantiateContract message. Since: 0.40
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgStoreAndInstantiateContractResponse = (sa_address, atu8_data) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_data) // bytes data = 2
    .o;
/**
 * Encodes a `MsgAddCodeUploadParamsAddresses` protobuf message: the MsgAddCodeUploadParamsAddresses request type.
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_addresses - `addresses`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgAddCodeUploadParamsAddresses = (s_authority, a_addresses) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .S(a_addresses) // string[] addresses = 2
    .o;
/**
 * Encodes a `MsgAddCodeUploadParamsAddressesResponse` protobuf message: defines the response structure for executing a MsgAddCodeUploadParamsAddresses message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgRemoveCodeUploadParamsAddresses` protobuf message: the MsgRemoveCodeUploadParamsAddresses request type.
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param a_addresses - `addresses`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgRemoveCodeUploadParamsAddresses = (s_authority, a_addresses) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .S(a_addresses) // string[] addresses = 2
    .o;
/**
 * Encodes a `MsgRemoveCodeUploadParamsAddressesResponse` protobuf message: defines the response structure for executing a MsgRemoveCodeUploadParamsAddresses message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgStoreAndMigrateContract` protobuf message: the MsgStoreAndMigrateContract request type. Since: 0.42
 * @param s_authority - `authority`: Authority is the address of the governance account.
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param g_instantiate_permission - `instantiate_permission`: InstantiatePermission to apply on contract creation, optional
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_msg - `msg`: Msg json encoded message to be passed to the contract on migration
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgStoreAndMigrateContract = (s_authority, atu8_wasm_byte_code, atu8_instantiate_permission, s_contract, atu8_msg) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_wasm_byte_code) // bytes wasm_byte_code = 2
    .b(atu8_instantiate_permission) // AccessConfig instantiate_permission = 3
    .s(s_contract) // string contract = 4
    .b(atu8_msg) // bytes msg = 5
    .o;
/**
 * Encodes a `MsgStoreAndMigrateContractResponse` protobuf message: defines the response structure for executing a MsgStoreAndMigrateContract message. Since: 0.42
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @param atu8_checksum - `checksum`: Checksum is the sha256 hash of the stored code
 * @param atu8_data - `data`: Data contains bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgStoreAndMigrateContractResponse = (sg_code_id, atu8_checksum, atu8_data) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .b(atu8_checksum) // bytes checksum = 2
    .b(atu8_data) // bytes data = 3
    .o;
/**
 * Encodes a `MsgUpdateContractLabel` protobuf message: sets a new label for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_new_label - `new_label`: NewLabel string to be set
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateContractLabel = (sa_sender, s_new_label, s_contract) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_new_label) // string new_label = 2
    .s(s_contract) // string contract = 3
    .o;
/**
 * Encodes a `MsgUpdateContractLabelResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeCosmwasmWasmMsgUpdateContractLabelResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgStoreCode}
 */
export const decodeCosmwasmWasmMsgStoreCode = ((atu8_payload, [sa_sender, atu8_wasm_byte_code, , , a_instantiate_permission] = decode_protobuf(atu8_payload, [5, 1, 0, 0, 1], [0, 0, 0, 0, decodeCosmwasmWasmAccessConfig])) => [sa_sender, atu8_wasm_byte_code, __UNDEFINED, __UNDEFINED, a_instantiate_permission]);
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreCodeResponse}
 */
export const decodeCosmwasmWasmMsgStoreCodeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1]);
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContract}
 */
export const decodeCosmwasmWasmMsgInstantiateContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 5, 1, 0], [0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContractResponse}
 */
export const decodeCosmwasmWasmMsgInstantiateContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf InstantiateContract2 message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContract2}
 */
export const decodeCosmwasmWasmMsgInstantiateContract2 = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 5, 1, 0, 1, 1], [0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf InstantiateContract2 message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgInstantiateContract2Response}
 */
export const decodeCosmwasmWasmMsgInstantiateContract2Response = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgExecuteContract}
 */
export const decodeCosmwasmWasmMsgExecuteContract = ((atu8_payload, [sa_sender, s_contract, atu8_msg, , a_funds] = decode_protobuf(atu8_payload, [5, 5, 1, 0, 0], [0, 0, 0, 0, decode_coin])) => [sa_sender, s_contract, atu8_msg, __UNDEFINED, a_funds]);
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgExecuteContractResponse}
 */
export const decodeCosmwasmWasmMsgExecuteContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgMigrateContract}
 */
export const decodeCosmwasmWasmMsgMigrateContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 1]);
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgMigrateContractResponse}
 */
export const decodeCosmwasmWasmMsgMigrateContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateAdmin}
 */
export const decodeCosmwasmWasmMsgUpdateAdmin = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateAdminResponse}
 */
export const decodeCosmwasmWasmMsgUpdateAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgClearAdmin}
 */
export const decodeCosmwasmWasmMsgClearAdmin = ((atu8_payload, [sa_sender, , s_contract] = decode_protobuf(atu8_payload, [5, 0, 5])) => [sa_sender, __UNDEFINED, s_contract]);
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgClearAdminResponse}
 */
export const decodeCosmwasmWasmMsgClearAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf AccessConfigUpdate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmAccessConfigUpdate}
 */
export const decodeCosmwasmWasmAccessConfigUpdate = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1], [0, decodeCosmwasmWasmAccessConfig]);
/**
 * Decodes a protobuf UpdateInstantiateConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateInstantiateConfig}
 */
export const decodeCosmwasmWasmMsgUpdateInstantiateConfig = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 1], [0, 0, decodeCosmwasmWasmAccessConfig]);
/**
 * Decodes a protobuf UpdateInstantiateConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateInstantiateConfigResponse}
 */
export const decodeCosmwasmWasmMsgUpdateInstantiateConfigResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateParams}
 */
export const decodeCosmwasmWasmMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmwasmWasmParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateParamsResponse}
 */
export const decodeCosmwasmWasmMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SudoContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgSudoContract}
 */
export const decodeCosmwasmWasmMsgSudoContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf SudoContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgSudoContractResponse}
 */
export const decodeCosmwasmWasmMsgSudoContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf PinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgPinCodes}
 */
export const decodeCosmwasmWasmMsgPinCodes = (atu8_payload) => decode_protobuf(atu8_payload, [5, 2]);
/**
 * Decodes a protobuf PinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgPinCodesResponse}
 */
export const decodeCosmwasmWasmMsgPinCodesResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UnpinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUnpinCodes}
 */
export const decodeCosmwasmWasmMsgUnpinCodes = (atu8_payload) => decode_protobuf(atu8_payload, [5, 2]);
/**
 * Decodes a protobuf UnpinCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUnpinCodesResponse}
 */
export const decodeCosmwasmWasmMsgUnpinCodesResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf StoreAndInstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndInstantiateContract}
 */
export const decodeCosmwasmWasmMsgStoreAndInstantiateContract = ((atu8_payload, [s_authority, , atu8_wasm_byte_code, a_instantiate_permission, b_unpin_code, s_admin, s_label, atu8_msg, a_funds, s_source, s_builder, atu8_code_hash] = decode_protobuf(atu8_payload, [5, 0, 1, 1, 1, 5, 5, 1, 0, 5, 5, 1], [0, 0, 0, decodeCosmwasmWasmAccessConfig, 0, 0, 0, 0, decode_coin])) => [s_authority, __UNDEFINED, atu8_wasm_byte_code, a_instantiate_permission, b_unpin_code, s_admin, s_label, atu8_msg, a_funds, s_source, s_builder, atu8_code_hash]);
/**
 * Decodes a protobuf StoreAndInstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndInstantiateContractResponse}
 */
export const decodeCosmwasmWasmMsgStoreAndInstantiateContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf AddCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgAddCodeUploadParamsAddresses}
 */
export const decodeCosmwasmWasmMsgAddCodeUploadParamsAddresses = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf AddCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse}
 */
export const decodeCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RemoveCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddresses}
 */
export const decodeCosmwasmWasmMsgRemoveCodeUploadParamsAddresses = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf RemoveCodeUploadParamsAddresses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse}
 */
export const decodeCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf StoreAndMigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndMigrateContract}
 */
export const decodeCosmwasmWasmMsgStoreAndMigrateContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 5, 1], [0, 0, decodeCosmwasmWasmAccessConfig]);
/**
 * Decodes a protobuf StoreAndMigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgStoreAndMigrateContractResponse}
 */
export const decodeCosmwasmWasmMsgStoreAndMigrateContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1]);
/**
 * Decodes a protobuf UpdateContractLabel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateContractLabel}
 */
export const decodeCosmwasmWasmMsgUpdateContractLabel = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf UpdateContractLabel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedCosmwasmWasmMsgUpdateContractLabelResponse}
 */
export const decodeCosmwasmWasmMsgUpdateContractLabelResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreCode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the actor that signed the messages
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 4: instantiate_permission - InstantiatePermission access control to apply on contract creation, optional
 */
export const destructCosmwasmWasmMsgStoreCode = (g_struct) => [g_struct.sender, safe_base64_to_bytes(g_struct.wasm_byte_code), __UNDEFINED, __UNDEFINED, g_struct.instantiate_permission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_CODE = '/cosmwasm.wasm.v1.MsgStoreCode';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreCodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 *   - 1: checksum - Checksum is the sha256 hash of the stored code
 */
export const destructCosmwasmWasmMsgStoreCodeResponse = (g_struct) => [g_struct.code_id, safe_base64_to_bytes(g_struct.checksum)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_CODE_RESPONSE = '/cosmwasm.wasm.v1.MsgStoreCodeResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: admin - Admin is an optional address that can execute migrations
 *   - 2: code_id - CodeID is the reference to the stored WASM code
 *   - 3: label - Label is optional metadata to be stored with a contract instance.
 *   - 4: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 5: funds - Funds coins that are transferred to the contract on instantiation
 */
export const destructCosmwasmWasmMsgInstantiateContract = (g_struct) => [g_struct.sender, g_struct.admin, g_struct.code_id, g_struct.label, safe_base64_to_bytes(g_struct.msg), g_struct.funds];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT = '/cosmwasm.wasm.v1.MsgInstantiateContract';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export const destructCosmwasmWasmMsgInstantiateContractResponse = (g_struct) => [g_struct.address, safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT_RESPONSE = '/cosmwasm.wasm.v1.MsgInstantiateContractResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContract2} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: admin - Admin is an optional address that can execute migrations
 *   - 2: code_id - CodeID is the reference to the stored WASM code
 *   - 3: label - Label is optional metadata to be stored with a contract instance.
 *   - 4: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 5: funds - Funds coins that are transferred to the contract on instantiation
 *   - 6: salt - Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
 *   - 7: fix_msg - FixMsg include the msg value into the hash for the predictable address. Default is false
 */
export const destructCosmwasmWasmMsgInstantiateContract2 = (g_struct) => [g_struct.sender, g_struct.admin, g_struct.code_id, g_struct.label, safe_base64_to_bytes(g_struct.msg), g_struct.funds, safe_base64_to_bytes(g_struct.salt), g_struct.fix_msg];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT2 = '/cosmwasm.wasm.v1.MsgInstantiateContract2';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgInstantiateContract2Response} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export const destructCosmwasmWasmMsgInstantiateContract2Response = (g_struct) => [g_struct.address, safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_INSTANTIATE_CONTRACT2_RESPONSE = '/cosmwasm.wasm.v1.MsgInstantiateContract2Response';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgExecuteContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: msg - Msg json encoded message to be passed to the contract
 *   - 4: funds - Funds coins that are transferred to the contract on execution
 */
export const destructCosmwasmWasmMsgExecuteContract = (g_struct) => [g_struct.sender, g_struct.contract, safe_base64_to_bytes(g_struct.msg), __UNDEFINED, g_struct.funds];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_EXECUTE_CONTRACT = '/cosmwasm.wasm.v1.MsgExecuteContract';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgExecuteContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains bytes to returned from the contract
 */
export const destructCosmwasmWasmMsgExecuteContractResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_EXECUTE_CONTRACT_RESPONSE = '/cosmwasm.wasm.v1.MsgExecuteContractResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgMigrateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: code_id - CodeID references the new WASM code
 *   - 3: msg - Msg json encoded message to be passed to the contract on migration
 */
export const destructCosmwasmWasmMsgMigrateContract = (g_struct) => [g_struct.sender, g_struct.contract, g_struct.code_id, safe_base64_to_bytes(g_struct.msg)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_MIGRATE_CONTRACT = '/cosmwasm.wasm.v1.MsgMigrateContract';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgMigrateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 */
export const destructCosmwasmWasmMsgMigrateContractResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_MIGRATE_CONTRACT_RESPONSE = '/cosmwasm.wasm.v1.MsgMigrateContractResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_admin - NewAdmin address to be set
 *   - 2: contract - Contract is the address of the smart contract
 */
export const destructCosmwasmWasmMsgUpdateAdmin = (g_struct) => [g_struct.sender, g_struct.new_admin, g_struct.contract];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_ADMIN = '/cosmwasm.wasm.v1.MsgUpdateAdmin';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgUpdateAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_ADMIN_RESPONSE = '/cosmwasm.wasm.v1.MsgUpdateAdminResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgClearAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the actor that signed the messages
 *   - 2: contract - Contract is the address of the smart contract
 */
export const destructCosmwasmWasmMsgClearAdmin = (g_struct) => [g_struct.sender, __UNDEFINED, g_struct.contract];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_CLEAR_ADMIN = '/cosmwasm.wasm.v1.MsgClearAdmin';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgClearAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgClearAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_CLEAR_ADMIN_RESPONSE = '/cosmwasm.wasm.v1.MsgClearAdminResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmAccessConfigUpdate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code to be updated
 *   - 1: instantiate_permission - InstantiatePermission to apply to the set of code ids
 */
export const destructCosmwasmWasmAccessConfigUpdate = (g_struct) => [g_struct.code_id, g_struct.instantiate_permission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_ACCESS_CONFIG_UPDATE = '/cosmwasm.wasm.v1.AccessConfigUpdate';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateInstantiateConfig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: code_id - CodeID references the stored WASM code
 *   - 2: new_instantiate_permission - NewInstantiatePermission is the new access control
 */
export const destructCosmwasmWasmMsgUpdateInstantiateConfig = (g_struct) => [g_struct.sender, g_struct.code_id, g_struct.new_instantiate_permission];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_INSTANTIATE_CONFIG = '/cosmwasm.wasm.v1.MsgUpdateInstantiateConfig';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateInstantiateConfigResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgUpdateInstantiateConfigResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_INSTANTIATE_CONFIG_RESPONSE = '/cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: params - defines the x/wasm parameters to update. NOTE: All parameters must be supplied.
 */
export const destructCosmwasmWasmMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_PARAMS = '/cosmwasm.wasm.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_PARAMS_RESPONSE = '/cosmwasm.wasm.v1.MsgUpdateParamsResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgSudoContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: msg - Msg json encoded message to be passed to the contract as sudo
 */
export const destructCosmwasmWasmMsgSudoContract = (g_struct) => [g_struct.authority, g_struct.contract, safe_base64_to_bytes(g_struct.msg)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_SUDO_CONTRACT = '/cosmwasm.wasm.v1.MsgSudoContract';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgSudoContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains bytes to returned from the contract
 */
export const destructCosmwasmWasmMsgSudoContractResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_SUDO_CONTRACT_RESPONSE = '/cosmwasm.wasm.v1.MsgSudoContractResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgPinCodes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: code_ids - CodeIDs references the new WASM codes
 */
export const destructCosmwasmWasmMsgPinCodes = (g_struct) => [g_struct.authority, g_struct.code_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_PIN_CODES = '/cosmwasm.wasm.v1.MsgPinCodes';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgPinCodesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgPinCodesResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_PIN_CODES_RESPONSE = '/cosmwasm.wasm.v1.MsgPinCodesResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUnpinCodes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: code_ids - CodeIDs references the WASM codes
 */
export const destructCosmwasmWasmMsgUnpinCodes = (g_struct) => [g_struct.authority, g_struct.code_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UNPIN_CODES = '/cosmwasm.wasm.v1.MsgUnpinCodes';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUnpinCodesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgUnpinCodesResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UNPIN_CODES_RESPONSE = '/cosmwasm.wasm.v1.MsgUnpinCodesResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndInstantiateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 2: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 3: instantiate_permission - InstantiatePermission to apply on contract creation, optional
 *   - 4: unpin_code - UnpinCode code on upload, optional. As default the uploaded contract is pinned to cache.
 *   - 5: admin - Admin is an optional address that can execute migrations
 *   - 6: label - Label is optional metadata to be stored with a constract instance.
 *   - 7: msg - Msg json encoded message to be passed to the contract on instantiation
 *   - 8: funds - Funds coins that are transferred from the authority account to the contract on instantiation
 *   - 9: source - Source is the URL where the code is hosted
 *   - 10: builder - Builder is the docker image used to build the code deterministically, used for smart contract verification
 *   - 11: code_hash - CodeHash is the SHA256 sum of the code outputted by builder, used for smart contract verification
 */
export const destructCosmwasmWasmMsgStoreAndInstantiateContract = (g_struct) => [g_struct.authority, __UNDEFINED, safe_base64_to_bytes(g_struct.wasm_byte_code), g_struct.instantiate_permission, g_struct.unpin_code, g_struct.admin, g_struct.label, safe_base64_to_bytes(g_struct.msg), g_struct.funds, g_struct.source, g_struct.builder, safe_base64_to_bytes(g_struct.code_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_INSTANTIATE_CONTRACT = '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContract';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndInstantiateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains bytes to returned from the contract
 */
export const destructCosmwasmWasmMsgStoreAndInstantiateContractResponse = (g_struct) => [g_struct.address, safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_INSTANTIATE_CONTRACT_RESPONSE = '/cosmwasm.wasm.v1.MsgStoreAndInstantiateContractResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgAddCodeUploadParamsAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: addresses -
 */
export const destructCosmwasmWasmMsgAddCodeUploadParamsAddresses = (g_struct) => [g_struct.authority, g_struct.addresses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_ADD_CODE_UPLOAD_PARAMS_ADDRESSES = '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddresses';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgAddCodeUploadParamsAddressesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgAddCodeUploadParamsAddressesResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_ADD_CODE_UPLOAD_PARAMS_ADDRESSES_RESPONSE = '/cosmwasm.wasm.v1.MsgAddCodeUploadParamsAddressesResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgRemoveCodeUploadParamsAddresses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: addresses -
 */
export const destructCosmwasmWasmMsgRemoveCodeUploadParamsAddresses = (g_struct) => [g_struct.authority, g_struct.addresses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_REMOVE_CODE_UPLOAD_PARAMS_ADDRESSES = '/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddresses';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgRemoveCodeUploadParamsAddressesResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_REMOVE_CODE_UPLOAD_PARAMS_ADDRESSES_RESPONSE = '/cosmwasm.wasm.v1.MsgRemoveCodeUploadParamsAddressesResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndMigrateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - Authority is the address of the governance account.
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 2: instantiate_permission - InstantiatePermission to apply on contract creation, optional
 *   - 3: contract - Contract is the address of the smart contract
 *   - 4: msg - Msg json encoded message to be passed to the contract on migration
 */
export const destructCosmwasmWasmMsgStoreAndMigrateContract = (g_struct) => [g_struct.authority, safe_base64_to_bytes(g_struct.wasm_byte_code), g_struct.instantiate_permission, g_struct.contract, safe_base64_to_bytes(g_struct.msg)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_MIGRATE_CONTRACT = '/cosmwasm.wasm.v1.MsgStoreAndMigrateContract';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgStoreAndMigrateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 *   - 1: checksum - Checksum is the sha256 hash of the stored code
 *   - 2: data - Data contains bytes to returned from the contract
 */
export const destructCosmwasmWasmMsgStoreAndMigrateContractResponse = (g_struct) => [g_struct.code_id, safe_base64_to_bytes(g_struct.checksum), safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_STORE_AND_MIGRATE_CONTRACT_RESPONSE = '/cosmwasm.wasm.v1.MsgStoreAndMigrateContractResponse';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateContractLabel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_label - NewLabel string to be set
 *   - 2: contract - Contract is the address of the smart contract
 */
export const destructCosmwasmWasmMsgUpdateContractLabel = (g_struct) => [g_struct.sender, g_struct.new_label, g_struct.contract];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_CONTRACT_LABEL = '/cosmwasm.wasm.v1.MsgUpdateContractLabel';
/**
 * Destructures the fields of a {@link CosmwasmWasmMsgUpdateContractLabelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructCosmwasmWasmMsgUpdateContractLabelResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_COSMWASM_WASM_MSG_UPDATE_CONTRACT_LABEL_RESPONSE = '/cosmwasm.wasm.v1.MsgUpdateContractLabelResponse';
//# sourceMappingURL=tx.js.map