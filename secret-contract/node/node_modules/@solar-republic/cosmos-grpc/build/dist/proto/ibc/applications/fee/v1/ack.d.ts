import type { WeakAccountAddr, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedIbcApplicationsFeeIncentivizedAcknowledgement = Encoded<'/ibc.applications.fee.v1.IncentivizedAcknowledgement'>;
/**
 * Encodes a `IncentivizedAcknowledgement` protobuf message: the acknowledgement format to be used by applications wrapped in the fee middleware
 * @param atu8_app_acknowledgement - `app_acknowledgement`: the underlying app acknowledgement bytes
 * @param sa_forward_relayer - `forward_relayer_address`: the relayer address which submits the recv packet message
 * @param b_underlying_app_success - `underlying_app_success`: success flag of the base application callback
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeIncentivizedAcknowledgement: (atu8_app_acknowledgement?: Opt<Uint8Array>, sa_forward_relayer?: Opt<WeakAccountAddr>, b_underlying_app_success?: Opt<boolean | 0 | 1>) => EncodedIbcApplicationsFeeIncentivizedAcknowledgement;
/**
 * A decoded protobuf IncentivizedAcknowledgement message
 *
 * Tuple where:
 *   - 0: app_acknowledgement - the underlying app acknowledgement bytes
 *   - 1: forward_relayer_address - the relayer address which submits the recv packet message
 *   - 2: underlying_app_success - success flag of the base application callback
 */
export type DecodedIbcApplicationsFeeIncentivizedAcknowledgement = [
    atu8_app_acknowledgement?: Uint8Array,
    sa_forward_relayer?: CwAccountAddr,
    b_underlying_app_success?: 0 | 1
];
/**
 * Decodes a protobuf IncentivizedAcknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeIncentivizedAcknowledgement}
 */
export declare const decodeIbcApplicationsFeeIncentivizedAcknowledgement: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeIncentivizedAcknowledgement;
/**
 * Destructures the fields of a {@link IbcApplicationsFeeIncentivizedAcknowledgement} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: app_acknowledgement - the underlying app acknowledgement bytes
 *   - 1: forward_relayer_address - the relayer address which submits the recv packet message
 *   - 2: underlying_app_success - success flag of the base application callback
 */
export declare const destructIbcApplicationsFeeIncentivizedAcknowledgement: (g_struct: IbcApplicationsFeeIncentivizedAcknowledgement) => [app_acknowledgement?: Uint8Array, forward_relayer_address?: CwAccountAddr, underlying_app_success?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_INCENTIVIZED_ACKNOWLEDGEMENT = "/ibc.applications.fee.v1.IncentivizedAcknowledgement";
/**
 * JSON serialization of `ibc.applications.fee.v1.IncentivizedAcknowledgement` - the acknowledgement format to be used by applications wrapped in the fee middleware
 */
export type IbcApplicationsFeeIncentivizedAcknowledgement = {
    app_acknowledgement?: CwBase64 | undefined;
    forward_relayer_address?: CwAccountAddr | undefined;
    underlying_app_success?: boolean | undefined;
};
