import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
import type { IbcCoreChannelPacketId, DecodedIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
export type EncodedIbcApplicationsFeeFee = Encoded<'/ibc.applications.fee.v1.Fee'>;
export type EncodedIbcApplicationsFeePacketFee = Encoded<'/ibc.applications.fee.v1.PacketFee'>;
export type EncodedIbcApplicationsFeePacketFees = Encoded<'/ibc.applications.fee.v1.PacketFees'>;
export type EncodedIbcApplicationsFeeIdentifiedPacketFees = Encoded<'/ibc.applications.fee.v1.IdentifiedPacketFees'>;
/**
 * Encodes a `Fee` protobuf message: defines the ICS29 receive, acknowledgement and timeout fees
 * @param a_recv_fees - `recv_fee`: the packet receive fee
 * @param a_ack_fees - `ack_fee`: the packet acknowledgement fee
 * @param a_timeout_fees - `timeout_fee`: the packet timeout fee
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeFee: (a_recv_fees?: Opt<SlimCoin[]>, a_ack_fees?: Opt<SlimCoin[]>, a_timeout_fees?: Opt<SlimCoin[]>) => EncodedIbcApplicationsFeeFee;
/**
 * Encodes a `PacketFee` protobuf message: contains ICS29 relayer fees, refund address and optional list of permitted relayers
 * @param g_fee - `fee`: encapsulates the recv, ack and timeout fees associated with an IBC packet
 * @param sa_refund - `refund_address`: the refund address for unspent fees
 * @param a_relayers - `relayers`: optional list of relayers permitted to receive fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeePacketFee: (atu8_fee?: Opt<Encoded<'/ibc.applications.fee.v1.Fee'>>, sa_refund?: Opt<WeakAccountAddr>, a_relayers?: Opt<string[]>) => EncodedIbcApplicationsFeePacketFee;
/**
 * Encodes a `PacketFees` protobuf message: contains a list of type PacketFee
 * @param a_packet_fees - `packet_fees`: list of packet fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeePacketFees: (a_packet_fees?: Opt<Encoded<'/ibc.applications.fee.v1.PacketFee'>[]>) => EncodedIbcApplicationsFeePacketFees;
/**
 * Encodes a `IdentifiedPacketFees` protobuf message: contains a list of type PacketFee and associated PacketId
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of the channel ID, port ID and sequence
 * @param a_packet_fees - `packet_fees`: list of packet fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeIdentifiedPacketFees: (atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>, a_packet_fees?: Opt<Encoded<'/ibc.applications.fee.v1.PacketFee'>[]>) => EncodedIbcApplicationsFeeIdentifiedPacketFees;
/**
 * A decoded protobuf Fee message
 *
 * Tuple where:
 *   - 0: recv_fee - the packet receive fee
 *   - 1: ack_fee - the packet acknowledgement fee
 *   - 2: timeout_fee - the packet timeout fee
 */
export type DecodedIbcApplicationsFeeFee = [
    a_recv_fee?: [
        string,
        string
    ][],
    a_ack_fee?: [
        string,
        string
    ][],
    a_timeout_fee?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf Fee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeFee}
 */
export declare const decodeIbcApplicationsFeeFee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeFee;
/**
 * A decoded protobuf PacketFee message
 *
 * Tuple where:
 *   - 0: fee - encapsulates the recv, ack and timeout fees associated with an IBC packet
 *   - 1: refund_address - the refund address for unspent fees
 *   - 2: relayers - optional list of relayers permitted to receive fees
 */
export type DecodedIbcApplicationsFeePacketFee = [
    a_fee?: DecodedIbcApplicationsFeeFee,
    sa_refund?: CwAccountAddr,
    a_relayers?: string[]
];
/**
 * Decodes a protobuf PacketFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeePacketFee}
 */
export declare const decodeIbcApplicationsFeePacketFee: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeePacketFee;
/**
 * A decoded protobuf PacketFees message
 *
 * Alias for: packet_fees - list of packet fees
 */
export type DecodedIbcApplicationsFeePacketFees = [
    a_packet_fees?: DecodedIbcApplicationsFeePacketFee[]
];
/**
 * Decodes a protobuf PacketFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeePacketFees}
 */
export declare const decodeIbcApplicationsFeePacketFees: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeePacketFees;
/**
 * A decoded protobuf IdentifiedPacketFees message
 *
 * Tuple where:
 *   - 0: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 *   - 1: packet_fees - list of packet fees
 */
export type DecodedIbcApplicationsFeeIdentifiedPacketFees = [
    a_packet_id?: DecodedIbcCoreChannelPacketId,
    a_packet_fees?: DecodedIbcApplicationsFeePacketFee[]
];
/**
 * Decodes a protobuf IdentifiedPacketFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeIdentifiedPacketFees}
 */
export declare const decodeIbcApplicationsFeeIdentifiedPacketFees: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeIdentifiedPacketFees;
/**
 * Destructures the fields of a {@link IbcApplicationsFeeFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: recv_fee - the packet receive fee
 *   - 1: ack_fee - the packet acknowledgement fee
 *   - 2: timeout_fee - the packet timeout fee
 */
export declare const destructIbcApplicationsFeeFee: (g_struct: IbcApplicationsFeeFee) => [recv_fee?: CosmosBaseCoin[], ack_fee?: CosmosBaseCoin[], timeout_fee?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_FEE = "/ibc.applications.fee.v1.Fee";
/**
 * JSON serialization of `ibc.applications.fee.v1.Fee` - defines the ICS29 receive, acknowledgement and timeout fees
 */
export type IbcApplicationsFeeFee = {
    recv_fee?: CosmosBaseCoin[] | undefined;
    ack_fee?: CosmosBaseCoin[] | undefined;
    timeout_fee?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeePacketFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee - encapsulates the recv, ack and timeout fees associated with an IBC packet
 *   - 1: refund_address - the refund address for unspent fees
 *   - 2: relayers - optional list of relayers permitted to receive fees
 */
export declare const destructIbcApplicationsFeePacketFee: (g_struct: IbcApplicationsFeePacketFee) => [fee?: IbcApplicationsFeeFee, refund_address?: CwAccountAddr, relayers?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_PACKET_FEE = "/ibc.applications.fee.v1.PacketFee";
/**
 * JSON serialization of `ibc.applications.fee.v1.PacketFee` - contains ICS29 relayer fees, refund address and optional list of permitted relayers
 */
export type IbcApplicationsFeePacketFee = {
    fee?: IbcApplicationsFeeFee | undefined;
    refund_address?: CwAccountAddr | undefined;
    relayers?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeIdentifiedPacketFees} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 *   - 1: packet_fees - list of packet fees
 */
export declare const destructIbcApplicationsFeeIdentifiedPacketFees: (g_struct: IbcApplicationsFeeIdentifiedPacketFees) => [packet_id?: IbcCoreChannelPacketId, packet_fees?: IbcApplicationsFeePacketFee[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_IDENTIFIED_PACKET_FEES = "/ibc.applications.fee.v1.IdentifiedPacketFees";
/**
 * JSON serialization of `ibc.applications.fee.v1.IdentifiedPacketFees` - contains a list of type PacketFee and associated PacketId
 */
export type IbcApplicationsFeeIdentifiedPacketFees = {
    packet_id?: IbcCoreChannelPacketId | undefined;
    packet_fees?: IbcApplicationsFeePacketFee[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeePacketFees} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_fees - list of packet fees
 */
export declare const destructIbcApplicationsFeePacketFees: (g_struct: IbcApplicationsFeePacketFees) => [packet_fees?: IbcApplicationsFeePacketFee[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_PACKET_FEES = "/ibc.applications.fee.v1.PacketFees";
/**
 * JSON serialization of `ibc.applications.fee.v1.PacketFees` - contains a list of type PacketFee
 */
export type IbcApplicationsFeePacketFees = {
    packet_fees?: IbcApplicationsFeePacketFee[] | undefined;
};
