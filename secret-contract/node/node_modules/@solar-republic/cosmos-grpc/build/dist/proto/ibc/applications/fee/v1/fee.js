import { decode_protobuf, decode_coin } from '../../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../../api/protobuf-writer.js';
import { decodeIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
/**
 * Encodes a `Fee` protobuf message: defines the ICS29 receive, acknowledgement and timeout fees
 * @param a_recv_fees - `recv_fee`: the packet receive fee
 * @param a_ack_fees - `ack_fee`: the packet acknowledgement fee
 * @param a_timeout_fees - `timeout_fee`: the packet timeout fee
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeFee = (a_recv_fees, a_ack_fees, a_timeout_fees) => Protobuf() // ...
    .B(coins(a_recv_fees)) // Coin[] recv_fee = 1
    .B(coins(a_ack_fees)) // Coin[] ack_fee = 2
    .B(coins(a_timeout_fees)) // Coin[] timeout_fee = 3
    .o;
/**
 * Encodes a `PacketFee` protobuf message: contains ICS29 relayer fees, refund address and optional list of permitted relayers
 * @param g_fee - `fee`: encapsulates the recv, ack and timeout fees associated with an IBC packet
 * @param sa_refund - `refund_address`: the refund address for unspent fees
 * @param a_relayers - `relayers`: optional list of relayers permitted to receive fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeePacketFee = (atu8_fee, sa_refund, a_relayers) => Protobuf() // ...
    .b(atu8_fee) // Fee fee = 1
    .s(sa_refund) // string refund_address = 2
    .S(a_relayers) // string[] relayers = 3
    .o;
/**
 * Encodes a `PacketFees` protobuf message: contains a list of type PacketFee
 * @param a_packet_fees - `packet_fees`: list of packet fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeePacketFees = (a_packet_fees) => Protobuf() // ...
    .B(a_packet_fees) // PacketFee[] packet_fees = 1
    .o;
/**
 * Encodes a `IdentifiedPacketFees` protobuf message: contains a list of type PacketFee and associated PacketId
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of the channel ID, port ID and sequence
 * @param a_packet_fees - `packet_fees`: list of packet fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeIdentifiedPacketFees = (atu8_packet_id, a_packet_fees) => Protobuf() // ...
    .b(atu8_packet_id) // PacketId packet_id = 1
    .B(a_packet_fees) // PacketFee[] packet_fees = 2
    .o;
/**
 * Decodes a protobuf Fee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeFee}
 */
export const decodeIbcApplicationsFeeFee = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 0], [decode_coin, decode_coin, decode_coin]);
/**
 * Decodes a protobuf PacketFee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeePacketFee}
 */
export const decodeIbcApplicationsFeePacketFee = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 4], [decodeIbcApplicationsFeeFee]);
/**
 * Decodes a protobuf PacketFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeePacketFees}
 */
export const decodeIbcApplicationsFeePacketFees = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeIbcApplicationsFeePacketFee]);
/**
 * Decodes a protobuf IdentifiedPacketFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeIdentifiedPacketFees}
 */
export const decodeIbcApplicationsFeeIdentifiedPacketFees = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [decodeIbcCoreChannelPacketId, decodeIbcApplicationsFeePacketFee]);
/**
 * Destructures the fields of a {@link IbcApplicationsFeeFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: recv_fee - the packet receive fee
 *   - 1: ack_fee - the packet acknowledgement fee
 *   - 2: timeout_fee - the packet timeout fee
 */
export const destructIbcApplicationsFeeFee = (g_struct) => [g_struct.recv_fee, g_struct.ack_fee, g_struct.timeout_fee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_FEE = '/ibc.applications.fee.v1.Fee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeePacketFee} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee - encapsulates the recv, ack and timeout fees associated with an IBC packet
 *   - 1: refund_address - the refund address for unspent fees
 *   - 2: relayers - optional list of relayers permitted to receive fees
 */
export const destructIbcApplicationsFeePacketFee = (g_struct) => [g_struct.fee, g_struct.refund_address, g_struct.relayers];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_PACKET_FEE = '/ibc.applications.fee.v1.PacketFee';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeIdentifiedPacketFees} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - unique packet identifier comprised of the channel ID, port ID and sequence
 *   - 1: packet_fees - list of packet fees
 */
export const destructIbcApplicationsFeeIdentifiedPacketFees = (g_struct) => [g_struct.packet_id, g_struct.packet_fees];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_IDENTIFIED_PACKET_FEES = '/ibc.applications.fee.v1.IdentifiedPacketFees';
/**
 * Destructures the fields of a {@link IbcApplicationsFeePacketFees} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_fees - list of packet fees
 */
export const destructIbcApplicationsFeePacketFees = (g_struct) => [g_struct.packet_fees];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_PACKET_FEES = '/ibc.applications.fee.v1.PacketFees';
//# sourceMappingURL=fee.js.map