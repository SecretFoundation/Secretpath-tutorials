/// <reference types="node" />
import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
import type { IbcApplicationsFeeIdentifiedPacketFees, DecodedIbcApplicationsFeeIdentifiedPacketFees } from './fee.js';
import type { IbcApplicationsFeeFeeEnabledChannel, DecodedIbcApplicationsFeeFeeEnabledChannel } from './genesis.js';
import type { IbcCoreChannelPacketId, DecodedIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
export type EncodedIbcApplicationsFeeQueryIncentivizedPacketsRequest = Encoded<'/ibc.applications.fee.v1.QueryIncentivizedPacketsRequest'>;
export type EncodedIbcApplicationsFeeQueryIncentivizedPacketsResponse = Encoded<'/ibc.applications.fee.v1.QueryIncentivizedPacketsResponse'>;
export type EncodedIbcApplicationsFeeQueryIncentivizedPacketRequest = Encoded<'/ibc.applications.fee.v1.QueryIncentivizedPacketRequest'>;
export type EncodedIbcApplicationsFeeQueryIncentivizedPacketResponse = Encoded<'/ibc.applications.fee.v1.QueryIncentivizedPacketResponse'>;
export type EncodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest = Encoded<'/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest'>;
export type EncodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse = Encoded<'/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse'>;
export type EncodedIbcApplicationsFeeQueryTotalRecvFeesRequest = Encoded<'/ibc.applications.fee.v1.QueryTotalRecvFeesRequest'>;
export type EncodedIbcApplicationsFeeQueryTotalRecvFeesResponse = Encoded<'/ibc.applications.fee.v1.QueryTotalRecvFeesResponse'>;
export type EncodedIbcApplicationsFeeQueryTotalAckFeesRequest = Encoded<'/ibc.applications.fee.v1.QueryTotalAckFeesRequest'>;
export type EncodedIbcApplicationsFeeQueryTotalAckFeesResponse = Encoded<'/ibc.applications.fee.v1.QueryTotalAckFeesResponse'>;
export type EncodedIbcApplicationsFeeQueryTotalTimeoutFeesRequest = Encoded<'/ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest'>;
export type EncodedIbcApplicationsFeeQueryTotalTimeoutFeesResponse = Encoded<'/ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse'>;
export type EncodedIbcApplicationsFeeQueryPayeeRequest = Encoded<'/ibc.applications.fee.v1.QueryPayeeRequest'>;
export type EncodedIbcApplicationsFeeQueryPayeeResponse = Encoded<'/ibc.applications.fee.v1.QueryPayeeResponse'>;
export type EncodedIbcApplicationsFeeQueryCounterpartyPayeeRequest = Encoded<'/ibc.applications.fee.v1.QueryCounterpartyPayeeRequest'>;
export type EncodedIbcApplicationsFeeQueryCounterpartyPayeeResponse = Encoded<'/ibc.applications.fee.v1.QueryCounterpartyPayeeResponse'>;
export type EncodedIbcApplicationsFeeQueryFeeEnabledChannelsRequest = Encoded<'/ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest'>;
export type EncodedIbcApplicationsFeeQueryFeeEnabledChannelsResponse = Encoded<'/ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse'>;
export type EncodedIbcApplicationsFeeQueryFeeEnabledChannelRequest = Encoded<'/ibc.applications.fee.v1.QueryFeeEnabledChannelRequest'>;
export type EncodedIbcApplicationsFeeQueryFeeEnabledChannelResponse = Encoded<'/ibc.applications.fee.v1.QueryFeeEnabledChannelResponse'>;
/**
 * Returns all incentivized packets and their associated fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @param sg_query_height - block height at which to query
 * @returns a tuple where:
 *   - 0: incentivized_packets - list of identified fees for incentivized packets
 *   - 1: pagination - list of identified fees for incentivized packets
 */
export declare const queryIbcApplicationsFeeIncentivizedPackets: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>, sg_query_height?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryIncentivizedPacketsResponse>>;
/**
 * Returns all packet fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - unique packet identifier comprised of channel ID, port ID and sequence
 * @param sg_query_height - block height at which to query
 * @returns a tuple where:
 *   - 0: incentivized_packet - the identified fees for the incentivized packet
 */
export declare const queryIbcApplicationsFeeIncentivizedPacket: (z_req: string | ({
    origin: string;
} & RequestInit), g_packet_id?: Opt<IbcCoreChannelPacketId>, sg_query_height?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryIncentivizedPacketResponse>>;
/**
 * Gets all incentivized packets for a specific channel
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @param si_port -
 * @param si_channel -
 * @param sg_query_height - Height to query at
 * @returns a tuple where:
 *   - 0: incentivized_packets - Map of all incentivized_packets
 *   - 1: pagination - Map of all incentivized_packets
 */
export declare const queryIbcApplicationsFeeIncentivizedPacketsForChannel: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>, si_port?: Opt<string>, si_channel?: Opt<string>, sg_query_height?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse>>;
/**
 * Returns the total receive fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - the packet identifier for the associated fees
 * @returns a tuple where:
 *   - 0: recv_fees - the total packet receive fees
 */
export declare const queryIbcApplicationsFeeTotalRecvFees: (z_req: string | ({
    origin: string;
} & RequestInit), g_packet_id?: Opt<IbcCoreChannelPacketId>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryTotalRecvFeesResponse>>;
/**
 * Returns the total acknowledgement fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - the packet identifier for the associated fees
 * @returns a tuple where:
 *   - 0: ack_fees - the total packet acknowledgement fees
 */
export declare const queryIbcApplicationsFeeTotalAckFees: (z_req: string | ({
    origin: string;
} & RequestInit), g_packet_id?: Opt<IbcCoreChannelPacketId>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryTotalAckFeesResponse>>;
/**
 * Returns the total timeout fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - the packet identifier for the associated fees
 * @returns a tuple where:
 *   - 0: timeout_fees - the total packet timeout fees
 */
export declare const queryIbcApplicationsFeeTotalTimeoutFees: (z_req: string | ({
    origin: string;
} & RequestInit), g_packet_id?: Opt<IbcCoreChannelPacketId>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryTotalTimeoutFeesResponse>>;
/**
 * Returns the registered payee address for a specific channel given the relayer address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_channel - unique channel identifier
 * @param s_relayer - the relayer address to which the distribution address is registered
 * @returns a tuple where:
 *   - 0: payee_address - the payee address to which packet fees are paid out
 */
export declare const queryIbcApplicationsFeePayee: (z_req: string | ({
    origin: string;
} & RequestInit), si_channel?: Opt<string>, s_relayer?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryPayeeResponse>>;
/**
 * Returns the registered counterparty payee for forward relaying
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_channel - unique channel identifier
 * @param s_relayer - the relayer address to which the counterparty is registered
 * @returns a tuple where:
 *   - 0: counterparty_payee - the counterparty payee address used to compensate forward relaying
 */
export declare const queryIbcApplicationsFeeCounterpartyPayee: (z_req: string | ({
    origin: string;
} & RequestInit), si_channel?: Opt<string>, s_relayer?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryCounterpartyPayeeResponse>>;
/**
 * Returns a list of all fee enabled channels
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @param sg_query_height - block height at which to query
 * @returns a tuple where:
 *   - 0: fee_enabled_channels - list of fee enabled channels
 *   - 1: pagination - list of fee enabled channels
 */
export declare const queryIbcApplicationsFeeFeeEnabledChannels: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>, sg_query_height?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryFeeEnabledChannelsResponse>>;
/**
 * Returns true if the provided port and channel identifiers belong to a fee enabled channel
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - unique port identifier
 * @param si_channel - unique channel identifier
 * @returns a tuple where:
 *   - 0: fee_enabled - boolean flag representing the fee enabled channel status
 */
export declare const queryIbcApplicationsFeeFeeEnabledChannel: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsFeeQueryFeeEnabledChannelResponse>>;
/**
 * Encodes a `QueryIncentivizedPacketsRequest` protobuf message: defines the request type for the IncentivizedPackets rpc
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param sg_query_height - `query_height`: block height at which to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryIncentivizedPacketsRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>, sg_query_height?: Opt<WeakUint64Str>) => EncodedIbcApplicationsFeeQueryIncentivizedPacketsRequest;
/**
 * Encodes a `QueryIncentivizedPacketsResponse` protobuf message: defines the response type for the IncentivizedPackets rpc
 * @param a_incentivized_packets - `incentivized_packets`: list of identified fees for incentivized packets
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryIncentivizedPacketsResponse: (a_incentivized_packets?: Opt<Encoded<'/ibc.applications.fee.v1.IdentifiedPacketFees'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedIbcApplicationsFeeQueryIncentivizedPacketsResponse;
/**
 * Encodes a `QueryIncentivizedPacketRequest` protobuf message: defines the request type for the IncentivizedPacket rpc
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of channel ID, port ID and sequence
 * @param sg_query_height - `query_height`: block height at which to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryIncentivizedPacketRequest: (atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>, sg_query_height?: Opt<WeakUint64Str>) => EncodedIbcApplicationsFeeQueryIncentivizedPacketRequest;
/**
 * Encodes a `QueryIncentivizedPacketResponse` protobuf message: QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
 * @param g_incentivized_packet - `incentivized_packet`: the identified fees for the incentivized packet
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryIncentivizedPacketResponse: (atu8_incentivized_packet?: Opt<Encoded<'/ibc.applications.fee.v1.IdentifiedPacketFees'>>) => EncodedIbcApplicationsFeeQueryIncentivizedPacketResponse;
/**
 * Encodes a `QueryIncentivizedPacketsForChannelRequest` protobuf message: defines the request type for querying for all incentivized packets for a specific channel
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_query_height - `query_height`: Height to query at
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>, si_port?: Opt<string>, si_channel?: Opt<string>, sg_query_height?: Opt<WeakUint64Str>) => EncodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest;
/**
 * Encodes a `QueryIncentivizedPacketsForChannelResponse` protobuf message: QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
 * @param a_incentivized_packets - `incentivized_packets`: Map of all incentivized_packets
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse: (a_incentivized_packets?: Opt<Encoded<'/ibc.applications.fee.v1.IdentifiedPacketFees'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse;
/**
 * Encodes a `QueryTotalRecvFeesRequest` protobuf message: defines the request type for the TotalRecvFees rpc
 * @param g_packet_id - `packet_id`: the packet identifier for the associated fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryTotalRecvFeesRequest: (atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>) => EncodedIbcApplicationsFeeQueryTotalRecvFeesRequest;
/**
 * Encodes a `QueryTotalRecvFeesResponse` protobuf message: defines the response type for the TotalRecvFees rpc
 * @param a_recv_fees - `recv_fees`: the total packet receive fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryTotalRecvFeesResponse: (a_recv_fees?: Opt<SlimCoin[]>) => EncodedIbcApplicationsFeeQueryTotalRecvFeesResponse;
/**
 * Encodes a `QueryTotalAckFeesRequest` protobuf message: defines the request type for the TotalAckFees rpc
 * @param g_packet_id - `packet_id`: the packet identifier for the associated fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryTotalAckFeesRequest: (atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>) => EncodedIbcApplicationsFeeQueryTotalAckFeesRequest;
/**
 * Encodes a `QueryTotalAckFeesResponse` protobuf message: defines the response type for the TotalAckFees rpc
 * @param a_ack_fees - `ack_fees`: the total packet acknowledgement fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryTotalAckFeesResponse: (a_ack_fees?: Opt<SlimCoin[]>) => EncodedIbcApplicationsFeeQueryTotalAckFeesResponse;
/**
 * Encodes a `QueryTotalTimeoutFeesRequest` protobuf message: defines the request type for the TotalTimeoutFees rpc
 * @param g_packet_id - `packet_id`: the packet identifier for the associated fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryTotalTimeoutFeesRequest: (atu8_packet_id?: Opt<Encoded<'/ibc.core.channel.v1.PacketId'>>) => EncodedIbcApplicationsFeeQueryTotalTimeoutFeesRequest;
/**
 * Encodes a `QueryTotalTimeoutFeesResponse` protobuf message: defines the response type for the TotalTimeoutFees rpc
 * @param a_timeout_fees - `timeout_fees`: the total packet timeout fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryTotalTimeoutFeesResponse: (a_timeout_fees?: Opt<SlimCoin[]>) => EncodedIbcApplicationsFeeQueryTotalTimeoutFeesResponse;
/**
 * Encodes a `QueryPayeeRequest` protobuf message: defines the request type for the Payee rpc
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address to which the distribution address is registered
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryPayeeRequest: (si_channel?: Opt<string>, s_relayer?: Opt<string>) => EncodedIbcApplicationsFeeQueryPayeeRequest;
/**
 * Encodes a `QueryPayeeResponse` protobuf message: defines the response type for the Payee rpc
 * @param sa_payee - `payee_address`: the payee address to which packet fees are paid out
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryPayeeResponse: (sa_payee?: Opt<WeakAccountAddr>) => EncodedIbcApplicationsFeeQueryPayeeResponse;
/**
 * Encodes a `QueryCounterpartyPayeeRequest` protobuf message: defines the request type for the CounterpartyPayee rpc
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address to which the counterparty is registered
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryCounterpartyPayeeRequest: (si_channel?: Opt<string>, s_relayer?: Opt<string>) => EncodedIbcApplicationsFeeQueryCounterpartyPayeeRequest;
/**
 * Encodes a `QueryCounterpartyPayeeResponse` protobuf message: defines the response type for the CounterpartyPayee rpc
 * @param s_counterparty_payee - `counterparty_payee`: the counterparty payee address used to compensate forward relaying
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryCounterpartyPayeeResponse: (s_counterparty_payee?: Opt<string>) => EncodedIbcApplicationsFeeQueryCounterpartyPayeeResponse;
/**
 * Encodes a `QueryFeeEnabledChannelsRequest` protobuf message: defines the request type for the FeeEnabledChannels rpc
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param sg_query_height - `query_height`: block height at which to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryFeeEnabledChannelsRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>, sg_query_height?: Opt<WeakUint64Str>) => EncodedIbcApplicationsFeeQueryFeeEnabledChannelsRequest;
/**
 * Encodes a `QueryFeeEnabledChannelsResponse` protobuf message: defines the response type for the FeeEnabledChannels rpc
 * @param a_fee_enabled_channels - `fee_enabled_channels`: list of fee enabled channels
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryFeeEnabledChannelsResponse: (a_fee_enabled_channels?: Opt<Encoded<'/ibc.applications.fee.v1.FeeEnabledChannel'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedIbcApplicationsFeeQueryFeeEnabledChannelsResponse;
/**
 * Encodes a `QueryFeeEnabledChannelRequest` protobuf message: defines the request type for the FeeEnabledChannel rpc
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryFeeEnabledChannelRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcApplicationsFeeQueryFeeEnabledChannelRequest;
/**
 * Encodes a `QueryFeeEnabledChannelResponse` protobuf message: defines the response type for the FeeEnabledChannel rpc
 * @param b_fee_enabled - `fee_enabled`: boolean flag representing the fee enabled channel status
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsFeeQueryFeeEnabledChannelResponse: (b_fee_enabled?: Opt<boolean | 0 | 1>) => EncodedIbcApplicationsFeeQueryFeeEnabledChannelResponse;
/**
 * A decoded protobuf QueryIncentivizedPacketsRequest message
 *
 * Tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: query_height - block height at which to query
 */
export type DecodedIbcApplicationsFeeQueryIncentivizedPacketsRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest,
    sg_query_height?: CwUint64
];
/**
 * Decodes a protobuf QueryIncentivizedPacketsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsRequest}
 */
export declare const decodeIbcApplicationsFeeQueryIncentivizedPacketsRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryIncentivizedPacketsRequest;
/**
 * A decoded protobuf QueryIncentivizedPackets message
 *
 * Tuple where:
 *   - 0: incentivized_packets - list of identified fees for incentivized packets
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedIbcApplicationsFeeQueryIncentivizedPacketsResponse = [
    a_incentivized_packets?: DecodedIbcApplicationsFeeIdentifiedPacketFees[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryIncentivizedPackets message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsResponse}
 */
export declare const decodeIbcApplicationsFeeQueryIncentivizedPacketsResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryIncentivizedPacketsResponse;
/**
 * A decoded protobuf QueryIncentivizedPacketRequest message
 *
 * Tuple where:
 *   - 0: packet_id - unique packet identifier comprised of channel ID, port ID and sequence
 *   - 1: query_height - block height at which to query
 */
export type DecodedIbcApplicationsFeeQueryIncentivizedPacketRequest = [
    a_packet_id?: DecodedIbcCoreChannelPacketId,
    sg_query_height?: CwUint64
];
/**
 * Decodes a protobuf QueryIncentivizedPacketRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketRequest}
 */
export declare const decodeIbcApplicationsFeeQueryIncentivizedPacketRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryIncentivizedPacketRequest;
/**
 * A decoded protobuf QueryIncentivizedPacket message
 *
 * Alias for: incentivized_packet - the identified fees for the incentivized packet
 */
export type DecodedIbcApplicationsFeeQueryIncentivizedPacketResponse = [
    a_incentivized_packet?: DecodedIbcApplicationsFeeIdentifiedPacketFees
];
/**
 * Decodes a protobuf QueryIncentivizedPacket message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketResponse}
 */
export declare const decodeIbcApplicationsFeeQueryIncentivizedPacketResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryIncentivizedPacketResponse;
/**
 * A decoded protobuf QueryIncentivizedPacketsForChannelRequest message
 *
 * Tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: port_id -
 *   - 2: channel_id -
 *   - 3: query_height - Height to query at
 */
export type DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest,
    si_port?: string,
    si_channel?: string,
    sg_query_height?: CwUint64
];
/**
 * Decodes a protobuf QueryIncentivizedPacketsForChannelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest}
 */
export declare const decodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest;
/**
 * A decoded protobuf QueryIncentivizedPacketsForChannel message
 *
 * Tuple where:
 *   - 0: incentivized_packets - Map of all incentivized_packets
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse = [
    a_incentivized_packets?: DecodedIbcApplicationsFeeIdentifiedPacketFees[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryIncentivizedPacketsForChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse}
 */
export declare const decodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse;
/**
 * A decoded protobuf QueryTotalRecvFeesRequest message
 *
 * Alias for: packet_id - the packet identifier for the associated fees
 */
export type DecodedIbcApplicationsFeeQueryTotalRecvFeesRequest = [
    a_packet_id?: DecodedIbcCoreChannelPacketId
];
/**
 * Decodes a protobuf QueryTotalRecvFeesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalRecvFeesRequest}
 */
export declare const decodeIbcApplicationsFeeQueryTotalRecvFeesRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryTotalRecvFeesRequest;
/**
 * A decoded protobuf QueryTotalRecvFees message
 *
 * Alias for: recv_fees - the total packet receive fees
 */
export type DecodedIbcApplicationsFeeQueryTotalRecvFeesResponse = [
    a_recv_fees?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf QueryTotalRecvFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalRecvFeesResponse}
 */
export declare const decodeIbcApplicationsFeeQueryTotalRecvFeesResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryTotalRecvFeesResponse;
/**
 * A decoded protobuf QueryTotalAckFeesRequest message
 *
 * Alias for: packet_id - the packet identifier for the associated fees
 */
export type DecodedIbcApplicationsFeeQueryTotalAckFeesRequest = [
    a_packet_id?: DecodedIbcCoreChannelPacketId
];
/**
 * Decodes a protobuf QueryTotalAckFeesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalAckFeesRequest}
 */
export declare const decodeIbcApplicationsFeeQueryTotalAckFeesRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryTotalAckFeesRequest;
/**
 * A decoded protobuf QueryTotalAckFees message
 *
 * Alias for: ack_fees - the total packet acknowledgement fees
 */
export type DecodedIbcApplicationsFeeQueryTotalAckFeesResponse = [
    a_ack_fees?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf QueryTotalAckFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalAckFeesResponse}
 */
export declare const decodeIbcApplicationsFeeQueryTotalAckFeesResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryTotalAckFeesResponse;
/**
 * A decoded protobuf QueryTotalTimeoutFeesRequest message
 *
 * Alias for: packet_id - the packet identifier for the associated fees
 */
export type DecodedIbcApplicationsFeeQueryTotalTimeoutFeesRequest = [
    a_packet_id?: DecodedIbcCoreChannelPacketId
];
/**
 * Decodes a protobuf QueryTotalTimeoutFeesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalTimeoutFeesRequest}
 */
export declare const decodeIbcApplicationsFeeQueryTotalTimeoutFeesRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryTotalTimeoutFeesRequest;
/**
 * A decoded protobuf QueryTotalTimeoutFees message
 *
 * Alias for: timeout_fees - the total packet timeout fees
 */
export type DecodedIbcApplicationsFeeQueryTotalTimeoutFeesResponse = [
    a_timeout_fees?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf QueryTotalTimeoutFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalTimeoutFeesResponse}
 */
export declare const decodeIbcApplicationsFeeQueryTotalTimeoutFeesResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryTotalTimeoutFeesResponse;
/**
 * A decoded protobuf QueryPayeeRequest message
 *
 * Tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address to which the distribution address is registered
 */
export type DecodedIbcApplicationsFeeQueryPayeeRequest = [
    si_channel?: string,
    s_relayer?: string
];
/**
 * Decodes a protobuf QueryPayeeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryPayeeRequest}
 */
export declare const decodeIbcApplicationsFeeQueryPayeeRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryPayeeRequest;
/**
 * A decoded protobuf QueryPayee message
 *
 * Alias for: payee_address - the payee address to which packet fees are paid out
 */
export type DecodedIbcApplicationsFeeQueryPayeeResponse = [
    sa_payee?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryPayeeResponse}
 */
export declare const decodeIbcApplicationsFeeQueryPayeeResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryPayeeResponse;
/**
 * A decoded protobuf QueryCounterpartyPayeeRequest message
 *
 * Tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address to which the counterparty is registered
 */
export type DecodedIbcApplicationsFeeQueryCounterpartyPayeeRequest = [
    si_channel?: string,
    s_relayer?: string
];
/**
 * Decodes a protobuf QueryCounterpartyPayeeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryCounterpartyPayeeRequest}
 */
export declare const decodeIbcApplicationsFeeQueryCounterpartyPayeeRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryCounterpartyPayeeRequest;
/**
 * A decoded protobuf QueryCounterpartyPayee message
 *
 * Alias for: counterparty_payee - the counterparty payee address used to compensate forward relaying
 */
export type DecodedIbcApplicationsFeeQueryCounterpartyPayeeResponse = [
    s_counterparty_payee?: string
];
/**
 * Decodes a protobuf QueryCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryCounterpartyPayeeResponse}
 */
export declare const decodeIbcApplicationsFeeQueryCounterpartyPayeeResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryCounterpartyPayeeResponse;
/**
 * A decoded protobuf QueryFeeEnabledChannelsRequest message
 *
 * Tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: query_height - block height at which to query
 */
export type DecodedIbcApplicationsFeeQueryFeeEnabledChannelsRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest,
    sg_query_height?: CwUint64
];
/**
 * Decodes a protobuf QueryFeeEnabledChannelsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelsRequest}
 */
export declare const decodeIbcApplicationsFeeQueryFeeEnabledChannelsRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryFeeEnabledChannelsRequest;
/**
 * A decoded protobuf QueryFeeEnabledChannels message
 *
 * Tuple where:
 *   - 0: fee_enabled_channels - list of fee enabled channels
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedIbcApplicationsFeeQueryFeeEnabledChannelsResponse = [
    a_fee_enabled_channels?: DecodedIbcApplicationsFeeFeeEnabledChannel[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryFeeEnabledChannels message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelsResponse}
 */
export declare const decodeIbcApplicationsFeeQueryFeeEnabledChannelsResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryFeeEnabledChannelsResponse;
/**
 * A decoded protobuf QueryFeeEnabledChannelRequest message
 *
 * Tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export type DecodedIbcApplicationsFeeQueryFeeEnabledChannelRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryFeeEnabledChannelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelRequest}
 */
export declare const decodeIbcApplicationsFeeQueryFeeEnabledChannelRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryFeeEnabledChannelRequest;
/**
 * A decoded protobuf QueryFeeEnabledChannel message
 *
 * Alias for: fee_enabled - boolean flag representing the fee enabled channel status
 */
export type DecodedIbcApplicationsFeeQueryFeeEnabledChannelResponse = [
    b_fee_enabled?: 0 | 1
];
/**
 * Decodes a protobuf QueryFeeEnabledChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelResponse}
 */
export declare const decodeIbcApplicationsFeeQueryFeeEnabledChannelResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsFeeQueryFeeEnabledChannelResponse;
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: query_height - block height at which to query
 */
export declare const destructIbcApplicationsFeeQueryIncentivizedPacketsRequest: (g_struct: IbcApplicationsFeeQueryIncentivizedPacketsRequest) => [pagination?: CosmosBaseQueryPageRequest, query_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_REQUEST = "/ibc.applications.fee.v1.QueryIncentivizedPacketsRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryIncentivizedPacketsRequest` - defines the request type for the IncentivizedPackets rpc
 */
export type IbcApplicationsFeeQueryIncentivizedPacketsRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
    query_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: incentivized_packets - list of identified fees for incentivized packets
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructIbcApplicationsFeeQueryIncentivizedPacketsResponse: (g_struct: IbcApplicationsFeeQueryIncentivizedPacketsResponse) => [incentivized_packets?: IbcApplicationsFeeIdentifiedPacketFees[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_RESPONSE = "/ibc.applications.fee.v1.QueryIncentivizedPacketsResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryIncentivizedPacketsResponse` - defines the response type for the IncentivizedPackets rpc
 */
export type IbcApplicationsFeeQueryIncentivizedPacketsResponse = {
    incentivized_packets?: IbcApplicationsFeeIdentifiedPacketFees[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - unique packet identifier comprised of channel ID, port ID and sequence
 *   - 1: query_height - block height at which to query
 */
export declare const destructIbcApplicationsFeeQueryIncentivizedPacketRequest: (g_struct: IbcApplicationsFeeQueryIncentivizedPacketRequest) => [packet_id?: IbcCoreChannelPacketId, query_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKET_REQUEST = "/ibc.applications.fee.v1.QueryIncentivizedPacketRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryIncentivizedPacketRequest` - defines the request type for the IncentivizedPacket rpc
 */
export type IbcApplicationsFeeQueryIncentivizedPacketRequest = {
    packet_id?: IbcCoreChannelPacketId | undefined;
    query_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: incentivized_packet - the identified fees for the incentivized packet
 */
export declare const destructIbcApplicationsFeeQueryIncentivizedPacketResponse: (g_struct: IbcApplicationsFeeQueryIncentivizedPacketResponse) => [incentivized_packet?: IbcApplicationsFeeIdentifiedPacketFees];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKET_RESPONSE = "/ibc.applications.fee.v1.QueryIncentivizedPacketResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryIncentivizedPacketResponse` - QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
 */
export type IbcApplicationsFeeQueryIncentivizedPacketResponse = {
    incentivized_packet?: IbcApplicationsFeeIdentifiedPacketFees | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: port_id -
 *   - 2: channel_id -
 *   - 3: query_height - Height to query at
 */
export declare const destructIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest: (g_struct: IbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest) => [pagination?: CosmosBaseQueryPageRequest, port_id?: string, channel_id?: string, query_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_FOR_CHANNEL_REQUEST = "/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest` - defines the request type for querying for all incentivized packets for a specific channel
 */
export type IbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
    port_id?: string | undefined;
    channel_id?: string | undefined;
    query_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: incentivized_packets - Map of all incentivized_packets
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse: (g_struct: IbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse) => [incentivized_packets?: IbcApplicationsFeeIdentifiedPacketFees[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_FOR_CHANNEL_RESPONSE = "/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse` - QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
 */
export type IbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse = {
    incentivized_packets?: IbcApplicationsFeeIdentifiedPacketFees[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalRecvFeesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - the packet identifier for the associated fees
 */
export declare const destructIbcApplicationsFeeQueryTotalRecvFeesRequest: (g_struct: IbcApplicationsFeeQueryTotalRecvFeesRequest) => [packet_id?: IbcCoreChannelPacketId];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_RECV_FEES_REQUEST = "/ibc.applications.fee.v1.QueryTotalRecvFeesRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryTotalRecvFeesRequest` - defines the request type for the TotalRecvFees rpc
 */
export type IbcApplicationsFeeQueryTotalRecvFeesRequest = {
    packet_id?: IbcCoreChannelPacketId | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalRecvFeesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: recv_fees - the total packet receive fees
 */
export declare const destructIbcApplicationsFeeQueryTotalRecvFeesResponse: (g_struct: IbcApplicationsFeeQueryTotalRecvFeesResponse) => [recv_fees?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_RECV_FEES_RESPONSE = "/ibc.applications.fee.v1.QueryTotalRecvFeesResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryTotalRecvFeesResponse` - defines the response type for the TotalRecvFees rpc
 */
export type IbcApplicationsFeeQueryTotalRecvFeesResponse = {
    recv_fees?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalAckFeesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - the packet identifier for the associated fees
 */
export declare const destructIbcApplicationsFeeQueryTotalAckFeesRequest: (g_struct: IbcApplicationsFeeQueryTotalAckFeesRequest) => [packet_id?: IbcCoreChannelPacketId];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_ACK_FEES_REQUEST = "/ibc.applications.fee.v1.QueryTotalAckFeesRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryTotalAckFeesRequest` - defines the request type for the TotalAckFees rpc
 */
export type IbcApplicationsFeeQueryTotalAckFeesRequest = {
    packet_id?: IbcCoreChannelPacketId | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalAckFeesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ack_fees - the total packet acknowledgement fees
 */
export declare const destructIbcApplicationsFeeQueryTotalAckFeesResponse: (g_struct: IbcApplicationsFeeQueryTotalAckFeesResponse) => [ack_fees?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_ACK_FEES_RESPONSE = "/ibc.applications.fee.v1.QueryTotalAckFeesResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryTotalAckFeesResponse` - defines the response type for the TotalAckFees rpc
 */
export type IbcApplicationsFeeQueryTotalAckFeesResponse = {
    ack_fees?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalTimeoutFeesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - the packet identifier for the associated fees
 */
export declare const destructIbcApplicationsFeeQueryTotalTimeoutFeesRequest: (g_struct: IbcApplicationsFeeQueryTotalTimeoutFeesRequest) => [packet_id?: IbcCoreChannelPacketId];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_TIMEOUT_FEES_REQUEST = "/ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest` - defines the request type for the TotalTimeoutFees rpc
 */
export type IbcApplicationsFeeQueryTotalTimeoutFeesRequest = {
    packet_id?: IbcCoreChannelPacketId | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalTimeoutFeesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: timeout_fees - the total packet timeout fees
 */
export declare const destructIbcApplicationsFeeQueryTotalTimeoutFeesResponse: (g_struct: IbcApplicationsFeeQueryTotalTimeoutFeesResponse) => [timeout_fees?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_TIMEOUT_FEES_RESPONSE = "/ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse` - defines the response type for the TotalTimeoutFees rpc
 */
export type IbcApplicationsFeeQueryTotalTimeoutFeesResponse = {
    timeout_fees?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryPayeeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address to which the distribution address is registered
 */
export declare const destructIbcApplicationsFeeQueryPayeeRequest: (g_struct: IbcApplicationsFeeQueryPayeeRequest) => [channel_id?: string, relayer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_PAYEE_REQUEST = "/ibc.applications.fee.v1.QueryPayeeRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryPayeeRequest` - defines the request type for the Payee rpc
 */
export type IbcApplicationsFeeQueryPayeeRequest = {
    channel_id?: string | undefined;
    relayer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: payee_address - the payee address to which packet fees are paid out
 */
export declare const destructIbcApplicationsFeeQueryPayeeResponse: (g_struct: IbcApplicationsFeeQueryPayeeResponse) => [payee_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_PAYEE_RESPONSE = "/ibc.applications.fee.v1.QueryPayeeResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryPayeeResponse` - defines the response type for the Payee rpc
 */
export type IbcApplicationsFeeQueryPayeeResponse = {
    payee_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryCounterpartyPayeeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address to which the counterparty is registered
 */
export declare const destructIbcApplicationsFeeQueryCounterpartyPayeeRequest: (g_struct: IbcApplicationsFeeQueryCounterpartyPayeeRequest) => [channel_id?: string, relayer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_COUNTERPARTY_PAYEE_REQUEST = "/ibc.applications.fee.v1.QueryCounterpartyPayeeRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryCounterpartyPayeeRequest` - defines the request type for the CounterpartyPayee rpc
 */
export type IbcApplicationsFeeQueryCounterpartyPayeeRequest = {
    channel_id?: string | undefined;
    relayer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryCounterpartyPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: counterparty_payee - the counterparty payee address used to compensate forward relaying
 */
export declare const destructIbcApplicationsFeeQueryCounterpartyPayeeResponse: (g_struct: IbcApplicationsFeeQueryCounterpartyPayeeResponse) => [counterparty_payee?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_COUNTERPARTY_PAYEE_RESPONSE = "/ibc.applications.fee.v1.QueryCounterpartyPayeeResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryCounterpartyPayeeResponse` - defines the response type for the CounterpartyPayee rpc
 */
export type IbcApplicationsFeeQueryCounterpartyPayeeResponse = {
    counterparty_payee?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: query_height - block height at which to query
 */
export declare const destructIbcApplicationsFeeQueryFeeEnabledChannelsRequest: (g_struct: IbcApplicationsFeeQueryFeeEnabledChannelsRequest) => [pagination?: CosmosBaseQueryPageRequest, query_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNELS_REQUEST = "/ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest` - defines the request type for the FeeEnabledChannels rpc
 */
export type IbcApplicationsFeeQueryFeeEnabledChannelsRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
    query_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee_enabled_channels - list of fee enabled channels
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructIbcApplicationsFeeQueryFeeEnabledChannelsResponse: (g_struct: IbcApplicationsFeeQueryFeeEnabledChannelsResponse) => [fee_enabled_channels?: IbcApplicationsFeeFeeEnabledChannel[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNELS_RESPONSE = "/ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse` - defines the response type for the FeeEnabledChannels rpc
 */
export type IbcApplicationsFeeQueryFeeEnabledChannelsResponse = {
    fee_enabled_channels?: IbcApplicationsFeeFeeEnabledChannel[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export declare const destructIbcApplicationsFeeQueryFeeEnabledChannelRequest: (g_struct: IbcApplicationsFeeQueryFeeEnabledChannelRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNEL_REQUEST = "/ibc.applications.fee.v1.QueryFeeEnabledChannelRequest";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryFeeEnabledChannelRequest` - defines the request type for the FeeEnabledChannel rpc
 */
export type IbcApplicationsFeeQueryFeeEnabledChannelRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee_enabled - boolean flag representing the fee enabled channel status
 */
export declare const destructIbcApplicationsFeeQueryFeeEnabledChannelResponse: (g_struct: IbcApplicationsFeeQueryFeeEnabledChannelResponse) => [fee_enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNEL_RESPONSE = "/ibc.applications.fee.v1.QueryFeeEnabledChannelResponse";
/**
 * JSON serialization of `ibc.applications.fee.v1.QueryFeeEnabledChannelResponse` - defines the response type for the FeeEnabledChannel rpc
 */
export type IbcApplicationsFeeQueryFeeEnabledChannelResponse = {
    fee_enabled?: boolean | undefined;
};
