import { decode_protobuf, decode_coin } from '../../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import { decodeIbcApplicationsFeeIdentifiedPacketFees } from './fee.js';
import { decodeIbcApplicationsFeeFeeEnabledChannel } from './genesis.js';
import { decodeIbcCoreChannelPacketId } from '../../../core/channel/v1/channel.js';
const SR_LCD_IBC_APPLICATIONS_FEE_QUERY = '/ibc/apps/fee/v1/';
/**
 * Returns all incentivized packets and their associated fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @param sg_query_height - block height at which to query
 * @returns a tuple where:
 *   - 0: incentivized_packets - list of identified fees for incentivized packets
 *   - 1: pagination - list of identified fees for incentivized packets
 */
export const queryIbcApplicationsFeeIncentivizedPackets = restful_grpc((g_pagination, sg_query_height) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'incentivized_packets', {
        pagination: g_pagination,
        query_height: sg_query_height,
    }]);
/**
 * Returns all packet fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - unique packet identifier comprised of channel ID, port ID and sequence
 * @param sg_query_height - block height at which to query
 * @returns a tuple where:
 *   - 0: incentivized_packet - the identified fees for the incentivized packet
 */
export const queryIbcApplicationsFeeIncentivizedPacket = restful_grpc((g_packet_id, sg_query_height) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + g_packet_id?.channel_id + '/ports/' + g_packet_id?.port_id + '/sequences/' + g_packet_id?.sequence + '/incentivized_packet', {
        query_height: sg_query_height,
    }]);
/**
 * Gets all incentivized packets for a specific channel
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @param si_port -
 * @param si_channel -
 * @param sg_query_height - Height to query at
 * @returns a tuple where:
 *   - 0: incentivized_packets - Map of all incentivized_packets
 *   - 1: pagination - Map of all incentivized_packets
 */
export const queryIbcApplicationsFeeIncentivizedPacketsForChannel = restful_grpc((g_pagination, si_port, si_channel, sg_query_height) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/incentivized_packets', {
        pagination: g_pagination,
        query_height: sg_query_height,
    }]);
/**
 * Returns the total receive fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - the packet identifier for the associated fees
 * @returns a tuple where:
 *   - 0: recv_fees - the total packet receive fees
 */
export const queryIbcApplicationsFeeTotalRecvFees = restful_grpc(g_packet_id => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + g_packet_id?.channel_id + '/ports/' + g_packet_id?.port_id + '/sequences/' + g_packet_id?.sequence + '/total_recv_fees']);
/**
 * Returns the total acknowledgement fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - the packet identifier for the associated fees
 * @returns a tuple where:
 *   - 0: ack_fees - the total packet acknowledgement fees
 */
export const queryIbcApplicationsFeeTotalAckFees = restful_grpc(g_packet_id => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + g_packet_id?.channel_id + '/ports/' + g_packet_id?.port_id + '/sequences/' + g_packet_id?.sequence + '/total_ack_fees']);
/**
 * Returns the total timeout fees for a packet given its identifier
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_packet_id - the packet identifier for the associated fees
 * @returns a tuple where:
 *   - 0: timeout_fees - the total packet timeout fees
 */
export const queryIbcApplicationsFeeTotalTimeoutFees = restful_grpc(g_packet_id => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + g_packet_id?.channel_id + '/ports/' + g_packet_id?.port_id + '/sequences/' + g_packet_id?.sequence + '/total_timeout_fees']);
/**
 * Returns the registered payee address for a specific channel given the relayer address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_channel - unique channel identifier
 * @param s_relayer - the relayer address to which the distribution address is registered
 * @returns a tuple where:
 *   - 0: payee_address - the payee address to which packet fees are paid out
 */
export const queryIbcApplicationsFeePayee = restful_grpc((si_channel, s_relayer) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + si_channel + '/relayers/' + s_relayer + '/payee']);
/**
 * Returns the registered counterparty payee for forward relaying
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_channel - unique channel identifier
 * @param s_relayer - the relayer address to which the counterparty is registered
 * @returns a tuple where:
 *   - 0: counterparty_payee - the counterparty payee address used to compensate forward relaying
 */
export const queryIbcApplicationsFeeCounterpartyPayee = restful_grpc((si_channel, s_relayer) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + si_channel + '/relayers/' + s_relayer + '/counterparty_payee']);
/**
 * Returns a list of all fee enabled channels
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @param sg_query_height - block height at which to query
 * @returns a tuple where:
 *   - 0: fee_enabled_channels - list of fee enabled channels
 *   - 1: pagination - list of fee enabled channels
 */
export const queryIbcApplicationsFeeFeeEnabledChannels = restful_grpc((g_pagination, sg_query_height) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'fee_enabled', {
        pagination: g_pagination,
        query_height: sg_query_height,
    }]);
/**
 * Returns true if the provided port and channel identifiers belong to a fee enabled channel
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - unique port identifier
 * @param si_channel - unique channel identifier
 * @returns a tuple where:
 *   - 0: fee_enabled - boolean flag representing the fee enabled channel status
 */
export const queryIbcApplicationsFeeFeeEnabledChannel = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_APPLICATIONS_FEE_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/fee_enabled']);
/**
 * Encodes a `QueryIncentivizedPacketsRequest` protobuf message: defines the request type for the IncentivizedPackets rpc
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param sg_query_height - `query_height`: block height at which to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryIncentivizedPacketsRequest = (atu8_pagination, sg_query_height) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .g(sg_query_height) // uint64 query_height = 2
    .o;
/**
 * Encodes a `QueryIncentivizedPacketsResponse` protobuf message: defines the response type for the IncentivizedPackets rpc
 * @param a_incentivized_packets - `incentivized_packets`: list of identified fees for incentivized packets
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryIncentivizedPacketsResponse = (a_incentivized_packets, atu8_pagination) => Protobuf() // ...
    .B(a_incentivized_packets) // IdentifiedPacketFees[] incentivized_packets = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryIncentivizedPacketRequest` protobuf message: defines the request type for the IncentivizedPacket rpc
 * @param g_packet_id - `packet_id`: unique packet identifier comprised of channel ID, port ID and sequence
 * @param sg_query_height - `query_height`: block height at which to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryIncentivizedPacketRequest = (atu8_packet_id, sg_query_height) => Protobuf() // ...
    .b(atu8_packet_id) // PacketId packet_id = 1
    .g(sg_query_height) // uint64 query_height = 2
    .o;
/**
 * Encodes a `QueryIncentivizedPacketResponse` protobuf message: QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket rpc
 * @param g_incentivized_packet - `incentivized_packet`: the identified fees for the incentivized packet
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryIncentivizedPacketResponse = (atu8_incentivized_packet) => Protobuf() // ...
    .b(atu8_incentivized_packet) // IdentifiedPacketFees incentivized_packet = 1
    .o;
/**
 * Encodes a `QueryIncentivizedPacketsForChannelRequest` protobuf message: defines the request type for querying for all incentivized packets for a specific channel
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_query_height - `query_height`: Height to query at
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest = (atu8_pagination, si_port, si_channel, sg_query_height) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .s(si_port) // string port_id = 2
    .s(si_channel) // string channel_id = 3
    .g(sg_query_height) // uint64 query_height = 4
    .o;
/**
 * Encodes a `QueryIncentivizedPacketsForChannelResponse` protobuf message: QueryIncentivizedPacketsResponse defines the response type for the incentivized packets RPC
 * @param a_incentivized_packets - `incentivized_packets`: Map of all incentivized_packets
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse = (a_incentivized_packets, atu8_pagination) => Protobuf() // ...
    .B(a_incentivized_packets) // IdentifiedPacketFees[] incentivized_packets = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryTotalRecvFeesRequest` protobuf message: defines the request type for the TotalRecvFees rpc
 * @param g_packet_id - `packet_id`: the packet identifier for the associated fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryTotalRecvFeesRequest = (atu8_packet_id) => Protobuf() // ...
    .b(atu8_packet_id) // PacketId packet_id = 1
    .o;
/**
 * Encodes a `QueryTotalRecvFeesResponse` protobuf message: defines the response type for the TotalRecvFees rpc
 * @param a_recv_fees - `recv_fees`: the total packet receive fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryTotalRecvFeesResponse = (a_recv_fees) => Protobuf() // ...
    .B(coins(a_recv_fees)) // Coin[] recv_fees = 1
    .o;
/**
 * Encodes a `QueryTotalAckFeesRequest` protobuf message: defines the request type for the TotalAckFees rpc
 * @param g_packet_id - `packet_id`: the packet identifier for the associated fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryTotalAckFeesRequest = (atu8_packet_id) => Protobuf() // ...
    .b(atu8_packet_id) // PacketId packet_id = 1
    .o;
/**
 * Encodes a `QueryTotalAckFeesResponse` protobuf message: defines the response type for the TotalAckFees rpc
 * @param a_ack_fees - `ack_fees`: the total packet acknowledgement fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryTotalAckFeesResponse = (a_ack_fees) => Protobuf() // ...
    .B(coins(a_ack_fees)) // Coin[] ack_fees = 1
    .o;
/**
 * Encodes a `QueryTotalTimeoutFeesRequest` protobuf message: defines the request type for the TotalTimeoutFees rpc
 * @param g_packet_id - `packet_id`: the packet identifier for the associated fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryTotalTimeoutFeesRequest = (atu8_packet_id) => Protobuf() // ...
    .b(atu8_packet_id) // PacketId packet_id = 1
    .o;
/**
 * Encodes a `QueryTotalTimeoutFeesResponse` protobuf message: defines the response type for the TotalTimeoutFees rpc
 * @param a_timeout_fees - `timeout_fees`: the total packet timeout fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryTotalTimeoutFeesResponse = (a_timeout_fees) => Protobuf() // ...
    .B(coins(a_timeout_fees)) // Coin[] timeout_fees = 1
    .o;
/**
 * Encodes a `QueryPayeeRequest` protobuf message: defines the request type for the Payee rpc
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address to which the distribution address is registered
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryPayeeRequest = (si_channel, s_relayer) => Protobuf() // ...
    .s(si_channel) // string channel_id = 1
    .s(s_relayer) // string relayer = 2
    .o;
/**
 * Encodes a `QueryPayeeResponse` protobuf message: defines the response type for the Payee rpc
 * @param sa_payee - `payee_address`: the payee address to which packet fees are paid out
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryPayeeResponse = (sa_payee) => Protobuf() // ...
    .s(sa_payee) // string payee_address = 1
    .o;
/**
 * Encodes a `QueryCounterpartyPayeeRequest` protobuf message: defines the request type for the CounterpartyPayee rpc
 * @param si_channel - `channel_id`: unique channel identifier
 * @param s_relayer - `relayer`: the relayer address to which the counterparty is registered
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryCounterpartyPayeeRequest = (si_channel, s_relayer) => Protobuf() // ...
    .s(si_channel) // string channel_id = 1
    .s(s_relayer) // string relayer = 2
    .o;
/**
 * Encodes a `QueryCounterpartyPayeeResponse` protobuf message: defines the response type for the CounterpartyPayee rpc
 * @param s_counterparty_payee - `counterparty_payee`: the counterparty payee address used to compensate forward relaying
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryCounterpartyPayeeResponse = (s_counterparty_payee) => Protobuf() // ...
    .s(s_counterparty_payee) // string counterparty_payee = 1
    .o;
/**
 * Encodes a `QueryFeeEnabledChannelsRequest` protobuf message: defines the request type for the FeeEnabledChannels rpc
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @param sg_query_height - `query_height`: block height at which to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryFeeEnabledChannelsRequest = (atu8_pagination, sg_query_height) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .g(sg_query_height) // uint64 query_height = 2
    .o;
/**
 * Encodes a `QueryFeeEnabledChannelsResponse` protobuf message: defines the response type for the FeeEnabledChannels rpc
 * @param a_fee_enabled_channels - `fee_enabled_channels`: list of fee enabled channels
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryFeeEnabledChannelsResponse = (a_fee_enabled_channels, atu8_pagination) => Protobuf() // ...
    .B(a_fee_enabled_channels) // FeeEnabledChannel[] fee_enabled_channels = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryFeeEnabledChannelRequest` protobuf message: defines the request type for the FeeEnabledChannel rpc
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryFeeEnabledChannelRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryFeeEnabledChannelResponse` protobuf message: defines the response type for the FeeEnabledChannel rpc
 * @param b_fee_enabled - `fee_enabled`: boolean flag representing the fee enabled channel status
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsFeeQueryFeeEnabledChannelResponse = (b_fee_enabled) => Protobuf() // ...
    .v(b_fee_enabled) // boolean fee_enabled = 1
    .o;
/**
 * Decodes a protobuf QueryIncentivizedPacketsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsRequest}
 */
export const decodeIbcApplicationsFeeQueryIncentivizedPacketsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryIncentivizedPackets message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsResponse}
 */
export const decodeIbcApplicationsFeeQueryIncentivizedPacketsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeIbcApplicationsFeeIdentifiedPacketFees, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryIncentivizedPacketRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketRequest}
 */
export const decodeIbcApplicationsFeeQueryIncentivizedPacketRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeIbcCoreChannelPacketId]);
/**
 * Decodes a protobuf QueryIncentivizedPacket message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketResponse}
 */
export const decodeIbcApplicationsFeeQueryIncentivizedPacketResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcApplicationsFeeIdentifiedPacketFees]);
/**
 * Decodes a protobuf QueryIncentivizedPacketsForChannelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest}
 */
export const decodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 3], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryIncentivizedPacketsForChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse}
 */
export const decodeIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeIbcApplicationsFeeIdentifiedPacketFees, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryTotalRecvFeesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalRecvFeesRequest}
 */
export const decodeIbcApplicationsFeeQueryTotalRecvFeesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcCoreChannelPacketId]);
/**
 * Decodes a protobuf QueryTotalRecvFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalRecvFeesResponse}
 */
export const decodeIbcApplicationsFeeQueryTotalRecvFeesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf QueryTotalAckFeesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalAckFeesRequest}
 */
export const decodeIbcApplicationsFeeQueryTotalAckFeesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcCoreChannelPacketId]);
/**
 * Decodes a protobuf QueryTotalAckFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalAckFeesResponse}
 */
export const decodeIbcApplicationsFeeQueryTotalAckFeesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf QueryTotalTimeoutFeesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalTimeoutFeesRequest}
 */
export const decodeIbcApplicationsFeeQueryTotalTimeoutFeesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcCoreChannelPacketId]);
/**
 * Decodes a protobuf QueryTotalTimeoutFees message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryTotalTimeoutFeesResponse}
 */
export const decodeIbcApplicationsFeeQueryTotalTimeoutFeesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf QueryPayeeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryPayeeRequest}
 */
export const decodeIbcApplicationsFeeQueryPayeeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryPayeeResponse}
 */
export const decodeIbcApplicationsFeeQueryPayeeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryCounterpartyPayeeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryCounterpartyPayeeRequest}
 */
export const decodeIbcApplicationsFeeQueryCounterpartyPayeeRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryCounterpartyPayee message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryCounterpartyPayeeResponse}
 */
export const decodeIbcApplicationsFeeQueryCounterpartyPayeeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryFeeEnabledChannelsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelsRequest}
 */
export const decodeIbcApplicationsFeeQueryFeeEnabledChannelsRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryFeeEnabledChannels message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelsResponse}
 */
export const decodeIbcApplicationsFeeQueryFeeEnabledChannelsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeIbcApplicationsFeeFeeEnabledChannel, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryFeeEnabledChannelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelRequest}
 */
export const decodeIbcApplicationsFeeQueryFeeEnabledChannelRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryFeeEnabledChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsFeeQueryFeeEnabledChannelResponse}
 */
export const decodeIbcApplicationsFeeQueryFeeEnabledChannelResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: query_height - block height at which to query
 */
export const destructIbcApplicationsFeeQueryIncentivizedPacketsRequest = (g_struct) => [g_struct.pagination, g_struct.query_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_REQUEST = '/ibc.applications.fee.v1.QueryIncentivizedPacketsRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: incentivized_packets - list of identified fees for incentivized packets
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructIbcApplicationsFeeQueryIncentivizedPacketsResponse = (g_struct) => [g_struct.incentivized_packets, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_RESPONSE = '/ibc.applications.fee.v1.QueryIncentivizedPacketsResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - unique packet identifier comprised of channel ID, port ID and sequence
 *   - 1: query_height - block height at which to query
 */
export const destructIbcApplicationsFeeQueryIncentivizedPacketRequest = (g_struct) => [g_struct.packet_id, g_struct.query_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKET_REQUEST = '/ibc.applications.fee.v1.QueryIncentivizedPacketRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: incentivized_packet - the identified fees for the incentivized packet
 */
export const destructIbcApplicationsFeeQueryIncentivizedPacketResponse = (g_struct) => [g_struct.incentivized_packet];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKET_RESPONSE = '/ibc.applications.fee.v1.QueryIncentivizedPacketResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: port_id -
 *   - 2: channel_id -
 *   - 3: query_height - Height to query at
 */
export const destructIbcApplicationsFeeQueryIncentivizedPacketsForChannelRequest = (g_struct) => [g_struct.pagination, g_struct.port_id, g_struct.channel_id, g_struct.query_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_FOR_CHANNEL_REQUEST = '/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: incentivized_packets - Map of all incentivized_packets
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructIbcApplicationsFeeQueryIncentivizedPacketsForChannelResponse = (g_struct) => [g_struct.incentivized_packets, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_INCENTIVIZED_PACKETS_FOR_CHANNEL_RESPONSE = '/ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalRecvFeesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - the packet identifier for the associated fees
 */
export const destructIbcApplicationsFeeQueryTotalRecvFeesRequest = (g_struct) => [g_struct.packet_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_RECV_FEES_REQUEST = '/ibc.applications.fee.v1.QueryTotalRecvFeesRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalRecvFeesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: recv_fees - the total packet receive fees
 */
export const destructIbcApplicationsFeeQueryTotalRecvFeesResponse = (g_struct) => [g_struct.recv_fees];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_RECV_FEES_RESPONSE = '/ibc.applications.fee.v1.QueryTotalRecvFeesResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalAckFeesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - the packet identifier for the associated fees
 */
export const destructIbcApplicationsFeeQueryTotalAckFeesRequest = (g_struct) => [g_struct.packet_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_ACK_FEES_REQUEST = '/ibc.applications.fee.v1.QueryTotalAckFeesRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalAckFeesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ack_fees - the total packet acknowledgement fees
 */
export const destructIbcApplicationsFeeQueryTotalAckFeesResponse = (g_struct) => [g_struct.ack_fees];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_ACK_FEES_RESPONSE = '/ibc.applications.fee.v1.QueryTotalAckFeesResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalTimeoutFeesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet_id - the packet identifier for the associated fees
 */
export const destructIbcApplicationsFeeQueryTotalTimeoutFeesRequest = (g_struct) => [g_struct.packet_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_TIMEOUT_FEES_REQUEST = '/ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryTotalTimeoutFeesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: timeout_fees - the total packet timeout fees
 */
export const destructIbcApplicationsFeeQueryTotalTimeoutFeesResponse = (g_struct) => [g_struct.timeout_fees];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_TOTAL_TIMEOUT_FEES_RESPONSE = '/ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryPayeeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address to which the distribution address is registered
 */
export const destructIbcApplicationsFeeQueryPayeeRequest = (g_struct) => [g_struct.channel_id, g_struct.relayer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_PAYEE_REQUEST = '/ibc.applications.fee.v1.QueryPayeeRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: payee_address - the payee address to which packet fees are paid out
 */
export const destructIbcApplicationsFeeQueryPayeeResponse = (g_struct) => [g_struct.payee_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_PAYEE_RESPONSE = '/ibc.applications.fee.v1.QueryPayeeResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryCounterpartyPayeeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id - unique channel identifier
 *   - 1: relayer - the relayer address to which the counterparty is registered
 */
export const destructIbcApplicationsFeeQueryCounterpartyPayeeRequest = (g_struct) => [g_struct.channel_id, g_struct.relayer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_COUNTERPARTY_PAYEE_REQUEST = '/ibc.applications.fee.v1.QueryCounterpartyPayeeRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryCounterpartyPayeeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: counterparty_payee - the counterparty payee address used to compensate forward relaying
 */
export const destructIbcApplicationsFeeQueryCounterpartyPayeeResponse = (g_struct) => [g_struct.counterparty_payee];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_COUNTERPARTY_PAYEE_RESPONSE = '/ibc.applications.fee.v1.QueryCounterpartyPayeeResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 *   - 1: query_height - block height at which to query
 */
export const destructIbcApplicationsFeeQueryFeeEnabledChannelsRequest = (g_struct) => [g_struct.pagination, g_struct.query_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNELS_REQUEST = '/ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee_enabled_channels - list of fee enabled channels
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructIbcApplicationsFeeQueryFeeEnabledChannelsResponse = (g_struct) => [g_struct.fee_enabled_channels, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNELS_RESPONSE = '/ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export const destructIbcApplicationsFeeQueryFeeEnabledChannelRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNEL_REQUEST = '/ibc.applications.fee.v1.QueryFeeEnabledChannelRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsFeeQueryFeeEnabledChannelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee_enabled - boolean flag representing the fee enabled channel status
 */
export const destructIbcApplicationsFeeQueryFeeEnabledChannelResponse = (g_struct) => [g_struct.fee_enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_FEE_QUERY_FEE_ENABLED_CHANNEL_RESPONSE = '/ibc.applications.fee.v1.QueryFeeEnabledChannelResponse';
//# sourceMappingURL=query.js.map