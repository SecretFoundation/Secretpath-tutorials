import { decode_protobuf, decode_coin } from '../../../../../api/protobuf-reader.js';
import { Protobuf, any, coins } from '../../../../../api/protobuf-writer.js';
/**
 * Encodes a `TransferAuthorization` protobuf message wrapped in the `Any` container: allows the grantee to spend up to spend_limit coins from the granter's account for ibc transfer on a specific channel
 * @param a_allocations - `allocations`: port and channel amounts
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyTransferAuthorization = (a_allocations) => any('/ibc.applications.transfer.v1.TransferAuthorization', Protobuf() // ...
    .B(a_allocations) // Allocation[] allocations = 1
    .o);
/**
 * Encodes a `Allocation` protobuf message: defines the spend limit for a particular port and channel
 * @param s_source_port - `source_port`: the port on which the packet will be sent
 * @param s_source_channel - `source_channel`: the channel by which the packet will be sent
 * @param a_spend_limits - `spend_limit`: spend limitation on the channel
 * @param a_allow_lists - `allow_list`: allow list of receivers, an empty allow list permits any receiver address
 * @param a_allowed_packet_datas - `allowed_packet_data`: allow list of packet data keys, an empty list prohibits all packet data keys; a list only with "*" permits any packet data key
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferAllocation = (s_source_port, s_source_channel, a_spend_limits, a_allow_lists, a_allowed_packet_datas) => Protobuf() // ...
    .s(s_source_port) // string source_port = 1
    .s(s_source_channel) // string source_channel = 2
    .B(coins(a_spend_limits)) // Coin[] spend_limit = 3
    .S(a_allow_lists) // string[] allow_list = 4
    .S(a_allowed_packet_datas) // string[] allowed_packet_data = 5
    .o;
/**
 * Encodes a `TransferAuthorization` protobuf message: allows the grantee to spend up to spend_limit coins from the granter's account for ibc transfer on a specific channel
 * @param a_allocations - `allocations`: port and channel amounts
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferTransferAuthorization = (a_allocations) => Protobuf() // ...
    .B(a_allocations) // Allocation[] allocations = 1
    .o;
/**
 * Decodes a protobuf Allocation message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferAllocation}
 */
export const decodeIbcApplicationsTransferAllocation = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0, 4, 4], [0, 0, decode_coin]);
/**
 * Decodes a protobuf TransferAuthorization message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferTransferAuthorization}
 */
export const decodeIbcApplicationsTransferTransferAuthorization = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeIbcApplicationsTransferAllocation]);
/**
 * Destructures the fields of a {@link IbcApplicationsTransferAllocation} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: source_port - the port on which the packet will be sent
 *   - 1: source_channel - the channel by which the packet will be sent
 *   - 2: spend_limit - spend limitation on the channel
 *   - 3: allow_list - allow list of receivers, an empty allow list permits any receiver address
 *   - 4: allowed_packet_data - allow list of packet data keys, an empty list prohibits all packet data keys; a list only with "*" permits any packet data key
 */
export const destructIbcApplicationsTransferAllocation = (g_struct) => [g_struct.source_port, g_struct.source_channel, g_struct.spend_limit, g_struct.allow_list, g_struct.allowed_packet_data];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_ALLOCATION = '/ibc.applications.transfer.v1.Allocation';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferTransferAuthorization} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: allocations - port and channel amounts
 */
export const destructIbcApplicationsTransferTransferAuthorization = (g_struct) => [g_struct.allocations];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_TRANSFER_AUTHORIZATION = '/ibc.applications.transfer.v1.TransferAuthorization';
//# sourceMappingURL=authz.js.map