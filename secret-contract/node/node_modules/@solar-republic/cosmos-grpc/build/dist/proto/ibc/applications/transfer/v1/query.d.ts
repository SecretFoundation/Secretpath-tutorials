/// <reference types="node" />
import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
import type { IbcApplicationsTransferDenomTrace, DecodedIbcApplicationsTransferDenomTrace, IbcApplicationsTransferParams, DecodedIbcApplicationsTransferParams } from './transfer.js';
export type EncodedIbcApplicationsTransferQueryDenomTraceRequest = Encoded<'/ibc.applications.transfer.v1.QueryDenomTraceRequest'>;
export type EncodedIbcApplicationsTransferQueryDenomTraceResponse = Encoded<'/ibc.applications.transfer.v1.QueryDenomTraceResponse'>;
export type EncodedIbcApplicationsTransferQueryDenomTracesRequest = Encoded<'/ibc.applications.transfer.v1.QueryDenomTracesRequest'>;
export type EncodedIbcApplicationsTransferQueryDenomTracesResponse = Encoded<'/ibc.applications.transfer.v1.QueryDenomTracesResponse'>;
export type EncodedIbcApplicationsTransferQueryParamsRequest = Encoded<'/ibc.applications.transfer.v1.QueryParamsRequest'>;
export type EncodedIbcApplicationsTransferQueryParamsResponse = Encoded<'/ibc.applications.transfer.v1.QueryParamsResponse'>;
export type EncodedIbcApplicationsTransferQueryDenomHashRequest = Encoded<'/ibc.applications.transfer.v1.QueryDenomHashRequest'>;
export type EncodedIbcApplicationsTransferQueryDenomHashResponse = Encoded<'/ibc.applications.transfer.v1.QueryDenomHashResponse'>;
export type EncodedIbcApplicationsTransferQueryEscrowAddressRequest = Encoded<'/ibc.applications.transfer.v1.QueryEscrowAddressRequest'>;
export type EncodedIbcApplicationsTransferQueryEscrowAddressResponse = Encoded<'/ibc.applications.transfer.v1.QueryEscrowAddressResponse'>;
export type EncodedIbcApplicationsTransferQueryTotalEscrowForDenomRequest = Encoded<'/ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest'>;
export type EncodedIbcApplicationsTransferQueryTotalEscrowForDenomResponse = Encoded<'/ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse'>;
/**
 * Queries all denomination traces.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: denom_traces - returns all denominations trace information.
 *   - 1: pagination - returns all denominations trace information.
 */
export declare const queryIbcApplicationsTransferDenomTraces: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsTransferQueryDenomTracesResponse>>;
/**
 * Queries a denomination trace information.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_hash - (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 * @returns a tuple where:
 *   - 0: denom_trace - returns the requested denomination trace information.
 */
export declare const queryIbcApplicationsTransferDenomTrace: (z_req: string | ({
    origin: string;
} & RequestInit), s_hash?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsTransferQueryDenomTraceResponse>>;
/**
 * Queries all parameters of the ibc-transfer module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const queryIbcApplicationsTransferParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsTransferQueryParamsResponse>>;
/**
 * Queries a denomination hash information.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_trace - The denomination trace ([port_id]/[channel_id])+/[denom]
 * @returns a tuple where:
 *   - 0: hash - (in hex format) of the denomination trace information.
 */
export declare const queryIbcApplicationsTransferDenomHash: (z_req: string | ({
    origin: string;
} & RequestInit), s_trace?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsTransferQueryDenomHashResponse>>;
/**
 * Returns the escrow address for a particular port and channel id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - unique port identifier
 * @param si_channel - unique channel identifier
 * @returns a tuple where:
 *   - 0: escrow_address - the escrow account address
 */
export declare const queryIbcApplicationsTransferEscrowAddress: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsTransferQueryEscrowAddressResponse>>;
/**
 * Returns the total amount of tokens in escrow based on the denom.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: amount - the 'amount' response property
 */
export declare const queryIbcApplicationsTransferTotalEscrowForDenom: (z_req: string | ({
    origin: string;
} & RequestInit), s_denom?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcApplicationsTransferQueryTotalEscrowForDenomResponse>>;
/**
 * Encodes a `QueryDenomTraceRequest` protobuf message: the request type for the Query/DenomTrace RPC method
 * @param s_hash - `hash`: (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryDenomTraceRequest: (s_hash?: Opt<string>) => EncodedIbcApplicationsTransferQueryDenomTraceRequest;
/**
 * Encodes a `QueryDenomTraceResponse` protobuf message: the response type for the Query/DenomTrace RPC method.
 * @param g_denom_trace - `denom_trace`: returns the requested denomination trace information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryDenomTraceResponse: (atu8_denom_trace?: Opt<Encoded<'/ibc.applications.transfer.v1.DenomTrace'>>) => EncodedIbcApplicationsTransferQueryDenomTraceResponse;
/**
 * Encodes a `QueryDenomTracesRequest` protobuf message: QueryConnectionsRequest is the request type for the Query/DenomTraces RPC method
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryDenomTracesRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedIbcApplicationsTransferQueryDenomTracesRequest;
/**
 * Encodes a `QueryDenomTracesResponse` protobuf message: QueryConnectionsResponse is the response type for the Query/DenomTraces RPC method.
 * @param a_denom_traces - `denom_traces`: returns all denominations trace information.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryDenomTracesResponse: (a_denom_traces?: Opt<Encoded<'/ibc.applications.transfer.v1.DenomTrace'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedIbcApplicationsTransferQueryDenomTracesResponse;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryParamsRequest: () => EncodedIbcApplicationsTransferQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryParamsResponse: (atu8_params?: Opt<Encoded<'/ibc.applications.transfer.v1.Params'>>) => EncodedIbcApplicationsTransferQueryParamsResponse;
/**
 * Encodes a `QueryDenomHashRequest` protobuf message: the request type for the Query/DenomHash RPC method
 * @param s_trace - `trace`: The denomination trace ([port_id]/[channel_id])+/[denom]
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryDenomHashRequest: (s_trace?: Opt<string>) => EncodedIbcApplicationsTransferQueryDenomHashRequest;
/**
 * Encodes a `QueryDenomHashResponse` protobuf message: the response type for the Query/DenomHash RPC method.
 * @param s_hash - `hash`: (in hex format) of the denomination trace information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryDenomHashResponse: (s_hash?: Opt<string>) => EncodedIbcApplicationsTransferQueryDenomHashResponse;
/**
 * Encodes a `QueryEscrowAddressRequest` protobuf message: the request type for the EscrowAddress RPC method.
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryEscrowAddressRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcApplicationsTransferQueryEscrowAddressRequest;
/**
 * Encodes a `QueryEscrowAddressResponse` protobuf message: the response type of the EscrowAddress RPC method.
 * @param sa_escrow - `escrow_address`: the escrow account address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryEscrowAddressResponse: (sa_escrow?: Opt<WeakAccountAddr>) => EncodedIbcApplicationsTransferQueryEscrowAddressResponse;
/**
 * Encodes a `QueryTotalEscrowForDenomRequest` protobuf message: the request type for TotalEscrowForDenom RPC method.
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryTotalEscrowForDenomRequest: (s_denom?: Opt<string>) => EncodedIbcApplicationsTransferQueryTotalEscrowForDenomRequest;
/**
 * Encodes a `QueryTotalEscrowForDenomResponse` protobuf message: the response type for TotalEscrowForDenom RPC method.
 * @param a_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferQueryTotalEscrowForDenomResponse: (a_amount?: Opt<SlimCoin>) => EncodedIbcApplicationsTransferQueryTotalEscrowForDenomResponse;
/**
 * A decoded protobuf QueryDenomTraceRequest message
 *
 * Alias for: hash - (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 */
export type DecodedIbcApplicationsTransferQueryDenomTraceRequest = [
    s_hash?: string
];
/**
 * Decodes a protobuf QueryDenomTraceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTraceRequest}
 */
export declare const decodeIbcApplicationsTransferQueryDenomTraceRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryDenomTraceRequest;
/**
 * A decoded protobuf QueryDenomTrace message
 *
 * Alias for: denom_trace - returns the requested denomination trace information.
 */
export type DecodedIbcApplicationsTransferQueryDenomTraceResponse = [
    a_denom_trace?: DecodedIbcApplicationsTransferDenomTrace
];
/**
 * Decodes a protobuf QueryDenomTrace message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTraceResponse}
 */
export declare const decodeIbcApplicationsTransferQueryDenomTraceResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryDenomTraceResponse;
/**
 * A decoded protobuf QueryDenomTracesRequest message
 *
 * Alias for: pagination - defines an optional pagination for the request.
 */
export type DecodedIbcApplicationsTransferQueryDenomTracesRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryDenomTracesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTracesRequest}
 */
export declare const decodeIbcApplicationsTransferQueryDenomTracesRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryDenomTracesRequest;
/**
 * A decoded protobuf QueryDenomTraces message
 *
 * Tuple where:
 *   - 0: denom_traces - returns all denominations trace information.
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedIbcApplicationsTransferQueryDenomTracesResponse = [
    a_denom_traces?: DecodedIbcApplicationsTransferDenomTrace[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryDenomTraces message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTracesResponse}
 */
export declare const decodeIbcApplicationsTransferQueryDenomTracesResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryDenomTracesResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedIbcApplicationsTransferQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryParamsRequest}
 */
export declare const decodeIbcApplicationsTransferQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - defines the parameters of the module.
 */
export type DecodedIbcApplicationsTransferQueryParamsResponse = [
    a_params?: DecodedIbcApplicationsTransferParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryParamsResponse}
 */
export declare const decodeIbcApplicationsTransferQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryParamsResponse;
/**
 * A decoded protobuf QueryDenomHashRequest message
 *
 * Alias for: trace - The denomination trace ([port_id]/[channel_id])+/[denom]
 */
export type DecodedIbcApplicationsTransferQueryDenomHashRequest = [
    s_trace?: string
];
/**
 * Decodes a protobuf QueryDenomHashRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomHashRequest}
 */
export declare const decodeIbcApplicationsTransferQueryDenomHashRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryDenomHashRequest;
/**
 * A decoded protobuf QueryDenomHash message
 *
 * Alias for: hash - (in hex format) of the denomination trace information.
 */
export type DecodedIbcApplicationsTransferQueryDenomHashResponse = [
    s_hash?: string
];
/**
 * Decodes a protobuf QueryDenomHash message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomHashResponse}
 */
export declare const decodeIbcApplicationsTransferQueryDenomHashResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryDenomHashResponse;
/**
 * A decoded protobuf QueryEscrowAddressRequest message
 *
 * Tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export type DecodedIbcApplicationsTransferQueryEscrowAddressRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryEscrowAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryEscrowAddressRequest}
 */
export declare const decodeIbcApplicationsTransferQueryEscrowAddressRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryEscrowAddressRequest;
/**
 * A decoded protobuf QueryEscrowAddress message
 *
 * Alias for: escrow_address - the escrow account address
 */
export type DecodedIbcApplicationsTransferQueryEscrowAddressResponse = [
    sa_escrow?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryEscrowAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryEscrowAddressResponse}
 */
export declare const decodeIbcApplicationsTransferQueryEscrowAddressResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryEscrowAddressResponse;
/**
 * A decoded protobuf QueryTotalEscrowForDenomRequest message
 *
 * Alias for: denom -
 */
export type DecodedIbcApplicationsTransferQueryTotalEscrowForDenomRequest = [
    s_denom?: string
];
/**
 * Decodes a protobuf QueryTotalEscrowForDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryTotalEscrowForDenomRequest}
 */
export declare const decodeIbcApplicationsTransferQueryTotalEscrowForDenomRequest: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryTotalEscrowForDenomRequest;
/**
 * A decoded protobuf QueryTotalEscrowForDenom message
 *
 * Alias for: amount -
 */
export type DecodedIbcApplicationsTransferQueryTotalEscrowForDenomResponse = [
    a_amount?: [
        string,
        string
    ]
];
/**
 * Decodes a protobuf QueryTotalEscrowForDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryTotalEscrowForDenomResponse}
 */
export declare const decodeIbcApplicationsTransferQueryTotalEscrowForDenomResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferQueryTotalEscrowForDenomResponse;
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTraceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 */
export declare const destructIbcApplicationsTransferQueryDenomTraceRequest: (g_struct: IbcApplicationsTransferQueryDenomTraceRequest) => [hash?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACE_REQUEST = "/ibc.applications.transfer.v1.QueryDenomTraceRequest";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryDenomTraceRequest` - the request type for the Query/DenomTrace RPC method
 */
export type IbcApplicationsTransferQueryDenomTraceRequest = {
    hash?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTraceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_trace - returns the requested denomination trace information.
 */
export declare const destructIbcApplicationsTransferQueryDenomTraceResponse: (g_struct: IbcApplicationsTransferQueryDenomTraceResponse) => [denom_trace?: IbcApplicationsTransferDenomTrace];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACE_RESPONSE = "/ibc.applications.transfer.v1.QueryDenomTraceResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryDenomTraceResponse` - the response type for the Query/DenomTrace RPC method.
 */
export type IbcApplicationsTransferQueryDenomTraceResponse = {
    denom_trace?: IbcApplicationsTransferDenomTrace | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTracesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export declare const destructIbcApplicationsTransferQueryDenomTracesRequest: (g_struct: IbcApplicationsTransferQueryDenomTracesRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACES_REQUEST = "/ibc.applications.transfer.v1.QueryDenomTracesRequest";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryDenomTracesRequest` - QueryConnectionsRequest is the request type for the Query/DenomTraces RPC method
 */
export type IbcApplicationsTransferQueryDenomTracesRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTracesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_traces - returns all denominations trace information.
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructIbcApplicationsTransferQueryDenomTracesResponse: (g_struct: IbcApplicationsTransferQueryDenomTracesResponse) => [denom_traces?: IbcApplicationsTransferDenomTrace[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACES_RESPONSE = "/ibc.applications.transfer.v1.QueryDenomTracesResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryDenomTracesResponse` - QueryConnectionsResponse is the response type for the Query/DenomTraces RPC method.
 */
export type IbcApplicationsTransferQueryDenomTracesResponse = {
    denom_traces?: IbcApplicationsTransferDenomTrace[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcApplicationsTransferQueryParamsRequest: (g_struct: IbcApplicationsTransferQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_PARAMS_REQUEST = "/ibc.applications.transfer.v1.QueryParamsRequest";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryParamsRequest` - the request type for the Query/Params RPC method.
 */
export type IbcApplicationsTransferQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const destructIbcApplicationsTransferQueryParamsResponse: (g_struct: IbcApplicationsTransferQueryParamsResponse) => [params?: IbcApplicationsTransferParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_PARAMS_RESPONSE = "/ibc.applications.transfer.v1.QueryParamsResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryParamsResponse` - the response type for the Query/Params RPC method.
 */
export type IbcApplicationsTransferQueryParamsResponse = {
    params?: IbcApplicationsTransferParams | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomHashRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: trace - The denomination trace ([port_id]/[channel_id])+/[denom]
 */
export declare const destructIbcApplicationsTransferQueryDenomHashRequest: (g_struct: IbcApplicationsTransferQueryDenomHashRequest) => [trace?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_HASH_REQUEST = "/ibc.applications.transfer.v1.QueryDenomHashRequest";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryDenomHashRequest` - the request type for the Query/DenomHash RPC method
 */
export type IbcApplicationsTransferQueryDenomHashRequest = {
    trace?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomHashResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - (in hex format) of the denomination trace information.
 */
export declare const destructIbcApplicationsTransferQueryDenomHashResponse: (g_struct: IbcApplicationsTransferQueryDenomHashResponse) => [hash?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_HASH_RESPONSE = "/ibc.applications.transfer.v1.QueryDenomHashResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryDenomHashResponse` - the response type for the Query/DenomHash RPC method.
 */
export type IbcApplicationsTransferQueryDenomHashResponse = {
    hash?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryEscrowAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export declare const destructIbcApplicationsTransferQueryEscrowAddressRequest: (g_struct: IbcApplicationsTransferQueryEscrowAddressRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_ESCROW_ADDRESS_REQUEST = "/ibc.applications.transfer.v1.QueryEscrowAddressRequest";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryEscrowAddressRequest` - the request type for the EscrowAddress RPC method.
 */
export type IbcApplicationsTransferQueryEscrowAddressRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryEscrowAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: escrow_address - the escrow account address
 */
export declare const destructIbcApplicationsTransferQueryEscrowAddressResponse: (g_struct: IbcApplicationsTransferQueryEscrowAddressResponse) => [escrow_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_ESCROW_ADDRESS_RESPONSE = "/ibc.applications.transfer.v1.QueryEscrowAddressResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryEscrowAddressResponse` - the response type of the EscrowAddress RPC method.
 */
export type IbcApplicationsTransferQueryEscrowAddressResponse = {
    escrow_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryTotalEscrowForDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 */
export declare const destructIbcApplicationsTransferQueryTotalEscrowForDenomRequest: (g_struct: IbcApplicationsTransferQueryTotalEscrowForDenomRequest) => [denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_TOTAL_ESCROW_FOR_DENOM_REQUEST = "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest` - the request type for TotalEscrowForDenom RPC method.
 */
export type IbcApplicationsTransferQueryTotalEscrowForDenomRequest = {
    denom?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryTotalEscrowForDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 */
export declare const destructIbcApplicationsTransferQueryTotalEscrowForDenomResponse: (g_struct: IbcApplicationsTransferQueryTotalEscrowForDenomResponse) => [amount?: CosmosBaseCoin];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_TOTAL_ESCROW_FOR_DENOM_RESPONSE = "/ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse` - the response type for TotalEscrowForDenom RPC method.
 */
export type IbcApplicationsTransferQueryTotalEscrowForDenomResponse = {
    amount?: CosmosBaseCoin | undefined;
};
