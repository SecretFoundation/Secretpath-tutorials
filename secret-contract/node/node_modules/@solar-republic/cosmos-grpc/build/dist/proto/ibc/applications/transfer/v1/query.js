import { decode_protobuf, decode_coin } from '../../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import { decodeIbcApplicationsTransferDenomTrace, decodeIbcApplicationsTransferParams } from './transfer.js';
const SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY = '/ibc/apps/transfer/v1/';
/**
 * Queries all denomination traces.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: denom_traces - returns all denominations trace information.
 *   - 1: pagination - returns all denominations trace information.
 */
export const queryIbcApplicationsTransferDenomTraces = restful_grpc(g_pagination => [SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY + 'denom_traces', {
        pagination: g_pagination,
    }]);
/**
 * Queries a denomination trace information.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_hash - (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 * @returns a tuple where:
 *   - 0: denom_trace - returns the requested denomination trace information.
 */
export const queryIbcApplicationsTransferDenomTrace = restful_grpc(s_hash => [SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY + 'denom_traces/' + s_hash]);
/**
 * Queries all parameters of the ibc-transfer module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryIbcApplicationsTransferParams = restful_grpc(() => [SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY + 'params']);
/**
 * Queries a denomination hash information.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_trace - The denomination trace ([port_id]/[channel_id])+/[denom]
 * @returns a tuple where:
 *   - 0: hash - (in hex format) of the denomination trace information.
 */
export const queryIbcApplicationsTransferDenomHash = restful_grpc(s_trace => [SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY + 'denom_hashes/' + s_trace]);
/**
 * Returns the escrow address for a particular port and channel id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - unique port identifier
 * @param si_channel - unique channel identifier
 * @returns a tuple where:
 *   - 0: escrow_address - the escrow account address
 */
export const queryIbcApplicationsTransferEscrowAddress = restful_grpc((si_port, si_channel) => [SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY + 'channels/' + si_channel + '/ports/' + si_port + '/escrow_address']);
/**
 * Returns the total amount of tokens in escrow based on the denom.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: amount - the 'amount' response property
 */
export const queryIbcApplicationsTransferTotalEscrowForDenom = restful_grpc(s_denom => [SR_LCD_IBC_APPLICATIONS_TRANSFER_QUERY + 'denoms/' + s_denom + '/total_escrow']);
/**
 * Encodes a `QueryDenomTraceRequest` protobuf message: the request type for the Query/DenomTrace RPC method
 * @param s_hash - `hash`: (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryDenomTraceRequest = (s_hash) => Protobuf() // ...
    .s(s_hash) // string hash = 1
    .o;
/**
 * Encodes a `QueryDenomTraceResponse` protobuf message: the response type for the Query/DenomTrace RPC method.
 * @param g_denom_trace - `denom_trace`: returns the requested denomination trace information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryDenomTraceResponse = (atu8_denom_trace) => Protobuf() // ...
    .b(atu8_denom_trace) // DenomTrace denom_trace = 1
    .o;
/**
 * Encodes a `QueryDenomTracesRequest` protobuf message: QueryConnectionsRequest is the request type for the Query/DenomTraces RPC method
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryDenomTracesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryDenomTracesResponse` protobuf message: QueryConnectionsResponse is the response type for the Query/DenomTraces RPC method.
 * @param a_denom_traces - `denom_traces`: returns all denominations trace information.
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryDenomTracesResponse = (a_denom_traces, atu8_pagination) => Protobuf() // ...
    .B(a_denom_traces) // DenomTrace[] denom_traces = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryDenomHashRequest` protobuf message: the request type for the Query/DenomHash RPC method
 * @param s_trace - `trace`: The denomination trace ([port_id]/[channel_id])+/[denom]
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryDenomHashRequest = (s_trace) => Protobuf() // ...
    .s(s_trace) // string trace = 1
    .o;
/**
 * Encodes a `QueryDenomHashResponse` protobuf message: the response type for the Query/DenomHash RPC method.
 * @param s_hash - `hash`: (in hex format) of the denomination trace information.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryDenomHashResponse = (s_hash) => Protobuf() // ...
    .s(s_hash) // string hash = 1
    .o;
/**
 * Encodes a `QueryEscrowAddressRequest` protobuf message: the request type for the EscrowAddress RPC method.
 * @param si_port - `port_id`: unique port identifier
 * @param si_channel - `channel_id`: unique channel identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryEscrowAddressRequest = (si_port, si_channel) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `QueryEscrowAddressResponse` protobuf message: the response type of the EscrowAddress RPC method.
 * @param sa_escrow - `escrow_address`: the escrow account address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryEscrowAddressResponse = (sa_escrow) => Protobuf() // ...
    .s(sa_escrow) // string escrow_address = 1
    .o;
/**
 * Encodes a `QueryTotalEscrowForDenomRequest` protobuf message: the request type for TotalEscrowForDenom RPC method.
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryTotalEscrowForDenomRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QueryTotalEscrowForDenomResponse` protobuf message: the response type for TotalEscrowForDenom RPC method.
 * @param a_amount - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferQueryTotalEscrowForDenomResponse = (a_amount) => Protobuf() // ...
    .b(coin(a_amount)) // Coin amount = 1
    .o;
/**
 * Decodes a protobuf QueryDenomTraceRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTraceRequest}
 */
export const decodeIbcApplicationsTransferQueryDenomTraceRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDenomTrace message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTraceResponse}
 */
export const decodeIbcApplicationsTransferQueryDenomTraceResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcApplicationsTransferDenomTrace]);
/**
 * Decodes a protobuf QueryDenomTracesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTracesRequest}
 */
export const decodeIbcApplicationsTransferQueryDenomTracesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDenomTraces message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomTracesResponse}
 */
export const decodeIbcApplicationsTransferQueryDenomTracesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeIbcApplicationsTransferDenomTrace, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryParamsRequest}
 */
export const decodeIbcApplicationsTransferQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryParamsResponse}
 */
export const decodeIbcApplicationsTransferQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeIbcApplicationsTransferParams]);
/**
 * Decodes a protobuf QueryDenomHashRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomHashRequest}
 */
export const decodeIbcApplicationsTransferQueryDenomHashRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDenomHash message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryDenomHashResponse}
 */
export const decodeIbcApplicationsTransferQueryDenomHashResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryEscrowAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryEscrowAddressRequest}
 */
export const decodeIbcApplicationsTransferQueryEscrowAddressRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryEscrowAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryEscrowAddressResponse}
 */
export const decodeIbcApplicationsTransferQueryEscrowAddressResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryTotalEscrowForDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryTotalEscrowForDenomRequest}
 */
export const decodeIbcApplicationsTransferQueryTotalEscrowForDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryTotalEscrowForDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferQueryTotalEscrowForDenomResponse}
 */
export const decodeIbcApplicationsTransferQueryTotalEscrowForDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTraceRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - (in hex format) or denom (full denom with ibc prefix) of the denomination trace information.
 */
export const destructIbcApplicationsTransferQueryDenomTraceRequest = (g_struct) => [g_struct.hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACE_REQUEST = '/ibc.applications.transfer.v1.QueryDenomTraceRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTraceResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_trace - returns the requested denomination trace information.
 */
export const destructIbcApplicationsTransferQueryDenomTraceResponse = (g_struct) => [g_struct.denom_trace];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACE_RESPONSE = '/ibc.applications.transfer.v1.QueryDenomTraceResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTracesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export const destructIbcApplicationsTransferQueryDenomTracesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACES_REQUEST = '/ibc.applications.transfer.v1.QueryDenomTracesRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomTracesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_traces - returns all denominations trace information.
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructIbcApplicationsTransferQueryDenomTracesResponse = (g_struct) => [g_struct.denom_traces, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_TRACES_RESPONSE = '/ibc.applications.transfer.v1.QueryDenomTracesResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcApplicationsTransferQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_PARAMS_REQUEST = '/ibc.applications.transfer.v1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructIbcApplicationsTransferQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_PARAMS_RESPONSE = '/ibc.applications.transfer.v1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomHashRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: trace - The denomination trace ([port_id]/[channel_id])+/[denom]
 */
export const destructIbcApplicationsTransferQueryDenomHashRequest = (g_struct) => [g_struct.trace];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_HASH_REQUEST = '/ibc.applications.transfer.v1.QueryDenomHashRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryDenomHashResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - (in hex format) of the denomination trace information.
 */
export const destructIbcApplicationsTransferQueryDenomHashResponse = (g_struct) => [g_struct.hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_DENOM_HASH_RESPONSE = '/ibc.applications.transfer.v1.QueryDenomHashResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryEscrowAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - unique port identifier
 *   - 1: channel_id - unique channel identifier
 */
export const destructIbcApplicationsTransferQueryEscrowAddressRequest = (g_struct) => [g_struct.port_id, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_ESCROW_ADDRESS_REQUEST = '/ibc.applications.transfer.v1.QueryEscrowAddressRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryEscrowAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: escrow_address - the escrow account address
 */
export const destructIbcApplicationsTransferQueryEscrowAddressResponse = (g_struct) => [g_struct.escrow_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_ESCROW_ADDRESS_RESPONSE = '/ibc.applications.transfer.v1.QueryEscrowAddressResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryTotalEscrowForDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 */
export const destructIbcApplicationsTransferQueryTotalEscrowForDenomRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_TOTAL_ESCROW_FOR_DENOM_REQUEST = '/ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferQueryTotalEscrowForDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 */
export const destructIbcApplicationsTransferQueryTotalEscrowForDenomResponse = (g_struct) => [g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_QUERY_TOTAL_ESCROW_FOR_DENOM_RESPONSE = '/ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse';
//# sourceMappingURL=query.js.map