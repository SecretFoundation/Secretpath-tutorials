import type { Encoded, Opt } from '../../../../../api/types.js';
export type EncodedIbcApplicationsTransferDenomTrace = Encoded<'/ibc.applications.transfer.v1.DenomTrace'>;
export type EncodedIbcApplicationsTransferParams = Encoded<'/ibc.applications.transfer.v1.Params'>;
/**
 * Encodes a `DenomTrace` protobuf message: contains the base denomination for ICS20 fungible tokens and the source tracing information path.
 * @param s_path - `path`: defines the chain of port/channel identifiers used for tracing the source of the fungible token.
 * @param s_base_denom - `base_denom`: base denomination of the relayed fungible token.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferDenomTrace: (s_path?: Opt<string>, s_base_denom?: Opt<string>) => EncodedIbcApplicationsTransferDenomTrace;
/**
 * Encodes a `Params` protobuf message: defines the set of IBC transfer parameters. NOTE: To prevent a single token from being transferred, set the TransfersEnabled parameter to true and then set the bank module's SendEnabled parameter for the denomination to false.
 * @param b_send_enabled - `send_enabled`: enables or disables all cross-chain token transfers from this chain.
 * @param b_receive_enabled - `receive_enabled`: enables or disables all cross-chain token transfers to this chain.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferParams: (b_send_enabled?: Opt<boolean | 0 | 1>, b_receive_enabled?: Opt<boolean | 0 | 1>) => EncodedIbcApplicationsTransferParams;
/**
 * A decoded protobuf DenomTrace message
 *
 * Tuple where:
 *   - 0: path - defines the chain of port/channel identifiers used for tracing the source of the fungible token.
 *   - 1: base_denom - base denomination of the relayed fungible token.
 */
export type DecodedIbcApplicationsTransferDenomTrace = [
    s_path?: string,
    s_base_denom?: string
];
/**
 * Decodes a protobuf DenomTrace message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferDenomTrace}
 */
export declare const decodeIbcApplicationsTransferDenomTrace: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferDenomTrace;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: send_enabled - enables or disables all cross-chain token transfers from this chain.
 *   - 1: receive_enabled - enables or disables all cross-chain token transfers to this chain.
 */
export type DecodedIbcApplicationsTransferParams = [
    b_send_enabled?: 0 | 1,
    b_receive_enabled?: 0 | 1
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferParams}
 */
export declare const decodeIbcApplicationsTransferParams: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferParams;
/**
 * Destructures the fields of a {@link IbcApplicationsTransferParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: send_enabled - enables or disables all cross-chain token transfers from this chain.
 *   - 1: receive_enabled - enables or disables all cross-chain token transfers to this chain.
 */
export declare const destructIbcApplicationsTransferParams: (g_struct: IbcApplicationsTransferParams) => [send_enabled?: boolean, receive_enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_PARAMS = "/ibc.applications.transfer.v1.Params";
/**
 * JSON serialization of `ibc.applications.transfer.v1.Params` - defines the set of IBC transfer parameters. NOTE: To prevent a single token from being transferred, set the TransfersEnabled parameter to true and then set the bank module's SendEnabled parameter for the denomination to false.
 */
export type IbcApplicationsTransferParams = {
    send_enabled?: boolean | undefined;
    receive_enabled?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferDenomTrace} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path - defines the chain of port/channel identifiers used for tracing the source of the fungible token.
 *   - 1: base_denom - base denomination of the relayed fungible token.
 */
export declare const destructIbcApplicationsTransferDenomTrace: (g_struct: IbcApplicationsTransferDenomTrace) => [path?: string, base_denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_DENOM_TRACE = "/ibc.applications.transfer.v1.DenomTrace";
/**
 * JSON serialization of `ibc.applications.transfer.v1.DenomTrace` - contains the base denomination for ICS20 fungible tokens and the source tracing information path.
 */
export type IbcApplicationsTransferDenomTrace = {
    path?: string | undefined;
    base_denom?: string | undefined;
};
