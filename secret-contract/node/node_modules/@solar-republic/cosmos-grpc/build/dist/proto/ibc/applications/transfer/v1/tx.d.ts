import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
import type { IbcApplicationsTransferParams, DecodedIbcApplicationsTransferParams } from './transfer.js';
import type { IbcCoreClientHeight, DecodedIbcCoreClientHeight } from '../../../core/client/v1/client.js';
export type EncodedIbcApplicationsTransferMsgTransfer = Encoded<'/ibc.applications.transfer.v1.MsgTransfer'>;
export type EncodedIbcApplicationsTransferMsgTransferResponse = Encoded<'/ibc.applications.transfer.v1.MsgTransferResponse'>;
export type EncodedIbcApplicationsTransferMsgUpdateParams = Encoded<'/ibc.applications.transfer.v1.MsgUpdateParams'>;
export type EncodedIbcApplicationsTransferMsgUpdateParamsResponse = Encoded<'/ibc.applications.transfer.v1.MsgUpdateParamsResponse'>;
/**
 * Encodes a `MsgTransfer` protobuf message: defines a msg to transfer fungible tokens (i.e Coins) between ICS20 enabled chains. See ICS Spec here: https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
 * @param s_source_port - `source_port`: the port on which the packet will be sent
 * @param s_source_channel - `source_channel`: the channel by which the packet will be sent
 * @param a_token - `token`: the tokens to be transferred
 * @param sa_sender - `sender`: the sender address
 * @param sa_receiver - `receiver`: the recipient address on the destination chain
 * @param g_timeout_height - `timeout_height`: Timeout height relative to the current block height. The timeout is disabled when set to 0.
 * @param sg_timeout_timestamp - `timeout_timestamp`: Timeout timestamp in absolute nanoseconds since unix epoch. The timeout is disabled when set to 0.
 * @param s_memo - `memo`: optional memo
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferMsgTransfer: (s_source_port?: Opt<string>, s_source_channel?: Opt<string>, a_token?: Opt<SlimCoin>, sa_sender?: Opt<WeakAccountAddr>, sa_receiver?: Opt<WeakAccountAddr>, atu8_timeout_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, sg_timeout_timestamp?: Opt<WeakUint64Str>, s_memo?: Opt<string>) => EncodedIbcApplicationsTransferMsgTransfer;
/**
 * Encodes a `MsgTransferResponse` protobuf message: defines the Msg/Transfer response type.
 * @param sg_sequence - `sequence`: number of the transfer packet sent
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferMsgTransferResponse: (sg_sequence?: Opt<WeakUint64Str>) => EncodedIbcApplicationsTransferMsgTransferResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type.
 * @param s_signer - `signer`: address
 * @param g_params - `params`: defines the transfer parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferMsgUpdateParams: (s_signer?: Opt<string>, atu8_params?: Opt<Encoded<'/ibc.applications.transfer.v1.Params'>>) => EncodedIbcApplicationsTransferMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcApplicationsTransferMsgUpdateParamsResponse: () => EncodedIbcApplicationsTransferMsgUpdateParamsResponse;
/**
 * A decoded protobuf Transfer message
 *
 * Tuple where:
 *   - 0: source_port - the port on which the packet will be sent
 *   - 1: source_channel - the channel by which the packet will be sent
 *   - 2: token - the tokens to be transferred
 *   - 3: sender - the sender address
 *   - 4: receiver - the recipient address on the destination chain
 *   - 5: timeout_height - Timeout height relative to the current block height. The timeout is disabled when set to 0.
 *   - 6: timeout_timestamp - Timeout timestamp in absolute nanoseconds since unix epoch. The timeout is disabled when set to 0.
 *   - 7: memo - optional memo
 */
export type DecodedIbcApplicationsTransferMsgTransfer = [
    s_source_port?: string,
    s_source_channel?: string,
    a_token?: [
        string,
        string
    ],
    sa_sender?: CwAccountAddr,
    sa_receiver?: CwAccountAddr,
    a_timeout_height?: DecodedIbcCoreClientHeight,
    sg_timeout_timestamp?: CwUint64,
    s_memo?: string
];
/**
 * Decodes a protobuf Transfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgTransfer}
 */
export declare const decodeIbcApplicationsTransferMsgTransfer: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferMsgTransfer;
/**
 * A decoded protobuf Transfer message
 *
 * Alias for: sequence - number of the transfer packet sent
 */
export type DecodedIbcApplicationsTransferMsgTransferResponse = [
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf Transfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgTransferResponse}
 */
export declare const decodeIbcApplicationsTransferMsgTransferResponse: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferMsgTransferResponse;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the transfer parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedIbcApplicationsTransferMsgUpdateParams = [
    s_signer?: string,
    a_params?: DecodedIbcApplicationsTransferParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgUpdateParams}
 */
export declare const decodeIbcApplicationsTransferMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedIbcApplicationsTransferMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedIbcApplicationsTransferMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgUpdateParamsResponse}
 */
export declare const decodeIbcApplicationsTransferMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: source_port - the port on which the packet will be sent
 *   - 1: source_channel - the channel by which the packet will be sent
 *   - 2: token - the tokens to be transferred
 *   - 3: sender - the sender address
 *   - 4: receiver - the recipient address on the destination chain
 *   - 5: timeout_height - Timeout height relative to the current block height. The timeout is disabled when set to 0.
 *   - 6: timeout_timestamp - Timeout timestamp in absolute nanoseconds since unix epoch. The timeout is disabled when set to 0.
 *   - 7: memo - optional memo
 */
export declare const destructIbcApplicationsTransferMsgTransfer: (g_struct: IbcApplicationsTransferMsgTransfer) => [source_port?: string, source_channel?: string, token?: CosmosBaseCoin, sender?: CwAccountAddr, receiver?: CwAccountAddr, timeout_height?: IbcCoreClientHeight, timeout_timestamp?: CwUint64, memo?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_TRANSFER = "/ibc.applications.transfer.v1.MsgTransfer";
/**
 * JSON serialization of `ibc.applications.transfer.v1.MsgTransfer` - defines a msg to transfer fungible tokens (i.e Coins) between ICS20 enabled chains. See ICS Spec here: https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
 */
export type IbcApplicationsTransferMsgTransfer = {
    source_port?: string | undefined;
    source_channel?: string | undefined;
    token?: CosmosBaseCoin | undefined;
    sender?: CwAccountAddr | undefined;
    receiver?: CwAccountAddr | undefined;
    timeout_height?: IbcCoreClientHeight | undefined;
    timeout_timestamp?: CwUint64 | undefined;
    memo?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgTransferResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - number of the transfer packet sent
 */
export declare const destructIbcApplicationsTransferMsgTransferResponse: (g_struct: IbcApplicationsTransferMsgTransferResponse) => [sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_TRANSFER_RESPONSE = "/ibc.applications.transfer.v1.MsgTransferResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.MsgTransferResponse` - defines the Msg/Transfer response type.
 */
export type IbcApplicationsTransferMsgTransferResponse = {
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the transfer parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructIbcApplicationsTransferMsgUpdateParams: (g_struct: IbcApplicationsTransferMsgUpdateParams) => [signer?: string, params?: IbcApplicationsTransferParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_UPDATE_PARAMS = "/ibc.applications.transfer.v1.MsgUpdateParams";
/**
 * JSON serialization of `ibc.applications.transfer.v1.MsgUpdateParams` - the Msg/UpdateParams request type.
 */
export type IbcApplicationsTransferMsgUpdateParams = {
    signer?: string | undefined;
    params?: IbcApplicationsTransferParams | undefined;
};
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcApplicationsTransferMsgUpdateParamsResponse: (g_struct: IbcApplicationsTransferMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_UPDATE_PARAMS_RESPONSE = "/ibc.applications.transfer.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `ibc.applications.transfer.v1.MsgUpdateParamsResponse` - defines the response structure for executing a MsgUpdateParams message.
 */
export type IbcApplicationsTransferMsgUpdateParamsResponse = {};
