import { decode_protobuf, decode_coin } from '../../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../../api/protobuf-writer.js';
import { decodeIbcApplicationsTransferParams } from './transfer.js';
import { decodeIbcCoreClientHeight } from '../../../core/client/v1/client.js';
/**
 * Encodes a `MsgTransfer` protobuf message: defines a msg to transfer fungible tokens (i.e Coins) between ICS20 enabled chains. See ICS Spec here: https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
 * @param s_source_port - `source_port`: the port on which the packet will be sent
 * @param s_source_channel - `source_channel`: the channel by which the packet will be sent
 * @param a_token - `token`: the tokens to be transferred
 * @param sa_sender - `sender`: the sender address
 * @param sa_receiver - `receiver`: the recipient address on the destination chain
 * @param g_timeout_height - `timeout_height`: Timeout height relative to the current block height. The timeout is disabled when set to 0.
 * @param sg_timeout_timestamp - `timeout_timestamp`: Timeout timestamp in absolute nanoseconds since unix epoch. The timeout is disabled when set to 0.
 * @param s_memo - `memo`: optional memo
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferMsgTransfer = (s_source_port, s_source_channel, a_token, sa_sender, sa_receiver, atu8_timeout_height, sg_timeout_timestamp, s_memo) => Protobuf() // ...
    .s(s_source_port) // string source_port = 1
    .s(s_source_channel) // string source_channel = 2
    .b(coin(a_token)) // Coin token = 3
    .s(sa_sender) // string sender = 4
    .s(sa_receiver) // string receiver = 5
    .b(atu8_timeout_height) // Height timeout_height = 6
    .g(sg_timeout_timestamp) // uint64 timeout_timestamp = 7
    .s(s_memo) // string memo = 8
    .o;
/**
 * Encodes a `MsgTransferResponse` protobuf message: defines the Msg/Transfer response type.
 * @param sg_sequence - `sequence`: number of the transfer packet sent
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferMsgTransferResponse = (sg_sequence) => Protobuf() // ...
    .g(sg_sequence) // uint64 sequence = 1
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type.
 * @param s_signer - `signer`: address
 * @param g_params - `params`: defines the transfer parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferMsgUpdateParams = (s_signer, atu8_params) => Protobuf() // ...
    .s(s_signer) // string signer = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcApplicationsTransferMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf Transfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgTransfer}
 */
export const decodeIbcApplicationsTransferMsgTransfer = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 5, 5, 1, 3, 5], [0, 0, decode_coin, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf Transfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgTransferResponse}
 */
export const decodeIbcApplicationsTransferMsgTransferResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgUpdateParams}
 */
export const decodeIbcApplicationsTransferMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeIbcApplicationsTransferParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcApplicationsTransferMsgUpdateParamsResponse}
 */
export const decodeIbcApplicationsTransferMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: source_port - the port on which the packet will be sent
 *   - 1: source_channel - the channel by which the packet will be sent
 *   - 2: token - the tokens to be transferred
 *   - 3: sender - the sender address
 *   - 4: receiver - the recipient address on the destination chain
 *   - 5: timeout_height - Timeout height relative to the current block height. The timeout is disabled when set to 0.
 *   - 6: timeout_timestamp - Timeout timestamp in absolute nanoseconds since unix epoch. The timeout is disabled when set to 0.
 *   - 7: memo - optional memo
 */
export const destructIbcApplicationsTransferMsgTransfer = (g_struct) => [g_struct.source_port, g_struct.source_channel, g_struct.token, g_struct.sender, g_struct.receiver, g_struct.timeout_height, g_struct.timeout_timestamp, g_struct.memo];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_TRANSFER = '/ibc.applications.transfer.v1.MsgTransfer';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgTransferResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - number of the transfer packet sent
 */
export const destructIbcApplicationsTransferMsgTransferResponse = (g_struct) => [g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_TRANSFER_RESPONSE = '/ibc.applications.transfer.v1.MsgTransferResponse';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the transfer parameters to update. NOTE: All parameters must be supplied.
 */
export const destructIbcApplicationsTransferMsgUpdateParams = (g_struct) => [g_struct.signer, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_UPDATE_PARAMS = '/ibc.applications.transfer.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link IbcApplicationsTransferMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcApplicationsTransferMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_APPLICATIONS_TRANSFER_MSG_UPDATE_PARAMS_RESPONSE = '/ibc.applications.transfer.v1.MsgUpdateParamsResponse';
//# sourceMappingURL=tx.js.map