import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { IbcCoreChannelIdentifiedChannel, DecodedIbcCoreChannelIdentifiedChannel, IbcCoreChannelPacketState, DecodedIbcCoreChannelPacketState, IbcCoreChannelParams, DecodedIbcCoreChannelParams } from './channel.js';
export type EncodedIbcCoreChannelGenesisState = Encoded<'/ibc.core.channel.v1.GenesisState'>;
export type EncodedIbcCoreChannelPacketSequence = Encoded<'/ibc.core.channel.v1.PacketSequence'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the ibc channel submodule's genesis state.
 * @param a_channels - `channels`:
 * @param a_acknowledgements - `acknowledgements`:
 * @param a_commitments - `commitments`:
 * @param a_receipts - `receipts`:
 * @param a_send_sequences - `send_sequences`:
 * @param a_recv_sequences - `recv_sequences`:
 * @param a_ack_sequences - `ack_sequences`:
 * @param sg_next_channel_sequence - `next_channel_sequence`: the sequence for the next generated channel identifier
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelGenesisState: (a_channels?: Opt<Encoded<'/ibc.core.channel.v1.IdentifiedChannel'>[]>, a_acknowledgements?: Opt<Encoded<'/ibc.core.channel.v1.PacketState'>[]>, a_commitments?: Opt<Encoded<'/ibc.core.channel.v1.PacketState'>[]>, a_receipts?: Opt<Encoded<'/ibc.core.channel.v1.PacketState'>[]>, a_send_sequences?: Opt<Encoded<'/ibc.core.channel.v1.PacketSequence'>[]>, a_recv_sequences?: Opt<Encoded<'/ibc.core.channel.v1.PacketSequence'>[]>, a_ack_sequences?: Opt<Encoded<'/ibc.core.channel.v1.PacketSequence'>[]>, sg_next_channel_sequence?: Opt<WeakUint64Str>, atu8_params?: Opt<Encoded<'/ibc.core.channel.v1.Params'>>) => EncodedIbcCoreChannelGenesisState;
/**
 * Encodes a `PacketSequence` protobuf message: defines the genesis type necessary to retrieve and store next send and receive sequences.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_sequence - `sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelPacketSequence: (si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelPacketSequence;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: channels -
 *   - 1: acknowledgements -
 *   - 2: commitments -
 *   - 3: receipts -
 *   - 4: send_sequences -
 *   - 5: recv_sequences -
 *   - 6: ack_sequences -
 *   - 7: next_channel_sequence - the sequence for the next generated channel identifier
 *   - 8: params -
 */
export type DecodedIbcCoreChannelGenesisState = [
    a_channels?: DecodedIbcCoreChannelIdentifiedChannel[],
    a_acknowledgements?: DecodedIbcCoreChannelPacketState[],
    a_commitments?: DecodedIbcCoreChannelPacketState[],
    a_receipts?: DecodedIbcCoreChannelPacketState[],
    a_send_sequences?: DecodedIbcCoreChannelPacketSequence[],
    a_recv_sequences?: DecodedIbcCoreChannelPacketSequence[],
    a_ack_sequences?: DecodedIbcCoreChannelPacketSequence[],
    sg_next_channel_sequence?: CwUint64,
    a_params?: DecodedIbcCoreChannelParams
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelGenesisState}
 */
export declare const decodeIbcCoreChannelGenesisState: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelGenesisState;
/**
 * A decoded protobuf PacketSequence message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: sequence -
 */
export type DecodedIbcCoreChannelPacketSequence = [
    si_port?: string,
    si_channel?: string,
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf PacketSequence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelPacketSequence}
 */
export declare const decodeIbcCoreChannelPacketSequence: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelPacketSequence;
/**
 * Destructures the fields of a {@link IbcCoreChannelGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channels -
 *   - 1: acknowledgements -
 *   - 2: commitments -
 *   - 3: receipts -
 *   - 4: send_sequences -
 *   - 5: recv_sequences -
 *   - 6: ack_sequences -
 *   - 7: next_channel_sequence - the sequence for the next generated channel identifier
 *   - 8: params -
 */
export declare const destructIbcCoreChannelGenesisState: (g_struct: IbcCoreChannelGenesisState) => [channels?: IbcCoreChannelIdentifiedChannel[], acknowledgements?: IbcCoreChannelPacketState[], commitments?: IbcCoreChannelPacketState[], receipts?: IbcCoreChannelPacketState[], send_sequences?: IbcCoreChannelPacketSequence[], recv_sequences?: IbcCoreChannelPacketSequence[], ack_sequences?: IbcCoreChannelPacketSequence[], next_channel_sequence?: CwUint64, params?: IbcCoreChannelParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_GENESIS_STATE = "/ibc.core.channel.v1.GenesisState";
/**
 * JSON serialization of `ibc.core.channel.v1.GenesisState` - defines the ibc channel submodule's genesis state.
 */
export type IbcCoreChannelGenesisState = {
    channels?: IbcCoreChannelIdentifiedChannel[] | undefined;
    acknowledgements?: IbcCoreChannelPacketState[] | undefined;
    commitments?: IbcCoreChannelPacketState[] | undefined;
    receipts?: IbcCoreChannelPacketState[] | undefined;
    send_sequences?: IbcCoreChannelPacketSequence[] | undefined;
    recv_sequences?: IbcCoreChannelPacketSequence[] | undefined;
    ack_sequences?: IbcCoreChannelPacketSequence[] | undefined;
    next_channel_sequence?: CwUint64 | undefined;
    params?: IbcCoreChannelParams | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelPacketSequence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: sequence -
 */
export declare const destructIbcCoreChannelPacketSequence: (g_struct: IbcCoreChannelPacketSequence) => [port_id?: string, channel_id?: string, sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_PACKET_SEQUENCE = "/ibc.core.channel.v1.PacketSequence";
/**
 * JSON serialization of `ibc.core.channel.v1.PacketSequence` - defines the genesis type necessary to retrieve and store next send and receive sequences.
 */
export type IbcCoreChannelPacketSequence = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    sequence?: CwUint64 | undefined;
};
