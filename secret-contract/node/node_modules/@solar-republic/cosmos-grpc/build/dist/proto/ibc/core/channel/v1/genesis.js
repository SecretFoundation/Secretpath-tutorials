import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { decodeIbcCoreChannelIdentifiedChannel, decodeIbcCoreChannelPacketState, decodeIbcCoreChannelParams } from './channel.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the ibc channel submodule's genesis state.
 * @param a_channels - `channels`:
 * @param a_acknowledgements - `acknowledgements`:
 * @param a_commitments - `commitments`:
 * @param a_receipts - `receipts`:
 * @param a_send_sequences - `send_sequences`:
 * @param a_recv_sequences - `recv_sequences`:
 * @param a_ack_sequences - `ack_sequences`:
 * @param sg_next_channel_sequence - `next_channel_sequence`: the sequence for the next generated channel identifier
 * @param g_params - `params`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelGenesisState = (a_channels, a_acknowledgements, a_commitments, a_receipts, a_send_sequences, a_recv_sequences, a_ack_sequences, sg_next_channel_sequence, atu8_params) => Protobuf() // ...
    .B(a_channels) // IdentifiedChannel[] channels = 1
    .B(a_acknowledgements) // PacketState[] acknowledgements = 2
    .B(a_commitments) // PacketState[] commitments = 3
    .B(a_receipts) // PacketState[] receipts = 4
    .B(a_send_sequences) // PacketSequence[] send_sequences = 5
    .B(a_recv_sequences) // PacketSequence[] recv_sequences = 6
    .B(a_ack_sequences) // PacketSequence[] ack_sequences = 7
    .g(sg_next_channel_sequence) // uint64 next_channel_sequence = 8
    .b(atu8_params) // Params params = 9
    .o;
/**
 * Encodes a `PacketSequence` protobuf message: defines the genesis type necessary to retrieve and store next send and receive sequences.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_sequence - `sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelPacketSequence = (si_port, si_channel, sg_sequence) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .g(sg_sequence) // uint64 sequence = 3
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelGenesisState}
 */
export const decodeIbcCoreChannelGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 0, 0, 0, 0, 0, 3, 1], [decodeIbcCoreChannelIdentifiedChannel, decodeIbcCoreChannelPacketState, decodeIbcCoreChannelPacketState, decodeIbcCoreChannelPacketState, decodeIbcCoreChannelPacketSequence, decodeIbcCoreChannelPacketSequence, decodeIbcCoreChannelPacketSequence, 0, decodeIbcCoreChannelParams]);
/**
 * Decodes a protobuf PacketSequence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelPacketSequence}
 */
export const decodeIbcCoreChannelPacketSequence = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Destructures the fields of a {@link IbcCoreChannelGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channels -
 *   - 1: acknowledgements -
 *   - 2: commitments -
 *   - 3: receipts -
 *   - 4: send_sequences -
 *   - 5: recv_sequences -
 *   - 6: ack_sequences -
 *   - 7: next_channel_sequence - the sequence for the next generated channel identifier
 *   - 8: params -
 */
export const destructIbcCoreChannelGenesisState = (g_struct) => [g_struct.channels, g_struct.acknowledgements, g_struct.commitments, g_struct.receipts, g_struct.send_sequences, g_struct.recv_sequences, g_struct.ack_sequences, g_struct.next_channel_sequence, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_GENESIS_STATE = '/ibc.core.channel.v1.GenesisState';
/**
 * Destructures the fields of a {@link IbcCoreChannelPacketSequence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: sequence -
 */
export const destructIbcCoreChannelPacketSequence = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_PACKET_SEQUENCE = '/ibc.core.channel.v1.PacketSequence';
//# sourceMappingURL=genesis.js.map