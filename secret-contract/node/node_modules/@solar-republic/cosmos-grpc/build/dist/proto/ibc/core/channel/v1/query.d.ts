/// <reference types="node" />
import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import type { IbcCoreChannelChannel, DecodedIbcCoreChannelChannel, IbcCoreChannelIdentifiedChannel, DecodedIbcCoreChannelIdentifiedChannel, IbcCoreChannelPacketState, DecodedIbcCoreChannelPacketState, IbcCoreChannelParams, DecodedIbcCoreChannelParams } from './channel.js';
import type { IbcCoreChannelErrorReceipt, DecodedIbcCoreChannelErrorReceipt, IbcCoreChannelUpgrade, DecodedIbcCoreChannelUpgrade } from './upgrade.js';
import type { IbcCoreClientHeight, DecodedIbcCoreClientHeight, IbcCoreClientIdentifiedClientState, DecodedIbcCoreClientIdentifiedClientState } from '../../client/v1/client.js';
export type EncodedIbcCoreChannelQueryChannelRequest = Encoded<'/ibc.core.channel.v1.QueryChannelRequest'>;
export type EncodedIbcCoreChannelQueryChannelResponse = Encoded<'/ibc.core.channel.v1.QueryChannelResponse'>;
export type EncodedIbcCoreChannelQueryChannelsRequest = Encoded<'/ibc.core.channel.v1.QueryChannelsRequest'>;
export type EncodedIbcCoreChannelQueryChannelsResponse = Encoded<'/ibc.core.channel.v1.QueryChannelsResponse'>;
export type EncodedIbcCoreChannelQueryConnectionChannelsRequest = Encoded<'/ibc.core.channel.v1.QueryConnectionChannelsRequest'>;
export type EncodedIbcCoreChannelQueryConnectionChannelsResponse = Encoded<'/ibc.core.channel.v1.QueryConnectionChannelsResponse'>;
export type EncodedIbcCoreChannelQueryChannelClientStateRequest = Encoded<'/ibc.core.channel.v1.QueryChannelClientStateRequest'>;
export type EncodedIbcCoreChannelQueryChannelClientStateResponse = Encoded<'/ibc.core.channel.v1.QueryChannelClientStateResponse'>;
export type EncodedIbcCoreChannelQueryChannelConsensusStateRequest = Encoded<'/ibc.core.channel.v1.QueryChannelConsensusStateRequest'>;
export type EncodedIbcCoreChannelQueryChannelConsensusStateResponse = Encoded<'/ibc.core.channel.v1.QueryChannelConsensusStateResponse'>;
export type EncodedIbcCoreChannelQueryPacketCommitmentRequest = Encoded<'/ibc.core.channel.v1.QueryPacketCommitmentRequest'>;
export type EncodedIbcCoreChannelQueryPacketCommitmentResponse = Encoded<'/ibc.core.channel.v1.QueryPacketCommitmentResponse'>;
export type EncodedIbcCoreChannelQueryPacketCommitmentsRequest = Encoded<'/ibc.core.channel.v1.QueryPacketCommitmentsRequest'>;
export type EncodedIbcCoreChannelQueryPacketCommitmentsResponse = Encoded<'/ibc.core.channel.v1.QueryPacketCommitmentsResponse'>;
export type EncodedIbcCoreChannelQueryPacketReceiptRequest = Encoded<'/ibc.core.channel.v1.QueryPacketReceiptRequest'>;
export type EncodedIbcCoreChannelQueryPacketReceiptResponse = Encoded<'/ibc.core.channel.v1.QueryPacketReceiptResponse'>;
export type EncodedIbcCoreChannelQueryPacketAcknowledgementRequest = Encoded<'/ibc.core.channel.v1.QueryPacketAcknowledgementRequest'>;
export type EncodedIbcCoreChannelQueryPacketAcknowledgementResponse = Encoded<'/ibc.core.channel.v1.QueryPacketAcknowledgementResponse'>;
export type EncodedIbcCoreChannelQueryPacketAcknowledgementsRequest = Encoded<'/ibc.core.channel.v1.QueryPacketAcknowledgementsRequest'>;
export type EncodedIbcCoreChannelQueryPacketAcknowledgementsResponse = Encoded<'/ibc.core.channel.v1.QueryPacketAcknowledgementsResponse'>;
export type EncodedIbcCoreChannelQueryUnreceivedPacketsRequest = Encoded<'/ibc.core.channel.v1.QueryUnreceivedPacketsRequest'>;
export type EncodedIbcCoreChannelQueryUnreceivedPacketsResponse = Encoded<'/ibc.core.channel.v1.QueryUnreceivedPacketsResponse'>;
export type EncodedIbcCoreChannelQueryUnreceivedAcksRequest = Encoded<'/ibc.core.channel.v1.QueryUnreceivedAcksRequest'>;
export type EncodedIbcCoreChannelQueryUnreceivedAcksResponse = Encoded<'/ibc.core.channel.v1.QueryUnreceivedAcksResponse'>;
export type EncodedIbcCoreChannelQueryNextSequenceReceiveRequest = Encoded<'/ibc.core.channel.v1.QueryNextSequenceReceiveRequest'>;
export type EncodedIbcCoreChannelQueryNextSequenceReceiveResponse = Encoded<'/ibc.core.channel.v1.QueryNextSequenceReceiveResponse'>;
export type EncodedIbcCoreChannelQueryNextSequenceSendRequest = Encoded<'/ibc.core.channel.v1.QueryNextSequenceSendRequest'>;
export type EncodedIbcCoreChannelQueryNextSequenceSendResponse = Encoded<'/ibc.core.channel.v1.QueryNextSequenceSendResponse'>;
export type EncodedIbcCoreChannelQueryUpgradeErrorRequest = Encoded<'/ibc.core.channel.v1.QueryUpgradeErrorRequest'>;
export type EncodedIbcCoreChannelQueryUpgradeErrorResponse = Encoded<'/ibc.core.channel.v1.QueryUpgradeErrorResponse'>;
export type EncodedIbcCoreChannelQueryUpgradeRequest = Encoded<'/ibc.core.channel.v1.QueryUpgradeRequest'>;
export type EncodedIbcCoreChannelQueryUpgradeResponse = Encoded<'/ibc.core.channel.v1.QueryUpgradeResponse'>;
export type EncodedIbcCoreChannelQueryChannelParamsRequest = Encoded<'/ibc.core.channel.v1.QueryChannelParamsRequest'>;
export type EncodedIbcCoreChannelQueryChannelParamsResponse = Encoded<'/ibc.core.channel.v1.QueryChannelParamsResponse'>;
/**
 * Queries an IBC Channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: channel - associated with the request identifiers
 *   - 1: proof - associated with the request identifiers
 *   - 2: proof_height - associated with the request identifiers
 */
export declare const queryIbcCoreChannelChannel: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryChannelResponse>>;
/**
 * Queries all the IBC channels of a chain.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - request
 * @returns a tuple where:
 *   - 0: channels - list of stored channels of the chain.
 *   - 1: pagination - list of stored channels of the chain.
 *   - 2: height - list of stored channels of the chain.
 */
export declare const queryIbcCoreChannelChannels: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryChannelsResponse>>;
/**
 * Queries all the channels associated with a connection end.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_connection - unique identifier
 * @param g_pagination - request
 * @returns a tuple where:
 *   - 0: channels - list of channels associated with a connection.
 *   - 1: pagination - list of channels associated with a connection.
 *   - 2: height - list of channels associated with a connection.
 */
export declare const queryIbcCoreChannelConnectionChannels: (z_req: string | ({
    origin: string;
} & RequestInit), s_connection?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryConnectionChannelsResponse>>;
/**
 * Queries for the client state for the channel associated with the provided channel identifiers.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - client state associated with the channel
 *   - 2: proof_height - client state associated with the channel
 */
export declare const queryIbcCoreChannelChannelClientState: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryChannelClientStateResponse>>;
/**
 * Queries for the consensus state for the channel associated with the provided channel identifiers.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_revision_number - revision number of the consensus state
 * @param sg_revision_height - revision height of the consensus state
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - consensus state associated with the channel
 *   - 2: proof - consensus state associated with the channel
 *   - 3: proof_height - consensus state associated with the channel
 */
export declare const queryIbcCoreChannelChannelConsensusState: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, sg_revision_number?: Opt<`${bigint}`>, sg_revision_height?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryChannelConsensusStateResponse>>;
/**
 * Queries a stored packet commitment hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_sequence - packet sequence
 * @returns a tuple where:
 *   - 0: commitment - packet associated with the request fields
 *   - 1: proof - packet associated with the request fields
 *   - 2: proof_height - packet associated with the request fields
 */
export declare const queryIbcCoreChannelPacketCommitment: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryPacketCommitmentResponse>>;
/**
 * Returns all the packet commitments hashes associated with a channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param g_pagination - request
 * @returns a tuple where:
 *   - 0: commitments - the 'commitments' response property
 *   - 1: pagination - the 'commitments' response property
 *   - 2: height - the 'commitments' response property
 */
export declare const queryIbcCoreChannelPacketCommitments: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryPacketCommitmentsResponse>>;
/**
 * Queries if a given packet sequence has been received on the queried chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_sequence - packet sequence
 * @returns a tuple where:
 *   - 0: received - success flag for if receipt exists
 *   - 1: proof - success flag for if receipt exists
 *   - 2: proof_height - success flag for if receipt exists
 */
export declare const queryIbcCoreChannelPacketReceipt: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryPacketReceiptResponse>>;
/**
 * Queries a stored packet acknowledgement hash.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param sg_sequence - packet sequence
 * @returns a tuple where:
 *   - 0: acknowledgement - packet associated with the request fields
 *   - 1: proof - packet associated with the request fields
 *   - 2: proof_height - packet associated with the request fields
 */
export declare const queryIbcCoreChannelPacketAcknowledgement: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryPacketAcknowledgementResponse>>;
/**
 * Returns all the packet acknowledgements associated with a channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param g_pagination - request
 * @param a_packet_commitment_sequences - list of packet sequences
 * @returns a tuple where:
 *   - 0: acknowledgements - the 'acknowledgements' response property
 *   - 1: pagination - the 'acknowledgements' response property
 *   - 2: height - the 'acknowledgements' response property
 */
export declare const queryIbcCoreChannelPacketAcknowledgements: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>, a_packet_commitment_sequences?: Opt<`${bigint}`[]>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryPacketAcknowledgementsResponse>>;
/**
 * Returns all the unreceived IBC packets associated with a channel and sequences.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param a_packet_commitment_sequences - list of packet sequences
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived packet sequences
 *   - 1: height - list of unreceived packet sequences
 */
export declare const queryIbcCoreChannelUnreceivedPackets: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, a_packet_commitment_sequences?: Opt<`${bigint}`[]>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryUnreceivedPacketsResponse>>;
/**
 * Returns all the unreceived IBC acknowledgements associated with a channel and sequences.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @param a_packet_ack_sequences - list of acknowledgement sequences
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived acknowledgement sequences
 *   - 1: height - list of unreceived acknowledgement sequences
 */
export declare const queryIbcCoreChannelUnreceivedAcks: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>, a_packet_ack_sequences?: Opt<`${bigint}`[]>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryUnreceivedAcksResponse>>;
/**
 * Returns the next receive sequence for a given channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: next_sequence_receive - next sequence receive number
 *   - 1: proof - next sequence receive number
 *   - 2: proof_height - next sequence receive number
 */
export declare const queryIbcCoreChannelNextSequenceReceive: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryNextSequenceReceiveResponse>>;
/**
 * Returns the next send sequence for a given channel.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port - port unique identifier
 * @param si_channel - channel unique identifier
 * @returns a tuple where:
 *   - 0: next_sequence_send - next sequence send number
 *   - 1: proof - next sequence send number
 *   - 2: proof_height - next sequence send number
 */
export declare const queryIbcCoreChannelNextSequenceSend: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryNextSequenceSendResponse>>;
/**
 * Returns the error receipt if the upgrade handshake failed.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port -
 * @param si_channel -
 * @returns a tuple where:
 *   - 0: error_receipt - the 'error_receipt' response property
 *   - 1: proof - the 'error_receipt' response property
 *   - 2: proof_height - the 'error_receipt' response property
 */
export declare const queryIbcCoreChannelUpgradeError: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryUpgradeErrorResponse>>;
/**
 * Returns the upgrade for a given port and channel id.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_port -
 * @param si_channel -
 * @returns a tuple where:
 *   - 0: upgrade - the 'upgrade' response property
 *   - 1: proof - the 'upgrade' response property
 *   - 2: proof_height - the 'upgrade' response property
 */
export declare const queryIbcCoreChannelUpgrade: (z_req: string | ({
    origin: string;
} & RequestInit), si_port?: Opt<string>, si_channel?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryUpgradeResponse>>;
/**
 * Queries all parameters of the ibc channel submodule.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const queryIbcCoreChannelChannelParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreChannelQueryChannelParamsResponse>>;
/**
 * Encodes a `QueryChannelRequest` protobuf message: the request type for the Query/Channel RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelQueryChannelRequest;
/**
 * Encodes a `QueryChannelResponse` protobuf message: the response type for the Query/Channel RPC method. Besides the Channel end, it includes a proof and the height from which the proof was retrieved.
 * @param g_channel - `channel`: associated with the request identifiers
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelResponse: (atu8_channel?: Opt<Encoded<'/ibc.core.channel.v1.Channel'>>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryChannelResponse;
/**
 * Encodes a `QueryChannelsRequest` protobuf message: the request type for the Query/Channels RPC method
 * @param g_pagination - `pagination`: request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelsRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedIbcCoreChannelQueryChannelsRequest;
/**
 * Encodes a `QueryChannelsResponse` protobuf message: the response type for the Query/Channels RPC method.
 * @param a_channels - `channels`: list of stored channels of the chain.
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelsResponse: (a_channels?: Opt<Encoded<'/ibc.core.channel.v1.IdentifiedChannel'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryChannelsResponse;
/**
 * Encodes a `QueryConnectionChannelsRequest` protobuf message: the request type for the Query/QueryConnectionChannels RPC method
 * @param s_connection - `connection`: unique identifier
 * @param g_pagination - `pagination`: request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryConnectionChannelsRequest: (s_connection?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedIbcCoreChannelQueryConnectionChannelsRequest;
/**
 * Encodes a `QueryConnectionChannelsResponse` protobuf message: the Response type for the Query/QueryConnectionChannels RPC method
 * @param a_channels - `channels`: list of channels associated with a connection.
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryConnectionChannelsResponse: (a_channels?: Opt<Encoded<'/ibc.core.channel.v1.IdentifiedChannel'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryConnectionChannelsResponse;
/**
 * Encodes a `QueryChannelClientStateRequest` protobuf message: the request type for the Query/ClientState RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelClientStateRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelQueryChannelClientStateRequest;
/**
 * Encodes a `QueryChannelClientStateResponse` protobuf message: the Response type for the Query/QueryChannelClientState RPC method
 * @param g_identified_client_state - `identified_client_state`: client state associated with the channel
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelClientStateResponse: (atu8_identified_client_state?: Opt<Encoded<'/ibc.core.client.v1.IdentifiedClientState'>>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryChannelClientStateResponse;
/**
 * Encodes a `QueryChannelConsensusStateRequest` protobuf message: the request type for the Query/ConsensusState RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_revision_number - `revision_number`: revision number of the consensus state
 * @param sg_revision_height - `revision_height`: revision height of the consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelConsensusStateRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, sg_revision_number?: Opt<WeakUint64Str>, sg_revision_height?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelQueryChannelConsensusStateRequest;
/**
 * Encodes a `QueryChannelConsensusStateResponse` protobuf message: QueryChannelClientStateResponse is the Response type for the Query/QueryChannelClientState RPC method
 * @param atu8_consensus_state - `consensus_state`: consensus state associated with the channel
 * @param si_client - `client_id`: client ID associated with the consensus state
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelConsensusStateResponse: (atu8_consensus_state?: Opt<Uint8Array>, si_client?: Opt<string>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryChannelConsensusStateResponse;
/**
 * Encodes a `QueryPacketCommitmentRequest` protobuf message: the request type for the Query/PacketCommitment RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_sequence - `sequence`: packet sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketCommitmentRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelQueryPacketCommitmentRequest;
/**
 * Encodes a `QueryPacketCommitmentResponse` protobuf message: defines the client query response for a packet which also includes a proof and the height from which the proof was retrieved
 * @param atu8_commitment - `commitment`: packet associated with the request fields
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketCommitmentResponse: (atu8_commitment?: Opt<Uint8Array>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryPacketCommitmentResponse;
/**
 * Encodes a `QueryPacketCommitmentsRequest` protobuf message: the request type for the Query/QueryPacketCommitments RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param g_pagination - `pagination`: request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketCommitmentsRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedIbcCoreChannelQueryPacketCommitmentsRequest;
/**
 * Encodes a `QueryPacketCommitmentsResponse` protobuf message: the request type for the Query/QueryPacketCommitments RPC method
 * @param a_commitments - `commitments`:
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketCommitmentsResponse: (a_commitments?: Opt<Encoded<'/ibc.core.channel.v1.PacketState'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryPacketCommitmentsResponse;
/**
 * Encodes a `QueryPacketReceiptRequest` protobuf message: the request type for the Query/PacketReceipt RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_sequence - `sequence`: packet sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketReceiptRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelQueryPacketReceiptRequest;
/**
 * Encodes a `QueryPacketReceiptResponse` protobuf message: defines the client query response for a packet receipt which also includes a proof, and the height from which the proof was retrieved
 * @param b_received - `received`: success flag for if receipt exists
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketReceiptResponse: (b_received?: Opt<boolean | 0 | 1>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryPacketReceiptResponse;
/**
 * Encodes a `QueryPacketAcknowledgementRequest` protobuf message: the request type for the Query/PacketAcknowledgement RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param sg_sequence - `sequence`: packet sequence
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketAcknowledgementRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, sg_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelQueryPacketAcknowledgementRequest;
/**
 * Encodes a `QueryPacketAcknowledgementResponse` protobuf message: defines the client query response for a packet which also includes a proof and the height from which the proof was retrieved
 * @param atu8_acknowledgement - `acknowledgement`: packet associated with the request fields
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketAcknowledgementResponse: (atu8_acknowledgement?: Opt<Uint8Array>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryPacketAcknowledgementResponse;
/**
 * Encodes a `QueryPacketAcknowledgementsRequest` protobuf message: the request type for the Query/QueryPacketCommitments RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param g_pagination - `pagination`: request
 * @param a_packet_commitment_sequences - `packet_commitment_sequences`: list of packet sequences
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketAcknowledgementsRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>, a_packet_commitment_sequences?: Opt<WeakUint64Str[]>) => EncodedIbcCoreChannelQueryPacketAcknowledgementsRequest;
/**
 * Encodes a `QueryPacketAcknowledgementsResponse` protobuf message: QueryPacketAcknowledgemetsResponse is the request type for the Query/QueryPacketAcknowledgements RPC method
 * @param a_acknowledgements - `acknowledgements`:
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryPacketAcknowledgementsResponse: (a_acknowledgements?: Opt<Encoded<'/ibc.core.channel.v1.PacketState'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryPacketAcknowledgementsResponse;
/**
 * Encodes a `QueryUnreceivedPacketsRequest` protobuf message: the request type for the Query/UnreceivedPackets RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param a_packet_commitment_sequences - `packet_commitment_sequences`: list of packet sequences
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUnreceivedPacketsRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, a_packet_commitment_sequences?: Opt<WeakUint64Str[]>) => EncodedIbcCoreChannelQueryUnreceivedPacketsRequest;
/**
 * Encodes a `QueryUnreceivedPacketsResponse` protobuf message: the response type for the Query/UnreceivedPacketCommitments RPC method
 * @param a_sequences - `sequences`: list of unreceived packet sequences
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUnreceivedPacketsResponse: (a_sequences?: Opt<WeakUint64Str[]>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryUnreceivedPacketsResponse;
/**
 * Encodes a `QueryUnreceivedAcksRequest` protobuf message: QueryUnreceivedAcks is the request type for the Query/UnreceivedAcks RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @param a_packet_ack_sequences - `packet_ack_sequences`: list of acknowledgement sequences
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUnreceivedAcksRequest: (si_port?: Opt<string>, si_channel?: Opt<string>, a_packet_ack_sequences?: Opt<WeakUint64Str[]>) => EncodedIbcCoreChannelQueryUnreceivedAcksRequest;
/**
 * Encodes a `QueryUnreceivedAcksResponse` protobuf message: the response type for the Query/UnreceivedAcks RPC method
 * @param a_sequences - `sequences`: list of unreceived acknowledgement sequences
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUnreceivedAcksResponse: (a_sequences?: Opt<WeakUint64Str[]>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryUnreceivedAcksResponse;
/**
 * Encodes a `QueryNextSequenceReceiveRequest` protobuf message: the request type for the Query/QueryNextSequenceReceiveRequest RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryNextSequenceReceiveRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelQueryNextSequenceReceiveRequest;
/**
 * Encodes a `QueryNextSequenceReceiveResponse` protobuf message: QuerySequenceResponse is the response type for the Query/QueryNextSequenceReceiveResponse RPC method
 * @param sg_next_sequence_receive - `next_sequence_receive`: next sequence receive number
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryNextSequenceReceiveResponse: (sg_next_sequence_receive?: Opt<WeakUint64Str>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryNextSequenceReceiveResponse;
/**
 * Encodes a `QueryNextSequenceSendRequest` protobuf message: the request type for the Query/QueryNextSequenceSend RPC method
 * @param si_port - `port_id`: port unique identifier
 * @param si_channel - `channel_id`: channel unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryNextSequenceSendRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelQueryNextSequenceSendRequest;
/**
 * Encodes a `QueryNextSequenceSendResponse` protobuf message: the request type for the Query/QueryNextSequenceSend RPC method
 * @param sg_next_sequence_send - `next_sequence_send`: next sequence send number
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryNextSequenceSendResponse: (sg_next_sequence_send?: Opt<WeakUint64Str>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryNextSequenceSendResponse;
/**
 * Encodes a `QueryUpgradeErrorRequest` protobuf message: the request type for the Query/QueryUpgradeError RPC method
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUpgradeErrorRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelQueryUpgradeErrorRequest;
/**
 * Encodes a `QueryUpgradeErrorResponse` protobuf message: the response type for the Query/QueryUpgradeError RPC method
 * @param g_error_receipt - `error_receipt`:
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUpgradeErrorResponse: (atu8_error_receipt?: Opt<Encoded<'/ibc.core.channel.v1.ErrorReceipt'>>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryUpgradeErrorResponse;
/**
 * Encodes a `QueryUpgradeRequest` protobuf message: the request type for the QueryUpgradeRequest RPC method
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUpgradeRequest: (si_port?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelQueryUpgradeRequest;
/**
 * Encodes a `QueryUpgradeResponse` protobuf message: the response type for the QueryUpgradeResponse RPC method
 * @param g_upgrade - `upgrade`:
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryUpgradeResponse: (atu8_upgrade?: Opt<Encoded<'/ibc.core.channel.v1.Upgrade'>>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreChannelQueryUpgradeResponse;
/**
 * Encodes a `QueryChannelParamsRequest` protobuf message: the request type for the Query/ChannelParams RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelParamsRequest: () => EncodedIbcCoreChannelQueryChannelParamsRequest;
/**
 * Encodes a `QueryChannelParamsResponse` protobuf message: the response type for the Query/ChannelParams RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelQueryChannelParamsResponse: (atu8_params?: Opt<Encoded<'/ibc.core.channel.v1.Params'>>) => EncodedIbcCoreChannelQueryChannelParamsResponse;
/**
 * A decoded protobuf QueryChannelRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export type DecodedIbcCoreChannelQueryChannelRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryChannelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelRequest}
 */
export declare const decodeIbcCoreChannelQueryChannelRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelRequest;
/**
 * A decoded protobuf QueryChannel message
 *
 * Tuple where:
 *   - 0: channel - associated with the request identifiers
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryChannelResponse = [
    a_channel?: DecodedIbcCoreChannelChannel,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryChannel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelResponse}
 */
export declare const decodeIbcCoreChannelQueryChannelResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelResponse;
/**
 * A decoded protobuf QueryChannelsRequest message
 *
 * Alias for: pagination - request
 */
export type DecodedIbcCoreChannelQueryChannelsRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryChannelsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelsRequest}
 */
export declare const decodeIbcCoreChannelQueryChannelsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelsRequest;
/**
 * A decoded protobuf QueryChannels message
 *
 * Tuple where:
 *   - 0: channels - list of stored channels of the chain.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export type DecodedIbcCoreChannelQueryChannelsResponse = [
    a_channels?: DecodedIbcCoreChannelIdentifiedChannel[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse,
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryChannels message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelsResponse}
 */
export declare const decodeIbcCoreChannelQueryChannelsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelsResponse;
/**
 * A decoded protobuf QueryConnectionChannelsRequest message
 *
 * Tuple where:
 *   - 0: connection - unique identifier
 *   - 1: pagination - request
 */
export type DecodedIbcCoreChannelQueryConnectionChannelsRequest = [
    s_connection?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryConnectionChannelsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryConnectionChannelsRequest}
 */
export declare const decodeIbcCoreChannelQueryConnectionChannelsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryConnectionChannelsRequest;
/**
 * A decoded protobuf QueryConnectionChannels message
 *
 * Tuple where:
 *   - 0: channels - list of channels associated with a connection.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export type DecodedIbcCoreChannelQueryConnectionChannelsResponse = [
    a_channels?: DecodedIbcCoreChannelIdentifiedChannel[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse,
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryConnectionChannels message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryConnectionChannelsResponse}
 */
export declare const decodeIbcCoreChannelQueryConnectionChannelsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryConnectionChannelsResponse;
/**
 * A decoded protobuf QueryChannelClientStateRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export type DecodedIbcCoreChannelQueryChannelClientStateRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryChannelClientStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelClientStateRequest}
 */
export declare const decodeIbcCoreChannelQueryChannelClientStateRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelClientStateRequest;
/**
 * A decoded protobuf QueryChannelClientState message
 *
 * Tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryChannelClientStateResponse = [
    a_identified_client_state?: DecodedIbcCoreClientIdentifiedClientState,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryChannelClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelClientStateResponse}
 */
export declare const decodeIbcCoreChannelQueryChannelClientStateResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelClientStateResponse;
/**
 * A decoded protobuf QueryChannelConsensusStateRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: revision_number - revision number of the consensus state
 *   - 3: revision_height - revision height of the consensus state
 */
export type DecodedIbcCoreChannelQueryChannelConsensusStateRequest = [
    si_port?: string,
    si_channel?: string,
    sg_revision_number?: CwUint64,
    sg_revision_height?: CwUint64
];
/**
 * Decodes a protobuf QueryChannelConsensusStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelConsensusStateRequest}
 */
export declare const decodeIbcCoreChannelQueryChannelConsensusStateRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelConsensusStateRequest;
/**
 * A decoded protobuf QueryChannelConsensusState message
 *
 * Tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - client ID associated with the consensus state
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryChannelConsensusStateResponse = [
    a_consensus_state?: DecodedGoogleProtobufAny,
    si_client?: string,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryChannelConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelConsensusStateResponse}
 */
export declare const decodeIbcCoreChannelQueryChannelConsensusStateResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelConsensusStateResponse;
/**
 * A decoded protobuf QueryPacketCommitmentRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export type DecodedIbcCoreChannelQueryPacketCommitmentRequest = [
    si_port?: string,
    si_channel?: string,
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf QueryPacketCommitmentRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentRequest}
 */
export declare const decodeIbcCoreChannelQueryPacketCommitmentRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketCommitmentRequest;
/**
 * A decoded protobuf QueryPacketCommitment message
 *
 * Tuple where:
 *   - 0: commitment - packet associated with the request fields
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryPacketCommitmentResponse = [
    atu8_commitment?: Uint8Array,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryPacketCommitment message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentResponse}
 */
export declare const decodeIbcCoreChannelQueryPacketCommitmentResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketCommitmentResponse;
/**
 * A decoded protobuf QueryPacketCommitmentsRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: pagination - request
 */
export type DecodedIbcCoreChannelQueryPacketCommitmentsRequest = [
    si_port?: string,
    si_channel?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryPacketCommitmentsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentsRequest}
 */
export declare const decodeIbcCoreChannelQueryPacketCommitmentsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketCommitmentsRequest;
/**
 * A decoded protobuf QueryPacketCommitments message
 *
 * Tuple where:
 *   - 0: commitments -
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export type DecodedIbcCoreChannelQueryPacketCommitmentsResponse = [
    a_commitments?: DecodedIbcCoreChannelPacketState[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse,
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryPacketCommitments message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketCommitmentsResponse}
 */
export declare const decodeIbcCoreChannelQueryPacketCommitmentsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketCommitmentsResponse;
/**
 * A decoded protobuf QueryPacketReceiptRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export type DecodedIbcCoreChannelQueryPacketReceiptRequest = [
    si_port?: string,
    si_channel?: string,
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf QueryPacketReceiptRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketReceiptRequest}
 */
export declare const decodeIbcCoreChannelQueryPacketReceiptRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketReceiptRequest;
/**
 * A decoded protobuf QueryPacketReceipt message
 *
 * Tuple where:
 *   - 1: received - success flag for if receipt exists
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryPacketReceiptResponse = [
    w_0?: undefined,
    b_received?: 0 | 1,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryPacketReceipt message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedIbcCoreChannelQueryPacketReceiptResponse}
 */
export declare const decodeIbcCoreChannelQueryPacketReceiptResponse: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedIbcCoreChannelQueryPacketReceiptResponse;
/**
 * A decoded protobuf QueryPacketAcknowledgementRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export type DecodedIbcCoreChannelQueryPacketAcknowledgementRequest = [
    si_port?: string,
    si_channel?: string,
    sg_sequence?: CwUint64
];
/**
 * Decodes a protobuf QueryPacketAcknowledgementRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementRequest}
 */
export declare const decodeIbcCoreChannelQueryPacketAcknowledgementRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketAcknowledgementRequest;
/**
 * A decoded protobuf QueryPacketAcknowledgement message
 *
 * Tuple where:
 *   - 0: acknowledgement - packet associated with the request fields
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryPacketAcknowledgementResponse = [
    atu8_acknowledgement?: Uint8Array,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryPacketAcknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementResponse}
 */
export declare const decodeIbcCoreChannelQueryPacketAcknowledgementResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketAcknowledgementResponse;
/**
 * A decoded protobuf QueryPacketAcknowledgementsRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: pagination - request
 *   - 3: packet_commitment_sequences - list of packet sequences
 */
export type DecodedIbcCoreChannelQueryPacketAcknowledgementsRequest = [
    si_port?: string,
    si_channel?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest,
    a_packet_commitment_sequences?: CwUint64[]
];
/**
 * Decodes a protobuf QueryPacketAcknowledgementsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementsRequest}
 */
export declare const decodeIbcCoreChannelQueryPacketAcknowledgementsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketAcknowledgementsRequest;
/**
 * A decoded protobuf QueryPacketAcknowledgements message
 *
 * Tuple where:
 *   - 0: acknowledgements -
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export type DecodedIbcCoreChannelQueryPacketAcknowledgementsResponse = [
    a_acknowledgements?: DecodedIbcCoreChannelPacketState[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse,
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryPacketAcknowledgements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryPacketAcknowledgementsResponse}
 */
export declare const decodeIbcCoreChannelQueryPacketAcknowledgementsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryPacketAcknowledgementsResponse;
/**
 * A decoded protobuf QueryUnreceivedPacketsRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: packet_commitment_sequences - list of packet sequences
 */
export type DecodedIbcCoreChannelQueryUnreceivedPacketsRequest = [
    si_port?: string,
    si_channel?: string,
    a_packet_commitment_sequences?: CwUint64[]
];
/**
 * Decodes a protobuf QueryUnreceivedPacketsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedPacketsRequest}
 */
export declare const decodeIbcCoreChannelQueryUnreceivedPacketsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUnreceivedPacketsRequest;
/**
 * A decoded protobuf QueryUnreceivedPackets message
 *
 * Tuple where:
 *   - 0: sequences - list of unreceived packet sequences
 *   - 1: height - query block height
 */
export type DecodedIbcCoreChannelQueryUnreceivedPacketsResponse = [
    a_sequences?: CwUint64[],
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryUnreceivedPackets message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedPacketsResponse}
 */
export declare const decodeIbcCoreChannelQueryUnreceivedPacketsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUnreceivedPacketsResponse;
/**
 * A decoded protobuf QueryUnreceivedAcksRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: packet_ack_sequences - list of acknowledgement sequences
 */
export type DecodedIbcCoreChannelQueryUnreceivedAcksRequest = [
    si_port?: string,
    si_channel?: string,
    a_packet_ack_sequences?: CwUint64[]
];
/**
 * Decodes a protobuf QueryUnreceivedAcksRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedAcksRequest}
 */
export declare const decodeIbcCoreChannelQueryUnreceivedAcksRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUnreceivedAcksRequest;
/**
 * A decoded protobuf QueryUnreceivedAcks message
 *
 * Tuple where:
 *   - 0: sequences - list of unreceived acknowledgement sequences
 *   - 1: height - query block height
 */
export type DecodedIbcCoreChannelQueryUnreceivedAcksResponse = [
    a_sequences?: CwUint64[],
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryUnreceivedAcks message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUnreceivedAcksResponse}
 */
export declare const decodeIbcCoreChannelQueryUnreceivedAcksResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUnreceivedAcksResponse;
/**
 * A decoded protobuf QueryNextSequenceReceiveRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export type DecodedIbcCoreChannelQueryNextSequenceReceiveRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryNextSequenceReceiveRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceReceiveRequest}
 */
export declare const decodeIbcCoreChannelQueryNextSequenceReceiveRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryNextSequenceReceiveRequest;
/**
 * A decoded protobuf QueryNextSequenceReceive message
 *
 * Tuple where:
 *   - 0: next_sequence_receive - next sequence receive number
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryNextSequenceReceiveResponse = [
    sg_next_sequence_receive?: CwUint64,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryNextSequenceReceive message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceReceiveResponse}
 */
export declare const decodeIbcCoreChannelQueryNextSequenceReceiveResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryNextSequenceReceiveResponse;
/**
 * A decoded protobuf QueryNextSequenceSendRequest message
 *
 * Tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export type DecodedIbcCoreChannelQueryNextSequenceSendRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryNextSequenceSendRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceSendRequest}
 */
export declare const decodeIbcCoreChannelQueryNextSequenceSendRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryNextSequenceSendRequest;
/**
 * A decoded protobuf QueryNextSequenceSend message
 *
 * Tuple where:
 *   - 0: next_sequence_send - next sequence send number
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryNextSequenceSendResponse = [
    sg_next_sequence_send?: CwUint64,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryNextSequenceSend message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryNextSequenceSendResponse}
 */
export declare const decodeIbcCoreChannelQueryNextSequenceSendResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryNextSequenceSendResponse;
/**
 * A decoded protobuf QueryUpgradeErrorRequest message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 */
export type DecodedIbcCoreChannelQueryUpgradeErrorRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryUpgradeErrorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeErrorRequest}
 */
export declare const decodeIbcCoreChannelQueryUpgradeErrorRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUpgradeErrorRequest;
/**
 * A decoded protobuf QueryUpgradeError message
 *
 * Tuple where:
 *   - 0: error_receipt -
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryUpgradeErrorResponse = [
    a_error_receipt?: DecodedIbcCoreChannelErrorReceipt,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryUpgradeError message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeErrorResponse}
 */
export declare const decodeIbcCoreChannelQueryUpgradeErrorResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUpgradeErrorResponse;
/**
 * A decoded protobuf QueryUpgradeRequest message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 */
export type DecodedIbcCoreChannelQueryUpgradeRequest = [
    si_port?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf QueryUpgradeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeRequest}
 */
export declare const decodeIbcCoreChannelQueryUpgradeRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUpgradeRequest;
/**
 * A decoded protobuf QueryUpgrade message
 *
 * Tuple where:
 *   - 0: upgrade -
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreChannelQueryUpgradeResponse = [
    a_upgrade?: DecodedIbcCoreChannelUpgrade,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryUpgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryUpgradeResponse}
 */
export declare const decodeIbcCoreChannelQueryUpgradeResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryUpgradeResponse;
/**
 * A decoded protobuf QueryChannelParamsRequest message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelQueryChannelParamsRequest = [];
/**
 * Decodes a protobuf QueryChannelParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelParamsRequest}
 */
export declare const decodeIbcCoreChannelQueryChannelParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryChannelParams message
 *
 * Alias for: params - defines the parameters of the module.
 */
export type DecodedIbcCoreChannelQueryChannelParamsResponse = [
    a_params?: DecodedIbcCoreChannelParams
];
/**
 * Decodes a protobuf QueryChannelParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelQueryChannelParamsResponse}
 */
export declare const decodeIbcCoreChannelQueryChannelParamsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelQueryChannelParamsResponse;
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export declare const destructIbcCoreChannelQueryChannelRequest: (g_struct: IbcCoreChannelQueryChannelRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_REQUEST = "/ibc.core.channel.v1.QueryChannelRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelRequest` - the request type for the Query/Channel RPC method
 */
export type IbcCoreChannelQueryChannelRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel - associated with the request identifiers
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryChannelResponse: (g_struct: IbcCoreChannelQueryChannelResponse) => [channel?: IbcCoreChannelChannel, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_RESPONSE = "/ibc.core.channel.v1.QueryChannelResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelResponse` - the response type for the Query/Channel RPC method. Besides the Channel end, it includes a proof and the height from which the proof was retrieved.
 */
export type IbcCoreChannelQueryChannelResponse = {
    channel?: IbcCoreChannelChannel | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - request
 */
export declare const destructIbcCoreChannelQueryChannelsRequest: (g_struct: IbcCoreChannelQueryChannelsRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNELS_REQUEST = "/ibc.core.channel.v1.QueryChannelsRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelsRequest` - the request type for the Query/Channels RPC method
 */
export type IbcCoreChannelQueryChannelsRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channels - list of stored channels of the chain.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export declare const destructIbcCoreChannelQueryChannelsResponse: (g_struct: IbcCoreChannelQueryChannelsResponse) => [channels?: IbcCoreChannelIdentifiedChannel[], pagination?: CosmosBaseQueryPageResponse, height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNELS_RESPONSE = "/ibc.core.channel.v1.QueryChannelsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelsResponse` - the response type for the Query/Channels RPC method.
 */
export type IbcCoreChannelQueryChannelsResponse = {
    channels?: IbcCoreChannelIdentifiedChannel[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryConnectionChannelsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection - unique identifier
 *   - 1: pagination - request
 */
export declare const destructIbcCoreChannelQueryConnectionChannelsRequest: (g_struct: IbcCoreChannelQueryConnectionChannelsRequest) => [connection?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CONNECTION_CHANNELS_REQUEST = "/ibc.core.channel.v1.QueryConnectionChannelsRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryConnectionChannelsRequest` - the request type for the Query/QueryConnectionChannels RPC method
 */
export type IbcCoreChannelQueryConnectionChannelsRequest = {
    connection?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryConnectionChannelsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channels - list of channels associated with a connection.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export declare const destructIbcCoreChannelQueryConnectionChannelsResponse: (g_struct: IbcCoreChannelQueryConnectionChannelsResponse) => [channels?: IbcCoreChannelIdentifiedChannel[], pagination?: CosmosBaseQueryPageResponse, height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CONNECTION_CHANNELS_RESPONSE = "/ibc.core.channel.v1.QueryConnectionChannelsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryConnectionChannelsResponse` - the Response type for the Query/QueryConnectionChannels RPC method
 */
export type IbcCoreChannelQueryConnectionChannelsResponse = {
    channels?: IbcCoreChannelIdentifiedChannel[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelClientStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export declare const destructIbcCoreChannelQueryChannelClientStateRequest: (g_struct: IbcCoreChannelQueryChannelClientStateRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CLIENT_STATE_REQUEST = "/ibc.core.channel.v1.QueryChannelClientStateRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelClientStateRequest` - the request type for the Query/ClientState RPC method
 */
export type IbcCoreChannelQueryChannelClientStateRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelClientStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryChannelClientStateResponse: (g_struct: IbcCoreChannelQueryChannelClientStateResponse) => [identified_client_state?: IbcCoreClientIdentifiedClientState, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CLIENT_STATE_RESPONSE = "/ibc.core.channel.v1.QueryChannelClientStateResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelClientStateResponse` - the Response type for the Query/QueryChannelClientState RPC method
 */
export type IbcCoreChannelQueryChannelClientStateResponse = {
    identified_client_state?: IbcCoreClientIdentifiedClientState | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelConsensusStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: revision_number - revision number of the consensus state
 *   - 3: revision_height - revision height of the consensus state
 */
export declare const destructIbcCoreChannelQueryChannelConsensusStateRequest: (g_struct: IbcCoreChannelQueryChannelConsensusStateRequest) => [port_id?: string, channel_id?: string, revision_number?: CwUint64, revision_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CONSENSUS_STATE_REQUEST = "/ibc.core.channel.v1.QueryChannelConsensusStateRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelConsensusStateRequest` - the request type for the Query/ConsensusState RPC method
 */
export type IbcCoreChannelQueryChannelConsensusStateRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    revision_number?: CwUint64 | undefined;
    revision_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelConsensusStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - client ID associated with the consensus state
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryChannelConsensusStateResponse: (g_struct: IbcCoreChannelQueryChannelConsensusStateResponse) => [consensus_state?: JsonAny, client_id?: string, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_CONSENSUS_STATE_RESPONSE = "/ibc.core.channel.v1.QueryChannelConsensusStateResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelConsensusStateResponse` - QueryChannelClientStateResponse is the Response type for the Query/QueryChannelClientState RPC method
 */
export type IbcCoreChannelQueryChannelConsensusStateResponse = {
    consensus_state?: JsonAny | undefined;
    client_id?: string | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export declare const destructIbcCoreChannelQueryPacketCommitmentRequest: (g_struct: IbcCoreChannelQueryPacketCommitmentRequest) => [port_id?: string, channel_id?: string, sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENT_REQUEST = "/ibc.core.channel.v1.QueryPacketCommitmentRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketCommitmentRequest` - the request type for the Query/PacketCommitment RPC method
 */
export type IbcCoreChannelQueryPacketCommitmentRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commitment - packet associated with the request fields
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryPacketCommitmentResponse: (g_struct: IbcCoreChannelQueryPacketCommitmentResponse) => [commitment?: Uint8Array, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENT_RESPONSE = "/ibc.core.channel.v1.QueryPacketCommitmentResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketCommitmentResponse` - defines the client query response for a packet which also includes a proof and the height from which the proof was retrieved
 */
export type IbcCoreChannelQueryPacketCommitmentResponse = {
    commitment?: CwBase64 | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: pagination - request
 */
export declare const destructIbcCoreChannelQueryPacketCommitmentsRequest: (g_struct: IbcCoreChannelQueryPacketCommitmentsRequest) => [port_id?: string, channel_id?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENTS_REQUEST = "/ibc.core.channel.v1.QueryPacketCommitmentsRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketCommitmentsRequest` - the request type for the Query/QueryPacketCommitments RPC method
 */
export type IbcCoreChannelQueryPacketCommitmentsRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketCommitmentsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: commitments -
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export declare const destructIbcCoreChannelQueryPacketCommitmentsResponse: (g_struct: IbcCoreChannelQueryPacketCommitmentsResponse) => [commitments?: IbcCoreChannelPacketState[], pagination?: CosmosBaseQueryPageResponse, height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_COMMITMENTS_RESPONSE = "/ibc.core.channel.v1.QueryPacketCommitmentsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketCommitmentsResponse` - the request type for the Query/QueryPacketCommitments RPC method
 */
export type IbcCoreChannelQueryPacketCommitmentsResponse = {
    commitments?: IbcCoreChannelPacketState[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketReceiptRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export declare const destructIbcCoreChannelQueryPacketReceiptRequest: (g_struct: IbcCoreChannelQueryPacketReceiptRequest) => [port_id?: string, channel_id?: string, sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_RECEIPT_REQUEST = "/ibc.core.channel.v1.QueryPacketReceiptRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketReceiptRequest` - the request type for the Query/PacketReceipt RPC method
 */
export type IbcCoreChannelQueryPacketReceiptRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketReceiptResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: received - success flag for if receipt exists
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryPacketReceiptResponse: (g_struct: IbcCoreChannelQueryPacketReceiptResponse) => [EMPTY?: void, received?: boolean, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_RECEIPT_RESPONSE = "/ibc.core.channel.v1.QueryPacketReceiptResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketReceiptResponse` - defines the client query response for a packet receipt which also includes a proof, and the height from which the proof was retrieved
 */
export type IbcCoreChannelQueryPacketReceiptResponse = {
    received?: boolean | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: sequence - packet sequence
 */
export declare const destructIbcCoreChannelQueryPacketAcknowledgementRequest: (g_struct: IbcCoreChannelQueryPacketAcknowledgementRequest) => [port_id?: string, channel_id?: string, sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENT_REQUEST = "/ibc.core.channel.v1.QueryPacketAcknowledgementRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketAcknowledgementRequest` - the request type for the Query/PacketAcknowledgement RPC method
 */
export type IbcCoreChannelQueryPacketAcknowledgementRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: acknowledgement - packet associated with the request fields
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryPacketAcknowledgementResponse: (g_struct: IbcCoreChannelQueryPacketAcknowledgementResponse) => [acknowledgement?: Uint8Array, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENT_RESPONSE = "/ibc.core.channel.v1.QueryPacketAcknowledgementResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketAcknowledgementResponse` - defines the client query response for a packet which also includes a proof and the height from which the proof was retrieved
 */
export type IbcCoreChannelQueryPacketAcknowledgementResponse = {
    acknowledgement?: CwBase64 | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: pagination - request
 *   - 3: packet_commitment_sequences - list of packet sequences
 */
export declare const destructIbcCoreChannelQueryPacketAcknowledgementsRequest: (g_struct: IbcCoreChannelQueryPacketAcknowledgementsRequest) => [port_id?: string, channel_id?: string, pagination?: CosmosBaseQueryPageRequest, packet_commitment_sequences?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENTS_REQUEST = "/ibc.core.channel.v1.QueryPacketAcknowledgementsRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketAcknowledgementsRequest` - the request type for the Query/QueryPacketCommitments RPC method
 */
export type IbcCoreChannelQueryPacketAcknowledgementsRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
    packet_commitment_sequences?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryPacketAcknowledgementsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: acknowledgements -
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export declare const destructIbcCoreChannelQueryPacketAcknowledgementsResponse: (g_struct: IbcCoreChannelQueryPacketAcknowledgementsResponse) => [acknowledgements?: IbcCoreChannelPacketState[], pagination?: CosmosBaseQueryPageResponse, height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_PACKET_ACKNOWLEDGEMENTS_RESPONSE = "/ibc.core.channel.v1.QueryPacketAcknowledgementsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryPacketAcknowledgementsResponse` - QueryPacketAcknowledgemetsResponse is the request type for the Query/QueryPacketAcknowledgements RPC method
 */
export type IbcCoreChannelQueryPacketAcknowledgementsResponse = {
    acknowledgements?: IbcCoreChannelPacketState[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedPacketsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: packet_commitment_sequences - list of packet sequences
 */
export declare const destructIbcCoreChannelQueryUnreceivedPacketsRequest: (g_struct: IbcCoreChannelQueryUnreceivedPacketsRequest) => [port_id?: string, channel_id?: string, packet_commitment_sequences?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_PACKETS_REQUEST = "/ibc.core.channel.v1.QueryUnreceivedPacketsRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUnreceivedPacketsRequest` - the request type for the Query/UnreceivedPackets RPC method
 */
export type IbcCoreChannelQueryUnreceivedPacketsRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    packet_commitment_sequences?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedPacketsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived packet sequences
 *   - 1: height - query block height
 */
export declare const destructIbcCoreChannelQueryUnreceivedPacketsResponse: (g_struct: IbcCoreChannelQueryUnreceivedPacketsResponse) => [sequences?: CwUint64[], height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_PACKETS_RESPONSE = "/ibc.core.channel.v1.QueryUnreceivedPacketsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUnreceivedPacketsResponse` - the response type for the Query/UnreceivedPacketCommitments RPC method
 */
export type IbcCoreChannelQueryUnreceivedPacketsResponse = {
    sequences?: CwUint64[] | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedAcksRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 *   - 2: packet_ack_sequences - list of acknowledgement sequences
 */
export declare const destructIbcCoreChannelQueryUnreceivedAcksRequest: (g_struct: IbcCoreChannelQueryUnreceivedAcksRequest) => [port_id?: string, channel_id?: string, packet_ack_sequences?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_ACKS_REQUEST = "/ibc.core.channel.v1.QueryUnreceivedAcksRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUnreceivedAcksRequest` - QueryUnreceivedAcks is the request type for the Query/UnreceivedAcks RPC method
 */
export type IbcCoreChannelQueryUnreceivedAcksRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    packet_ack_sequences?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUnreceivedAcksResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequences - list of unreceived acknowledgement sequences
 *   - 1: height - query block height
 */
export declare const destructIbcCoreChannelQueryUnreceivedAcksResponse: (g_struct: IbcCoreChannelQueryUnreceivedAcksResponse) => [sequences?: CwUint64[], height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UNRECEIVED_ACKS_RESPONSE = "/ibc.core.channel.v1.QueryUnreceivedAcksResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUnreceivedAcksResponse` - the response type for the Query/UnreceivedAcks RPC method
 */
export type IbcCoreChannelQueryUnreceivedAcksResponse = {
    sequences?: CwUint64[] | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceReceiveRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export declare const destructIbcCoreChannelQueryNextSequenceReceiveRequest: (g_struct: IbcCoreChannelQueryNextSequenceReceiveRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_RECEIVE_REQUEST = "/ibc.core.channel.v1.QueryNextSequenceReceiveRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryNextSequenceReceiveRequest` - the request type for the Query/QueryNextSequenceReceiveRequest RPC method
 */
export type IbcCoreChannelQueryNextSequenceReceiveRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceReceiveResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_sequence_receive - next sequence receive number
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryNextSequenceReceiveResponse: (g_struct: IbcCoreChannelQueryNextSequenceReceiveResponse) => [next_sequence_receive?: CwUint64, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_RECEIVE_RESPONSE = "/ibc.core.channel.v1.QueryNextSequenceReceiveResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryNextSequenceReceiveResponse` - QuerySequenceResponse is the response type for the Query/QueryNextSequenceReceiveResponse RPC method
 */
export type IbcCoreChannelQueryNextSequenceReceiveResponse = {
    next_sequence_receive?: CwUint64 | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceSendRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id - port unique identifier
 *   - 1: channel_id - channel unique identifier
 */
export declare const destructIbcCoreChannelQueryNextSequenceSendRequest: (g_struct: IbcCoreChannelQueryNextSequenceSendRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_SEND_REQUEST = "/ibc.core.channel.v1.QueryNextSequenceSendRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryNextSequenceSendRequest` - the request type for the Query/QueryNextSequenceSend RPC method
 */
export type IbcCoreChannelQueryNextSequenceSendRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryNextSequenceSendResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: next_sequence_send - next sequence send number
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryNextSequenceSendResponse: (g_struct: IbcCoreChannelQueryNextSequenceSendResponse) => [next_sequence_send?: CwUint64, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_NEXT_SEQUENCE_SEND_RESPONSE = "/ibc.core.channel.v1.QueryNextSequenceSendResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryNextSequenceSendResponse` - the request type for the Query/QueryNextSequenceSend RPC method
 */
export type IbcCoreChannelQueryNextSequenceSendResponse = {
    next_sequence_send?: CwUint64 | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeErrorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 */
export declare const destructIbcCoreChannelQueryUpgradeErrorRequest: (g_struct: IbcCoreChannelQueryUpgradeErrorRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_ERROR_REQUEST = "/ibc.core.channel.v1.QueryUpgradeErrorRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUpgradeErrorRequest` - the request type for the Query/QueryUpgradeError RPC method
 */
export type IbcCoreChannelQueryUpgradeErrorRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeErrorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: error_receipt -
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryUpgradeErrorResponse: (g_struct: IbcCoreChannelQueryUpgradeErrorResponse) => [error_receipt?: IbcCoreChannelErrorReceipt, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_ERROR_RESPONSE = "/ibc.core.channel.v1.QueryUpgradeErrorResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUpgradeErrorResponse` - the response type for the Query/QueryUpgradeError RPC method
 */
export type IbcCoreChannelQueryUpgradeErrorResponse = {
    error_receipt?: IbcCoreChannelErrorReceipt | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 */
export declare const destructIbcCoreChannelQueryUpgradeRequest: (g_struct: IbcCoreChannelQueryUpgradeRequest) => [port_id?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_REQUEST = "/ibc.core.channel.v1.QueryUpgradeRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUpgradeRequest` - the request type for the QueryUpgradeRequest RPC method
 */
export type IbcCoreChannelQueryUpgradeRequest = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryUpgradeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upgrade -
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreChannelQueryUpgradeResponse: (g_struct: IbcCoreChannelQueryUpgradeResponse) => [upgrade?: IbcCoreChannelUpgrade, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_UPGRADE_RESPONSE = "/ibc.core.channel.v1.QueryUpgradeResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryUpgradeResponse` - the response type for the QueryUpgradeResponse RPC method
 */
export type IbcCoreChannelQueryUpgradeResponse = {
    upgrade?: IbcCoreChannelUpgrade | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelQueryChannelParamsRequest: (g_struct: IbcCoreChannelQueryChannelParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_PARAMS_REQUEST = "/ibc.core.channel.v1.QueryChannelParamsRequest";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelParamsRequest` - the request type for the Query/ChannelParams RPC method.
 */
export type IbcCoreChannelQueryChannelParamsRequest = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelQueryChannelParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const destructIbcCoreChannelQueryChannelParamsResponse: (g_struct: IbcCoreChannelQueryChannelParamsResponse) => [params?: IbcCoreChannelParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_QUERY_CHANNEL_PARAMS_RESPONSE = "/ibc.core.channel.v1.QueryChannelParamsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.QueryChannelParamsResponse` - the response type for the Query/ChannelParams RPC method.
 */
export type IbcCoreChannelQueryChannelParamsResponse = {
    params?: IbcCoreChannelParams | undefined;
};
