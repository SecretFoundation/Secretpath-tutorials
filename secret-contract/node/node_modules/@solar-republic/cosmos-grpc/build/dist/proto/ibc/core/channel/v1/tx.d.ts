import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { IbcCoreChannelChannel, DecodedIbcCoreChannelChannel, IbcCoreChannelPacket, DecodedIbcCoreChannelPacket, ProtoEnumIbcCoreChannelState, JsonEnumIbcCoreChannelState, IbcCoreChannelParams, DecodedIbcCoreChannelParams } from './channel.js';
import type { IbcCoreChannelUpgradeFields, DecodedIbcCoreChannelUpgradeFields, IbcCoreChannelUpgrade, DecodedIbcCoreChannelUpgrade, IbcCoreChannelErrorReceipt, DecodedIbcCoreChannelErrorReceipt } from './upgrade.js';
import type { IbcCoreClientHeight, DecodedIbcCoreClientHeight } from '../../client/v1/client.js';
export type EncodedIbcCoreChannelMsgChannelOpenInit = Encoded<'/ibc.core.channel.v1.MsgChannelOpenInit'>;
export type EncodedIbcCoreChannelMsgChannelOpenInitResponse = Encoded<'/ibc.core.channel.v1.MsgChannelOpenInitResponse'>;
export type EncodedIbcCoreChannelMsgChannelOpenTry = Encoded<'/ibc.core.channel.v1.MsgChannelOpenTry'>;
export type EncodedIbcCoreChannelMsgChannelOpenTryResponse = Encoded<'/ibc.core.channel.v1.MsgChannelOpenTryResponse'>;
export type EncodedIbcCoreChannelMsgChannelOpenAck = Encoded<'/ibc.core.channel.v1.MsgChannelOpenAck'>;
export type EncodedIbcCoreChannelMsgChannelOpenAckResponse = Encoded<'/ibc.core.channel.v1.MsgChannelOpenAckResponse'>;
export type EncodedIbcCoreChannelMsgChannelOpenConfirm = Encoded<'/ibc.core.channel.v1.MsgChannelOpenConfirm'>;
export type EncodedIbcCoreChannelMsgChannelOpenConfirmResponse = Encoded<'/ibc.core.channel.v1.MsgChannelOpenConfirmResponse'>;
export type EncodedIbcCoreChannelMsgChannelCloseInit = Encoded<'/ibc.core.channel.v1.MsgChannelCloseInit'>;
export type EncodedIbcCoreChannelMsgChannelCloseInitResponse = Encoded<'/ibc.core.channel.v1.MsgChannelCloseInitResponse'>;
export type EncodedIbcCoreChannelMsgChannelCloseConfirm = Encoded<'/ibc.core.channel.v1.MsgChannelCloseConfirm'>;
export type EncodedIbcCoreChannelMsgChannelCloseConfirmResponse = Encoded<'/ibc.core.channel.v1.MsgChannelCloseConfirmResponse'>;
export type EncodedIbcCoreChannelMsgRecvPacket = Encoded<'/ibc.core.channel.v1.MsgRecvPacket'>;
export type EncodedIbcCoreChannelMsgRecvPacketResponse = Encoded<'/ibc.core.channel.v1.MsgRecvPacketResponse'>;
export type EncodedIbcCoreChannelMsgTimeout = Encoded<'/ibc.core.channel.v1.MsgTimeout'>;
export type EncodedIbcCoreChannelMsgTimeoutResponse = Encoded<'/ibc.core.channel.v1.MsgTimeoutResponse'>;
export type EncodedIbcCoreChannelMsgTimeoutOnClose = Encoded<'/ibc.core.channel.v1.MsgTimeoutOnClose'>;
export type EncodedIbcCoreChannelMsgTimeoutOnCloseResponse = Encoded<'/ibc.core.channel.v1.MsgTimeoutOnCloseResponse'>;
export type EncodedIbcCoreChannelMsgAcknowledgement = Encoded<'/ibc.core.channel.v1.MsgAcknowledgement'>;
export type EncodedIbcCoreChannelMsgAcknowledgementResponse = Encoded<'/ibc.core.channel.v1.MsgAcknowledgementResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeInit = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeInit'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeInitResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeInitResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeTry = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeTry'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeTryResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeTryResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeAck = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeAck'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeAckResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeAckResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeConfirm = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeConfirm'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeConfirmResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeConfirmResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeOpen = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeOpen'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeOpenResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeOpenResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeTimeout = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeTimeout'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeTimeoutResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeTimeoutResponse'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeCancel = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeCancel'>;
export type EncodedIbcCoreChannelMsgChannelUpgradeCancelResponse = Encoded<'/ibc.core.channel.v1.MsgChannelUpgradeCancelResponse'>;
export type EncodedIbcCoreChannelMsgUpdateParams = Encoded<'/ibc.core.channel.v1.MsgUpdateParams'>;
export type EncodedIbcCoreChannelMsgUpdateParamsResponse = Encoded<'/ibc.core.channel.v1.MsgUpdateParamsResponse'>;
export type EncodedIbcCoreChannelMsgPruneAcknowledgements = Encoded<'/ibc.core.channel.v1.MsgPruneAcknowledgements'>;
export type EncodedIbcCoreChannelMsgPruneAcknowledgementsResponse = Encoded<'/ibc.core.channel.v1.MsgPruneAcknowledgementsResponse'>;
/**
 * Encodes a `MsgChannelOpenInit` protobuf message: defines an sdk.Msg to initialize a channel handshake. It is called by a relayer on Chain A.
 * @param si_port - `port_id`:
 * @param g_channel - `channel`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenInit: (si_port?: Opt<string>, atu8_channel?: Opt<Encoded<'/ibc.core.channel.v1.Channel'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelOpenInit;
/**
 * Encodes a `MsgChannelOpenInitResponse` protobuf message: defines the Msg/ChannelOpenInit response type.
 * @param si_channel - `channel_id`:
 * @param s_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenInitResponse: (si_channel?: Opt<string>, s_version?: Opt<string>) => EncodedIbcCoreChannelMsgChannelOpenInitResponse;
/**
 * Encodes a `MsgChannelOpenTry` protobuf message: MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel on Chain B. The version field within the Channel field has been deprecated. Its value will be ignored by core IBC.
 * @param si_port - `port_id`:
 * @param si_previous_channel - `previous_channel_id`: Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
 * @param g_channel - `channel`: NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
 * @param s_counterparty_version - `counterparty_version`:
 * @param atu8_proof_init - `proof_init`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenTry: (si_port?: Opt<string>, si_previous_channel?: Opt<string>, atu8_channel?: Opt<Encoded<'/ibc.core.channel.v1.Channel'>>, s_counterparty_version?: Opt<string>, atu8_proof_init?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelOpenTry;
/**
 * Encodes a `MsgChannelOpenTryResponse` protobuf message: defines the Msg/ChannelOpenTry response type.
 * @param s_version - `version`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenTryResponse: (s_version?: Opt<string>, si_channel?: Opt<string>) => EncodedIbcCoreChannelMsgChannelOpenTryResponse;
/**
 * Encodes a `MsgChannelOpenAck` protobuf message: defines a msg sent by a Relayer to Chain A to acknowledge the change of channel state to TRYOPEN on Chain B. WARNING: a channel upgrade MUST NOT initialize an upgrade for this channel in the same block as executing this message otherwise the counterparty will be incapable of opening.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param si_counterparty_channel - `counterparty_channel_id`:
 * @param s_counterparty_version - `counterparty_version`:
 * @param atu8_proof_try - `proof_try`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenAck: (si_port?: Opt<string>, si_channel?: Opt<string>, si_counterparty_channel?: Opt<string>, s_counterparty_version?: Opt<string>, atu8_proof_try?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelOpenAck;
/**
 * Encodes a `MsgChannelOpenAckResponse` protobuf message: defines the Msg/ChannelOpenAck response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenAckResponse: () => EncodedIbcCoreChannelMsgChannelOpenAckResponse;
/**
 * Encodes a `MsgChannelOpenConfirm` protobuf message: defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to OPEN on Chain A.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param atu8_proof_ack - `proof_ack`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenConfirm: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_proof_ack?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelOpenConfirm;
/**
 * Encodes a `MsgChannelOpenConfirmResponse` protobuf message: defines the Msg/ChannelOpenConfirm response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelOpenConfirmResponse: () => EncodedIbcCoreChannelMsgChannelOpenConfirmResponse;
/**
 * Encodes a `MsgChannelCloseInit` protobuf message: defines a msg sent by a Relayer to Chain A to close a channel with Chain B.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelCloseInit: (si_port?: Opt<string>, si_channel?: Opt<string>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelCloseInit;
/**
 * Encodes a `MsgChannelCloseInitResponse` protobuf message: defines the Msg/ChannelCloseInit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelCloseInitResponse: () => EncodedIbcCoreChannelMsgChannelCloseInitResponse;
/**
 * Encodes a `MsgChannelCloseConfirm` protobuf message: defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to CLOSED on Chain A.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param atu8_proof_init - `proof_init`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelCloseConfirm: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_proof_init?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>, sg_counterparty_upgrade_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelMsgChannelCloseConfirm;
/**
 * Encodes a `MsgChannelCloseConfirmResponse` protobuf message: defines the Msg/ChannelCloseConfirm response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelCloseConfirmResponse: () => EncodedIbcCoreChannelMsgChannelCloseConfirmResponse;
/**
 * Encodes a `MsgRecvPacket` protobuf message: receives incoming IBC packet
 * @param g_packet - `packet`:
 * @param atu8_proof_commitment - `proof_commitment`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgRecvPacket: (atu8_packet?: Opt<Encoded<'/ibc.core.channel.v1.Packet'>>, atu8_proof_commitment?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgRecvPacket;
/**
 * Encodes a `MsgRecvPacketResponse` protobuf message: defines the Msg/RecvPacket response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgRecvPacketResponse: (xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgRecvPacketResponse;
/**
 * Encodes a `MsgTimeout` protobuf message: receives timed-out packet
 * @param g_packet - `packet`:
 * @param atu8_proof_unreceived - `proof_unreceived`:
 * @param g_proof_height - `proof_height`:
 * @param sg_next_sequence_recv - `next_sequence_recv`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgTimeout: (atu8_packet?: Opt<Encoded<'/ibc.core.channel.v1.Packet'>>, atu8_proof_unreceived?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, sg_next_sequence_recv?: Opt<WeakUint64Str>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgTimeout;
/**
 * Encodes a `MsgTimeoutResponse` protobuf message: defines the Msg/Timeout response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgTimeoutResponse: (xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgTimeoutResponse;
/**
 * Encodes a `MsgTimeoutOnClose` protobuf message: timed-out packet upon counterparty channel closure.
 * @param g_packet - `packet`:
 * @param atu8_proof_unreceived - `proof_unreceived`:
 * @param atu8_proof_close - `proof_close`:
 * @param g_proof_height - `proof_height`:
 * @param sg_next_sequence_recv - `next_sequence_recv`:
 * @param s_signer - `signer`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgTimeoutOnClose: (atu8_packet?: Opt<Encoded<'/ibc.core.channel.v1.Packet'>>, atu8_proof_unreceived?: Opt<Uint8Array>, atu8_proof_close?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, sg_next_sequence_recv?: Opt<WeakUint64Str>, s_signer?: Opt<string>, sg_counterparty_upgrade_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelMsgTimeoutOnClose;
/**
 * Encodes a `MsgTimeoutOnCloseResponse` protobuf message: defines the Msg/TimeoutOnClose response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgTimeoutOnCloseResponse: (xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgTimeoutOnCloseResponse;
/**
 * Encodes a `MsgAcknowledgement` protobuf message: receives incoming IBC acknowledgement
 * @param g_packet - `packet`:
 * @param atu8_acknowledgement - `acknowledgement`:
 * @param atu8_proof_acked - `proof_acked`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgAcknowledgement: (atu8_packet?: Opt<Encoded<'/ibc.core.channel.v1.Packet'>>, atu8_acknowledgement?: Opt<Uint8Array>, atu8_proof_acked?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgAcknowledgement;
/**
 * Encodes a `MsgAcknowledgementResponse` protobuf message: defines the Msg/Acknowledgement response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgAcknowledgementResponse: (xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgAcknowledgementResponse;
/**
 * Encodes a `MsgChannelUpgradeInit` protobuf message: defines the request type for the ChannelUpgradeInit rpc WARNING: Initializing a channel upgrade in the same block as opening the channel may result in the counterparty being incapable of opening.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_fields - `fields`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeInit: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_fields?: Opt<Encoded<'/ibc.core.channel.v1.UpgradeFields'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeInit;
/**
 * Encodes a `MsgChannelUpgradeInitResponse` protobuf message: defines the MsgChannelUpgradeInit response type
 * @param g_upgrade - `upgrade`:
 * @param sg_upgrade_sequence - `upgrade_sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeInitResponse: (atu8_upgrade?: Opt<Encoded<'/ibc.core.channel.v1.Upgrade'>>, sg_upgrade_sequence?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelMsgChannelUpgradeInitResponse;
/**
 * Encodes a `MsgChannelUpgradeTry` protobuf message: defines the request type for the ChannelUpgradeTry rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param a_proposed_upgrade_connection_hops - `proposed_upgrade_connection_hops`:
 * @param g_counterparty_upgrade_fields - `counterparty_upgrade_fields`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param atu8_proof_upgrade - `proof_upgrade`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeTry: (si_port?: Opt<string>, si_channel?: Opt<string>, a_proposed_upgrade_connection_hops?: Opt<string[]>, atu8_counterparty_upgrade_fields?: Opt<Encoded<'/ibc.core.channel.v1.UpgradeFields'>>, sg_counterparty_upgrade_sequence?: Opt<WeakUint64Str>, atu8_proof_channel?: Opt<Uint8Array>, atu8_proof_upgrade?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeTry;
/**
 * Encodes a `MsgChannelUpgradeTryResponse` protobuf message: defines the MsgChannelUpgradeTry response type
 * @param g_upgrade - `upgrade`:
 * @param sg_upgrade_sequence - `upgrade_sequence`:
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeTryResponse: (atu8_upgrade?: Opt<Encoded<'/ibc.core.channel.v1.Upgrade'>>, sg_upgrade_sequence?: Opt<WeakUint64Str>, xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgChannelUpgradeTryResponse;
/**
 * Encodes a `MsgChannelUpgradeAck` protobuf message: defines the request type for the ChannelUpgradeAck rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_counterparty_upgrade - `counterparty_upgrade`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param atu8_proof_upgrade - `proof_upgrade`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeAck: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_counterparty_upgrade?: Opt<Encoded<'/ibc.core.channel.v1.Upgrade'>>, atu8_proof_channel?: Opt<Uint8Array>, atu8_proof_upgrade?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeAck;
/**
 * Encodes a `MsgChannelUpgradeAckResponse` protobuf message: defines MsgChannelUpgradeAck response type
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeAckResponse: (xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgChannelUpgradeAckResponse;
/**
 * Encodes a `MsgChannelUpgradeConfirm` protobuf message: defines the request type for the ChannelUpgradeConfirm rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param xc_counterparty_channel_state - `counterparty_channel_state`:
 * @param g_counterparty_upgrade - `counterparty_upgrade`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param atu8_proof_upgrade - `proof_upgrade`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeConfirm: (si_port?: Opt<string>, si_channel?: Opt<string>, xc_counterparty_channel_state?: Opt<ProtoEnumIbcCoreChannelState>, atu8_counterparty_upgrade?: Opt<Encoded<'/ibc.core.channel.v1.Upgrade'>>, atu8_proof_channel?: Opt<Uint8Array>, atu8_proof_upgrade?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeConfirm;
/**
 * Encodes a `MsgChannelUpgradeConfirmResponse` protobuf message: defines MsgChannelUpgradeConfirm response type
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeConfirmResponse: (xc_result?: Opt<ProtoEnumIbcCoreChannelResponseResultType>) => EncodedIbcCoreChannelMsgChannelUpgradeConfirmResponse;
/**
 * Encodes a `MsgChannelUpgradeOpen` protobuf message: defines the request type for the ChannelUpgradeOpen rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param xc_counterparty_channel_state - `counterparty_channel_state`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeOpen: (si_port?: Opt<string>, si_channel?: Opt<string>, xc_counterparty_channel_state?: Opt<ProtoEnumIbcCoreChannelState>, sg_counterparty_upgrade_sequence?: Opt<WeakUint64Str>, atu8_proof_channel?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeOpen;
/**
 * Encodes a `MsgChannelUpgradeOpenResponse` protobuf message: defines the MsgChannelUpgradeOpen response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeOpenResponse: () => EncodedIbcCoreChannelMsgChannelUpgradeOpenResponse;
/**
 * Encodes a `MsgChannelUpgradeTimeout` protobuf message: defines the request type for the ChannelUpgradeTimeout rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_counterparty_channel - `counterparty_channel`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeTimeout: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_counterparty_channel?: Opt<Encoded<'/ibc.core.channel.v1.Channel'>>, atu8_proof_channel?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeTimeout;
/**
 * Encodes a `MsgChannelUpgradeTimeoutResponse` protobuf message: MsgChannelUpgradeTimeoutRepsonse defines the MsgChannelUpgradeTimeout response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeTimeoutResponse: () => EncodedIbcCoreChannelMsgChannelUpgradeTimeoutResponse;
/**
 * Encodes a `MsgChannelUpgradeCancel` protobuf message: defines the request type for the ChannelUpgradeCancel rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_error_receipt - `error_receipt`:
 * @param atu8_proof_error_receipt - `proof_error_receipt`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeCancel: (si_port?: Opt<string>, si_channel?: Opt<string>, atu8_error_receipt?: Opt<Encoded<'/ibc.core.channel.v1.ErrorReceipt'>>, atu8_proof_error_receipt?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgChannelUpgradeCancel;
/**
 * Encodes a `MsgChannelUpgradeCancelResponse` protobuf message: defines the MsgChannelUpgradeCancel response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgChannelUpgradeCancelResponse: () => EncodedIbcCoreChannelMsgChannelUpgradeCancelResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the MsgUpdateParams request type.
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the channel parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgUpdateParams: (s_authority?: Opt<string>, atu8_params?: Opt<Encoded<'/ibc.core.channel.v1.Params'>>) => EncodedIbcCoreChannelMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the MsgUpdateParams response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgUpdateParamsResponse: () => EncodedIbcCoreChannelMsgUpdateParamsResponse;
/**
 * Encodes a `MsgPruneAcknowledgements` protobuf message: defines the request type for the PruneAcknowledgements rpc.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_limit - `limit`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgPruneAcknowledgements: (si_port?: Opt<string>, si_channel?: Opt<string>, sg_limit?: Opt<WeakUint64Str>, s_signer?: Opt<string>) => EncodedIbcCoreChannelMsgPruneAcknowledgements;
/**
 * Encodes a `MsgPruneAcknowledgementsResponse` protobuf message: defines the response type for the PruneAcknowledgements rpc.
 * @param sg_total_pruned_sequences - `total_pruned_sequences`: Number of sequences pruned (includes both packet acknowledgements and packet receipts where appropriate).
 * @param sg_total_remaining_sequences - `total_remaining_sequences`: Number of sequences left after pruning.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreChannelMsgPruneAcknowledgementsResponse: (sg_total_pruned_sequences?: Opt<WeakUint64Str>, sg_total_remaining_sequences?: Opt<WeakUint64Str>) => EncodedIbcCoreChannelMsgPruneAcknowledgementsResponse;
/**
 * A decoded protobuf ChannelOpenInit message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel -
 *   - 2: signer -
 */
export type DecodedIbcCoreChannelMsgChannelOpenInit = [
    si_port?: string,
    a_channel?: DecodedIbcCoreChannelChannel,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenInit}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenInit: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelOpenInit;
/**
 * A decoded protobuf ChannelOpenInit message
 *
 * Tuple where:
 *   - 0: channel_id -
 *   - 1: version -
 */
export type DecodedIbcCoreChannelMsgChannelOpenInitResponse = [
    si_channel?: string,
    s_version?: string
];
/**
 * Decodes a protobuf ChannelOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenInitResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenInitResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelOpenInitResponse;
/**
 * A decoded protobuf ChannelOpenTry message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: previous_channel_id - Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
 *   - 2: channel - NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
 *   - 3: counterparty_version -
 *   - 4: proof_init -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export type DecodedIbcCoreChannelMsgChannelOpenTry = [
    si_port?: string,
    si_previous_channel?: string,
    a_channel?: DecodedIbcCoreChannelChannel,
    s_counterparty_version?: string,
    atu8_proof_init?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenTry}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenTry: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelOpenTry;
/**
 * A decoded protobuf ChannelOpenTry message
 *
 * Tuple where:
 *   - 0: version -
 *   - 1: channel_id -
 */
export type DecodedIbcCoreChannelMsgChannelOpenTryResponse = [
    s_version?: string,
    si_channel?: string
];
/**
 * Decodes a protobuf ChannelOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenTryResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenTryResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelOpenTryResponse;
/**
 * A decoded protobuf ChannelOpenAck message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_id -
 *   - 3: counterparty_version -
 *   - 4: proof_try -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export type DecodedIbcCoreChannelMsgChannelOpenAck = [
    si_port?: string,
    si_channel?: string,
    si_counterparty_channel?: string,
    s_counterparty_version?: string,
    atu8_proof_try?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenAck}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenAck: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelOpenAck;
/**
 * A decoded protobuf ChannelOpenAck message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelOpenAckResponse = [];
/**
 * Decodes a protobuf ChannelOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenAckResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenAckResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ChannelOpenConfirm message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proof_ack -
 *   - 3: proof_height -
 *   - 4: signer -
 */
export type DecodedIbcCoreChannelMsgChannelOpenConfirm = [
    si_port?: string,
    si_channel?: string,
    atu8_proof_ack?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenConfirm}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenConfirm: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelOpenConfirm;
/**
 * A decoded protobuf ChannelOpenConfirm message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelOpenConfirmResponse = [];
/**
 * Decodes a protobuf ChannelOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenConfirmResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelOpenConfirmResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ChannelCloseInit message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: signer -
 */
export type DecodedIbcCoreChannelMsgChannelCloseInit = [
    si_port?: string,
    si_channel?: string,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelCloseInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseInit}
 */
export declare const decodeIbcCoreChannelMsgChannelCloseInit: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelCloseInit;
/**
 * A decoded protobuf ChannelCloseInit message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelCloseInitResponse = [];
/**
 * Decodes a protobuf ChannelCloseInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseInitResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelCloseInitResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ChannelCloseConfirm message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proof_init -
 *   - 3: proof_height -
 *   - 4: signer -
 *   - 5: counterparty_upgrade_sequence -
 */
export type DecodedIbcCoreChannelMsgChannelCloseConfirm = [
    si_port?: string,
    si_channel?: string,
    atu8_proof_init?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string,
    sg_counterparty_upgrade_sequence?: CwUint64
];
/**
 * Decodes a protobuf ChannelCloseConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseConfirm}
 */
export declare const decodeIbcCoreChannelMsgChannelCloseConfirm: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelCloseConfirm;
/**
 * A decoded protobuf ChannelCloseConfirm message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelCloseConfirmResponse = [];
/**
 * Decodes a protobuf ChannelCloseConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseConfirmResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelCloseConfirmResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RecvPacket message
 *
 * Tuple where:
 *   - 0: packet -
 *   - 1: proof_commitment -
 *   - 2: proof_height -
 *   - 3: signer -
 */
export type DecodedIbcCoreChannelMsgRecvPacket = [
    a_packet?: DecodedIbcCoreChannelPacket,
    atu8_proof_commitment?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf RecvPacket message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgRecvPacket}
 */
export declare const decodeIbcCoreChannelMsgRecvPacket: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgRecvPacket;
/**
 * A decoded protobuf RecvPacket message
 *
 * Alias for: result -
 */
export type DecodedIbcCoreChannelMsgRecvPacketResponse = [
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf RecvPacket message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgRecvPacketResponse}
 */
export declare const decodeIbcCoreChannelMsgRecvPacketResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgRecvPacketResponse;
/**
 * A decoded protobuf Timeout message
 *
 * Tuple where:
 *   - 0: packet -
 *   - 1: proof_unreceived -
 *   - 2: proof_height -
 *   - 3: next_sequence_recv -
 *   - 4: signer -
 */
export type DecodedIbcCoreChannelMsgTimeout = [
    a_packet?: DecodedIbcCoreChannelPacket,
    atu8_proof_unreceived?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    sg_next_sequence_recv?: CwUint64,
    s_signer?: string
];
/**
 * Decodes a protobuf Timeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeout}
 */
export declare const decodeIbcCoreChannelMsgTimeout: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgTimeout;
/**
 * A decoded protobuf Timeout message
 *
 * Alias for: result -
 */
export type DecodedIbcCoreChannelMsgTimeoutResponse = [
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf Timeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeoutResponse}
 */
export declare const decodeIbcCoreChannelMsgTimeoutResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgTimeoutResponse;
/**
 * A decoded protobuf TimeoutOnClose message
 *
 * Tuple where:
 *   - 0: packet -
 *   - 1: proof_unreceived -
 *   - 2: proof_close -
 *   - 3: proof_height -
 *   - 4: next_sequence_recv -
 *   - 5: signer -
 *   - 6: counterparty_upgrade_sequence -
 */
export type DecodedIbcCoreChannelMsgTimeoutOnClose = [
    a_packet?: DecodedIbcCoreChannelPacket,
    atu8_proof_unreceived?: Uint8Array,
    atu8_proof_close?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    sg_next_sequence_recv?: CwUint64,
    s_signer?: string,
    sg_counterparty_upgrade_sequence?: CwUint64
];
/**
 * Decodes a protobuf TimeoutOnClose message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeoutOnClose}
 */
export declare const decodeIbcCoreChannelMsgTimeoutOnClose: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgTimeoutOnClose;
/**
 * A decoded protobuf TimeoutOnClose message
 *
 * Alias for: result -
 */
export type DecodedIbcCoreChannelMsgTimeoutOnCloseResponse = [
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf TimeoutOnClose message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeoutOnCloseResponse}
 */
export declare const decodeIbcCoreChannelMsgTimeoutOnCloseResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgTimeoutOnCloseResponse;
/**
 * A decoded protobuf Acknowledgement message
 *
 * Tuple where:
 *   - 0: packet -
 *   - 1: acknowledgement -
 *   - 2: proof_acked -
 *   - 3: proof_height -
 *   - 4: signer -
 */
export type DecodedIbcCoreChannelMsgAcknowledgement = [
    a_packet?: DecodedIbcCoreChannelPacket,
    atu8_acknowledgement?: Uint8Array,
    atu8_proof_acked?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf Acknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgAcknowledgement}
 */
export declare const decodeIbcCoreChannelMsgAcknowledgement: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgAcknowledgement;
/**
 * A decoded protobuf Acknowledgement message
 *
 * Alias for: result -
 */
export type DecodedIbcCoreChannelMsgAcknowledgementResponse = [
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf Acknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgAcknowledgementResponse}
 */
export declare const decodeIbcCoreChannelMsgAcknowledgementResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgAcknowledgementResponse;
/**
 * A decoded protobuf ChannelUpgradeInit message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: fields -
 *   - 3: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeInit = [
    si_port?: string,
    si_channel?: string,
    a_fields?: DecodedIbcCoreChannelUpgradeFields,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeInit}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeInit: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeInit;
/**
 * A decoded protobuf ChannelUpgradeInit message
 *
 * Tuple where:
 *   - 0: upgrade -
 *   - 1: upgrade_sequence -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeInitResponse = [
    a_upgrade?: DecodedIbcCoreChannelUpgrade,
    sg_upgrade_sequence?: CwUint64
];
/**
 * Decodes a protobuf ChannelUpgradeInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeInitResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeInitResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeInitResponse;
/**
 * A decoded protobuf ChannelUpgradeTry message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proposed_upgrade_connection_hops -
 *   - 3: counterparty_upgrade_fields -
 *   - 4: counterparty_upgrade_sequence -
 *   - 5: proof_channel -
 *   - 6: proof_upgrade -
 *   - 7: proof_height -
 *   - 8: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeTry = [
    si_port?: string,
    si_channel?: string,
    a_proposed_upgrade_connection_hops?: string[],
    a_counterparty_upgrade_fields?: DecodedIbcCoreChannelUpgradeFields,
    sg_counterparty_upgrade_sequence?: CwUint64,
    atu8_proof_channel?: Uint8Array,
    atu8_proof_upgrade?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTry}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeTry: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeTry;
/**
 * A decoded protobuf ChannelUpgradeTry message
 *
 * Tuple where:
 *   - 0: upgrade -
 *   - 1: upgrade_sequence -
 *   - 2: result -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeTryResponse = [
    a_upgrade?: DecodedIbcCoreChannelUpgrade,
    sg_upgrade_sequence?: CwUint64,
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf ChannelUpgradeTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTryResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeTryResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeTryResponse;
/**
 * A decoded protobuf ChannelUpgradeAck message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_upgrade -
 *   - 3: proof_channel -
 *   - 4: proof_upgrade -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeAck = [
    si_port?: string,
    si_channel?: string,
    a_counterparty_upgrade?: DecodedIbcCoreChannelUpgrade,
    atu8_proof_channel?: Uint8Array,
    atu8_proof_upgrade?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeAck}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeAck: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeAck;
/**
 * A decoded protobuf ChannelUpgradeAck message
 *
 * Alias for: result -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeAckResponse = [
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf ChannelUpgradeAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeAckResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeAckResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeAckResponse;
/**
 * A decoded protobuf ChannelUpgradeConfirm message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_state -
 *   - 3: counterparty_upgrade -
 *   - 4: proof_channel -
 *   - 5: proof_upgrade -
 *   - 6: proof_height -
 *   - 7: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeConfirm = [
    si_port?: string,
    si_channel?: string,
    xc_counterparty_channel_state?: ProtoEnumIbcCoreChannelState,
    a_counterparty_upgrade?: DecodedIbcCoreChannelUpgrade,
    atu8_proof_channel?: Uint8Array,
    atu8_proof_upgrade?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeConfirm}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeConfirm: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeConfirm;
/**
 * A decoded protobuf ChannelUpgradeConfirm message
 *
 * Alias for: result -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeConfirmResponse = [
    xc_result?: ProtoEnumIbcCoreChannelResponseResultType
];
/**
 * Decodes a protobuf ChannelUpgradeConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeConfirmResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeConfirmResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeConfirmResponse;
/**
 * A decoded protobuf ChannelUpgradeOpen message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_state -
 *   - 3: counterparty_upgrade_sequence -
 *   - 4: proof_channel -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeOpen = [
    si_port?: string,
    si_channel?: string,
    xc_counterparty_channel_state?: ProtoEnumIbcCoreChannelState,
    sg_counterparty_upgrade_sequence?: CwUint64,
    atu8_proof_channel?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeOpen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeOpen}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeOpen: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeOpen;
/**
 * A decoded protobuf ChannelUpgradeOpen message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeOpenResponse = [];
/**
 * Decodes a protobuf ChannelUpgradeOpen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeOpenResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeOpenResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ChannelUpgradeTimeout message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel -
 *   - 3: proof_channel -
 *   - 4: proof_height -
 *   - 5: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeTimeout = [
    si_port?: string,
    si_channel?: string,
    a_counterparty_channel?: DecodedIbcCoreChannelChannel,
    atu8_proof_channel?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeTimeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTimeout}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeTimeout: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeTimeout;
/**
 * A decoded protobuf ChannelUpgradeTimeout message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeTimeoutResponse = [];
/**
 * Decodes a protobuf ChannelUpgradeTimeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTimeoutResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeTimeoutResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ChannelUpgradeCancel message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: error_receipt -
 *   - 3: proof_error_receipt -
 *   - 4: proof_height -
 *   - 5: signer -
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeCancel = [
    si_port?: string,
    si_channel?: string,
    a_error_receipt?: DecodedIbcCoreChannelErrorReceipt,
    atu8_proof_error_receipt?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight,
    s_signer?: string
];
/**
 * Decodes a protobuf ChannelUpgradeCancel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeCancel}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeCancel: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgChannelUpgradeCancel;
/**
 * A decoded protobuf ChannelUpgradeCancel message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgChannelUpgradeCancelResponse = [];
/**
 * Decodes a protobuf ChannelUpgradeCancel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeCancelResponse}
 */
export declare const decodeIbcCoreChannelMsgChannelUpgradeCancelResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the channel parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedIbcCoreChannelMsgUpdateParams = [
    s_authority?: string,
    a_params?: DecodedIbcCoreChannelParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgUpdateParams}
 */
export declare const decodeIbcCoreChannelMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedIbcCoreChannelMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgUpdateParamsResponse}
 */
export declare const decodeIbcCoreChannelMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf PruneAcknowledgements message
 *
 * Tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: limit -
 *   - 3: signer -
 */
export type DecodedIbcCoreChannelMsgPruneAcknowledgements = [
    si_port?: string,
    si_channel?: string,
    sg_limit?: CwUint64,
    s_signer?: string
];
/**
 * Decodes a protobuf PruneAcknowledgements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgPruneAcknowledgements}
 */
export declare const decodeIbcCoreChannelMsgPruneAcknowledgements: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgPruneAcknowledgements;
/**
 * A decoded protobuf PruneAcknowledgements message
 *
 * Tuple where:
 *   - 0: total_pruned_sequences - Number of sequences pruned (includes both packet acknowledgements and packet receipts where appropriate).
 *   - 1: total_remaining_sequences - Number of sequences left after pruning.
 */
export type DecodedIbcCoreChannelMsgPruneAcknowledgementsResponse = [
    sg_total_pruned_sequences?: CwUint64,
    sg_total_remaining_sequences?: CwUint64
];
/**
 * Decodes a protobuf PruneAcknowledgements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgPruneAcknowledgementsResponse}
 */
export declare const decodeIbcCoreChannelMsgPruneAcknowledgementsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreChannelMsgPruneAcknowledgementsResponse;
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel -
 *   - 2: signer -
 */
export declare const destructIbcCoreChannelMsgChannelOpenInit: (g_struct: IbcCoreChannelMsgChannelOpenInit) => [port_id?: string, channel?: IbcCoreChannelChannel, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_INIT = "/ibc.core.channel.v1.MsgChannelOpenInit";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenInit` - defines an sdk.Msg to initialize a channel handshake. It is called by a relayer on Chain A.
 */
export type IbcCoreChannelMsgChannelOpenInit = {
    port_id?: string | undefined;
    channel?: IbcCoreChannelChannel | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id -
 *   - 1: version -
 */
export declare const destructIbcCoreChannelMsgChannelOpenInitResponse: (g_struct: IbcCoreChannelMsgChannelOpenInitResponse) => [channel_id?: string, version?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_INIT_RESPONSE = "/ibc.core.channel.v1.MsgChannelOpenInitResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenInitResponse` - defines the Msg/ChannelOpenInit response type.
 */
export type IbcCoreChannelMsgChannelOpenInitResponse = {
    channel_id?: string | undefined;
    version?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenTry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: previous_channel_id - Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
 *   - 2: channel - NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
 *   - 3: counterparty_version -
 *   - 4: proof_init -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export declare const destructIbcCoreChannelMsgChannelOpenTry: (g_struct: IbcCoreChannelMsgChannelOpenTry) => [port_id?: string, previous_channel_id?: string, channel?: IbcCoreChannelChannel, counterparty_version?: string, proof_init?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_TRY = "/ibc.core.channel.v1.MsgChannelOpenTry";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenTry` - MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel on Chain B. The version field within the Channel field has been deprecated. Its value will be ignored by core IBC.
 */
export type IbcCoreChannelMsgChannelOpenTry = {
    port_id?: string | undefined;
    previous_channel_id?: string | undefined;
    channel?: IbcCoreChannelChannel | undefined;
    counterparty_version?: string | undefined;
    proof_init?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenTryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: channel_id -
 */
export declare const destructIbcCoreChannelMsgChannelOpenTryResponse: (g_struct: IbcCoreChannelMsgChannelOpenTryResponse) => [version?: string, channel_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_TRY_RESPONSE = "/ibc.core.channel.v1.MsgChannelOpenTryResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenTryResponse` - defines the Msg/ChannelOpenTry response type.
 */
export type IbcCoreChannelMsgChannelOpenTryResponse = {
    version?: string | undefined;
    channel_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_id -
 *   - 3: counterparty_version -
 *   - 4: proof_try -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export declare const destructIbcCoreChannelMsgChannelOpenAck: (g_struct: IbcCoreChannelMsgChannelOpenAck) => [port_id?: string, channel_id?: string, counterparty_channel_id?: string, counterparty_version?: string, proof_try?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_ACK = "/ibc.core.channel.v1.MsgChannelOpenAck";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenAck` - defines a msg sent by a Relayer to Chain A to acknowledge the change of channel state to TRYOPEN on Chain B. WARNING: a channel upgrade MUST NOT initialize an upgrade for this channel in the same block as executing this message otherwise the counterparty will be incapable of opening.
 */
export type IbcCoreChannelMsgChannelOpenAck = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    counterparty_channel_id?: string | undefined;
    counterparty_version?: string | undefined;
    proof_try?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelOpenAckResponse: (g_struct: IbcCoreChannelMsgChannelOpenAckResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_ACK_RESPONSE = "/ibc.core.channel.v1.MsgChannelOpenAckResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenAckResponse` - defines the Msg/ChannelOpenAck response type.
 */
export type IbcCoreChannelMsgChannelOpenAckResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proof_ack -
 *   - 3: proof_height -
 *   - 4: signer -
 */
export declare const destructIbcCoreChannelMsgChannelOpenConfirm: (g_struct: IbcCoreChannelMsgChannelOpenConfirm) => [port_id?: string, channel_id?: string, proof_ack?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_CONFIRM = "/ibc.core.channel.v1.MsgChannelOpenConfirm";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenConfirm` - defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to OPEN on Chain A.
 */
export type IbcCoreChannelMsgChannelOpenConfirm = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    proof_ack?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelOpenConfirmResponse: (g_struct: IbcCoreChannelMsgChannelOpenConfirmResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_CONFIRM_RESPONSE = "/ibc.core.channel.v1.MsgChannelOpenConfirmResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelOpenConfirmResponse` - defines the Msg/ChannelOpenConfirm response type.
 */
export type IbcCoreChannelMsgChannelOpenConfirmResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: signer -
 */
export declare const destructIbcCoreChannelMsgChannelCloseInit: (g_struct: IbcCoreChannelMsgChannelCloseInit) => [port_id?: string, channel_id?: string, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_INIT = "/ibc.core.channel.v1.MsgChannelCloseInit";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelCloseInit` - defines a msg sent by a Relayer to Chain A to close a channel with Chain B.
 */
export type IbcCoreChannelMsgChannelCloseInit = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelCloseInitResponse: (g_struct: IbcCoreChannelMsgChannelCloseInitResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_INIT_RESPONSE = "/ibc.core.channel.v1.MsgChannelCloseInitResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelCloseInitResponse` - defines the Msg/ChannelCloseInit response type.
 */
export type IbcCoreChannelMsgChannelCloseInitResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proof_init -
 *   - 3: proof_height -
 *   - 4: signer -
 *   - 5: counterparty_upgrade_sequence -
 */
export declare const destructIbcCoreChannelMsgChannelCloseConfirm: (g_struct: IbcCoreChannelMsgChannelCloseConfirm) => [port_id?: string, channel_id?: string, proof_init?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string, counterparty_upgrade_sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_CONFIRM = "/ibc.core.channel.v1.MsgChannelCloseConfirm";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelCloseConfirm` - defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to CLOSED on Chain A.
 */
export type IbcCoreChannelMsgChannelCloseConfirm = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    proof_init?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
    counterparty_upgrade_sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelCloseConfirmResponse: (g_struct: IbcCoreChannelMsgChannelCloseConfirmResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_CONFIRM_RESPONSE = "/ibc.core.channel.v1.MsgChannelCloseConfirmResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelCloseConfirmResponse` - defines the Msg/ChannelCloseConfirm response type.
 */
export type IbcCoreChannelMsgChannelCloseConfirmResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgRecvPacket} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: proof_commitment -
 *   - 2: proof_height -
 *   - 3: signer -
 */
export declare const destructIbcCoreChannelMsgRecvPacket: (g_struct: IbcCoreChannelMsgRecvPacket) => [packet?: IbcCoreChannelPacket, proof_commitment?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_RECV_PACKET = "/ibc.core.channel.v1.MsgRecvPacket";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgRecvPacket` - receives incoming IBC packet
 */
export type IbcCoreChannelMsgRecvPacket = {
    packet?: IbcCoreChannelPacket | undefined;
    proof_commitment?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgRecvPacketResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export declare const destructIbcCoreChannelMsgRecvPacketResponse: (g_struct: IbcCoreChannelMsgRecvPacketResponse) => [result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_RECV_PACKET_RESPONSE = "/ibc.core.channel.v1.MsgRecvPacketResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgRecvPacketResponse` - defines the Msg/RecvPacket response type.
 */
export type IbcCoreChannelMsgRecvPacketResponse = {
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeout} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: proof_unreceived -
 *   - 2: proof_height -
 *   - 3: next_sequence_recv -
 *   - 4: signer -
 */
export declare const destructIbcCoreChannelMsgTimeout: (g_struct: IbcCoreChannelMsgTimeout) => [packet?: IbcCoreChannelPacket, proof_unreceived?: Uint8Array, proof_height?: IbcCoreClientHeight, next_sequence_recv?: CwUint64, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT = "/ibc.core.channel.v1.MsgTimeout";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgTimeout` - receives timed-out packet
 */
export type IbcCoreChannelMsgTimeout = {
    packet?: IbcCoreChannelPacket | undefined;
    proof_unreceived?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    next_sequence_recv?: CwUint64 | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeoutResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export declare const destructIbcCoreChannelMsgTimeoutResponse: (g_struct: IbcCoreChannelMsgTimeoutResponse) => [result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT_RESPONSE = "/ibc.core.channel.v1.MsgTimeoutResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgTimeoutResponse` - defines the Msg/Timeout response type.
 */
export type IbcCoreChannelMsgTimeoutResponse = {
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeoutOnClose} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: proof_unreceived -
 *   - 2: proof_close -
 *   - 3: proof_height -
 *   - 4: next_sequence_recv -
 *   - 5: signer -
 *   - 6: counterparty_upgrade_sequence -
 */
export declare const destructIbcCoreChannelMsgTimeoutOnClose: (g_struct: IbcCoreChannelMsgTimeoutOnClose) => [packet?: IbcCoreChannelPacket, proof_unreceived?: Uint8Array, proof_close?: Uint8Array, proof_height?: IbcCoreClientHeight, next_sequence_recv?: CwUint64, signer?: string, counterparty_upgrade_sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT_ON_CLOSE = "/ibc.core.channel.v1.MsgTimeoutOnClose";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgTimeoutOnClose` - timed-out packet upon counterparty channel closure.
 */
export type IbcCoreChannelMsgTimeoutOnClose = {
    packet?: IbcCoreChannelPacket | undefined;
    proof_unreceived?: CwBase64 | undefined;
    proof_close?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    next_sequence_recv?: CwUint64 | undefined;
    signer?: string | undefined;
    counterparty_upgrade_sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeoutOnCloseResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export declare const destructIbcCoreChannelMsgTimeoutOnCloseResponse: (g_struct: IbcCoreChannelMsgTimeoutOnCloseResponse) => [result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT_ON_CLOSE_RESPONSE = "/ibc.core.channel.v1.MsgTimeoutOnCloseResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgTimeoutOnCloseResponse` - defines the Msg/TimeoutOnClose response type.
 */
export type IbcCoreChannelMsgTimeoutOnCloseResponse = {
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgAcknowledgement} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: acknowledgement -
 *   - 2: proof_acked -
 *   - 3: proof_height -
 *   - 4: signer -
 */
export declare const destructIbcCoreChannelMsgAcknowledgement: (g_struct: IbcCoreChannelMsgAcknowledgement) => [packet?: IbcCoreChannelPacket, acknowledgement?: Uint8Array, proof_acked?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_ACKNOWLEDGEMENT = "/ibc.core.channel.v1.MsgAcknowledgement";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgAcknowledgement` - receives incoming IBC acknowledgement
 */
export type IbcCoreChannelMsgAcknowledgement = {
    packet?: IbcCoreChannelPacket | undefined;
    acknowledgement?: CwBase64 | undefined;
    proof_acked?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgAcknowledgementResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export declare const destructIbcCoreChannelMsgAcknowledgementResponse: (g_struct: IbcCoreChannelMsgAcknowledgementResponse) => [result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_ACKNOWLEDGEMENT_RESPONSE = "/ibc.core.channel.v1.MsgAcknowledgementResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgAcknowledgementResponse` - defines the Msg/Acknowledgement response type.
 */
export type IbcCoreChannelMsgAcknowledgementResponse = {
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: fields -
 *   - 3: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeInit: (g_struct: IbcCoreChannelMsgChannelUpgradeInit) => [port_id?: string, channel_id?: string, fields?: IbcCoreChannelUpgradeFields, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_INIT = "/ibc.core.channel.v1.MsgChannelUpgradeInit";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeInit` - defines the request type for the ChannelUpgradeInit rpc WARNING: Initializing a channel upgrade in the same block as opening the channel may result in the counterparty being incapable of opening.
 */
export type IbcCoreChannelMsgChannelUpgradeInit = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    fields?: IbcCoreChannelUpgradeFields | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upgrade -
 *   - 1: upgrade_sequence -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeInitResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeInitResponse) => [upgrade?: IbcCoreChannelUpgrade, upgrade_sequence?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_INIT_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeInitResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeInitResponse` - defines the MsgChannelUpgradeInit response type
 */
export type IbcCoreChannelMsgChannelUpgradeInitResponse = {
    upgrade?: IbcCoreChannelUpgrade | undefined;
    upgrade_sequence?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proposed_upgrade_connection_hops -
 *   - 3: counterparty_upgrade_fields -
 *   - 4: counterparty_upgrade_sequence -
 *   - 5: proof_channel -
 *   - 6: proof_upgrade -
 *   - 7: proof_height -
 *   - 8: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeTry: (g_struct: IbcCoreChannelMsgChannelUpgradeTry) => [port_id?: string, channel_id?: string, proposed_upgrade_connection_hops?: string[], counterparty_upgrade_fields?: IbcCoreChannelUpgradeFields, counterparty_upgrade_sequence?: CwUint64, proof_channel?: Uint8Array, proof_upgrade?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TRY = "/ibc.core.channel.v1.MsgChannelUpgradeTry";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeTry` - defines the request type for the ChannelUpgradeTry rpc
 */
export type IbcCoreChannelMsgChannelUpgradeTry = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    proposed_upgrade_connection_hops?: string[] | undefined;
    counterparty_upgrade_fields?: IbcCoreChannelUpgradeFields | undefined;
    counterparty_upgrade_sequence?: CwUint64 | undefined;
    proof_channel?: CwBase64 | undefined;
    proof_upgrade?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upgrade -
 *   - 1: upgrade_sequence -
 *   - 2: result -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeTryResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeTryResponse) => [upgrade?: IbcCoreChannelUpgrade, upgrade_sequence?: CwUint64, result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TRY_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeTryResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeTryResponse` - defines the MsgChannelUpgradeTry response type
 */
export type IbcCoreChannelMsgChannelUpgradeTryResponse = {
    upgrade?: IbcCoreChannelUpgrade | undefined;
    upgrade_sequence?: CwUint64 | undefined;
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_upgrade -
 *   - 3: proof_channel -
 *   - 4: proof_upgrade -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeAck: (g_struct: IbcCoreChannelMsgChannelUpgradeAck) => [port_id?: string, channel_id?: string, counterparty_upgrade?: IbcCoreChannelUpgrade, proof_channel?: Uint8Array, proof_upgrade?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_ACK = "/ibc.core.channel.v1.MsgChannelUpgradeAck";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeAck` - defines the request type for the ChannelUpgradeAck rpc
 */
export type IbcCoreChannelMsgChannelUpgradeAck = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    counterparty_upgrade?: IbcCoreChannelUpgrade | undefined;
    proof_channel?: CwBase64 | undefined;
    proof_upgrade?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeAckResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeAckResponse) => [result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_ACK_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeAckResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeAckResponse` - defines MsgChannelUpgradeAck response type
 */
export type IbcCoreChannelMsgChannelUpgradeAckResponse = {
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_state -
 *   - 3: counterparty_upgrade -
 *   - 4: proof_channel -
 *   - 5: proof_upgrade -
 *   - 6: proof_height -
 *   - 7: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeConfirm: (g_struct: IbcCoreChannelMsgChannelUpgradeConfirm) => [port_id?: string, channel_id?: string, counterparty_channel_state?: JsonEnumIbcCoreChannelState, counterparty_upgrade?: IbcCoreChannelUpgrade, proof_channel?: Uint8Array, proof_upgrade?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CONFIRM = "/ibc.core.channel.v1.MsgChannelUpgradeConfirm";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeConfirm` - defines the request type for the ChannelUpgradeConfirm rpc
 */
export type IbcCoreChannelMsgChannelUpgradeConfirm = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    counterparty_channel_state?: JsonEnumIbcCoreChannelState | undefined;
    counterparty_upgrade?: IbcCoreChannelUpgrade | undefined;
    proof_channel?: CwBase64 | undefined;
    proof_upgrade?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeConfirmResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeConfirmResponse) => [result?: JsonEnumIbcCoreChannelResponseResultType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CONFIRM_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeConfirmResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeConfirmResponse` - defines MsgChannelUpgradeConfirm response type
 */
export type IbcCoreChannelMsgChannelUpgradeConfirmResponse = {
    result?: JsonEnumIbcCoreChannelResponseResultType | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeOpen} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_state -
 *   - 3: counterparty_upgrade_sequence -
 *   - 4: proof_channel -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeOpen: (g_struct: IbcCoreChannelMsgChannelUpgradeOpen) => [port_id?: string, channel_id?: string, counterparty_channel_state?: JsonEnumIbcCoreChannelState, counterparty_upgrade_sequence?: CwUint64, proof_channel?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_OPEN = "/ibc.core.channel.v1.MsgChannelUpgradeOpen";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeOpen` - defines the request type for the ChannelUpgradeOpen rpc
 */
export type IbcCoreChannelMsgChannelUpgradeOpen = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    counterparty_channel_state?: JsonEnumIbcCoreChannelState | undefined;
    counterparty_upgrade_sequence?: CwUint64 | undefined;
    proof_channel?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeOpenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeOpenResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeOpenResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_OPEN_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeOpenResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeOpenResponse` - defines the MsgChannelUpgradeOpen response type
 */
export type IbcCoreChannelMsgChannelUpgradeOpenResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTimeout} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel -
 *   - 3: proof_channel -
 *   - 4: proof_height -
 *   - 5: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeTimeout: (g_struct: IbcCoreChannelMsgChannelUpgradeTimeout) => [port_id?: string, channel_id?: string, counterparty_channel?: IbcCoreChannelChannel, proof_channel?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TIMEOUT = "/ibc.core.channel.v1.MsgChannelUpgradeTimeout";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeTimeout` - defines the request type for the ChannelUpgradeTimeout rpc
 */
export type IbcCoreChannelMsgChannelUpgradeTimeout = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    counterparty_channel?: IbcCoreChannelChannel | undefined;
    proof_channel?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTimeoutResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeTimeoutResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeTimeoutResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TIMEOUT_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeTimeoutResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeTimeoutResponse` - MsgChannelUpgradeTimeoutRepsonse defines the MsgChannelUpgradeTimeout response type
 */
export type IbcCoreChannelMsgChannelUpgradeTimeoutResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeCancel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: error_receipt -
 *   - 3: proof_error_receipt -
 *   - 4: proof_height -
 *   - 5: signer -
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeCancel: (g_struct: IbcCoreChannelMsgChannelUpgradeCancel) => [port_id?: string, channel_id?: string, error_receipt?: IbcCoreChannelErrorReceipt, proof_error_receipt?: Uint8Array, proof_height?: IbcCoreClientHeight, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CANCEL = "/ibc.core.channel.v1.MsgChannelUpgradeCancel";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeCancel` - defines the request type for the ChannelUpgradeCancel rpc
 */
export type IbcCoreChannelMsgChannelUpgradeCancel = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    error_receipt?: IbcCoreChannelErrorReceipt | undefined;
    proof_error_receipt?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeCancelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgChannelUpgradeCancelResponse: (g_struct: IbcCoreChannelMsgChannelUpgradeCancelResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CANCEL_RESPONSE = "/ibc.core.channel.v1.MsgChannelUpgradeCancelResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgChannelUpgradeCancelResponse` - defines the MsgChannelUpgradeCancel response type
 */
export type IbcCoreChannelMsgChannelUpgradeCancelResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the channel parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructIbcCoreChannelMsgUpdateParams: (g_struct: IbcCoreChannelMsgUpdateParams) => [authority?: string, params?: IbcCoreChannelParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_UPDATE_PARAMS = "/ibc.core.channel.v1.MsgUpdateParams";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgUpdateParams` - the MsgUpdateParams request type.
 */
export type IbcCoreChannelMsgUpdateParams = {
    authority?: string | undefined;
    params?: IbcCoreChannelParams | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreChannelMsgUpdateParamsResponse: (g_struct: IbcCoreChannelMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_UPDATE_PARAMS_RESPONSE = "/ibc.core.channel.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgUpdateParamsResponse` - defines the MsgUpdateParams response type.
 */
export type IbcCoreChannelMsgUpdateParamsResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgPruneAcknowledgements} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: limit -
 *   - 3: signer -
 */
export declare const destructIbcCoreChannelMsgPruneAcknowledgements: (g_struct: IbcCoreChannelMsgPruneAcknowledgements) => [port_id?: string, channel_id?: string, limit?: CwUint64, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_PRUNE_ACKNOWLEDGEMENTS = "/ibc.core.channel.v1.MsgPruneAcknowledgements";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgPruneAcknowledgements` - defines the request type for the PruneAcknowledgements rpc.
 */
export type IbcCoreChannelMsgPruneAcknowledgements = {
    port_id?: string | undefined;
    channel_id?: string | undefined;
    limit?: CwUint64 | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgPruneAcknowledgementsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_pruned_sequences - Number of sequences pruned (includes both packet acknowledgements and packet receipts where appropriate).
 *   - 1: total_remaining_sequences - Number of sequences left after pruning.
 */
export declare const destructIbcCoreChannelMsgPruneAcknowledgementsResponse: (g_struct: IbcCoreChannelMsgPruneAcknowledgementsResponse) => [total_pruned_sequences?: CwUint64, total_remaining_sequences?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_PRUNE_ACKNOWLEDGEMENTS_RESPONSE = "/ibc.core.channel.v1.MsgPruneAcknowledgementsResponse";
/**
 * JSON serialization of `ibc.core.channel.v1.MsgPruneAcknowledgementsResponse` - defines the response type for the PruneAcknowledgements rpc.
 */
export type IbcCoreChannelMsgPruneAcknowledgementsResponse = {
    total_pruned_sequences?: CwUint64 | undefined;
    total_remaining_sequences?: CwUint64 | undefined;
};
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_UNSPECIFIED** - Default zero value enumeration
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export declare const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_UNSPECIFIED** - Default zero value enumeration
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export declare const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED = "UNSPECIFIED";
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_NOOP** - The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export declare const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP = 1;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_NOOP** - The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export declare const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP = "NOOP";
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_SUCCESS** - The message was executed successfully
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export declare const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS = 2;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_SUCCESS** - The message was executed successfully
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export declare const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS = "SUCCESS";
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_FAILURE** - The message was executed unsuccessfully
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export declare const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE = 3;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_FAILURE** - The message was executed unsuccessfully
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export declare const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE = "FAILURE";
/**
 * Raw protobuf enum values for `ibc.core.channel.v1.ResponseResultType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED}
 *   - {@link XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP}
 *   - {@link XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS}
 *   - {@link XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE}
 */
export type ProtoEnumIbcCoreChannelResponseResultType = typeof XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED | typeof XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP | typeof XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS | typeof XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE;
/**
 * JSON enum values for `ibc.core.channel.v1.ResponseResultType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED}
 *   - {@link SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP}
 *   - {@link SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS}
 *   - {@link SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE}
 */
export type JsonEnumIbcCoreChannelResponseResultType = typeof SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED | typeof SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP | typeof SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS | typeof SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE;
/**
 * Maps a protobuf enum int value for `ibc.core.channel.v1.ResponseResultType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumIbcCoreChannelResponseResultType: Record<ProtoEnumIbcCoreChannelResponseResultType, JsonEnumIbcCoreChannelResponseResultType>;
/**
 * Maps a JSON enum string value for `ibc.core.channel.v1.ResponseResultType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumIbcCoreChannelResponseResultType: Record<JsonEnumIbcCoreChannelResponseResultType, ProtoEnumIbcCoreChannelResponseResultType>;
