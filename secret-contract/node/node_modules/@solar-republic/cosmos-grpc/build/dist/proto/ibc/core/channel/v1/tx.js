import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeIbcCoreChannelChannel, decodeIbcCoreChannelPacket, decodeIbcCoreChannelParams } from './channel.js';
import { decodeIbcCoreChannelUpgradeFields, decodeIbcCoreChannelUpgrade, decodeIbcCoreChannelErrorReceipt } from './upgrade.js';
import { decodeIbcCoreClientHeight } from '../../client/v1/client.js';
/**
 * Encodes a `MsgChannelOpenInit` protobuf message: defines an sdk.Msg to initialize a channel handshake. It is called by a relayer on Chain A.
 * @param si_port - `port_id`:
 * @param g_channel - `channel`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenInit = (si_port, atu8_channel, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .b(atu8_channel) // Channel channel = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgChannelOpenInitResponse` protobuf message: defines the Msg/ChannelOpenInit response type.
 * @param si_channel - `channel_id`:
 * @param s_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenInitResponse = (si_channel, s_version) => Protobuf() // ...
    .s(si_channel) // string channel_id = 1
    .s(s_version) // string version = 2
    .o;
/**
 * Encodes a `MsgChannelOpenTry` protobuf message: MsgChannelOpenInit defines a msg sent by a Relayer to try to open a channel on Chain B. The version field within the Channel field has been deprecated. Its value will be ignored by core IBC.
 * @param si_port - `port_id`:
 * @param si_previous_channel - `previous_channel_id`: Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
 * @param g_channel - `channel`: NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
 * @param s_counterparty_version - `counterparty_version`:
 * @param atu8_proof_init - `proof_init`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenTry = (si_port, si_previous_channel, atu8_channel, s_counterparty_version, atu8_proof_init, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_previous_channel) // string previous_channel_id = 2
    .b(atu8_channel) // Channel channel = 3
    .s(s_counterparty_version) // string counterparty_version = 4
    .b(atu8_proof_init) // bytes proof_init = 5
    .b(atu8_proof_height) // Height proof_height = 6
    .s(s_signer) // string signer = 7
    .o;
/**
 * Encodes a `MsgChannelOpenTryResponse` protobuf message: defines the Msg/ChannelOpenTry response type.
 * @param s_version - `version`:
 * @param si_channel - `channel_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenTryResponse = (s_version, si_channel) => Protobuf() // ...
    .s(s_version) // string version = 1
    .s(si_channel) // string channel_id = 2
    .o;
/**
 * Encodes a `MsgChannelOpenAck` protobuf message: defines a msg sent by a Relayer to Chain A to acknowledge the change of channel state to TRYOPEN on Chain B. WARNING: a channel upgrade MUST NOT initialize an upgrade for this channel in the same block as executing this message otherwise the counterparty will be incapable of opening.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param si_counterparty_channel - `counterparty_channel_id`:
 * @param s_counterparty_version - `counterparty_version`:
 * @param atu8_proof_try - `proof_try`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenAck = (si_port, si_channel, si_counterparty_channel, s_counterparty_version, atu8_proof_try, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .s(si_counterparty_channel) // string counterparty_channel_id = 3
    .s(s_counterparty_version) // string counterparty_version = 4
    .b(atu8_proof_try) // bytes proof_try = 5
    .b(atu8_proof_height) // Height proof_height = 6
    .s(s_signer) // string signer = 7
    .o;
/**
 * Encodes a `MsgChannelOpenAckResponse` protobuf message: defines the Msg/ChannelOpenAck response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenAckResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgChannelOpenConfirm` protobuf message: defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to OPEN on Chain A.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param atu8_proof_ack - `proof_ack`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenConfirm = (si_port, si_channel, atu8_proof_ack, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_proof_ack) // bytes proof_ack = 3
    .b(atu8_proof_height) // Height proof_height = 4
    .s(s_signer) // string signer = 5
    .o;
/**
 * Encodes a `MsgChannelOpenConfirmResponse` protobuf message: defines the Msg/ChannelOpenConfirm response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelOpenConfirmResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgChannelCloseInit` protobuf message: defines a msg sent by a Relayer to Chain A to close a channel with Chain B.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelCloseInit = (si_port, si_channel, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .s(s_signer) // string signer = 3
    .o;
/**
 * Encodes a `MsgChannelCloseInitResponse` protobuf message: defines the Msg/ChannelCloseInit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelCloseInitResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgChannelCloseConfirm` protobuf message: defines a msg sent by a Relayer to Chain B to acknowledge the change of channel state to CLOSED on Chain A.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param atu8_proof_init - `proof_init`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelCloseConfirm = (si_port, si_channel, atu8_proof_init, atu8_proof_height, s_signer, sg_counterparty_upgrade_sequence) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_proof_init) // bytes proof_init = 3
    .b(atu8_proof_height) // Height proof_height = 4
    .s(s_signer) // string signer = 5
    .g(sg_counterparty_upgrade_sequence) // uint64 counterparty_upgrade_sequence = 6
    .o;
/**
 * Encodes a `MsgChannelCloseConfirmResponse` protobuf message: defines the Msg/ChannelCloseConfirm response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelCloseConfirmResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgRecvPacket` protobuf message: receives incoming IBC packet
 * @param g_packet - `packet`:
 * @param atu8_proof_commitment - `proof_commitment`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgRecvPacket = (atu8_packet, atu8_proof_commitment, atu8_proof_height, s_signer) => Protobuf() // ...
    .b(atu8_packet) // Packet packet = 1
    .b(atu8_proof_commitment) // bytes proof_commitment = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .s(s_signer) // string signer = 4
    .o;
/**
 * Encodes a `MsgRecvPacketResponse` protobuf message: defines the Msg/RecvPacket response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgRecvPacketResponse = (xc_result) => Protobuf() // ...
    .v(xc_result) // ResponseResultType result = 1
    .o;
/**
 * Encodes a `MsgTimeout` protobuf message: receives timed-out packet
 * @param g_packet - `packet`:
 * @param atu8_proof_unreceived - `proof_unreceived`:
 * @param g_proof_height - `proof_height`:
 * @param sg_next_sequence_recv - `next_sequence_recv`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgTimeout = (atu8_packet, atu8_proof_unreceived, atu8_proof_height, sg_next_sequence_recv, s_signer) => Protobuf() // ...
    .b(atu8_packet) // Packet packet = 1
    .b(atu8_proof_unreceived) // bytes proof_unreceived = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .g(sg_next_sequence_recv) // uint64 next_sequence_recv = 4
    .s(s_signer) // string signer = 5
    .o;
/**
 * Encodes a `MsgTimeoutResponse` protobuf message: defines the Msg/Timeout response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgTimeoutResponse = (xc_result) => Protobuf() // ...
    .v(xc_result) // ResponseResultType result = 1
    .o;
/**
 * Encodes a `MsgTimeoutOnClose` protobuf message: timed-out packet upon counterparty channel closure.
 * @param g_packet - `packet`:
 * @param atu8_proof_unreceived - `proof_unreceived`:
 * @param atu8_proof_close - `proof_close`:
 * @param g_proof_height - `proof_height`:
 * @param sg_next_sequence_recv - `next_sequence_recv`:
 * @param s_signer - `signer`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgTimeoutOnClose = (atu8_packet, atu8_proof_unreceived, atu8_proof_close, atu8_proof_height, sg_next_sequence_recv, s_signer, sg_counterparty_upgrade_sequence) => Protobuf() // ...
    .b(atu8_packet) // Packet packet = 1
    .b(atu8_proof_unreceived) // bytes proof_unreceived = 2
    .b(atu8_proof_close) // bytes proof_close = 3
    .b(atu8_proof_height) // Height proof_height = 4
    .g(sg_next_sequence_recv) // uint64 next_sequence_recv = 5
    .s(s_signer) // string signer = 6
    .g(sg_counterparty_upgrade_sequence) // uint64 counterparty_upgrade_sequence = 7
    .o;
/**
 * Encodes a `MsgTimeoutOnCloseResponse` protobuf message: defines the Msg/TimeoutOnClose response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgTimeoutOnCloseResponse = (xc_result) => Protobuf() // ...
    .v(xc_result) // ResponseResultType result = 1
    .o;
/**
 * Encodes a `MsgAcknowledgement` protobuf message: receives incoming IBC acknowledgement
 * @param g_packet - `packet`:
 * @param atu8_acknowledgement - `acknowledgement`:
 * @param atu8_proof_acked - `proof_acked`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgAcknowledgement = (atu8_packet, atu8_acknowledgement, atu8_proof_acked, atu8_proof_height, s_signer) => Protobuf() // ...
    .b(atu8_packet) // Packet packet = 1
    .b(atu8_acknowledgement) // bytes acknowledgement = 2
    .b(atu8_proof_acked) // bytes proof_acked = 3
    .b(atu8_proof_height) // Height proof_height = 4
    .s(s_signer) // string signer = 5
    .o;
/**
 * Encodes a `MsgAcknowledgementResponse` protobuf message: defines the Msg/Acknowledgement response type.
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgAcknowledgementResponse = (xc_result) => Protobuf() // ...
    .v(xc_result) // ResponseResultType result = 1
    .o;
/**
 * Encodes a `MsgChannelUpgradeInit` protobuf message: defines the request type for the ChannelUpgradeInit rpc WARNING: Initializing a channel upgrade in the same block as opening the channel may result in the counterparty being incapable of opening.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_fields - `fields`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeInit = (si_port, si_channel, atu8_fields, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_fields) // UpgradeFields fields = 3
    .s(s_signer) // string signer = 4
    .o;
/**
 * Encodes a `MsgChannelUpgradeInitResponse` protobuf message: defines the MsgChannelUpgradeInit response type
 * @param g_upgrade - `upgrade`:
 * @param sg_upgrade_sequence - `upgrade_sequence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeInitResponse = (atu8_upgrade, sg_upgrade_sequence) => Protobuf() // ...
    .b(atu8_upgrade) // Upgrade upgrade = 1
    .g(sg_upgrade_sequence) // uint64 upgrade_sequence = 2
    .o;
/**
 * Encodes a `MsgChannelUpgradeTry` protobuf message: defines the request type for the ChannelUpgradeTry rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param a_proposed_upgrade_connection_hops - `proposed_upgrade_connection_hops`:
 * @param g_counterparty_upgrade_fields - `counterparty_upgrade_fields`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param atu8_proof_upgrade - `proof_upgrade`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeTry = (si_port, si_channel, a_proposed_upgrade_connection_hops, atu8_counterparty_upgrade_fields, sg_counterparty_upgrade_sequence, atu8_proof_channel, atu8_proof_upgrade, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .S(a_proposed_upgrade_connection_hops) // string[] proposed_upgrade_connection_hops = 3
    .b(atu8_counterparty_upgrade_fields) // UpgradeFields counterparty_upgrade_fields = 4
    .g(sg_counterparty_upgrade_sequence) // uint64 counterparty_upgrade_sequence = 5
    .b(atu8_proof_channel) // bytes proof_channel = 6
    .b(atu8_proof_upgrade) // bytes proof_upgrade = 7
    .b(atu8_proof_height) // Height proof_height = 8
    .s(s_signer) // string signer = 9
    .o;
/**
 * Encodes a `MsgChannelUpgradeTryResponse` protobuf message: defines the MsgChannelUpgradeTry response type
 * @param g_upgrade - `upgrade`:
 * @param sg_upgrade_sequence - `upgrade_sequence`:
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeTryResponse = (atu8_upgrade, sg_upgrade_sequence, xc_result) => Protobuf() // ...
    .b(atu8_upgrade) // Upgrade upgrade = 1
    .g(sg_upgrade_sequence) // uint64 upgrade_sequence = 2
    .v(xc_result) // ResponseResultType result = 3
    .o;
/**
 * Encodes a `MsgChannelUpgradeAck` protobuf message: defines the request type for the ChannelUpgradeAck rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_counterparty_upgrade - `counterparty_upgrade`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param atu8_proof_upgrade - `proof_upgrade`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeAck = (si_port, si_channel, atu8_counterparty_upgrade, atu8_proof_channel, atu8_proof_upgrade, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_counterparty_upgrade) // Upgrade counterparty_upgrade = 3
    .b(atu8_proof_channel) // bytes proof_channel = 4
    .b(atu8_proof_upgrade) // bytes proof_upgrade = 5
    .b(atu8_proof_height) // Height proof_height = 6
    .s(s_signer) // string signer = 7
    .o;
/**
 * Encodes a `MsgChannelUpgradeAckResponse` protobuf message: defines MsgChannelUpgradeAck response type
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeAckResponse = (xc_result) => Protobuf() // ...
    .v(xc_result) // ResponseResultType result = 1
    .o;
/**
 * Encodes a `MsgChannelUpgradeConfirm` protobuf message: defines the request type for the ChannelUpgradeConfirm rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param xc_counterparty_channel_state - `counterparty_channel_state`:
 * @param g_counterparty_upgrade - `counterparty_upgrade`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param atu8_proof_upgrade - `proof_upgrade`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeConfirm = (si_port, si_channel, xc_counterparty_channel_state, atu8_counterparty_upgrade, atu8_proof_channel, atu8_proof_upgrade, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .v(xc_counterparty_channel_state) // State counterparty_channel_state = 3
    .b(atu8_counterparty_upgrade) // Upgrade counterparty_upgrade = 4
    .b(atu8_proof_channel) // bytes proof_channel = 5
    .b(atu8_proof_upgrade) // bytes proof_upgrade = 6
    .b(atu8_proof_height) // Height proof_height = 7
    .s(s_signer) // string signer = 8
    .o;
/**
 * Encodes a `MsgChannelUpgradeConfirmResponse` protobuf message: defines MsgChannelUpgradeConfirm response type
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeConfirmResponse = (xc_result) => Protobuf() // ...
    .v(xc_result) // ResponseResultType result = 1
    .o;
/**
 * Encodes a `MsgChannelUpgradeOpen` protobuf message: defines the request type for the ChannelUpgradeOpen rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param xc_counterparty_channel_state - `counterparty_channel_state`:
 * @param sg_counterparty_upgrade_sequence - `counterparty_upgrade_sequence`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeOpen = (si_port, si_channel, xc_counterparty_channel_state, sg_counterparty_upgrade_sequence, atu8_proof_channel, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .v(xc_counterparty_channel_state) // State counterparty_channel_state = 3
    .g(sg_counterparty_upgrade_sequence) // uint64 counterparty_upgrade_sequence = 4
    .b(atu8_proof_channel) // bytes proof_channel = 5
    .b(atu8_proof_height) // Height proof_height = 6
    .s(s_signer) // string signer = 7
    .o;
/**
 * Encodes a `MsgChannelUpgradeOpenResponse` protobuf message: defines the MsgChannelUpgradeOpen response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeOpenResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgChannelUpgradeTimeout` protobuf message: defines the request type for the ChannelUpgradeTimeout rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_counterparty_channel - `counterparty_channel`:
 * @param atu8_proof_channel - `proof_channel`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeTimeout = (si_port, si_channel, atu8_counterparty_channel, atu8_proof_channel, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_counterparty_channel) // Channel counterparty_channel = 3
    .b(atu8_proof_channel) // bytes proof_channel = 4
    .b(atu8_proof_height) // Height proof_height = 5
    .s(s_signer) // string signer = 6
    .o;
/**
 * Encodes a `MsgChannelUpgradeTimeoutResponse` protobuf message: MsgChannelUpgradeTimeoutRepsonse defines the MsgChannelUpgradeTimeout response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeTimeoutResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgChannelUpgradeCancel` protobuf message: defines the request type for the ChannelUpgradeCancel rpc
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param g_error_receipt - `error_receipt`:
 * @param atu8_proof_error_receipt - `proof_error_receipt`:
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeCancel = (si_port, si_channel, atu8_error_receipt, atu8_proof_error_receipt, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .b(atu8_error_receipt) // ErrorReceipt error_receipt = 3
    .b(atu8_proof_error_receipt) // bytes proof_error_receipt = 4
    .b(atu8_proof_height) // Height proof_height = 5
    .s(s_signer) // string signer = 6
    .o;
/**
 * Encodes a `MsgChannelUpgradeCancelResponse` protobuf message: defines the MsgChannelUpgradeCancel response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgChannelUpgradeCancelResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the MsgUpdateParams request type.
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the channel parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the MsgUpdateParams response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgPruneAcknowledgements` protobuf message: defines the request type for the PruneAcknowledgements rpc.
 * @param si_port - `port_id`:
 * @param si_channel - `channel_id`:
 * @param sg_limit - `limit`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgPruneAcknowledgements = (si_port, si_channel, sg_limit, s_signer) => Protobuf() // ...
    .s(si_port) // string port_id = 1
    .s(si_channel) // string channel_id = 2
    .g(sg_limit) // uint64 limit = 3
    .s(s_signer) // string signer = 4
    .o;
/**
 * Encodes a `MsgPruneAcknowledgementsResponse` protobuf message: defines the response type for the PruneAcknowledgements rpc.
 * @param sg_total_pruned_sequences - `total_pruned_sequences`: Number of sequences pruned (includes both packet acknowledgements and packet receipts where appropriate).
 * @param sg_total_remaining_sequences - `total_remaining_sequences`: Number of sequences left after pruning.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelMsgPruneAcknowledgementsResponse = (sg_total_pruned_sequences, sg_total_remaining_sequences) => Protobuf() // ...
    .g(sg_total_pruned_sequences) // uint64 total_pruned_sequences = 1
    .g(sg_total_remaining_sequences) // uint64 total_remaining_sequences = 2
    .o;
/**
 * Decodes a protobuf ChannelOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenInit}
 */
export const decodeIbcCoreChannelMsgChannelOpenInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5], [0, decodeIbcCoreChannelChannel]);
/**
 * Decodes a protobuf ChannelOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenInitResponse}
 */
export const decodeIbcCoreChannelMsgChannelOpenInitResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ChannelOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenTry}
 */
export const decodeIbcCoreChannelMsgChannelOpenTry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 5, 1, 1, 5], [0, 0, decodeIbcCoreChannelChannel, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenTryResponse}
 */
export const decodeIbcCoreChannelMsgChannelOpenTryResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ChannelOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenAck}
 */
export const decodeIbcCoreChannelMsgChannelOpenAck = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5, 1, 1, 5], [0, 0, 0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenAckResponse}
 */
export const decodeIbcCoreChannelMsgChannelOpenAckResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ChannelOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenConfirm}
 */
export const decodeIbcCoreChannelMsgChannelOpenConfirm = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 5], [0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelOpenConfirmResponse}
 */
export const decodeIbcCoreChannelMsgChannelOpenConfirmResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ChannelCloseInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseInit}
 */
export const decodeIbcCoreChannelMsgChannelCloseInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf ChannelCloseInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseInitResponse}
 */
export const decodeIbcCoreChannelMsgChannelCloseInitResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ChannelCloseConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseConfirm}
 */
export const decodeIbcCoreChannelMsgChannelCloseConfirm = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 5, 3], [0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelCloseConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelCloseConfirmResponse}
 */
export const decodeIbcCoreChannelMsgChannelCloseConfirmResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RecvPacket message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgRecvPacket}
 */
export const decodeIbcCoreChannelMsgRecvPacket = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 5], [decodeIbcCoreChannelPacket, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf RecvPacket message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgRecvPacketResponse}
 */
export const decodeIbcCoreChannelMsgRecvPacketResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf Timeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeout}
 */
export const decodeIbcCoreChannelMsgTimeout = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 3, 5], [decodeIbcCoreChannelPacket, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf Timeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeoutResponse}
 */
export const decodeIbcCoreChannelMsgTimeoutResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf TimeoutOnClose message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeoutOnClose}
 */
export const decodeIbcCoreChannelMsgTimeoutOnClose = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1, 3, 5, 3], [decodeIbcCoreChannelPacket, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf TimeoutOnClose message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgTimeoutOnCloseResponse}
 */
export const decodeIbcCoreChannelMsgTimeoutOnCloseResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf Acknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgAcknowledgement}
 */
export const decodeIbcCoreChannelMsgAcknowledgement = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1, 5], [decodeIbcCoreChannelPacket, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf Acknowledgement message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgAcknowledgementResponse}
 */
export const decodeIbcCoreChannelMsgAcknowledgementResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ChannelUpgradeInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeInit}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 5], [0, 0, decodeIbcCoreChannelUpgradeFields]);
/**
 * Decodes a protobuf ChannelUpgradeInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeInitResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeInitResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeIbcCoreChannelUpgrade]);
/**
 * Decodes a protobuf ChannelUpgradeTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTry}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeTry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 4, 1, 3, 1, 1, 1, 5], [0, 0, 0, decodeIbcCoreChannelUpgradeFields, 0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelUpgradeTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTryResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeTryResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 1], [decodeIbcCoreChannelUpgrade]);
/**
 * Decodes a protobuf ChannelUpgradeAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeAck}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeAck = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 1, 1, 5], [0, 0, decodeIbcCoreChannelUpgrade, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelUpgradeAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeAckResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeAckResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ChannelUpgradeConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeConfirm}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeConfirm = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 1, 1, 1, 5], [0, 0, 0, decodeIbcCoreChannelUpgrade, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelUpgradeConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeConfirmResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeConfirmResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ChannelUpgradeOpen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeOpen}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeOpen = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 3, 1, 1, 5], [0, 0, 0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelUpgradeOpen message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeOpenResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeOpenResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ChannelUpgradeTimeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTimeout}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeTimeout = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 1, 5], [0, 0, decodeIbcCoreChannelChannel, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelUpgradeTimeout message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeTimeoutResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeTimeoutResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ChannelUpgradeCancel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeCancel}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeCancel = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 1, 5], [0, 0, decodeIbcCoreChannelErrorReceipt, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ChannelUpgradeCancel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgChannelUpgradeCancelResponse}
 */
export const decodeIbcCoreChannelMsgChannelUpgradeCancelResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgUpdateParams}
 */
export const decodeIbcCoreChannelMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeIbcCoreChannelParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgUpdateParamsResponse}
 */
export const decodeIbcCoreChannelMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf PruneAcknowledgements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgPruneAcknowledgements}
 */
export const decodeIbcCoreChannelMsgPruneAcknowledgements = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 5]);
/**
 * Decodes a protobuf PruneAcknowledgements message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelMsgPruneAcknowledgementsResponse}
 */
export const decodeIbcCoreChannelMsgPruneAcknowledgementsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel -
 *   - 2: signer -
 */
export const destructIbcCoreChannelMsgChannelOpenInit = (g_struct) => [g_struct.port_id, g_struct.channel, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_INIT = '/ibc.core.channel.v1.MsgChannelOpenInit';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: channel_id -
 *   - 1: version -
 */
export const destructIbcCoreChannelMsgChannelOpenInitResponse = (g_struct) => [g_struct.channel_id, g_struct.version];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_INIT_RESPONSE = '/ibc.core.channel.v1.MsgChannelOpenInitResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenTry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: previous_channel_id - Deprecated: this field is unused. Crossing hello's are no longer supported in core IBC.
 *   - 2: channel - NOTE: the version field within the channel has been deprecated. Its value will be ignored by core IBC.
 *   - 3: counterparty_version -
 *   - 4: proof_init -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export const destructIbcCoreChannelMsgChannelOpenTry = (g_struct) => [g_struct.port_id, g_struct.previous_channel_id, g_struct.channel, g_struct.counterparty_version, safe_base64_to_bytes(g_struct.proof_init), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_TRY = '/ibc.core.channel.v1.MsgChannelOpenTry';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenTryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: channel_id -
 */
export const destructIbcCoreChannelMsgChannelOpenTryResponse = (g_struct) => [g_struct.version, g_struct.channel_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_TRY_RESPONSE = '/ibc.core.channel.v1.MsgChannelOpenTryResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_id -
 *   - 3: counterparty_version -
 *   - 4: proof_try -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export const destructIbcCoreChannelMsgChannelOpenAck = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.counterparty_channel_id, g_struct.counterparty_version, safe_base64_to_bytes(g_struct.proof_try), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_ACK = '/ibc.core.channel.v1.MsgChannelOpenAck';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelOpenAckResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_ACK_RESPONSE = '/ibc.core.channel.v1.MsgChannelOpenAckResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proof_ack -
 *   - 3: proof_height -
 *   - 4: signer -
 */
export const destructIbcCoreChannelMsgChannelOpenConfirm = (g_struct) => [g_struct.port_id, g_struct.channel_id, safe_base64_to_bytes(g_struct.proof_ack), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_CONFIRM = '/ibc.core.channel.v1.MsgChannelOpenConfirm';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelOpenConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelOpenConfirmResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_OPEN_CONFIRM_RESPONSE = '/ibc.core.channel.v1.MsgChannelOpenConfirmResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: signer -
 */
export const destructIbcCoreChannelMsgChannelCloseInit = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_INIT = '/ibc.core.channel.v1.MsgChannelCloseInit';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelCloseInitResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_INIT_RESPONSE = '/ibc.core.channel.v1.MsgChannelCloseInitResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proof_init -
 *   - 3: proof_height -
 *   - 4: signer -
 *   - 5: counterparty_upgrade_sequence -
 */
export const destructIbcCoreChannelMsgChannelCloseConfirm = (g_struct) => [g_struct.port_id, g_struct.channel_id, safe_base64_to_bytes(g_struct.proof_init), g_struct.proof_height, g_struct.signer, g_struct.counterparty_upgrade_sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_CONFIRM = '/ibc.core.channel.v1.MsgChannelCloseConfirm';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelCloseConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelCloseConfirmResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_CLOSE_CONFIRM_RESPONSE = '/ibc.core.channel.v1.MsgChannelCloseConfirmResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgRecvPacket} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: proof_commitment -
 *   - 2: proof_height -
 *   - 3: signer -
 */
export const destructIbcCoreChannelMsgRecvPacket = (g_struct) => [g_struct.packet, safe_base64_to_bytes(g_struct.proof_commitment), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_RECV_PACKET = '/ibc.core.channel.v1.MsgRecvPacket';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgRecvPacketResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructIbcCoreChannelMsgRecvPacketResponse = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_RECV_PACKET_RESPONSE = '/ibc.core.channel.v1.MsgRecvPacketResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeout} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: proof_unreceived -
 *   - 2: proof_height -
 *   - 3: next_sequence_recv -
 *   - 4: signer -
 */
export const destructIbcCoreChannelMsgTimeout = (g_struct) => [g_struct.packet, safe_base64_to_bytes(g_struct.proof_unreceived), g_struct.proof_height, g_struct.next_sequence_recv, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT = '/ibc.core.channel.v1.MsgTimeout';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeoutResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructIbcCoreChannelMsgTimeoutResponse = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT_RESPONSE = '/ibc.core.channel.v1.MsgTimeoutResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeoutOnClose} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: proof_unreceived -
 *   - 2: proof_close -
 *   - 3: proof_height -
 *   - 4: next_sequence_recv -
 *   - 5: signer -
 *   - 6: counterparty_upgrade_sequence -
 */
export const destructIbcCoreChannelMsgTimeoutOnClose = (g_struct) => [g_struct.packet, safe_base64_to_bytes(g_struct.proof_unreceived), safe_base64_to_bytes(g_struct.proof_close), g_struct.proof_height, g_struct.next_sequence_recv, g_struct.signer, g_struct.counterparty_upgrade_sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT_ON_CLOSE = '/ibc.core.channel.v1.MsgTimeoutOnClose';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgTimeoutOnCloseResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructIbcCoreChannelMsgTimeoutOnCloseResponse = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_TIMEOUT_ON_CLOSE_RESPONSE = '/ibc.core.channel.v1.MsgTimeoutOnCloseResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgAcknowledgement} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: packet -
 *   - 1: acknowledgement -
 *   - 2: proof_acked -
 *   - 3: proof_height -
 *   - 4: signer -
 */
export const destructIbcCoreChannelMsgAcknowledgement = (g_struct) => [g_struct.packet, safe_base64_to_bytes(g_struct.acknowledgement), safe_base64_to_bytes(g_struct.proof_acked), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_ACKNOWLEDGEMENT = '/ibc.core.channel.v1.MsgAcknowledgement';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgAcknowledgementResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructIbcCoreChannelMsgAcknowledgementResponse = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_ACKNOWLEDGEMENT_RESPONSE = '/ibc.core.channel.v1.MsgAcknowledgementResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: fields -
 *   - 3: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeInit = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.fields, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_INIT = '/ibc.core.channel.v1.MsgChannelUpgradeInit';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upgrade -
 *   - 1: upgrade_sequence -
 */
export const destructIbcCoreChannelMsgChannelUpgradeInitResponse = (g_struct) => [g_struct.upgrade, g_struct.upgrade_sequence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_INIT_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeInitResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: proposed_upgrade_connection_hops -
 *   - 3: counterparty_upgrade_fields -
 *   - 4: counterparty_upgrade_sequence -
 *   - 5: proof_channel -
 *   - 6: proof_upgrade -
 *   - 7: proof_height -
 *   - 8: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeTry = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.proposed_upgrade_connection_hops, g_struct.counterparty_upgrade_fields, g_struct.counterparty_upgrade_sequence, safe_base64_to_bytes(g_struct.proof_channel), safe_base64_to_bytes(g_struct.proof_upgrade), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TRY = '/ibc.core.channel.v1.MsgChannelUpgradeTry';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upgrade -
 *   - 1: upgrade_sequence -
 *   - 2: result -
 */
export const destructIbcCoreChannelMsgChannelUpgradeTryResponse = (g_struct) => [g_struct.upgrade, g_struct.upgrade_sequence, g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TRY_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeTryResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_upgrade -
 *   - 3: proof_channel -
 *   - 4: proof_upgrade -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeAck = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.counterparty_upgrade, safe_base64_to_bytes(g_struct.proof_channel), safe_base64_to_bytes(g_struct.proof_upgrade), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_ACK = '/ibc.core.channel.v1.MsgChannelUpgradeAck';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructIbcCoreChannelMsgChannelUpgradeAckResponse = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_ACK_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeAckResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_state -
 *   - 3: counterparty_upgrade -
 *   - 4: proof_channel -
 *   - 5: proof_upgrade -
 *   - 6: proof_height -
 *   - 7: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeConfirm = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.counterparty_channel_state, g_struct.counterparty_upgrade, safe_base64_to_bytes(g_struct.proof_channel), safe_base64_to_bytes(g_struct.proof_upgrade), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CONFIRM = '/ibc.core.channel.v1.MsgChannelUpgradeConfirm';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructIbcCoreChannelMsgChannelUpgradeConfirmResponse = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CONFIRM_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeConfirmResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeOpen} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel_state -
 *   - 3: counterparty_upgrade_sequence -
 *   - 4: proof_channel -
 *   - 5: proof_height -
 *   - 6: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeOpen = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.counterparty_channel_state, g_struct.counterparty_upgrade_sequence, safe_base64_to_bytes(g_struct.proof_channel), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_OPEN = '/ibc.core.channel.v1.MsgChannelUpgradeOpen';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeOpenResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelUpgradeOpenResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_OPEN_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeOpenResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTimeout} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: counterparty_channel -
 *   - 3: proof_channel -
 *   - 4: proof_height -
 *   - 5: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeTimeout = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.counterparty_channel, safe_base64_to_bytes(g_struct.proof_channel), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TIMEOUT = '/ibc.core.channel.v1.MsgChannelUpgradeTimeout';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeTimeoutResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelUpgradeTimeoutResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_TIMEOUT_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeTimeoutResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeCancel} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: error_receipt -
 *   - 3: proof_error_receipt -
 *   - 4: proof_height -
 *   - 5: signer -
 */
export const destructIbcCoreChannelMsgChannelUpgradeCancel = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.error_receipt, safe_base64_to_bytes(g_struct.proof_error_receipt), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CANCEL = '/ibc.core.channel.v1.MsgChannelUpgradeCancel';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgChannelUpgradeCancelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgChannelUpgradeCancelResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_CHANNEL_UPGRADE_CANCEL_RESPONSE = '/ibc.core.channel.v1.MsgChannelUpgradeCancelResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the channel parameters to update. NOTE: All parameters must be supplied.
 */
export const destructIbcCoreChannelMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_UPDATE_PARAMS = '/ibc.core.channel.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreChannelMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_UPDATE_PARAMS_RESPONSE = '/ibc.core.channel.v1.MsgUpdateParamsResponse';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgPruneAcknowledgements} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: port_id -
 *   - 1: channel_id -
 *   - 2: limit -
 *   - 3: signer -
 */
export const destructIbcCoreChannelMsgPruneAcknowledgements = (g_struct) => [g_struct.port_id, g_struct.channel_id, g_struct.limit, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_PRUNE_ACKNOWLEDGEMENTS = '/ibc.core.channel.v1.MsgPruneAcknowledgements';
/**
 * Destructures the fields of a {@link IbcCoreChannelMsgPruneAcknowledgementsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_pruned_sequences - Number of sequences pruned (includes both packet acknowledgements and packet receipts where appropriate).
 *   - 1: total_remaining_sequences - Number of sequences left after pruning.
 */
export const destructIbcCoreChannelMsgPruneAcknowledgementsResponse = (g_struct) => [g_struct.total_pruned_sequences, g_struct.total_remaining_sequences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_MSG_PRUNE_ACKNOWLEDGEMENTS_RESPONSE = '/ibc.core.channel.v1.MsgPruneAcknowledgementsResponse';
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_UNSPECIFIED** - Default zero value enumeration
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED = 0;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_UNSPECIFIED** - Default zero value enumeration
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED = 'UNSPECIFIED';
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_NOOP** - The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP = 1;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_NOOP** - The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP = 'NOOP';
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_SUCCESS** - The message was executed successfully
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS = 2;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_SUCCESS** - The message was executed successfully
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS = 'SUCCESS';
/**
 * Protobuf enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_FAILURE** - The message was executed unsuccessfully
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreChannelResponseResultType}
 */
export const XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE = 3;
/**
 * JSON enum value for `ibc.core.channel.v1.ResponseResultType`.
 *
 * **RESPONSE_RESULT_TYPE_FAILURE** - The message was executed unsuccessfully
 *
 * Belongs to enum type {@link JsonEnumIbcCoreChannelResponseResultType}
 */
export const SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE = 'FAILURE';
/**
 * Maps a protobuf enum int value for `ibc.core.channel.v1.ResponseResultType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumIbcCoreChannelResponseResultType = {
    [XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED]: SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED,
    [XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP]: SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP,
    [XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS]: SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS,
    [XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE]: SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE,
};
/**
 * Maps a JSON enum string value for `ibc.core.channel.v1.ResponseResultType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumIbcCoreChannelResponseResultType = {
    [SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED]: XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_UNSPECIFIED,
    [SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP]: XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_NOOP,
    [SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS]: XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_SUCCESS,
    [SI_JSON_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE]: XC_PROTO_IBC_CORE_CHANNEL_RESPONSE_RESULT_TYPE_FAILURE,
};
//# sourceMappingURL=tx.js.map