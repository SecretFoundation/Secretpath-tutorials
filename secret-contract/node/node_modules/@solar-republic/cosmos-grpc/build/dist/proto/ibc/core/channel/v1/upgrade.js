import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { decodeIbcCoreChannelTimeout } from './channel.js';
/**
 * Encodes a `Upgrade` protobuf message: a verifiable type which contains the relevant information for an attempted upgrade. It provides the proposed changes to the channel end, the timeout for this upgrade attempt and the next packet sequence which allows the counterparty to efficiently know the highest sequence it has received. The next sequence send is used for pruning and upgrading from unordered to ordered channels.
 * @param g_fields - `fields`:
 * @param g_timeout - `timeout`:
 * @param sg_next_sequence_send - `next_sequence_send`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelUpgrade = (atu8_fields, atu8_timeout, sg_next_sequence_send) => Protobuf() // ...
    .b(atu8_fields) // UpgradeFields fields = 1
    .b(atu8_timeout) // Timeout timeout = 2
    .g(sg_next_sequence_send) // uint64 next_sequence_send = 3
    .o;
/**
 * Encodes a `UpgradeFields` protobuf message: the fields in a channel end which may be changed during a channel upgrade.
 * @param xc_ordering - `ordering`:
 * @param a_connection_hops - `connection_hops`:
 * @param s_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelUpgradeFields = (xc_ordering, a_connection_hops, s_version) => Protobuf() // ...
    .v(xc_ordering) // Order ordering = 1
    .S(a_connection_hops) // string[] connection_hops = 2
    .s(s_version) // string version = 3
    .o;
/**
 * Encodes a `ErrorReceipt` protobuf message: defines a type which encapsulates the upgrade sequence and error associated with the upgrade handshake failure. When a channel upgrade handshake is aborted both chains are expected to increment to the next sequence.
 * @param sg_sequence - `sequence`: the channel upgrade sequence
 * @param s_message - `message`: the error message detailing the cause of failure
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreChannelErrorReceipt = (sg_sequence, s_message) => Protobuf() // ...
    .g(sg_sequence) // uint64 sequence = 1
    .s(s_message) // string message = 2
    .o;
/**
 * Decodes a protobuf Upgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelUpgrade}
 */
export const decodeIbcCoreChannelUpgrade = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3], [decodeIbcCoreChannelUpgradeFields, decodeIbcCoreChannelTimeout]);
/**
 * Decodes a protobuf UpgradeFields message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelUpgradeFields}
 */
export const decodeIbcCoreChannelUpgradeFields = (atu8_payload) => decode_protobuf(atu8_payload, [1, 4, 5]);
/**
 * Decodes a protobuf ErrorReceipt message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreChannelErrorReceipt}
 */
export const decodeIbcCoreChannelErrorReceipt = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Destructures the fields of a {@link IbcCoreChannelUpgradeFields} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ordering -
 *   - 1: connection_hops -
 *   - 2: version -
 */
export const destructIbcCoreChannelUpgradeFields = (g_struct) => [g_struct.ordering, g_struct.connection_hops, g_struct.version];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_UPGRADE_FIELDS = '/ibc.core.channel.v1.UpgradeFields';
/**
 * Destructures the fields of a {@link IbcCoreChannelUpgrade} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fields -
 *   - 1: timeout -
 *   - 2: next_sequence_send -
 */
export const destructIbcCoreChannelUpgrade = (g_struct) => [g_struct.fields, g_struct.timeout, g_struct.next_sequence_send];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_UPGRADE = '/ibc.core.channel.v1.Upgrade';
/**
 * Destructures the fields of a {@link IbcCoreChannelErrorReceipt} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - the channel upgrade sequence
 *   - 1: message - the error message detailing the cause of failure
 */
export const destructIbcCoreChannelErrorReceipt = (g_struct) => [g_struct.sequence, g_struct.message];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CHANNEL_ERROR_RECEIPT = '/ibc.core.channel.v1.ErrorReceipt';
//# sourceMappingURL=upgrade.js.map