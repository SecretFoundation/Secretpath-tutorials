import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf, any } from '../../../../../api/protobuf-writer.js';
import { decodeCosmosUpgradePlan } from '../../../../cosmos/upgrade/v1beta1/upgrade.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
/**
 * Encodes a `ClientUpdateProposal` protobuf message wrapped in the `Any` container: a legacy governance proposal. If it passes, the substitute client's latest consensus state is copied over to the subject client. The proposal handler may fail if the subject and the substitute do not match in client and chain parameters (with exception to latest height, frozen height, and chain-id). Deprecated: Please use MsgRecoverClient in favour of this message type.
 * @param s_title - `title`: the title of the update proposal
 * @param s_description - `description`: the description of the proposal
 * @param si_subject_client - `subject_client_id`: the client identifier for the client to be updated if the proposal passes
 * @param si_substitute_client - `substitute_client_id`: the substitute client identifier for the client standing in for the subject client
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyClientUpdateProposal = (s_title, s_description, si_subject_client, si_substitute_client) => any('/ibc.core.client.v1.ClientUpdateProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(si_subject_client) // string subject_client_id = 3
    .s(si_substitute_client) // string substitute_client_id = 4
    .o);
/**
 * Encodes a `UpgradeProposal` protobuf message wrapped in the `Any` container: a gov Content type for initiating an IBC breaking upgrade. Deprecated: Please use MsgIBCSoftwareUpgrade in favour of this message type.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param g_plan - `plan`:
 * @param atu8_upgraded_client_state - `upgraded_client_state`: An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyUpgradeProposal = (s_title, s_description, atu8_plan, atu8_upgraded_client_state) => any('/ibc.core.client.v1.UpgradeProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .b(atu8_plan) // Plan plan = 3
    .b(atu8_upgraded_client_state) // Any upgraded_client_state = 4
    .o);
/**
 * Encodes a `IdentifiedClientState` protobuf message: defines a client state with an additional client identifier field.
 * @param si_client - `client_id`: client identifier
 * @param atu8_client_state - `client_state`: client state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientIdentifiedClientState = (si_client, atu8_client_state) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .b(atu8_client_state) // Any client_state = 2
    .o;
/**
 * Encodes a `ConsensusStateWithHeight` protobuf message: defines a consensus state with an additional height field.
 * @param g_height - `height`: consensus state height
 * @param atu8_consensus_state - `consensus_state`: consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientConsensusStateWithHeight = (atu8_height, atu8_consensus_state) => Protobuf() // ...
    .b(atu8_height) // Height height = 1
    .b(atu8_consensus_state) // Any consensus_state = 2
    .o;
/**
 * Encodes a `ClientConsensusStates` protobuf message: defines all the stored consensus states for a given client.
 * @param si_client - `client_id`: client identifier
 * @param a_consensus_states - `consensus_states`: consensus states and their heights associated with the client
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientClientConsensusStates = (si_client, a_consensus_states) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .B(a_consensus_states) // ConsensusStateWithHeight[] consensus_states = 2
    .o;
/**
 * Encodes a `Height` protobuf message: a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset
 * @param sg_revision_number - `revision_number`: the revision that the client is currently on
 * @param sg_revision_height - `revision_height`: the height within the given revision
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientHeight = (sg_revision_number, sg_revision_height) => Protobuf() // ...
    .g(sg_revision_number) // uint64 revision_number = 1
    .g(sg_revision_height) // uint64 revision_height = 2
    .o;
/**
 * Encodes a `Params` protobuf message: defines the set of IBC light client parameters.
 * @param a_allowed_clients - `allowed_clients`: defines the list of allowed client state types which can be created and interacted with. If a client type is removed from the allowed clients list, usage of this client will be disabled until it is added again to the list.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientParams = (a_allowed_clients) => Protobuf() // ...
    .S(a_allowed_clients) // string[] allowed_clients = 1
    .o;
/**
 * Encodes a `ClientUpdateProposal` protobuf message: a legacy governance proposal. If it passes, the substitute client's latest consensus state is copied over to the subject client. The proposal handler may fail if the subject and the substitute do not match in client and chain parameters (with exception to latest height, frozen height, and chain-id). Deprecated: Please use MsgRecoverClient in favour of this message type.
 * @param s_title - `title`: the title of the update proposal
 * @param s_description - `description`: the description of the proposal
 * @param si_subject_client - `subject_client_id`: the client identifier for the client to be updated if the proposal passes
 * @param si_substitute_client - `substitute_client_id`: the substitute client identifier for the client standing in for the subject client
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientClientUpdateProposal = (s_title, s_description, si_subject_client, si_substitute_client) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(si_subject_client) // string subject_client_id = 3
    .s(si_substitute_client) // string substitute_client_id = 4
    .o;
/**
 * Encodes a `UpgradeProposal` protobuf message: a gov Content type for initiating an IBC breaking upgrade. Deprecated: Please use MsgIBCSoftwareUpgrade in favour of this message type.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param g_plan - `plan`:
 * @param atu8_upgraded_client_state - `upgraded_client_state`: An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreClientUpgradeProposal = (s_title, s_description, atu8_plan, atu8_upgraded_client_state) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .b(atu8_plan) // Plan plan = 3
    .b(atu8_upgraded_client_state) // Any upgraded_client_state = 4
    .o;
/**
 * Decodes a protobuf IdentifiedClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientIdentifiedClientState}
 */
export const decodeIbcCoreClientIdentifiedClientState = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf ConsensusStateWithHeight message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientConsensusStateWithHeight}
 */
export const decodeIbcCoreClientConsensusStateWithHeight = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeIbcCoreClientHeight, decodeGoogleProtobufAny]);
/**
 * Decodes a protobuf ClientConsensusStates message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientClientConsensusStates}
 */
export const decodeIbcCoreClientClientConsensusStates = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeIbcCoreClientConsensusStateWithHeight]);
/**
 * Decodes a protobuf Height message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientHeight}
 */
export const decodeIbcCoreClientHeight = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientParams}
 */
export const decodeIbcCoreClientParams = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf ClientUpdateProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientClientUpdateProposal}
 */
export const decodeIbcCoreClientClientUpdateProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf UpgradeProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientUpgradeProposal}
 */
export const decodeIbcCoreClientUpgradeProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1], [0, 0, decodeCosmosUpgradePlan, decodeGoogleProtobufAny]);
/**
 * Destructures the fields of a {@link IbcCoreClientIdentifiedClientState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client identifier
 *   - 1: client_state - client state
 */
export const destructIbcCoreClientIdentifiedClientState = (g_struct) => [g_struct.client_id, g_struct.client_state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_IDENTIFIED_CLIENT_STATE = '/ibc.core.client.v1.IdentifiedClientState';
/**
 * Destructures the fields of a {@link IbcCoreClientClientConsensusStates} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client identifier
 *   - 1: consensus_states - consensus states and their heights associated with the client
 */
export const destructIbcCoreClientClientConsensusStates = (g_struct) => [g_struct.client_id, g_struct.consensus_states];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_CLIENT_CONSENSUS_STATES = '/ibc.core.client.v1.ClientConsensusStates';
/**
 * Destructures the fields of a {@link IbcCoreClientConsensusStateWithHeight} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height - consensus state height
 *   - 1: consensus_state - consensus state
 */
export const destructIbcCoreClientConsensusStateWithHeight = (g_struct) => [g_struct.height, g_struct.consensus_state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_CONSENSUS_STATE_WITH_HEIGHT = '/ibc.core.client.v1.ConsensusStateWithHeight';
/**
 * Destructures the fields of a {@link IbcCoreClientHeight} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: revision_number - the revision that the client is currently on
 *   - 1: revision_height - the height within the given revision
 */
export const destructIbcCoreClientHeight = (g_struct) => [g_struct.revision_number, g_struct.revision_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_HEIGHT = '/ibc.core.client.v1.Height';
/**
 * Destructures the fields of a {@link IbcCoreClientParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: allowed_clients - defines the list of allowed client state types which can be created and interacted with. If a client type is removed from the allowed clients list, usage of this client will be disabled until it is added again to the list.
 */
export const destructIbcCoreClientParams = (g_struct) => [g_struct.allowed_clients];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_PARAMS = '/ibc.core.client.v1.Params';
/**
 * Destructures the fields of a {@link IbcCoreClientClientUpdateProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title - the title of the update proposal
 *   - 1: description - the description of the proposal
 *   - 2: subject_client_id - the client identifier for the client to be updated if the proposal passes
 *   - 3: substitute_client_id - the substitute client identifier for the client standing in for the subject client
 */
export const destructIbcCoreClientClientUpdateProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.subject_client_id, g_struct.substitute_client_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_CLIENT_UPDATE_PROPOSAL = '/ibc.core.client.v1.ClientUpdateProposal';
/**
 * Destructures the fields of a {@link IbcCoreClientUpgradeProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: plan -
 *   - 3: upgraded_client_state - An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades
 */
export const destructIbcCoreClientUpgradeProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.plan, g_struct.upgraded_client_state];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_UPGRADE_PROPOSAL = '/ibc.core.client.v1.UpgradeProposal';
//# sourceMappingURL=client.js.map