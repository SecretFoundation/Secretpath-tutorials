import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { CosmosUpgradePlan, DecodedCosmosUpgradePlan } from '../../../../cosmos/upgrade/v1beta1/upgrade.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import type { IbcCoreClientParams, DecodedIbcCoreClientParams } from './client.js';
export type EncodedIbcCoreClientMsgCreateClient = Encoded<'/ibc.core.client.v1.MsgCreateClient'>;
export type EncodedIbcCoreClientMsgCreateClientResponse = Encoded<'/ibc.core.client.v1.MsgCreateClientResponse'>;
export type EncodedIbcCoreClientMsgUpdateClient = Encoded<'/ibc.core.client.v1.MsgUpdateClient'>;
export type EncodedIbcCoreClientMsgUpdateClientResponse = Encoded<'/ibc.core.client.v1.MsgUpdateClientResponse'>;
export type EncodedIbcCoreClientMsgUpgradeClient = Encoded<'/ibc.core.client.v1.MsgUpgradeClient'>;
export type EncodedIbcCoreClientMsgUpgradeClientResponse = Encoded<'/ibc.core.client.v1.MsgUpgradeClientResponse'>;
export type EncodedIbcCoreClientMsgSubmitMisbehaviour = Encoded<'/ibc.core.client.v1.MsgSubmitMisbehaviour'>;
export type EncodedIbcCoreClientMsgSubmitMisbehaviourResponse = Encoded<'/ibc.core.client.v1.MsgSubmitMisbehaviourResponse'>;
export type EncodedIbcCoreClientMsgRecoverClient = Encoded<'/ibc.core.client.v1.MsgRecoverClient'>;
export type EncodedIbcCoreClientMsgRecoverClientResponse = Encoded<'/ibc.core.client.v1.MsgRecoverClientResponse'>;
export type EncodedIbcCoreClientMsgIBCSoftwareUpgrade = Encoded<'/ibc.core.client.v1.MsgIBCSoftwareUpgrade'>;
export type EncodedIbcCoreClientMsgIBCSoftwareUpgradeResponse = Encoded<'/ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse'>;
export type EncodedIbcCoreClientMsgUpdateParams = Encoded<'/ibc.core.client.v1.MsgUpdateParams'>;
export type EncodedIbcCoreClientMsgUpdateParamsResponse = Encoded<'/ibc.core.client.v1.MsgUpdateParamsResponse'>;
/**
 * Encodes a `MsgCreateClient` protobuf message: defines a message to create an IBC client
 * @param atu8_client_state - `client_state`: light client state
 * @param atu8_consensus_state - `consensus_state`: consensus state associated with the client that corresponds to a given height.
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgCreateClient: (atu8_client_state?: Opt<Uint8Array>, atu8_consensus_state?: Opt<Uint8Array>, s_signer?: Opt<string>) => EncodedIbcCoreClientMsgCreateClient;
/**
 * Encodes a `MsgCreateClientResponse` protobuf message: defines the Msg/CreateClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgCreateClientResponse: () => EncodedIbcCoreClientMsgCreateClientResponse;
/**
 * Encodes a `MsgUpdateClient` protobuf message: defines an sdk.Msg to update a IBC client state using the given client message.
 * @param si_client - `client_id`: client unique identifier
 * @param atu8_client_message - `client_message`: client message to update the light client
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgUpdateClient: (si_client?: Opt<string>, atu8_client_message?: Opt<Uint8Array>, s_signer?: Opt<string>) => EncodedIbcCoreClientMsgUpdateClient;
/**
 * Encodes a `MsgUpdateClientResponse` protobuf message: defines the Msg/UpdateClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgUpdateClientResponse: () => EncodedIbcCoreClientMsgUpdateClientResponse;
/**
 * Encodes a `MsgUpgradeClient` protobuf message: defines an sdk.Msg to upgrade an IBC client to a new client state
 * @param si_client - `client_id`: client unique identifier
 * @param atu8_client_state - `client_state`: upgraded client state
 * @param atu8_consensus_state - `consensus_state`: upgraded consensus state, only contains enough information to serve as a basis of trust in update logic
 * @param atu8_proof_upgrade_client - `proof_upgrade_client`: proof that old chain committed to new client
 * @param atu8_proof_upgrade_consensus_state - `proof_upgrade_consensus_state`: proof that old chain committed to new consensus state
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgUpgradeClient: (si_client?: Opt<string>, atu8_client_state?: Opt<Uint8Array>, atu8_consensus_state?: Opt<Uint8Array>, atu8_proof_upgrade_client?: Opt<Uint8Array>, atu8_proof_upgrade_consensus_state?: Opt<Uint8Array>, s_signer?: Opt<string>) => EncodedIbcCoreClientMsgUpgradeClient;
/**
 * Encodes a `MsgUpgradeClientResponse` protobuf message: defines the Msg/UpgradeClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgUpgradeClientResponse: () => EncodedIbcCoreClientMsgUpgradeClientResponse;
/**
 * Encodes a `MsgSubmitMisbehaviour` protobuf message: defines an sdk.Msg type that submits Evidence for light client misbehaviour. This message has been deprecated. Use MsgUpdateClient instead.
 * @param si_client - `client_id`: client unique identifier
 * @param atu8_misbehaviour - `misbehaviour`: used for freezing the light client
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgSubmitMisbehaviour: (si_client?: Opt<string>, atu8_misbehaviour?: Opt<Uint8Array>, s_signer?: Opt<string>) => EncodedIbcCoreClientMsgSubmitMisbehaviour;
/**
 * Encodes a `MsgSubmitMisbehaviourResponse` protobuf message: defines the Msg/SubmitMisbehaviour response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgSubmitMisbehaviourResponse: () => EncodedIbcCoreClientMsgSubmitMisbehaviourResponse;
/**
 * Encodes a `MsgRecoverClient` protobuf message: defines the message used to recover a frozen or expired client.
 * @param si_subject_client - `subject_client_id`: the client identifier for the client to be updated if the proposal passes
 * @param si_substitute_client - `substitute_client_id`: the substitute client identifier for the client which will replace the subject client
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgRecoverClient: (si_subject_client?: Opt<string>, si_substitute_client?: Opt<string>, s_signer?: Opt<string>) => EncodedIbcCoreClientMsgRecoverClient;
/**
 * Encodes a `MsgRecoverClientResponse` protobuf message: defines the Msg/RecoverClient response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgRecoverClientResponse: () => EncodedIbcCoreClientMsgRecoverClientResponse;
/**
 * Encodes a `MsgIBCSoftwareUpgrade` protobuf message: defines the message used to schedule an upgrade of an IBC client using a v1 governance proposal
 * @param g_plan - `plan`:
 * @param atu8_upgraded_client_state - `upgraded_client_state`: An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades. Correspondingly, the UpgradedClientState field has been deprecated in the Cosmos SDK to allow for this logic to exist solely in the 02-client module.
 * @param s_signer - `signer`: address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgIBCSoftwareUpgrade: (atu8_plan?: Opt<Encoded<'/cosmos.upgrade.v1beta1.Plan'>>, atu8_upgraded_client_state?: Opt<Uint8Array>, s_signer?: Opt<string>) => EncodedIbcCoreClientMsgIBCSoftwareUpgrade;
/**
 * Encodes a `MsgIBCSoftwareUpgradeResponse` protobuf message: defines the Msg/IBCSoftwareUpgrade response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgIBCSoftwareUpgradeResponse: () => EncodedIbcCoreClientMsgIBCSoftwareUpgradeResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: defines the sdk.Msg type to update the client parameters.
 * @param s_signer - `signer`: address
 * @param g_params - `params`: defines the client parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgUpdateParams: (s_signer?: Opt<string>, atu8_params?: Opt<Encoded<'/ibc.core.client.v1.Params'>>) => EncodedIbcCoreClientMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the MsgUpdateParams response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreClientMsgUpdateParamsResponse: () => EncodedIbcCoreClientMsgUpdateParamsResponse;
/**
 * A decoded protobuf CreateClient message
 *
 * Tuple where:
 *   - 0: client_state - light client state
 *   - 1: consensus_state - consensus state associated with the client that corresponds to a given height.
 *   - 2: signer - address
 */
export type DecodedIbcCoreClientMsgCreateClient = [
    a_client_state?: DecodedGoogleProtobufAny,
    a_consensus_state?: DecodedGoogleProtobufAny,
    s_signer?: string
];
/**
 * Decodes a protobuf CreateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgCreateClient}
 */
export declare const decodeIbcCoreClientMsgCreateClient: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgCreateClient;
/**
 * A decoded protobuf CreateClient message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgCreateClientResponse = [];
/**
 * Decodes a protobuf CreateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgCreateClientResponse}
 */
export declare const decodeIbcCoreClientMsgCreateClientResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateClient message
 *
 * Tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: client_message - client message to update the light client
 *   - 2: signer - address
 */
export type DecodedIbcCoreClientMsgUpdateClient = [
    si_client?: string,
    a_client_message?: DecodedGoogleProtobufAny,
    s_signer?: string
];
/**
 * Decodes a protobuf UpdateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateClient}
 */
export declare const decodeIbcCoreClientMsgUpdateClient: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgUpdateClient;
/**
 * A decoded protobuf UpdateClient message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgUpdateClientResponse = [];
/**
 * Decodes a protobuf UpdateClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateClientResponse}
 */
export declare const decodeIbcCoreClientMsgUpdateClientResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpgradeClient message
 *
 * Tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: client_state - upgraded client state
 *   - 2: consensus_state - upgraded consensus state, only contains enough information to serve as a basis of trust in update logic
 *   - 3: proof_upgrade_client - proof that old chain committed to new client
 *   - 4: proof_upgrade_consensus_state - proof that old chain committed to new consensus state
 *   - 5: signer - address
 */
export type DecodedIbcCoreClientMsgUpgradeClient = [
    si_client?: string,
    a_client_state?: DecodedGoogleProtobufAny,
    a_consensus_state?: DecodedGoogleProtobufAny,
    atu8_proof_upgrade_client?: Uint8Array,
    atu8_proof_upgrade_consensus_state?: Uint8Array,
    s_signer?: string
];
/**
 * Decodes a protobuf UpgradeClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpgradeClient}
 */
export declare const decodeIbcCoreClientMsgUpgradeClient: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgUpgradeClient;
/**
 * A decoded protobuf UpgradeClient message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgUpgradeClientResponse = [];
/**
 * Decodes a protobuf UpgradeClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpgradeClientResponse}
 */
export declare const decodeIbcCoreClientMsgUpgradeClientResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SubmitMisbehaviour message
 *
 * Tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: misbehaviour - used for freezing the light client
 *   - 2: signer - address
 */
export type DecodedIbcCoreClientMsgSubmitMisbehaviour = [
    si_client?: string,
    a_misbehaviour?: DecodedGoogleProtobufAny,
    s_signer?: string
];
/**
 * Decodes a protobuf SubmitMisbehaviour message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgSubmitMisbehaviour}
 */
export declare const decodeIbcCoreClientMsgSubmitMisbehaviour: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgSubmitMisbehaviour;
/**
 * A decoded protobuf SubmitMisbehaviour message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgSubmitMisbehaviourResponse = [];
/**
 * Decodes a protobuf SubmitMisbehaviour message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgSubmitMisbehaviourResponse}
 */
export declare const decodeIbcCoreClientMsgSubmitMisbehaviourResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf RecoverClient message
 *
 * Tuple where:
 *   - 0: subject_client_id - the client identifier for the client to be updated if the proposal passes
 *   - 1: substitute_client_id - the substitute client identifier for the client which will replace the subject client
 *   - 2: signer - address
 */
export type DecodedIbcCoreClientMsgRecoverClient = [
    si_subject_client?: string,
    si_substitute_client?: string,
    s_signer?: string
];
/**
 * Decodes a protobuf RecoverClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgRecoverClient}
 */
export declare const decodeIbcCoreClientMsgRecoverClient: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgRecoverClient;
/**
 * A decoded protobuf RecoverClient message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgRecoverClientResponse = [];
/**
 * Decodes a protobuf RecoverClient message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgRecoverClientResponse}
 */
export declare const decodeIbcCoreClientMsgRecoverClientResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf IBCSoftwareUpgrade message
 *
 * Tuple where:
 *   - 0: plan -
 *   - 1: upgraded_client_state - An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades. Correspondingly, the UpgradedClientState field has been deprecated in the Cosmos SDK to allow for this logic to exist solely in the 02-client module.
 *   - 2: signer - address
 */
export type DecodedIbcCoreClientMsgIBCSoftwareUpgrade = [
    a_plan?: DecodedCosmosUpgradePlan,
    a_upgraded_client_state?: DecodedGoogleProtobufAny,
    s_signer?: string
];
/**
 * Decodes a protobuf IBCSoftwareUpgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgIBCSoftwareUpgrade}
 */
export declare const decodeIbcCoreClientMsgIBCSoftwareUpgrade: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgIBCSoftwareUpgrade;
/**
 * A decoded protobuf IBCSoftwareUpgrade message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgIBCSoftwareUpgradeResponse = [];
/**
 * Decodes a protobuf IBCSoftwareUpgrade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgIBCSoftwareUpgradeResponse}
 */
export declare const decodeIbcCoreClientMsgIBCSoftwareUpgradeResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the client parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedIbcCoreClientMsgUpdateParams = [
    s_signer?: string,
    a_params?: DecodedIbcCoreClientParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateParams}
 */
export declare const decodeIbcCoreClientMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedIbcCoreClientMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedIbcCoreClientMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreClientMsgUpdateParamsResponse}
 */
export declare const decodeIbcCoreClientMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link IbcCoreClientMsgCreateClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_state - light client state
 *   - 1: consensus_state - consensus state associated with the client that corresponds to a given height.
 *   - 2: signer - address
 */
export declare const destructIbcCoreClientMsgCreateClient: (g_struct: IbcCoreClientMsgCreateClient) => [client_state?: JsonAny, consensus_state?: JsonAny, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_CREATE_CLIENT = "/ibc.core.client.v1.MsgCreateClient";
/**
 * JSON serialization of `ibc.core.client.v1.MsgCreateClient` - defines a message to create an IBC client
 */
export type IbcCoreClientMsgCreateClient = {
    client_state?: JsonAny | undefined;
    consensus_state?: JsonAny | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgCreateClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgCreateClientResponse: (g_struct: IbcCoreClientMsgCreateClientResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_CREATE_CLIENT_RESPONSE = "/ibc.core.client.v1.MsgCreateClientResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgCreateClientResponse` - defines the Msg/CreateClient response type.
 */
export type IbcCoreClientMsgCreateClientResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: client_message - client message to update the light client
 *   - 2: signer - address
 */
export declare const destructIbcCoreClientMsgUpdateClient: (g_struct: IbcCoreClientMsgUpdateClient) => [client_id?: string, client_message?: JsonAny, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_CLIENT = "/ibc.core.client.v1.MsgUpdateClient";
/**
 * JSON serialization of `ibc.core.client.v1.MsgUpdateClient` - defines an sdk.Msg to update a IBC client state using the given client message.
 */
export type IbcCoreClientMsgUpdateClient = {
    client_id?: string | undefined;
    client_message?: JsonAny | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgUpdateClientResponse: (g_struct: IbcCoreClientMsgUpdateClientResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_CLIENT_RESPONSE = "/ibc.core.client.v1.MsgUpdateClientResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgUpdateClientResponse` - defines the Msg/UpdateClient response type.
 */
export type IbcCoreClientMsgUpdateClientResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpgradeClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: client_state - upgraded client state
 *   - 2: consensus_state - upgraded consensus state, only contains enough information to serve as a basis of trust in update logic
 *   - 3: proof_upgrade_client - proof that old chain committed to new client
 *   - 4: proof_upgrade_consensus_state - proof that old chain committed to new consensus state
 *   - 5: signer - address
 */
export declare const destructIbcCoreClientMsgUpgradeClient: (g_struct: IbcCoreClientMsgUpgradeClient) => [client_id?: string, client_state?: JsonAny, consensus_state?: JsonAny, proof_upgrade_client?: Uint8Array, proof_upgrade_consensus_state?: Uint8Array, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPGRADE_CLIENT = "/ibc.core.client.v1.MsgUpgradeClient";
/**
 * JSON serialization of `ibc.core.client.v1.MsgUpgradeClient` - defines an sdk.Msg to upgrade an IBC client to a new client state
 */
export type IbcCoreClientMsgUpgradeClient = {
    client_id?: string | undefined;
    client_state?: JsonAny | undefined;
    consensus_state?: JsonAny | undefined;
    proof_upgrade_client?: CwBase64 | undefined;
    proof_upgrade_consensus_state?: CwBase64 | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpgradeClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgUpgradeClientResponse: (g_struct: IbcCoreClientMsgUpgradeClientResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPGRADE_CLIENT_RESPONSE = "/ibc.core.client.v1.MsgUpgradeClientResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgUpgradeClientResponse` - defines the Msg/UpgradeClient response type.
 */
export type IbcCoreClientMsgUpgradeClientResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgSubmitMisbehaviour} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client unique identifier
 *   - 1: misbehaviour - used for freezing the light client
 *   - 2: signer - address
 */
export declare const destructIbcCoreClientMsgSubmitMisbehaviour: (g_struct: IbcCoreClientMsgSubmitMisbehaviour) => [client_id?: string, misbehaviour?: JsonAny, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_SUBMIT_MISBEHAVIOUR = "/ibc.core.client.v1.MsgSubmitMisbehaviour";
/**
 * JSON serialization of `ibc.core.client.v1.MsgSubmitMisbehaviour` - defines an sdk.Msg type that submits Evidence for light client misbehaviour. This message has been deprecated. Use MsgUpdateClient instead.
 */
export type IbcCoreClientMsgSubmitMisbehaviour = {
    client_id?: string | undefined;
    misbehaviour?: JsonAny | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgSubmitMisbehaviourResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgSubmitMisbehaviourResponse: (g_struct: IbcCoreClientMsgSubmitMisbehaviourResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_SUBMIT_MISBEHAVIOUR_RESPONSE = "/ibc.core.client.v1.MsgSubmitMisbehaviourResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgSubmitMisbehaviourResponse` - defines the Msg/SubmitMisbehaviour response type.
 */
export type IbcCoreClientMsgSubmitMisbehaviourResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgRecoverClient} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: subject_client_id - the client identifier for the client to be updated if the proposal passes
 *   - 1: substitute_client_id - the substitute client identifier for the client which will replace the subject client
 *   - 2: signer - address
 */
export declare const destructIbcCoreClientMsgRecoverClient: (g_struct: IbcCoreClientMsgRecoverClient) => [subject_client_id?: string, substitute_client_id?: string, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_RECOVER_CLIENT = "/ibc.core.client.v1.MsgRecoverClient";
/**
 * JSON serialization of `ibc.core.client.v1.MsgRecoverClient` - defines the message used to recover a frozen or expired client.
 */
export type IbcCoreClientMsgRecoverClient = {
    subject_client_id?: string | undefined;
    substitute_client_id?: string | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgRecoverClientResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgRecoverClientResponse: (g_struct: IbcCoreClientMsgRecoverClientResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_RECOVER_CLIENT_RESPONSE = "/ibc.core.client.v1.MsgRecoverClientResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgRecoverClientResponse` - defines the Msg/RecoverClient response type.
 */
export type IbcCoreClientMsgRecoverClientResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgIBCSoftwareUpgrade} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: plan -
 *   - 1: upgraded_client_state - An UpgradedClientState must be provided to perform an IBC breaking upgrade. This will make the chain commit to the correct upgraded (self) client state before the upgrade occurs, so that connecting chains can verify that the new upgraded client is valid by verifying a proof on the previous version of the chain. This will allow IBC connections to persist smoothly across planned chain upgrades. Correspondingly, the UpgradedClientState field has been deprecated in the Cosmos SDK to allow for this logic to exist solely in the 02-client module.
 *   - 2: signer - address
 */
export declare const destructIbcCoreClientMsgIBCSoftwareUpgrade: (g_struct: IbcCoreClientMsgIBCSoftwareUpgrade) => [plan?: CosmosUpgradePlan, upgraded_client_state?: JsonAny, signer?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_I_B_C_SOFTWARE_UPGRADE = "/ibc.core.client.v1.MsgIBCSoftwareUpgrade";
/**
 * JSON serialization of `ibc.core.client.v1.MsgIBCSoftwareUpgrade` - defines the message used to schedule an upgrade of an IBC client using a v1 governance proposal
 */
export type IbcCoreClientMsgIBCSoftwareUpgrade = {
    plan?: CosmosUpgradePlan | undefined;
    upgraded_client_state?: JsonAny | undefined;
    signer?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgIBCSoftwareUpgradeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgIBCSoftwareUpgradeResponse: (g_struct: IbcCoreClientMsgIBCSoftwareUpgradeResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_I_B_C_SOFTWARE_UPGRADE_RESPONSE = "/ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgIBCSoftwareUpgradeResponse` - defines the Msg/IBCSoftwareUpgrade response type.
 */
export type IbcCoreClientMsgIBCSoftwareUpgradeResponse = {};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the client parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructIbcCoreClientMsgUpdateParams: (g_struct: IbcCoreClientMsgUpdateParams) => [signer?: string, params?: IbcCoreClientParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_PARAMS = "/ibc.core.client.v1.MsgUpdateParams";
/**
 * JSON serialization of `ibc.core.client.v1.MsgUpdateParams` - defines the sdk.Msg type to update the client parameters.
 */
export type IbcCoreClientMsgUpdateParams = {
    signer?: string | undefined;
    params?: IbcCoreClientParams | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreClientMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreClientMsgUpdateParamsResponse: (g_struct: IbcCoreClientMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CLIENT_MSG_UPDATE_PARAMS_RESPONSE = "/ibc.core.client.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `ibc.core.client.v1.MsgUpdateParamsResponse` - defines the MsgUpdateParams response type.
 */
export type IbcCoreClientMsgUpdateParamsResponse = {};
