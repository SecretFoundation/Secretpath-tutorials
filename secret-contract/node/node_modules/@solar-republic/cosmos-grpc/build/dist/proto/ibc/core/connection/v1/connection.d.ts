import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { IbcCoreCommitmentMerklePrefix, DecodedIbcCoreCommitmentMerklePrefix } from '../../commitment/v1/commitment.js';
export type EncodedIbcCoreConnectionConnectionEnd = Encoded<'/ibc.core.connection.v1.ConnectionEnd'>;
export type EncodedIbcCoreConnectionIdentifiedConnection = Encoded<'/ibc.core.connection.v1.IdentifiedConnection'>;
export type EncodedIbcCoreConnectionCounterparty = Encoded<'/ibc.core.connection.v1.Counterparty'>;
export type EncodedIbcCoreConnectionClientPaths = Encoded<'/ibc.core.connection.v1.ClientPaths'>;
export type EncodedIbcCoreConnectionConnectionPaths = Encoded<'/ibc.core.connection.v1.ConnectionPaths'>;
export type EncodedIbcCoreConnectionVersion = Encoded<'/ibc.core.connection.v1.Version'>;
export type EncodedIbcCoreConnectionParams = Encoded<'/ibc.core.connection.v1.Params'>;
/**
 * Encodes a `ConnectionEnd` protobuf message: defines a stateful object on a chain connected to another separate one. NOTE: there must only be 2 defined ConnectionEnds to establish a connection between two chains.
 * @param si_client - `client_id`: client associated with this connection.
 * @param a_versions - `versions`: IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
 * @param xc_state - `state`: current state of the connection end.
 * @param g_counterparty - `counterparty`: chain associated with this connection.
 * @param sg_delay_period - `delay_period`: delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionConnectionEnd: (si_client?: Opt<string>, a_versions?: Opt<Encoded<'/ibc.core.connection.v1.Version'>[]>, xc_state?: Opt<ProtoEnumIbcCoreConnectionState>, atu8_counterparty?: Opt<Encoded<'/ibc.core.connection.v1.Counterparty'>>, sg_delay_period?: Opt<WeakUint64Str>) => EncodedIbcCoreConnectionConnectionEnd;
/**
 * Encodes a `IdentifiedConnection` protobuf message: defines a connection with additional connection identifier field.
 * @param s_id - `id`: connection identifier.
 * @param si_client - `client_id`: client associated with this connection.
 * @param a_versions - `versions`: IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection
 * @param xc_state - `state`: current state of the connection end.
 * @param g_counterparty - `counterparty`: chain associated with this connection.
 * @param sg_delay_period - `delay_period`: delay period associated with this connection.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionIdentifiedConnection: (s_id?: Opt<string>, si_client?: Opt<string>, a_versions?: Opt<Encoded<'/ibc.core.connection.v1.Version'>[]>, xc_state?: Opt<ProtoEnumIbcCoreConnectionState>, atu8_counterparty?: Opt<Encoded<'/ibc.core.connection.v1.Counterparty'>>, sg_delay_period?: Opt<WeakUint64Str>) => EncodedIbcCoreConnectionIdentifiedConnection;
/**
 * Encodes a `Counterparty` protobuf message: defines the counterparty chain associated with a connection end.
 * @param si_client - `client_id`: identifies the client on the counterparty chain associated with a given connection.
 * @param si_connection - `connection_id`: identifies the connection end on the counterparty chain associated with a given connection.
 * @param g_prefix - `prefix`: commitment merkle prefix of the counterparty chain.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionCounterparty: (si_client?: Opt<string>, si_connection?: Opt<string>, atu8_prefix?: Opt<Encoded<'/ibc.core.commitment.v1.MerklePrefix'>>) => EncodedIbcCoreConnectionCounterparty;
/**
 * Encodes a `ClientPaths` protobuf message: define all the connection paths for a client state.
 * @param a_paths - `paths`: list of connection paths
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionClientPaths: (a_paths?: Opt<string[]>) => EncodedIbcCoreConnectionClientPaths;
/**
 * Encodes a `ConnectionPaths` protobuf message: define all the connection paths for a given client state.
 * @param si_client - `client_id`: client state unique identifier
 * @param a_paths - `paths`: list of connection paths
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionConnectionPaths: (si_client?: Opt<string>, a_paths?: Opt<string[]>) => EncodedIbcCoreConnectionConnectionPaths;
/**
 * Encodes a `Version` protobuf message: defines the versioning scheme used to negotiate the IBC version in the connection handshake.
 * @param s_identifier - `identifier`: unique version identifier
 * @param a_features - `features`: list of features compatible with the specified identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionVersion: (s_identifier?: Opt<string>, a_features?: Opt<string[]>) => EncodedIbcCoreConnectionVersion;
/**
 * Encodes a `Params` protobuf message: defines the set of Connection parameters.
 * @param sg_max_expected_time_per_block - `max_expected_time_per_block`: maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the largest amount of time that the chain might reasonably take to produce the next block under normal operating conditions. A safe choice is 3-5x the expected time per block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionParams: (sg_max_expected_time_per_block?: Opt<WeakUint64Str>) => EncodedIbcCoreConnectionParams;
/**
 * A decoded protobuf ConnectionEnd message
 *
 * Tuple where:
 *   - 0: client_id - client associated with this connection.
 *   - 1: versions - IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
 *   - 2: state - current state of the connection end.
 *   - 3: counterparty - chain associated with this connection.
 *   - 4: delay_period - delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
 */
export type DecodedIbcCoreConnectionConnectionEnd = [
    si_client?: string,
    a_versions?: DecodedIbcCoreConnectionVersion[],
    xc_state?: ProtoEnumIbcCoreConnectionState,
    a_counterparty?: DecodedIbcCoreConnectionCounterparty,
    sg_delay_period?: CwUint64
];
/**
 * Decodes a protobuf ConnectionEnd message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionConnectionEnd}
 */
export declare const decodeIbcCoreConnectionConnectionEnd: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionConnectionEnd;
/**
 * A decoded protobuf IdentifiedConnection message
 *
 * Tuple where:
 *   - 0: id - connection identifier.
 *   - 1: client_id - client associated with this connection.
 *   - 2: versions - IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection
 *   - 3: state - current state of the connection end.
 *   - 4: counterparty - chain associated with this connection.
 *   - 5: delay_period - delay period associated with this connection.
 */
export type DecodedIbcCoreConnectionIdentifiedConnection = [
    s_id?: string,
    si_client?: string,
    a_versions?: DecodedIbcCoreConnectionVersion[],
    xc_state?: ProtoEnumIbcCoreConnectionState,
    a_counterparty?: DecodedIbcCoreConnectionCounterparty,
    sg_delay_period?: CwUint64
];
/**
 * Decodes a protobuf IdentifiedConnection message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionIdentifiedConnection}
 */
export declare const decodeIbcCoreConnectionIdentifiedConnection: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionIdentifiedConnection;
/**
 * A decoded protobuf Counterparty message
 *
 * Tuple where:
 *   - 0: client_id - identifies the client on the counterparty chain associated with a given connection.
 *   - 1: connection_id - identifies the connection end on the counterparty chain associated with a given connection.
 *   - 2: prefix - commitment merkle prefix of the counterparty chain.
 */
export type DecodedIbcCoreConnectionCounterparty = [
    si_client?: string,
    si_connection?: string,
    a_prefix?: DecodedIbcCoreCommitmentMerklePrefix
];
/**
 * Decodes a protobuf Counterparty message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionCounterparty}
 */
export declare const decodeIbcCoreConnectionCounterparty: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionCounterparty;
/**
 * A decoded protobuf ClientPaths message
 *
 * Alias for: paths - list of connection paths
 */
export type DecodedIbcCoreConnectionClientPaths = [
    a_paths?: string[]
];
/**
 * Decodes a protobuf ClientPaths message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionClientPaths}
 */
export declare const decodeIbcCoreConnectionClientPaths: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionClientPaths;
/**
 * A decoded protobuf ConnectionPaths message
 *
 * Tuple where:
 *   - 0: client_id - client state unique identifier
 *   - 1: paths - list of connection paths
 */
export type DecodedIbcCoreConnectionConnectionPaths = [
    si_client?: string,
    a_paths?: string[]
];
/**
 * Decodes a protobuf ConnectionPaths message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionConnectionPaths}
 */
export declare const decodeIbcCoreConnectionConnectionPaths: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionConnectionPaths;
/**
 * A decoded protobuf Version message
 *
 * Tuple where:
 *   - 0: identifier - unique version identifier
 *   - 1: features - list of features compatible with the specified identifier
 */
export type DecodedIbcCoreConnectionVersion = [
    s_identifier?: string,
    a_features?: string[]
];
/**
 * Decodes a protobuf Version message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionVersion}
 */
export declare const decodeIbcCoreConnectionVersion: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionVersion;
/**
 * A decoded protobuf Params message
 *
 * Alias for: max_expected_time_per_block - maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the largest amount of time that the chain might reasonably take to produce the next block under normal operating conditions. A safe choice is 3-5x the expected time per block.
 */
export type DecodedIbcCoreConnectionParams = [
    sg_max_expected_time_per_block?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionParams}
 */
export declare const decodeIbcCoreConnectionParams: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionParams;
/**
 * Destructures the fields of a {@link IbcCoreConnectionIdentifiedConnection} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - connection identifier.
 *   - 1: client_id - client associated with this connection.
 *   - 2: versions - IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection
 *   - 3: state - current state of the connection end.
 *   - 4: counterparty - chain associated with this connection.
 *   - 5: delay_period - delay period associated with this connection.
 */
export declare const destructIbcCoreConnectionIdentifiedConnection: (g_struct: IbcCoreConnectionIdentifiedConnection) => [id?: string, client_id?: string, versions?: IbcCoreConnectionVersion[], state?: JsonEnumIbcCoreConnectionState, counterparty?: IbcCoreConnectionCounterparty, delay_period?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_IDENTIFIED_CONNECTION = "/ibc.core.connection.v1.IdentifiedConnection";
/**
 * JSON serialization of `ibc.core.connection.v1.IdentifiedConnection` - defines a connection with additional connection identifier field.
 */
export type IbcCoreConnectionIdentifiedConnection = {
    id?: string | undefined;
    client_id?: string | undefined;
    versions?: IbcCoreConnectionVersion[] | undefined;
    state?: JsonEnumIbcCoreConnectionState | undefined;
    counterparty?: IbcCoreConnectionCounterparty | undefined;
    delay_period?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionVersion} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identifier - unique version identifier
 *   - 1: features - list of features compatible with the specified identifier
 */
export declare const destructIbcCoreConnectionVersion: (g_struct: IbcCoreConnectionVersion) => [identifier?: string, features?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_VERSION = "/ibc.core.connection.v1.Version";
/**
 * JSON serialization of `ibc.core.connection.v1.Version` - defines the versioning scheme used to negotiate the IBC version in the connection handshake.
 */
export type IbcCoreConnectionVersion = {
    identifier?: string | undefined;
    features?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionCounterparty} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - identifies the client on the counterparty chain associated with a given connection.
 *   - 1: connection_id - identifies the connection end on the counterparty chain associated with a given connection.
 *   - 2: prefix - commitment merkle prefix of the counterparty chain.
 */
export declare const destructIbcCoreConnectionCounterparty: (g_struct: IbcCoreConnectionCounterparty) => [client_id?: string, connection_id?: string, prefix?: IbcCoreCommitmentMerklePrefix];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_COUNTERPARTY = "/ibc.core.connection.v1.Counterparty";
/**
 * JSON serialization of `ibc.core.connection.v1.Counterparty` - defines the counterparty chain associated with a connection end.
 */
export type IbcCoreConnectionCounterparty = {
    client_id?: string | undefined;
    connection_id?: string | undefined;
    prefix?: IbcCoreCommitmentMerklePrefix | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionConnectionPaths} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client state unique identifier
 *   - 1: paths - list of connection paths
 */
export declare const destructIbcCoreConnectionConnectionPaths: (g_struct: IbcCoreConnectionConnectionPaths) => [client_id?: string, paths?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_CONNECTION_PATHS = "/ibc.core.connection.v1.ConnectionPaths";
/**
 * JSON serialization of `ibc.core.connection.v1.ConnectionPaths` - define all the connection paths for a given client state.
 */
export type IbcCoreConnectionConnectionPaths = {
    client_id?: string | undefined;
    paths?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_expected_time_per_block - maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the largest amount of time that the chain might reasonably take to produce the next block under normal operating conditions. A safe choice is 3-5x the expected time per block.
 */
export declare const destructIbcCoreConnectionParams: (g_struct: IbcCoreConnectionParams) => [max_expected_time_per_block?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_PARAMS = "/ibc.core.connection.v1.Params";
/**
 * JSON serialization of `ibc.core.connection.v1.Params` - defines the set of Connection parameters.
 */
export type IbcCoreConnectionParams = {
    max_expected_time_per_block?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionConnectionEnd} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client associated with this connection.
 *   - 1: versions - IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
 *   - 2: state - current state of the connection end.
 *   - 3: counterparty - chain associated with this connection.
 *   - 4: delay_period - delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
 */
export declare const destructIbcCoreConnectionConnectionEnd: (g_struct: IbcCoreConnectionConnectionEnd) => [client_id?: string, versions?: IbcCoreConnectionVersion[], state?: JsonEnumIbcCoreConnectionState, counterparty?: IbcCoreConnectionCounterparty, delay_period?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_CONNECTION_END = "/ibc.core.connection.v1.ConnectionEnd";
/**
 * JSON serialization of `ibc.core.connection.v1.ConnectionEnd` - defines a stateful object on a chain connected to another separate one. NOTE: there must only be 2 defined ConnectionEnds to establish a connection between two chains.
 */
export type IbcCoreConnectionConnectionEnd = {
    client_id?: string | undefined;
    versions?: IbcCoreConnectionVersion[] | undefined;
    state?: JsonEnumIbcCoreConnectionState | undefined;
    counterparty?: IbcCoreConnectionCounterparty | undefined;
    delay_period?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionClientPaths} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: paths - list of connection paths
 */
export declare const destructIbcCoreConnectionClientPaths: (g_struct: IbcCoreConnectionClientPaths) => [paths?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_CLIENT_PATHS = "/ibc.core.connection.v1.ClientPaths";
/**
 * JSON serialization of `ibc.core.connection.v1.ClientPaths` - define all the connection paths for a client state.
 */
export type IbcCoreConnectionClientPaths = {
    paths?: string[] | undefined;
};
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_UNINITIALIZED_UNSPECIFIED** - Default State
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export declare const XC_PROTO_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED = 0;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_UNINITIALIZED_UNSPECIFIED** - Default State
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export declare const SI_JSON_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED = "UNINITIALIZED";
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_INIT** - A connection end has just started the opening handshake.
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export declare const XC_PROTO_IBC_CORE_CONNECTION_STATE_INIT = 1;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_INIT** - A connection end has just started the opening handshake.
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export declare const SI_JSON_IBC_CORE_CONNECTION_STATE_INIT = "INIT";
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_TRYOPEN** - A connection end has acknowledged the handshake step on the counterparty chain.
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export declare const XC_PROTO_IBC_CORE_CONNECTION_STATE_TRYOPEN = 2;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_TRYOPEN** - A connection end has acknowledged the handshake step on the counterparty chain.
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export declare const SI_JSON_IBC_CORE_CONNECTION_STATE_TRYOPEN = "TRYOPEN";
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_OPEN** - A connection end has completed the handshake.
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export declare const XC_PROTO_IBC_CORE_CONNECTION_STATE_OPEN = 3;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_OPEN** - A connection end has completed the handshake.
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export declare const SI_JSON_IBC_CORE_CONNECTION_STATE_OPEN = "OPEN";
/**
 * Raw protobuf enum values for `ibc.core.connection.v1.State` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED}
 *   - {@link XC_PROTO_IBC_CORE_CONNECTION_STATE_INIT}
 *   - {@link XC_PROTO_IBC_CORE_CONNECTION_STATE_TRYOPEN}
 *   - {@link XC_PROTO_IBC_CORE_CONNECTION_STATE_OPEN}
 */
export type ProtoEnumIbcCoreConnectionState = typeof XC_PROTO_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED | typeof XC_PROTO_IBC_CORE_CONNECTION_STATE_INIT | typeof XC_PROTO_IBC_CORE_CONNECTION_STATE_TRYOPEN | typeof XC_PROTO_IBC_CORE_CONNECTION_STATE_OPEN;
/**
 * JSON enum values for `ibc.core.connection.v1.State` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED}
 *   - {@link SI_JSON_IBC_CORE_CONNECTION_STATE_INIT}
 *   - {@link SI_JSON_IBC_CORE_CONNECTION_STATE_TRYOPEN}
 *   - {@link SI_JSON_IBC_CORE_CONNECTION_STATE_OPEN}
 */
export type JsonEnumIbcCoreConnectionState = typeof SI_JSON_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED | typeof SI_JSON_IBC_CORE_CONNECTION_STATE_INIT | typeof SI_JSON_IBC_CORE_CONNECTION_STATE_TRYOPEN | typeof SI_JSON_IBC_CORE_CONNECTION_STATE_OPEN;
/**
 * Maps a protobuf enum int value for `ibc.core.connection.v1.State` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumIbcCoreConnectionState: Record<ProtoEnumIbcCoreConnectionState, JsonEnumIbcCoreConnectionState>;
/**
 * Maps a JSON enum string value for `ibc.core.connection.v1.State` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumIbcCoreConnectionState: Record<JsonEnumIbcCoreConnectionState, ProtoEnumIbcCoreConnectionState>;
