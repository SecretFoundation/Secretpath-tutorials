import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { decodeIbcCoreCommitmentMerklePrefix } from '../../commitment/v1/commitment.js';
/**
 * Encodes a `ConnectionEnd` protobuf message: defines a stateful object on a chain connected to another separate one. NOTE: there must only be 2 defined ConnectionEnds to establish a connection between two chains.
 * @param si_client - `client_id`: client associated with this connection.
 * @param a_versions - `versions`: IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
 * @param xc_state - `state`: current state of the connection end.
 * @param g_counterparty - `counterparty`: chain associated with this connection.
 * @param sg_delay_period - `delay_period`: delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionConnectionEnd = (si_client, a_versions, xc_state, atu8_counterparty, sg_delay_period) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .B(a_versions) // Version[] versions = 2
    .v(xc_state) // State state = 3
    .b(atu8_counterparty) // Counterparty counterparty = 4
    .g(sg_delay_period) // uint64 delay_period = 5
    .o;
/**
 * Encodes a `IdentifiedConnection` protobuf message: defines a connection with additional connection identifier field.
 * @param s_id - `id`: connection identifier.
 * @param si_client - `client_id`: client associated with this connection.
 * @param a_versions - `versions`: IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection
 * @param xc_state - `state`: current state of the connection end.
 * @param g_counterparty - `counterparty`: chain associated with this connection.
 * @param sg_delay_period - `delay_period`: delay period associated with this connection.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionIdentifiedConnection = (s_id, si_client, a_versions, xc_state, atu8_counterparty, sg_delay_period) => Protobuf() // ...
    .s(s_id) // string id = 1
    .s(si_client) // string client_id = 2
    .B(a_versions) // Version[] versions = 3
    .v(xc_state) // State state = 4
    .b(atu8_counterparty) // Counterparty counterparty = 5
    .g(sg_delay_period) // uint64 delay_period = 6
    .o;
/**
 * Encodes a `Counterparty` protobuf message: defines the counterparty chain associated with a connection end.
 * @param si_client - `client_id`: identifies the client on the counterparty chain associated with a given connection.
 * @param si_connection - `connection_id`: identifies the connection end on the counterparty chain associated with a given connection.
 * @param g_prefix - `prefix`: commitment merkle prefix of the counterparty chain.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionCounterparty = (si_client, si_connection, atu8_prefix) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .s(si_connection) // string connection_id = 2
    .b(atu8_prefix) // MerklePrefix prefix = 3
    .o;
/**
 * Encodes a `ClientPaths` protobuf message: define all the connection paths for a client state.
 * @param a_paths - `paths`: list of connection paths
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionClientPaths = (a_paths) => Protobuf() // ...
    .S(a_paths) // string[] paths = 1
    .o;
/**
 * Encodes a `ConnectionPaths` protobuf message: define all the connection paths for a given client state.
 * @param si_client - `client_id`: client state unique identifier
 * @param a_paths - `paths`: list of connection paths
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionConnectionPaths = (si_client, a_paths) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .S(a_paths) // string[] paths = 2
    .o;
/**
 * Encodes a `Version` protobuf message: defines the versioning scheme used to negotiate the IBC version in the connection handshake.
 * @param s_identifier - `identifier`: unique version identifier
 * @param a_features - `features`: list of features compatible with the specified identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionVersion = (s_identifier, a_features) => Protobuf() // ...
    .s(s_identifier) // string identifier = 1
    .S(a_features) // string[] features = 2
    .o;
/**
 * Encodes a `Params` protobuf message: defines the set of Connection parameters.
 * @param sg_max_expected_time_per_block - `max_expected_time_per_block`: maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the largest amount of time that the chain might reasonably take to produce the next block under normal operating conditions. A safe choice is 3-5x the expected time per block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionParams = (sg_max_expected_time_per_block) => Protobuf() // ...
    .g(sg_max_expected_time_per_block) // uint64 max_expected_time_per_block = 1
    .o;
/**
 * Decodes a protobuf ConnectionEnd message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionConnectionEnd}
 */
export const decodeIbcCoreConnectionConnectionEnd = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0, 1, 1, 3], [0, decodeIbcCoreConnectionVersion, 0, decodeIbcCoreConnectionCounterparty]);
/**
 * Decodes a protobuf IdentifiedConnection message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionIdentifiedConnection}
 */
export const decodeIbcCoreConnectionIdentifiedConnection = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0, 1, 1, 3], [0, 0, decodeIbcCoreConnectionVersion, 0, decodeIbcCoreConnectionCounterparty]);
/**
 * Decodes a protobuf Counterparty message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionCounterparty}
 */
export const decodeIbcCoreConnectionCounterparty = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1], [0, 0, decodeIbcCoreCommitmentMerklePrefix]);
/**
 * Decodes a protobuf ClientPaths message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionClientPaths}
 */
export const decodeIbcCoreConnectionClientPaths = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf ConnectionPaths message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionConnectionPaths}
 */
export const decodeIbcCoreConnectionConnectionPaths = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf Version message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionVersion}
 */
export const decodeIbcCoreConnectionVersion = (atu8_payload) => decode_protobuf(atu8_payload, [5, 4]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionParams}
 */
export const decodeIbcCoreConnectionParams = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Destructures the fields of a {@link IbcCoreConnectionIdentifiedConnection} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - connection identifier.
 *   - 1: client_id - client associated with this connection.
 *   - 2: versions - IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection
 *   - 3: state - current state of the connection end.
 *   - 4: counterparty - chain associated with this connection.
 *   - 5: delay_period - delay period associated with this connection.
 */
export const destructIbcCoreConnectionIdentifiedConnection = (g_struct) => [g_struct.id, g_struct.client_id, g_struct.versions, g_struct.state, g_struct.counterparty, g_struct.delay_period];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_IDENTIFIED_CONNECTION = '/ibc.core.connection.v1.IdentifiedConnection';
/**
 * Destructures the fields of a {@link IbcCoreConnectionVersion} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identifier - unique version identifier
 *   - 1: features - list of features compatible with the specified identifier
 */
export const destructIbcCoreConnectionVersion = (g_struct) => [g_struct.identifier, g_struct.features];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_VERSION = '/ibc.core.connection.v1.Version';
/**
 * Destructures the fields of a {@link IbcCoreConnectionCounterparty} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - identifies the client on the counterparty chain associated with a given connection.
 *   - 1: connection_id - identifies the connection end on the counterparty chain associated with a given connection.
 *   - 2: prefix - commitment merkle prefix of the counterparty chain.
 */
export const destructIbcCoreConnectionCounterparty = (g_struct) => [g_struct.client_id, g_struct.connection_id, g_struct.prefix];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_COUNTERPARTY = '/ibc.core.connection.v1.Counterparty';
/**
 * Destructures the fields of a {@link IbcCoreConnectionConnectionPaths} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client state unique identifier
 *   - 1: paths - list of connection paths
 */
export const destructIbcCoreConnectionConnectionPaths = (g_struct) => [g_struct.client_id, g_struct.paths];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_CONNECTION_PATHS = '/ibc.core.connection.v1.ConnectionPaths';
/**
 * Destructures the fields of a {@link IbcCoreConnectionParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_expected_time_per_block - maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the largest amount of time that the chain might reasonably take to produce the next block under normal operating conditions. A safe choice is 3-5x the expected time per block.
 */
export const destructIbcCoreConnectionParams = (g_struct) => [g_struct.max_expected_time_per_block];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_PARAMS = '/ibc.core.connection.v1.Params';
/**
 * Destructures the fields of a {@link IbcCoreConnectionConnectionEnd} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client associated with this connection.
 *   - 1: versions - IBC version which can be utilised to determine encodings or protocols for channels or packets utilising this connection.
 *   - 2: state - current state of the connection end.
 *   - 3: counterparty - chain associated with this connection.
 *   - 4: delay_period - delay period that must pass before a consensus state can be used for packet-verification NOTE: delay period logic is only implemented by some clients.
 */
export const destructIbcCoreConnectionConnectionEnd = (g_struct) => [g_struct.client_id, g_struct.versions, g_struct.state, g_struct.counterparty, g_struct.delay_period];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_CONNECTION_END = '/ibc.core.connection.v1.ConnectionEnd';
/**
 * Destructures the fields of a {@link IbcCoreConnectionClientPaths} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: paths - list of connection paths
 */
export const destructIbcCoreConnectionClientPaths = (g_struct) => [g_struct.paths];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_CLIENT_PATHS = '/ibc.core.connection.v1.ClientPaths';
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_UNINITIALIZED_UNSPECIFIED** - Default State
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export const XC_PROTO_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED = 0;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_UNINITIALIZED_UNSPECIFIED** - Default State
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export const SI_JSON_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED = 'UNINITIALIZED';
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_INIT** - A connection end has just started the opening handshake.
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export const XC_PROTO_IBC_CORE_CONNECTION_STATE_INIT = 1;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_INIT** - A connection end has just started the opening handshake.
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export const SI_JSON_IBC_CORE_CONNECTION_STATE_INIT = 'INIT';
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_TRYOPEN** - A connection end has acknowledged the handshake step on the counterparty chain.
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export const XC_PROTO_IBC_CORE_CONNECTION_STATE_TRYOPEN = 2;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_TRYOPEN** - A connection end has acknowledged the handshake step on the counterparty chain.
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export const SI_JSON_IBC_CORE_CONNECTION_STATE_TRYOPEN = 'TRYOPEN';
/**
 * Protobuf enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_OPEN** - A connection end has completed the handshake.
 *
 * Belongs to enum type {@link ProtoEnumIbcCoreConnectionState}
 */
export const XC_PROTO_IBC_CORE_CONNECTION_STATE_OPEN = 3;
/**
 * JSON enum value for `ibc.core.connection.v1.State`.
 *
 * **STATE_OPEN** - A connection end has completed the handshake.
 *
 * Belongs to enum type {@link JsonEnumIbcCoreConnectionState}
 */
export const SI_JSON_IBC_CORE_CONNECTION_STATE_OPEN = 'OPEN';
/**
 * Maps a protobuf enum int value for `ibc.core.connection.v1.State` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumIbcCoreConnectionState = {
    [XC_PROTO_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED]: SI_JSON_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED,
    [XC_PROTO_IBC_CORE_CONNECTION_STATE_INIT]: SI_JSON_IBC_CORE_CONNECTION_STATE_INIT,
    [XC_PROTO_IBC_CORE_CONNECTION_STATE_TRYOPEN]: SI_JSON_IBC_CORE_CONNECTION_STATE_TRYOPEN,
    [XC_PROTO_IBC_CORE_CONNECTION_STATE_OPEN]: SI_JSON_IBC_CORE_CONNECTION_STATE_OPEN,
};
/**
 * Maps a JSON enum string value for `ibc.core.connection.v1.State` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumIbcCoreConnectionState = {
    [SI_JSON_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED]: XC_PROTO_IBC_CORE_CONNECTION_STATE_UNINITIALIZED_UNSPECIFIED,
    [SI_JSON_IBC_CORE_CONNECTION_STATE_INIT]: XC_PROTO_IBC_CORE_CONNECTION_STATE_INIT,
    [SI_JSON_IBC_CORE_CONNECTION_STATE_TRYOPEN]: XC_PROTO_IBC_CORE_CONNECTION_STATE_TRYOPEN,
    [SI_JSON_IBC_CORE_CONNECTION_STATE_OPEN]: XC_PROTO_IBC_CORE_CONNECTION_STATE_OPEN,
};
//# sourceMappingURL=connection.js.map