/// <reference types="node" />
import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../../cosmos/base/query/v1beta1/pagination.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import type { IbcCoreClientHeight, DecodedIbcCoreClientHeight, IbcCoreClientIdentifiedClientState, DecodedIbcCoreClientIdentifiedClientState } from '../../client/v1/client.js';
import type { IbcCoreConnectionConnectionEnd, DecodedIbcCoreConnectionConnectionEnd, IbcCoreConnectionIdentifiedConnection, DecodedIbcCoreConnectionIdentifiedConnection, IbcCoreConnectionParams, DecodedIbcCoreConnectionParams } from './connection.js';
export type EncodedIbcCoreConnectionQueryConnectionRequest = Encoded<'/ibc.core.connection.v1.QueryConnectionRequest'>;
export type EncodedIbcCoreConnectionQueryConnectionResponse = Encoded<'/ibc.core.connection.v1.QueryConnectionResponse'>;
export type EncodedIbcCoreConnectionQueryConnectionsRequest = Encoded<'/ibc.core.connection.v1.QueryConnectionsRequest'>;
export type EncodedIbcCoreConnectionQueryConnectionsResponse = Encoded<'/ibc.core.connection.v1.QueryConnectionsResponse'>;
export type EncodedIbcCoreConnectionQueryClientConnectionsRequest = Encoded<'/ibc.core.connection.v1.QueryClientConnectionsRequest'>;
export type EncodedIbcCoreConnectionQueryClientConnectionsResponse = Encoded<'/ibc.core.connection.v1.QueryClientConnectionsResponse'>;
export type EncodedIbcCoreConnectionQueryConnectionClientStateRequest = Encoded<'/ibc.core.connection.v1.QueryConnectionClientStateRequest'>;
export type EncodedIbcCoreConnectionQueryConnectionClientStateResponse = Encoded<'/ibc.core.connection.v1.QueryConnectionClientStateResponse'>;
export type EncodedIbcCoreConnectionQueryConnectionConsensusStateRequest = Encoded<'/ibc.core.connection.v1.QueryConnectionConsensusStateRequest'>;
export type EncodedIbcCoreConnectionQueryConnectionConsensusStateResponse = Encoded<'/ibc.core.connection.v1.QueryConnectionConsensusStateResponse'>;
export type EncodedIbcCoreConnectionQueryConnectionParamsRequest = Encoded<'/ibc.core.connection.v1.QueryConnectionParamsRequest'>;
export type EncodedIbcCoreConnectionQueryConnectionParamsResponse = Encoded<'/ibc.core.connection.v1.QueryConnectionParamsResponse'>;
/**
 * Queries an IBC connection end.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_connection - connection unique identifier
 * @returns a tuple where:
 *   - 0: connection - associated with the request identifier
 *   - 1: proof - associated with the request identifier
 *   - 2: proof_height - associated with the request identifier
 */
export declare const queryIbcCoreConnectionConnection: (z_req: string | ({
    origin: string;
} & RequestInit), si_connection?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreConnectionQueryConnectionResponse>>;
/**
 * Queries all the IBC connections of a chain.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination -
 * @returns a tuple where:
 *   - 0: connections - list of stored connections of the chain.
 *   - 1: pagination - list of stored connections of the chain.
 *   - 2: height - list of stored connections of the chain.
 */
export declare const queryIbcCoreConnectionConnections: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreConnectionQueryConnectionsResponse>>;
/**
 * Queries the connection paths associated with a client state.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_client - client identifier associated with a connection
 * @returns a tuple where:
 *   - 0: connection_paths - slice of all the connection paths associated with a client.
 *   - 1: proof - slice of all the connection paths associated with a client.
 *   - 2: proof_height - slice of all the connection paths associated with a client.
 */
export declare const queryIbcCoreConnectionClientConnections: (z_req: string | ({
    origin: string;
} & RequestInit), si_client?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreConnectionQueryClientConnectionsResponse>>;
/**
 * Queries the client state associated with the connection.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_connection - connection identifier
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - client state associated with the channel
 *   - 2: proof_height - client state associated with the channel
 */
export declare const queryIbcCoreConnectionConnectionClientState: (z_req: string | ({
    origin: string;
} & RequestInit), si_connection?: Opt<string>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreConnectionQueryConnectionClientStateResponse>>;
/**
 * Queries the consensus state associated with the connection.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param si_connection - connection identifier
 * @param sg_revision_number -
 * @param sg_revision_height -
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - consensus state associated with the channel
 *   - 2: proof - consensus state associated with the channel
 *   - 3: proof_height - consensus state associated with the channel
 */
export declare const queryIbcCoreConnectionConnectionConsensusState: (z_req: string | ({
    origin: string;
} & RequestInit), si_connection?: Opt<string>, sg_revision_number?: Opt<`${bigint}`>, sg_revision_height?: Opt<`${bigint}`>) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreConnectionQueryConnectionConsensusStateResponse>>;
/**
 * Queries all parameters of the ibc connection submodule.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const queryIbcCoreConnectionConnectionParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../../api/transport.js").NetworkJsonResponse<IbcCoreConnectionQueryConnectionParamsResponse>>;
/**
 * Encodes a `QueryConnectionRequest` protobuf message: the request type for the Query/Connection RPC method
 * @param si_connection - `connection_id`: connection unique identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionRequest: (si_connection?: Opt<string>) => EncodedIbcCoreConnectionQueryConnectionRequest;
/**
 * Encodes a `QueryConnectionResponse` protobuf message: the response type for the Query/Connection RPC method. Besides the connection end, it includes a proof and the height from which the proof was retrieved.
 * @param g_connection - `connection`: associated with the request identifier
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionResponse: (atu8_connection?: Opt<Encoded<'/ibc.core.connection.v1.ConnectionEnd'>>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreConnectionQueryConnectionResponse;
/**
 * Encodes a `QueryConnectionsRequest` protobuf message: the request type for the Query/Connections RPC method
 * @param g_pagination - `pagination`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionsRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedIbcCoreConnectionQueryConnectionsRequest;
/**
 * Encodes a `QueryConnectionsResponse` protobuf message: the response type for the Query/Connections RPC method.
 * @param a_connections - `connections`: list of stored connections of the chain.
 * @param g_pagination - `pagination`: response
 * @param g_height - `height`: query block height
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionsResponse: (a_connections?: Opt<Encoded<'/ibc.core.connection.v1.IdentifiedConnection'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>, atu8_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreConnectionQueryConnectionsResponse;
/**
 * Encodes a `QueryClientConnectionsRequest` protobuf message: the request type for the Query/ClientConnections RPC method
 * @param si_client - `client_id`: client identifier associated with a connection
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryClientConnectionsRequest: (si_client?: Opt<string>) => EncodedIbcCoreConnectionQueryClientConnectionsRequest;
/**
 * Encodes a `QueryClientConnectionsResponse` protobuf message: the response type for the Query/ClientConnections RPC method
 * @param a_connection_paths - `connection_paths`: slice of all the connection paths associated with a client.
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was generated
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryClientConnectionsResponse: (a_connection_paths?: Opt<string[]>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreConnectionQueryClientConnectionsResponse;
/**
 * Encodes a `QueryConnectionClientStateRequest` protobuf message: the request type for the Query/ConnectionClientState RPC method
 * @param si_connection - `connection_id`: connection identifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionClientStateRequest: (si_connection?: Opt<string>) => EncodedIbcCoreConnectionQueryConnectionClientStateRequest;
/**
 * Encodes a `QueryConnectionClientStateResponse` protobuf message: the response type for the Query/ConnectionClientState RPC method
 * @param g_identified_client_state - `identified_client_state`: client state associated with the channel
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionClientStateResponse: (atu8_identified_client_state?: Opt<Encoded<'/ibc.core.client.v1.IdentifiedClientState'>>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreConnectionQueryConnectionClientStateResponse;
/**
 * Encodes a `QueryConnectionConsensusStateRequest` protobuf message: the request type for the Query/ConnectionConsensusState RPC method
 * @param si_connection - `connection_id`: connection identifier
 * @param sg_revision_number - `revision_number`:
 * @param sg_revision_height - `revision_height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionConsensusStateRequest: (si_connection?: Opt<string>, sg_revision_number?: Opt<WeakUint64Str>, sg_revision_height?: Opt<WeakUint64Str>) => EncodedIbcCoreConnectionQueryConnectionConsensusStateRequest;
/**
 * Encodes a `QueryConnectionConsensusStateResponse` protobuf message: the response type for the Query/ConnectionConsensusState RPC method
 * @param atu8_consensus_state - `consensus_state`: consensus state associated with the channel
 * @param si_client - `client_id`: client ID associated with the consensus state
 * @param atu8_proof - `proof`: merkle proof of existence
 * @param g_proof_height - `proof_height`: height at which the proof was retrieved
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionConsensusStateResponse: (atu8_consensus_state?: Opt<Uint8Array>, si_client?: Opt<string>, atu8_proof?: Opt<Uint8Array>, atu8_proof_height?: Opt<Encoded<'/ibc.core.client.v1.Height'>>) => EncodedIbcCoreConnectionQueryConnectionConsensusStateResponse;
/**
 * Encodes a `QueryConnectionParamsRequest` protobuf message: the request type for the Query/ConnectionParams RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionParamsRequest: () => EncodedIbcCoreConnectionQueryConnectionParamsRequest;
/**
 * Encodes a `QueryConnectionParamsResponse` protobuf message: the response type for the Query/ConnectionParams RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcCoreConnectionQueryConnectionParamsResponse: (atu8_params?: Opt<Encoded<'/ibc.core.connection.v1.Params'>>) => EncodedIbcCoreConnectionQueryConnectionParamsResponse;
/**
 * A decoded protobuf QueryConnectionRequest message
 *
 * Alias for: connection_id - connection unique identifier
 */
export type DecodedIbcCoreConnectionQueryConnectionRequest = [
    si_connection?: string
];
/**
 * Decodes a protobuf QueryConnectionRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionRequest}
 */
export declare const decodeIbcCoreConnectionQueryConnectionRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionRequest;
/**
 * A decoded protobuf QueryConnection message
 *
 * Tuple where:
 *   - 0: connection - associated with the request identifier
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreConnectionQueryConnectionResponse = [
    a_connection?: DecodedIbcCoreConnectionConnectionEnd,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryConnection message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionResponse}
 */
export declare const decodeIbcCoreConnectionQueryConnectionResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionResponse;
/**
 * A decoded protobuf QueryConnectionsRequest message
 *
 * Alias for: pagination -
 */
export type DecodedIbcCoreConnectionQueryConnectionsRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryConnectionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionsRequest}
 */
export declare const decodeIbcCoreConnectionQueryConnectionsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionsRequest;
/**
 * A decoded protobuf QueryConnections message
 *
 * Tuple where:
 *   - 0: connections - list of stored connections of the chain.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export type DecodedIbcCoreConnectionQueryConnectionsResponse = [
    a_connections?: DecodedIbcCoreConnectionIdentifiedConnection[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse,
    a_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryConnections message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionsResponse}
 */
export declare const decodeIbcCoreConnectionQueryConnectionsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionsResponse;
/**
 * A decoded protobuf QueryClientConnectionsRequest message
 *
 * Alias for: client_id - client identifier associated with a connection
 */
export type DecodedIbcCoreConnectionQueryClientConnectionsRequest = [
    si_client?: string
];
/**
 * Decodes a protobuf QueryClientConnectionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryClientConnectionsRequest}
 */
export declare const decodeIbcCoreConnectionQueryClientConnectionsRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryClientConnectionsRequest;
/**
 * A decoded protobuf QueryClientConnections message
 *
 * Tuple where:
 *   - 0: connection_paths - slice of all the connection paths associated with a client.
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was generated
 */
export type DecodedIbcCoreConnectionQueryClientConnectionsResponse = [
    a_connection_paths?: string[],
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryClientConnections message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryClientConnectionsResponse}
 */
export declare const decodeIbcCoreConnectionQueryClientConnectionsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryClientConnectionsResponse;
/**
 * A decoded protobuf QueryConnectionClientStateRequest message
 *
 * Alias for: connection_id - connection identifier
 */
export type DecodedIbcCoreConnectionQueryConnectionClientStateRequest = [
    si_connection?: string
];
/**
 * Decodes a protobuf QueryConnectionClientStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionClientStateRequest}
 */
export declare const decodeIbcCoreConnectionQueryConnectionClientStateRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionClientStateRequest;
/**
 * A decoded protobuf QueryConnectionClientState message
 *
 * Tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreConnectionQueryConnectionClientStateResponse = [
    a_identified_client_state?: DecodedIbcCoreClientIdentifiedClientState,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryConnectionClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionClientStateResponse}
 */
export declare const decodeIbcCoreConnectionQueryConnectionClientStateResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionClientStateResponse;
/**
 * A decoded protobuf QueryConnectionConsensusStateRequest message
 *
 * Tuple where:
 *   - 0: connection_id - connection identifier
 *   - 1: revision_number -
 *   - 2: revision_height -
 */
export type DecodedIbcCoreConnectionQueryConnectionConsensusStateRequest = [
    si_connection?: string,
    sg_revision_number?: CwUint64,
    sg_revision_height?: CwUint64
];
/**
 * Decodes a protobuf QueryConnectionConsensusStateRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionConsensusStateRequest}
 */
export declare const decodeIbcCoreConnectionQueryConnectionConsensusStateRequest: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionConsensusStateRequest;
/**
 * A decoded protobuf QueryConnectionConsensusState message
 *
 * Tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - client ID associated with the consensus state
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export type DecodedIbcCoreConnectionQueryConnectionConsensusStateResponse = [
    a_consensus_state?: DecodedGoogleProtobufAny,
    si_client?: string,
    atu8_proof?: Uint8Array,
    a_proof_height?: DecodedIbcCoreClientHeight
];
/**
 * Decodes a protobuf QueryConnectionConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionConsensusStateResponse}
 */
export declare const decodeIbcCoreConnectionQueryConnectionConsensusStateResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionConsensusStateResponse;
/**
 * A decoded protobuf QueryConnectionParamsRequest message
 *
 * Tuple where:
 */
export type DecodedIbcCoreConnectionQueryConnectionParamsRequest = [];
/**
 * Decodes a protobuf QueryConnectionParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionParamsRequest}
 */
export declare const decodeIbcCoreConnectionQueryConnectionParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryConnectionParams message
 *
 * Alias for: params - defines the parameters of the module.
 */
export type DecodedIbcCoreConnectionQueryConnectionParamsResponse = [
    a_params?: DecodedIbcCoreConnectionParams
];
/**
 * Decodes a protobuf QueryConnectionParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionQueryConnectionParamsResponse}
 */
export declare const decodeIbcCoreConnectionQueryConnectionParamsResponse: (atu8_payload: Uint8Array) => DecodedIbcCoreConnectionQueryConnectionParamsResponse;
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id - connection unique identifier
 */
export declare const destructIbcCoreConnectionQueryConnectionRequest: (g_struct: IbcCoreConnectionQueryConnectionRequest) => [connection_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_REQUEST = "/ibc.core.connection.v1.QueryConnectionRequest";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionRequest` - the request type for the Query/Connection RPC method
 */
export type IbcCoreConnectionQueryConnectionRequest = {
    connection_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection - associated with the request identifier
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreConnectionQueryConnectionResponse: (g_struct: IbcCoreConnectionQueryConnectionResponse) => [connection?: IbcCoreConnectionConnectionEnd, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_RESPONSE = "/ibc.core.connection.v1.QueryConnectionResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionResponse` - the response type for the Query/Connection RPC method. Besides the connection end, it includes a proof and the height from which the proof was retrieved.
 */
export type IbcCoreConnectionQueryConnectionResponse = {
    connection?: IbcCoreConnectionConnectionEnd | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination -
 */
export declare const destructIbcCoreConnectionQueryConnectionsRequest: (g_struct: IbcCoreConnectionQueryConnectionsRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTIONS_REQUEST = "/ibc.core.connection.v1.QueryConnectionsRequest";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionsRequest` - the request type for the Query/Connections RPC method
 */
export type IbcCoreConnectionQueryConnectionsRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connections - list of stored connections of the chain.
 *   - 1: pagination - response
 *   - 2: height - query block height
 */
export declare const destructIbcCoreConnectionQueryConnectionsResponse: (g_struct: IbcCoreConnectionQueryConnectionsResponse) => [connections?: IbcCoreConnectionIdentifiedConnection[], pagination?: CosmosBaseQueryPageResponse, height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTIONS_RESPONSE = "/ibc.core.connection.v1.QueryConnectionsResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionsResponse` - the response type for the Query/Connections RPC method.
 */
export type IbcCoreConnectionQueryConnectionsResponse = {
    connections?: IbcCoreConnectionIdentifiedConnection[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
    height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryClientConnectionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id - client identifier associated with a connection
 */
export declare const destructIbcCoreConnectionQueryClientConnectionsRequest: (g_struct: IbcCoreConnectionQueryClientConnectionsRequest) => [client_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CLIENT_CONNECTIONS_REQUEST = "/ibc.core.connection.v1.QueryClientConnectionsRequest";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryClientConnectionsRequest` - the request type for the Query/ClientConnections RPC method
 */
export type IbcCoreConnectionQueryClientConnectionsRequest = {
    client_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryClientConnectionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_paths - slice of all the connection paths associated with a client.
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was generated
 */
export declare const destructIbcCoreConnectionQueryClientConnectionsResponse: (g_struct: IbcCoreConnectionQueryClientConnectionsResponse) => [connection_paths?: string[], proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CLIENT_CONNECTIONS_RESPONSE = "/ibc.core.connection.v1.QueryClientConnectionsResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryClientConnectionsResponse` - the response type for the Query/ClientConnections RPC method
 */
export type IbcCoreConnectionQueryClientConnectionsResponse = {
    connection_paths?: string[] | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionClientStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id - connection identifier
 */
export declare const destructIbcCoreConnectionQueryConnectionClientStateRequest: (g_struct: IbcCoreConnectionQueryConnectionClientStateRequest) => [connection_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CLIENT_STATE_REQUEST = "/ibc.core.connection.v1.QueryConnectionClientStateRequest";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionClientStateRequest` - the request type for the Query/ConnectionClientState RPC method
 */
export type IbcCoreConnectionQueryConnectionClientStateRequest = {
    connection_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionClientStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: identified_client_state - client state associated with the channel
 *   - 1: proof - merkle proof of existence
 *   - 2: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreConnectionQueryConnectionClientStateResponse: (g_struct: IbcCoreConnectionQueryConnectionClientStateResponse) => [identified_client_state?: IbcCoreClientIdentifiedClientState, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CLIENT_STATE_RESPONSE = "/ibc.core.connection.v1.QueryConnectionClientStateResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionClientStateResponse` - the response type for the Query/ConnectionClientState RPC method
 */
export type IbcCoreConnectionQueryConnectionClientStateResponse = {
    identified_client_state?: IbcCoreClientIdentifiedClientState | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionConsensusStateRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id - connection identifier
 *   - 1: revision_number -
 *   - 2: revision_height -
 */
export declare const destructIbcCoreConnectionQueryConnectionConsensusStateRequest: (g_struct: IbcCoreConnectionQueryConnectionConsensusStateRequest) => [connection_id?: string, revision_number?: CwUint64, revision_height?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CONSENSUS_STATE_REQUEST = "/ibc.core.connection.v1.QueryConnectionConsensusStateRequest";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionConsensusStateRequest` - the request type for the Query/ConnectionConsensusState RPC method
 */
export type IbcCoreConnectionQueryConnectionConsensusStateRequest = {
    connection_id?: string | undefined;
    revision_number?: CwUint64 | undefined;
    revision_height?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionConsensusStateResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: consensus_state - consensus state associated with the channel
 *   - 1: client_id - client ID associated with the consensus state
 *   - 2: proof - merkle proof of existence
 *   - 3: proof_height - height at which the proof was retrieved
 */
export declare const destructIbcCoreConnectionQueryConnectionConsensusStateResponse: (g_struct: IbcCoreConnectionQueryConnectionConsensusStateResponse) => [consensus_state?: JsonAny, client_id?: string, proof?: Uint8Array, proof_height?: IbcCoreClientHeight];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_CONSENSUS_STATE_RESPONSE = "/ibc.core.connection.v1.QueryConnectionConsensusStateResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionConsensusStateResponse` - the response type for the Query/ConnectionConsensusState RPC method
 */
export type IbcCoreConnectionQueryConnectionConsensusStateResponse = {
    consensus_state?: JsonAny | undefined;
    client_id?: string | undefined;
    proof?: CwBase64 | undefined;
    proof_height?: IbcCoreClientHeight | undefined;
};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructIbcCoreConnectionQueryConnectionParamsRequest: (g_struct: IbcCoreConnectionQueryConnectionParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_PARAMS_REQUEST = "/ibc.core.connection.v1.QueryConnectionParamsRequest";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionParamsRequest` - the request type for the Query/ConnectionParams RPC method.
 */
export type IbcCoreConnectionQueryConnectionParamsRequest = {};
/**
 * Destructures the fields of a {@link IbcCoreConnectionQueryConnectionParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const destructIbcCoreConnectionQueryConnectionParamsResponse: (g_struct: IbcCoreConnectionQueryConnectionParamsResponse) => [params?: IbcCoreConnectionParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_QUERY_CONNECTION_PARAMS_RESPONSE = "/ibc.core.connection.v1.QueryConnectionParamsResponse";
/**
 * JSON serialization of `ibc.core.connection.v1.QueryConnectionParamsResponse` - the response type for the Query/ConnectionParams RPC method.
 */
export type IbcCoreConnectionQueryConnectionParamsResponse = {
    params?: IbcCoreConnectionParams | undefined;
};
