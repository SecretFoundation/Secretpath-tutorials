import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
import { decodeGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import { decodeIbcCoreClientHeight } from '../../client/v1/client.js';
import { decodeIbcCoreConnectionCounterparty, decodeIbcCoreConnectionVersion, decodeIbcCoreConnectionParams } from './connection.js';
/**
 * Encodes a `MsgConnectionOpenInit` protobuf message: defines the msg sent by an account on Chain A to initialize a connection with Chain B.
 * @param si_client - `client_id`:
 * @param g_counterparty - `counterparty`:
 * @param g_version - `version`:
 * @param sg_delay_period - `delay_period`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenInit = (si_client, atu8_counterparty, atu8_version, sg_delay_period, s_signer) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .b(atu8_counterparty) // Counterparty counterparty = 2
    .b(atu8_version) // Version version = 3
    .g(sg_delay_period) // uint64 delay_period = 4
    .s(s_signer) // string signer = 5
    .o;
/**
 * Encodes a `MsgConnectionOpenInitResponse` protobuf message: defines the Msg/ConnectionOpenInit response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenInitResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgConnectionOpenTry` protobuf message: defines a msg sent by a Relayer to try to open a connection on Chain B.
 * @param si_client - `client_id`:
 * @param si_previous_connection - `previous_connection_id`: Deprecated: this field is unused. Crossing hellos are no longer supported in core IBC.
 * @param atu8_client_state - `client_state`:
 * @param g_counterparty - `counterparty`:
 * @param sg_delay_period - `delay_period`:
 * @param a_counterparty_versions - `counterparty_versions`:
 * @param g_proof_height - `proof_height`:
 * @param atu8_proof_init - `proof_init`: proof of the initialization the connection on Chain A: `UNINITIALIZED -> INIT`
 * @param atu8_proof_client - `proof_client`: proof of client state included in message
 * @param atu8_proof_consensus - `proof_consensus`: proof of client consensus state
 * @param g_consensus_height - `consensus_height`:
 * @param s_signer - `signer`:
 * @param atu8_host_consensus_state_proof - `host_consensus_state_proof`: optional proof data for host state machines that are unable to introspect their own consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenTry = (si_client, si_previous_connection, atu8_client_state, atu8_counterparty, sg_delay_period, a_counterparty_versions, atu8_proof_height, atu8_proof_init, atu8_proof_client, atu8_proof_consensus, atu8_consensus_height, s_signer, atu8_host_consensus_state_proof) => Protobuf() // ...
    .s(si_client) // string client_id = 1
    .s(si_previous_connection) // string previous_connection_id = 2
    .b(atu8_client_state) // Any client_state = 3
    .b(atu8_counterparty) // Counterparty counterparty = 4
    .g(sg_delay_period) // uint64 delay_period = 5
    .B(a_counterparty_versions) // Version[] counterparty_versions = 6
    .b(atu8_proof_height) // Height proof_height = 7
    .b(atu8_proof_init) // bytes proof_init = 8
    .b(atu8_proof_client) // bytes proof_client = 9
    .b(atu8_proof_consensus) // bytes proof_consensus = 10
    .b(atu8_consensus_height) // Height consensus_height = 11
    .s(s_signer) // string signer = 12
    .b(atu8_host_consensus_state_proof) // bytes host_consensus_state_proof = 13
    .o;
/**
 * Encodes a `MsgConnectionOpenTryResponse` protobuf message: defines the Msg/ConnectionOpenTry response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenTryResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgConnectionOpenAck` protobuf message: defines a msg sent by a Relayer to Chain A to acknowledge the change of connection state to TRYOPEN on Chain B.
 * @param si_connection - `connection_id`:
 * @param si_counterparty_connection - `counterparty_connection_id`:
 * @param g_version - `version`:
 * @param atu8_client_state - `client_state`:
 * @param g_proof_height - `proof_height`:
 * @param atu8_proof_try - `proof_try`: proof of the initialization the connection on Chain B: `UNINITIALIZED -> TRYOPEN`
 * @param atu8_proof_client - `proof_client`: proof of client state included in message
 * @param atu8_proof_consensus - `proof_consensus`: proof of client consensus state
 * @param g_consensus_height - `consensus_height`:
 * @param s_signer - `signer`:
 * @param atu8_host_consensus_state_proof - `host_consensus_state_proof`: optional proof data for host state machines that are unable to introspect their own consensus state
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenAck = (si_connection, si_counterparty_connection, atu8_version, atu8_client_state, atu8_proof_height, atu8_proof_try, atu8_proof_client, atu8_proof_consensus, atu8_consensus_height, s_signer, atu8_host_consensus_state_proof) => Protobuf() // ...
    .s(si_connection) // string connection_id = 1
    .s(si_counterparty_connection) // string counterparty_connection_id = 2
    .b(atu8_version) // Version version = 3
    .b(atu8_client_state) // Any client_state = 4
    .b(atu8_proof_height) // Height proof_height = 5
    .b(atu8_proof_try) // bytes proof_try = 6
    .b(atu8_proof_client) // bytes proof_client = 7
    .b(atu8_proof_consensus) // bytes proof_consensus = 8
    .b(atu8_consensus_height) // Height consensus_height = 9
    .s(s_signer) // string signer = 10
    .b(atu8_host_consensus_state_proof) // bytes host_consensus_state_proof = 11
    .o;
/**
 * Encodes a `MsgConnectionOpenAckResponse` protobuf message: defines the Msg/ConnectionOpenAck response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenAckResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgConnectionOpenConfirm` protobuf message: defines a msg sent by a Relayer to Chain B to acknowledge the change of connection state to OPEN on Chain A.
 * @param si_connection - `connection_id`:
 * @param atu8_proof_ack - `proof_ack`: proof for the change of the connection state on Chain A: `INIT -> OPEN`
 * @param g_proof_height - `proof_height`:
 * @param s_signer - `signer`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenConfirm = (si_connection, atu8_proof_ack, atu8_proof_height, s_signer) => Protobuf() // ...
    .s(si_connection) // string connection_id = 1
    .b(atu8_proof_ack) // bytes proof_ack = 2
    .b(atu8_proof_height) // Height proof_height = 3
    .s(s_signer) // string signer = 4
    .o;
/**
 * Encodes a `MsgConnectionOpenConfirmResponse` protobuf message: defines the Msg/ConnectionOpenConfirm response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgConnectionOpenConfirmResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: defines the sdk.Msg type to update the connection parameters.
 * @param s_signer - `signer`: address
 * @param g_params - `params`: defines the connection parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgUpdateParams = (s_signer, atu8_params) => Protobuf() // ...
    .s(s_signer) // string signer = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the MsgUpdateParams response type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeIbcCoreConnectionMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf ConnectionOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenInit}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenInit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 3, 5], [0, decodeIbcCoreConnectionCounterparty, decodeIbcCoreConnectionVersion]);
/**
 * Decodes a protobuf ConnectionOpenInit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenInitResponse}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenInitResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConnectionOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenTry}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenTry = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 3, 0, 1, 1, 1, 1, 1, 5, 1], [0, 0, decodeGoogleProtobufAny, decodeIbcCoreConnectionCounterparty, 0, decodeIbcCoreConnectionVersion, decodeIbcCoreClientHeight, 0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ConnectionOpenTry message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenTryResponse}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenTryResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConnectionOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenAck}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenAck = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1, 1, 1, 1, 1, 1, 5, 1], [0, 0, decodeIbcCoreConnectionVersion, decodeGoogleProtobufAny, decodeIbcCoreClientHeight, 0, 0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ConnectionOpenAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenAckResponse}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenAckResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ConnectionOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenConfirm}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenConfirm = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 1, 5], [0, 0, decodeIbcCoreClientHeight]);
/**
 * Decodes a protobuf ConnectionOpenConfirm message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgConnectionOpenConfirmResponse}
 */
export const decodeIbcCoreConnectionMsgConnectionOpenConfirmResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgUpdateParams}
 */
export const decodeIbcCoreConnectionMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeIbcCoreConnectionParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcCoreConnectionMsgUpdateParamsResponse}
 */
export const decodeIbcCoreConnectionMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenInit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id -
 *   - 1: counterparty -
 *   - 2: version -
 *   - 3: delay_period -
 *   - 4: signer -
 */
export const destructIbcCoreConnectionMsgConnectionOpenInit = (g_struct) => [g_struct.client_id, g_struct.counterparty, g_struct.version, g_struct.delay_period, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_INIT = '/ibc.core.connection.v1.MsgConnectionOpenInit';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenInitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreConnectionMsgConnectionOpenInitResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_INIT_RESPONSE = '/ibc.core.connection.v1.MsgConnectionOpenInitResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenTry} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id -
 *   - 1: previous_connection_id - Deprecated: this field is unused. Crossing hellos are no longer supported in core IBC.
 *   - 2: client_state -
 *   - 3: counterparty -
 *   - 4: delay_period -
 *   - 5: counterparty_versions -
 *   - 6: proof_height -
 *   - 7: proof_init - proof of the initialization the connection on Chain A: `UNINITIALIZED -> INIT`
 *   - 8: proof_client - proof of client state included in message
 *   - 9: proof_consensus - proof of client consensus state
 *   - 10: consensus_height -
 *   - 11: signer -
 *   - 12: host_consensus_state_proof - optional proof data for host state machines that are unable to introspect their own consensus state
 */
export const destructIbcCoreConnectionMsgConnectionOpenTry = (g_struct) => [g_struct.client_id, g_struct.previous_connection_id, g_struct.client_state, g_struct.counterparty, g_struct.delay_period, g_struct.counterparty_versions, g_struct.proof_height, safe_base64_to_bytes(g_struct.proof_init), safe_base64_to_bytes(g_struct.proof_client), safe_base64_to_bytes(g_struct.proof_consensus), g_struct.consensus_height, g_struct.signer, safe_base64_to_bytes(g_struct.host_consensus_state_proof)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_TRY = '/ibc.core.connection.v1.MsgConnectionOpenTry';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenTryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreConnectionMsgConnectionOpenTryResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_TRY_RESPONSE = '/ibc.core.connection.v1.MsgConnectionOpenTryResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id -
 *   - 1: counterparty_connection_id -
 *   - 2: version -
 *   - 3: client_state -
 *   - 4: proof_height -
 *   - 5: proof_try - proof of the initialization the connection on Chain B: `UNINITIALIZED -> TRYOPEN`
 *   - 6: proof_client - proof of client state included in message
 *   - 7: proof_consensus - proof of client consensus state
 *   - 8: consensus_height -
 *   - 9: signer -
 *   - 10: host_consensus_state_proof - optional proof data for host state machines that are unable to introspect their own consensus state
 */
export const destructIbcCoreConnectionMsgConnectionOpenAck = (g_struct) => [g_struct.connection_id, g_struct.counterparty_connection_id, g_struct.version, g_struct.client_state, g_struct.proof_height, safe_base64_to_bytes(g_struct.proof_try), safe_base64_to_bytes(g_struct.proof_client), safe_base64_to_bytes(g_struct.proof_consensus), g_struct.consensus_height, g_struct.signer, safe_base64_to_bytes(g_struct.host_consensus_state_proof)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_ACK = '/ibc.core.connection.v1.MsgConnectionOpenAck';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreConnectionMsgConnectionOpenAckResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_ACK_RESPONSE = '/ibc.core.connection.v1.MsgConnectionOpenAckResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenConfirm} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: connection_id -
 *   - 1: proof_ack - proof for the change of the connection state on Chain A: `INIT -> OPEN`
 *   - 2: proof_height -
 *   - 3: signer -
 */
export const destructIbcCoreConnectionMsgConnectionOpenConfirm = (g_struct) => [g_struct.connection_id, safe_base64_to_bytes(g_struct.proof_ack), g_struct.proof_height, g_struct.signer];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_CONFIRM = '/ibc.core.connection.v1.MsgConnectionOpenConfirm';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgConnectionOpenConfirmResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreConnectionMsgConnectionOpenConfirmResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_CONNECTION_OPEN_CONFIRM_RESPONSE = '/ibc.core.connection.v1.MsgConnectionOpenConfirmResponse';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signer - address
 *   - 1: params - defines the connection parameters to update. NOTE: All parameters must be supplied.
 */
export const destructIbcCoreConnectionMsgUpdateParams = (g_struct) => [g_struct.signer, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_UPDATE_PARAMS = '/ibc.core.connection.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link IbcCoreConnectionMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructIbcCoreConnectionMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_IBC_CORE_CONNECTION_MSG_UPDATE_PARAMS_RESPONSE = '/ibc.core.connection.v1.MsgUpdateParamsResponse';
//# sourceMappingURL=tx.js.map