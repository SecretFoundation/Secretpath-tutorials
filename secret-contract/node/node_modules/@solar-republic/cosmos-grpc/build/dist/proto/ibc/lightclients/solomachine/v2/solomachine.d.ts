import type { WeakUint64Str, CwUint64, CwBase64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../../google/protobuf/any.js';
import type { IbcCoreChannelChannel, DecodedIbcCoreChannelChannel } from '../../../core/channel/v1/channel.js';
import type { IbcCoreConnectionConnectionEnd, DecodedIbcCoreConnectionConnectionEnd } from '../../../core/connection/v1/connection.js';
export type EncodedIbcLightclientsSolomachineClientState = Encoded<'/ibc.lightclients.solomachine.v2.ClientState'>;
export type EncodedIbcLightclientsSolomachineConsensusState = Encoded<'/ibc.lightclients.solomachine.v2.ConsensusState'>;
export type EncodedIbcLightclientsSolomachineHeader = Encoded<'/ibc.lightclients.solomachine.v2.Header'>;
export type EncodedIbcLightclientsSolomachineMisbehaviour = Encoded<'/ibc.lightclients.solomachine.v2.Misbehaviour'>;
export type EncodedIbcLightclientsSolomachineSignatureAndData = Encoded<'/ibc.lightclients.solomachine.v2.SignatureAndData'>;
export type EncodedIbcLightclientsSolomachineTimestampedSignatureData = Encoded<'/ibc.lightclients.solomachine.v2.TimestampedSignatureData'>;
export type EncodedIbcLightclientsSolomachineSignBytes = Encoded<'/ibc.lightclients.solomachine.v2.SignBytes'>;
export type EncodedIbcLightclientsSolomachineHeaderData = Encoded<'/ibc.lightclients.solomachine.v2.HeaderData'>;
export type EncodedIbcLightclientsSolomachineClientStateData = Encoded<'/ibc.lightclients.solomachine.v2.ClientStateData'>;
export type EncodedIbcLightclientsSolomachineConsensusStateData = Encoded<'/ibc.lightclients.solomachine.v2.ConsensusStateData'>;
export type EncodedIbcLightclientsSolomachineConnectionStateData = Encoded<'/ibc.lightclients.solomachine.v2.ConnectionStateData'>;
export type EncodedIbcLightclientsSolomachineChannelStateData = Encoded<'/ibc.lightclients.solomachine.v2.ChannelStateData'>;
export type EncodedIbcLightclientsSolomachinePacketCommitmentData = Encoded<'/ibc.lightclients.solomachine.v2.PacketCommitmentData'>;
export type EncodedIbcLightclientsSolomachinePacketAcknowledgementData = Encoded<'/ibc.lightclients.solomachine.v2.PacketAcknowledgementData'>;
export type EncodedIbcLightclientsSolomachinePacketReceiptAbsenceData = Encoded<'/ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData'>;
export type EncodedIbcLightclientsSolomachineNextSequenceRecvData = Encoded<'/ibc.lightclients.solomachine.v2.NextSequenceRecvData'>;
/**
 * Encodes a `ClientState` protobuf message: defines a solo machine client that tracks the current consensus state and if the client is frozen.
 * @param sg_sequence - `sequence`: latest sequence of the client state
 * @param b_is_frozen - `is_frozen`: frozen sequence of the solo machine
 * @param g_consensus_state - `consensus_state`:
 * @param b_allow_update_after_proposal - `allow_update_after_proposal`: when set to true, will allow governance to update a solo machine client. The client will be unfrozen if it is frozen.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineClientState: (sg_sequence?: Opt<WeakUint64Str>, b_is_frozen?: Opt<boolean | 0 | 1>, atu8_consensus_state?: Opt<Encoded<'/ibc.lightclients.solomachine.v2.ConsensusState'>>, b_allow_update_after_proposal?: Opt<boolean | 0 | 1>) => EncodedIbcLightclientsSolomachineClientState;
/**
 * Encodes a `ConsensusState` protobuf message: defines a solo machine consensus state. The sequence of a consensus state is contained in the "height" key used in storing the consensus state.
 * @param atu8_public_key - `public_key`: public key of the solo machine
 * @param s_diversifier - `diversifier`: allows the same public key to be re-used across different solo machine clients (potentially on different chains) without being considered misbehaviour.
 * @param sg_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineConsensusState: (atu8_public_key?: Opt<Uint8Array>, s_diversifier?: Opt<string>, sg_timestamp?: Opt<WeakUint64Str>) => EncodedIbcLightclientsSolomachineConsensusState;
/**
 * Encodes a `Header` protobuf message: defines a solo machine consensus header
 * @param sg_sequence - `sequence`: to update solo machine public key at
 * @param sg_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @param atu8_new_public_key - `new_public_key`:
 * @param s_new_diversifier - `new_diversifier`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineHeader: (sg_sequence?: Opt<WeakUint64Str>, sg_timestamp?: Opt<WeakUint64Str>, atu8_signature?: Opt<Uint8Array>, atu8_new_public_key?: Opt<Uint8Array>, s_new_diversifier?: Opt<string>) => EncodedIbcLightclientsSolomachineHeader;
/**
 * Encodes a `Misbehaviour` protobuf message: defines misbehaviour for a solo machine which consists of a sequence and two signatures over different messages at that sequence.
 * @param si_client - `client_id`:
 * @param sg_sequence - `sequence`:
 * @param g_signature_one - `signature_one`:
 * @param g_signature_two - `signature_two`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineMisbehaviour: (si_client?: Opt<string>, sg_sequence?: Opt<WeakUint64Str>, atu8_signature_one?: Opt<Encoded<'/ibc.lightclients.solomachine.v2.SignatureAndData'>>, atu8_signature_two?: Opt<Encoded<'/ibc.lightclients.solomachine.v2.SignatureAndData'>>) => EncodedIbcLightclientsSolomachineMisbehaviour;
/**
 * Encodes a `SignatureAndData` protobuf message: contains a signature and the data signed over to create that signature.
 * @param atu8_signature - `signature`:
 * @param xc_data_type - `data_type`:
 * @param atu8_data - `data`:
 * @param sg_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineSignatureAndData: (atu8_signature?: Opt<Uint8Array>, xc_data_type?: Opt<ProtoEnumIbcLightclientsSolomachineDataType>, atu8_data?: Opt<Uint8Array>, sg_timestamp?: Opt<WeakUint64Str>) => EncodedIbcLightclientsSolomachineSignatureAndData;
/**
 * Encodes a `TimestampedSignatureData` protobuf message: contains the signature data and the timestamp of the signature.
 * @param atu8_signature_data - `signature_data`:
 * @param sg_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineTimestampedSignatureData: (atu8_signature_data?: Opt<Uint8Array>, sg_timestamp?: Opt<WeakUint64Str>) => EncodedIbcLightclientsSolomachineTimestampedSignatureData;
/**
 * Encodes a `SignBytes` protobuf message: defines the signed bytes used for signature verification.
 * @param sg_sequence - `sequence`:
 * @param sg_timestamp - `timestamp`:
 * @param s_diversifier - `diversifier`:
 * @param xc_data_type - `data_type`: type of the data used
 * @param atu8_data - `data`: marshaled data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineSignBytes: (sg_sequence?: Opt<WeakUint64Str>, sg_timestamp?: Opt<WeakUint64Str>, s_diversifier?: Opt<string>, xc_data_type?: Opt<ProtoEnumIbcLightclientsSolomachineDataType>, atu8_data?: Opt<Uint8Array>) => EncodedIbcLightclientsSolomachineSignBytes;
/**
 * Encodes a `HeaderData` protobuf message: returns the SignBytes data for update verification.
 * @param atu8_new_pub_key - `new_pub_key`: header public key
 * @param s_new_diversifier - `new_diversifier`: header diversifier
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineHeaderData: (atu8_new_pub_key?: Opt<Uint8Array>, s_new_diversifier?: Opt<string>) => EncodedIbcLightclientsSolomachineHeaderData;
/**
 * Encodes a `ClientStateData` protobuf message: returns the SignBytes data for client state verification.
 * @param atu8_path - `path`:
 * @param atu8_client_state - `client_state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineClientStateData: (atu8_path?: Opt<Uint8Array>, atu8_client_state?: Opt<Uint8Array>) => EncodedIbcLightclientsSolomachineClientStateData;
/**
 * Encodes a `ConsensusStateData` protobuf message: returns the SignBytes data for consensus state verification.
 * @param atu8_path - `path`:
 * @param atu8_consensus_state - `consensus_state`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineConsensusStateData: (atu8_path?: Opt<Uint8Array>, atu8_consensus_state?: Opt<Uint8Array>) => EncodedIbcLightclientsSolomachineConsensusStateData;
/**
 * Encodes a `ConnectionStateData` protobuf message: returns the SignBytes data for connection state verification.
 * @param atu8_path - `path`:
 * @param g_connection - `connection`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineConnectionStateData: (atu8_path?: Opt<Uint8Array>, atu8_connection?: Opt<Encoded<'/ibc.core.connection.v1.ConnectionEnd'>>) => EncodedIbcLightclientsSolomachineConnectionStateData;
/**
 * Encodes a `ChannelStateData` protobuf message: returns the SignBytes data for channel state verification.
 * @param atu8_path - `path`:
 * @param g_channel - `channel`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineChannelStateData: (atu8_path?: Opt<Uint8Array>, atu8_channel?: Opt<Encoded<'/ibc.core.channel.v1.Channel'>>) => EncodedIbcLightclientsSolomachineChannelStateData;
/**
 * Encodes a `PacketCommitmentData` protobuf message: returns the SignBytes data for packet commitment verification.
 * @param atu8_path - `path`:
 * @param atu8_commitment - `commitment`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachinePacketCommitmentData: (atu8_path?: Opt<Uint8Array>, atu8_commitment?: Opt<Uint8Array>) => EncodedIbcLightclientsSolomachinePacketCommitmentData;
/**
 * Encodes a `PacketAcknowledgementData` protobuf message: returns the SignBytes data for acknowledgement verification.
 * @param atu8_path - `path`:
 * @param atu8_acknowledgement - `acknowledgement`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachinePacketAcknowledgementData: (atu8_path?: Opt<Uint8Array>, atu8_acknowledgement?: Opt<Uint8Array>) => EncodedIbcLightclientsSolomachinePacketAcknowledgementData;
/**
 * Encodes a `PacketReceiptAbsenceData` protobuf message: returns the SignBytes data for packet receipt absence verification.
 * @param atu8_path - `path`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachinePacketReceiptAbsenceData: (atu8_path?: Opt<Uint8Array>) => EncodedIbcLightclientsSolomachinePacketReceiptAbsenceData;
/**
 * Encodes a `NextSequenceRecvData` protobuf message: returns the SignBytes data for verification of the next sequence to be received.
 * @param atu8_path - `path`:
 * @param sg_next_seq_recv - `next_seq_recv`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeIbcLightclientsSolomachineNextSequenceRecvData: (atu8_path?: Opt<Uint8Array>, sg_next_seq_recv?: Opt<WeakUint64Str>) => EncodedIbcLightclientsSolomachineNextSequenceRecvData;
/**
 * A decoded protobuf ClientState message
 *
 * Tuple where:
 *   - 0: sequence - latest sequence of the client state
 *   - 1: is_frozen - frozen sequence of the solo machine
 *   - 2: consensus_state -
 *   - 3: allow_update_after_proposal - when set to true, will allow governance to update a solo machine client. The client will be unfrozen if it is frozen.
 */
export type DecodedIbcLightclientsSolomachineClientState = [
    sg_sequence?: CwUint64,
    b_is_frozen?: 0 | 1,
    a_consensus_state?: DecodedIbcLightclientsSolomachineConsensusState,
    b_allow_update_after_proposal?: 0 | 1
];
/**
 * Decodes a protobuf ClientState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineClientState}
 */
export declare const decodeIbcLightclientsSolomachineClientState: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineClientState;
/**
 * A decoded protobuf ConsensusState message
 *
 * Tuple where:
 *   - 0: public_key - public key of the solo machine
 *   - 1: diversifier - allows the same public key to be re-used across different solo machine clients (potentially on different chains) without being considered misbehaviour.
 *   - 2: timestamp -
 */
export type DecodedIbcLightclientsSolomachineConsensusState = [
    a_public_key?: DecodedGoogleProtobufAny,
    s_diversifier?: string,
    sg_timestamp?: CwUint64
];
/**
 * Decodes a protobuf ConsensusState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineConsensusState}
 */
export declare const decodeIbcLightclientsSolomachineConsensusState: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineConsensusState;
/**
 * A decoded protobuf Header message
 *
 * Tuple where:
 *   - 0: sequence - to update solo machine public key at
 *   - 1: timestamp -
 *   - 2: signature -
 *   - 3: new_public_key -
 *   - 4: new_diversifier -
 */
export type DecodedIbcLightclientsSolomachineHeader = [
    sg_sequence?: CwUint64,
    sg_timestamp?: CwUint64,
    atu8_signature?: Uint8Array,
    a_new_public_key?: DecodedGoogleProtobufAny,
    s_new_diversifier?: string
];
/**
 * Decodes a protobuf Header message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineHeader}
 */
export declare const decodeIbcLightclientsSolomachineHeader: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineHeader;
/**
 * A decoded protobuf Misbehaviour message
 *
 * Tuple where:
 *   - 0: client_id -
 *   - 1: sequence -
 *   - 2: signature_one -
 *   - 3: signature_two -
 */
export type DecodedIbcLightclientsSolomachineMisbehaviour = [
    si_client?: string,
    sg_sequence?: CwUint64,
    a_signature_one?: DecodedIbcLightclientsSolomachineSignatureAndData,
    a_signature_two?: DecodedIbcLightclientsSolomachineSignatureAndData
];
/**
 * Decodes a protobuf Misbehaviour message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineMisbehaviour}
 */
export declare const decodeIbcLightclientsSolomachineMisbehaviour: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineMisbehaviour;
/**
 * A decoded protobuf SignatureAndData message
 *
 * Tuple where:
 *   - 0: signature -
 *   - 1: data_type -
 *   - 2: data -
 *   - 3: timestamp -
 */
export type DecodedIbcLightclientsSolomachineSignatureAndData = [
    atu8_signature?: Uint8Array,
    xc_data_type?: ProtoEnumIbcLightclientsSolomachineDataType,
    atu8_data?: Uint8Array,
    sg_timestamp?: CwUint64
];
/**
 * Decodes a protobuf SignatureAndData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineSignatureAndData}
 */
export declare const decodeIbcLightclientsSolomachineSignatureAndData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineSignatureAndData;
/**
 * A decoded protobuf TimestampedSignatureData message
 *
 * Tuple where:
 *   - 0: signature_data -
 *   - 1: timestamp -
 */
export type DecodedIbcLightclientsSolomachineTimestampedSignatureData = [
    atu8_signature_data?: Uint8Array,
    sg_timestamp?: CwUint64
];
/**
 * Decodes a protobuf TimestampedSignatureData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineTimestampedSignatureData}
 */
export declare const decodeIbcLightclientsSolomachineTimestampedSignatureData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineTimestampedSignatureData;
/**
 * A decoded protobuf SignBytes message
 *
 * Tuple where:
 *   - 0: sequence -
 *   - 1: timestamp -
 *   - 2: diversifier -
 *   - 3: data_type - type of the data used
 *   - 4: data - marshaled data
 */
export type DecodedIbcLightclientsSolomachineSignBytes = [
    sg_sequence?: CwUint64,
    sg_timestamp?: CwUint64,
    s_diversifier?: string,
    xc_data_type?: ProtoEnumIbcLightclientsSolomachineDataType,
    atu8_data?: Uint8Array
];
/**
 * Decodes a protobuf SignBytes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineSignBytes}
 */
export declare const decodeIbcLightclientsSolomachineSignBytes: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineSignBytes;
/**
 * A decoded protobuf HeaderData message
 *
 * Tuple where:
 *   - 0: new_pub_key - header public key
 *   - 1: new_diversifier - header diversifier
 */
export type DecodedIbcLightclientsSolomachineHeaderData = [
    a_new_pub_key?: DecodedGoogleProtobufAny,
    s_new_diversifier?: string
];
/**
 * Decodes a protobuf HeaderData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineHeaderData}
 */
export declare const decodeIbcLightclientsSolomachineHeaderData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineHeaderData;
/**
 * A decoded protobuf ClientStateData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: client_state -
 */
export type DecodedIbcLightclientsSolomachineClientStateData = [
    atu8_path?: Uint8Array,
    a_client_state?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf ClientStateData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineClientStateData}
 */
export declare const decodeIbcLightclientsSolomachineClientStateData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineClientStateData;
/**
 * A decoded protobuf ConsensusStateData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: consensus_state -
 */
export type DecodedIbcLightclientsSolomachineConsensusStateData = [
    atu8_path?: Uint8Array,
    a_consensus_state?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf ConsensusStateData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineConsensusStateData}
 */
export declare const decodeIbcLightclientsSolomachineConsensusStateData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineConsensusStateData;
/**
 * A decoded protobuf ConnectionStateData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: connection -
 */
export type DecodedIbcLightclientsSolomachineConnectionStateData = [
    atu8_path?: Uint8Array,
    a_connection?: DecodedIbcCoreConnectionConnectionEnd
];
/**
 * Decodes a protobuf ConnectionStateData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineConnectionStateData}
 */
export declare const decodeIbcLightclientsSolomachineConnectionStateData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineConnectionStateData;
/**
 * A decoded protobuf ChannelStateData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: channel -
 */
export type DecodedIbcLightclientsSolomachineChannelStateData = [
    atu8_path?: Uint8Array,
    a_channel?: DecodedIbcCoreChannelChannel
];
/**
 * Decodes a protobuf ChannelStateData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineChannelStateData}
 */
export declare const decodeIbcLightclientsSolomachineChannelStateData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineChannelStateData;
/**
 * A decoded protobuf PacketCommitmentData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: commitment -
 */
export type DecodedIbcLightclientsSolomachinePacketCommitmentData = [
    atu8_path?: Uint8Array,
    atu8_commitment?: Uint8Array
];
/**
 * Decodes a protobuf PacketCommitmentData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachinePacketCommitmentData}
 */
export declare const decodeIbcLightclientsSolomachinePacketCommitmentData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachinePacketCommitmentData;
/**
 * A decoded protobuf PacketAcknowledgementData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: acknowledgement -
 */
export type DecodedIbcLightclientsSolomachinePacketAcknowledgementData = [
    atu8_path?: Uint8Array,
    atu8_acknowledgement?: Uint8Array
];
/**
 * Decodes a protobuf PacketAcknowledgementData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachinePacketAcknowledgementData}
 */
export declare const decodeIbcLightclientsSolomachinePacketAcknowledgementData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachinePacketAcknowledgementData;
/**
 * A decoded protobuf PacketReceiptAbsenceData message
 *
 * Alias for: path -
 */
export type DecodedIbcLightclientsSolomachinePacketReceiptAbsenceData = [
    atu8_path?: Uint8Array
];
/**
 * Decodes a protobuf PacketReceiptAbsenceData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachinePacketReceiptAbsenceData}
 */
export declare const decodeIbcLightclientsSolomachinePacketReceiptAbsenceData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachinePacketReceiptAbsenceData;
/**
 * A decoded protobuf NextSequenceRecvData message
 *
 * Tuple where:
 *   - 0: path -
 *   - 1: next_seq_recv -
 */
export type DecodedIbcLightclientsSolomachineNextSequenceRecvData = [
    atu8_path?: Uint8Array,
    sg_next_seq_recv?: CwUint64
];
/**
 * Decodes a protobuf NextSequenceRecvData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedIbcLightclientsSolomachineNextSequenceRecvData}
 */
export declare const decodeIbcLightclientsSolomachineNextSequenceRecvData: (atu8_payload: Uint8Array) => DecodedIbcLightclientsSolomachineNextSequenceRecvData;
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineClientState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - latest sequence of the client state
 *   - 1: is_frozen - frozen sequence of the solo machine
 *   - 2: consensus_state -
 *   - 3: allow_update_after_proposal - when set to true, will allow governance to update a solo machine client. The client will be unfrozen if it is frozen.
 */
export declare const destructIbcLightclientsSolomachineClientState: (g_struct: IbcLightclientsSolomachineClientState) => [sequence?: CwUint64, is_frozen?: boolean, consensus_state?: IbcLightclientsSolomachineConsensusState, allow_update_after_proposal?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_CLIENT_STATE = "/ibc.lightclients.solomachine.v2.ClientState";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.ClientState` - defines a solo machine client that tracks the current consensus state and if the client is frozen.
 */
export type IbcLightclientsSolomachineClientState = {
    sequence?: CwUint64 | undefined;
    is_frozen?: boolean | undefined;
    consensus_state?: IbcLightclientsSolomachineConsensusState | undefined;
    allow_update_after_proposal?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineConsensusState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: public_key - public key of the solo machine
 *   - 1: diversifier - allows the same public key to be re-used across different solo machine clients (potentially on different chains) without being considered misbehaviour.
 *   - 2: timestamp -
 */
export declare const destructIbcLightclientsSolomachineConsensusState: (g_struct: IbcLightclientsSolomachineConsensusState) => [public_key?: JsonAny, diversifier?: string, timestamp?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_CONSENSUS_STATE = "/ibc.lightclients.solomachine.v2.ConsensusState";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.ConsensusState` - defines a solo machine consensus state. The sequence of a consensus state is contained in the "height" key used in storing the consensus state.
 */
export type IbcLightclientsSolomachineConsensusState = {
    public_key?: JsonAny | undefined;
    diversifier?: string | undefined;
    timestamp?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence - to update solo machine public key at
 *   - 1: timestamp -
 *   - 2: signature -
 *   - 3: new_public_key -
 *   - 4: new_diversifier -
 */
export declare const destructIbcLightclientsSolomachineHeader: (g_struct: IbcLightclientsSolomachineHeader) => [sequence?: CwUint64, timestamp?: CwUint64, signature?: Uint8Array, new_public_key?: JsonAny, new_diversifier?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_HEADER = "/ibc.lightclients.solomachine.v2.Header";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.Header` - defines a solo machine consensus header
 */
export type IbcLightclientsSolomachineHeader = {
    sequence?: CwUint64 | undefined;
    timestamp?: CwUint64 | undefined;
    signature?: CwBase64 | undefined;
    new_public_key?: JsonAny | undefined;
    new_diversifier?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineMisbehaviour} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: client_id -
 *   - 1: sequence -
 *   - 2: signature_one -
 *   - 3: signature_two -
 */
export declare const destructIbcLightclientsSolomachineMisbehaviour: (g_struct: IbcLightclientsSolomachineMisbehaviour) => [client_id?: string, sequence?: CwUint64, signature_one?: IbcLightclientsSolomachineSignatureAndData, signature_two?: IbcLightclientsSolomachineSignatureAndData];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_MISBEHAVIOUR = "/ibc.lightclients.solomachine.v2.Misbehaviour";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.Misbehaviour` - defines misbehaviour for a solo machine which consists of a sequence and two signatures over different messages at that sequence.
 */
export type IbcLightclientsSolomachineMisbehaviour = {
    client_id?: string | undefined;
    sequence?: CwUint64 | undefined;
    signature_one?: IbcLightclientsSolomachineSignatureAndData | undefined;
    signature_two?: IbcLightclientsSolomachineSignatureAndData | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineSignatureAndData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signature -
 *   - 1: data_type -
 *   - 2: data -
 *   - 3: timestamp -
 */
export declare const destructIbcLightclientsSolomachineSignatureAndData: (g_struct: IbcLightclientsSolomachineSignatureAndData) => [signature?: Uint8Array, data_type?: JsonEnumIbcLightclientsSolomachineDataType, data?: Uint8Array, timestamp?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_SIGNATURE_AND_DATA = "/ibc.lightclients.solomachine.v2.SignatureAndData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.SignatureAndData` - contains a signature and the data signed over to create that signature.
 */
export type IbcLightclientsSolomachineSignatureAndData = {
    signature?: CwBase64 | undefined;
    data_type?: JsonEnumIbcLightclientsSolomachineDataType | undefined;
    data?: CwBase64 | undefined;
    timestamp?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineTimestampedSignatureData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signature_data -
 *   - 1: timestamp -
 */
export declare const destructIbcLightclientsSolomachineTimestampedSignatureData: (g_struct: IbcLightclientsSolomachineTimestampedSignatureData) => [signature_data?: Uint8Array, timestamp?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_TIMESTAMPED_SIGNATURE_DATA = "/ibc.lightclients.solomachine.v2.TimestampedSignatureData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.TimestampedSignatureData` - contains the signature data and the timestamp of the signature.
 */
export type IbcLightclientsSolomachineTimestampedSignatureData = {
    signature_data?: CwBase64 | undefined;
    timestamp?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineSignBytes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sequence -
 *   - 1: timestamp -
 *   - 2: diversifier -
 *   - 3: data_type - type of the data used
 *   - 4: data - marshaled data
 */
export declare const destructIbcLightclientsSolomachineSignBytes: (g_struct: IbcLightclientsSolomachineSignBytes) => [sequence?: CwUint64, timestamp?: CwUint64, diversifier?: string, data_type?: JsonEnumIbcLightclientsSolomachineDataType, data?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_SIGN_BYTES = "/ibc.lightclients.solomachine.v2.SignBytes";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.SignBytes` - defines the signed bytes used for signature verification.
 */
export type IbcLightclientsSolomachineSignBytes = {
    sequence?: CwUint64 | undefined;
    timestamp?: CwUint64 | undefined;
    diversifier?: string | undefined;
    data_type?: JsonEnumIbcLightclientsSolomachineDataType | undefined;
    data?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineHeaderData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_pub_key - header public key
 *   - 1: new_diversifier - header diversifier
 */
export declare const destructIbcLightclientsSolomachineHeaderData: (g_struct: IbcLightclientsSolomachineHeaderData) => [new_pub_key?: JsonAny, new_diversifier?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_HEADER_DATA = "/ibc.lightclients.solomachine.v2.HeaderData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.HeaderData` - returns the SignBytes data for update verification.
 */
export type IbcLightclientsSolomachineHeaderData = {
    new_pub_key?: JsonAny | undefined;
    new_diversifier?: string | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineClientStateData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: client_state -
 */
export declare const destructIbcLightclientsSolomachineClientStateData: (g_struct: IbcLightclientsSolomachineClientStateData) => [path?: Uint8Array, client_state?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_CLIENT_STATE_DATA = "/ibc.lightclients.solomachine.v2.ClientStateData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.ClientStateData` - returns the SignBytes data for client state verification.
 */
export type IbcLightclientsSolomachineClientStateData = {
    path?: CwBase64 | undefined;
    client_state?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineConsensusStateData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: consensus_state -
 */
export declare const destructIbcLightclientsSolomachineConsensusStateData: (g_struct: IbcLightclientsSolomachineConsensusStateData) => [path?: Uint8Array, consensus_state?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_CONSENSUS_STATE_DATA = "/ibc.lightclients.solomachine.v2.ConsensusStateData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.ConsensusStateData` - returns the SignBytes data for consensus state verification.
 */
export type IbcLightclientsSolomachineConsensusStateData = {
    path?: CwBase64 | undefined;
    consensus_state?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineConnectionStateData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: connection -
 */
export declare const destructIbcLightclientsSolomachineConnectionStateData: (g_struct: IbcLightclientsSolomachineConnectionStateData) => [path?: Uint8Array, connection?: IbcCoreConnectionConnectionEnd];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_CONNECTION_STATE_DATA = "/ibc.lightclients.solomachine.v2.ConnectionStateData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.ConnectionStateData` - returns the SignBytes data for connection state verification.
 */
export type IbcLightclientsSolomachineConnectionStateData = {
    path?: CwBase64 | undefined;
    connection?: IbcCoreConnectionConnectionEnd | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineChannelStateData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: channel -
 */
export declare const destructIbcLightclientsSolomachineChannelStateData: (g_struct: IbcLightclientsSolomachineChannelStateData) => [path?: Uint8Array, channel?: IbcCoreChannelChannel];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_CHANNEL_STATE_DATA = "/ibc.lightclients.solomachine.v2.ChannelStateData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.ChannelStateData` - returns the SignBytes data for channel state verification.
 */
export type IbcLightclientsSolomachineChannelStateData = {
    path?: CwBase64 | undefined;
    channel?: IbcCoreChannelChannel | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachinePacketCommitmentData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: commitment -
 */
export declare const destructIbcLightclientsSolomachinePacketCommitmentData: (g_struct: IbcLightclientsSolomachinePacketCommitmentData) => [path?: Uint8Array, commitment?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_PACKET_COMMITMENT_DATA = "/ibc.lightclients.solomachine.v2.PacketCommitmentData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.PacketCommitmentData` - returns the SignBytes data for packet commitment verification.
 */
export type IbcLightclientsSolomachinePacketCommitmentData = {
    path?: CwBase64 | undefined;
    commitment?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachinePacketAcknowledgementData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: acknowledgement -
 */
export declare const destructIbcLightclientsSolomachinePacketAcknowledgementData: (g_struct: IbcLightclientsSolomachinePacketAcknowledgementData) => [path?: Uint8Array, acknowledgement?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_PACKET_ACKNOWLEDGEMENT_DATA = "/ibc.lightclients.solomachine.v2.PacketAcknowledgementData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.PacketAcknowledgementData` - returns the SignBytes data for acknowledgement verification.
 */
export type IbcLightclientsSolomachinePacketAcknowledgementData = {
    path?: CwBase64 | undefined;
    acknowledgement?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachinePacketReceiptAbsenceData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 */
export declare const destructIbcLightclientsSolomachinePacketReceiptAbsenceData: (g_struct: IbcLightclientsSolomachinePacketReceiptAbsenceData) => [path?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_PACKET_RECEIPT_ABSENCE_DATA = "/ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData` - returns the SignBytes data for packet receipt absence verification.
 */
export type IbcLightclientsSolomachinePacketReceiptAbsenceData = {
    path?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link IbcLightclientsSolomachineNextSequenceRecvData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: path -
 *   - 1: next_seq_recv -
 */
export declare const destructIbcLightclientsSolomachineNextSequenceRecvData: (g_struct: IbcLightclientsSolomachineNextSequenceRecvData) => [path?: Uint8Array, next_seq_recv?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_IBC_LIGHTCLIENTS_SOLOMACHINE_NEXT_SEQUENCE_RECV_DATA = "/ibc.lightclients.solomachine.v2.NextSequenceRecvData";
/**
 * JSON serialization of `ibc.lightclients.solomachine.v2.NextSequenceRecvData` - returns the SignBytes data for verification of the next sequence to be received.
 */
export type IbcLightclientsSolomachineNextSequenceRecvData = {
    path?: CwBase64 | undefined;
    next_seq_recv?: CwUint64 | undefined;
};
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_UNINITIALIZED_UNSPECIFIED** - Default State
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_UNINITIALIZED_UNSPECIFIED = 0;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_UNINITIALIZED_UNSPECIFIED** - Default State
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_UNINITIALIZED_UNSPECIFIED = "UNSPECIFIED";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CLIENT_STATE** - Data type for client state verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CLIENT_STATE = 1;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CLIENT_STATE** - Data type for client state verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CLIENT_STATE = "CLIENT";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CONSENSUS_STATE** - Data type for consensus state verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONSENSUS_STATE = 2;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CONSENSUS_STATE** - Data type for consensus state verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONSENSUS_STATE = "CONSENSUS";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CONNECTION_STATE** - Data type for connection state verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONNECTION_STATE = 3;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CONNECTION_STATE** - Data type for connection state verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONNECTION_STATE = "CONNECTION";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CHANNEL_STATE** - Data type for channel state verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CHANNEL_STATE = 4;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_CHANNEL_STATE** - Data type for channel state verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CHANNEL_STATE = "CHANNEL";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_PACKET_COMMITMENT** - Data type for packet commitment verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_COMMITMENT = 5;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_PACKET_COMMITMENT** - Data type for packet commitment verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_COMMITMENT = "PACKETCOMMITMENT";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_PACKET_ACKNOWLEDGEMENT** - Data type for packet acknowledgement verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_ACKNOWLEDGEMENT = 6;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_PACKET_ACKNOWLEDGEMENT** - Data type for packet acknowledgement verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_ACKNOWLEDGEMENT = "PACKETACKNOWLEDGEMENT";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_PACKET_RECEIPT_ABSENCE** - Data type for packet receipt absence verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_RECEIPT_ABSENCE = 7;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_PACKET_RECEIPT_ABSENCE** - Data type for packet receipt absence verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_RECEIPT_ABSENCE = "PACKETRECEIPTABSENCE";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_NEXT_SEQUENCE_RECV** - Data type for next sequence recv verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_NEXT_SEQUENCE_RECV = 8;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_NEXT_SEQUENCE_RECV** - Data type for next sequence recv verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_NEXT_SEQUENCE_RECV = "NEXTSEQUENCERECV";
/**
 * Protobuf enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_HEADER** - Data type for header verification
 *
 * Belongs to enum type {@link ProtoEnumIbcLightclientsSolomachineDataType}
 */
export declare const XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_HEADER = 9;
/**
 * JSON enum value for `ibc.lightclients.solomachine.v2.DataType`.
 *
 * **DATA_TYPE_HEADER** - Data type for header verification
 *
 * Belongs to enum type {@link JsonEnumIbcLightclientsSolomachineDataType}
 */
export declare const SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_HEADER = "HEADER";
/**
 * Raw protobuf enum values for `ibc.lightclients.solomachine.v2.DataType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_UNINITIALIZED_UNSPECIFIED}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CLIENT_STATE}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONSENSUS_STATE}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONNECTION_STATE}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CHANNEL_STATE}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_COMMITMENT}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_ACKNOWLEDGEMENT}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_RECEIPT_ABSENCE}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_NEXT_SEQUENCE_RECV}
 *   - {@link XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_HEADER}
 */
export type ProtoEnumIbcLightclientsSolomachineDataType = typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_UNINITIALIZED_UNSPECIFIED | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CLIENT_STATE | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONSENSUS_STATE | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONNECTION_STATE | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CHANNEL_STATE | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_COMMITMENT | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_ACKNOWLEDGEMENT | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_RECEIPT_ABSENCE | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_NEXT_SEQUENCE_RECV | typeof XC_PROTO_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_HEADER;
/**
 * JSON enum values for `ibc.lightclients.solomachine.v2.DataType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_UNINITIALIZED_UNSPECIFIED}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CLIENT_STATE}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONSENSUS_STATE}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONNECTION_STATE}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CHANNEL_STATE}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_COMMITMENT}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_ACKNOWLEDGEMENT}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_RECEIPT_ABSENCE}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_NEXT_SEQUENCE_RECV}
 *   - {@link SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_HEADER}
 */
export type JsonEnumIbcLightclientsSolomachineDataType = typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_UNINITIALIZED_UNSPECIFIED | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CLIENT_STATE | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONSENSUS_STATE | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CONNECTION_STATE | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_CHANNEL_STATE | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_COMMITMENT | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_ACKNOWLEDGEMENT | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_PACKET_RECEIPT_ABSENCE | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_NEXT_SEQUENCE_RECV | typeof SI_JSON_IBC_LIGHTCLIENTS_SOLOMACHINE_DATA_TYPE_HEADER;
/**
 * Maps a protobuf enum int value for `ibc.lightclients.solomachine.v2.DataType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumIbcLightclientsSolomachineDataType: Record<ProtoEnumIbcLightclientsSolomachineDataType, JsonEnumIbcLightclientsSolomachineDataType>;
/**
 * Maps a JSON enum string value for `ibc.lightclients.solomachine.v2.DataType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumIbcLightclientsSolomachineDataType: Record<JsonEnumIbcLightclientsSolomachineDataType, ProtoEnumIbcLightclientsSolomachineDataType>;
