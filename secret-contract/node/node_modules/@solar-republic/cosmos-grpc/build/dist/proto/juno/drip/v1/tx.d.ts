/// <reference types="node" />
import type { WeakAccountAddr, SlimCoin, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
import type { JunoDripParams, DecodedJunoDripParams } from './genesis.js';
export type EncodedJunoDripMsgDistributeTokens = Encoded<'/juno.drip.v1.MsgDistributeTokens'>;
export type EncodedJunoDripMsgDistributeTokensResponse = Encoded<'/juno.drip.v1.MsgDistributeTokensResponse'>;
export type EncodedJunoDripMsgUpdateParams = Encoded<'/juno.drip.v1.MsgUpdateParams'>;
export type EncodedJunoDripMsgUpdateParamsResponse = Encoded<'/juno.drip.v1.MsgUpdateParamsResponse'>;
/**
 * Distribute the sent tokens to all stakers in the next block
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender - the bech32 address of message sender.
 * @param a_amounts - the amount being airdropped to stakers
 * @returns an empty tuple
 */
export declare const submitJunoDripDistributeTokens: (z_req: string | ({
    origin: string;
} & RequestInit), sa_sender?: Opt<`${string}1${string}`>, a_amounts?: Opt<SlimCoin[]>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoDripMsgDistributeTokensResponse>>;
/**
 * Encodes a `MsgDistributeTokens` protobuf message: defines a message that registers a Distribution of tokens.
 * @param sa_sender - `sender_address`: the bech32 address of message sender.
 * @param a_amounts - `amount`: the amount being airdropped to stakers
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoDripMsgDistributeTokens: (sa_sender?: Opt<WeakAccountAddr>, a_amounts?: Opt<SlimCoin[]>) => EncodedJunoDripMsgDistributeTokens;
/**
 * Encodes a `MsgDistributeTokensResponse` protobuf message: defines the MsgDistributeTokens response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoDripMsgDistributeTokensResponse: () => EncodedJunoDripMsgDistributeTokensResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/auth parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoDripMsgUpdateParams: (s_authority?: Opt<string>, atu8_params?: Opt<Encoded<'/juno.drip.v1.Params'>>) => EncodedJunoDripMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoDripMsgUpdateParamsResponse: () => EncodedJunoDripMsgUpdateParamsResponse;
/**
 * A decoded protobuf DistributeTokens message
 *
 * Tuple where:
 *   - 0: sender_address - the bech32 address of message sender.
 *   - 1: amount - the amount being airdropped to stakers
 */
export type DecodedJunoDripMsgDistributeTokens = [
    sa_sender?: CwAccountAddr,
    a_amount?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf DistributeTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgDistributeTokens}
 */
export declare const decodeJunoDripMsgDistributeTokens: (atu8_payload: Uint8Array) => DecodedJunoDripMsgDistributeTokens;
/**
 * A decoded protobuf DistributeTokens message
 *
 * Tuple where:
 */
export type DecodedJunoDripMsgDistributeTokensResponse = [];
/**
 * Decodes a protobuf DistributeTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgDistributeTokensResponse}
 */
export declare const decodeJunoDripMsgDistributeTokensResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/auth parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedJunoDripMsgUpdateParams = [
    s_authority?: string,
    a_params?: DecodedJunoDripParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgUpdateParams}
 */
export declare const decodeJunoDripMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedJunoDripMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedJunoDripMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoDripMsgUpdateParamsResponse}
 */
export declare const decodeJunoDripMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link JunoDripMsgDistributeTokens} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender_address - the bech32 address of message sender.
 *   - 1: amount - the amount being airdropped to stakers
 */
export declare const destructJunoDripMsgDistributeTokens: (g_struct: JunoDripMsgDistributeTokens) => [sender_address?: CwAccountAddr, amount?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_DISTRIBUTE_TOKENS = "/juno.drip.v1.MsgDistributeTokens";
/**
 * JSON serialization of `juno.drip.v1.MsgDistributeTokens` - defines a message that registers a Distribution of tokens.
 */
export type JunoDripMsgDistributeTokens = {
    sender_address?: CwAccountAddr | undefined;
    amount?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link JunoDripMsgDistributeTokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoDripMsgDistributeTokensResponse: (g_struct: JunoDripMsgDistributeTokensResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_DISTRIBUTE_TOKENS_RESPONSE = "/juno.drip.v1.MsgDistributeTokensResponse";
/**
 * JSON serialization of `juno.drip.v1.MsgDistributeTokensResponse` - defines the MsgDistributeTokens response type
 */
export type JunoDripMsgDistributeTokensResponse = {};
/**
 * Destructures the fields of a {@link JunoDripMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/auth parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructJunoDripMsgUpdateParams: (g_struct: JunoDripMsgUpdateParams) => [authority?: string, params?: JunoDripParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_UPDATE_PARAMS = "/juno.drip.v1.MsgUpdateParams";
/**
 * JSON serialization of `juno.drip.v1.MsgUpdateParams` - the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 */
export type JunoDripMsgUpdateParams = {
    authority?: string | undefined;
    params?: JunoDripParams | undefined;
};
/**
 * Destructures the fields of a {@link JunoDripMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoDripMsgUpdateParamsResponse: (g_struct: JunoDripMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_DRIP_MSG_UPDATE_PARAMS_RESPONSE = "/juno.drip.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `juno.drip.v1.MsgUpdateParamsResponse` -
 */
export type JunoDripMsgUpdateParamsResponse = {};
