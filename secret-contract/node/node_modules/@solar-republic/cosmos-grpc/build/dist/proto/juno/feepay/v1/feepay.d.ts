import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedJunoFeepayFeePayContract = Encoded<'/juno.feepay.v1.FeePayContract'>;
export type EncodedJunoFeepayFeePayWalletUsage = Encoded<'/juno.feepay.v1.FeePayWalletUsage'>;
/**
 * Encodes a `FeePayContract` protobuf message: This defines the address, balance, and wallet limit of a fee pay contract.
 * @param sa_contract - `contract_address`: The address of the contract.
 * @param sg_balance - `balance`: The ledger balance of the contract.
 * @param sg_wallet_limit - `wallet_limit`: The number of times a wallet may interact with the contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeepayFeePayContract: (sa_contract?: Opt<WeakAccountAddr>, sg_balance?: Opt<WeakUint64Str>, sg_wallet_limit?: Opt<WeakUint64Str>) => EncodedJunoFeepayFeePayContract;
/**
 * Encodes a `FeePayWalletUsage` protobuf message: This object is used to store the number of times a wallet has interacted with a contract.
 * @param sa_contract - `contract_address`: The contract address.
 * @param sa_wallet - `wallet_address`: The wallet address.
 * @param sg_uses - `uses`: The number of uses corresponding to a wallet.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeepayFeePayWalletUsage: (sa_contract?: Opt<WeakAccountAddr>, sa_wallet?: Opt<WeakAccountAddr>, sg_uses?: Opt<WeakUint64Str>) => EncodedJunoFeepayFeePayWalletUsage;
/**
 * A decoded protobuf FeePayContract message
 *
 * Tuple where:
 *   - 0: contract_address - The address of the contract.
 *   - 1: balance - The ledger balance of the contract.
 *   - 2: wallet_limit - The number of times a wallet may interact with the contract.
 */
export type DecodedJunoFeepayFeePayContract = [
    sa_contract?: CwAccountAddr,
    sg_balance?: CwUint64,
    sg_wallet_limit?: CwUint64
];
/**
 * Decodes a protobuf FeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayFeePayContract}
 */
export declare const decodeJunoFeepayFeePayContract: (atu8_payload: Uint8Array) => DecodedJunoFeepayFeePayContract;
/**
 * A decoded protobuf FeePayWalletUsage message
 *
 * Tuple where:
 *   - 0: contract_address - The contract address.
 *   - 1: wallet_address - The wallet address.
 *   - 2: uses - The number of uses corresponding to a wallet.
 */
export type DecodedJunoFeepayFeePayWalletUsage = [
    sa_contract?: CwAccountAddr,
    sa_wallet?: CwAccountAddr,
    sg_uses?: CwUint64
];
/**
 * Decodes a protobuf FeePayWalletUsage message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayFeePayWalletUsage}
 */
export declare const decodeJunoFeepayFeePayWalletUsage: (atu8_payload: Uint8Array) => DecodedJunoFeepayFeePayWalletUsage;
/**
 * Destructures the fields of a {@link JunoFeepayFeePayContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - The address of the contract.
 *   - 1: balance - The ledger balance of the contract.
 *   - 2: wallet_limit - The number of times a wallet may interact with the contract.
 */
export declare const destructJunoFeepayFeePayContract: (g_struct: JunoFeepayFeePayContract) => [contract_address?: CwAccountAddr, balance?: CwUint64, wallet_limit?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEEPAY_FEE_PAY_CONTRACT = "/juno.feepay.v1.FeePayContract";
/**
 * JSON serialization of `juno.feepay.v1.FeePayContract` - This defines the address, balance, and wallet limit of a fee pay contract.
 */
export type JunoFeepayFeePayContract = {
    contract_address?: CwAccountAddr | undefined;
    balance?: CwUint64 | undefined;
    wallet_limit?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeepayFeePayWalletUsage} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - The contract address.
 *   - 1: wallet_address - The wallet address.
 *   - 2: uses - The number of uses corresponding to a wallet.
 */
export declare const destructJunoFeepayFeePayWalletUsage: (g_struct: JunoFeepayFeePayWalletUsage) => [contract_address?: CwAccountAddr, wallet_address?: CwAccountAddr, uses?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEEPAY_FEE_PAY_WALLET_USAGE = "/juno.feepay.v1.FeePayWalletUsage";
/**
 * JSON serialization of `juno.feepay.v1.FeePayWalletUsage` - This object is used to store the number of times a wallet has interacted with a contract.
 */
export type JunoFeepayFeePayWalletUsage = {
    contract_address?: CwAccountAddr | undefined;
    wallet_address?: CwAccountAddr | undefined;
    uses?: CwUint64 | undefined;
};
