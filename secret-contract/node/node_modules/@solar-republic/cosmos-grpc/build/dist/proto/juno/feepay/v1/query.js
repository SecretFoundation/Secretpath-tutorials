import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
import { decodeJunoFeepayFeePayContract } from './feepay.js';
import { decodeJunoFeepayParams } from './genesis.js';
const SR_LCD_JUNO_FEEPAY_QUERY = '/juno/feepay/v1/';
/**
 * Queries a single fee pay contract by address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - defines the address of the fee pay contract
 * @returns a tuple where:
 *   - 0: fee_pay_contract - contract defines the fee pay contract
 */
export const queryJunoFeepayFeePayContract = restful_grpc(sa_contract => [SR_LCD_JUNO_FEEPAY_QUERY + 'contract/' + sa_contract]);
/**
 * Retrieve all fee pay contracts
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: fee_pay_contracts - A slice of all the stored fee pay contracts
 *   - 1: pagination - A slice of all the stored fee pay contracts
 */
export const queryJunoFeepayFeePayContracts = restful_grpc(g_pagination => [SR_LCD_JUNO_FEEPAY_QUERY + 'all_contracts', {
        pagination: g_pagination,
    }]);
/**
 * Retrieve the number of uses on a fee pay contract by wallet
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - The contract address.
 * @param sa_wallet - The wallet address.
 * @returns a tuple where:
 *   - 0: uses - The number of uses on the fee pay contract by wallet
 */
export const queryJunoFeepayFeePayContractUses = restful_grpc((sa_contract, sa_wallet) => [SR_LCD_JUNO_FEEPAY_QUERY + 'contract/' + sa_contract + '/uses/' + sa_wallet]);
/**
 * Query if sender is eligible for fee pay contract interaction
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - The contract address.
 * @param sa_wallet - The wallet address.
 * @returns a tuple where:
 *   - 0: eligible - The eligibility of the wallet for fee pay contract interactions
 */
export const queryJunoFeepayFeePayWalletIsEligible = restful_grpc((sa_contract, sa_wallet) => [SR_LCD_JUNO_FEEPAY_QUERY + 'contract/' + sa_contract + '/eligible/' + sa_wallet]);
/**
 * Retrieves the FeePay module params
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the returned Feepay parameter
 */
export const queryJunoFeepayParams = restful_grpc(() => [SR_LCD_JUNO_FEEPAY_QUERY + 'params']);
/**
 * Encodes a `QueryFeePayContract` protobuf message: retrieves a single fee pay contract
 * @param sa_contract - `contract_address`: defines the address of the fee pay contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayContract = (sa_contract) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .o;
/**
 * Encodes a `QueryFeePayContractResponse` protobuf message: defines the response for retrieving a single fee pay contract
 * @param g_fee_pay_contract - `fee_pay_contract`: contract defines the fee pay contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayContractResponse = (atu8_fee_pay_contract) => Protobuf() // ...
    .b(atu8_fee_pay_contract) // FeePayContract fee_pay_contract = 1
    .o;
/**
 * Encodes a `QueryFeePayContracts` protobuf message: Message for querying a list of fee pay contracts
 * @param g_pagination - `pagination`: Pagination defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayContracts = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryFeePayContractsResponse` protobuf message: The response for querying all fee pay contracts
 * @param a_fee_pay_contracts - `fee_pay_contracts`: A slice of all the stored fee pay contracts
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayContractsResponse = (a_fee_pay_contracts, atu8_pagination) => Protobuf() // ...
    .B(a_fee_pay_contracts) // FeePayContract[] fee_pay_contracts = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryFeePayContractUses` protobuf message: Message for querying the number of uses on a fee pay contract by wallet
 * @param sa_contract - `contract_address`: The contract address.
 * @param sa_wallet - `wallet_address`: The wallet address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayContractUses = (sa_contract, sa_wallet) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_wallet) // string wallet_address = 2
    .o;
/**
 * Encodes a `QueryFeePayContractUsesResponse` protobuf message: The response for querying the number of uses on a fee pay contract by wallet
 * @param sg_uses - `uses`: The number of uses on the fee pay contract by wallet
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayContractUsesResponse = (sg_uses) => Protobuf() // ...
    .g(sg_uses) // uint64 uses = 1
    .o;
/**
 * Encodes a `QueryFeePayWalletIsEligible` protobuf message: Message for querying if a wallet is eligible for fee pay contract interactions
 * @param sa_contract - `contract_address`: The contract address.
 * @param sa_wallet - `wallet_address`: The wallet address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayWalletIsEligible = (sa_contract, sa_wallet) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .s(sa_wallet) // string wallet_address = 2
    .o;
/**
 * Encodes a `QueryFeePayWalletIsEligibleResponse` protobuf message: The response for querying if a wallet is eligible for fee pay contract interactions
 * @param b_eligible - `eligible`: The eligibility of the wallet for fee pay contract interactions
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryFeePayWalletIsEligibleResponse = (b_eligible) => Protobuf() // ...
    .v(b_eligible) // boolean eligible = 1
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: the returned Feepay parameter
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Decodes a protobuf QueryFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayContract}
 */
export const decodeJunoFeepayQueryFeePayContract = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayContractResponse}
 */
export const decodeJunoFeepayQueryFeePayContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeJunoFeepayFeePayContract]);
/**
 * Decodes a protobuf QueryFeePayContracts message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayContracts}
 */
export const decodeJunoFeepayQueryFeePayContracts = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryFeePayContracts message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayContractsResponse}
 */
export const decodeJunoFeepayQueryFeePayContractsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeJunoFeepayFeePayContract, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryFeePayContractUses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayContractUses}
 */
export const decodeJunoFeepayQueryFeePayContractUses = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryFeePayContractUses message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayContractUsesResponse}
 */
export const decodeJunoFeepayQueryFeePayContractUsesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryFeePayWalletIsEligible message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayWalletIsEligible}
 */
export const decodeJunoFeepayQueryFeePayWalletIsEligible = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryFeePayWalletIsEligible message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryFeePayWalletIsEligibleResponse}
 */
export const decodeJunoFeepayQueryFeePayWalletIsEligibleResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryParamsRequest}
 */
export const decodeJunoFeepayQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayQueryParamsResponse}
 */
export const decodeJunoFeepayQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeJunoFeepayParams]);
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - defines the address of the fee pay contract
 */
export const destructJunoFeepayQueryFeePayContract = (g_struct) => [g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_CONTRACT = '/juno.feepay.v1.QueryFeePayContract';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee_pay_contract - contract defines the fee pay contract
 */
export const destructJunoFeepayQueryFeePayContractResponse = (g_struct) => [g_struct.fee_pay_contract];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_CONTRACT_RESPONSE = '/juno.feepay.v1.QueryFeePayContractResponse';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayContracts} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines an optional pagination for the request.
 */
export const destructJunoFeepayQueryFeePayContracts = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_CONTRACTS = '/juno.feepay.v1.QueryFeePayContracts';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayContractsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: fee_pay_contracts - A slice of all the stored fee pay contracts
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructJunoFeepayQueryFeePayContractsResponse = (g_struct) => [g_struct.fee_pay_contracts, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_CONTRACTS_RESPONSE = '/juno.feepay.v1.QueryFeePayContractsResponse';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayContractUses} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - The contract address.
 *   - 1: wallet_address - The wallet address.
 */
export const destructJunoFeepayQueryFeePayContractUses = (g_struct) => [g_struct.contract_address, g_struct.wallet_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_CONTRACT_USES = '/juno.feepay.v1.QueryFeePayContractUses';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayContractUsesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: uses - The number of uses on the fee pay contract by wallet
 */
export const destructJunoFeepayQueryFeePayContractUsesResponse = (g_struct) => [g_struct.uses];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_CONTRACT_USES_RESPONSE = '/juno.feepay.v1.QueryFeePayContractUsesResponse';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayWalletIsEligible} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - The contract address.
 *   - 1: wallet_address - The wallet address.
 */
export const destructJunoFeepayQueryFeePayWalletIsEligible = (g_struct) => [g_struct.contract_address, g_struct.wallet_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_WALLET_IS_ELIGIBLE = '/juno.feepay.v1.QueryFeePayWalletIsEligible';
/**
 * Destructures the fields of a {@link JunoFeepayQueryFeePayWalletIsEligibleResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: eligible - The eligibility of the wallet for fee pay contract interactions
 */
export const destructJunoFeepayQueryFeePayWalletIsEligibleResponse = (g_struct) => [g_struct.eligible];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_FEE_PAY_WALLET_IS_ELIGIBLE_RESPONSE = '/juno.feepay.v1.QueryFeePayWalletIsEligibleResponse';
/**
 * Destructures the fields of a {@link JunoFeepayQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeepayQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_PARAMS_REQUEST = '/juno.feepay.v1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link JunoFeepayQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - the returned Feepay parameter
 */
export const destructJunoFeepayQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_QUERY_PARAMS_RESPONSE = '/juno.feepay.v1.QueryParamsResponse';
//# sourceMappingURL=query.js.map