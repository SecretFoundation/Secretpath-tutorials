import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, map, coins } from '../../../../api/protobuf-writer.js';
import { restful_grpc, restruct_coin } from '../../../../api/transport.js';
import { decodeJunoFeepayFeePayContract } from './feepay.js';
import { decodeJunoFeepayParams } from './genesis.js';
const SR_LCD_JUNO_FEEPAY_MSG = '/juno/feepay/v1/tx/';
/**
 * RegisterFeeShare registers a new contract for receiving transaction fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender - The wallet address of the sender.
 * @param g_fee_pay_contract - The fee pay contract to register.
 * @returns an empty tuple
 */
export const submitJunoFeepayRegisterFeePayContract = restful_grpc((sa_sender, g_fee_pay_contract) => [SR_LCD_JUNO_FEEPAY_MSG + 'register', {
        sender_address: sa_sender,
        fee_pay_contract: g_fee_pay_contract,
    }], 1);
/**
 * UnregisterFeeShare unregisters a contract for receiving transaction fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender - The wallet address of the sender.
 * @param sa_contract - The fee pay contract address.
 * @returns an empty tuple
 */
export const submitJunoFeepayUnregisterFeePayContract = restful_grpc((sa_sender, sa_contract) => [SR_LCD_JUNO_FEEPAY_MSG + 'unregister', {
        sender_address: sa_sender,
        contract_address: sa_contract,
    }], 1);
/**
 * Fund a fee pay contract
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender - The wallet address of the sender.
 * @param sa_contract - The fee pay contract to fund.
 * @param a_amounts - The coins to fund the contract with.
 * @returns an empty tuple
 */
export const submitJunoFeepayFundFeePayContract = restful_grpc((sa_sender, sa_contract, a_amounts) => [SR_LCD_JUNO_FEEPAY_MSG + 'fund', {
        sender_address: sa_sender,
        contract_address: sa_contract,
        amount: map(a_amounts, restruct_coin),
    }], 1);
/**
 * Update a fee pay contract wallet limit
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_sender - The wallet address of the sender.
 * @param sa_contract - The fee pay contract to fund.
 * @param sg_wallet_limit - The new wallet limit.
 * @returns an empty tuple
 */
export const submitJunoFeepayUpdateFeePayContractWalletLimit = restful_grpc((sa_sender, sa_contract, sg_wallet_limit) => [SR_LCD_JUNO_FEEPAY_MSG + 'update_wallet_limit', {
        sender_address: sa_sender,
        contract_address: sa_contract,
        wallet_limit: sg_wallet_limit,
    }], 1);
/**
 * Encodes a `MsgRegisterFeePayContract` protobuf message: The message to register a fee pay contract.
 * @param sa_sender - `sender_address`: The wallet address of the sender.
 * @param g_fee_pay_contract - `fee_pay_contract`: The fee pay contract to register.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgRegisterFeePayContract = (sa_sender, atu8_fee_pay_contract) => Protobuf() // ...
    .s(sa_sender) // string sender_address = 1
    .b(atu8_fee_pay_contract) // FeePayContract fee_pay_contract = 2
    .o;
/**
 * Encodes a `MsgRegisterFeePayContractResponse` protobuf message: The response message for registering a fee pay contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgRegisterFeePayContractResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUnregisterFeePayContract` protobuf message: The message to unregister a fee pay contract.
 * @param sa_sender - `sender_address`: The wallet address of the sender.
 * @param sa_contract - `contract_address`: The fee pay contract address.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgUnregisterFeePayContract = (sa_sender, sa_contract) => Protobuf() // ...
    .s(sa_sender) // string sender_address = 1
    .s(sa_contract) // string contract_address = 2
    .o;
/**
 * Encodes a `MsgUnregisterFeePayContractResponse` protobuf message: The response message for unregistering a fee pay contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgUnregisterFeePayContractResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgFundFeePayContract` protobuf message: The message to fund a fee pay contract
 * @param sa_sender - `sender_address`: The wallet address of the sender.
 * @param sa_contract - `contract_address`: The fee pay contract to fund.
 * @param a_amounts - `amount`: The coins to fund the contract with.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgFundFeePayContract = (sa_sender, sa_contract, a_amounts) => Protobuf() // ...
    .s(sa_sender) // string sender_address = 1
    .s(sa_contract) // string contract_address = 2
    .B(coins(a_amounts)) // Coin[] amount = 3
    .o;
/**
 * Encodes a `MsgFundFeePayContractResponse` protobuf message: The response message for funding a fee pay contract.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgFundFeePayContractResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateFeePayContractWalletLimit` protobuf message: The message to update a fee pay contract wallet limit.
 * @param sa_sender - `sender_address`: The wallet address of the sender.
 * @param sa_contract - `contract_address`: The fee pay contract to fund.
 * @param sg_wallet_limit - `wallet_limit`: The new wallet limit.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgUpdateFeePayContractWalletLimit = (sa_sender, sa_contract, sg_wallet_limit) => Protobuf() // ...
    .s(sa_sender) // string sender_address = 1
    .s(sa_contract) // string contract_address = 2
    .g(sg_wallet_limit) // uint64 wallet_limit = 3
    .o;
/**
 * Encodes a `MsgUpdateFeePayContractWalletLimitResponse` protobuf message: The response message for updating a fee pay contract wallet limit.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgUpdateFeePayContractWalletLimitResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/feepay parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgUpdateParams = (s_authority, atu8_params) => Protobuf() // ...
    .s(s_authority) // string authority = 1
    .b(atu8_params) // Params params = 2
    .o;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeepayMsgUpdateParamsResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf RegisterFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgRegisterFeePayContract}
 */
export const decodeJunoFeepayMsgRegisterFeePayContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeJunoFeepayFeePayContract]);
/**
 * Decodes a protobuf RegisterFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgRegisterFeePayContractResponse}
 */
export const decodeJunoFeepayMsgRegisterFeePayContractResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UnregisterFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgUnregisterFeePayContract}
 */
export const decodeJunoFeepayMsgUnregisterFeePayContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf UnregisterFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgUnregisterFeePayContractResponse}
 */
export const decodeJunoFeepayMsgUnregisterFeePayContractResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf FundFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgFundFeePayContract}
 */
export const decodeJunoFeepayMsgFundFeePayContract = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf FundFeePayContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgFundFeePayContractResponse}
 */
export const decodeJunoFeepayMsgFundFeePayContractResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateFeePayContractWalletLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgUpdateFeePayContractWalletLimit}
 */
export const decodeJunoFeepayMsgUpdateFeePayContractWalletLimit = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Decodes a protobuf UpdateFeePayContractWalletLimit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgUpdateFeePayContractWalletLimitResponse}
 */
export const decodeJunoFeepayMsgUpdateFeePayContractWalletLimitResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgUpdateParams}
 */
export const decodeJunoFeepayMsgUpdateParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeJunoFeepayParams]);
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeepayMsgUpdateParamsResponse}
 */
export const decodeJunoFeepayMsgUpdateParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link JunoFeepayMsgRegisterFeePayContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender_address - The wallet address of the sender.
 *   - 1: fee_pay_contract - The fee pay contract to register.
 */
export const destructJunoFeepayMsgRegisterFeePayContract = (g_struct) => [g_struct.sender_address, g_struct.fee_pay_contract];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_REGISTER_FEE_PAY_CONTRACT = '/juno.feepay.v1.MsgRegisterFeePayContract';
/**
 * Destructures the fields of a {@link JunoFeepayMsgRegisterFeePayContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeepayMsgRegisterFeePayContractResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_REGISTER_FEE_PAY_CONTRACT_RESPONSE = '/juno.feepay.v1.MsgRegisterFeePayContractResponse';
/**
 * Destructures the fields of a {@link JunoFeepayMsgUnregisterFeePayContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender_address - The wallet address of the sender.
 *   - 1: contract_address - The fee pay contract address.
 */
export const destructJunoFeepayMsgUnregisterFeePayContract = (g_struct) => [g_struct.sender_address, g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_UNREGISTER_FEE_PAY_CONTRACT = '/juno.feepay.v1.MsgUnregisterFeePayContract';
/**
 * Destructures the fields of a {@link JunoFeepayMsgUnregisterFeePayContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeepayMsgUnregisterFeePayContractResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_UNREGISTER_FEE_PAY_CONTRACT_RESPONSE = '/juno.feepay.v1.MsgUnregisterFeePayContractResponse';
/**
 * Destructures the fields of a {@link JunoFeepayMsgFundFeePayContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender_address - The wallet address of the sender.
 *   - 1: contract_address - The fee pay contract to fund.
 *   - 2: amount - The coins to fund the contract with.
 */
export const destructJunoFeepayMsgFundFeePayContract = (g_struct) => [g_struct.sender_address, g_struct.contract_address, g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_FUND_FEE_PAY_CONTRACT = '/juno.feepay.v1.MsgFundFeePayContract';
/**
 * Destructures the fields of a {@link JunoFeepayMsgFundFeePayContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeepayMsgFundFeePayContractResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_FUND_FEE_PAY_CONTRACT_RESPONSE = '/juno.feepay.v1.MsgFundFeePayContractResponse';
/**
 * Destructures the fields of a {@link JunoFeepayMsgUpdateFeePayContractWalletLimit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender_address - The wallet address of the sender.
 *   - 1: contract_address - The fee pay contract to fund.
 *   - 2: wallet_limit - The new wallet limit.
 */
export const destructJunoFeepayMsgUpdateFeePayContractWalletLimit = (g_struct) => [g_struct.sender_address, g_struct.contract_address, g_struct.wallet_limit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_UPDATE_FEE_PAY_CONTRACT_WALLET_LIMIT = '/juno.feepay.v1.MsgUpdateFeePayContractWalletLimit';
/**
 * Destructures the fields of a {@link JunoFeepayMsgUpdateFeePayContractWalletLimitResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeepayMsgUpdateFeePayContractWalletLimitResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_UPDATE_FEE_PAY_CONTRACT_WALLET_LIMIT_RESPONSE = '/juno.feepay.v1.MsgUpdateFeePayContractWalletLimitResponse';
/**
 * Destructures the fields of a {@link JunoFeepayMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/feepay parameters to update. NOTE: All parameters must be supplied.
 */
export const destructJunoFeepayMsgUpdateParams = (g_struct) => [g_struct.authority, g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_UPDATE_PARAMS = '/juno.feepay.v1.MsgUpdateParams';
/**
 * Destructures the fields of a {@link JunoFeepayMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeepayMsgUpdateParamsResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEEPAY_MSG_UPDATE_PARAMS_RESPONSE = '/juno.feepay.v1.MsgUpdateParamsResponse';
//# sourceMappingURL=tx.js.map