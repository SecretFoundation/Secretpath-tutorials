import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedJunoFeeshareFeeShare = Encoded<'/juno.feeshare.v1.FeeShare'>;
/**
 * Encodes a `FeeShare` protobuf message: defines an instance that organizes fee distribution conditions for the owner of a given smart contract
 * @param sa_contract - `contract_address`: the bech32 address of a registered contract in string form
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same as the contracts admin address.
 * @param sa_withdrawer - `withdrawer_address`: the bech32 address of account receiving the transaction fees.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareFeeShare: (sa_contract?: Opt<WeakAccountAddr>, sa_deployer?: Opt<WeakAccountAddr>, sa_withdrawer?: Opt<WeakAccountAddr>) => EncodedJunoFeeshareFeeShare;
/**
 * A decoded protobuf FeeShare message
 *
 * Tuple where:
 *   - 0: contract_address - the bech32 address of a registered contract in string form
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same as the contracts admin address.
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees.
 */
export type DecodedJunoFeeshareFeeShare = [
    sa_contract?: CwAccountAddr,
    sa_deployer?: CwAccountAddr,
    sa_withdrawer?: CwAccountAddr
];
/**
 * Decodes a protobuf FeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareFeeShare}
 */
export declare const decodeJunoFeeshareFeeShare: (atu8_payload: Uint8Array) => DecodedJunoFeeshareFeeShare;
/**
 * Destructures the fields of a {@link JunoFeeshareFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 address of a registered contract in string form
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same as the contracts admin address.
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees.
 */
export declare const destructJunoFeeshareFeeShare: (g_struct: JunoFeeshareFeeShare) => [contract_address?: CwAccountAddr, deployer_address?: CwAccountAddr, withdrawer_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_FEE_SHARE = "/juno.feeshare.v1.FeeShare";
/**
 * JSON serialization of `juno.feeshare.v1.FeeShare` - defines an instance that organizes fee distribution conditions for the owner of a given smart contract
 */
export type JunoFeeshareFeeShare = {
    contract_address?: CwAccountAddr | undefined;
    deployer_address?: CwAccountAddr | undefined;
    withdrawer_address?: CwAccountAddr | undefined;
};
