/// <reference types="node" />
import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
import type { JunoFeeshareFeeShare, DecodedJunoFeeshareFeeShare } from './feeshare.js';
import type { JunoFeeshareParams, DecodedJunoFeeshareParams } from './genesis.js';
export type EncodedJunoFeeshareQueryFeeSharesRequest = Encoded<'/juno.feeshare.v1.QueryFeeSharesRequest'>;
export type EncodedJunoFeeshareQueryFeeSharesResponse = Encoded<'/juno.feeshare.v1.QueryFeeSharesResponse'>;
export type EncodedJunoFeeshareQueryFeeShareRequest = Encoded<'/juno.feeshare.v1.QueryFeeShareRequest'>;
export type EncodedJunoFeeshareQueryFeeShareResponse = Encoded<'/juno.feeshare.v1.QueryFeeShareResponse'>;
export type EncodedJunoFeeshareQueryParamsRequest = Encoded<'/juno.feeshare.v1.QueryParamsRequest'>;
export type EncodedJunoFeeshareQueryParamsResponse = Encoded<'/juno.feeshare.v1.QueryParamsResponse'>;
export type EncodedJunoFeeshareQueryDeployerFeeSharesRequest = Encoded<'/juno.feeshare.v1.QueryDeployerFeeSharesRequest'>;
export type EncodedJunoFeeshareQueryDeployerFeeSharesResponse = Encoded<'/juno.feeshare.v1.QueryDeployerFeeSharesResponse'>;
export type EncodedJunoFeeshareQueryWithdrawerFeeSharesRequest = Encoded<'/juno.feeshare.v1.QueryWithdrawerFeeSharesRequest'>;
export type EncodedJunoFeeshareQueryWithdrawerFeeSharesResponse = Encoded<'/juno.feeshare.v1.QueryWithdrawerFeeSharesResponse'>;
/**
 * Retrieves all registered FeeShares
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a slice of all stored Reveneue
 *   - 1: pagination - FeeShare is a slice of all stored Reveneue
 */
export declare const queryJunoFeeshareFeeShares: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareQueryFeeSharesResponse>>;
/**
 * Retrieves a registered FeeShare for a given contract address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - of a registered contract in bech32 format
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a stored Reveneue for the queried contract
 */
export declare const queryJunoFeeshareFeeShare: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareQueryFeeShareResponse>>;
/**
 * Retrieves the FeeShare module params
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the returned FeeShare parameter
 */
export declare const queryJunoFeeshareParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareQueryParamsResponse>>;
/**
 * Retrieves all FeeShares that a given deployer has registered
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_deployer - in bech32 format
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a deployer
 *   - 1: pagination - the slice of registered contract addresses for a deployer
 */
export declare const queryJunoFeeshareDeployerFeeShares: (z_req: string | ({
    origin: string;
} & RequestInit), sa_deployer?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareQueryDeployerFeeSharesResponse>>;
/**
 * Retrieves all FeeShares with a given withdrawer address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_withdrawer - in bech32 format
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a withdrawer
 *   - 1: pagination - the slice of registered contract addresses for a withdrawer
 */
export declare const queryJunoFeeshareWithdrawerFeeShares: (z_req: string | ({
    origin: string;
} & RequestInit), sa_withdrawer?: Opt<`${string}1${string}`>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareQueryWithdrawerFeeSharesResponse>>;
/**
 * Encodes a `QueryFeeSharesRequest` protobuf message: the request type for the Query/FeeShares RPC method.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryFeeSharesRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedJunoFeeshareQueryFeeSharesRequest;
/**
 * Encodes a `QueryFeeSharesResponse` protobuf message: the response type for the Query/FeeShares RPC method.
 * @param a_feeshares - `feeshare`: FeeShare is a slice of all stored Reveneue
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryFeeSharesResponse: (a_feeshares?: Opt<Encoded<'/juno.feeshare.v1.FeeShare'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedJunoFeeshareQueryFeeSharesResponse;
/**
 * Encodes a `QueryFeeShareRequest` protobuf message: the request type for the Query/FeeShare RPC method.
 * @param sa_contract - `contract_address`: of a registered contract in bech32 format
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryFeeShareRequest: (sa_contract?: Opt<WeakAccountAddr>) => EncodedJunoFeeshareQueryFeeShareRequest;
/**
 * Encodes a `QueryFeeShareResponse` protobuf message: the response type for the Query/FeeShare RPC method.
 * @param g_feeshare - `feeshare`: FeeShare is a stored Reveneue for the queried contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryFeeShareResponse: (atu8_feeshare?: Opt<Encoded<'/juno.feeshare.v1.FeeShare'>>) => EncodedJunoFeeshareQueryFeeShareResponse;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryParamsRequest: () => EncodedJunoFeeshareQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: the returned FeeShare parameter
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryParamsResponse: (atu8_params?: Opt<Encoded<'/juno.feeshare.v1.Params'>>) => EncodedJunoFeeshareQueryParamsResponse;
/**
 * Encodes a `QueryDeployerFeeSharesRequest` protobuf message: the request type for the Query/DeployerFeeShares RPC method.
 * @param sa_deployer - `deployer_address`: in bech32 format
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryDeployerFeeSharesRequest: (sa_deployer?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedJunoFeeshareQueryDeployerFeeSharesRequest;
/**
 * Encodes a `QueryDeployerFeeSharesResponse` protobuf message: the response type for the Query/DeployerFeeShares RPC method.
 * @param a_contract_addresses - `contract_addresses`: the slice of registered contract addresses for a deployer
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryDeployerFeeSharesResponse: (a_contract_addresses?: Opt<string[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedJunoFeeshareQueryDeployerFeeSharesResponse;
/**
 * Encodes a `QueryWithdrawerFeeSharesRequest` protobuf message: the request type for the Query/WithdrawerFeeShares RPC method.
 * @param sa_withdrawer - `withdrawer_address`: in bech32 format
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryWithdrawerFeeSharesRequest: (sa_withdrawer?: Opt<WeakAccountAddr>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedJunoFeeshareQueryWithdrawerFeeSharesRequest;
/**
 * Encodes a `QueryWithdrawerFeeSharesResponse` protobuf message: the response type for the Query/WithdrawerFeeShares RPC method.
 * @param a_contract_addresses - `contract_addresses`: the slice of registered contract addresses for a withdrawer
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareQueryWithdrawerFeeSharesResponse: (a_contract_addresses?: Opt<string[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedJunoFeeshareQueryWithdrawerFeeSharesResponse;
/**
 * A decoded protobuf QueryFeeSharesRequest message
 *
 * Alias for: pagination - defines an optional pagination for the request.
 */
export type DecodedJunoFeeshareQueryFeeSharesRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryFeeSharesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeSharesRequest}
 */
export declare const decodeJunoFeeshareQueryFeeSharesRequest: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryFeeSharesRequest;
/**
 * A decoded protobuf QueryFeeShares message
 *
 * Tuple where:
 *   - 0: feeshare - FeeShare is a slice of all stored Reveneue
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedJunoFeeshareQueryFeeSharesResponse = [
    a_feeshare?: DecodedJunoFeeshareFeeShare[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryFeeShares message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeSharesResponse}
 */
export declare const decodeJunoFeeshareQueryFeeSharesResponse: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryFeeSharesResponse;
/**
 * A decoded protobuf QueryFeeShareRequest message
 *
 * Alias for: contract_address - of a registered contract in bech32 format
 */
export type DecodedJunoFeeshareQueryFeeShareRequest = [
    sa_contract?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryFeeShareRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeShareRequest}
 */
export declare const decodeJunoFeeshareQueryFeeShareRequest: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryFeeShareRequest;
/**
 * A decoded protobuf QueryFeeShare message
 *
 * Alias for: feeshare - FeeShare is a stored Reveneue for the queried contract
 */
export type DecodedJunoFeeshareQueryFeeShareResponse = [
    a_feeshare?: DecodedJunoFeeshareFeeShare
];
/**
 * Decodes a protobuf QueryFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeShareResponse}
 */
export declare const decodeJunoFeeshareQueryFeeShareResponse: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryFeeShareResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedJunoFeeshareQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryParamsRequest}
 */
export declare const decodeJunoFeeshareQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - the returned FeeShare parameter
 */
export type DecodedJunoFeeshareQueryParamsResponse = [
    a_params?: DecodedJunoFeeshareParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryParamsResponse}
 */
export declare const decodeJunoFeeshareQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryParamsResponse;
/**
 * A decoded protobuf QueryDeployerFeeSharesRequest message
 *
 * Tuple where:
 *   - 0: deployer_address - in bech32 format
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedJunoFeeshareQueryDeployerFeeSharesRequest = [
    sa_deployer?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryDeployerFeeSharesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryDeployerFeeSharesRequest}
 */
export declare const decodeJunoFeeshareQueryDeployerFeeSharesRequest: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryDeployerFeeSharesRequest;
/**
 * A decoded protobuf QueryDeployerFeeShares message
 *
 * Tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a deployer
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedJunoFeeshareQueryDeployerFeeSharesResponse = [
    a_contract_addresses?: string[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryDeployerFeeShares message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryDeployerFeeSharesResponse}
 */
export declare const decodeJunoFeeshareQueryDeployerFeeSharesResponse: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryDeployerFeeSharesResponse;
/**
 * A decoded protobuf QueryWithdrawerFeeSharesRequest message
 *
 * Tuple where:
 *   - 0: withdrawer_address - in bech32 format
 *   - 1: pagination - defines an optional pagination for the request.
 */
export type DecodedJunoFeeshareQueryWithdrawerFeeSharesRequest = [
    sa_withdrawer?: CwAccountAddr,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf QueryWithdrawerFeeSharesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryWithdrawerFeeSharesRequest}
 */
export declare const decodeJunoFeeshareQueryWithdrawerFeeSharesRequest: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryWithdrawerFeeSharesRequest;
/**
 * A decoded protobuf QueryWithdrawerFeeShares message
 *
 * Tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a withdrawer
 *   - 1: pagination - defines the pagination in the response.
 */
export type DecodedJunoFeeshareQueryWithdrawerFeeSharesResponse = [
    a_contract_addresses?: string[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf QueryWithdrawerFeeShares message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryWithdrawerFeeSharesResponse}
 */
export declare const decodeJunoFeeshareQueryWithdrawerFeeSharesResponse: (atu8_payload: Uint8Array) => DecodedJunoFeeshareQueryWithdrawerFeeSharesResponse;
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeSharesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export declare const destructJunoFeeshareQueryFeeSharesRequest: (g_struct: JunoFeeshareQueryFeeSharesRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARES_REQUEST = "/juno.feeshare.v1.QueryFeeSharesRequest";
/**
 * JSON serialization of `juno.feeshare.v1.QueryFeeSharesRequest` - the request type for the Query/FeeShares RPC method.
 */
export type JunoFeeshareQueryFeeSharesRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeSharesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a slice of all stored Reveneue
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructJunoFeeshareQueryFeeSharesResponse: (g_struct: JunoFeeshareQueryFeeSharesResponse) => [feeshare?: JunoFeeshareFeeShare[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARES_RESPONSE = "/juno.feeshare.v1.QueryFeeSharesResponse";
/**
 * JSON serialization of `juno.feeshare.v1.QueryFeeSharesResponse` - the response type for the Query/FeeShares RPC method.
 */
export type JunoFeeshareQueryFeeSharesResponse = {
    feeshare?: JunoFeeshareFeeShare[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeShareRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - of a registered contract in bech32 format
 */
export declare const destructJunoFeeshareQueryFeeShareRequest: (g_struct: JunoFeeshareQueryFeeShareRequest) => [contract_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARE_REQUEST = "/juno.feeshare.v1.QueryFeeShareRequest";
/**
 * JSON serialization of `juno.feeshare.v1.QueryFeeShareRequest` - the request type for the Query/FeeShare RPC method.
 */
export type JunoFeeshareQueryFeeShareRequest = {
    contract_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a stored Reveneue for the queried contract
 */
export declare const destructJunoFeeshareQueryFeeShareResponse: (g_struct: JunoFeeshareQueryFeeShareResponse) => [feeshare?: JunoFeeshareFeeShare];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARE_RESPONSE = "/juno.feeshare.v1.QueryFeeShareResponse";
/**
 * JSON serialization of `juno.feeshare.v1.QueryFeeShareResponse` - the response type for the Query/FeeShare RPC method.
 */
export type JunoFeeshareQueryFeeShareResponse = {
    feeshare?: JunoFeeshareFeeShare | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoFeeshareQueryParamsRequest: (g_struct: JunoFeeshareQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_PARAMS_REQUEST = "/juno.feeshare.v1.QueryParamsRequest";
/**
 * JSON serialization of `juno.feeshare.v1.QueryParamsRequest` - the request type for the Query/Params RPC method.
 */
export type JunoFeeshareQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - the returned FeeShare parameter
 */
export declare const destructJunoFeeshareQueryParamsResponse: (g_struct: JunoFeeshareQueryParamsResponse) => [params?: JunoFeeshareParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_PARAMS_RESPONSE = "/juno.feeshare.v1.QueryParamsResponse";
/**
 * JSON serialization of `juno.feeshare.v1.QueryParamsResponse` - the response type for the Query/Params RPC method.
 */
export type JunoFeeshareQueryParamsResponse = {
    params?: JunoFeeshareParams | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryDeployerFeeSharesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployer_address - in bech32 format
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructJunoFeeshareQueryDeployerFeeSharesRequest: (g_struct: JunoFeeshareQueryDeployerFeeSharesRequest) => [deployer_address?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_DEPLOYER_FEE_SHARES_REQUEST = "/juno.feeshare.v1.QueryDeployerFeeSharesRequest";
/**
 * JSON serialization of `juno.feeshare.v1.QueryDeployerFeeSharesRequest` - the request type for the Query/DeployerFeeShares RPC method.
 */
export type JunoFeeshareQueryDeployerFeeSharesRequest = {
    deployer_address?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryDeployerFeeSharesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a deployer
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructJunoFeeshareQueryDeployerFeeSharesResponse: (g_struct: JunoFeeshareQueryDeployerFeeSharesResponse) => [contract_addresses?: string[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_DEPLOYER_FEE_SHARES_RESPONSE = "/juno.feeshare.v1.QueryDeployerFeeSharesResponse";
/**
 * JSON serialization of `juno.feeshare.v1.QueryDeployerFeeSharesResponse` - the response type for the Query/DeployerFeeShares RPC method.
 */
export type JunoFeeshareQueryDeployerFeeSharesResponse = {
    contract_addresses?: string[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryWithdrawerFeeSharesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: withdrawer_address - in bech32 format
 *   - 1: pagination - defines an optional pagination for the request.
 */
export declare const destructJunoFeeshareQueryWithdrawerFeeSharesRequest: (g_struct: JunoFeeshareQueryWithdrawerFeeSharesRequest) => [withdrawer_address?: CwAccountAddr, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_WITHDRAWER_FEE_SHARES_REQUEST = "/juno.feeshare.v1.QueryWithdrawerFeeSharesRequest";
/**
 * JSON serialization of `juno.feeshare.v1.QueryWithdrawerFeeSharesRequest` - the request type for the Query/WithdrawerFeeShares RPC method.
 */
export type JunoFeeshareQueryWithdrawerFeeSharesRequest = {
    withdrawer_address?: CwAccountAddr | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareQueryWithdrawerFeeSharesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a withdrawer
 *   - 1: pagination - defines the pagination in the response.
 */
export declare const destructJunoFeeshareQueryWithdrawerFeeSharesResponse: (g_struct: JunoFeeshareQueryWithdrawerFeeSharesResponse) => [contract_addresses?: string[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_WITHDRAWER_FEE_SHARES_RESPONSE = "/juno.feeshare.v1.QueryWithdrawerFeeSharesResponse";
/**
 * JSON serialization of `juno.feeshare.v1.QueryWithdrawerFeeSharesResponse` - the response type for the Query/WithdrawerFeeShares RPC method.
 */
export type JunoFeeshareQueryWithdrawerFeeSharesResponse = {
    contract_addresses?: string[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
