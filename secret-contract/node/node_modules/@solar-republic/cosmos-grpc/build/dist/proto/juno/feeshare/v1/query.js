import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../../cosmos/base/query/v1beta1/pagination.js';
import { decodeJunoFeeshareFeeShare } from './feeshare.js';
import { decodeJunoFeeshareParams } from './genesis.js';
const SR_LCD_JUNO_FEESHARE_QUERY = '/juno/feeshare/v1/';
/**
 * Retrieves all registered FeeShares
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a slice of all stored Reveneue
 *   - 1: pagination - FeeShare is a slice of all stored Reveneue
 */
export const queryJunoFeeshareFeeShares = restful_grpc(g_pagination => [SR_LCD_JUNO_FEESHARE_QUERY + 'fee_shares', {
        pagination: g_pagination,
    }]);
/**
 * Retrieves a registered FeeShare for a given contract address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - of a registered contract in bech32 format
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a stored Reveneue for the queried contract
 */
export const queryJunoFeeshareFeeShare = restful_grpc(sa_contract => [SR_LCD_JUNO_FEESHARE_QUERY + 'fee_shares/' + sa_contract]);
/**
 * Retrieves the FeeShare module params
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - the returned FeeShare parameter
 */
export const queryJunoFeeshareParams = restful_grpc(() => [SR_LCD_JUNO_FEESHARE_QUERY + 'params']);
/**
 * Retrieves all FeeShares that a given deployer has registered
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_deployer - in bech32 format
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a deployer
 *   - 1: pagination - the slice of registered contract addresses for a deployer
 */
export const queryJunoFeeshareDeployerFeeShares = restful_grpc((sa_deployer, g_pagination) => [SR_LCD_JUNO_FEESHARE_QUERY + 'fee_shares/' + sa_deployer, {
        pagination: g_pagination,
    }]);
/**
 * Retrieves all FeeShares with a given withdrawer address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_withdrawer - in bech32 format
 * @param g_pagination - defines an optional pagination for the request.
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a withdrawer
 *   - 1: pagination - the slice of registered contract addresses for a withdrawer
 */
export const queryJunoFeeshareWithdrawerFeeShares = restful_grpc((sa_withdrawer, g_pagination) => [SR_LCD_JUNO_FEESHARE_QUERY + 'fee_shares/' + sa_withdrawer, {
        pagination: g_pagination,
    }]);
/**
 * Encodes a `QueryFeeSharesRequest` protobuf message: the request type for the Query/FeeShares RPC method.
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryFeeSharesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `QueryFeeSharesResponse` protobuf message: the response type for the Query/FeeShares RPC method.
 * @param a_feeshares - `feeshare`: FeeShare is a slice of all stored Reveneue
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryFeeSharesResponse = (a_feeshares, atu8_pagination) => Protobuf() // ...
    .B(a_feeshares) // FeeShare[] feeshare = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryFeeShareRequest` protobuf message: the request type for the Query/FeeShare RPC method.
 * @param sa_contract - `contract_address`: of a registered contract in bech32 format
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryFeeShareRequest = (sa_contract) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .o;
/**
 * Encodes a `QueryFeeShareResponse` protobuf message: the response type for the Query/FeeShare RPC method.
 * @param g_feeshare - `feeshare`: FeeShare is a stored Reveneue for the queried contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryFeeShareResponse = (atu8_feeshare) => Protobuf() // ...
    .b(atu8_feeshare) // FeeShare feeshare = 1
    .o;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: the returned FeeShare parameter
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryDeployerFeeSharesRequest` protobuf message: the request type for the Query/DeployerFeeShares RPC method.
 * @param sa_deployer - `deployer_address`: in bech32 format
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryDeployerFeeSharesRequest = (sa_deployer, atu8_pagination) => Protobuf() // ...
    .s(sa_deployer) // string deployer_address = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryDeployerFeeSharesResponse` protobuf message: the response type for the Query/DeployerFeeShares RPC method.
 * @param a_contract_addresses - `contract_addresses`: the slice of registered contract addresses for a deployer
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryDeployerFeeSharesResponse = (a_contract_addresses, atu8_pagination) => Protobuf() // ...
    .S(a_contract_addresses) // string[] contract_addresses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `QueryWithdrawerFeeSharesRequest` protobuf message: the request type for the Query/WithdrawerFeeShares RPC method.
 * @param sa_withdrawer - `withdrawer_address`: in bech32 format
 * @param g_pagination - `pagination`: defines an optional pagination for the request.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryWithdrawerFeeSharesRequest = (sa_withdrawer, atu8_pagination) => Protobuf() // ...
    .s(sa_withdrawer) // string withdrawer_address = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `QueryWithdrawerFeeSharesResponse` protobuf message: the response type for the Query/WithdrawerFeeShares RPC method.
 * @param a_contract_addresses - `contract_addresses`: the slice of registered contract addresses for a withdrawer
 * @param g_pagination - `pagination`: defines the pagination in the response.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoFeeshareQueryWithdrawerFeeSharesResponse = (a_contract_addresses, atu8_pagination) => Protobuf() // ...
    .S(a_contract_addresses) // string[] contract_addresses = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Decodes a protobuf QueryFeeSharesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeSharesRequest}
 */
export const decodeJunoFeeshareQueryFeeSharesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryFeeShares message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeSharesResponse}
 */
export const decodeJunoFeeshareQueryFeeSharesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeJunoFeeshareFeeShare, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryFeeShareRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeShareRequest}
 */
export const decodeJunoFeeshareQueryFeeShareRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryFeeShareResponse}
 */
export const decodeJunoFeeshareQueryFeeShareResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeJunoFeeshareFeeShare]);
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryParamsRequest}
 */
export const decodeJunoFeeshareQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryParamsResponse}
 */
export const decodeJunoFeeshareQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeJunoFeeshareParams]);
/**
 * Decodes a protobuf QueryDeployerFeeSharesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryDeployerFeeSharesRequest}
 */
export const decodeJunoFeeshareQueryDeployerFeeSharesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryDeployerFeeShares message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryDeployerFeeSharesResponse}
 */
export const decodeJunoFeeshareQueryDeployerFeeSharesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4, 1], [0, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf QueryWithdrawerFeeSharesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryWithdrawerFeeSharesRequest}
 */
export const decodeJunoFeeshareQueryWithdrawerFeeSharesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf QueryWithdrawerFeeShares message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareQueryWithdrawerFeeSharesResponse}
 */
export const decodeJunoFeeshareQueryWithdrawerFeeSharesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4, 1], [0, decodeCosmosBaseQueryPageResponse]);
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeSharesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - defines an optional pagination for the request.
 */
export const destructJunoFeeshareQueryFeeSharesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARES_REQUEST = '/juno.feeshare.v1.QueryFeeSharesRequest';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeSharesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a slice of all stored Reveneue
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructJunoFeeshareQueryFeeSharesResponse = (g_struct) => [g_struct.feeshare, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARES_RESPONSE = '/juno.feeshare.v1.QueryFeeSharesResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeShareRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - of a registered contract in bech32 format
 */
export const destructJunoFeeshareQueryFeeShareRequest = (g_struct) => [g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARE_REQUEST = '/juno.feeshare.v1.QueryFeeShareRequest';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: feeshare - FeeShare is a stored Reveneue for the queried contract
 */
export const destructJunoFeeshareQueryFeeShareResponse = (g_struct) => [g_struct.feeshare];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_FEE_SHARE_RESPONSE = '/juno.feeshare.v1.QueryFeeShareResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructJunoFeeshareQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_PARAMS_REQUEST = '/juno.feeshare.v1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - the returned FeeShare parameter
 */
export const destructJunoFeeshareQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_PARAMS_RESPONSE = '/juno.feeshare.v1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryDeployerFeeSharesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: deployer_address - in bech32 format
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructJunoFeeshareQueryDeployerFeeSharesRequest = (g_struct) => [g_struct.deployer_address, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_DEPLOYER_FEE_SHARES_REQUEST = '/juno.feeshare.v1.QueryDeployerFeeSharesRequest';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryDeployerFeeSharesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a deployer
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructJunoFeeshareQueryDeployerFeeSharesResponse = (g_struct) => [g_struct.contract_addresses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_DEPLOYER_FEE_SHARES_RESPONSE = '/juno.feeshare.v1.QueryDeployerFeeSharesResponse';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryWithdrawerFeeSharesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: withdrawer_address - in bech32 format
 *   - 1: pagination - defines an optional pagination for the request.
 */
export const destructJunoFeeshareQueryWithdrawerFeeSharesRequest = (g_struct) => [g_struct.withdrawer_address, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_WITHDRAWER_FEE_SHARES_REQUEST = '/juno.feeshare.v1.QueryWithdrawerFeeSharesRequest';
/**
 * Destructures the fields of a {@link JunoFeeshareQueryWithdrawerFeeSharesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_addresses - the slice of registered contract addresses for a withdrawer
 *   - 1: pagination - defines the pagination in the response.
 */
export const destructJunoFeeshareQueryWithdrawerFeeSharesResponse = (g_struct) => [g_struct.contract_addresses, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_FEESHARE_QUERY_WITHDRAWER_FEE_SHARES_RESPONSE = '/juno.feeshare.v1.QueryWithdrawerFeeSharesResponse';
//# sourceMappingURL=query.js.map