/// <reference types="node" />
import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { JunoFeeshareParams, DecodedJunoFeeshareParams } from './genesis.js';
export type EncodedJunoFeeshareMsgRegisterFeeShare = Encoded<'/juno.feeshare.v1.MsgRegisterFeeShare'>;
export type EncodedJunoFeeshareMsgRegisterFeeShareResponse = Encoded<'/juno.feeshare.v1.MsgRegisterFeeShareResponse'>;
export type EncodedJunoFeeshareMsgUpdateFeeShare = Encoded<'/juno.feeshare.v1.MsgUpdateFeeShare'>;
export type EncodedJunoFeeshareMsgUpdateFeeShareResponse = Encoded<'/juno.feeshare.v1.MsgUpdateFeeShareResponse'>;
export type EncodedJunoFeeshareMsgCancelFeeShare = Encoded<'/juno.feeshare.v1.MsgCancelFeeShare'>;
export type EncodedJunoFeeshareMsgCancelFeeShareResponse = Encoded<'/juno.feeshare.v1.MsgCancelFeeShareResponse'>;
export type EncodedJunoFeeshareMsgUpdateParams = Encoded<'/juno.feeshare.v1.MsgUpdateParams'>;
export type EncodedJunoFeeshareMsgUpdateParamsResponse = Encoded<'/juno.feeshare.v1.MsgUpdateParamsResponse'>;
/**
 * Registers a new contract for receiving transaction fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - in bech32 format
 * @param sa_deployer - the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - the bech32 address of account receiving the transaction fees
 * @returns an empty tuple
 */
export declare const submitJunoFeeshareRegisterFeeShare: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>, sa_deployer?: Opt<`${string}1${string}`>, sa_withdrawer?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareMsgRegisterFeeShareResponse>>;
/**
 * Updates the withdrawer address of a FeeShare
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - in bech32 format
 * @param sa_deployer - the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - the bech32 address of account receiving the transaction fees
 * @returns an empty tuple
 */
export declare const submitJunoFeeshareUpdateFeeShare: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>, sa_deployer?: Opt<`${string}1${string}`>, sa_withdrawer?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareMsgUpdateFeeShareResponse>>;
/**
 * Cancels a contract's fee registration and further receival of transaction fees
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - in bech32 format
 * @param sa_deployer - the bech32 address of message sender. It must be the same the contract's admin address
 * @returns an empty tuple
 */
export declare const submitJunoFeeshareCancelFeeShare: (z_req: string | ({
    origin: string;
} & RequestInit), sa_contract?: Opt<`${string}1${string}`>, sa_deployer?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<JunoFeeshareMsgCancelFeeShareResponse>>;
/**
 * Encodes a `MsgRegisterFeeShare` protobuf message: defines a message that registers a FeeShare
 * @param sa_contract - `contract_address`: in bech32 format
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - `withdrawer_address`: the bech32 address of account receiving the transaction fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgRegisterFeeShare: (sa_contract?: Opt<WeakAccountAddr>, sa_deployer?: Opt<WeakAccountAddr>, sa_withdrawer?: Opt<WeakAccountAddr>) => EncodedJunoFeeshareMsgRegisterFeeShare;
/**
 * Encodes a `MsgRegisterFeeShareResponse` protobuf message: defines the MsgRegisterFeeShare response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgRegisterFeeShareResponse: () => EncodedJunoFeeshareMsgRegisterFeeShareResponse;
/**
 * Encodes a `MsgUpdateFeeShare` protobuf message: defines a message that updates the withdrawer address for a registered FeeShare
 * @param sa_contract - `contract_address`: in bech32 format
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same the contract's admin address
 * @param sa_withdrawer - `withdrawer_address`: the bech32 address of account receiving the transaction fees
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgUpdateFeeShare: (sa_contract?: Opt<WeakAccountAddr>, sa_deployer?: Opt<WeakAccountAddr>, sa_withdrawer?: Opt<WeakAccountAddr>) => EncodedJunoFeeshareMsgUpdateFeeShare;
/**
 * Encodes a `MsgUpdateFeeShareResponse` protobuf message: defines the MsgUpdateFeeShare response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgUpdateFeeShareResponse: () => EncodedJunoFeeshareMsgUpdateFeeShareResponse;
/**
 * Encodes a `MsgCancelFeeShare` protobuf message: defines a message that cancels a registered FeeShare
 * @param sa_contract - `contract_address`: in bech32 format
 * @param sa_deployer - `deployer_address`: the bech32 address of message sender. It must be the same the contract's admin address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgCancelFeeShare: (sa_contract?: Opt<WeakAccountAddr>, sa_deployer?: Opt<WeakAccountAddr>) => EncodedJunoFeeshareMsgCancelFeeShare;
/**
 * Encodes a `MsgCancelFeeShareResponse` protobuf message: defines the MsgCancelFeeShare response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgCancelFeeShareResponse: () => EncodedJunoFeeshareMsgCancelFeeShareResponse;
/**
 * Encodes a `MsgUpdateParams` protobuf message: the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 * @param s_authority - `authority`: the address that controls the module (defaults to x/gov unless overwritten).
 * @param g_params - `params`: defines the x/feeshare parameters to update. NOTE: All parameters must be supplied.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgUpdateParams: (s_authority?: Opt<string>, atu8_params?: Opt<Encoded<'/juno.feeshare.v1.Params'>>) => EncodedJunoFeeshareMsgUpdateParams;
/**
 * Encodes a `MsgUpdateParamsResponse` protobuf message: defines the response structure for executing a MsgUpdateParams message. Since: cosmos-sdk 0.47
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoFeeshareMsgUpdateParamsResponse: () => EncodedJunoFeeshareMsgUpdateParamsResponse;
/**
 * A decoded protobuf RegisterFeeShare message
 *
 * Tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees
 */
export type DecodedJunoFeeshareMsgRegisterFeeShare = [
    sa_contract?: CwAccountAddr,
    sa_deployer?: CwAccountAddr,
    sa_withdrawer?: CwAccountAddr
];
/**
 * Decodes a protobuf RegisterFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgRegisterFeeShare}
 */
export declare const decodeJunoFeeshareMsgRegisterFeeShare: (atu8_payload: Uint8Array) => DecodedJunoFeeshareMsgRegisterFeeShare;
/**
 * A decoded protobuf RegisterFeeShare message
 *
 * Tuple where:
 */
export type DecodedJunoFeeshareMsgRegisterFeeShareResponse = [];
/**
 * Decodes a protobuf RegisterFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgRegisterFeeShareResponse}
 */
export declare const decodeJunoFeeshareMsgRegisterFeeShareResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateFeeShare message
 *
 * Tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees
 */
export type DecodedJunoFeeshareMsgUpdateFeeShare = [
    sa_contract?: CwAccountAddr,
    sa_deployer?: CwAccountAddr,
    sa_withdrawer?: CwAccountAddr
];
/**
 * Decodes a protobuf UpdateFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateFeeShare}
 */
export declare const decodeJunoFeeshareMsgUpdateFeeShare: (atu8_payload: Uint8Array) => DecodedJunoFeeshareMsgUpdateFeeShare;
/**
 * A decoded protobuf UpdateFeeShare message
 *
 * Tuple where:
 */
export type DecodedJunoFeeshareMsgUpdateFeeShareResponse = [];
/**
 * Decodes a protobuf UpdateFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateFeeShareResponse}
 */
export declare const decodeJunoFeeshareMsgUpdateFeeShareResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf CancelFeeShare message
 *
 * Tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 */
export type DecodedJunoFeeshareMsgCancelFeeShare = [
    sa_contract?: CwAccountAddr,
    sa_deployer?: CwAccountAddr
];
/**
 * Decodes a protobuf CancelFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgCancelFeeShare}
 */
export declare const decodeJunoFeeshareMsgCancelFeeShare: (atu8_payload: Uint8Array) => DecodedJunoFeeshareMsgCancelFeeShare;
/**
 * A decoded protobuf CancelFeeShare message
 *
 * Tuple where:
 */
export type DecodedJunoFeeshareMsgCancelFeeShareResponse = [];
/**
 * Decodes a protobuf CancelFeeShare message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgCancelFeeShareResponse}
 */
export declare const decodeJunoFeeshareMsgCancelFeeShareResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/feeshare parameters to update. NOTE: All parameters must be supplied.
 */
export type DecodedJunoFeeshareMsgUpdateParams = [
    s_authority?: string,
    a_params?: DecodedJunoFeeshareParams
];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateParams}
 */
export declare const decodeJunoFeeshareMsgUpdateParams: (atu8_payload: Uint8Array) => DecodedJunoFeeshareMsgUpdateParams;
/**
 * A decoded protobuf UpdateParams message
 *
 * Tuple where:
 */
export type DecodedJunoFeeshareMsgUpdateParamsResponse = [];
/**
 * Decodes a protobuf UpdateParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoFeeshareMsgUpdateParamsResponse}
 */
export declare const decodeJunoFeeshareMsgUpdateParamsResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link JunoFeeshareMsgRegisterFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees
 */
export declare const destructJunoFeeshareMsgRegisterFeeShare: (g_struct: JunoFeeshareMsgRegisterFeeShare) => [contract_address?: CwAccountAddr, deployer_address?: CwAccountAddr, withdrawer_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_REGISTER_FEE_SHARE = "/juno.feeshare.v1.MsgRegisterFeeShare";
/**
 * JSON serialization of `juno.feeshare.v1.MsgRegisterFeeShare` - defines a message that registers a FeeShare
 */
export type JunoFeeshareMsgRegisterFeeShare = {
    contract_address?: CwAccountAddr | undefined;
    deployer_address?: CwAccountAddr | undefined;
    withdrawer_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgRegisterFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoFeeshareMsgRegisterFeeShareResponse: (g_struct: JunoFeeshareMsgRegisterFeeShareResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_REGISTER_FEE_SHARE_RESPONSE = "/juno.feeshare.v1.MsgRegisterFeeShareResponse";
/**
 * JSON serialization of `juno.feeshare.v1.MsgRegisterFeeShareResponse` - defines the MsgRegisterFeeShare response type
 */
export type JunoFeeshareMsgRegisterFeeShareResponse = {};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 *   - 2: withdrawer_address - the bech32 address of account receiving the transaction fees
 */
export declare const destructJunoFeeshareMsgUpdateFeeShare: (g_struct: JunoFeeshareMsgUpdateFeeShare) => [contract_address?: CwAccountAddr, deployer_address?: CwAccountAddr, withdrawer_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_FEE_SHARE = "/juno.feeshare.v1.MsgUpdateFeeShare";
/**
 * JSON serialization of `juno.feeshare.v1.MsgUpdateFeeShare` - defines a message that updates the withdrawer address for a registered FeeShare
 */
export type JunoFeeshareMsgUpdateFeeShare = {
    contract_address?: CwAccountAddr | undefined;
    deployer_address?: CwAccountAddr | undefined;
    withdrawer_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoFeeshareMsgUpdateFeeShareResponse: (g_struct: JunoFeeshareMsgUpdateFeeShareResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_FEE_SHARE_RESPONSE = "/juno.feeshare.v1.MsgUpdateFeeShareResponse";
/**
 * JSON serialization of `juno.feeshare.v1.MsgUpdateFeeShareResponse` - defines the MsgUpdateFeeShare response type
 */
export type JunoFeeshareMsgUpdateFeeShareResponse = {};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgCancelFeeShare} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - in bech32 format
 *   - 1: deployer_address - the bech32 address of message sender. It must be the same the contract's admin address
 */
export declare const destructJunoFeeshareMsgCancelFeeShare: (g_struct: JunoFeeshareMsgCancelFeeShare) => [contract_address?: CwAccountAddr, deployer_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_CANCEL_FEE_SHARE = "/juno.feeshare.v1.MsgCancelFeeShare";
/**
 * JSON serialization of `juno.feeshare.v1.MsgCancelFeeShare` - defines a message that cancels a registered FeeShare
 */
export type JunoFeeshareMsgCancelFeeShare = {
    contract_address?: CwAccountAddr | undefined;
    deployer_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgCancelFeeShareResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoFeeshareMsgCancelFeeShareResponse: (g_struct: JunoFeeshareMsgCancelFeeShareResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_CANCEL_FEE_SHARE_RESPONSE = "/juno.feeshare.v1.MsgCancelFeeShareResponse";
/**
 * JSON serialization of `juno.feeshare.v1.MsgCancelFeeShareResponse` - defines the MsgCancelFeeShare response type
 */
export type JunoFeeshareMsgCancelFeeShareResponse = {};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority - the address that controls the module (defaults to x/gov unless overwritten).
 *   - 1: params - defines the x/feeshare parameters to update. NOTE: All parameters must be supplied.
 */
export declare const destructJunoFeeshareMsgUpdateParams: (g_struct: JunoFeeshareMsgUpdateParams) => [authority?: string, params?: JunoFeeshareParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_PARAMS = "/juno.feeshare.v1.MsgUpdateParams";
/**
 * JSON serialization of `juno.feeshare.v1.MsgUpdateParams` - the Msg/UpdateParams request type. Since: cosmos-sdk 0.47
 */
export type JunoFeeshareMsgUpdateParams = {
    authority?: string | undefined;
    params?: JunoFeeshareParams | undefined;
};
/**
 * Destructures the fields of a {@link JunoFeeshareMsgUpdateParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructJunoFeeshareMsgUpdateParamsResponse: (g_struct: JunoFeeshareMsgUpdateParamsResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_FEESHARE_MSG_UPDATE_PARAMS_RESPONSE = "/juno.feeshare.v1.MsgUpdateParamsResponse";
/**
 * JSON serialization of `juno.feeshare.v1.MsgUpdateParamsResponse` - defines the response structure for executing a MsgUpdateParams message. Since: cosmos-sdk 0.47
 */
export type JunoFeeshareMsgUpdateParamsResponse = {};
