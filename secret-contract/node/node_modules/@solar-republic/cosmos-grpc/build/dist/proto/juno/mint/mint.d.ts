import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedJunoMintMinter = Encoded<'/juno.mint.Minter'>;
export type EncodedJunoMintParams = Encoded<'/juno.mint.Params'>;
/**
 * Encodes a `Minter` protobuf message: represents the minting state.
 * @param s_inflation - `inflation`: current annual inflation rate
 * @param sg_phase - `phase`:
 * @param sg_start_phase_block - `start_phase_block`:
 * @param s_annual_provisions - `annual_provisions`: current annual expected provisions
 * @param s_target_supply - `target_supply`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoMintMinter: (s_inflation?: Opt<string>, sg_phase?: Opt<WeakUint64Str>, sg_start_phase_block?: Opt<WeakUint64Str>, s_annual_provisions?: Opt<string>, s_target_supply?: Opt<string>) => EncodedJunoMintMinter;
/**
 * Encodes a `Params` protobuf message: holds parameters for the mint module.
 * @param s_mint_denom - `mint_denom`: type of coin to mint
 * @param sg_blocks_per_year - `blocks_per_year`: expected blocks per year
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeJunoMintParams: (s_mint_denom?: Opt<string>, sg_blocks_per_year?: Opt<WeakUint64Str>) => EncodedJunoMintParams;
/**
 * A decoded protobuf Minter message
 *
 * Tuple where:
 *   - 0: inflation - current annual inflation rate
 *   - 1: phase -
 *   - 2: start_phase_block -
 *   - 3: annual_provisions - current annual expected provisions
 *   - 4: target_supply -
 */
export type DecodedJunoMintMinter = [
    s_inflation?: string,
    sg_phase?: CwUint64,
    sg_start_phase_block?: CwUint64,
    s_annual_provisions?: string,
    s_target_supply?: string
];
/**
 * Decodes a protobuf Minter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoMintMinter}
 */
export declare const decodeJunoMintMinter: (atu8_payload: Uint8Array) => DecodedJunoMintMinter;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: mint_denom - type of coin to mint
 *   - 1: blocks_per_year - expected blocks per year
 */
export type DecodedJunoMintParams = [
    s_mint_denom?: string,
    sg_blocks_per_year?: CwUint64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoMintParams}
 */
export declare const decodeJunoMintParams: (atu8_payload: Uint8Array) => DecodedJunoMintParams;
/**
 * Destructures the fields of a {@link JunoMintParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mint_denom - type of coin to mint
 *   - 1: blocks_per_year - expected blocks per year
 */
export declare const destructJunoMintParams: (g_struct: JunoMintParams) => [mint_denom?: string, blocks_per_year?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_MINT_PARAMS = "/juno.mint.Params";
/**
 * JSON serialization of `juno.mint.Params` - holds parameters for the mint module.
 */
export type JunoMintParams = {
    mint_denom?: string | undefined;
    blocks_per_year?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link JunoMintMinter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: inflation - current annual inflation rate
 *   - 1: phase -
 *   - 2: start_phase_block -
 *   - 3: annual_provisions - current annual expected provisions
 *   - 4: target_supply -
 */
export declare const destructJunoMintMinter: (g_struct: JunoMintMinter) => [inflation?: string, phase?: CwUint64, start_phase_block?: CwUint64, annual_provisions?: string, target_supply?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_JUNO_MINT_MINTER = "/juno.mint.Minter";
/**
 * JSON serialization of `juno.mint.Minter` - represents the minting state.
 */
export type JunoMintMinter = {
    inflation?: string | undefined;
    phase?: CwUint64 | undefined;
    start_phase_block?: CwUint64 | undefined;
    annual_provisions?: string | undefined;
    target_supply?: string | undefined;
};
