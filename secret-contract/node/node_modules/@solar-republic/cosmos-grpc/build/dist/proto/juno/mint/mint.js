import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `Minter` protobuf message: represents the minting state.
 * @param s_inflation - `inflation`: current annual inflation rate
 * @param sg_phase - `phase`:
 * @param sg_start_phase_block - `start_phase_block`:
 * @param s_annual_provisions - `annual_provisions`: current annual expected provisions
 * @param s_target_supply - `target_supply`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoMintMinter = (s_inflation, sg_phase, sg_start_phase_block, s_annual_provisions, s_target_supply) => Protobuf() // ...
    .s(s_inflation) // string inflation = 1
    .g(sg_phase) // uint64 phase = 2
    .g(sg_start_phase_block) // uint64 start_phase_block = 3
    .s(s_annual_provisions) // string annual_provisions = 4
    .s(s_target_supply) // string target_supply = 5
    .o;
/**
 * Encodes a `Params` protobuf message: holds parameters for the mint module.
 * @param s_mint_denom - `mint_denom`: type of coin to mint
 * @param sg_blocks_per_year - `blocks_per_year`: expected blocks per year
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeJunoMintParams = (s_mint_denom, sg_blocks_per_year) => Protobuf() // ...
    .s(s_mint_denom) // string mint_denom = 1
    .g(sg_blocks_per_year) // uint64 blocks_per_year = 2
    .o;
/**
 * Decodes a protobuf Minter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoMintMinter}
 */
export const decodeJunoMintMinter = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, 5, 5]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedJunoMintParams}
 */
export const decodeJunoMintParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3]);
/**
 * Destructures the fields of a {@link JunoMintParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mint_denom - type of coin to mint
 *   - 1: blocks_per_year - expected blocks per year
 */
export const destructJunoMintParams = (g_struct) => [g_struct.mint_denom, g_struct.blocks_per_year];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_MINT_PARAMS = '/juno.mint.Params';
/**
 * Destructures the fields of a {@link JunoMintMinter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: inflation - current annual inflation rate
 *   - 1: phase -
 *   - 2: start_phase_block -
 *   - 3: annual_provisions - current annual expected provisions
 *   - 4: target_supply -
 */
export const destructJunoMintMinter = (g_struct) => [g_struct.inflation, g_struct.phase, g_struct.start_phase_block, g_struct.annual_provisions, g_struct.target_supply];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_JUNO_MINT_MINTER = '/juno.mint.Minter';
//# sourceMappingURL=mint.js.map