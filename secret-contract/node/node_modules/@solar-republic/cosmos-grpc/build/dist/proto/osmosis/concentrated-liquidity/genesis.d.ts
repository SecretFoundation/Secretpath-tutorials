import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64 } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../google/protobuf/any.js';
import type { OsmosisAccumRecord, DecodedOsmosisAccumRecord, OsmosisAccumAccumulatorContent, DecodedOsmosisAccumAccumulatorContent } from '../accum/v1beta1/accum.js';
import type { OsmosisConcentratedliquidityIncentiveRecord, DecodedOsmosisConcentratedliquidityIncentiveRecord } from './incentive_record.js';
import type { OsmosisConcentratedliquidityParams, DecodedOsmosisConcentratedliquidityParams } from './params.js';
import type { OsmosisConcentratedliquidityPool } from './pool.js';
import type { OsmosisConcentratedliquidityPosition, DecodedOsmosisConcentratedliquidityPosition } from './position.js';
import type { OsmosisConcentratedliquidityTickInfo, DecodedOsmosisConcentratedliquidityTickInfo } from './tickInfo.js';
import type { OsmosisCosmwasmpoolCosmWasmPool } from '../cosmwasmpool/v1beta1/model/pool.js';
import type { OsmosisGammPool } from '../gamm/pool-models/balancer/balancerPool.js';
import type { OsmosisGammPoolmodelsStableswapPool } from '../gamm/pool-models/stableswap/stableswap_pool.js';
export type EncodedOsmosisConcentratedliquidityFullTick = Encoded<'/osmosis.concentratedliquidity.v1beta1.FullTick'>;
export type EncodedOsmosisConcentratedliquidityPoolData = Encoded<'/osmosis.concentratedliquidity.v1beta1.PoolData'>;
export type EncodedOsmosisConcentratedliquidityPositionData = Encoded<'/osmosis.concentratedliquidity.v1beta1.PositionData'>;
export type EncodedOsmosisConcentratedliquidityGenesisState = Encoded<'/osmosis.concentratedliquidity.v1beta1.GenesisState'>;
export type EncodedOsmosisConcentratedliquidityAccumObject = Encoded<'/osmosis.concentratedliquidity.v1beta1.AccumObject'>;
/**
 * Encodes a `FullTick` protobuf message: contains tick index and pool id along with other tick model information.
 * @param sg_pool_id - `pool_id`: pool id associated with the tick.
 * @param sg_tick_index - `tick_index`: tick's index.
 * @param g_info - `info`: tick's info.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityFullTick: (sg_pool_id?: Opt<WeakUint64Str>, sg_tick_index?: Opt<WeakInt64Str>, atu8_info?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.TickInfo'>>) => EncodedOsmosisConcentratedliquidityFullTick;
/**
 * Encodes a `PoolData` protobuf message: represents a serialized pool along with its ticks for genesis state.
 * @param atu8_pool - `pool`: struct
 * @param a_ticks - `ticks`: pool's ticks
 * @param g_spread_reward_accumulator - `spread_reward_accumulator`:
 * @param a_incentives_accumulators - `incentives_accumulators`:
 * @param a_incentive_records - `incentive_records`: incentive records to be set
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityPoolData: (atu8_pool?: Opt<Encoded<'PoolI'>>, a_ticks?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.FullTick'>[]>, atu8_spread_reward_accumulator?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.AccumObject'>>, a_incentives_accumulators?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.AccumObject'>[]>, a_incentive_records?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.IncentiveRecord'>[]>) => EncodedOsmosisConcentratedliquidityPoolData;
/**
 * Encodes a `PositionData` protobuf message:
 * @param g_position - `position`:
 * @param sg_lock_id - `lock_id`:
 * @param g_spread_reward_accum_record - `spread_reward_accum_record`:
 * @param a_uptime_accum_records - `uptime_accum_records`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityPositionData: (atu8_position?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.Position'>>, sg_lock_id?: Opt<WeakUint64Str>, atu8_spread_reward_accum_record?: Opt<Encoded<'/osmosis.accum.v1beta1.Record'>>, a_uptime_accum_records?: Opt<Encoded<'/osmosis.accum.v1beta1.Record'>[]>) => EncodedOsmosisConcentratedliquidityPositionData;
/**
 * Encodes a `GenesisState` protobuf message: defines the concentrated liquidity module's genesis state.
 * @param g_params - `params`: all the parameters of the module
 * @param a_pool_datas - `pool_data`: pool data containining serialized pool struct and ticks.
 * @param a_position_datas - `position_data`:
 * @param sg_next_position_id - `next_position_id`:
 * @param sg_next_incentive_record_id - `next_incentive_record_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityGenesisState: (atu8_params?: Opt<Encoded<'/osmosis.concentratedliquidity.Params'>>, a_pool_datas?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.PoolData'>[]>, a_position_datas?: Opt<Encoded<'/osmosis.concentratedliquidity.v1beta1.PositionData'>[]>, sg_next_position_id?: Opt<WeakUint64Str>, sg_next_incentive_record_id?: Opt<WeakUint64Str>) => EncodedOsmosisConcentratedliquidityGenesisState;
/**
 * Encodes a `AccumObject` protobuf message:
 * @param s_name - `name`: Accumulator's name (pulled from AccumulatorContent)
 * @param g_accum_content - `accum_content`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityAccumObject: (s_name?: Opt<string>, atu8_accum_content?: Opt<Encoded<'/osmosis.accum.v1beta1.AccumulatorContent'>>) => EncodedOsmosisConcentratedliquidityAccumObject;
/**
 * A decoded protobuf FullTick message
 *
 * Tuple where:
 *   - 0: pool_id - pool id associated with the tick.
 *   - 1: tick_index - tick's index.
 *   - 2: info - tick's info.
 */
export type DecodedOsmosisConcentratedliquidityFullTick = [
    sg_pool_id?: CwUint64,
    sg_tick_index?: CwInt64,
    a_info?: DecodedOsmosisConcentratedliquidityTickInfo
];
/**
 * Decodes a protobuf FullTick message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityFullTick}
 */
export declare const decodeOsmosisConcentratedliquidityFullTick: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityFullTick;
/**
 * A decoded protobuf PoolData message
 *
 * Tuple where:
 *   - 0: pool - struct
 *   - 1: ticks - pool's ticks
 *   - 2: spread_reward_accumulator -
 *   - 3: incentives_accumulators -
 *   - 4: incentive_records - incentive records to be set
 */
export type DecodedOsmosisConcentratedliquidityPoolData = [
    a_pool?: DecodedGoogleProtobufAny,
    a_ticks?: DecodedOsmosisConcentratedliquidityFullTick[],
    a_spread_reward_accumulator?: DecodedOsmosisConcentratedliquidityAccumObject,
    a_incentives_accumulators?: DecodedOsmosisConcentratedliquidityAccumObject[],
    a_incentive_records?: DecodedOsmosisConcentratedliquidityIncentiveRecord[]
];
/**
 * Decodes a protobuf PoolData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPoolData}
 */
export declare const decodeOsmosisConcentratedliquidityPoolData: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityPoolData;
/**
 * A decoded protobuf PositionData message
 *
 * Tuple where:
 *   - 0: position -
 *   - 1: lock_id -
 *   - 2: spread_reward_accum_record -
 *   - 3: uptime_accum_records -
 */
export type DecodedOsmosisConcentratedliquidityPositionData = [
    a_position?: DecodedOsmosisConcentratedliquidityPosition,
    sg_lock_id?: CwUint64,
    a_spread_reward_accum_record?: DecodedOsmosisAccumRecord,
    a_uptime_accum_records?: DecodedOsmosisAccumRecord[]
];
/**
 * Decodes a protobuf PositionData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPositionData}
 */
export declare const decodeOsmosisConcentratedliquidityPositionData: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityPositionData;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - all the parameters of the module
 *   - 1: pool_data - pool data containining serialized pool struct and ticks.
 *   - 2: position_data -
 *   - 3: next_position_id -
 *   - 4: next_incentive_record_id -
 */
export type DecodedOsmosisConcentratedliquidityGenesisState = [
    a_params?: DecodedOsmosisConcentratedliquidityParams,
    a_pool_data?: DecodedOsmosisConcentratedliquidityPoolData[],
    a_position_data?: DecodedOsmosisConcentratedliquidityPositionData[],
    sg_next_position_id?: CwUint64,
    sg_next_incentive_record_id?: CwUint64
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityGenesisState}
 */
export declare const decodeOsmosisConcentratedliquidityGenesisState: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityGenesisState;
/**
 * A decoded protobuf AccumObject message
 *
 * Tuple where:
 *   - 0: name - Accumulator's name (pulled from AccumulatorContent)
 *   - 1: accum_content -
 */
export type DecodedOsmosisConcentratedliquidityAccumObject = [
    s_name?: string,
    a_accum_content?: DecodedOsmosisAccumAccumulatorContent
];
/**
 * Decodes a protobuf AccumObject message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityAccumObject}
 */
export declare const decodeOsmosisConcentratedliquidityAccumObject: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityAccumObject;
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityFullTick} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id - pool id associated with the tick.
 *   - 1: tick_index - tick's index.
 *   - 2: info - tick's info.
 */
export declare const destructOsmosisConcentratedliquidityFullTick: (g_struct: OsmosisConcentratedliquidityFullTick) => [pool_id?: CwUint64, tick_index?: CwInt64, info?: OsmosisConcentratedliquidityTickInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_FULL_TICK = "/osmosis.concentratedliquidity.v1beta1.FullTick";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.FullTick` - contains tick index and pool id along with other tick model information.
 */
export type OsmosisConcentratedliquidityFullTick = {
    pool_id?: CwUint64 | undefined;
    tick_index?: CwInt64 | undefined;
    info?: OsmosisConcentratedliquidityTickInfo | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPoolData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - struct
 *   - 1: ticks - pool's ticks
 *   - 2: spread_reward_accumulator -
 *   - 3: incentives_accumulators -
 *   - 4: incentive_records - incentive records to be set
 */
export declare const destructOsmosisConcentratedliquidityPoolData: (g_struct: OsmosisConcentratedliquidityPoolData) => [pool?: JsonAny<string, OsmosisConcentratedliquidityPool | OsmosisCosmwasmpoolCosmWasmPool | OsmosisGammPool | OsmosisGammPoolmodelsStableswapPool>, ticks?: OsmosisConcentratedliquidityFullTick[], spread_reward_accumulator?: OsmosisConcentratedliquidityAccumObject, incentives_accumulators?: OsmosisConcentratedliquidityAccumObject[], incentive_records?: OsmosisConcentratedliquidityIncentiveRecord[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POOL_DATA = "/osmosis.concentratedliquidity.v1beta1.PoolData";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.PoolData` - represents a serialized pool along with its ticks for genesis state.
 */
export type OsmosisConcentratedliquidityPoolData = {
    pool?: JsonAny<string, OsmosisGammPoolmodelsStableswapPool | OsmosisGammPool | OsmosisCosmwasmpoolCosmWasmPool | OsmosisConcentratedliquidityPool> | undefined;
    ticks?: OsmosisConcentratedliquidityFullTick[] | undefined;
    spread_reward_accumulator?: OsmosisConcentratedliquidityAccumObject | undefined;
    incentives_accumulators?: OsmosisConcentratedliquidityAccumObject[] | undefined;
    incentive_records?: OsmosisConcentratedliquidityIncentiveRecord[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityAccumObject} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: name - Accumulator's name (pulled from AccumulatorContent)
 *   - 1: accum_content -
 */
export declare const destructOsmosisConcentratedliquidityAccumObject: (g_struct: OsmosisConcentratedliquidityAccumObject) => [name?: string, accum_content?: OsmosisAccumAccumulatorContent];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_ACCUM_OBJECT = "/osmosis.concentratedliquidity.v1beta1.AccumObject";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.AccumObject` -
 */
export type OsmosisConcentratedliquidityAccumObject = {
    name?: string | undefined;
    accum_content?: OsmosisAccumAccumulatorContent | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPositionData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: position -
 *   - 1: lock_id -
 *   - 2: spread_reward_accum_record -
 *   - 3: uptime_accum_records -
 */
export declare const destructOsmosisConcentratedliquidityPositionData: (g_struct: OsmosisConcentratedliquidityPositionData) => [position?: OsmosisConcentratedliquidityPosition, lock_id?: CwUint64, spread_reward_accum_record?: OsmosisAccumRecord, uptime_accum_records?: OsmosisAccumRecord[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POSITION_DATA = "/osmosis.concentratedliquidity.v1beta1.PositionData";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.PositionData` -
 */
export type OsmosisConcentratedliquidityPositionData = {
    position?: OsmosisConcentratedliquidityPosition | undefined;
    lock_id?: CwUint64 | undefined;
    spread_reward_accum_record?: OsmosisAccumRecord | undefined;
    uptime_accum_records?: OsmosisAccumRecord[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - all the parameters of the module
 *   - 1: pool_data - pool data containining serialized pool struct and ticks.
 *   - 2: position_data -
 *   - 3: next_position_id -
 *   - 4: next_incentive_record_id -
 */
export declare const destructOsmosisConcentratedliquidityGenesisState: (g_struct: OsmosisConcentratedliquidityGenesisState) => [params?: OsmosisConcentratedliquidityParams, pool_data?: OsmosisConcentratedliquidityPoolData[], position_data?: OsmosisConcentratedliquidityPositionData[], next_position_id?: CwUint64, next_incentive_record_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_GENESIS_STATE = "/osmosis.concentratedliquidity.v1beta1.GenesisState";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.GenesisState` - defines the concentrated liquidity module's genesis state.
 */
export type OsmosisConcentratedliquidityGenesisState = {
    params?: OsmosisConcentratedliquidityParams | undefined;
    pool_data?: OsmosisConcentratedliquidityPoolData[] | undefined;
    position_data?: OsmosisConcentratedliquidityPositionData[] | undefined;
    next_position_id?: CwUint64 | undefined;
    next_incentive_record_id?: CwUint64 | undefined;
};
