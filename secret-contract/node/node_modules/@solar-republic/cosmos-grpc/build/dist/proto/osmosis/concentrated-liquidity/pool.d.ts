import type { WeakInt64Str, WeakUint64Str, WeakAccountAddr, CwInt64, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../api/types.js';
export type AnyOsmosisConcentratedliquidityPool = Encoded<'PoolI'>;
export type EncodedOsmosisConcentratedliquidityPool = Encoded<'/osmosis.concentratedliquidity.v1beta1.Pool' | 'PoolI'>;
/**
 * Encodes a `Pool` protobuf message wrapped in the `Any` container:
 * @param sa_address - `address`: pool's address holding all liquidity tokens.
 * @param sa_incentives - `incentives_address`: address holding the incentives liquidity.
 * @param sa_spread_rewards - `spread_rewards_address`: address holding spread rewards from swaps.
 * @param sg_id - `id`:
 * @param s_current_tick_liquidity - `current_tick_liquidity`: Amount of total liquidity
 * @param s_token0 - `token0`:
 * @param s_token1 - `token1`:
 * @param s_current_sqrt_price - `current_sqrt_price`:
 * @param sg_current_tick - `current_tick`:
 * @param sg_tick_spacing - `tick_spacing`: must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 * @param sg_exponent_at_price_one - `exponent_at_price_one`:
 * @param s_spread_factor - `spread_factor`: the ratio that is charged on the amount of token in.
 * @param xt_last_liquidity_update - `last_liquidity_update`: the last time either the pool liquidity or the active tick changed
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyPool: (sa_address?: Opt<WeakAccountAddr>, sa_incentives?: Opt<WeakAccountAddr>, sa_spread_rewards?: Opt<WeakAccountAddr>, sg_id?: Opt<WeakUint64Str>, s_current_tick_liquidity?: Opt<string>, s_token0?: Opt<string>, s_token1?: Opt<string>, s_current_sqrt_price?: Opt<string>, sg_current_tick?: Opt<WeakInt64Str>, sg_tick_spacing?: Opt<WeakUint64Str>, sg_exponent_at_price_one?: Opt<WeakInt64Str>, s_spread_factor?: Opt<string>, xt_last_liquidity_update?: Opt<number>) => AnyOsmosisConcentratedliquidityPool;
/**
 * Encodes a `Pool` protobuf message:
 * @param sa_address - `address`: pool's address holding all liquidity tokens.
 * @param sa_incentives - `incentives_address`: address holding the incentives liquidity.
 * @param sa_spread_rewards - `spread_rewards_address`: address holding spread rewards from swaps.
 * @param sg_id - `id`:
 * @param s_current_tick_liquidity - `current_tick_liquidity`: Amount of total liquidity
 * @param s_token0 - `token0`:
 * @param s_token1 - `token1`:
 * @param s_current_sqrt_price - `current_sqrt_price`:
 * @param sg_current_tick - `current_tick`:
 * @param sg_tick_spacing - `tick_spacing`: must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 * @param sg_exponent_at_price_one - `exponent_at_price_one`:
 * @param s_spread_factor - `spread_factor`: the ratio that is charged on the amount of token in.
 * @param xt_last_liquidity_update - `last_liquidity_update`: the last time either the pool liquidity or the active tick changed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisConcentratedliquidityPool: (sa_address?: Opt<WeakAccountAddr>, sa_incentives?: Opt<WeakAccountAddr>, sa_spread_rewards?: Opt<WeakAccountAddr>, sg_id?: Opt<WeakUint64Str>, s_current_tick_liquidity?: Opt<string>, s_token0?: Opt<string>, s_token1?: Opt<string>, s_current_sqrt_price?: Opt<string>, sg_current_tick?: Opt<WeakInt64Str>, sg_tick_spacing?: Opt<WeakUint64Str>, sg_exponent_at_price_one?: Opt<WeakInt64Str>, s_spread_factor?: Opt<string>, xt_last_liquidity_update?: Opt<number>) => EncodedOsmosisConcentratedliquidityPool;
/**
 * A decoded protobuf Pool message
 *
 * Tuple where:
 *   - 0: address - pool's address holding all liquidity tokens.
 *   - 1: incentives_address - address holding the incentives liquidity.
 *   - 2: spread_rewards_address - address holding spread rewards from swaps.
 *   - 3: id -
 *   - 4: current_tick_liquidity - Amount of total liquidity
 *   - 5: token0 -
 *   - 6: token1 -
 *   - 7: current_sqrt_price -
 *   - 8: current_tick -
 *   - 9: tick_spacing - must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 *   - 10: exponent_at_price_one -
 *   - 11: spread_factor - the ratio that is charged on the amount of token in.
 *   - 12: last_liquidity_update - the last time either the pool liquidity or the active tick changed
 */
export type DecodedOsmosisConcentratedliquidityPool = [
    sa_address?: CwAccountAddr,
    sa_incentives?: CwAccountAddr,
    sa_spread_rewards?: CwAccountAddr,
    sg_id?: CwUint64,
    s_current_tick_liquidity?: string,
    s_token0?: string,
    s_token1?: string,
    s_current_sqrt_price?: string,
    sg_current_tick?: CwInt64,
    sg_tick_spacing?: CwUint64,
    sg_exponent_at_price_one?: CwInt64,
    s_spread_factor?: string,
    a_last_liquidity_update?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityPool}
 */
export declare const decodeOsmosisConcentratedliquidityPool: (atu8_payload: Uint8Array) => DecodedOsmosisConcentratedliquidityPool;
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - pool's address holding all liquidity tokens.
 *   - 1: incentives_address - address holding the incentives liquidity.
 *   - 2: spread_rewards_address - address holding spread rewards from swaps.
 *   - 3: id -
 *   - 4: current_tick_liquidity - Amount of total liquidity
 *   - 5: token0 -
 *   - 6: token1 -
 *   - 7: current_sqrt_price -
 *   - 8: current_tick -
 *   - 9: tick_spacing - must be one of the authorized_tick_spacing values set in the concentrated-liquidity parameters
 *   - 10: exponent_at_price_one -
 *   - 11: spread_factor - the ratio that is charged on the amount of token in.
 *   - 12: last_liquidity_update - the last time either the pool liquidity or the active tick changed
 */
export declare const destructOsmosisConcentratedliquidityPool: (g_struct: OsmosisConcentratedliquidityPool) => [address?: CwAccountAddr, incentives_address?: CwAccountAddr, spread_rewards_address?: CwAccountAddr, id?: CwUint64, current_tick_liquidity?: string, token0?: string, token1?: string, current_sqrt_price?: string, current_tick?: CwInt64, tick_spacing?: CwUint64, exponent_at_price_one?: CwInt64, spread_factor?: string, last_liquidity_update?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_POOL = "/osmosis.concentratedliquidity.v1beta1.Pool";
/**
 * JSON serialization of `osmosis.concentratedliquidity.v1beta1.Pool` -
 */
export type OsmosisConcentratedliquidityPool = {
    address?: CwAccountAddr | undefined;
    incentives_address?: CwAccountAddr | undefined;
    spread_rewards_address?: CwAccountAddr | undefined;
    id?: CwUint64 | undefined;
    current_tick_liquidity?: string | undefined;
    token0?: string | undefined;
    token1?: string | undefined;
    current_sqrt_price?: string | undefined;
    current_tick?: CwInt64 | undefined;
    tick_spacing?: CwUint64 | undefined;
    exponent_at_price_one?: CwInt64 | undefined;
    spread_factor?: string | undefined;
    last_liquidity_update?: WeakTimestampStr | undefined;
};
