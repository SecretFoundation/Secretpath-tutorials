/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { decodeCosmosBaseDecCoin } from '../../cosmos/base/v1beta1/coin.js';
/**
 * Encodes a `TickInfo` protobuf message:
 * @param s_liquidity_gross - `liquidity_gross`:
 * @param s_liquidity_net - `liquidity_net`:
 * @param a_spread_reward_growth_opposite_direction_of_last_traversals - `spread_reward_growth_opposite_direction_of_last_traversal`: Total spread rewards accumulated in the opposite direction that the tick was last crossed. i.e. if the current tick is to the right of this tick (meaning its currently a greater price), then this is the total spread rewards accumulated below the tick. If the current tick is to the left of this tick (meaning its currently at a lower price), then this is the total spread rewards accumulated above the tick. Note: the way this value is used depends on the direction of spread rewards we are calculating for. If we are calculating spread rewards below the lower tick and the lower tick is the active tick, then this is the spreadRewardGrowthGlobal - the lower tick's spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating spread rewards above the upper tick and the upper tick is the active tick, then this is just the tick's spreadRewardGrowthOppositeDirectionOfLastTraversal value.
 * @param g_uptime_trackers - `uptime_trackers`: a container encapsulating the uptime trackers. We use a container instead of a "repeated UptimeTracker" directly because we need the ability to serialize and deserialize the container easily for events when crossing a tick.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityTickInfo = (s_liquidity_gross, s_liquidity_net, a_spread_reward_growth_opposite_direction_of_last_traversals, atu8_uptime_trackers) => Protobuf() // ...
    .s(s_liquidity_gross) // string liquidity_gross = 1
    .s(s_liquidity_net) // string liquidity_net = 2
    .B(a_spread_reward_growth_opposite_direction_of_last_traversals) // DecCoin[] spread_reward_growth_opposite_direction_of_last_traversal = 3
    .b(atu8_uptime_trackers) // UptimeTrackers uptime_trackers = 4
    .o;
/**
 * Encodes a `UptimeTrackers` protobuf message:
 * @param a_lists - `list`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityUptimeTrackers = (a_lists) => Protobuf() // ...
    .B(a_lists) // UptimeTracker[] list = 1
    .o;
/**
 * Encodes a `UptimeTracker` protobuf message:
 * @param a_uptime_growth_outsides - `uptime_growth_outside`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisConcentratedliquidityUptimeTracker = (a_uptime_growth_outsides) => Protobuf() // ...
    .B(a_uptime_growth_outsides) // DecCoin[] uptime_growth_outside = 1
    .o;
/**
 * Decodes a protobuf TickInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityTickInfo}
 */
export const decodeOsmosisConcentratedliquidityTickInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0, 1], [0, 0, decodeCosmosBaseDecCoin, decodeOsmosisConcentratedliquidityUptimeTrackers]);
/**
 * Decodes a protobuf UptimeTrackers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityUptimeTrackers}
 */
export const decodeOsmosisConcentratedliquidityUptimeTrackers = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisConcentratedliquidityUptimeTracker]);
/**
 * Decodes a protobuf UptimeTracker message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisConcentratedliquidityUptimeTracker}
 */
export const decodeOsmosisConcentratedliquidityUptimeTracker = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeCosmosBaseDecCoin]);
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityTickInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: liquidity_gross -
 *   - 1: liquidity_net -
 *   - 2: spread_reward_growth_opposite_direction_of_last_traversal - Total spread rewards accumulated in the opposite direction that the tick was last crossed. i.e. if the current tick is to the right of this tick (meaning its currently a greater price), then this is the total spread rewards accumulated below the tick. If the current tick is to the left of this tick (meaning its currently at a lower price), then this is the total spread rewards accumulated above the tick. Note: the way this value is used depends on the direction of spread rewards we are calculating for. If we are calculating spread rewards below the lower tick and the lower tick is the active tick, then this is the spreadRewardGrowthGlobal - the lower tick's spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating spread rewards above the upper tick and the upper tick is the active tick, then this is just the tick's spreadRewardGrowthOppositeDirectionOfLastTraversal value.
 *   - 3: uptime_trackers - a container encapsulating the uptime trackers. We use a container instead of a "repeated UptimeTracker" directly because we need the ability to serialize and deserialize the container easily for events when crossing a tick.
 */
export const destructOsmosisConcentratedliquidityTickInfo = (g_struct) => [g_struct.liquidity_gross, g_struct.liquidity_net, g_struct.spread_reward_growth_opposite_direction_of_last_traversal, g_struct.uptime_trackers];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_TICK_INFO = '/osmosis.concentratedliquidity.v1beta1.TickInfo';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityUptimeTrackers} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: list -
 */
export const destructOsmosisConcentratedliquidityUptimeTrackers = (g_struct) => [g_struct.list];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_UPTIME_TRACKERS = '/osmosis.concentratedliquidity.v1beta1.UptimeTrackers';
/**
 * Destructures the fields of a {@link OsmosisConcentratedliquidityUptimeTracker} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: uptime_growth_outside -
 */
export const destructOsmosisConcentratedliquidityUptimeTracker = (g_struct) => [g_struct.uptime_growth_outside];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_CONCENTRATEDLIQUIDITY_UPTIME_TRACKER = '/osmosis.concentratedliquidity.v1beta1.UptimeTracker';
//# sourceMappingURL=tickInfo.js.map