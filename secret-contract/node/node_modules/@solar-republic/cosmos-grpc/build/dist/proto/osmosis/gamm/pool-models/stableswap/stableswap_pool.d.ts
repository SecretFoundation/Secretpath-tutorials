import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../../cosmos/base/v1beta1/coin.js';
export type AnyOsmosisGammPoolmodelsStableswapPool = Encoded<'PoolI'>;
export type EncodedOsmosisGammPoolmodelsStableswapPoolParams = Encoded<'/osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams'>;
export type EncodedOsmosisGammPoolmodelsStableswapPool = Encoded<'/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool' | 'PoolI'>;
/**
 * Encodes a `Pool` protobuf message wrapped in the `Any` container: the stableswap Pool struct
 * @param sa_address - `address`:
 * @param sg_id - `id`:
 * @param g_pool_params - `pool_params`:
 * @param s_future_pool_governor - `future_pool_governor`: This string specifies who will govern the pool in the future. Valid forms of this are: {token name},{duration} {duration} where {token name} if specified is the token which determines the governor, and if not specified is the LP token for this pool.duration is a time specified as 0w,1w,2w, etc. which specifies how long the token would need to be locked up to count in governance. 0w means no lockup.
 * @param a_total_shares - `total_shares`: sum of all LP shares
 * @param a_pool_liquiditys - `pool_liquidity`: assets in the pool
 * @param a_scaling_factors - `scaling_factors`: for calculation amognst assets with different precisions
 * @param s_scaling_factor_controller - `scaling_factor_controller`: the address can adjust pool scaling factors
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyPool: (sa_address?: Opt<WeakAccountAddr>, sg_id?: Opt<WeakUint64Str>, atu8_pool_params?: Opt<Encoded<'/osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams'>>, s_future_pool_governor?: Opt<string>, a_total_shares?: Opt<SlimCoin>, a_pool_liquiditys?: Opt<SlimCoin[]>, a_scaling_factors?: Opt<WeakUint64Str[]>, s_scaling_factor_controller?: Opt<string>) => AnyOsmosisGammPoolmodelsStableswapPool;
/**
 * Encodes a `PoolParams` protobuf message: defined the parameters that will be managed by the pool governance in the future. This params are not managed by the chain governance. Instead they will be managed by the token holders of the pool. The pool's token holders are specified in future_pool_governor.
 * @param s_swap_fee - `swap_fee`:
 * @param s_exit_fee - `exit_fee`: N.B.: exit fee is disabled during pool creation in x/poolmanager. While old pools can maintain a non-zero fee. No new pool can be created with non-zero fee anymore
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisGammPoolmodelsStableswapPoolParams: (s_swap_fee?: Opt<string>, s_exit_fee?: Opt<string>) => EncodedOsmosisGammPoolmodelsStableswapPoolParams;
/**
 * Encodes a `Pool` protobuf message: the stableswap Pool struct
 * @param sa_address - `address`:
 * @param sg_id - `id`:
 * @param g_pool_params - `pool_params`:
 * @param s_future_pool_governor - `future_pool_governor`: This string specifies who will govern the pool in the future. Valid forms of this are: {token name},{duration} {duration} where {token name} if specified is the token which determines the governor, and if not specified is the LP token for this pool.duration is a time specified as 0w,1w,2w, etc. which specifies how long the token would need to be locked up to count in governance. 0w means no lockup.
 * @param a_total_shares - `total_shares`: sum of all LP shares
 * @param a_pool_liquiditys - `pool_liquidity`: assets in the pool
 * @param a_scaling_factors - `scaling_factors`: for calculation amognst assets with different precisions
 * @param s_scaling_factor_controller - `scaling_factor_controller`: the address can adjust pool scaling factors
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisGammPoolmodelsStableswapPool: (sa_address?: Opt<WeakAccountAddr>, sg_id?: Opt<WeakUint64Str>, atu8_pool_params?: Opt<Encoded<'/osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams'>>, s_future_pool_governor?: Opt<string>, a_total_shares?: Opt<SlimCoin>, a_pool_liquiditys?: Opt<SlimCoin[]>, a_scaling_factors?: Opt<WeakUint64Str[]>, s_scaling_factor_controller?: Opt<string>) => EncodedOsmosisGammPoolmodelsStableswapPool;
/**
 * A decoded protobuf PoolParams message
 *
 * Tuple where:
 *   - 0: swap_fee -
 *   - 1: exit_fee - N.B.: exit fee is disabled during pool creation in x/poolmanager. While old pools can maintain a non-zero fee. No new pool can be created with non-zero fee anymore
 */
export type DecodedOsmosisGammPoolmodelsStableswapPoolParams = [
    s_swap_fee?: string,
    s_exit_fee?: string
];
/**
 * Decodes a protobuf PoolParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisGammPoolmodelsStableswapPoolParams}
 */
export declare const decodeOsmosisGammPoolmodelsStableswapPoolParams: (atu8_payload: Uint8Array) => DecodedOsmosisGammPoolmodelsStableswapPoolParams;
/**
 * A decoded protobuf Pool message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: id -
 *   - 2: pool_params -
 *   - 3: future_pool_governor - This string specifies who will govern the pool in the future. Valid forms of this are: {token name},{duration} {duration} where {token name} if specified is the token which determines the governor, and if not specified is the LP token for this pool.duration is a time specified as 0w,1w,2w, etc. which specifies how long the token would need to be locked up to count in governance. 0w means no lockup.
 *   - 4: total_shares - sum of all LP shares
 *   - 5: pool_liquidity - assets in the pool
 *   - 6: scaling_factors - for calculation amognst assets with different precisions
 *   - 7: scaling_factor_controller - the address can adjust pool scaling factors
 */
export type DecodedOsmosisGammPoolmodelsStableswapPool = [
    sa_address?: CwAccountAddr,
    sg_id?: CwUint64,
    a_pool_params?: DecodedOsmosisGammPoolmodelsStableswapPoolParams,
    s_future_pool_governor?: string,
    a_total_shares?: [
        string,
        string
    ],
    a_pool_liquidity?: [
        string,
        string
    ][],
    a_scaling_factors?: CwUint64[],
    s_scaling_factor_controller?: string
];
/**
 * Decodes a protobuf Pool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisGammPoolmodelsStableswapPool}
 */
export declare const decodeOsmosisGammPoolmodelsStableswapPool: (atu8_payload: Uint8Array) => DecodedOsmosisGammPoolmodelsStableswapPool;
/**
 * Destructures the fields of a {@link OsmosisGammPoolmodelsStableswapPoolParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: swap_fee -
 *   - 1: exit_fee - N.B.: exit fee is disabled during pool creation in x/poolmanager. While old pools can maintain a non-zero fee. No new pool can be created with non-zero fee anymore
 */
export declare const destructOsmosisGammPoolmodelsStableswapPoolParams: (g_struct: OsmosisGammPoolmodelsStableswapPoolParams) => [swap_fee?: string, exit_fee?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_GAMM_POOLMODELS_STABLESWAP_POOL_PARAMS = "/osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams";
/**
 * JSON serialization of `osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams` - defined the parameters that will be managed by the pool governance in the future. This params are not managed by the chain governance. Instead they will be managed by the token holders of the pool. The pool's token holders are specified in future_pool_governor.
 */
export type OsmosisGammPoolmodelsStableswapPoolParams = {
    swap_fee?: string | undefined;
    exit_fee?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisGammPoolmodelsStableswapPool} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: id -
 *   - 2: pool_params -
 *   - 3: future_pool_governor - This string specifies who will govern the pool in the future. Valid forms of this are: {token name},{duration} {duration} where {token name} if specified is the token which determines the governor, and if not specified is the LP token for this pool.duration is a time specified as 0w,1w,2w, etc. which specifies how long the token would need to be locked up to count in governance. 0w means no lockup.
 *   - 4: total_shares - sum of all LP shares
 *   - 5: pool_liquidity - assets in the pool
 *   - 6: scaling_factors - for calculation amognst assets with different precisions
 *   - 7: scaling_factor_controller - the address can adjust pool scaling factors
 */
export declare const destructOsmosisGammPoolmodelsStableswapPool: (g_struct: OsmosisGammPoolmodelsStableswapPool) => [address?: CwAccountAddr, id?: CwUint64, pool_params?: OsmosisGammPoolmodelsStableswapPoolParams, future_pool_governor?: string, total_shares?: CosmosBaseCoin, pool_liquidity?: CosmosBaseCoin[], scaling_factors?: CwUint64[], scaling_factor_controller?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_GAMM_POOLMODELS_STABLESWAP_POOL = "/osmosis.gamm.poolmodels.stableswap.v1beta1.Pool";
/**
 * JSON serialization of `osmosis.gamm.poolmodels.stableswap.v1beta1.Pool` - the stableswap Pool struct
 */
export type OsmosisGammPoolmodelsStableswapPool = {
    address?: CwAccountAddr | undefined;
    id?: CwUint64 | undefined;
    pool_params?: OsmosisGammPoolmodelsStableswapPoolParams | undefined;
    future_pool_governor?: string | undefined;
    total_shares?: CosmosBaseCoin | undefined;
    pool_liquidity?: CosmosBaseCoin[] | undefined;
    scaling_factors?: CwUint64[] | undefined;
    scaling_factor_controller?: string | undefined;
};
