import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedOsmosisIbchooksParams = Encoded<'/osmosis.ibchooks.Params'>;
/**
 * Encodes a `Params` protobuf message:
 * @param a_allowed_async_ack_contracts - `allowed_async_ack_contracts`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIbchooksParams: (a_allowed_async_ack_contracts?: Opt<string[]>) => EncodedOsmosisIbchooksParams;
/**
 * A decoded protobuf Params message
 *
 * Alias for: allowed_async_ack_contracts -
 */
export type DecodedOsmosisIbchooksParams = [
    a_allowed_async_ack_contracts?: string[]
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbchooksParams}
 */
export declare const decodeOsmosisIbchooksParams: (atu8_payload: Uint8Array) => DecodedOsmosisIbchooksParams;
/**
 * Destructures the fields of a {@link OsmosisIbchooksParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: allowed_async_ack_contracts -
 */
export declare const destructOsmosisIbchooksParams: (g_struct: OsmosisIbchooksParams) => [allowed_async_ack_contracts?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_IBCHOOKS_PARAMS = "/osmosis.ibchooks.Params";
/**
 * JSON serialization of `osmosis.ibchooks.Params` -
 */
export type OsmosisIbchooksParams = {
    allowed_async_ack_contracts?: string[] | undefined;
};
