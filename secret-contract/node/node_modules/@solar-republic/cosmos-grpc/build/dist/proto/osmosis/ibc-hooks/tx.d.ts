import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedOsmosisIbchooksMsgEmitIBCAck = Encoded<'/osmosis.ibchooks.MsgEmitIBCAck'>;
export type EncodedOsmosisIbchooksMsgEmitIBCAckResponse = Encoded<'/osmosis.ibchooks.MsgEmitIBCAckResponse'>;
/**
 * Encodes a `MsgEmitIBCAck` protobuf message:
 * @param sa_sender - `sender`:
 * @param sg_packet_sequence - `packet_sequence`:
 * @param s_channel - `channel`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIbchooksMsgEmitIBCAck: (sa_sender?: Opt<WeakAccountAddr>, sg_packet_sequence?: Opt<WeakUint64Str>, s_channel?: Opt<string>) => EncodedOsmosisIbchooksMsgEmitIBCAck;
/**
 * Encodes a `MsgEmitIBCAckResponse` protobuf message:
 * @param s_contract_result - `contract_result`:
 * @param s_ibc_ack - `ibc_ack`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIbchooksMsgEmitIBCAckResponse: (s_contract_result?: Opt<string>, s_ibc_ack?: Opt<string>) => EncodedOsmosisIbchooksMsgEmitIBCAckResponse;
/**
 * A decoded protobuf EmitIBCAck message
 *
 * Tuple where:
 *   - 0: sender -
 *   - 1: packet_sequence -
 *   - 2: channel -
 */
export type DecodedOsmosisIbchooksMsgEmitIBCAck = [
    sa_sender?: CwAccountAddr,
    sg_packet_sequence?: CwUint64,
    s_channel?: string
];
/**
 * Decodes a protobuf EmitIBCAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbchooksMsgEmitIBCAck}
 */
export declare const decodeOsmosisIbchooksMsgEmitIBCAck: (atu8_payload: Uint8Array) => DecodedOsmosisIbchooksMsgEmitIBCAck;
/**
 * A decoded protobuf EmitIBCAck message
 *
 * Tuple where:
 *   - 0: contract_result -
 *   - 1: ibc_ack -
 */
export type DecodedOsmosisIbchooksMsgEmitIBCAckResponse = [
    s_contract_result?: string,
    s_ibc_ack?: string
];
/**
 * Decodes a protobuf EmitIBCAck message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbchooksMsgEmitIBCAckResponse}
 */
export declare const decodeOsmosisIbchooksMsgEmitIBCAckResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIbchooksMsgEmitIBCAckResponse;
/**
 * Destructures the fields of a {@link OsmosisIbchooksMsgEmitIBCAck} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: packet_sequence -
 *   - 2: channel -
 */
export declare const destructOsmosisIbchooksMsgEmitIBCAck: (g_struct: OsmosisIbchooksMsgEmitIBCAck) => [sender?: CwAccountAddr, packet_sequence?: CwUint64, channel?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_IBCHOOKS_MSG_EMIT_I_B_C_ACK = "/osmosis.ibchooks.MsgEmitIBCAck";
/**
 * JSON serialization of `osmosis.ibchooks.MsgEmitIBCAck` -
 */
export type OsmosisIbchooksMsgEmitIBCAck = {
    sender?: CwAccountAddr | undefined;
    packet_sequence?: CwUint64 | undefined;
    channel?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIbchooksMsgEmitIBCAckResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_result -
 *   - 1: ibc_ack -
 */
export declare const destructOsmosisIbchooksMsgEmitIBCAckResponse: (g_struct: OsmosisIbchooksMsgEmitIBCAckResponse) => [contract_result?: string, ibc_ack?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_IBCHOOKS_MSG_EMIT_I_B_C_ACK_RESPONSE = "/osmosis.ibchooks.MsgEmitIBCAckResponse";
/**
 * JSON serialization of `osmosis.ibchooks.MsgEmitIBCAckResponse` -
 */
export type OsmosisIbchooksMsgEmitIBCAckResponse = {
    contract_result?: string | undefined;
    ibc_ack?: string | undefined;
};
