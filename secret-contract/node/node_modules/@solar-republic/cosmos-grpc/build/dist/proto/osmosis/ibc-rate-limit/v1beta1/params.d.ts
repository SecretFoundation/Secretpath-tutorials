import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisIbcratelimitParams = Encoded<'/osmosis.ibcratelimit.v1beta1.Params'>;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the ibc-rate-limit module.
 * @param sa_contract - `contract_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIbcratelimitParams: (sa_contract?: Opt<WeakAccountAddr>) => EncodedOsmosisIbcratelimitParams;
/**
 * A decoded protobuf Params message
 *
 * Alias for: contract_address -
 */
export type DecodedOsmosisIbcratelimitParams = [
    sa_contract?: CwAccountAddr
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIbcratelimitParams}
 */
export declare const decodeOsmosisIbcratelimitParams: (atu8_payload: Uint8Array) => DecodedOsmosisIbcratelimitParams;
/**
 * Destructures the fields of a {@link OsmosisIbcratelimitParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address -
 */
export declare const destructOsmosisIbcratelimitParams: (g_struct: OsmosisIbcratelimitParams) => [contract_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_IBCRATELIMIT_PARAMS = "/osmosis.ibcratelimit.v1beta1.Params";
/**
 * JSON serialization of `osmosis.ibcratelimit.v1beta1.Params` - defines the parameters for the ibc-rate-limit module.
 */
export type OsmosisIbcratelimitParams = {
    contract_address?: CwAccountAddr | undefined;
};
