import { parse_duration } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, map, temporal } from '../../../api/protobuf-writer.js';
import { decodeOsmosisIncentivesGauge } from './gauge.js';
import { decodeOsmosisIncentivesGroup } from './group.js';
import { decodeOsmosisIncentivesParams } from './params.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the incentives module's various parameters when first initialized
 * @param g_params - `params`: all the parameters of the module
 * @param a_gauges - `gauges`: all gauges (not including group gauges) that should exist at genesis
 * @param a_lockable_durations - `lockable_durations`: all lockup durations that gauges can be locked for in order to recieve incentives
 * @param sg_last_gauge_id - `last_gauge_id`: what the gauge number will increment from when creating the next gauge after genesis
 * @param a_group_gauges - `group_gauges`: gauges are all group gauges that should exist at genesis
 * @param a_groups - `groups`: all the groups that should exist at genesis
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGenesisState = (atu8_params, a_gauges, a_lockable_durations, sg_last_gauge_id, a_group_gauges, a_groups) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_gauges) // Gauge[] gauges = 2
    .B(map(a_lockable_durations, temporal)) // Duration[] lockable_durations = 3
    .g(sg_last_gauge_id) // uint64 last_gauge_id = 4
    .B(a_group_gauges) // Gauge[] group_gauges = 5
    .B(a_groups) // Group[] groups = 6
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGenesisState}
 */
export const decodeOsmosisIncentivesGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, [3, 1], 3, 0, 0], [decodeOsmosisIncentivesParams, decodeOsmosisIncentivesGauge, decode_temporal, 0, decodeOsmosisIncentivesGauge, decodeOsmosisIncentivesGroup]);
/**
 * Destructures the fields of a {@link OsmosisIncentivesGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - all the parameters of the module
 *   - 1: gauges - all gauges (not including group gauges) that should exist at genesis
 *   - 2: lockable_durations - all lockup durations that gauges can be locked for in order to recieve incentives
 *   - 3: last_gauge_id - what the gauge number will increment from when creating the next gauge after genesis
 *   - 4: group_gauges - gauges are all group gauges that should exist at genesis
 *   - 5: groups - all the groups that should exist at genesis
 */
export const destructOsmosisIncentivesGenesisState = (g_struct) => [g_struct.params, g_struct.gauges, map(g_struct.lockable_durations, parse_duration), g_struct.last_gauge_id, g_struct.group_gauges, g_struct.groups];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GENESIS_STATE = '/osmosis.incentives.GenesisState';
//# sourceMappingURL=genesis.js.map