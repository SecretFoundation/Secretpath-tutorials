import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { decodeOsmosisIncentivesGauge } from './gauge.js';
/**
 * Encodes a `InternalGaugeInfo` protobuf message: Note that while both InternalGaugeInfo and InternalGaugeRecord could technically be replaced by DistrInfo and DistrRecord from the pool-incentives module, we create separate types here to keep our abstractions clean and readable (pool-incentives distribution abstractions are used in a very specific way that does not directly relate to gauge logic). This also helps us sidestep a refactor to avoid an import cycle.
 * @param s_total_weight - `total_weight`:
 * @param a_gauge_records - `gauge_records`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesInternalGaugeInfo = (s_total_weight, a_gauge_records) => Protobuf() // ...
    .s(s_total_weight) // string total_weight = 1
    .B(a_gauge_records) // InternalGaugeRecord[] gauge_records = 2
    .o;
/**
 * Encodes a `InternalGaugeRecord` protobuf message:
 * @param sg_gauge_id - `gauge_id`:
 * @param s_current_weight - `current_weight`: CurrentWeight is the current weight of this gauge being distributed to for this epoch. For instance, for volume splitting policy, this stores the volume generated in the last epoch of the linked pool.
 * @param s_cumulative_weight - `cumulative_weight`: CumulativeWeight serves as a snapshot of the accumulator being tracked based on splitting policy. For instance, for volume splitting policy, this stores the cumulative volume for the linked pool at time of last update.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesInternalGaugeRecord = (sg_gauge_id, s_current_weight, s_cumulative_weight) => Protobuf() // ...
    .g(sg_gauge_id) // uint64 gauge_id = 1
    .s(s_current_weight) // string current_weight = 2
    .s(s_cumulative_weight) // string cumulative_weight = 3
    .o;
/**
 * Encodes a `Group` protobuf message: an object that stores a 1:1 mapped gauge ID, a list of pool gauge info, and a splitting policy. These are grouped into a single abstraction to allow for distribution of group incentives to internal gauges according to the specified splitting policy.
 * @param sg_group_gauge_id - `group_gauge_id`:
 * @param g_internal_gauge_info - `internal_gauge_info`:
 * @param xc_splitting_policy - `splitting_policy`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGroup = (sg_group_gauge_id, atu8_internal_gauge_info, xc_splitting_policy) => Protobuf() // ...
    .g(sg_group_gauge_id) // uint64 group_gauge_id = 1
    .b(atu8_internal_gauge_info) // InternalGaugeInfo internal_gauge_info = 2
    .v(xc_splitting_policy) // SplittingPolicy splitting_policy = 3
    .o;
/**
 * Encodes a `CreateGroup` protobuf message: called via governance to create a new group. It takes an array of pool IDs to split the incentives across.
 * @param a_pool_ids - `pool_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesCreateGroup = (a_pool_ids) => Protobuf() // ...
    .G(a_pool_ids) // uint64[] pool_ids = 1
    .o;
/**
 * Encodes a `GroupsWithGauge` protobuf message: a helper struct that stores a group and its associated gauge.
 * @param g_group - `group`:
 * @param g_gauge - `gauge`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGroupsWithGauge = (atu8_group, atu8_gauge) => Protobuf() // ...
    .b(atu8_group) // Group group = 1
    .b(atu8_gauge) // Gauge gauge = 2
    .o;
/**
 * Decodes a protobuf InternalGaugeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesInternalGaugeInfo}
 */
export const decodeOsmosisIncentivesInternalGaugeInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeOsmosisIncentivesInternalGaugeRecord]);
/**
 * Decodes a protobuf InternalGaugeRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesInternalGaugeRecord}
 */
export const decodeOsmosisIncentivesInternalGaugeRecord = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf Group message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGroup}
 */
export const decodeOsmosisIncentivesGroup = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1], [0, decodeOsmosisIncentivesInternalGaugeInfo]);
/**
 * Decodes a protobuf CreateGroup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesCreateGroup}
 */
export const decodeOsmosisIncentivesCreateGroup = (atu8_payload) => decode_protobuf(atu8_payload, [2]);
/**
 * Decodes a protobuf GroupsWithGauge message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGroupsWithGauge}
 */
export const decodeOsmosisIncentivesGroupsWithGauge = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeOsmosisIncentivesGroup, decodeOsmosisIncentivesGauge]);
/**
 * Destructures the fields of a {@link OsmosisIncentivesCreateGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_ids -
 */
export const destructOsmosisIncentivesCreateGroup = (g_struct) => [g_struct.pool_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_CREATE_GROUP = '/osmosis.incentives.CreateGroup';
/**
 * Destructures the fields of a {@link OsmosisIncentivesInternalGaugeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total_weight -
 *   - 1: gauge_records -
 */
export const destructOsmosisIncentivesInternalGaugeInfo = (g_struct) => [g_struct.total_weight, g_struct.gauge_records];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_INTERNAL_GAUGE_INFO = '/osmosis.incentives.InternalGaugeInfo';
/**
 * Destructures the fields of a {@link OsmosisIncentivesInternalGaugeRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge_id -
 *   - 1: current_weight - CurrentWeight is the current weight of this gauge being distributed to for this epoch. For instance, for volume splitting policy, this stores the volume generated in the last epoch of the linked pool.
 *   - 2: cumulative_weight - CumulativeWeight serves as a snapshot of the accumulator being tracked based on splitting policy. For instance, for volume splitting policy, this stores the cumulative volume for the linked pool at time of last update.
 */
export const destructOsmosisIncentivesInternalGaugeRecord = (g_struct) => [g_struct.gauge_id, g_struct.current_weight, g_struct.cumulative_weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_INTERNAL_GAUGE_RECORD = '/osmosis.incentives.InternalGaugeRecord';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGroup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_gauge_id -
 *   - 1: internal_gauge_info -
 *   - 2: splitting_policy -
 */
export const destructOsmosisIncentivesGroup = (g_struct) => [g_struct.group_gauge_id, g_struct.internal_gauge_info, g_struct.splitting_policy];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GROUP = '/osmosis.incentives.Group';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGroupsWithGauge} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group -
 *   - 1: gauge -
 */
export const destructOsmosisIncentivesGroupsWithGauge = (g_struct) => [g_struct.group, g_struct.gauge];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GROUPS_WITH_GAUGE = '/osmosis.incentives.GroupsWithGauge';
/**
 * Protobuf enum value for `osmosis.incentives.SplittingPolicy`.
 *
 * **ByVolume** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisIncentivesSplittingPolicy}
 */
export const XC_PROTO_OSMOSIS_INCENTIVES_ByVolume = 0;
/**
 * JSON enum value for `osmosis.incentives.SplittingPolicy`.
 *
 * **ByVolume** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisIncentivesSplittingPolicy}
 */
export const SI_JSON_OSMOSIS_INCENTIVES_ByVolume = 'ByVolume';
/**
 * Maps a protobuf enum int value for `osmosis.incentives.SplittingPolicy` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumOsmosisIncentivesSplittingPolicy = {
    [XC_PROTO_OSMOSIS_INCENTIVES_ByVolume]: SI_JSON_OSMOSIS_INCENTIVES_ByVolume,
};
/**
 * Maps a JSON enum string value for `osmosis.incentives.SplittingPolicy` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumOsmosisIncentivesSplittingPolicy = {
    [SI_JSON_OSMOSIS_INCENTIVES_ByVolume]: XC_PROTO_OSMOSIS_INCENTIVES_ByVolume,
};
//# sourceMappingURL=group.js.map