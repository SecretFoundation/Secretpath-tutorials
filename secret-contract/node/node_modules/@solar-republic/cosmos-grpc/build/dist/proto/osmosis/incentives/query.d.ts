/// <reference types="node" />
import type { WeakInt64Str, WeakUint64Str, WeakAccountAddr, SlimCoin, CwInt64, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt, WeakDurationStr } from '../../../api/types.js';
import type { CosmosBaseQueryPageRequest, DecodedCosmosBaseQueryPageRequest, CosmosBaseQueryPageResponse, DecodedCosmosBaseQueryPageResponse } from '../../cosmos/base/query/v1beta1/pagination.js';
import type { CosmosBaseCoin } from '../../cosmos/base/v1beta1/coin.js';
import type { OsmosisIncentivesGauge, DecodedOsmosisIncentivesGauge } from './gauge.js';
import type { OsmosisIncentivesGroup, DecodedOsmosisIncentivesGroup, OsmosisIncentivesGroupsWithGauge, DecodedOsmosisIncentivesGroupsWithGauge } from './group.js';
export type EncodedOsmosisIncentivesModuleToDistributeCoinsRequest = Encoded<'/osmosis.incentives.ModuleToDistributeCoinsRequest'>;
export type EncodedOsmosisIncentivesModuleToDistributeCoinsResponse = Encoded<'/osmosis.incentives.ModuleToDistributeCoinsResponse'>;
export type EncodedOsmosisIncentivesGaugeByIDRequest = Encoded<'/osmosis.incentives.GaugeByIDRequest'>;
export type EncodedOsmosisIncentivesGaugeByIDResponse = Encoded<'/osmosis.incentives.GaugeByIDResponse'>;
export type EncodedOsmosisIncentivesGaugesRequest = Encoded<'/osmosis.incentives.GaugesRequest'>;
export type EncodedOsmosisIncentivesGaugesResponse = Encoded<'/osmosis.incentives.GaugesResponse'>;
export type EncodedOsmosisIncentivesActiveGaugesRequest = Encoded<'/osmosis.incentives.ActiveGaugesRequest'>;
export type EncodedOsmosisIncentivesActiveGaugesResponse = Encoded<'/osmosis.incentives.ActiveGaugesResponse'>;
export type EncodedOsmosisIncentivesActiveGaugesPerDenomRequest = Encoded<'/osmosis.incentives.ActiveGaugesPerDenomRequest'>;
export type EncodedOsmosisIncentivesActiveGaugesPerDenomResponse = Encoded<'/osmosis.incentives.ActiveGaugesPerDenomResponse'>;
export type EncodedOsmosisIncentivesUpcomingGaugesRequest = Encoded<'/osmosis.incentives.UpcomingGaugesRequest'>;
export type EncodedOsmosisIncentivesUpcomingGaugesResponse = Encoded<'/osmosis.incentives.UpcomingGaugesResponse'>;
export type EncodedOsmosisIncentivesUpcomingGaugesPerDenomRequest = Encoded<'/osmosis.incentives.UpcomingGaugesPerDenomRequest'>;
export type EncodedOsmosisIncentivesUpcomingGaugesPerDenomResponse = Encoded<'/osmosis.incentives.UpcomingGaugesPerDenomResponse'>;
export type EncodedOsmosisIncentivesRewardsEstRequest = Encoded<'/osmosis.incentives.RewardsEstRequest'>;
export type EncodedOsmosisIncentivesRewardsEstResponse = Encoded<'/osmosis.incentives.RewardsEstResponse'>;
export type EncodedOsmosisIncentivesQueryLockableDurationsRequest = Encoded<'/osmosis.incentives.QueryLockableDurationsRequest'>;
export type EncodedOsmosisIncentivesQueryLockableDurationsResponse = Encoded<'/osmosis.incentives.QueryLockableDurationsResponse'>;
export type EncodedOsmosisIncentivesQueryAllGroupsRequest = Encoded<'/osmosis.incentives.QueryAllGroupsRequest'>;
export type EncodedOsmosisIncentivesQueryAllGroupsResponse = Encoded<'/osmosis.incentives.QueryAllGroupsResponse'>;
export type EncodedOsmosisIncentivesQueryAllGroupsGaugesRequest = Encoded<'/osmosis.incentives.QueryAllGroupsGaugesRequest'>;
export type EncodedOsmosisIncentivesQueryAllGroupsGaugesResponse = Encoded<'/osmosis.incentives.QueryAllGroupsGaugesResponse'>;
export type EncodedOsmosisIncentivesQueryAllGroupsWithGaugeRequest = Encoded<'/osmosis.incentives.QueryAllGroupsWithGaugeRequest'>;
export type EncodedOsmosisIncentivesQueryAllGroupsWithGaugeResponse = Encoded<'/osmosis.incentives.QueryAllGroupsWithGaugeResponse'>;
export type EncodedOsmosisIncentivesQueryGroupByGroupGaugeIDRequest = Encoded<'/osmosis.incentives.QueryGroupByGroupGaugeIDRequest'>;
export type EncodedOsmosisIncentivesQueryGroupByGroupGaugeIDResponse = Encoded<'/osmosis.incentives.QueryGroupByGroupGaugeIDResponse'>;
export type EncodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest = Encoded<'/osmosis.incentives.QueryCurrentWeightByGroupGaugeIDRequest'>;
export type EncodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse = Encoded<'/osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse'>;
export type EncodedOsmosisIncentivesGaugeWeight = Encoded<'/osmosis.incentives.GaugeWeight'>;
/**
 * Returns coins that are going to be distributed
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: coins - Coins that have yet to be distributed
 */
export declare const queryOsmosisIncentivesModuleToDistributeCoins: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesModuleToDistributeCoinsResponse>>;
/**
 * Returns gauges by their respective ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_id - Gague ID being queried
 * @returns a tuple where:
 *   - 0: gauge - Gauge that corresponds to provided gague ID
 */
export declare const queryOsmosisIncentivesGaugeByID: (z_req: string | ({
    origin: string;
} & RequestInit), sg_id?: Opt<`${bigint}`>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesGaugeByIDResponse>>;
/**
 * Returns both upcoming and active gauges
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Upcoming and active gauges
 *   - 1: pagination - Upcoming and active gauges
 */
export declare const queryOsmosisIncentivesGauges: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesGaugesResponse>>;
/**
 * Returns active gauges
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Active gagues only
 *   - 1: pagination - Active gagues only
 */
export declare const queryOsmosisIncentivesActiveGauges: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesActiveGaugesResponse>>;
/**
 * Returns active gauges by denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - Desired denom when querying active gagues
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Active gagues that match denom in query
 *   - 1: pagination - Active gagues that match denom in query
 */
export declare const queryOsmosisIncentivesActiveGaugesPerDenom: (z_req: string | ({
    origin: string;
} & RequestInit), s_denom?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesActiveGaugesPerDenomResponse>>;
/**
 * Returns scheduled gauges that have not yet occured
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Gauges whose distribution is upcoming
 *   - 1: pagination - Gauges whose distribution is upcoming
 */
export declare const queryOsmosisIncentivesUpcomingGauges: (z_req: string | ({
    origin: string;
} & RequestInit), g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesUpcomingGaugesResponse>>;
/**
 * Returns scheduled gauges that have not yet occured by denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - Filter for upcoming gagues that match specific denom
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: upcoming_gauges - Upcoming gagues that match denom in query
 *   - 1: pagination - Upcoming gagues that match denom in query
 */
export declare const queryOsmosisIncentivesUpcomingGaugesPerDenom: (z_req: string | ({
    origin: string;
} & RequestInit), s_denom?: Opt<string>, g_pagination?: Opt<CosmosBaseQueryPageRequest>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesUpcomingGaugesPerDenomResponse>>;
/**
 * Returns an estimate of the rewards from now until a specified time in the future The querier either provides an address or a set of locks for which they want to find the associated rewards
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner - Address that is being queried for future estimated rewards
 * @param a_lock_ids - Lock IDs included in future reward estimation
 * @param sg_end_epoch - Upper time limit of reward estimation Lower limit is current epoch
 * @returns a tuple where:
 *   - 0: coins - Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 */
export declare const queryOsmosisIncentivesRewardsEst: (z_req: string | ({
    origin: string;
} & RequestInit), sa_owner?: Opt<`${string}1${string}`>, a_lock_ids?: Opt<`${bigint}`[]>, sg_end_epoch?: Opt<`${bigint}`>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesRewardsEstResponse>>;
/**
 * Returns lockable durations that are valid to distribute incentives for
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: lockable_durations - Time durations that users can lock coins for in order to recieve rewards
 */
export declare const queryOsmosisIncentivesLockableDurations: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesQueryLockableDurationsResponse>>;
/**
 * Returns all groups
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: groups - the 'groups' response property
 */
export declare const queryOsmosisIncentivesAllGroups: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesQueryAllGroupsResponse>>;
/**
 * Returns all group gauges
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: gauges - the 'gauges' response property
 */
export declare const queryOsmosisIncentivesAllGroupsGauges: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesQueryAllGroupsGaugesResponse>>;
/**
 * Returns all groups with their group gauge
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: groups_with_gauge - the 'groups_with_gauge' response property
 */
export declare const queryOsmosisIncentivesAllGroupsWithGauge: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesQueryAllGroupsWithGaugeResponse>>;
/**
 * Returns a group given its group gauge ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_id -
 * @returns a tuple where:
 *   - 0: group - the 'group' response property
 */
export declare const queryOsmosisIncentivesGroupByGroupGaugeID: (z_req: string | ({
    origin: string;
} & RequestInit), sg_id?: Opt<`${bigint}`>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesQueryGroupByGroupGaugeIDResponse>>;
/**
 * Returns the current weight since the the last epoch given a group gauge ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_gauge_id -
 * @returns a tuple where:
 *   - 0: gauge_weight - the 'gauge_weight' response property
 */
export declare const queryOsmosisIncentivesCurrentWeightByGroupGaugeID: (z_req: string | ({
    origin: string;
} & RequestInit), sg_group_gauge_id?: Opt<`${bigint}`>) => Promise<import("../../../api/transport.js").NetworkJsonResponse<OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse>>;
/**
 * Encodes a `ModuleToDistributeCoinsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesModuleToDistributeCoinsRequest: () => EncodedOsmosisIncentivesModuleToDistributeCoinsRequest;
/**
 * Encodes a `ModuleToDistributeCoinsResponse` protobuf message:
 * @param a_coins - `coins`: Coins that have yet to be distributed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesModuleToDistributeCoinsResponse: (a_coins?: Opt<SlimCoin[]>) => EncodedOsmosisIncentivesModuleToDistributeCoinsResponse;
/**
 * Encodes a `GaugeByIDRequest` protobuf message:
 * @param sg_id - `id`: Gague ID being queried
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesGaugeByIDRequest: (sg_id?: Opt<WeakUint64Str>) => EncodedOsmosisIncentivesGaugeByIDRequest;
/**
 * Encodes a `GaugeByIDResponse` protobuf message:
 * @param g_gauge - `gauge`: Gauge that corresponds to provided gague ID
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesGaugeByIDResponse: (atu8_gauge?: Opt<Encoded<'/osmosis.incentives.Gauge'>>) => EncodedOsmosisIncentivesGaugeByIDResponse;
/**
 * Encodes a `GaugesRequest` protobuf message:
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesGaugesRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedOsmosisIncentivesGaugesRequest;
/**
 * Encodes a `GaugesResponse` protobuf message:
 * @param a_datas - `data`: Upcoming and active gauges
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesGaugesResponse: (a_datas?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedOsmosisIncentivesGaugesResponse;
/**
 * Encodes a `ActiveGaugesRequest` protobuf message:
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesActiveGaugesRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedOsmosisIncentivesActiveGaugesRequest;
/**
 * Encodes a `ActiveGaugesResponse` protobuf message:
 * @param a_datas - `data`: Active gagues only
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesActiveGaugesResponse: (a_datas?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedOsmosisIncentivesActiveGaugesResponse;
/**
 * Encodes a `ActiveGaugesPerDenomRequest` protobuf message:
 * @param s_denom - `denom`: Desired denom when querying active gagues
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesActiveGaugesPerDenomRequest: (s_denom?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedOsmosisIncentivesActiveGaugesPerDenomRequest;
/**
 * Encodes a `ActiveGaugesPerDenomResponse` protobuf message:
 * @param a_datas - `data`: Active gagues that match denom in query
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesActiveGaugesPerDenomResponse: (a_datas?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedOsmosisIncentivesActiveGaugesPerDenomResponse;
/**
 * Encodes a `UpcomingGaugesRequest` protobuf message:
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesUpcomingGaugesRequest: (atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedOsmosisIncentivesUpcomingGaugesRequest;
/**
 * Encodes a `UpcomingGaugesResponse` protobuf message:
 * @param a_datas - `data`: Gauges whose distribution is upcoming
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesUpcomingGaugesResponse: (a_datas?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedOsmosisIncentivesUpcomingGaugesResponse;
/**
 * Encodes a `UpcomingGaugesPerDenomRequest` protobuf message:
 * @param s_denom - `denom`: Filter for upcoming gagues that match specific denom
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesUpcomingGaugesPerDenomRequest: (s_denom?: Opt<string>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageRequest'>>) => EncodedOsmosisIncentivesUpcomingGaugesPerDenomRequest;
/**
 * Encodes a `UpcomingGaugesPerDenomResponse` protobuf message:
 * @param a_upcoming_gauges - `upcoming_gauges`: Upcoming gagues that match denom in query
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesUpcomingGaugesPerDenomResponse: (a_upcoming_gauges?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>, atu8_pagination?: Opt<Encoded<'/cosmos.base.query.v1beta1.PageResponse'>>) => EncodedOsmosisIncentivesUpcomingGaugesPerDenomResponse;
/**
 * Encodes a `RewardsEstRequest` protobuf message:
 * @param sa_owner - `owner`: Address that is being queried for future estimated rewards
 * @param a_lock_ids - `lock_ids`: Lock IDs included in future reward estimation
 * @param sg_end_epoch - `end_epoch`: Upper time limit of reward estimation Lower limit is current epoch
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesRewardsEstRequest: (sa_owner?: Opt<WeakAccountAddr>, a_lock_ids?: Opt<WeakUint64Str[]>, sg_end_epoch?: Opt<WeakInt64Str>) => EncodedOsmosisIncentivesRewardsEstRequest;
/**
 * Encodes a `RewardsEstResponse` protobuf message:
 * @param a_coins - `coins`: Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesRewardsEstResponse: (a_coins?: Opt<SlimCoin[]>) => EncodedOsmosisIncentivesRewardsEstResponse;
/**
 * Encodes a `QueryLockableDurationsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryLockableDurationsRequest: () => EncodedOsmosisIncentivesQueryLockableDurationsRequest;
/**
 * Encodes a `QueryLockableDurationsResponse` protobuf message:
 * @param a_lockable_durations - `lockable_durations`: Time durations that users can lock coins for in order to recieve rewards
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryLockableDurationsResponse: (a_lockable_durations?: Opt<number[]>) => EncodedOsmosisIncentivesQueryLockableDurationsResponse;
/**
 * Encodes a `QueryAllGroupsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryAllGroupsRequest: () => EncodedOsmosisIncentivesQueryAllGroupsRequest;
/**
 * Encodes a `QueryAllGroupsResponse` protobuf message:
 * @param a_groups - `groups`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryAllGroupsResponse: (a_groups?: Opt<Encoded<'/osmosis.incentives.Group'>[]>) => EncodedOsmosisIncentivesQueryAllGroupsResponse;
/**
 * Encodes a `QueryAllGroupsGaugesRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryAllGroupsGaugesRequest: () => EncodedOsmosisIncentivesQueryAllGroupsGaugesRequest;
/**
 * Encodes a `QueryAllGroupsGaugesResponse` protobuf message:
 * @param a_gauges - `gauges`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryAllGroupsGaugesResponse: (a_gauges?: Opt<Encoded<'/osmosis.incentives.Gauge'>[]>) => EncodedOsmosisIncentivesQueryAllGroupsGaugesResponse;
/**
 * Encodes a `QueryAllGroupsWithGaugeRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryAllGroupsWithGaugeRequest: () => EncodedOsmosisIncentivesQueryAllGroupsWithGaugeRequest;
/**
 * Encodes a `QueryAllGroupsWithGaugeResponse` protobuf message:
 * @param a_groups_with_gauges - `groups_with_gauge`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryAllGroupsWithGaugeResponse: (a_groups_with_gauges?: Opt<Encoded<'/osmosis.incentives.GroupsWithGauge'>[]>) => EncodedOsmosisIncentivesQueryAllGroupsWithGaugeResponse;
/**
 * Encodes a `QueryGroupByGroupGaugeIDRequest` protobuf message:
 * @param sg_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryGroupByGroupGaugeIDRequest: (sg_id?: Opt<WeakUint64Str>) => EncodedOsmosisIncentivesQueryGroupByGroupGaugeIDRequest;
/**
 * Encodes a `QueryGroupByGroupGaugeIDResponse` protobuf message:
 * @param g_group - `group`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryGroupByGroupGaugeIDResponse: (atu8_group?: Opt<Encoded<'/osmosis.incentives.Group'>>) => EncodedOsmosisIncentivesQueryGroupByGroupGaugeIDResponse;
/**
 * Encodes a `QueryCurrentWeightByGroupGaugeIDRequest` protobuf message:
 * @param sg_group_gauge_id - `group_gauge_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest: (sg_group_gauge_id?: Opt<WeakUint64Str>) => EncodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest;
/**
 * Encodes a `QueryCurrentWeightByGroupGaugeIDResponse` protobuf message:
 * @param a_gauge_weights - `gauge_weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse: (a_gauge_weights?: Opt<Encoded<'/osmosis.incentives.GaugeWeight'>[]>) => EncodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse;
/**
 * Encodes a `GaugeWeight` protobuf message:
 * @param sg_gauge_id - `gauge_id`:
 * @param s_weight_ratio - `weight_ratio`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisIncentivesGaugeWeight: (sg_gauge_id?: Opt<WeakUint64Str>, s_weight_ratio?: Opt<string>) => EncodedOsmosisIncentivesGaugeWeight;
/**
 * A decoded protobuf ModuleToDistributeCoinsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisIncentivesModuleToDistributeCoinsRequest = [];
/**
 * Decodes a protobuf ModuleToDistributeCoinsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesModuleToDistributeCoinsRequest}
 */
export declare const decodeOsmosisIncentivesModuleToDistributeCoinsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf ModuleToDistributeCoins message
 *
 * Alias for: coins - Coins that have yet to be distributed
 */
export type DecodedOsmosisIncentivesModuleToDistributeCoinsResponse = [
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf ModuleToDistributeCoins message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesModuleToDistributeCoinsResponse}
 */
export declare const decodeOsmosisIncentivesModuleToDistributeCoinsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesModuleToDistributeCoinsResponse;
/**
 * A decoded protobuf GaugeByIDRequest message
 *
 * Alias for: id - Gague ID being queried
 */
export type DecodedOsmosisIncentivesGaugeByIDRequest = [
    sg_id?: CwUint64
];
/**
 * Decodes a protobuf GaugeByIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugeByIDRequest}
 */
export declare const decodeOsmosisIncentivesGaugeByIDRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesGaugeByIDRequest;
/**
 * A decoded protobuf GaugeByID message
 *
 * Alias for: gauge - Gauge that corresponds to provided gague ID
 */
export type DecodedOsmosisIncentivesGaugeByIDResponse = [
    a_gauge?: DecodedOsmosisIncentivesGauge
];
/**
 * Decodes a protobuf GaugeByID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugeByIDResponse}
 */
export declare const decodeOsmosisIncentivesGaugeByIDResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesGaugeByIDResponse;
/**
 * A decoded protobuf GaugesRequest message
 *
 * Alias for: pagination - Pagination defines pagination for the request
 */
export type DecodedOsmosisIncentivesGaugesRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf GaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugesRequest}
 */
export declare const decodeOsmosisIncentivesGaugesRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesGaugesRequest;
/**
 * A decoded protobuf Gauges message
 *
 * Tuple where:
 *   - 0: data - Upcoming and active gauges
 *   - 1: pagination - Pagination defines pagination for the response
 */
export type DecodedOsmosisIncentivesGaugesResponse = [
    a_data?: DecodedOsmosisIncentivesGauge[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf Gauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugesResponse}
 */
export declare const decodeOsmosisIncentivesGaugesResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesGaugesResponse;
/**
 * A decoded protobuf ActiveGaugesRequest message
 *
 * Alias for: pagination - Pagination defines pagination for the request
 */
export type DecodedOsmosisIncentivesActiveGaugesRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf ActiveGaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesRequest}
 */
export declare const decodeOsmosisIncentivesActiveGaugesRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesActiveGaugesRequest;
/**
 * A decoded protobuf ActiveGauges message
 *
 * Tuple where:
 *   - 0: data - Active gagues only
 *   - 1: pagination - Pagination defines pagination for the response
 */
export type DecodedOsmosisIncentivesActiveGaugesResponse = [
    a_data?: DecodedOsmosisIncentivesGauge[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf ActiveGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesResponse}
 */
export declare const decodeOsmosisIncentivesActiveGaugesResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesActiveGaugesResponse;
/**
 * A decoded protobuf ActiveGaugesPerDenomRequest message
 *
 * Tuple where:
 *   - 0: denom - Desired denom when querying active gagues
 *   - 1: pagination - Pagination defines pagination for the request
 */
export type DecodedOsmosisIncentivesActiveGaugesPerDenomRequest = [
    s_denom?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf ActiveGaugesPerDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesPerDenomRequest}
 */
export declare const decodeOsmosisIncentivesActiveGaugesPerDenomRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesActiveGaugesPerDenomRequest;
/**
 * A decoded protobuf ActiveGaugesPerDenom message
 *
 * Tuple where:
 *   - 0: data - Active gagues that match denom in query
 *   - 1: pagination - Pagination defines pagination for the response
 */
export type DecodedOsmosisIncentivesActiveGaugesPerDenomResponse = [
    a_data?: DecodedOsmosisIncentivesGauge[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf ActiveGaugesPerDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesPerDenomResponse}
 */
export declare const decodeOsmosisIncentivesActiveGaugesPerDenomResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesActiveGaugesPerDenomResponse;
/**
 * A decoded protobuf UpcomingGaugesRequest message
 *
 * Alias for: pagination - Pagination defines pagination for the request
 */
export type DecodedOsmosisIncentivesUpcomingGaugesRequest = [
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf UpcomingGaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesRequest}
 */
export declare const decodeOsmosisIncentivesUpcomingGaugesRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesUpcomingGaugesRequest;
/**
 * A decoded protobuf UpcomingGauges message
 *
 * Tuple where:
 *   - 0: data - Gauges whose distribution is upcoming
 *   - 1: pagination - Pagination defines pagination for the response
 */
export type DecodedOsmosisIncentivesUpcomingGaugesResponse = [
    a_data?: DecodedOsmosisIncentivesGauge[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf UpcomingGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesResponse}
 */
export declare const decodeOsmosisIncentivesUpcomingGaugesResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesUpcomingGaugesResponse;
/**
 * A decoded protobuf UpcomingGaugesPerDenomRequest message
 *
 * Tuple where:
 *   - 0: denom - Filter for upcoming gagues that match specific denom
 *   - 1: pagination - Pagination defines pagination for the request
 */
export type DecodedOsmosisIncentivesUpcomingGaugesPerDenomRequest = [
    s_denom?: string,
    a_pagination?: DecodedCosmosBaseQueryPageRequest
];
/**
 * Decodes a protobuf UpcomingGaugesPerDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesPerDenomRequest}
 */
export declare const decodeOsmosisIncentivesUpcomingGaugesPerDenomRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesUpcomingGaugesPerDenomRequest;
/**
 * A decoded protobuf UpcomingGaugesPerDenom message
 *
 * Tuple where:
 *   - 0: upcoming_gauges - Upcoming gagues that match denom in query
 *   - 1: pagination - Pagination defines pagination for the response
 */
export type DecodedOsmosisIncentivesUpcomingGaugesPerDenomResponse = [
    a_upcoming_gauges?: DecodedOsmosisIncentivesGauge[],
    a_pagination?: DecodedCosmosBaseQueryPageResponse
];
/**
 * Decodes a protobuf UpcomingGaugesPerDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesPerDenomResponse}
 */
export declare const decodeOsmosisIncentivesUpcomingGaugesPerDenomResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesUpcomingGaugesPerDenomResponse;
/**
 * A decoded protobuf RewardsEstRequest message
 *
 * Tuple where:
 *   - 0: owner - Address that is being queried for future estimated rewards
 *   - 1: lock_ids - Lock IDs included in future reward estimation
 *   - 2: end_epoch - Upper time limit of reward estimation Lower limit is current epoch
 */
export type DecodedOsmosisIncentivesRewardsEstRequest = [
    sa_owner?: CwAccountAddr,
    a_lock_ids?: CwUint64[],
    sg_end_epoch?: CwInt64
];
/**
 * Decodes a protobuf RewardsEstRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesRewardsEstRequest}
 */
export declare const decodeOsmosisIncentivesRewardsEstRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesRewardsEstRequest;
/**
 * A decoded protobuf RewardsEst message
 *
 * Alias for: coins - Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 */
export type DecodedOsmosisIncentivesRewardsEstResponse = [
    a_coins?: [
        string,
        string
    ][]
];
/**
 * Decodes a protobuf RewardsEst message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesRewardsEstResponse}
 */
export declare const decodeOsmosisIncentivesRewardsEstResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesRewardsEstResponse;
/**
 * A decoded protobuf QueryLockableDurationsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisIncentivesQueryLockableDurationsRequest = [];
/**
 * Decodes a protobuf QueryLockableDurationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryLockableDurationsRequest}
 */
export declare const decodeOsmosisIncentivesQueryLockableDurationsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryLockableDurations message
 *
 * Alias for: lockable_durations - Time durations that users can lock coins for in order to recieve rewards
 */
export type DecodedOsmosisIncentivesQueryLockableDurationsResponse = [
    a_lockable_durations?: [
        string,
        number
    ][]
];
/**
 * Decodes a protobuf QueryLockableDurations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryLockableDurationsResponse}
 */
export declare const decodeOsmosisIncentivesQueryLockableDurationsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryLockableDurationsResponse;
/**
 * A decoded protobuf QueryAllGroupsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisIncentivesQueryAllGroupsRequest = [];
/**
 * Decodes a protobuf QueryAllGroupsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsRequest}
 */
export declare const decodeOsmosisIncentivesQueryAllGroupsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryAllGroups message
 *
 * Alias for: groups -
 */
export type DecodedOsmosisIncentivesQueryAllGroupsResponse = [
    a_groups?: DecodedOsmosisIncentivesGroup[]
];
/**
 * Decodes a protobuf QueryAllGroups message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsResponse}
 */
export declare const decodeOsmosisIncentivesQueryAllGroupsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryAllGroupsResponse;
/**
 * A decoded protobuf QueryAllGroupsGaugesRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisIncentivesQueryAllGroupsGaugesRequest = [];
/**
 * Decodes a protobuf QueryAllGroupsGaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsGaugesRequest}
 */
export declare const decodeOsmosisIncentivesQueryAllGroupsGaugesRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryAllGroupsGauges message
 *
 * Alias for: gauges -
 */
export type DecodedOsmosisIncentivesQueryAllGroupsGaugesResponse = [
    a_gauges?: DecodedOsmosisIncentivesGauge[]
];
/**
 * Decodes a protobuf QueryAllGroupsGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsGaugesResponse}
 */
export declare const decodeOsmosisIncentivesQueryAllGroupsGaugesResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryAllGroupsGaugesResponse;
/**
 * A decoded protobuf QueryAllGroupsWithGaugeRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisIncentivesQueryAllGroupsWithGaugeRequest = [];
/**
 * Decodes a protobuf QueryAllGroupsWithGaugeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsWithGaugeRequest}
 */
export declare const decodeOsmosisIncentivesQueryAllGroupsWithGaugeRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryAllGroupsWithGauge message
 *
 * Alias for: groups_with_gauge -
 */
export type DecodedOsmosisIncentivesQueryAllGroupsWithGaugeResponse = [
    a_groups_with_gauge?: DecodedOsmosisIncentivesGroupsWithGauge[]
];
/**
 * Decodes a protobuf QueryAllGroupsWithGauge message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsWithGaugeResponse}
 */
export declare const decodeOsmosisIncentivesQueryAllGroupsWithGaugeResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryAllGroupsWithGaugeResponse;
/**
 * A decoded protobuf QueryGroupByGroupGaugeIDRequest message
 *
 * Alias for: id -
 */
export type DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDRequest = [
    sg_id?: CwUint64
];
/**
 * Decodes a protobuf QueryGroupByGroupGaugeIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDRequest}
 */
export declare const decodeOsmosisIncentivesQueryGroupByGroupGaugeIDRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDRequest;
/**
 * A decoded protobuf QueryGroupByGroupGaugeID message
 *
 * Alias for: group -
 */
export type DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDResponse = [
    a_group?: DecodedOsmosisIncentivesGroup
];
/**
 * Decodes a protobuf QueryGroupByGroupGaugeID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDResponse}
 */
export declare const decodeOsmosisIncentivesQueryGroupByGroupGaugeIDResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDResponse;
/**
 * A decoded protobuf QueryCurrentWeightByGroupGaugeIDRequest message
 *
 * Alias for: group_gauge_id -
 */
export type DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest = [
    sg_group_gauge_id?: CwUint64
];
/**
 * Decodes a protobuf QueryCurrentWeightByGroupGaugeIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest}
 */
export declare const decodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest;
/**
 * A decoded protobuf QueryCurrentWeightByGroupGaugeID message
 *
 * Alias for: gauge_weight -
 */
export type DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse = [
    a_gauge_weight?: DecodedOsmosisIncentivesGaugeWeight[]
];
/**
 * Decodes a protobuf QueryCurrentWeightByGroupGaugeID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse}
 */
export declare const decodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse;
/**
 * A decoded protobuf GaugeWeight message
 *
 * Tuple where:
 *   - 0: gauge_id -
 *   - 1: weight_ratio -
 */
export type DecodedOsmosisIncentivesGaugeWeight = [
    sg_gauge_id?: CwUint64,
    s_weight_ratio?: string
];
/**
 * Decodes a protobuf GaugeWeight message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugeWeight}
 */
export declare const decodeOsmosisIncentivesGaugeWeight: (atu8_payload: Uint8Array) => DecodedOsmosisIncentivesGaugeWeight;
/**
 * Destructures the fields of a {@link OsmosisIncentivesModuleToDistributeCoinsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisIncentivesModuleToDistributeCoinsRequest: (g_struct: OsmosisIncentivesModuleToDistributeCoinsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_MODULE_TO_DISTRIBUTE_COINS_REQUEST = "/osmosis.incentives.ModuleToDistributeCoinsRequest";
/**
 * JSON serialization of `osmosis.incentives.ModuleToDistributeCoinsRequest` -
 */
export type OsmosisIncentivesModuleToDistributeCoinsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisIncentivesModuleToDistributeCoinsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins - Coins that have yet to be distributed
 */
export declare const destructOsmosisIncentivesModuleToDistributeCoinsResponse: (g_struct: OsmosisIncentivesModuleToDistributeCoinsResponse) => [coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_MODULE_TO_DISTRIBUTE_COINS_RESPONSE = "/osmosis.incentives.ModuleToDistributeCoinsResponse";
/**
 * JSON serialization of `osmosis.incentives.ModuleToDistributeCoinsResponse` -
 */
export type OsmosisIncentivesModuleToDistributeCoinsResponse = {
    coins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugeByIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - Gague ID being queried
 */
export declare const destructOsmosisIncentivesGaugeByIDRequest: (g_struct: OsmosisIncentivesGaugeByIDRequest) => [id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGE_BY_I_D_REQUEST = "/osmosis.incentives.GaugeByIDRequest";
/**
 * JSON serialization of `osmosis.incentives.GaugeByIDRequest` -
 */
export type OsmosisIncentivesGaugeByIDRequest = {
    id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugeByIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge - Gauge that corresponds to provided gague ID
 */
export declare const destructOsmosisIncentivesGaugeByIDResponse: (g_struct: OsmosisIncentivesGaugeByIDResponse) => [gauge?: OsmosisIncentivesGauge];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGE_BY_I_D_RESPONSE = "/osmosis.incentives.GaugeByIDResponse";
/**
 * JSON serialization of `osmosis.incentives.GaugeByIDResponse` -
 */
export type OsmosisIncentivesGaugeByIDResponse = {
    gauge?: OsmosisIncentivesGauge | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines pagination for the request
 */
export declare const destructOsmosisIncentivesGaugesRequest: (g_struct: OsmosisIncentivesGaugesRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGES_REQUEST = "/osmosis.incentives.GaugesRequest";
/**
 * JSON serialization of `osmosis.incentives.GaugesRequest` -
 */
export type OsmosisIncentivesGaugesRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Upcoming and active gauges
 *   - 1: pagination - Pagination defines pagination for the response
 */
export declare const destructOsmosisIncentivesGaugesResponse: (g_struct: OsmosisIncentivesGaugesResponse) => [data?: OsmosisIncentivesGauge[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGES_RESPONSE = "/osmosis.incentives.GaugesResponse";
/**
 * JSON serialization of `osmosis.incentives.GaugesResponse` -
 */
export type OsmosisIncentivesGaugesResponse = {
    data?: OsmosisIncentivesGauge[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines pagination for the request
 */
export declare const destructOsmosisIncentivesActiveGaugesRequest: (g_struct: OsmosisIncentivesActiveGaugesRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_REQUEST = "/osmosis.incentives.ActiveGaugesRequest";
/**
 * JSON serialization of `osmosis.incentives.ActiveGaugesRequest` -
 */
export type OsmosisIncentivesActiveGaugesRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Active gagues only
 *   - 1: pagination - Pagination defines pagination for the response
 */
export declare const destructOsmosisIncentivesActiveGaugesResponse: (g_struct: OsmosisIncentivesActiveGaugesResponse) => [data?: OsmosisIncentivesGauge[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_RESPONSE = "/osmosis.incentives.ActiveGaugesResponse";
/**
 * JSON serialization of `osmosis.incentives.ActiveGaugesResponse` -
 */
export type OsmosisIncentivesActiveGaugesResponse = {
    data?: OsmosisIncentivesGauge[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesPerDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - Desired denom when querying active gagues
 *   - 1: pagination - Pagination defines pagination for the request
 */
export declare const destructOsmosisIncentivesActiveGaugesPerDenomRequest: (g_struct: OsmosisIncentivesActiveGaugesPerDenomRequest) => [denom?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_PER_DENOM_REQUEST = "/osmosis.incentives.ActiveGaugesPerDenomRequest";
/**
 * JSON serialization of `osmosis.incentives.ActiveGaugesPerDenomRequest` -
 */
export type OsmosisIncentivesActiveGaugesPerDenomRequest = {
    denom?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesPerDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Active gagues that match denom in query
 *   - 1: pagination - Pagination defines pagination for the response
 */
export declare const destructOsmosisIncentivesActiveGaugesPerDenomResponse: (g_struct: OsmosisIncentivesActiveGaugesPerDenomResponse) => [data?: OsmosisIncentivesGauge[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_PER_DENOM_RESPONSE = "/osmosis.incentives.ActiveGaugesPerDenomResponse";
/**
 * JSON serialization of `osmosis.incentives.ActiveGaugesPerDenomResponse` -
 */
export type OsmosisIncentivesActiveGaugesPerDenomResponse = {
    data?: OsmosisIncentivesGauge[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines pagination for the request
 */
export declare const destructOsmosisIncentivesUpcomingGaugesRequest: (g_struct: OsmosisIncentivesUpcomingGaugesRequest) => [pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_REQUEST = "/osmosis.incentives.UpcomingGaugesRequest";
/**
 * JSON serialization of `osmosis.incentives.UpcomingGaugesRequest` -
 */
export type OsmosisIncentivesUpcomingGaugesRequest = {
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Gauges whose distribution is upcoming
 *   - 1: pagination - Pagination defines pagination for the response
 */
export declare const destructOsmosisIncentivesUpcomingGaugesResponse: (g_struct: OsmosisIncentivesUpcomingGaugesResponse) => [data?: OsmosisIncentivesGauge[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_RESPONSE = "/osmosis.incentives.UpcomingGaugesResponse";
/**
 * JSON serialization of `osmosis.incentives.UpcomingGaugesResponse` -
 */
export type OsmosisIncentivesUpcomingGaugesResponse = {
    data?: OsmosisIncentivesGauge[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesPerDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - Filter for upcoming gagues that match specific denom
 *   - 1: pagination - Pagination defines pagination for the request
 */
export declare const destructOsmosisIncentivesUpcomingGaugesPerDenomRequest: (g_struct: OsmosisIncentivesUpcomingGaugesPerDenomRequest) => [denom?: string, pagination?: CosmosBaseQueryPageRequest];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_PER_DENOM_REQUEST = "/osmosis.incentives.UpcomingGaugesPerDenomRequest";
/**
 * JSON serialization of `osmosis.incentives.UpcomingGaugesPerDenomRequest` -
 */
export type OsmosisIncentivesUpcomingGaugesPerDenomRequest = {
    denom?: string | undefined;
    pagination?: CosmosBaseQueryPageRequest | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesPerDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upcoming_gauges - Upcoming gagues that match denom in query
 *   - 1: pagination - Pagination defines pagination for the response
 */
export declare const destructOsmosisIncentivesUpcomingGaugesPerDenomResponse: (g_struct: OsmosisIncentivesUpcomingGaugesPerDenomResponse) => [upcoming_gauges?: OsmosisIncentivesGauge[], pagination?: CosmosBaseQueryPageResponse];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_PER_DENOM_RESPONSE = "/osmosis.incentives.UpcomingGaugesPerDenomResponse";
/**
 * JSON serialization of `osmosis.incentives.UpcomingGaugesPerDenomResponse` -
 */
export type OsmosisIncentivesUpcomingGaugesPerDenomResponse = {
    upcoming_gauges?: OsmosisIncentivesGauge[] | undefined;
    pagination?: CosmosBaseQueryPageResponse | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesRewardsEstRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner - Address that is being queried for future estimated rewards
 *   - 1: lock_ids - Lock IDs included in future reward estimation
 *   - 2: end_epoch - Upper time limit of reward estimation Lower limit is current epoch
 */
export declare const destructOsmosisIncentivesRewardsEstRequest: (g_struct: OsmosisIncentivesRewardsEstRequest) => [owner?: CwAccountAddr, lock_ids?: CwUint64[], end_epoch?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_REWARDS_EST_REQUEST = "/osmosis.incentives.RewardsEstRequest";
/**
 * JSON serialization of `osmosis.incentives.RewardsEstRequest` -
 */
export type OsmosisIncentivesRewardsEstRequest = {
    owner?: CwAccountAddr | undefined;
    lock_ids?: CwUint64[] | undefined;
    end_epoch?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesRewardsEstResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins - Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 */
export declare const destructOsmosisIncentivesRewardsEstResponse: (g_struct: OsmosisIncentivesRewardsEstResponse) => [coins?: CosmosBaseCoin[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_REWARDS_EST_RESPONSE = "/osmosis.incentives.RewardsEstResponse";
/**
 * JSON serialization of `osmosis.incentives.RewardsEstResponse` -
 */
export type OsmosisIncentivesRewardsEstResponse = {
    coins?: CosmosBaseCoin[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryLockableDurationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisIncentivesQueryLockableDurationsRequest: (g_struct: OsmosisIncentivesQueryLockableDurationsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_LOCKABLE_DURATIONS_REQUEST = "/osmosis.incentives.QueryLockableDurationsRequest";
/**
 * JSON serialization of `osmosis.incentives.QueryLockableDurationsRequest` -
 */
export type OsmosisIncentivesQueryLockableDurationsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryLockableDurationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lockable_durations - Time durations that users can lock coins for in order to recieve rewards
 */
export declare const destructOsmosisIncentivesQueryLockableDurationsResponse: (g_struct: OsmosisIncentivesQueryLockableDurationsResponse) => [lockable_durations?: number[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_LOCKABLE_DURATIONS_RESPONSE = "/osmosis.incentives.QueryLockableDurationsResponse";
/**
 * JSON serialization of `osmosis.incentives.QueryLockableDurationsResponse` -
 */
export type OsmosisIncentivesQueryLockableDurationsResponse = {
    lockable_durations?: WeakDurationStr[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisIncentivesQueryAllGroupsRequest: (g_struct: OsmosisIncentivesQueryAllGroupsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_REQUEST = "/osmosis.incentives.QueryAllGroupsRequest";
/**
 * JSON serialization of `osmosis.incentives.QueryAllGroupsRequest` -
 */
export type OsmosisIncentivesQueryAllGroupsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups -
 */
export declare const destructOsmosisIncentivesQueryAllGroupsResponse: (g_struct: OsmosisIncentivesQueryAllGroupsResponse) => [groups?: OsmosisIncentivesGroup[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_RESPONSE = "/osmosis.incentives.QueryAllGroupsResponse";
/**
 * JSON serialization of `osmosis.incentives.QueryAllGroupsResponse` -
 */
export type OsmosisIncentivesQueryAllGroupsResponse = {
    groups?: OsmosisIncentivesGroup[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisIncentivesQueryAllGroupsGaugesRequest: (g_struct: OsmosisIncentivesQueryAllGroupsGaugesRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_GAUGES_REQUEST = "/osmosis.incentives.QueryAllGroupsGaugesRequest";
/**
 * JSON serialization of `osmosis.incentives.QueryAllGroupsGaugesRequest` -
 */
export type OsmosisIncentivesQueryAllGroupsGaugesRequest = {};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauges -
 */
export declare const destructOsmosisIncentivesQueryAllGroupsGaugesResponse: (g_struct: OsmosisIncentivesQueryAllGroupsGaugesResponse) => [gauges?: OsmosisIncentivesGauge[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_GAUGES_RESPONSE = "/osmosis.incentives.QueryAllGroupsGaugesResponse";
/**
 * JSON serialization of `osmosis.incentives.QueryAllGroupsGaugesResponse` -
 */
export type OsmosisIncentivesQueryAllGroupsGaugesResponse = {
    gauges?: OsmosisIncentivesGauge[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsWithGaugeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisIncentivesQueryAllGroupsWithGaugeRequest: (g_struct: OsmosisIncentivesQueryAllGroupsWithGaugeRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_WITH_GAUGE_REQUEST = "/osmosis.incentives.QueryAllGroupsWithGaugeRequest";
/**
 * JSON serialization of `osmosis.incentives.QueryAllGroupsWithGaugeRequest` -
 */
export type OsmosisIncentivesQueryAllGroupsWithGaugeRequest = {};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsWithGaugeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups_with_gauge -
 */
export declare const destructOsmosisIncentivesQueryAllGroupsWithGaugeResponse: (g_struct: OsmosisIncentivesQueryAllGroupsWithGaugeResponse) => [groups_with_gauge?: OsmosisIncentivesGroupsWithGauge[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_WITH_GAUGE_RESPONSE = "/osmosis.incentives.QueryAllGroupsWithGaugeResponse";
/**
 * JSON serialization of `osmosis.incentives.QueryAllGroupsWithGaugeResponse` -
 */
export type OsmosisIncentivesQueryAllGroupsWithGaugeResponse = {
    groups_with_gauge?: OsmosisIncentivesGroupsWithGauge[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryGroupByGroupGaugeIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export declare const destructOsmosisIncentivesQueryGroupByGroupGaugeIDRequest: (g_struct: OsmosisIncentivesQueryGroupByGroupGaugeIDRequest) => [id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_GROUP_BY_GROUP_GAUGE_I_D_REQUEST = "/osmosis.incentives.QueryGroupByGroupGaugeIDRequest";
/**
 * JSON serialization of `osmosis.incentives.QueryGroupByGroupGaugeIDRequest` -
 */
export type OsmosisIncentivesQueryGroupByGroupGaugeIDRequest = {
    id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryGroupByGroupGaugeIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group -
 */
export declare const destructOsmosisIncentivesQueryGroupByGroupGaugeIDResponse: (g_struct: OsmosisIncentivesQueryGroupByGroupGaugeIDResponse) => [group?: OsmosisIncentivesGroup];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_GROUP_BY_GROUP_GAUGE_I_D_RESPONSE = "/osmosis.incentives.QueryGroupByGroupGaugeIDResponse";
/**
 * JSON serialization of `osmosis.incentives.QueryGroupByGroupGaugeIDResponse` -
 */
export type OsmosisIncentivesQueryGroupByGroupGaugeIDResponse = {
    group?: OsmosisIncentivesGroup | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_gauge_id -
 */
export declare const destructOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest: (g_struct: OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest) => [group_gauge_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_CURRENT_WEIGHT_BY_GROUP_GAUGE_I_D_REQUEST = "/osmosis.incentives.QueryCurrentWeightByGroupGaugeIDRequest";
/**
 * JSON serialization of `osmosis.incentives.QueryCurrentWeightByGroupGaugeIDRequest` -
 */
export type OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest = {
    group_gauge_id?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge_weight -
 */
export declare const destructOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse: (g_struct: OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse) => [gauge_weight?: OsmosisIncentivesGaugeWeight[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_CURRENT_WEIGHT_BY_GROUP_GAUGE_I_D_RESPONSE = "/osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse";
/**
 * JSON serialization of `osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse` -
 */
export type OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse = {
    gauge_weight?: OsmosisIncentivesGaugeWeight[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugeWeight} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge_id -
 *   - 1: weight_ratio -
 */
export declare const destructOsmosisIncentivesGaugeWeight: (g_struct: OsmosisIncentivesGaugeWeight) => [gauge_id?: CwUint64, weight_ratio?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGE_WEIGHT = "/osmosis.incentives.GaugeWeight";
/**
 * JSON serialization of `osmosis.incentives.GaugeWeight` -
 */
export type OsmosisIncentivesGaugeWeight = {
    gauge_id?: CwUint64 | undefined;
    weight_ratio?: string | undefined;
};
