import { parse_duration } from '../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, map, temporal, coins } from '../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../api/transport.js';
import { decodeCosmosBaseQueryPageRequest, decodeCosmosBaseQueryPageResponse } from '../../cosmos/base/query/v1beta1/pagination.js';
import { decodeOsmosisIncentivesGauge } from './gauge.js';
import { decodeOsmosisIncentivesGroup, decodeOsmosisIncentivesGroupsWithGauge } from './group.js';
const SR_LCD_OSMOSIS_INCENTIVES_QUERY = '/osmosis/incentives/v1beta1/';
/**
 * Returns coins that are going to be distributed
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: coins - Coins that have yet to be distributed
 */
export const queryOsmosisIncentivesModuleToDistributeCoins = restful_grpc(() => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'module_to_distribute_coins']);
/**
 * Returns gauges by their respective ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_id - Gague ID being queried
 * @returns a tuple where:
 *   - 0: gauge - Gauge that corresponds to provided gague ID
 */
export const queryOsmosisIncentivesGaugeByID = restful_grpc(sg_id => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'gauge_by_id/' + sg_id]);
/**
 * Returns both upcoming and active gauges
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Upcoming and active gauges
 *   - 1: pagination - Upcoming and active gauges
 */
export const queryOsmosisIncentivesGauges = restful_grpc(g_pagination => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'gauges', {
        pagination: g_pagination,
    }]);
/**
 * Returns active gauges
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Active gagues only
 *   - 1: pagination - Active gagues only
 */
export const queryOsmosisIncentivesActiveGauges = restful_grpc(g_pagination => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'active_gauges', {
        pagination: g_pagination,
    }]);
/**
 * Returns active gauges by denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - Desired denom when querying active gagues
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Active gagues that match denom in query
 *   - 1: pagination - Active gagues that match denom in query
 */
export const queryOsmosisIncentivesActiveGaugesPerDenom = restful_grpc((s_denom, g_pagination) => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'active_gauges_per_denom', {
        denom: s_denom,
        pagination: g_pagination,
    }]);
/**
 * Returns scheduled gauges that have not yet occured
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: data - Gauges whose distribution is upcoming
 *   - 1: pagination - Gauges whose distribution is upcoming
 */
export const queryOsmosisIncentivesUpcomingGauges = restful_grpc(g_pagination => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'upcoming_gauges', {
        pagination: g_pagination,
    }]);
/**
 * Returns scheduled gauges that have not yet occured by denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - Filter for upcoming gagues that match specific denom
 * @param g_pagination - Pagination defines pagination for the request
 * @returns a tuple where:
 *   - 0: upcoming_gauges - Upcoming gagues that match denom in query
 *   - 1: pagination - Upcoming gagues that match denom in query
 */
export const queryOsmosisIncentivesUpcomingGaugesPerDenom = restful_grpc((s_denom, g_pagination) => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'upcoming_gauges_per_denom', {
        denom: s_denom,
        pagination: g_pagination,
    }]);
/**
 * Returns an estimate of the rewards from now until a specified time in the future The querier either provides an address or a set of locks for which they want to find the associated rewards
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner - Address that is being queried for future estimated rewards
 * @param a_lock_ids - Lock IDs included in future reward estimation
 * @param sg_end_epoch - Upper time limit of reward estimation Lower limit is current epoch
 * @returns a tuple where:
 *   - 0: coins - Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 */
export const queryOsmosisIncentivesRewardsEst = restful_grpc((sa_owner, a_lock_ids, sg_end_epoch) => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'rewards_est/' + sa_owner, {
        lock_ids: a_lock_ids,
        end_epoch: sg_end_epoch,
    }]);
/**
 * Returns lockable durations that are valid to distribute incentives for
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: lockable_durations - Time durations that users can lock coins for in order to recieve rewards
 */
export const queryOsmosisIncentivesLockableDurations = restful_grpc(() => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'lockable_durations']);
/**
 * Returns all groups
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: groups - the 'groups' response property
 */
export const queryOsmosisIncentivesAllGroups = restful_grpc(() => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'all_groups']);
/**
 * Returns all group gauges
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: gauges - the 'gauges' response property
 */
export const queryOsmosisIncentivesAllGroupsGauges = restful_grpc(() => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'all_groups_gauges']);
/**
 * Returns all groups with their group gauge
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: groups_with_gauge - the 'groups_with_gauge' response property
 */
export const queryOsmosisIncentivesAllGroupsWithGauge = restful_grpc(() => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'all_groups_with_gauge']);
/**
 * Returns a group given its group gauge ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_id -
 * @returns a tuple where:
 *   - 0: group - the 'group' response property
 */
export const queryOsmosisIncentivesGroupByGroupGaugeID = restful_grpc(sg_id => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'group_by_group_gauge_id/' + sg_id]);
/**
 * Returns the current weight since the the last epoch given a group gauge ID
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_group_gauge_id -
 * @returns a tuple where:
 *   - 0: gauge_weight - the 'gauge_weight' response property
 */
export const queryOsmosisIncentivesCurrentWeightByGroupGaugeID = restful_grpc(sg_group_gauge_id => [SR_LCD_OSMOSIS_INCENTIVES_QUERY + 'current_weight_by_group_gauge_id/' + sg_group_gauge_id]);
/**
 * Encodes a `ModuleToDistributeCoinsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesModuleToDistributeCoinsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ModuleToDistributeCoinsResponse` protobuf message:
 * @param a_coins - `coins`: Coins that have yet to be distributed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesModuleToDistributeCoinsResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `GaugeByIDRequest` protobuf message:
 * @param sg_id - `id`: Gague ID being queried
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGaugeByIDRequest = (sg_id) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .o;
/**
 * Encodes a `GaugeByIDResponse` protobuf message:
 * @param g_gauge - `gauge`: Gauge that corresponds to provided gague ID
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGaugeByIDResponse = (atu8_gauge) => Protobuf() // ...
    .b(atu8_gauge) // Gauge gauge = 1
    .o;
/**
 * Encodes a `GaugesRequest` protobuf message:
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGaugesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `GaugesResponse` protobuf message:
 * @param a_datas - `data`: Upcoming and active gauges
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGaugesResponse = (a_datas, atu8_pagination) => Protobuf() // ...
    .B(a_datas) // Gauge[] data = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `ActiveGaugesRequest` protobuf message:
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesActiveGaugesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `ActiveGaugesResponse` protobuf message:
 * @param a_datas - `data`: Active gagues only
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesActiveGaugesResponse = (a_datas, atu8_pagination) => Protobuf() // ...
    .B(a_datas) // Gauge[] data = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `ActiveGaugesPerDenomRequest` protobuf message:
 * @param s_denom - `denom`: Desired denom when querying active gagues
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesActiveGaugesPerDenomRequest = (s_denom, atu8_pagination) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `ActiveGaugesPerDenomResponse` protobuf message:
 * @param a_datas - `data`: Active gagues that match denom in query
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesActiveGaugesPerDenomResponse = (a_datas, atu8_pagination) => Protobuf() // ...
    .B(a_datas) // Gauge[] data = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `UpcomingGaugesRequest` protobuf message:
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesUpcomingGaugesRequest = (atu8_pagination) => Protobuf() // ...
    .b(atu8_pagination) // PageRequest pagination = 1
    .o;
/**
 * Encodes a `UpcomingGaugesResponse` protobuf message:
 * @param a_datas - `data`: Gauges whose distribution is upcoming
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesUpcomingGaugesResponse = (a_datas, atu8_pagination) => Protobuf() // ...
    .B(a_datas) // Gauge[] data = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `UpcomingGaugesPerDenomRequest` protobuf message:
 * @param s_denom - `denom`: Filter for upcoming gagues that match specific denom
 * @param g_pagination - `pagination`: Pagination defines pagination for the request
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesUpcomingGaugesPerDenomRequest = (s_denom, atu8_pagination) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .b(atu8_pagination) // PageRequest pagination = 2
    .o;
/**
 * Encodes a `UpcomingGaugesPerDenomResponse` protobuf message:
 * @param a_upcoming_gauges - `upcoming_gauges`: Upcoming gagues that match denom in query
 * @param g_pagination - `pagination`: Pagination defines pagination for the response
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesUpcomingGaugesPerDenomResponse = (a_upcoming_gauges, atu8_pagination) => Protobuf() // ...
    .B(a_upcoming_gauges) // Gauge[] upcoming_gauges = 1
    .b(atu8_pagination) // PageResponse pagination = 2
    .o;
/**
 * Encodes a `RewardsEstRequest` protobuf message:
 * @param sa_owner - `owner`: Address that is being queried for future estimated rewards
 * @param a_lock_ids - `lock_ids`: Lock IDs included in future reward estimation
 * @param sg_end_epoch - `end_epoch`: Upper time limit of reward estimation Lower limit is current epoch
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesRewardsEstRequest = (sa_owner, a_lock_ids, sg_end_epoch) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .G(a_lock_ids) // uint64[] lock_ids = 2
    .g(sg_end_epoch) // int32 end_epoch = 3
    .o;
/**
 * Encodes a `RewardsEstResponse` protobuf message:
 * @param a_coins - `coins`: Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesRewardsEstResponse = (a_coins) => Protobuf() // ...
    .B(coins(a_coins)) // Coin[] coins = 1
    .o;
/**
 * Encodes a `QueryLockableDurationsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryLockableDurationsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryLockableDurationsResponse` protobuf message:
 * @param a_lockable_durations - `lockable_durations`: Time durations that users can lock coins for in order to recieve rewards
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryLockableDurationsResponse = (a_lockable_durations) => Protobuf() // ...
    .B(map(a_lockable_durations, temporal)) // Duration[] lockable_durations = 1
    .o;
/**
 * Encodes a `QueryAllGroupsRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryAllGroupsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryAllGroupsResponse` protobuf message:
 * @param a_groups - `groups`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryAllGroupsResponse = (a_groups) => Protobuf() // ...
    .B(a_groups) // Group[] groups = 1
    .o;
/**
 * Encodes a `QueryAllGroupsGaugesRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryAllGroupsGaugesRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryAllGroupsGaugesResponse` protobuf message:
 * @param a_gauges - `gauges`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryAllGroupsGaugesResponse = (a_gauges) => Protobuf() // ...
    .B(a_gauges) // Gauge[] gauges = 1
    .o;
/**
 * Encodes a `QueryAllGroupsWithGaugeRequest` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryAllGroupsWithGaugeRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryAllGroupsWithGaugeResponse` protobuf message:
 * @param a_groups_with_gauges - `groups_with_gauge`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryAllGroupsWithGaugeResponse = (a_groups_with_gauges) => Protobuf() // ...
    .B(a_groups_with_gauges) // GroupsWithGauge[] groups_with_gauge = 1
    .o;
/**
 * Encodes a `QueryGroupByGroupGaugeIDRequest` protobuf message:
 * @param sg_id - `id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryGroupByGroupGaugeIDRequest = (sg_id) => Protobuf() // ...
    .g(sg_id) // uint64 id = 1
    .o;
/**
 * Encodes a `QueryGroupByGroupGaugeIDResponse` protobuf message:
 * @param g_group - `group`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryGroupByGroupGaugeIDResponse = (atu8_group) => Protobuf() // ...
    .b(atu8_group) // Group group = 1
    .o;
/**
 * Encodes a `QueryCurrentWeightByGroupGaugeIDRequest` protobuf message:
 * @param sg_group_gauge_id - `group_gauge_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest = (sg_group_gauge_id) => Protobuf() // ...
    .g(sg_group_gauge_id) // uint64 group_gauge_id = 1
    .o;
/**
 * Encodes a `QueryCurrentWeightByGroupGaugeIDResponse` protobuf message:
 * @param a_gauge_weights - `gauge_weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse = (a_gauge_weights) => Protobuf() // ...
    .B(a_gauge_weights) // GaugeWeight[] gauge_weight = 1
    .o;
/**
 * Encodes a `GaugeWeight` protobuf message:
 * @param sg_gauge_id - `gauge_id`:
 * @param s_weight_ratio - `weight_ratio`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisIncentivesGaugeWeight = (sg_gauge_id, s_weight_ratio) => Protobuf() // ...
    .g(sg_gauge_id) // uint64 gauge_id = 1
    .s(s_weight_ratio) // string weight_ratio = 2
    .o;
/**
 * Decodes a protobuf ModuleToDistributeCoinsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesModuleToDistributeCoinsRequest}
 */
export const decodeOsmosisIncentivesModuleToDistributeCoinsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ModuleToDistributeCoins message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesModuleToDistributeCoinsResponse}
 */
export const decodeOsmosisIncentivesModuleToDistributeCoinsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf GaugeByIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugeByIDRequest}
 */
export const decodeOsmosisIncentivesGaugeByIDRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf GaugeByID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugeByIDResponse}
 */
export const decodeOsmosisIncentivesGaugeByIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisIncentivesGauge]);
/**
 * Decodes a protobuf GaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugesRequest}
 */
export const decodeOsmosisIncentivesGaugesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf Gauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugesResponse}
 */
export const decodeOsmosisIncentivesGaugesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeOsmosisIncentivesGauge, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf ActiveGaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesRequest}
 */
export const decodeOsmosisIncentivesActiveGaugesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf ActiveGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesResponse}
 */
export const decodeOsmosisIncentivesActiveGaugesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeOsmosisIncentivesGauge, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf ActiveGaugesPerDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesPerDenomRequest}
 */
export const decodeOsmosisIncentivesActiveGaugesPerDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf ActiveGaugesPerDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesActiveGaugesPerDenomResponse}
 */
export const decodeOsmosisIncentivesActiveGaugesPerDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeOsmosisIncentivesGauge, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf UpcomingGaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesRequest}
 */
export const decodeOsmosisIncentivesUpcomingGaugesRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf UpcomingGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesResponse}
 */
export const decodeOsmosisIncentivesUpcomingGaugesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeOsmosisIncentivesGauge, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf UpcomingGaugesPerDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesPerDenomRequest}
 */
export const decodeOsmosisIncentivesUpcomingGaugesPerDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBaseQueryPageRequest]);
/**
 * Decodes a protobuf UpcomingGaugesPerDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesUpcomingGaugesPerDenomResponse}
 */
export const decodeOsmosisIncentivesUpcomingGaugesPerDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1], [decodeOsmosisIncentivesGauge, decodeCosmosBaseQueryPageResponse]);
/**
 * Decodes a protobuf RewardsEstRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesRewardsEstRequest}
 */
export const decodeOsmosisIncentivesRewardsEstRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 2, 3]);
/**
 * Decodes a protobuf RewardsEst message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesRewardsEstResponse}
 */
export const decodeOsmosisIncentivesRewardsEstResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf QueryLockableDurationsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryLockableDurationsRequest}
 */
export const decodeOsmosisIncentivesQueryLockableDurationsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryLockableDurations message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryLockableDurationsResponse}
 */
export const decodeOsmosisIncentivesQueryLockableDurationsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1]], [decode_temporal]);
/**
 * Decodes a protobuf QueryAllGroupsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsRequest}
 */
export const decodeOsmosisIncentivesQueryAllGroupsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryAllGroups message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsResponse}
 */
export const decodeOsmosisIncentivesQueryAllGroupsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisIncentivesGroup]);
/**
 * Decodes a protobuf QueryAllGroupsGaugesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsGaugesRequest}
 */
export const decodeOsmosisIncentivesQueryAllGroupsGaugesRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryAllGroupsGauges message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsGaugesResponse}
 */
export const decodeOsmosisIncentivesQueryAllGroupsGaugesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisIncentivesGauge]);
/**
 * Decodes a protobuf QueryAllGroupsWithGaugeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsWithGaugeRequest}
 */
export const decodeOsmosisIncentivesQueryAllGroupsWithGaugeRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryAllGroupsWithGauge message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryAllGroupsWithGaugeResponse}
 */
export const decodeOsmosisIncentivesQueryAllGroupsWithGaugeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisIncentivesGroupsWithGauge]);
/**
 * Decodes a protobuf QueryGroupByGroupGaugeIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDRequest}
 */
export const decodeOsmosisIncentivesQueryGroupByGroupGaugeIDRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryGroupByGroupGaugeID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryGroupByGroupGaugeIDResponse}
 */
export const decodeOsmosisIncentivesQueryGroupByGroupGaugeIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisIncentivesGroup]);
/**
 * Decodes a protobuf QueryCurrentWeightByGroupGaugeIDRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest}
 */
export const decodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryCurrentWeightByGroupGaugeID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse}
 */
export const decodeOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisIncentivesGaugeWeight]);
/**
 * Decodes a protobuf GaugeWeight message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisIncentivesGaugeWeight}
 */
export const decodeOsmosisIncentivesGaugeWeight = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Destructures the fields of a {@link OsmosisIncentivesModuleToDistributeCoinsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisIncentivesModuleToDistributeCoinsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_MODULE_TO_DISTRIBUTE_COINS_REQUEST = '/osmosis.incentives.ModuleToDistributeCoinsRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesModuleToDistributeCoinsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins - Coins that have yet to be distributed
 */
export const destructOsmosisIncentivesModuleToDistributeCoinsResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_MODULE_TO_DISTRIBUTE_COINS_RESPONSE = '/osmosis.incentives.ModuleToDistributeCoinsResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugeByIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id - Gague ID being queried
 */
export const destructOsmosisIncentivesGaugeByIDRequest = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGE_BY_I_D_REQUEST = '/osmosis.incentives.GaugeByIDRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugeByIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge - Gauge that corresponds to provided gague ID
 */
export const destructOsmosisIncentivesGaugeByIDResponse = (g_struct) => [g_struct.gauge];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGE_BY_I_D_RESPONSE = '/osmosis.incentives.GaugeByIDResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines pagination for the request
 */
export const destructOsmosisIncentivesGaugesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGES_REQUEST = '/osmosis.incentives.GaugesRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Upcoming and active gauges
 *   - 1: pagination - Pagination defines pagination for the response
 */
export const destructOsmosisIncentivesGaugesResponse = (g_struct) => [g_struct.data, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGES_RESPONSE = '/osmosis.incentives.GaugesResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines pagination for the request
 */
export const destructOsmosisIncentivesActiveGaugesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_REQUEST = '/osmosis.incentives.ActiveGaugesRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Active gagues only
 *   - 1: pagination - Pagination defines pagination for the response
 */
export const destructOsmosisIncentivesActiveGaugesResponse = (g_struct) => [g_struct.data, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_RESPONSE = '/osmosis.incentives.ActiveGaugesResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesPerDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - Desired denom when querying active gagues
 *   - 1: pagination - Pagination defines pagination for the request
 */
export const destructOsmosisIncentivesActiveGaugesPerDenomRequest = (g_struct) => [g_struct.denom, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_PER_DENOM_REQUEST = '/osmosis.incentives.ActiveGaugesPerDenomRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesActiveGaugesPerDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Active gagues that match denom in query
 *   - 1: pagination - Pagination defines pagination for the response
 */
export const destructOsmosisIncentivesActiveGaugesPerDenomResponse = (g_struct) => [g_struct.data, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_ACTIVE_GAUGES_PER_DENOM_RESPONSE = '/osmosis.incentives.ActiveGaugesPerDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pagination - Pagination defines pagination for the request
 */
export const destructOsmosisIncentivesUpcomingGaugesRequest = (g_struct) => [g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_REQUEST = '/osmosis.incentives.UpcomingGaugesRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Gauges whose distribution is upcoming
 *   - 1: pagination - Pagination defines pagination for the response
 */
export const destructOsmosisIncentivesUpcomingGaugesResponse = (g_struct) => [g_struct.data, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_RESPONSE = '/osmosis.incentives.UpcomingGaugesResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesPerDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - Filter for upcoming gagues that match specific denom
 *   - 1: pagination - Pagination defines pagination for the request
 */
export const destructOsmosisIncentivesUpcomingGaugesPerDenomRequest = (g_struct) => [g_struct.denom, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_PER_DENOM_REQUEST = '/osmosis.incentives.UpcomingGaugesPerDenomRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesUpcomingGaugesPerDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: upcoming_gauges - Upcoming gagues that match denom in query
 *   - 1: pagination - Pagination defines pagination for the response
 */
export const destructOsmosisIncentivesUpcomingGaugesPerDenomResponse = (g_struct) => [g_struct.upcoming_gauges, g_struct.pagination];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_UPCOMING_GAUGES_PER_DENOM_RESPONSE = '/osmosis.incentives.UpcomingGaugesPerDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesRewardsEstRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner - Address that is being queried for future estimated rewards
 *   - 1: lock_ids - Lock IDs included in future reward estimation
 *   - 2: end_epoch - Upper time limit of reward estimation Lower limit is current epoch
 */
export const destructOsmosisIncentivesRewardsEstRequest = (g_struct) => [g_struct.owner, g_struct.lock_ids, g_struct.end_epoch];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_REWARDS_EST_REQUEST = '/osmosis.incentives.RewardsEstRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesRewardsEstResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: coins - Estimated coin rewards that will be recieved at provided address from specified locks between current time and end epoch
 */
export const destructOsmosisIncentivesRewardsEstResponse = (g_struct) => [g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_REWARDS_EST_RESPONSE = '/osmosis.incentives.RewardsEstResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryLockableDurationsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisIncentivesQueryLockableDurationsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_LOCKABLE_DURATIONS_REQUEST = '/osmosis.incentives.QueryLockableDurationsRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryLockableDurationsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lockable_durations - Time durations that users can lock coins for in order to recieve rewards
 */
export const destructOsmosisIncentivesQueryLockableDurationsResponse = (g_struct) => [map(g_struct.lockable_durations, parse_duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_LOCKABLE_DURATIONS_RESPONSE = '/osmosis.incentives.QueryLockableDurationsResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisIncentivesQueryAllGroupsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_REQUEST = '/osmosis.incentives.QueryAllGroupsRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups -
 */
export const destructOsmosisIncentivesQueryAllGroupsResponse = (g_struct) => [g_struct.groups];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_RESPONSE = '/osmosis.incentives.QueryAllGroupsResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsGaugesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisIncentivesQueryAllGroupsGaugesRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_GAUGES_REQUEST = '/osmosis.incentives.QueryAllGroupsGaugesRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsGaugesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauges -
 */
export const destructOsmosisIncentivesQueryAllGroupsGaugesResponse = (g_struct) => [g_struct.gauges];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_GAUGES_RESPONSE = '/osmosis.incentives.QueryAllGroupsGaugesResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsWithGaugeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisIncentivesQueryAllGroupsWithGaugeRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_WITH_GAUGE_REQUEST = '/osmosis.incentives.QueryAllGroupsWithGaugeRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryAllGroupsWithGaugeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: groups_with_gauge -
 */
export const destructOsmosisIncentivesQueryAllGroupsWithGaugeResponse = (g_struct) => [g_struct.groups_with_gauge];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_ALL_GROUPS_WITH_GAUGE_RESPONSE = '/osmosis.incentives.QueryAllGroupsWithGaugeResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryGroupByGroupGaugeIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 */
export const destructOsmosisIncentivesQueryGroupByGroupGaugeIDRequest = (g_struct) => [g_struct.id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_GROUP_BY_GROUP_GAUGE_I_D_REQUEST = '/osmosis.incentives.QueryGroupByGroupGaugeIDRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryGroupByGroupGaugeIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group -
 */
export const destructOsmosisIncentivesQueryGroupByGroupGaugeIDResponse = (g_struct) => [g_struct.group];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_GROUP_BY_GROUP_GAUGE_I_D_RESPONSE = '/osmosis.incentives.QueryGroupByGroupGaugeIDResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: group_gauge_id -
 */
export const destructOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDRequest = (g_struct) => [g_struct.group_gauge_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_CURRENT_WEIGHT_BY_GROUP_GAUGE_I_D_REQUEST = '/osmosis.incentives.QueryCurrentWeightByGroupGaugeIDRequest';
/**
 * Destructures the fields of a {@link OsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge_weight -
 */
export const destructOsmosisIncentivesQueryCurrentWeightByGroupGaugeIDResponse = (g_struct) => [g_struct.gauge_weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_QUERY_CURRENT_WEIGHT_BY_GROUP_GAUGE_I_D_RESPONSE = '/osmosis.incentives.QueryCurrentWeightByGroupGaugeIDResponse';
/**
 * Destructures the fields of a {@link OsmosisIncentivesGaugeWeight} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gauge_id -
 *   - 1: weight_ratio -
 */
export const destructOsmosisIncentivesGaugeWeight = (g_struct) => [g_struct.gauge_id, g_struct.weight_ratio];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_INCENTIVES_GAUGE_WEIGHT = '/osmosis.incentives.GaugeWeight';
//# sourceMappingURL=query.js.map