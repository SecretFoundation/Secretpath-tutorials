import { parse_duration } from '../../../api/json.js';
import { decode_protobuf, decode_coin, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal, coins } from '../../../api/protobuf-writer.js';
import { decodeOsmosisLockupPeriodLock } from './lock.js';
/**
 * Encodes a `MsgLockTokens` protobuf message:
 * @param sa_owner - `owner`:
 * @param xt_duration - `duration`:
 * @param a_coins - `coins`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgLockTokens = (sa_owner, xt_duration, a_coins) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .b(temporal(xt_duration)) // Duration duration = 2
    .B(coins(a_coins)) // Coin[] coins = 3
    .o;
/**
 * Encodes a `MsgLockTokensResponse` protobuf message:
 * @param sg_ID - `ID`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgLockTokensResponse = (sg_ID) => Protobuf() // ...
    .g(sg_ID) // uint64 ID = 1
    .o;
/**
 * Encodes a `MsgBeginUnlockingAll` protobuf message:
 * @param sa_owner - `owner`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgBeginUnlockingAll = (sa_owner) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .o;
/**
 * Encodes a `MsgBeginUnlockingAllResponse` protobuf message:
 * @param a_unlocks - `unlocks`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgBeginUnlockingAllResponse = (a_unlocks) => Protobuf() // ...
    .B(a_unlocks) // PeriodLock[] unlocks = 1
    .o;
/**
 * Encodes a `MsgBeginUnlocking` protobuf message:
 * @param sa_owner - `owner`:
 * @param sg_ID - `ID`:
 * @param a_coins - `coins`: Amount of unlocking coins. Unlock all if not set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgBeginUnlocking = (sa_owner, sg_ID, a_coins) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_ID) // uint64 ID = 2
    .B(coins(a_coins)) // Coin[] coins = 3
    .o;
/**
 * Encodes a `MsgBeginUnlockingResponse` protobuf message:
 * @param b_success - `success`:
 * @param sg_unlockingLockID - `unlockingLockID`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgBeginUnlockingResponse = (b_success, sg_unlockingLockID) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .g(sg_unlockingLockID) // uint64 unlockingLockID = 2
    .o;
/**
 * Encodes a `MsgExtendLockup` protobuf message: extends the existing lockup's duration. The new duration is longer than the original.
 * @param sa_owner - `owner`:
 * @param sg_ID - `ID`:
 * @param xt_duration - `duration`: to be set. fails if lower than the current duration, or is unlocking
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgExtendLockup = (sa_owner, sg_ID, xt_duration) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_ID) // uint64 ID = 2
    .b(temporal(xt_duration)) // Duration duration = 3
    .o;
/**
 * Encodes a `MsgExtendLockupResponse` protobuf message:
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgExtendLockupResponse = (b_success) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .o;
/**
 * Encodes a `MsgForceUnlock` protobuf message: unlocks locks immediately for addresses registered via governance.
 * @param sa_owner - `owner`:
 * @param sg_ID - `ID`:
 * @param a_coins - `coins`: Amount of unlocking coins. Unlock all if not set.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgForceUnlock = (sa_owner, sg_ID, a_coins) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_ID) // uint64 ID = 2
    .B(coins(a_coins)) // Coin[] coins = 3
    .o;
/**
 * Encodes a `MsgForceUnlockResponse` protobuf message:
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgForceUnlockResponse = (b_success) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .o;
/**
 * Encodes a `MsgSetRewardReceiverAddress` protobuf message:
 * @param sa_owner - `owner`:
 * @param sg_lockID - `lockID`:
 * @param sa_reward_receiver - `reward_receiver`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgSetRewardReceiverAddress = (sa_owner, sg_lockID, sa_reward_receiver) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .g(sg_lockID) // uint64 lockID = 2
    .s(sa_reward_receiver) // string reward_receiver = 3
    .o;
/**
 * Encodes a `MsgSetRewardReceiverAddressResponse` protobuf message:
 * @param b_success - `success`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisLockupMsgSetRewardReceiverAddressResponse = (b_success) => Protobuf() // ...
    .v(b_success) // boolean success = 1
    .o;
/**
 * Decodes a protobuf LockTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgLockTokens}
 */
export const decodeOsmosisLockupMsgLockTokens = (atu8_payload) => decode_protobuf(atu8_payload, [5, [3, 1], 0], [0, decode_temporal, decode_coin]);
/**
 * Decodes a protobuf LockTokens message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgLockTokensResponse}
 */
export const decodeOsmosisLockupMsgLockTokensResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf BeginUnlockingAll message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgBeginUnlockingAll}
 */
export const decodeOsmosisLockupMsgBeginUnlockingAll = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf BeginUnlockingAll message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgBeginUnlockingAllResponse}
 */
export const decodeOsmosisLockupMsgBeginUnlockingAllResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisLockupPeriodLock]);
/**
 * Decodes a protobuf BeginUnlocking message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgBeginUnlocking}
 */
export const decodeOsmosisLockupMsgBeginUnlocking = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf BeginUnlocking message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgBeginUnlockingResponse}
 */
export const decodeOsmosisLockupMsgBeginUnlockingResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3]);
/**
 * Decodes a protobuf ExtendLockup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgExtendLockup}
 */
export const decodeOsmosisLockupMsgExtendLockup = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, [3, 1]], [0, 0, decode_temporal]);
/**
 * Decodes a protobuf ExtendLockup message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgExtendLockupResponse}
 */
export const decodeOsmosisLockupMsgExtendLockupResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ForceUnlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgForceUnlock}
 */
export const decodeOsmosisLockupMsgForceUnlock = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 0], [0, 0, decode_coin]);
/**
 * Decodes a protobuf ForceUnlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgForceUnlockResponse}
 */
export const decodeOsmosisLockupMsgForceUnlockResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf SetRewardReceiverAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgSetRewardReceiverAddress}
 */
export const decodeOsmosisLockupMsgSetRewardReceiverAddress = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 5]);
/**
 * Decodes a protobuf SetRewardReceiverAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisLockupMsgSetRewardReceiverAddressResponse}
 */
export const decodeOsmosisLockupMsgSetRewardReceiverAddressResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link OsmosisLockupMsgLockTokens} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: duration -
 *   - 2: coins -
 */
export const destructOsmosisLockupMsgLockTokens = (g_struct) => [g_struct.owner, parse_duration(g_struct.duration), g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_LOCK_TOKENS = '/osmosis.lockup.MsgLockTokens';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgLockTokensResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ID -
 */
export const destructOsmosisLockupMsgLockTokensResponse = (g_struct) => [g_struct.ID];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_LOCK_TOKENS_RESPONSE = '/osmosis.lockup.MsgLockTokensResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgBeginUnlockingAll} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 */
export const destructOsmosisLockupMsgBeginUnlockingAll = (g_struct) => [g_struct.owner];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_BEGIN_UNLOCKING_ALL = '/osmosis.lockup.MsgBeginUnlockingAll';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgBeginUnlockingAllResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: unlocks -
 */
export const destructOsmosisLockupMsgBeginUnlockingAllResponse = (g_struct) => [g_struct.unlocks];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_BEGIN_UNLOCKING_ALL_RESPONSE = '/osmosis.lockup.MsgBeginUnlockingAllResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgBeginUnlocking} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: ID -
 *   - 2: coins - Amount of unlocking coins. Unlock all if not set.
 */
export const destructOsmosisLockupMsgBeginUnlocking = (g_struct) => [g_struct.owner, g_struct.ID, g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_BEGIN_UNLOCKING = '/osmosis.lockup.MsgBeginUnlocking';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgBeginUnlockingResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 *   - 1: unlockingLockID -
 */
export const destructOsmosisLockupMsgBeginUnlockingResponse = (g_struct) => [g_struct.success, g_struct.unlockingLockID];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_BEGIN_UNLOCKING_RESPONSE = '/osmosis.lockup.MsgBeginUnlockingResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgExtendLockup} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: ID -
 *   - 2: duration - to be set. fails if lower than the current duration, or is unlocking
 */
export const destructOsmosisLockupMsgExtendLockup = (g_struct) => [g_struct.owner, g_struct.ID, parse_duration(g_struct.duration)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_EXTEND_LOCKUP = '/osmosis.lockup.MsgExtendLockup';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgExtendLockupResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export const destructOsmosisLockupMsgExtendLockupResponse = (g_struct) => [g_struct.success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_EXTEND_LOCKUP_RESPONSE = '/osmosis.lockup.MsgExtendLockupResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgForceUnlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: ID -
 *   - 2: coins - Amount of unlocking coins. Unlock all if not set.
 */
export const destructOsmosisLockupMsgForceUnlock = (g_struct) => [g_struct.owner, g_struct.ID, g_struct.coins];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_FORCE_UNLOCK = '/osmosis.lockup.MsgForceUnlock';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgForceUnlockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export const destructOsmosisLockupMsgForceUnlockResponse = (g_struct) => [g_struct.success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_FORCE_UNLOCK_RESPONSE = '/osmosis.lockup.MsgForceUnlockResponse';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgSetRewardReceiverAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: lockID -
 *   - 2: reward_receiver -
 */
export const destructOsmosisLockupMsgSetRewardReceiverAddress = (g_struct) => [g_struct.owner, g_struct.lockID, g_struct.reward_receiver];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_SET_REWARD_RECEIVER_ADDRESS = '/osmosis.lockup.MsgSetRewardReceiverAddress';
/**
 * Destructures the fields of a {@link OsmosisLockupMsgSetRewardReceiverAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: success -
 */
export const destructOsmosisLockupMsgSetRewardReceiverAddressResponse = (g_struct) => [g_struct.success];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_LOCKUP_MSG_SET_REWARD_RECEIVER_ADDRESS_RESPONSE = '/osmosis.lockup.MsgSetRewardReceiverAddressResponse';
//# sourceMappingURL=tx.js.map