import type { WeakInt64Str, WeakAccountAddr, CwInt64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisMintMinter = Encoded<'/osmosis.mint.v1beta1.Minter'>;
export type EncodedOsmosisMintWeightedAddress = Encoded<'/osmosis.mint.v1beta1.WeightedAddress'>;
export type EncodedOsmosisMintDistributionProportions = Encoded<'/osmosis.mint.v1beta1.DistributionProportions'>;
export type EncodedOsmosisMintParams = Encoded<'/osmosis.mint.v1beta1.Params'>;
/**
 * Encodes a `Minter` protobuf message: represents the minting state.
 * @param s_epoch_provisions - `epoch_provisions`: represent rewards for the current epoch.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintMinter: (s_epoch_provisions?: Opt<string>) => EncodedOsmosisMintMinter;
/**
 * Encodes a `WeightedAddress` protobuf message: represents an address with a weight assigned to it. The weight is used to determine the proportion of the total minted tokens to be minted to the address.
 * @param sa_address - `address`:
 * @param s_weight - `weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintWeightedAddress: (sa_address?: Opt<WeakAccountAddr>, s_weight?: Opt<string>) => EncodedOsmosisMintWeightedAddress;
/**
 * Encodes a `DistributionProportions` protobuf message: defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 * @param s_staking - `staking`: defines the proportion of the minted mint_denom that is to be allocated as staking rewards.
 * @param s_pool_incentives - `pool_incentives`: defines the proportion of the minted mint_denom that is to be allocated as pool incentives.
 * @param s_developer_rewards - `developer_rewards`: defines the proportion of the minted mint_denom that is to be allocated to developer rewards address.
 * @param s_community_pool - `community_pool`: defines the proportion of the minted mint_denom that is to be allocated to the community pool.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintDistributionProportions: (s_staking?: Opt<string>, s_pool_incentives?: Opt<string>, s_developer_rewards?: Opt<string>, s_community_pool?: Opt<string>) => EncodedOsmosisMintDistributionProportions;
/**
 * Encodes a `Params` protobuf message: holds parameters for the x/mint module.
 * @param s_mint_denom - `mint_denom`: the denom of the coin to mint.
 * @param s_genesis_epoch_provisions - `genesis_epoch_provisions`: epoch provisions from the first epoch.
 * @param s_epoch_identifier - `epoch_identifier`: mint epoch identifier e.g. (day, week).
 * @param sg_reduction_period_in_epochs - `reduction_period_in_epochs`: the number of epochs it takes to reduce the rewards.
 * @param s_reduction_factor - `reduction_factor`: the reduction multiplier to execute at the end of each period set by reduction_period_in_epochs.
 * @param g_distribution_proportions - `distribution_proportions`: defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 * @param a_weighted_developer_rewards_receivers - `weighted_developer_rewards_receivers`: the address to receive developer rewards with weights assignedt to each address. The final amount that each address receives is: epoch_provisions * distribution_proportions.developer_rewards * Address's Weight.
 * @param sg_minting_rewards_distribution_start_epoch - `minting_rewards_distribution_start_epoch`: start epoch to distribute minting rewards
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisMintParams: (s_mint_denom?: Opt<string>, s_genesis_epoch_provisions?: Opt<string>, s_epoch_identifier?: Opt<string>, sg_reduction_period_in_epochs?: Opt<WeakInt64Str>, s_reduction_factor?: Opt<string>, atu8_distribution_proportions?: Opt<Encoded<'/osmosis.mint.v1beta1.DistributionProportions'>>, a_weighted_developer_rewards_receivers?: Opt<Encoded<'/osmosis.mint.v1beta1.WeightedAddress'>[]>, sg_minting_rewards_distribution_start_epoch?: Opt<WeakInt64Str>) => EncodedOsmosisMintParams;
/**
 * A decoded protobuf Minter message
 *
 * Alias for: epoch_provisions - represent rewards for the current epoch.
 */
export type DecodedOsmosisMintMinter = [
    s_epoch_provisions?: string
];
/**
 * Decodes a protobuf Minter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintMinter}
 */
export declare const decodeOsmosisMintMinter: (atu8_payload: Uint8Array) => DecodedOsmosisMintMinter;
/**
 * A decoded protobuf WeightedAddress message
 *
 * Tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export type DecodedOsmosisMintWeightedAddress = [
    sa_address?: CwAccountAddr,
    s_weight?: string
];
/**
 * Decodes a protobuf WeightedAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintWeightedAddress}
 */
export declare const decodeOsmosisMintWeightedAddress: (atu8_payload: Uint8Array) => DecodedOsmosisMintWeightedAddress;
/**
 * A decoded protobuf DistributionProportions message
 *
 * Tuple where:
 *   - 0: staking - defines the proportion of the minted mint_denom that is to be allocated as staking rewards.
 *   - 1: pool_incentives - defines the proportion of the minted mint_denom that is to be allocated as pool incentives.
 *   - 2: developer_rewards - defines the proportion of the minted mint_denom that is to be allocated to developer rewards address.
 *   - 3: community_pool - defines the proportion of the minted mint_denom that is to be allocated to the community pool.
 */
export type DecodedOsmosisMintDistributionProportions = [
    s_staking?: string,
    s_pool_incentives?: string,
    s_developer_rewards?: string,
    s_community_pool?: string
];
/**
 * Decodes a protobuf DistributionProportions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintDistributionProportions}
 */
export declare const decodeOsmosisMintDistributionProportions: (atu8_payload: Uint8Array) => DecodedOsmosisMintDistributionProportions;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: mint_denom - the denom of the coin to mint.
 *   - 1: genesis_epoch_provisions - epoch provisions from the first epoch.
 *   - 2: epoch_identifier - mint epoch identifier e.g. (day, week).
 *   - 3: reduction_period_in_epochs - the number of epochs it takes to reduce the rewards.
 *   - 4: reduction_factor - the reduction multiplier to execute at the end of each period set by reduction_period_in_epochs.
 *   - 5: distribution_proportions - defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 *   - 6: weighted_developer_rewards_receivers - the address to receive developer rewards with weights assignedt to each address. The final amount that each address receives is: epoch_provisions * distribution_proportions.developer_rewards * Address's Weight.
 *   - 7: minting_rewards_distribution_start_epoch - start epoch to distribute minting rewards
 */
export type DecodedOsmosisMintParams = [
    s_mint_denom?: string,
    s_genesis_epoch_provisions?: string,
    s_epoch_identifier?: string,
    sg_reduction_period_in_epochs?: CwInt64,
    s_reduction_factor?: string,
    a_distribution_proportions?: DecodedOsmosisMintDistributionProportions,
    a_weighted_developer_rewards_receivers?: DecodedOsmosisMintWeightedAddress[],
    sg_minting_rewards_distribution_start_epoch?: CwInt64
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintParams}
 */
export declare const decodeOsmosisMintParams: (atu8_payload: Uint8Array) => DecodedOsmosisMintParams;
/**
 * Destructures the fields of a {@link OsmosisMintParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mint_denom - the denom of the coin to mint.
 *   - 1: genesis_epoch_provisions - epoch provisions from the first epoch.
 *   - 2: epoch_identifier - mint epoch identifier e.g. (day, week).
 *   - 3: reduction_period_in_epochs - the number of epochs it takes to reduce the rewards.
 *   - 4: reduction_factor - the reduction multiplier to execute at the end of each period set by reduction_period_in_epochs.
 *   - 5: distribution_proportions - defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 *   - 6: weighted_developer_rewards_receivers - the address to receive developer rewards with weights assignedt to each address. The final amount that each address receives is: epoch_provisions * distribution_proportions.developer_rewards * Address's Weight.
 *   - 7: minting_rewards_distribution_start_epoch - start epoch to distribute minting rewards
 */
export declare const destructOsmosisMintParams: (g_struct: OsmosisMintParams) => [mint_denom?: string, genesis_epoch_provisions?: string, epoch_identifier?: string, reduction_period_in_epochs?: CwInt64, reduction_factor?: string, distribution_proportions?: OsmosisMintDistributionProportions, weighted_developer_rewards_receivers?: OsmosisMintWeightedAddress[], minting_rewards_distribution_start_epoch?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_PARAMS = "/osmosis.mint.v1beta1.Params";
/**
 * JSON serialization of `osmosis.mint.v1beta1.Params` - holds parameters for the x/mint module.
 */
export type OsmosisMintParams = {
    mint_denom?: string | undefined;
    genesis_epoch_provisions?: string | undefined;
    epoch_identifier?: string | undefined;
    reduction_period_in_epochs?: CwInt64 | undefined;
    reduction_factor?: string | undefined;
    distribution_proportions?: OsmosisMintDistributionProportions | undefined;
    weighted_developer_rewards_receivers?: OsmosisMintWeightedAddress[] | undefined;
    minting_rewards_distribution_start_epoch?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisMintDistributionProportions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: staking - defines the proportion of the minted mint_denom that is to be allocated as staking rewards.
 *   - 1: pool_incentives - defines the proportion of the minted mint_denom that is to be allocated as pool incentives.
 *   - 2: developer_rewards - defines the proportion of the minted mint_denom that is to be allocated to developer rewards address.
 *   - 3: community_pool - defines the proportion of the minted mint_denom that is to be allocated to the community pool.
 */
export declare const destructOsmosisMintDistributionProportions: (g_struct: OsmosisMintDistributionProportions) => [staking?: string, pool_incentives?: string, developer_rewards?: string, community_pool?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_DISTRIBUTION_PROPORTIONS = "/osmosis.mint.v1beta1.DistributionProportions";
/**
 * JSON serialization of `osmosis.mint.v1beta1.DistributionProportions` - defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 */
export type OsmosisMintDistributionProportions = {
    staking?: string | undefined;
    pool_incentives?: string | undefined;
    developer_rewards?: string | undefined;
    community_pool?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisMintWeightedAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export declare const destructOsmosisMintWeightedAddress: (g_struct: OsmosisMintWeightedAddress) => [address?: CwAccountAddr, weight?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_WEIGHTED_ADDRESS = "/osmosis.mint.v1beta1.WeightedAddress";
/**
 * JSON serialization of `osmosis.mint.v1beta1.WeightedAddress` - represents an address with a weight assigned to it. The weight is used to determine the proportion of the total minted tokens to be minted to the address.
 */
export type OsmosisMintWeightedAddress = {
    address?: CwAccountAddr | undefined;
    weight?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisMintMinter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch_provisions - represent rewards for the current epoch.
 */
export declare const destructOsmosisMintMinter: (g_struct: OsmosisMintMinter) => [epoch_provisions?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_MINT_MINTER = "/osmosis.mint.v1beta1.Minter";
/**
 * JSON serialization of `osmosis.mint.v1beta1.Minter` - represents the minting state.
 */
export type OsmosisMintMinter = {
    epoch_provisions?: string | undefined;
};
