import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Minter` protobuf message: represents the minting state.
 * @param s_epoch_provisions - `epoch_provisions`: represent rewards for the current epoch.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintMinter = (s_epoch_provisions) => Protobuf() // ...
    .s(s_epoch_provisions) // string epoch_provisions = 1
    .o;
/**
 * Encodes a `WeightedAddress` protobuf message: represents an address with a weight assigned to it. The weight is used to determine the proportion of the total minted tokens to be minted to the address.
 * @param sa_address - `address`:
 * @param s_weight - `weight`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintWeightedAddress = (sa_address, s_weight) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .s(s_weight) // string weight = 2
    .o;
/**
 * Encodes a `DistributionProportions` protobuf message: defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 * @param s_staking - `staking`: defines the proportion of the minted mint_denom that is to be allocated as staking rewards.
 * @param s_pool_incentives - `pool_incentives`: defines the proportion of the minted mint_denom that is to be allocated as pool incentives.
 * @param s_developer_rewards - `developer_rewards`: defines the proportion of the minted mint_denom that is to be allocated to developer rewards address.
 * @param s_community_pool - `community_pool`: defines the proportion of the minted mint_denom that is to be allocated to the community pool.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintDistributionProportions = (s_staking, s_pool_incentives, s_developer_rewards, s_community_pool) => Protobuf() // ...
    .s(s_staking) // string staking = 1
    .s(s_pool_incentives) // string pool_incentives = 2
    .s(s_developer_rewards) // string developer_rewards = 3
    .s(s_community_pool) // string community_pool = 4
    .o;
/**
 * Encodes a `Params` protobuf message: holds parameters for the x/mint module.
 * @param s_mint_denom - `mint_denom`: the denom of the coin to mint.
 * @param s_genesis_epoch_provisions - `genesis_epoch_provisions`: epoch provisions from the first epoch.
 * @param s_epoch_identifier - `epoch_identifier`: mint epoch identifier e.g. (day, week).
 * @param sg_reduction_period_in_epochs - `reduction_period_in_epochs`: the number of epochs it takes to reduce the rewards.
 * @param s_reduction_factor - `reduction_factor`: the reduction multiplier to execute at the end of each period set by reduction_period_in_epochs.
 * @param g_distribution_proportions - `distribution_proportions`: defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 * @param a_weighted_developer_rewards_receivers - `weighted_developer_rewards_receivers`: the address to receive developer rewards with weights assignedt to each address. The final amount that each address receives is: epoch_provisions * distribution_proportions.developer_rewards * Address's Weight.
 * @param sg_minting_rewards_distribution_start_epoch - `minting_rewards_distribution_start_epoch`: start epoch to distribute minting rewards
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintParams = (s_mint_denom, s_genesis_epoch_provisions, s_epoch_identifier, sg_reduction_period_in_epochs, s_reduction_factor, atu8_distribution_proportions, a_weighted_developer_rewards_receivers, sg_minting_rewards_distribution_start_epoch) => Protobuf() // ...
    .s(s_mint_denom) // string mint_denom = 1
    .s(s_genesis_epoch_provisions) // string genesis_epoch_provisions = 2
    .s(s_epoch_identifier) // string epoch_identifier = 3
    .g(sg_reduction_period_in_epochs) // int32 reduction_period_in_epochs = 4
    .s(s_reduction_factor) // string reduction_factor = 5
    .b(atu8_distribution_proportions) // DistributionProportions distribution_proportions = 6
    .B(a_weighted_developer_rewards_receivers) // WeightedAddress[] weighted_developer_rewards_receivers = 7
    .g(sg_minting_rewards_distribution_start_epoch) // int32 minting_rewards_distribution_start_epoch = 8
    .o;
/**
 * Decodes a protobuf Minter message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintMinter}
 */
export const decodeOsmosisMintMinter = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf WeightedAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintWeightedAddress}
 */
export const decodeOsmosisMintWeightedAddress = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf DistributionProportions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintDistributionProportions}
 */
export const decodeOsmosisMintDistributionProportions = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintParams}
 */
export const decodeOsmosisMintParams = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 3, 5, 1, 0, 3], [0, 0, 0, 0, 0, decodeOsmosisMintDistributionProportions, decodeOsmosisMintWeightedAddress]);
/**
 * Destructures the fields of a {@link OsmosisMintParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mint_denom - the denom of the coin to mint.
 *   - 1: genesis_epoch_provisions - epoch provisions from the first epoch.
 *   - 2: epoch_identifier - mint epoch identifier e.g. (day, week).
 *   - 3: reduction_period_in_epochs - the number of epochs it takes to reduce the rewards.
 *   - 4: reduction_factor - the reduction multiplier to execute at the end of each period set by reduction_period_in_epochs.
 *   - 5: distribution_proportions - defines the distribution proportions of the minted denom. In other words, defines which stakeholders will receive the minted denoms and how much.
 *   - 6: weighted_developer_rewards_receivers - the address to receive developer rewards with weights assignedt to each address. The final amount that each address receives is: epoch_provisions * distribution_proportions.developer_rewards * Address's Weight.
 *   - 7: minting_rewards_distribution_start_epoch - start epoch to distribute minting rewards
 */
export const destructOsmosisMintParams = (g_struct) => [g_struct.mint_denom, g_struct.genesis_epoch_provisions, g_struct.epoch_identifier, g_struct.reduction_period_in_epochs, g_struct.reduction_factor, g_struct.distribution_proportions, g_struct.weighted_developer_rewards_receivers, g_struct.minting_rewards_distribution_start_epoch];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_PARAMS = '/osmosis.mint.v1beta1.Params';
/**
 * Destructures the fields of a {@link OsmosisMintDistributionProportions} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: staking - defines the proportion of the minted mint_denom that is to be allocated as staking rewards.
 *   - 1: pool_incentives - defines the proportion of the minted mint_denom that is to be allocated as pool incentives.
 *   - 2: developer_rewards - defines the proportion of the minted mint_denom that is to be allocated to developer rewards address.
 *   - 3: community_pool - defines the proportion of the minted mint_denom that is to be allocated to the community pool.
 */
export const destructOsmosisMintDistributionProportions = (g_struct) => [g_struct.staking, g_struct.pool_incentives, g_struct.developer_rewards, g_struct.community_pool];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_DISTRIBUTION_PROPORTIONS = '/osmosis.mint.v1beta1.DistributionProportions';
/**
 * Destructures the fields of a {@link OsmosisMintWeightedAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 1: weight -
 */
export const destructOsmosisMintWeightedAddress = (g_struct) => [g_struct.address, g_struct.weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_WEIGHTED_ADDRESS = '/osmosis.mint.v1beta1.WeightedAddress';
/**
 * Destructures the fields of a {@link OsmosisMintMinter} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch_provisions - represent rewards for the current epoch.
 */
export const destructOsmosisMintMinter = (g_struct) => [g_struct.epoch_provisions];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_MINTER = '/osmosis.mint.v1beta1.Minter';
//# sourceMappingURL=mint.js.map