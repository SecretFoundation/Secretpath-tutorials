import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeOsmosisMintParams } from './mint.js';
const SR_LCD_OSMOSIS_MINT_QUERY = '/osmosis/mint/v1beta1/';
/**
 * Returns the total set of minting parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryOsmosisMintParams = restful_grpc(() => [SR_LCD_OSMOSIS_MINT_QUERY + 'params']);
/**
 * Returns the current minting epoch provisions value.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: epoch_provisions - the current minting per epoch provisions value.
 */
export const queryOsmosisMintEpochProvisions = restful_grpc(() => [SR_LCD_OSMOSIS_MINT_QUERY + 'epoch_provisions']);
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryEpochProvisionsRequest` protobuf message: the request type for the Query/EpochProvisions RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintQueryEpochProvisionsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryEpochProvisionsResponse` protobuf message: the response type for the Query/EpochProvisions RPC method.
 * @param atu8_epoch_provisions - `epoch_provisions`: the current minting per epoch provisions value.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisMintQueryEpochProvisionsResponse = (atu8_epoch_provisions) => Protobuf() // ...
    .b(atu8_epoch_provisions) // bytes epoch_provisions = 1
    .o;
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryParamsRequest}
 */
export const decodeOsmosisMintQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryParamsResponse}
 */
export const decodeOsmosisMintQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisMintParams]);
/**
 * Decodes a protobuf QueryEpochProvisionsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryEpochProvisionsRequest}
 */
export const decodeOsmosisMintQueryEpochProvisionsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryEpochProvisions message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisMintQueryEpochProvisionsResponse}
 */
export const decodeOsmosisMintQueryEpochProvisionsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link OsmosisMintQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisMintQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_PARAMS_REQUEST = '/osmosis.mint.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link OsmosisMintQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructOsmosisMintQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_PARAMS_RESPONSE = '/osmosis.mint.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link OsmosisMintQueryEpochProvisionsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisMintQueryEpochProvisionsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_EPOCH_PROVISIONS_REQUEST = '/osmosis.mint.v1beta1.QueryEpochProvisionsRequest';
/**
 * Destructures the fields of a {@link OsmosisMintQueryEpochProvisionsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch_provisions - the current minting per epoch provisions value.
 */
export const destructOsmosisMintQueryEpochProvisionsResponse = (g_struct) => [safe_base64_to_bytes(g_struct.epoch_provisions)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_MINT_QUERY_EPOCH_PROVISIONS_RESPONSE = '/osmosis.mint.v1beta1.QueryEpochProvisionsResponse';
//# sourceMappingURL=query.js.map