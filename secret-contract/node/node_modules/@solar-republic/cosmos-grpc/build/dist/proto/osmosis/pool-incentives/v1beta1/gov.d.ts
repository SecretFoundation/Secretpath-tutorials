import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisPoolincentivesDistrRecord, DecodedOsmosisPoolincentivesDistrRecord } from './incentives.js';
export type AnyOsmosisPoolincentivesReplacePoolIncentivesProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type AnyOsmosisPoolincentivesUpdatePoolIncentivesProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedOsmosisPoolincentivesReplacePoolIncentivesProposal = Encoded<'/osmosis.poolincentives.v1beta1.ReplacePoolIncentivesProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedOsmosisPoolincentivesUpdatePoolIncentivesProposal = Encoded<'/osmosis.poolincentives.v1beta1.UpdatePoolIncentivesProposal' | 'cosmos.gov.v1beta1.Content'>;
/**
 * Encodes a `ReplacePoolIncentivesProposal` protobuf message wrapped in the `Any` container: a gov Content type for updating the pool incentives. If a ReplacePoolIncentivesProposal passes, the proposal’s records override the existing DistrRecords set in the module. Each record has a specified gauge id and weight, and the incentives are distributed to each gauge according to weight/total_weight. The incentives are put in the fee pool and it is allocated to gauges and community pool by the DistrRecords configuration. Note that gaugeId=0 represents the community pool.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_records - `records`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyReplacePoolIncentivesProposal: (s_title?: Opt<string>, s_description?: Opt<string>, a_records?: Opt<Encoded<'/osmosis.poolincentives.v1beta1.DistrRecord'>[]>) => AnyOsmosisPoolincentivesReplacePoolIncentivesProposal;
/**
 * Encodes a `UpdatePoolIncentivesProposal` protobuf message wrapped in the `Any` container: For example: if the existing DistrRecords were: [(Gauge 0, 5), (Gauge 1, 6), (Gauge 2, 6)] An UpdatePoolIncentivesProposal includes [(Gauge 1, 0), (Gauge 2, 4), (Gauge 3, 10)] This would delete Gauge 1, Edit Gauge 2, and Add Gauge 3 The result DistrRecords in state would be: [(Gauge 0, 5), (Gauge 2, 4), (Gauge 3, 10)]
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_records - `records`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anyUpdatePoolIncentivesProposal: (s_title?: Opt<string>, s_description?: Opt<string>, a_records?: Opt<Encoded<'/osmosis.poolincentives.v1beta1.DistrRecord'>[]>) => AnyOsmosisPoolincentivesUpdatePoolIncentivesProposal;
/**
 * Encodes a `ReplacePoolIncentivesProposal` protobuf message: a gov Content type for updating the pool incentives. If a ReplacePoolIncentivesProposal passes, the proposal’s records override the existing DistrRecords set in the module. Each record has a specified gauge id and weight, and the incentives are distributed to each gauge according to weight/total_weight. The incentives are put in the fee pool and it is allocated to gauges and community pool by the DistrRecords configuration. Note that gaugeId=0 represents the community pool.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_records - `records`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisPoolincentivesReplacePoolIncentivesProposal: (s_title?: Opt<string>, s_description?: Opt<string>, a_records?: Opt<Encoded<'/osmosis.poolincentives.v1beta1.DistrRecord'>[]>) => EncodedOsmosisPoolincentivesReplacePoolIncentivesProposal;
/**
 * Encodes a `UpdatePoolIncentivesProposal` protobuf message: For example: if the existing DistrRecords were: [(Gauge 0, 5), (Gauge 1, 6), (Gauge 2, 6)] An UpdatePoolIncentivesProposal includes [(Gauge 1, 0), (Gauge 2, 4), (Gauge 3, 10)] This would delete Gauge 1, Edit Gauge 2, and Add Gauge 3 The result DistrRecords in state would be: [(Gauge 0, 5), (Gauge 2, 4), (Gauge 3, 10)]
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_records - `records`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisPoolincentivesUpdatePoolIncentivesProposal: (s_title?: Opt<string>, s_description?: Opt<string>, a_records?: Opt<Encoded<'/osmosis.poolincentives.v1beta1.DistrRecord'>[]>) => EncodedOsmosisPoolincentivesUpdatePoolIncentivesProposal;
/**
 * A decoded protobuf ReplacePoolIncentivesProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: records -
 */
export type DecodedOsmosisPoolincentivesReplacePoolIncentivesProposal = [
    s_title?: string,
    s_description?: string,
    a_records?: DecodedOsmosisPoolincentivesDistrRecord[]
];
/**
 * Decodes a protobuf ReplacePoolIncentivesProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesReplacePoolIncentivesProposal}
 */
export declare const decodeOsmosisPoolincentivesReplacePoolIncentivesProposal: (atu8_payload: Uint8Array) => DecodedOsmosisPoolincentivesReplacePoolIncentivesProposal;
/**
 * A decoded protobuf UpdatePoolIncentivesProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: records -
 */
export type DecodedOsmosisPoolincentivesUpdatePoolIncentivesProposal = [
    s_title?: string,
    s_description?: string,
    a_records?: DecodedOsmosisPoolincentivesDistrRecord[]
];
/**
 * Decodes a protobuf UpdatePoolIncentivesProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesUpdatePoolIncentivesProposal}
 */
export declare const decodeOsmosisPoolincentivesUpdatePoolIncentivesProposal: (atu8_payload: Uint8Array) => DecodedOsmosisPoolincentivesUpdatePoolIncentivesProposal;
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesReplacePoolIncentivesProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: records -
 */
export declare const destructOsmosisPoolincentivesReplacePoolIncentivesProposal: (g_struct: OsmosisPoolincentivesReplacePoolIncentivesProposal) => [title?: string, description?: string, records?: OsmosisPoolincentivesDistrRecord[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_REPLACE_POOL_INCENTIVES_PROPOSAL = "/osmosis.poolincentives.v1beta1.ReplacePoolIncentivesProposal";
/**
 * JSON serialization of `osmosis.poolincentives.v1beta1.ReplacePoolIncentivesProposal` - a gov Content type for updating the pool incentives. If a ReplacePoolIncentivesProposal passes, the proposal’s records override the existing DistrRecords set in the module. Each record has a specified gauge id and weight, and the incentives are distributed to each gauge according to weight/total_weight. The incentives are put in the fee pool and it is allocated to gauges and community pool by the DistrRecords configuration. Note that gaugeId=0 represents the community pool.
 */
export type OsmosisPoolincentivesReplacePoolIncentivesProposal = {
    title?: string | undefined;
    description?: string | undefined;
    records?: OsmosisPoolincentivesDistrRecord[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesUpdatePoolIncentivesProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: records -
 */
export declare const destructOsmosisPoolincentivesUpdatePoolIncentivesProposal: (g_struct: OsmosisPoolincentivesUpdatePoolIncentivesProposal) => [title?: string, description?: string, records?: OsmosisPoolincentivesDistrRecord[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_UPDATE_POOL_INCENTIVES_PROPOSAL = "/osmosis.poolincentives.v1beta1.UpdatePoolIncentivesProposal";
/**
 * JSON serialization of `osmosis.poolincentives.v1beta1.UpdatePoolIncentivesProposal` - For example: if the existing DistrRecords were: [(Gauge 0, 5), (Gauge 1, 6), (Gauge 2, 6)] An UpdatePoolIncentivesProposal includes [(Gauge 1, 0), (Gauge 2, 4), (Gauge 3, 10)] This would delete Gauge 1, Edit Gauge 2, and Add Gauge 3 The result DistrRecords in state would be: [(Gauge 0, 5), (Gauge 2, 4), (Gauge 3, 10)]
 */
export type OsmosisPoolincentivesUpdatePoolIncentivesProposal = {
    title?: string | undefined;
    description?: string | undefined;
    records?: OsmosisPoolincentivesDistrRecord[] | undefined;
};
