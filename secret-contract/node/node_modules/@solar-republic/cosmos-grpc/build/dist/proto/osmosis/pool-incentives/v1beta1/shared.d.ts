import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisPoolincentivesMigrationRecords = Encoded<'/osmosis.poolincentives.v1beta1.MigrationRecords'>;
export type EncodedOsmosisPoolincentivesBalancerToConcentratedPoolLink = Encoded<'/osmosis.poolincentives.v1beta1.BalancerToConcentratedPoolLink'>;
/**
 * Encodes a `MigrationRecords` protobuf message: contains all the links between balancer and concentrated pools. This is copied over from the gamm proto file in order to circumnavigate the circular dependency between the two modules.
 * @param a_balancer_to_concentrated_pool_links - `balancer_to_concentrated_pool_links`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisPoolincentivesMigrationRecords: (a_balancer_to_concentrated_pool_links?: Opt<Encoded<'/osmosis.poolincentives.v1beta1.BalancerToConcentratedPoolLink'>[]>) => EncodedOsmosisPoolincentivesMigrationRecords;
/**
 * Encodes a `BalancerToConcentratedPoolLink` protobuf message: defines a single link between a single balancer pool and a single concentrated liquidity pool. This link is used to allow a balancer pool to migrate to a single canonical full range concentrated liquidity pool position A balancer pool can be linked to a maximum of one cl pool, and a cl pool can be linked to a maximum of one balancer pool. This is copied over from the gamm proto file in order to circumnavigate the circular dependency between the two modules.
 * @param sg_balancer_pool_id - `balancer_pool_id`:
 * @param sg_cl_pool_id - `cl_pool_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisPoolincentivesBalancerToConcentratedPoolLink: (sg_balancer_pool_id?: Opt<WeakUint64Str>, sg_cl_pool_id?: Opt<WeakUint64Str>) => EncodedOsmosisPoolincentivesBalancerToConcentratedPoolLink;
/**
 * A decoded protobuf MigrationRecords message
 *
 * Alias for: balancer_to_concentrated_pool_links -
 */
export type DecodedOsmosisPoolincentivesMigrationRecords = [
    a_balancer_to_concentrated_pool_links?: DecodedOsmosisPoolincentivesBalancerToConcentratedPoolLink[]
];
/**
 * Decodes a protobuf MigrationRecords message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesMigrationRecords}
 */
export declare const decodeOsmosisPoolincentivesMigrationRecords: (atu8_payload: Uint8Array) => DecodedOsmosisPoolincentivesMigrationRecords;
/**
 * A decoded protobuf BalancerToConcentratedPoolLink message
 *
 * Tuple where:
 *   - 0: balancer_pool_id -
 *   - 1: cl_pool_id -
 */
export type DecodedOsmosisPoolincentivesBalancerToConcentratedPoolLink = [
    sg_balancer_pool_id?: CwUint64,
    sg_cl_pool_id?: CwUint64
];
/**
 * Decodes a protobuf BalancerToConcentratedPoolLink message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolincentivesBalancerToConcentratedPoolLink}
 */
export declare const decodeOsmosisPoolincentivesBalancerToConcentratedPoolLink: (atu8_payload: Uint8Array) => DecodedOsmosisPoolincentivesBalancerToConcentratedPoolLink;
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesMigrationRecords} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: balancer_to_concentrated_pool_links -
 */
export declare const destructOsmosisPoolincentivesMigrationRecords: (g_struct: OsmosisPoolincentivesMigrationRecords) => [balancer_to_concentrated_pool_links?: OsmosisPoolincentivesBalancerToConcentratedPoolLink[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_MIGRATION_RECORDS = "/osmosis.poolincentives.v1beta1.MigrationRecords";
/**
 * JSON serialization of `osmosis.poolincentives.v1beta1.MigrationRecords` - contains all the links between balancer and concentrated pools. This is copied over from the gamm proto file in order to circumnavigate the circular dependency between the two modules.
 */
export type OsmosisPoolincentivesMigrationRecords = {
    balancer_to_concentrated_pool_links?: OsmosisPoolincentivesBalancerToConcentratedPoolLink[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisPoolincentivesBalancerToConcentratedPoolLink} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: balancer_pool_id -
 *   - 1: cl_pool_id -
 */
export declare const destructOsmosisPoolincentivesBalancerToConcentratedPoolLink: (g_struct: OsmosisPoolincentivesBalancerToConcentratedPoolLink) => [balancer_pool_id?: CwUint64, cl_pool_id?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_POOLINCENTIVES_BALANCER_TO_CONCENTRATED_POOL_LINK = "/osmosis.poolincentives.v1beta1.BalancerToConcentratedPoolLink";
/**
 * JSON serialization of `osmosis.poolincentives.v1beta1.BalancerToConcentratedPoolLink` - defines a single link between a single balancer pool and a single concentrated liquidity pool. This link is used to allow a balancer pool to migrate to a single canonical full range concentrated liquidity pool position A balancer pool can be linked to a maximum of one cl pool, and a cl pool can be linked to a maximum of one balancer pool. This is copied over from the gamm proto file in order to circumnavigate the circular dependency between the two modules.
 */
export type OsmosisPoolincentivesBalancerToConcentratedPoolLink = {
    balancer_pool_id?: CwUint64 | undefined;
    cl_pool_id?: CwUint64 | undefined;
};
