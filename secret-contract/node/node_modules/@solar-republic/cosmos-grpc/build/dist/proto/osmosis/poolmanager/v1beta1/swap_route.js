import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `SwapAmountInRoute` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param s_token_out_denom - `token_out_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerSwapAmountInRoute = (sg_pool_id, s_token_out_denom) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(s_token_out_denom) // string token_out_denom = 2
    .o;
/**
 * Encodes a `SwapAmountOutRoute` protobuf message:
 * @param sg_pool_id - `pool_id`:
 * @param s_token_in_denom - `token_in_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerSwapAmountOutRoute = (sg_pool_id, s_token_in_denom) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .s(s_token_in_denom) // string token_in_denom = 2
    .o;
/**
 * Encodes a `SwapAmountInSplitRoute` protobuf message:
 * @param a_pools - `pools`:
 * @param s_token_in_amount - `token_in_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerSwapAmountInSplitRoute = (a_pools, s_token_in_amount) => Protobuf() // ...
    .B(a_pools) // SwapAmountInRoute[] pools = 1
    .s(s_token_in_amount) // string token_in_amount = 2
    .o;
/**
 * Encodes a `SwapAmountOutSplitRoute` protobuf message:
 * @param a_pools - `pools`:
 * @param s_token_out_amount - `token_out_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerSwapAmountOutSplitRoute = (a_pools, s_token_out_amount) => Protobuf() // ...
    .B(a_pools) // SwapAmountOutRoute[] pools = 1
    .s(s_token_out_amount) // string token_out_amount = 2
    .o;
/**
 * Decodes a protobuf SwapAmountInRoute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerSwapAmountInRoute}
 */
export const decodeOsmosisPoolmanagerSwapAmountInRoute = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf SwapAmountOutRoute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerSwapAmountOutRoute}
 */
export const decodeOsmosisPoolmanagerSwapAmountOutRoute = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf SwapAmountInSplitRoute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerSwapAmountInSplitRoute}
 */
export const decodeOsmosisPoolmanagerSwapAmountInSplitRoute = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5], [decodeOsmosisPoolmanagerSwapAmountInRoute]);
/**
 * Decodes a protobuf SwapAmountOutSplitRoute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerSwapAmountOutSplitRoute}
 */
export const decodeOsmosisPoolmanagerSwapAmountOutSplitRoute = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5], [decodeOsmosisPoolmanagerSwapAmountOutRoute]);
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerSwapAmountInRoute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: token_out_denom -
 */
export const destructOsmosisPoolmanagerSwapAmountInRoute = (g_struct) => [g_struct.pool_id, g_struct.token_out_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_SWAP_AMOUNT_IN_ROUTE = '/osmosis.poolmanager.v1beta1.SwapAmountInRoute';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerSwapAmountOutRoute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id -
 *   - 1: token_in_denom -
 */
export const destructOsmosisPoolmanagerSwapAmountOutRoute = (g_struct) => [g_struct.pool_id, g_struct.token_in_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_SWAP_AMOUNT_OUT_ROUTE = '/osmosis.poolmanager.v1beta1.SwapAmountOutRoute';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerSwapAmountInSplitRoute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pools -
 *   - 1: token_in_amount -
 */
export const destructOsmosisPoolmanagerSwapAmountInSplitRoute = (g_struct) => [g_struct.pools, g_struct.token_in_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_SWAP_AMOUNT_IN_SPLIT_ROUTE = '/osmosis.poolmanager.v1beta1.SwapAmountInSplitRoute';
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerSwapAmountOutSplitRoute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pools -
 *   - 1: token_out_amount -
 */
export const destructOsmosisPoolmanagerSwapAmountOutSplitRoute = (g_struct) => [g_struct.pools, g_struct.token_out_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_SWAP_AMOUNT_OUT_SPLIT_ROUTE = '/osmosis.poolmanager.v1beta1.SwapAmountOutSplitRoute';
//# sourceMappingURL=swap_route.js.map