import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `TrackedVolume` protobuf message:
 * @param a_amounts - `amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisPoolmanagerTrackedVolume = (a_amounts) => Protobuf() // ...
    .B(coins(a_amounts)) // Coin[] amount = 1
    .o;
/**
 * Decodes a protobuf TrackedVolume message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisPoolmanagerTrackedVolume}
 */
export const decodeOsmosisPoolmanagerTrackedVolume = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Destructures the fields of a {@link OsmosisPoolmanagerTrackedVolume} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: amount -
 */
export const destructOsmosisPoolmanagerTrackedVolume = (g_struct) => [g_struct.amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_POOLMANAGER_TRACKED_VOLUME = '/osmosis.poolmanager.v1beta1.TrackedVolume';
//# sourceMappingURL=tracked_volume.js.map