import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
import type { OsmosisProtorevParams, DecodedOsmosisProtorevParams } from './params.js';
import type { OsmosisProtorevTokenPairArbRoutes, DecodedOsmosisProtorevTokenPairArbRoutes, OsmosisProtorevBaseDenom, DecodedOsmosisProtorevBaseDenom, OsmosisProtorevPoolWeights, DecodedOsmosisProtorevPoolWeights, OsmosisProtorevInfoByPoolType, DecodedOsmosisProtorevInfoByPoolType } from './protorev.js';
export type EncodedOsmosisProtorevGenesisState = Encoded<'/osmosis.protorev.v1beta1.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the protorev module's genesis state.
 * @param g_params - `params`: Parameters for the protorev module.
 * @param a_token_pair_arb_routes - `token_pair_arb_routes`: Token pair arb routes for the protorev module (hot routes).
 * @param a_base_denoms - `base_denoms`: The base denominations being used to create cyclic arbitrage routes via the highest liquidity method.
 * @param g_pool_weights - `pool_weights`: The pool weights that are being used to calculate the weight (compute cost) of each route. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 * @param sg_days_since_module_genesis - `days_since_module_genesis`: The number of days since module genesis.
 * @param a_developer_fees - `developer_fees`: The fees the developer account has accumulated over time.
 * @param sg_latest_block_height - `latest_block_height`: The latest block height that the module has processed.
 * @param sa_developer - `developer_address`: The developer account address of the module.
 * @param sg_max_pool_points_per_block - `max_pool_points_per_block`: Max pool points per block i.e. the maximum compute time (in ms) that protorev can use per block.
 * @param sg_max_pool_points_per_tx - `max_pool_points_per_tx`: Max pool points per tx i.e. the maximum compute time (in ms) that protorev can use per tx.
 * @param sg_point_count_for_block - `point_count_for_block`: The number of pool points that have been consumed in the current block.
 * @param a_profits - `profits`: All of the profits that have been accumulated by the module.
 * @param g_info_by_pool_type - `info_by_pool_type`: Information that is used to estimate execution time / gas consumption of a swap on a given pool type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevGenesisState: (atu8_params?: Opt<Encoded<'/osmosis.protorev.v1beta1.Params'>>, a_token_pair_arb_routes?: Opt<Encoded<'/osmosis.protorev.v1beta1.TokenPairArbRoutes'>[]>, a_base_denoms?: Opt<Encoded<'/osmosis.protorev.v1beta1.BaseDenom'>[]>, atu8_pool_weights?: Opt<Encoded<'/osmosis.protorev.v1beta1.PoolWeights'>>, sg_days_since_module_genesis?: Opt<WeakUint64Str>, a_developer_fees?: Opt<SlimCoin[]>, sg_latest_block_height?: Opt<WeakUint64Str>, sa_developer?: Opt<WeakAccountAddr>, sg_max_pool_points_per_block?: Opt<WeakUint64Str>, sg_max_pool_points_per_tx?: Opt<WeakUint64Str>, sg_point_count_for_block?: Opt<WeakUint64Str>, a_profits?: Opt<SlimCoin[]>, atu8_info_by_pool_type?: Opt<Encoded<'/osmosis.protorev.v1beta1.InfoByPoolType'>>) => EncodedOsmosisProtorevGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params - Parameters for the protorev module.
 *   - 1: token_pair_arb_routes - Token pair arb routes for the protorev module (hot routes).
 *   - 2: base_denoms - The base denominations being used to create cyclic arbitrage routes via the highest liquidity method.
 *   - 3: pool_weights - The pool weights that are being used to calculate the weight (compute cost) of each route. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 *   - 4: days_since_module_genesis - The number of days since module genesis.
 *   - 5: developer_fees - The fees the developer account has accumulated over time.
 *   - 6: latest_block_height - The latest block height that the module has processed.
 *   - 7: developer_address - The developer account address of the module.
 *   - 8: max_pool_points_per_block - Max pool points per block i.e. the maximum compute time (in ms) that protorev can use per block.
 *   - 9: max_pool_points_per_tx - Max pool points per tx i.e. the maximum compute time (in ms) that protorev can use per tx.
 *   - 10: point_count_for_block - The number of pool points that have been consumed in the current block.
 *   - 11: profits - All of the profits that have been accumulated by the module.
 *   - 12: info_by_pool_type - Information that is used to estimate execution time / gas consumption of a swap on a given pool type.
 */
export type DecodedOsmosisProtorevGenesisState = [
    a_params?: DecodedOsmosisProtorevParams,
    a_token_pair_arb_routes?: DecodedOsmosisProtorevTokenPairArbRoutes[],
    a_base_denoms?: DecodedOsmosisProtorevBaseDenom[],
    a_pool_weights?: DecodedOsmosisProtorevPoolWeights,
    sg_days_since_module_genesis?: CwUint64,
    a_developer_fees?: [
        string,
        string
    ][],
    sg_latest_block_height?: CwUint64,
    sa_developer?: CwAccountAddr,
    sg_max_pool_points_per_block?: CwUint64,
    sg_max_pool_points_per_tx?: CwUint64,
    sg_point_count_for_block?: CwUint64,
    a_profits?: [
        string,
        string
    ][],
    a_info_by_pool_type?: DecodedOsmosisProtorevInfoByPoolType
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevGenesisState}
 */
export declare const decodeOsmosisProtorevGenesisState: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevGenesisState;
/**
 * Destructures the fields of a {@link OsmosisProtorevGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - Parameters for the protorev module.
 *   - 1: token_pair_arb_routes - Token pair arb routes for the protorev module (hot routes).
 *   - 2: base_denoms - The base denominations being used to create cyclic arbitrage routes via the highest liquidity method.
 *   - 3: pool_weights - The pool weights that are being used to calculate the weight (compute cost) of each route. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 *   - 4: days_since_module_genesis - The number of days since module genesis.
 *   - 5: developer_fees - The fees the developer account has accumulated over time.
 *   - 6: latest_block_height - The latest block height that the module has processed.
 *   - 7: developer_address - The developer account address of the module.
 *   - 8: max_pool_points_per_block - Max pool points per block i.e. the maximum compute time (in ms) that protorev can use per block.
 *   - 9: max_pool_points_per_tx - Max pool points per tx i.e. the maximum compute time (in ms) that protorev can use per tx.
 *   - 10: point_count_for_block - The number of pool points that have been consumed in the current block.
 *   - 11: profits - All of the profits that have been accumulated by the module.
 *   - 12: info_by_pool_type - Information that is used to estimate execution time / gas consumption of a swap on a given pool type.
 */
export declare const destructOsmosisProtorevGenesisState: (g_struct: OsmosisProtorevGenesisState) => [params?: OsmosisProtorevParams, token_pair_arb_routes?: OsmosisProtorevTokenPairArbRoutes[], base_denoms?: OsmosisProtorevBaseDenom[], pool_weights?: OsmosisProtorevPoolWeights, days_since_module_genesis?: CwUint64, developer_fees?: CosmosBaseCoin[], latest_block_height?: CwUint64, developer_address?: CwAccountAddr, max_pool_points_per_block?: CwUint64, max_pool_points_per_tx?: CwUint64, point_count_for_block?: CwUint64, profits?: CosmosBaseCoin[], info_by_pool_type?: OsmosisProtorevInfoByPoolType];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_GENESIS_STATE = "/osmosis.protorev.v1beta1.GenesisState";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.GenesisState` - defines the protorev module's genesis state.
 */
export type OsmosisProtorevGenesisState = {
    params?: OsmosisProtorevParams | undefined;
    token_pair_arb_routes?: OsmosisProtorevTokenPairArbRoutes[] | undefined;
    base_denoms?: OsmosisProtorevBaseDenom[] | undefined;
    pool_weights?: OsmosisProtorevPoolWeights | undefined;
    days_since_module_genesis?: CwUint64 | undefined;
    developer_fees?: CosmosBaseCoin[] | undefined;
    latest_block_height?: CwUint64 | undefined;
    developer_address?: CwAccountAddr | undefined;
    max_pool_points_per_block?: CwUint64 | undefined;
    max_pool_points_per_tx?: CwUint64 | undefined;
    point_count_for_block?: CwUint64 | undefined;
    profits?: CosmosBaseCoin[] | undefined;
    info_by_pool_type?: OsmosisProtorevInfoByPoolType | undefined;
};
