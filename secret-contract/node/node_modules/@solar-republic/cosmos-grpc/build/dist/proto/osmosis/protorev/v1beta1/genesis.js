import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { decodeOsmosisProtorevParams } from './params.js';
import { decodeOsmosisProtorevTokenPairArbRoutes, decodeOsmosisProtorevBaseDenom, decodeOsmosisProtorevPoolWeights, decodeOsmosisProtorevInfoByPoolType } from './protorev.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the protorev module's genesis state.
 * @param g_params - `params`: Parameters for the protorev module.
 * @param a_token_pair_arb_routes - `token_pair_arb_routes`: Token pair arb routes for the protorev module (hot routes).
 * @param a_base_denoms - `base_denoms`: The base denominations being used to create cyclic arbitrage routes via the highest liquidity method.
 * @param g_pool_weights - `pool_weights`: The pool weights that are being used to calculate the weight (compute cost) of each route. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 * @param sg_days_since_module_genesis - `days_since_module_genesis`: The number of days since module genesis.
 * @param a_developer_fees - `developer_fees`: The fees the developer account has accumulated over time.
 * @param sg_latest_block_height - `latest_block_height`: The latest block height that the module has processed.
 * @param sa_developer - `developer_address`: The developer account address of the module.
 * @param sg_max_pool_points_per_block - `max_pool_points_per_block`: Max pool points per block i.e. the maximum compute time (in ms) that protorev can use per block.
 * @param sg_max_pool_points_per_tx - `max_pool_points_per_tx`: Max pool points per tx i.e. the maximum compute time (in ms) that protorev can use per tx.
 * @param sg_point_count_for_block - `point_count_for_block`: The number of pool points that have been consumed in the current block.
 * @param a_profits - `profits`: All of the profits that have been accumulated by the module.
 * @param g_info_by_pool_type - `info_by_pool_type`: Information that is used to estimate execution time / gas consumption of a swap on a given pool type.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevGenesisState = (atu8_params, a_token_pair_arb_routes, a_base_denoms, atu8_pool_weights, sg_days_since_module_genesis, a_developer_fees, sg_latest_block_height, sa_developer, sg_max_pool_points_per_block, sg_max_pool_points_per_tx, sg_point_count_for_block, a_profits, atu8_info_by_pool_type) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_token_pair_arb_routes) // TokenPairArbRoutes[] token_pair_arb_routes = 2
    .B(a_base_denoms) // BaseDenom[] base_denoms = 3
    .b(atu8_pool_weights) // PoolWeights pool_weights = 4
    .g(sg_days_since_module_genesis) // uint64 days_since_module_genesis = 5
    .B(coins(a_developer_fees)) // Coin[] developer_fees = 6
    .g(sg_latest_block_height) // uint64 latest_block_height = 7
    .s(sa_developer) // string developer_address = 8
    .g(sg_max_pool_points_per_block) // uint64 max_pool_points_per_block = 9
    .g(sg_max_pool_points_per_tx) // uint64 max_pool_points_per_tx = 10
    .g(sg_point_count_for_block) // uint64 point_count_for_block = 11
    .B(coins(a_profits)) // Coin[] profits = 12
    .b(atu8_info_by_pool_type) // InfoByPoolType info_by_pool_type = 13
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevGenesisState}
 */
export const decodeOsmosisProtorevGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 0, 1, 3, 0, 3, 5, 3, 3, 3, 0, 1], [decodeOsmosisProtorevParams, decodeOsmosisProtorevTokenPairArbRoutes, decodeOsmosisProtorevBaseDenom, decodeOsmosisProtorevPoolWeights, 0, decode_coin, 0, 0, 0, 0, 0, decode_coin, decodeOsmosisProtorevInfoByPoolType]);
/**
 * Destructures the fields of a {@link OsmosisProtorevGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - Parameters for the protorev module.
 *   - 1: token_pair_arb_routes - Token pair arb routes for the protorev module (hot routes).
 *   - 2: base_denoms - The base denominations being used to create cyclic arbitrage routes via the highest liquidity method.
 *   - 3: pool_weights - The pool weights that are being used to calculate the weight (compute cost) of each route. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 *   - 4: days_since_module_genesis - The number of days since module genesis.
 *   - 5: developer_fees - The fees the developer account has accumulated over time.
 *   - 6: latest_block_height - The latest block height that the module has processed.
 *   - 7: developer_address - The developer account address of the module.
 *   - 8: max_pool_points_per_block - Max pool points per block i.e. the maximum compute time (in ms) that protorev can use per block.
 *   - 9: max_pool_points_per_tx - Max pool points per tx i.e. the maximum compute time (in ms) that protorev can use per tx.
 *   - 10: point_count_for_block - The number of pool points that have been consumed in the current block.
 *   - 11: profits - All of the profits that have been accumulated by the module.
 *   - 12: info_by_pool_type - Information that is used to estimate execution time / gas consumption of a swap on a given pool type.
 */
export const destructOsmosisProtorevGenesisState = (g_struct) => [g_struct.params, g_struct.token_pair_arb_routes, g_struct.base_denoms, g_struct.pool_weights, g_struct.days_since_module_genesis, g_struct.developer_fees, g_struct.latest_block_height, g_struct.developer_address, g_struct.max_pool_points_per_block, g_struct.max_pool_points_per_tx, g_struct.point_count_for_block, g_struct.profits, g_struct.info_by_pool_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_GENESIS_STATE = '/osmosis.protorev.v1beta1.GenesisState';
//# sourceMappingURL=genesis.js.map