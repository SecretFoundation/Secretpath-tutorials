import type { Encoded, Opt } from '../../../../api/types.js';
export type AnyOsmosisProtorevSetProtoRevEnabledProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type AnyOsmosisProtorevSetProtoRevAdminAccountProposal = Encoded<'cosmos.gov.v1beta1.Content'>;
export type EncodedOsmosisProtorevSetProtoRevEnabledProposal = Encoded<'/osmosis.protorev.v1beta1.SetProtoRevEnabledProposal' | 'cosmos.gov.v1beta1.Content'>;
export type EncodedOsmosisProtorevSetProtoRevAdminAccountProposal = Encoded<'/osmosis.protorev.v1beta1.SetProtoRevAdminAccountProposal' | 'cosmos.gov.v1beta1.Content'>;
/**
 * Encodes a `SetProtoRevEnabledProposal` protobuf message wrapped in the `Any` container: a gov Content type to update whether the protorev module is enabled
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param b_enabled - `enabled`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anySetProtoRevEnabledProposal: (s_title?: Opt<string>, s_description?: Opt<string>, b_enabled?: Opt<boolean | 0 | 1>) => AnyOsmosisProtorevSetProtoRevEnabledProposal;
/**
 * Encodes a `SetProtoRevAdminAccountProposal` protobuf message wrapped in the `Any` container: a gov Content type to set the admin account that will receive permissions to alter hot routes and set the developer address that will be receiving a share of profits from the module
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param s_account - `account`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export declare const anySetProtoRevAdminAccountProposal: (s_title?: Opt<string>, s_description?: Opt<string>, s_account?: Opt<string>) => AnyOsmosisProtorevSetProtoRevAdminAccountProposal;
/**
 * Encodes a `SetProtoRevEnabledProposal` protobuf message: a gov Content type to update whether the protorev module is enabled
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param b_enabled - `enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevSetProtoRevEnabledProposal: (s_title?: Opt<string>, s_description?: Opt<string>, b_enabled?: Opt<boolean | 0 | 1>) => EncodedOsmosisProtorevSetProtoRevEnabledProposal;
/**
 * Encodes a `SetProtoRevAdminAccountProposal` protobuf message: a gov Content type to set the admin account that will receive permissions to alter hot routes and set the developer address that will be receiving a share of profits from the module
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param s_account - `account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevSetProtoRevAdminAccountProposal: (s_title?: Opt<string>, s_description?: Opt<string>, s_account?: Opt<string>) => EncodedOsmosisProtorevSetProtoRevAdminAccountProposal;
/**
 * A decoded protobuf SetProtoRevEnabledProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: enabled -
 */
export type DecodedOsmosisProtorevSetProtoRevEnabledProposal = [
    s_title?: string,
    s_description?: string,
    b_enabled?: 0 | 1
];
/**
 * Decodes a protobuf SetProtoRevEnabledProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevSetProtoRevEnabledProposal}
 */
export declare const decodeOsmosisProtorevSetProtoRevEnabledProposal: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevSetProtoRevEnabledProposal;
/**
 * A decoded protobuf SetProtoRevAdminAccountProposal message
 *
 * Tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: account -
 */
export type DecodedOsmosisProtorevSetProtoRevAdminAccountProposal = [
    s_title?: string,
    s_description?: string,
    s_account?: string
];
/**
 * Decodes a protobuf SetProtoRevAdminAccountProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevSetProtoRevAdminAccountProposal}
 */
export declare const decodeOsmosisProtorevSetProtoRevAdminAccountProposal: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevSetProtoRevAdminAccountProposal;
/**
 * Destructures the fields of a {@link OsmosisProtorevSetProtoRevEnabledProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: enabled -
 */
export declare const destructOsmosisProtorevSetProtoRevEnabledProposal: (g_struct: OsmosisProtorevSetProtoRevEnabledProposal) => [title?: string, description?: string, enabled?: boolean];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_SET_PROTO_REV_ENABLED_PROPOSAL = "/osmosis.protorev.v1beta1.SetProtoRevEnabledProposal";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.SetProtoRevEnabledProposal` - a gov Content type to update whether the protorev module is enabled
 */
export type OsmosisProtorevSetProtoRevEnabledProposal = {
    title?: string | undefined;
    description?: string | undefined;
    enabled?: boolean | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevSetProtoRevAdminAccountProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: account -
 */
export declare const destructOsmosisProtorevSetProtoRevAdminAccountProposal: (g_struct: OsmosisProtorevSetProtoRevAdminAccountProposal) => [title?: string, description?: string, account?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_SET_PROTO_REV_ADMIN_ACCOUNT_PROPOSAL = "/osmosis.protorev.v1beta1.SetProtoRevAdminAccountProposal";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.SetProtoRevAdminAccountProposal` - a gov Content type to set the admin account that will receive permissions to alter hot routes and set the developer address that will be receiving a share of profits from the module
 */
export type OsmosisProtorevSetProtoRevAdminAccountProposal = {
    title?: string | undefined;
    description?: string | undefined;
    account?: string | undefined;
};
