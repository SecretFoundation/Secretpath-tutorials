/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, any } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `SetProtoRevEnabledProposal` protobuf message wrapped in the `Any` container: a gov Content type to update whether the protorev module is enabled
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param b_enabled - `enabled`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anySetProtoRevEnabledProposal = (s_title, s_description, b_enabled) => any('/osmosis.protorev.v1beta1.SetProtoRevEnabledProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .v(b_enabled) // boolean enabled = 3
    .o);
/**
 * Encodes a `SetProtoRevAdminAccountProposal` protobuf message wrapped in the `Any` container: a gov Content type to set the admin account that will receive permissions to alter hot routes and set the developer address that will be receiving a share of profits from the module
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param s_account - `account`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anySetProtoRevAdminAccountProposal = (s_title, s_description, s_account) => any('/osmosis.protorev.v1beta1.SetProtoRevAdminAccountProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(s_account) // string account = 3
    .o);
/**
 * Encodes a `SetProtoRevEnabledProposal` protobuf message: a gov Content type to update whether the protorev module is enabled
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param b_enabled - `enabled`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevSetProtoRevEnabledProposal = (s_title, s_description, b_enabled) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .v(b_enabled) // boolean enabled = 3
    .o;
/**
 * Encodes a `SetProtoRevAdminAccountProposal` protobuf message: a gov Content type to set the admin account that will receive permissions to alter hot routes and set the developer address that will be receiving a share of profits from the module
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param s_account - `account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevSetProtoRevAdminAccountProposal = (s_title, s_description, s_account) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .s(s_account) // string account = 3
    .o;
/**
 * Decodes a protobuf SetProtoRevEnabledProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevSetProtoRevEnabledProposal}
 */
export const decodeOsmosisProtorevSetProtoRevEnabledProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf SetProtoRevAdminAccountProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevSetProtoRevAdminAccountProposal}
 */
export const decodeOsmosisProtorevSetProtoRevAdminAccountProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Destructures the fields of a {@link OsmosisProtorevSetProtoRevEnabledProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: enabled -
 */
export const destructOsmosisProtorevSetProtoRevEnabledProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_SET_PROTO_REV_ENABLED_PROPOSAL = '/osmosis.protorev.v1beta1.SetProtoRevEnabledProposal';
/**
 * Destructures the fields of a {@link OsmosisProtorevSetProtoRevAdminAccountProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: account -
 */
export const destructOsmosisProtorevSetProtoRevAdminAccountProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_SET_PROTO_REV_ADMIN_ACCOUNT_PROPOSAL = '/osmosis.protorev.v1beta1.SetProtoRevAdminAccountProposal';
//# sourceMappingURL=gov.js.map