import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisProtorevParams = Encoded<'/osmosis.protorev.v1beta1.Params'>;
/**
 * Encodes a `Params` protobuf message: defines the parameters for the module.
 * @param b_enabled - `enabled`: Boolean whether the protorev module is enabled.
 * @param s_admin - `admin`: The admin account (settings manager) of the protorev module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevParams: (b_enabled?: Opt<boolean | 0 | 1>, s_admin?: Opt<string>) => EncodedOsmosisProtorevParams;
/**
 * A decoded protobuf Params message
 *
 * Tuple where:
 *   - 0: enabled - Boolean whether the protorev module is enabled.
 *   - 1: admin - The admin account (settings manager) of the protorev module.
 */
export type DecodedOsmosisProtorevParams = [
    b_enabled?: 0 | 1,
    s_admin?: string
];
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevParams}
 */
export declare const decodeOsmosisProtorevParams: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevParams;
/**
 * Destructures the fields of a {@link OsmosisProtorevParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: enabled - Boolean whether the protorev module is enabled.
 *   - 1: admin - The admin account (settings manager) of the protorev module.
 */
export declare const destructOsmosisProtorevParams: (g_struct: OsmosisProtorevParams) => [enabled?: boolean, admin?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_PARAMS = "/osmosis.protorev.v1beta1.Params";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.Params` - defines the parameters for the module.
 */
export type OsmosisProtorevParams = {
    enabled?: boolean | undefined;
    admin?: string | undefined;
};
