import type { WeakUint64Str, WeakAccountAddr, SlimCoin, CwUint64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { CosmosBaseCoin } from '../../../cosmos/base/v1beta1/coin.js';
export type EncodedOsmosisProtorevTokenPairArbRoutes = Encoded<'/osmosis.protorev.v1beta1.TokenPairArbRoutes'>;
export type EncodedOsmosisProtorevRoute = Encoded<'/osmosis.protorev.v1beta1.Route'>;
export type EncodedOsmosisProtorevTrade = Encoded<'/osmosis.protorev.v1beta1.Trade'>;
export type EncodedOsmosisProtorevRouteStatistics = Encoded<'/osmosis.protorev.v1beta1.RouteStatistics'>;
export type EncodedOsmosisProtorevPoolWeights = Encoded<'/osmosis.protorev.v1beta1.PoolWeights'>;
export type EncodedOsmosisProtorevInfoByPoolType = Encoded<'/osmosis.protorev.v1beta1.InfoByPoolType'>;
export type EncodedOsmosisProtorevStablePoolInfo = Encoded<'/osmosis.protorev.v1beta1.StablePoolInfo'>;
export type EncodedOsmosisProtorevBalancerPoolInfo = Encoded<'/osmosis.protorev.v1beta1.BalancerPoolInfo'>;
export type EncodedOsmosisProtorevConcentratedPoolInfo = Encoded<'/osmosis.protorev.v1beta1.ConcentratedPoolInfo'>;
export type EncodedOsmosisProtorevCosmwasmPoolInfo = Encoded<'/osmosis.protorev.v1beta1.CosmwasmPoolInfo'>;
export type EncodedOsmosisProtorevWeightMap = Encoded<'/osmosis.protorev.v1beta1.WeightMap'>;
export type EncodedOsmosisProtorevBaseDenom = Encoded<'/osmosis.protorev.v1beta1.BaseDenom'>;
/**
 * Encodes a `TokenPairArbRoutes` protobuf message: tracks all of the hot routes for a given pair of tokens
 * @param a_arb_routes - `arb_routes`: Stores all of the possible hot paths for a given pair of tokens
 * @param s_token_in - `token_in`: Token denomination of the first asset
 * @param s_token_out - `token_out`: Token denomination of the second asset
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevTokenPairArbRoutes: (a_arb_routes?: Opt<Encoded<'/osmosis.protorev.v1beta1.Route'>[]>, s_token_in?: Opt<string>, s_token_out?: Opt<string>) => EncodedOsmosisProtorevTokenPairArbRoutes;
/**
 * Encodes a `Route` protobuf message: a hot route for a given pair of tokens
 * @param a_trades - `trades`: The pool IDs that are travered in the directed cyclic graph (traversed left -> right)
 * @param s_step_size - `step_size`: The step size that will be used to find the optimal swap amount in the binary search
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevRoute: (a_trades?: Opt<Encoded<'/osmosis.protorev.v1beta1.Trade'>[]>, s_step_size?: Opt<string>) => EncodedOsmosisProtorevRoute;
/**
 * Encodes a `Trade` protobuf message: a single trade in a route
 * @param sg_pool - `pool`: The pool id of the pool that is traded on
 * @param s_token_in - `token_in`: The denom of the token that is traded
 * @param s_token_out - `token_out`: The denom of the token that is received
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevTrade: (sg_pool?: Opt<WeakUint64Str>, s_token_in?: Opt<string>, s_token_out?: Opt<string>) => EncodedOsmosisProtorevTrade;
/**
 * Encodes a `RouteStatistics` protobuf message: contains the number of trades the module has executed after a swap on a given route and the profits from the trades
 * @param a_profits - `profits`: the total profit from all trades on this route
 * @param s_number_of_trades - `number_of_trades`: the number of trades the module has executed using this route
 * @param a_routes - `route`: the route that was used (pool ids along the arbitrage route)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevRouteStatistics: (a_profits?: Opt<SlimCoin[]>, s_number_of_trades?: Opt<string>, a_routes?: Opt<WeakUint64Str[]>) => EncodedOsmosisProtorevRouteStatistics;
/**
 * Encodes a `PoolWeights` protobuf message: contains the weights of all of the different pool types. This distinction is made and necessary because the execution time ranges significantly between the different pool types. Each weight roughly corresponds to the amount of time (in ms) it takes to execute a swap on that pool type. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 * @param sg_stable_weight - `stable_weight`: The weight of a stableswap pool
 * @param sg_balancer_weight - `balancer_weight`: The weight of a balancer pool
 * @param sg_concentrated_weight - `concentrated_weight`: The weight of a concentrated pool
 * @param sg_cosmwasm_weight - `cosmwasm_weight`: The weight of a cosmwasm pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevPoolWeights: (sg_stable_weight?: Opt<WeakUint64Str>, sg_balancer_weight?: Opt<WeakUint64Str>, sg_concentrated_weight?: Opt<WeakUint64Str>, sg_cosmwasm_weight?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevPoolWeights;
/**
 * Encodes a `InfoByPoolType` protobuf message: contains information pertaining to how expensive (in terms of gas and time) it is to execute a swap on a given pool type. This distinction is made and necessary because the execution time ranges significantly between the different pool types.
 * @param g_stable - `stable`: The stable pool info
 * @param g_balancer - `balancer`: The balancer pool info
 * @param g_concentrated - `concentrated`: The concentrated pool info
 * @param g_cosmwasm - `cosmwasm`: The cosmwasm pool info
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevInfoByPoolType: (atu8_stable?: Opt<Encoded<'/osmosis.protorev.v1beta1.StablePoolInfo'>>, atu8_balancer?: Opt<Encoded<'/osmosis.protorev.v1beta1.BalancerPoolInfo'>>, atu8_concentrated?: Opt<Encoded<'/osmosis.protorev.v1beta1.ConcentratedPoolInfo'>>, atu8_cosmwasm?: Opt<Encoded<'/osmosis.protorev.v1beta1.CosmwasmPoolInfo'>>) => EncodedOsmosisProtorevInfoByPoolType;
/**
 * Encodes a `StablePoolInfo` protobuf message: contains meta data pertaining to a stableswap pool type.
 * @param sg_weight - `weight`: The weight of a stableswap pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevStablePoolInfo: (sg_weight?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevStablePoolInfo;
/**
 * Encodes a `BalancerPoolInfo` protobuf message: contains meta data pertaining to a balancer pool type.
 * @param sg_weight - `weight`: The weight of a balancer pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevBalancerPoolInfo: (sg_weight?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevBalancerPoolInfo;
/**
 * Encodes a `ConcentratedPoolInfo` protobuf message: contains meta data pertaining to a concentrated pool type.
 * @param sg_weight - `weight`: The weight of a concentrated pool
 * @param sg_max_ticks_crossed - `max_ticks_crossed`: The maximum number of ticks we can move when rebalancing
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevConcentratedPoolInfo: (sg_weight?: Opt<WeakUint64Str>, sg_max_ticks_crossed?: Opt<WeakUint64Str>) => EncodedOsmosisProtorevConcentratedPoolInfo;
/**
 * Encodes a `CosmwasmPoolInfo` protobuf message: contains meta data pertaining to a cosmwasm pool type.
 * @param a_weight_maps - `weight_maps`: The weight of a cosmwasm pool (by contract address)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevCosmwasmPoolInfo: (a_weight_maps?: Opt<Encoded<'/osmosis.protorev.v1beta1.WeightMap'>[]>) => EncodedOsmosisProtorevCosmwasmPoolInfo;
/**
 * Encodes a `WeightMap` protobuf message: maps a contract address to a weight. The weight of an address corresponds to the amount of ms required to execute a swap on that contract.
 * @param sg_weight - `weight`: The weight of a cosmwasm pool (by contract address)
 * @param sa_contract - `contract_address`: The contract address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevWeightMap: (sg_weight?: Opt<WeakUint64Str>, sa_contract?: Opt<WeakAccountAddr>) => EncodedOsmosisProtorevWeightMap;
/**
 * Encodes a `BaseDenom` protobuf message: represents a single base denom that the module uses for its arbitrage trades. It contains the denom name alongside the step size of the binary search that is used to find the optimal swap amount
 * @param s_denom - `denom`: The denom i.e. name of the base denom (ex. uosmo)
 * @param s_step_size - `step_size`: The step size of the binary search that is used to find the optimal swap amount
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisProtorevBaseDenom: (s_denom?: Opt<string>, s_step_size?: Opt<string>) => EncodedOsmosisProtorevBaseDenom;
/**
 * A decoded protobuf TokenPairArbRoutes message
 *
 * Tuple where:
 *   - 0: arb_routes - Stores all of the possible hot paths for a given pair of tokens
 *   - 1: token_in - Token denomination of the first asset
 *   - 2: token_out - Token denomination of the second asset
 */
export type DecodedOsmosisProtorevTokenPairArbRoutes = [
    a_arb_routes?: DecodedOsmosisProtorevRoute[],
    s_token_in?: string,
    s_token_out?: string
];
/**
 * Decodes a protobuf TokenPairArbRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevTokenPairArbRoutes}
 */
export declare const decodeOsmosisProtorevTokenPairArbRoutes: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevTokenPairArbRoutes;
/**
 * A decoded protobuf Route message
 *
 * Tuple where:
 *   - 0: trades - The pool IDs that are travered in the directed cyclic graph (traversed left -> right)
 *   - 1: step_size - The step size that will be used to find the optimal swap amount in the binary search
 */
export type DecodedOsmosisProtorevRoute = [
    a_trades?: DecodedOsmosisProtorevTrade[],
    s_step_size?: string
];
/**
 * Decodes a protobuf Route message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevRoute}
 */
export declare const decodeOsmosisProtorevRoute: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevRoute;
/**
 * A decoded protobuf Trade message
 *
 * Tuple where:
 *   - 0: pool - The pool id of the pool that is traded on
 *   - 1: token_in - The denom of the token that is traded
 *   - 2: token_out - The denom of the token that is received
 */
export type DecodedOsmosisProtorevTrade = [
    sg_pool?: CwUint64,
    s_token_in?: string,
    s_token_out?: string
];
/**
 * Decodes a protobuf Trade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevTrade}
 */
export declare const decodeOsmosisProtorevTrade: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevTrade;
/**
 * A decoded protobuf RouteStatistics message
 *
 * Tuple where:
 *   - 0: profits - the total profit from all trades on this route
 *   - 1: number_of_trades - the number of trades the module has executed using this route
 *   - 2: route - the route that was used (pool ids along the arbitrage route)
 */
export type DecodedOsmosisProtorevRouteStatistics = [
    a_profits?: [
        string,
        string
    ][],
    s_number_of_trades?: string,
    a_routes?: CwUint64[]
];
/**
 * Decodes a protobuf RouteStatistics message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevRouteStatistics}
 */
export declare const decodeOsmosisProtorevRouteStatistics: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevRouteStatistics;
/**
 * A decoded protobuf PoolWeights message
 *
 * Tuple where:
 *   - 0: stable_weight - The weight of a stableswap pool
 *   - 1: balancer_weight - The weight of a balancer pool
 *   - 2: concentrated_weight - The weight of a concentrated pool
 *   - 3: cosmwasm_weight - The weight of a cosmwasm pool
 */
export type DecodedOsmosisProtorevPoolWeights = [
    sg_stable_weight?: CwUint64,
    sg_balancer_weight?: CwUint64,
    sg_concentrated_weight?: CwUint64,
    sg_cosmwasm_weight?: CwUint64
];
/**
 * Decodes a protobuf PoolWeights message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevPoolWeights}
 */
export declare const decodeOsmosisProtorevPoolWeights: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevPoolWeights;
/**
 * A decoded protobuf InfoByPoolType message
 *
 * Tuple where:
 *   - 0: stable - The stable pool info
 *   - 1: balancer - The balancer pool info
 *   - 2: concentrated - The concentrated pool info
 *   - 3: cosmwasm - The cosmwasm pool info
 */
export type DecodedOsmosisProtorevInfoByPoolType = [
    a_stable?: DecodedOsmosisProtorevStablePoolInfo,
    a_balancer?: DecodedOsmosisProtorevBalancerPoolInfo,
    a_concentrated?: DecodedOsmosisProtorevConcentratedPoolInfo,
    a_cosmwasm?: DecodedOsmosisProtorevCosmwasmPoolInfo
];
/**
 * Decodes a protobuf InfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevInfoByPoolType}
 */
export declare const decodeOsmosisProtorevInfoByPoolType: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevInfoByPoolType;
/**
 * A decoded protobuf StablePoolInfo message
 *
 * Alias for: weight - The weight of a stableswap pool
 */
export type DecodedOsmosisProtorevStablePoolInfo = [
    sg_weight?: CwUint64
];
/**
 * Decodes a protobuf StablePoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevStablePoolInfo}
 */
export declare const decodeOsmosisProtorevStablePoolInfo: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevStablePoolInfo;
/**
 * A decoded protobuf BalancerPoolInfo message
 *
 * Alias for: weight - The weight of a balancer pool
 */
export type DecodedOsmosisProtorevBalancerPoolInfo = [
    sg_weight?: CwUint64
];
/**
 * Decodes a protobuf BalancerPoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevBalancerPoolInfo}
 */
export declare const decodeOsmosisProtorevBalancerPoolInfo: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevBalancerPoolInfo;
/**
 * A decoded protobuf ConcentratedPoolInfo message
 *
 * Tuple where:
 *   - 0: weight - The weight of a concentrated pool
 *   - 1: max_ticks_crossed - The maximum number of ticks we can move when rebalancing
 */
export type DecodedOsmosisProtorevConcentratedPoolInfo = [
    sg_weight?: CwUint64,
    sg_max_ticks_crossed?: CwUint64
];
/**
 * Decodes a protobuf ConcentratedPoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevConcentratedPoolInfo}
 */
export declare const decodeOsmosisProtorevConcentratedPoolInfo: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevConcentratedPoolInfo;
/**
 * A decoded protobuf CosmwasmPoolInfo message
 *
 * Alias for: weight_maps - The weight of a cosmwasm pool (by contract address)
 */
export type DecodedOsmosisProtorevCosmwasmPoolInfo = [
    a_weight_maps?: DecodedOsmosisProtorevWeightMap[]
];
/**
 * Decodes a protobuf CosmwasmPoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevCosmwasmPoolInfo}
 */
export declare const decodeOsmosisProtorevCosmwasmPoolInfo: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevCosmwasmPoolInfo;
/**
 * A decoded protobuf WeightMap message
 *
 * Tuple where:
 *   - 0: weight - The weight of a cosmwasm pool (by contract address)
 *   - 1: contract_address - The contract address
 */
export type DecodedOsmosisProtorevWeightMap = [
    sg_weight?: CwUint64,
    sa_contract?: CwAccountAddr
];
/**
 * Decodes a protobuf WeightMap message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevWeightMap}
 */
export declare const decodeOsmosisProtorevWeightMap: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevWeightMap;
/**
 * A decoded protobuf BaseDenom message
 *
 * Tuple where:
 *   - 0: denom - The denom i.e. name of the base denom (ex. uosmo)
 *   - 1: step_size - The step size of the binary search that is used to find the optimal swap amount
 */
export type DecodedOsmosisProtorevBaseDenom = [
    s_denom?: string,
    s_step_size?: string
];
/**
 * Decodes a protobuf BaseDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevBaseDenom}
 */
export declare const decodeOsmosisProtorevBaseDenom: (atu8_payload: Uint8Array) => DecodedOsmosisProtorevBaseDenom;
/**
 * Destructures the fields of a {@link OsmosisProtorevTokenPairArbRoutes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: arb_routes - Stores all of the possible hot paths for a given pair of tokens
 *   - 1: token_in - Token denomination of the first asset
 *   - 2: token_out - Token denomination of the second asset
 */
export declare const destructOsmosisProtorevTokenPairArbRoutes: (g_struct: OsmosisProtorevTokenPairArbRoutes) => [arb_routes?: OsmosisProtorevRoute[], token_in?: string, token_out?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_TOKEN_PAIR_ARB_ROUTES = "/osmosis.protorev.v1beta1.TokenPairArbRoutes";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.TokenPairArbRoutes` - tracks all of the hot routes for a given pair of tokens
 */
export type OsmosisProtorevTokenPairArbRoutes = {
    arb_routes?: OsmosisProtorevRoute[] | undefined;
    token_in?: string | undefined;
    token_out?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevRoute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: trades - The pool IDs that are travered in the directed cyclic graph (traversed left -> right)
 *   - 1: step_size - The step size that will be used to find the optimal swap amount in the binary search
 */
export declare const destructOsmosisProtorevRoute: (g_struct: OsmosisProtorevRoute) => [trades?: OsmosisProtorevTrade[], step_size?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_ROUTE = "/osmosis.protorev.v1beta1.Route";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.Route` - a hot route for a given pair of tokens
 */
export type OsmosisProtorevRoute = {
    trades?: OsmosisProtorevTrade[] | undefined;
    step_size?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevTrade} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - The pool id of the pool that is traded on
 *   - 1: token_in - The denom of the token that is traded
 *   - 2: token_out - The denom of the token that is received
 */
export declare const destructOsmosisProtorevTrade: (g_struct: OsmosisProtorevTrade) => [pool?: CwUint64, token_in?: string, token_out?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_TRADE = "/osmosis.protorev.v1beta1.Trade";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.Trade` - a single trade in a route
 */
export type OsmosisProtorevTrade = {
    pool?: CwUint64 | undefined;
    token_in?: string | undefined;
    token_out?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevInfoByPoolType} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: stable - The stable pool info
 *   - 1: balancer - The balancer pool info
 *   - 2: concentrated - The concentrated pool info
 *   - 3: cosmwasm - The cosmwasm pool info
 */
export declare const destructOsmosisProtorevInfoByPoolType: (g_struct: OsmosisProtorevInfoByPoolType) => [stable?: OsmosisProtorevStablePoolInfo, balancer?: OsmosisProtorevBalancerPoolInfo, concentrated?: OsmosisProtorevConcentratedPoolInfo, cosmwasm?: OsmosisProtorevCosmwasmPoolInfo];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_INFO_BY_POOL_TYPE = "/osmosis.protorev.v1beta1.InfoByPoolType";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.InfoByPoolType` - contains information pertaining to how expensive (in terms of gas and time) it is to execute a swap on a given pool type. This distinction is made and necessary because the execution time ranges significantly between the different pool types.
 */
export type OsmosisProtorevInfoByPoolType = {
    stable?: OsmosisProtorevStablePoolInfo | undefined;
    balancer?: OsmosisProtorevBalancerPoolInfo | undefined;
    concentrated?: OsmosisProtorevConcentratedPoolInfo | undefined;
    cosmwasm?: OsmosisProtorevCosmwasmPoolInfo | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevStablePoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a stableswap pool
 */
export declare const destructOsmosisProtorevStablePoolInfo: (g_struct: OsmosisProtorevStablePoolInfo) => [weight?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_STABLE_POOL_INFO = "/osmosis.protorev.v1beta1.StablePoolInfo";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.StablePoolInfo` - contains meta data pertaining to a stableswap pool type.
 */
export type OsmosisProtorevStablePoolInfo = {
    weight?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevBalancerPoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a balancer pool
 */
export declare const destructOsmosisProtorevBalancerPoolInfo: (g_struct: OsmosisProtorevBalancerPoolInfo) => [weight?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_BALANCER_POOL_INFO = "/osmosis.protorev.v1beta1.BalancerPoolInfo";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.BalancerPoolInfo` - contains meta data pertaining to a balancer pool type.
 */
export type OsmosisProtorevBalancerPoolInfo = {
    weight?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevConcentratedPoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a concentrated pool
 *   - 1: max_ticks_crossed - The maximum number of ticks we can move when rebalancing
 */
export declare const destructOsmosisProtorevConcentratedPoolInfo: (g_struct: OsmosisProtorevConcentratedPoolInfo) => [weight?: CwUint64, max_ticks_crossed?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_CONCENTRATED_POOL_INFO = "/osmosis.protorev.v1beta1.ConcentratedPoolInfo";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.ConcentratedPoolInfo` - contains meta data pertaining to a concentrated pool type.
 */
export type OsmosisProtorevConcentratedPoolInfo = {
    weight?: CwUint64 | undefined;
    max_ticks_crossed?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevCosmwasmPoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight_maps - The weight of a cosmwasm pool (by contract address)
 */
export declare const destructOsmosisProtorevCosmwasmPoolInfo: (g_struct: OsmosisProtorevCosmwasmPoolInfo) => [weight_maps?: OsmosisProtorevWeightMap[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_COSMWASM_POOL_INFO = "/osmosis.protorev.v1beta1.CosmwasmPoolInfo";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.CosmwasmPoolInfo` - contains meta data pertaining to a cosmwasm pool type.
 */
export type OsmosisProtorevCosmwasmPoolInfo = {
    weight_maps?: OsmosisProtorevWeightMap[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevWeightMap} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a cosmwasm pool (by contract address)
 *   - 1: contract_address - The contract address
 */
export declare const destructOsmosisProtorevWeightMap: (g_struct: OsmosisProtorevWeightMap) => [weight?: CwUint64, contract_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_WEIGHT_MAP = "/osmosis.protorev.v1beta1.WeightMap";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.WeightMap` - maps a contract address to a weight. The weight of an address corresponds to the amount of ms required to execute a swap on that contract.
 */
export type OsmosisProtorevWeightMap = {
    weight?: CwUint64 | undefined;
    contract_address?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevBaseDenom} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - The denom i.e. name of the base denom (ex. uosmo)
 *   - 1: step_size - The step size of the binary search that is used to find the optimal swap amount
 */
export declare const destructOsmosisProtorevBaseDenom: (g_struct: OsmosisProtorevBaseDenom) => [denom?: string, step_size?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_BASE_DENOM = "/osmosis.protorev.v1beta1.BaseDenom";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.BaseDenom` - represents a single base denom that the module uses for its arbitrage trades. It contains the denom name alongside the step size of the binary search that is used to find the optimal swap amount
 */
export type OsmosisProtorevBaseDenom = {
    denom?: string | undefined;
    step_size?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevRouteStatistics} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: profits - the total profit from all trades on this route
 *   - 1: number_of_trades - the number of trades the module has executed using this route
 *   - 2: route - the route that was used (pool ids along the arbitrage route)
 */
export declare const destructOsmosisProtorevRouteStatistics: (g_struct: OsmosisProtorevRouteStatistics) => [profits?: CosmosBaseCoin[], number_of_trades?: string, route?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_ROUTE_STATISTICS = "/osmosis.protorev.v1beta1.RouteStatistics";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.RouteStatistics` - contains the number of trades the module has executed after a swap on a given route and the profits from the trades
 */
export type OsmosisProtorevRouteStatistics = {
    profits?: CosmosBaseCoin[] | undefined;
    number_of_trades?: string | undefined;
    route?: CwUint64[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisProtorevPoolWeights} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: stable_weight - The weight of a stableswap pool
 *   - 1: balancer_weight - The weight of a balancer pool
 *   - 2: concentrated_weight - The weight of a concentrated pool
 *   - 3: cosmwasm_weight - The weight of a cosmwasm pool
 */
export declare const destructOsmosisProtorevPoolWeights: (g_struct: OsmosisProtorevPoolWeights) => [stable_weight?: CwUint64, balancer_weight?: CwUint64, concentrated_weight?: CwUint64, cosmwasm_weight?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_POOL_WEIGHTS = "/osmosis.protorev.v1beta1.PoolWeights";
/**
 * JSON serialization of `osmosis.protorev.v1beta1.PoolWeights` - contains the weights of all of the different pool types. This distinction is made and necessary because the execution time ranges significantly between the different pool types. Each weight roughly corresponds to the amount of time (in ms) it takes to execute a swap on that pool type. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 */
export type OsmosisProtorevPoolWeights = {
    stable_weight?: CwUint64 | undefined;
    balancer_weight?: CwUint64 | undefined;
    concentrated_weight?: CwUint64 | undefined;
    cosmwasm_weight?: CwUint64 | undefined;
};
