import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `TokenPairArbRoutes` protobuf message: tracks all of the hot routes for a given pair of tokens
 * @param a_arb_routes - `arb_routes`: Stores all of the possible hot paths for a given pair of tokens
 * @param s_token_in - `token_in`: Token denomination of the first asset
 * @param s_token_out - `token_out`: Token denomination of the second asset
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevTokenPairArbRoutes = (a_arb_routes, s_token_in, s_token_out) => Protobuf() // ...
    .B(a_arb_routes) // Route[] arb_routes = 1
    .s(s_token_in) // string token_in = 2
    .s(s_token_out) // string token_out = 3
    .o;
/**
 * Encodes a `Route` protobuf message: a hot route for a given pair of tokens
 * @param a_trades - `trades`: The pool IDs that are travered in the directed cyclic graph (traversed left -> right)
 * @param s_step_size - `step_size`: The step size that will be used to find the optimal swap amount in the binary search
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevRoute = (a_trades, s_step_size) => Protobuf() // ...
    .B(a_trades) // Trade[] trades = 1
    .s(s_step_size) // string step_size = 2
    .o;
/**
 * Encodes a `Trade` protobuf message: a single trade in a route
 * @param sg_pool - `pool`: The pool id of the pool that is traded on
 * @param s_token_in - `token_in`: The denom of the token that is traded
 * @param s_token_out - `token_out`: The denom of the token that is received
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevTrade = (sg_pool, s_token_in, s_token_out) => Protobuf() // ...
    .g(sg_pool) // uint64 pool = 1
    .s(s_token_in) // string token_in = 2
    .s(s_token_out) // string token_out = 3
    .o;
/**
 * Encodes a `RouteStatistics` protobuf message: contains the number of trades the module has executed after a swap on a given route and the profits from the trades
 * @param a_profits - `profits`: the total profit from all trades on this route
 * @param s_number_of_trades - `number_of_trades`: the number of trades the module has executed using this route
 * @param a_routes - `route`: the route that was used (pool ids along the arbitrage route)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevRouteStatistics = (a_profits, s_number_of_trades, a_routes) => Protobuf() // ...
    .B(coins(a_profits)) // Coin[] profits = 1
    .s(s_number_of_trades) // string number_of_trades = 2
    .G(a_routes) // uint64[] route = 3
    .o;
/**
 * Encodes a `PoolWeights` protobuf message: contains the weights of all of the different pool types. This distinction is made and necessary because the execution time ranges significantly between the different pool types. Each weight roughly corresponds to the amount of time (in ms) it takes to execute a swap on that pool type. DEPRECATED: This field is deprecated and will be removed in the next release. It is replaced by the `info_by_pool_type` field.
 * @param sg_stable_weight - `stable_weight`: The weight of a stableswap pool
 * @param sg_balancer_weight - `balancer_weight`: The weight of a balancer pool
 * @param sg_concentrated_weight - `concentrated_weight`: The weight of a concentrated pool
 * @param sg_cosmwasm_weight - `cosmwasm_weight`: The weight of a cosmwasm pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevPoolWeights = (sg_stable_weight, sg_balancer_weight, sg_concentrated_weight, sg_cosmwasm_weight) => Protobuf() // ...
    .g(sg_stable_weight) // uint64 stable_weight = 1
    .g(sg_balancer_weight) // uint64 balancer_weight = 2
    .g(sg_concentrated_weight) // uint64 concentrated_weight = 3
    .g(sg_cosmwasm_weight) // uint64 cosmwasm_weight = 4
    .o;
/**
 * Encodes a `InfoByPoolType` protobuf message: contains information pertaining to how expensive (in terms of gas and time) it is to execute a swap on a given pool type. This distinction is made and necessary because the execution time ranges significantly between the different pool types.
 * @param g_stable - `stable`: The stable pool info
 * @param g_balancer - `balancer`: The balancer pool info
 * @param g_concentrated - `concentrated`: The concentrated pool info
 * @param g_cosmwasm - `cosmwasm`: The cosmwasm pool info
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevInfoByPoolType = (atu8_stable, atu8_balancer, atu8_concentrated, atu8_cosmwasm) => Protobuf() // ...
    .b(atu8_stable) // StablePoolInfo stable = 1
    .b(atu8_balancer) // BalancerPoolInfo balancer = 2
    .b(atu8_concentrated) // ConcentratedPoolInfo concentrated = 3
    .b(atu8_cosmwasm) // CosmwasmPoolInfo cosmwasm = 4
    .o;
/**
 * Encodes a `StablePoolInfo` protobuf message: contains meta data pertaining to a stableswap pool type.
 * @param sg_weight - `weight`: The weight of a stableswap pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevStablePoolInfo = (sg_weight) => Protobuf() // ...
    .g(sg_weight) // uint64 weight = 1
    .o;
/**
 * Encodes a `BalancerPoolInfo` protobuf message: contains meta data pertaining to a balancer pool type.
 * @param sg_weight - `weight`: The weight of a balancer pool
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevBalancerPoolInfo = (sg_weight) => Protobuf() // ...
    .g(sg_weight) // uint64 weight = 1
    .o;
/**
 * Encodes a `ConcentratedPoolInfo` protobuf message: contains meta data pertaining to a concentrated pool type.
 * @param sg_weight - `weight`: The weight of a concentrated pool
 * @param sg_max_ticks_crossed - `max_ticks_crossed`: The maximum number of ticks we can move when rebalancing
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevConcentratedPoolInfo = (sg_weight, sg_max_ticks_crossed) => Protobuf() // ...
    .g(sg_weight) // uint64 weight = 1
    .g(sg_max_ticks_crossed) // uint64 max_ticks_crossed = 2
    .o;
/**
 * Encodes a `CosmwasmPoolInfo` protobuf message: contains meta data pertaining to a cosmwasm pool type.
 * @param a_weight_maps - `weight_maps`: The weight of a cosmwasm pool (by contract address)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevCosmwasmPoolInfo = (a_weight_maps) => Protobuf() // ...
    .B(a_weight_maps) // WeightMap[] weight_maps = 1
    .o;
/**
 * Encodes a `WeightMap` protobuf message: maps a contract address to a weight. The weight of an address corresponds to the amount of ms required to execute a swap on that contract.
 * @param sg_weight - `weight`: The weight of a cosmwasm pool (by contract address)
 * @param sa_contract - `contract_address`: The contract address
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevWeightMap = (sg_weight, sa_contract) => Protobuf() // ...
    .g(sg_weight) // uint64 weight = 1
    .s(sa_contract) // string contract_address = 2
    .o;
/**
 * Encodes a `BaseDenom` protobuf message: represents a single base denom that the module uses for its arbitrage trades. It contains the denom name alongside the step size of the binary search that is used to find the optimal swap amount
 * @param s_denom - `denom`: The denom i.e. name of the base denom (ex. uosmo)
 * @param s_step_size - `step_size`: The step size of the binary search that is used to find the optimal swap amount
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevBaseDenom = (s_denom, s_step_size) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .s(s_step_size) // string step_size = 2
    .o;
/**
 * Decodes a protobuf TokenPairArbRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevTokenPairArbRoutes}
 */
export const decodeOsmosisProtorevTokenPairArbRoutes = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5, 5], [decodeOsmosisProtorevRoute]);
/**
 * Decodes a protobuf Route message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevRoute}
 */
export const decodeOsmosisProtorevRoute = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5], [decodeOsmosisProtorevTrade]);
/**
 * Decodes a protobuf Trade message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevTrade}
 */
export const decodeOsmosisProtorevTrade = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf RouteStatistics message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevRouteStatistics}
 */
export const decodeOsmosisProtorevRouteStatistics = (atu8_payload) => decode_protobuf(atu8_payload, [0, 5, 2], [decode_coin]);
/**
 * Decodes a protobuf PoolWeights message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevPoolWeights}
 */
export const decodeOsmosisProtorevPoolWeights = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 3, 3]);
/**
 * Decodes a protobuf InfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevInfoByPoolType}
 */
export const decodeOsmosisProtorevInfoByPoolType = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 1], [decodeOsmosisProtorevStablePoolInfo, decodeOsmosisProtorevBalancerPoolInfo, decodeOsmosisProtorevConcentratedPoolInfo, decodeOsmosisProtorevCosmwasmPoolInfo]);
/**
 * Decodes a protobuf StablePoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevStablePoolInfo}
 */
export const decodeOsmosisProtorevStablePoolInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf BalancerPoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevBalancerPoolInfo}
 */
export const decodeOsmosisProtorevBalancerPoolInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf ConcentratedPoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevConcentratedPoolInfo}
 */
export const decodeOsmosisProtorevConcentratedPoolInfo = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Decodes a protobuf CosmwasmPoolInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevCosmwasmPoolInfo}
 */
export const decodeOsmosisProtorevCosmwasmPoolInfo = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisProtorevWeightMap]);
/**
 * Decodes a protobuf WeightMap message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevWeightMap}
 */
export const decodeOsmosisProtorevWeightMap = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf BaseDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevBaseDenom}
 */
export const decodeOsmosisProtorevBaseDenom = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Destructures the fields of a {@link OsmosisProtorevTokenPairArbRoutes} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: arb_routes - Stores all of the possible hot paths for a given pair of tokens
 *   - 1: token_in - Token denomination of the first asset
 *   - 2: token_out - Token denomination of the second asset
 */
export const destructOsmosisProtorevTokenPairArbRoutes = (g_struct) => [g_struct.arb_routes, g_struct.token_in, g_struct.token_out];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_TOKEN_PAIR_ARB_ROUTES = '/osmosis.protorev.v1beta1.TokenPairArbRoutes';
/**
 * Destructures the fields of a {@link OsmosisProtorevRoute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: trades - The pool IDs that are travered in the directed cyclic graph (traversed left -> right)
 *   - 1: step_size - The step size that will be used to find the optimal swap amount in the binary search
 */
export const destructOsmosisProtorevRoute = (g_struct) => [g_struct.trades, g_struct.step_size];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_ROUTE = '/osmosis.protorev.v1beta1.Route';
/**
 * Destructures the fields of a {@link OsmosisProtorevTrade} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool - The pool id of the pool that is traded on
 *   - 1: token_in - The denom of the token that is traded
 *   - 2: token_out - The denom of the token that is received
 */
export const destructOsmosisProtorevTrade = (g_struct) => [g_struct.pool, g_struct.token_in, g_struct.token_out];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_TRADE = '/osmosis.protorev.v1beta1.Trade';
/**
 * Destructures the fields of a {@link OsmosisProtorevInfoByPoolType} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: stable - The stable pool info
 *   - 1: balancer - The balancer pool info
 *   - 2: concentrated - The concentrated pool info
 *   - 3: cosmwasm - The cosmwasm pool info
 */
export const destructOsmosisProtorevInfoByPoolType = (g_struct) => [g_struct.stable, g_struct.balancer, g_struct.concentrated, g_struct.cosmwasm];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_INFO_BY_POOL_TYPE = '/osmosis.protorev.v1beta1.InfoByPoolType';
/**
 * Destructures the fields of a {@link OsmosisProtorevStablePoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a stableswap pool
 */
export const destructOsmosisProtorevStablePoolInfo = (g_struct) => [g_struct.weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_STABLE_POOL_INFO = '/osmosis.protorev.v1beta1.StablePoolInfo';
/**
 * Destructures the fields of a {@link OsmosisProtorevBalancerPoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a balancer pool
 */
export const destructOsmosisProtorevBalancerPoolInfo = (g_struct) => [g_struct.weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_BALANCER_POOL_INFO = '/osmosis.protorev.v1beta1.BalancerPoolInfo';
/**
 * Destructures the fields of a {@link OsmosisProtorevConcentratedPoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a concentrated pool
 *   - 1: max_ticks_crossed - The maximum number of ticks we can move when rebalancing
 */
export const destructOsmosisProtorevConcentratedPoolInfo = (g_struct) => [g_struct.weight, g_struct.max_ticks_crossed];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_CONCENTRATED_POOL_INFO = '/osmosis.protorev.v1beta1.ConcentratedPoolInfo';
/**
 * Destructures the fields of a {@link OsmosisProtorevCosmwasmPoolInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight_maps - The weight of a cosmwasm pool (by contract address)
 */
export const destructOsmosisProtorevCosmwasmPoolInfo = (g_struct) => [g_struct.weight_maps];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_COSMWASM_POOL_INFO = '/osmosis.protorev.v1beta1.CosmwasmPoolInfo';
/**
 * Destructures the fields of a {@link OsmosisProtorevWeightMap} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: weight - The weight of a cosmwasm pool (by contract address)
 *   - 1: contract_address - The contract address
 */
export const destructOsmosisProtorevWeightMap = (g_struct) => [g_struct.weight, g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_WEIGHT_MAP = '/osmosis.protorev.v1beta1.WeightMap';
/**
 * Destructures the fields of a {@link OsmosisProtorevBaseDenom} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - The denom i.e. name of the base denom (ex. uosmo)
 *   - 1: step_size - The step size of the binary search that is used to find the optimal swap amount
 */
export const destructOsmosisProtorevBaseDenom = (g_struct) => [g_struct.denom, g_struct.step_size];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_BASE_DENOM = '/osmosis.protorev.v1beta1.BaseDenom';
/**
 * Destructures the fields of a {@link OsmosisProtorevRouteStatistics} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: profits - the total profit from all trades on this route
 *   - 1: number_of_trades - the number of trades the module has executed using this route
 *   - 2: route - the route that was used (pool ids along the arbitrage route)
 */
export const destructOsmosisProtorevRouteStatistics = (g_struct) => [g_struct.profits, g_struct.number_of_trades, g_struct.route];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_ROUTE_STATISTICS = '/osmosis.protorev.v1beta1.RouteStatistics';
/**
 * Destructures the fields of a {@link OsmosisProtorevPoolWeights} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: stable_weight - The weight of a stableswap pool
 *   - 1: balancer_weight - The weight of a balancer pool
 *   - 2: concentrated_weight - The weight of a concentrated pool
 *   - 3: cosmwasm_weight - The weight of a cosmwasm pool
 */
export const destructOsmosisProtorevPoolWeights = (g_struct) => [g_struct.stable_weight, g_struct.balancer_weight, g_struct.concentrated_weight, g_struct.cosmwasm_weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_POOL_WEIGHTS = '/osmosis.protorev.v1beta1.PoolWeights';
//# sourceMappingURL=protorev.js.map