import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin, coins } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeOsmosisProtorevParams } from './params.js';
import { decodeOsmosisProtorevRouteStatistics, decodeOsmosisProtorevTokenPairArbRoutes, decodeOsmosisProtorevInfoByPoolType, decodeOsmosisProtorevBaseDenom } from './protorev.js';
const SR_LCD_OSMOSIS_PROTOREV_QUERY = '/osmosis/protorev/';
/**
 * Queries the parameters of the module.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export const queryOsmosisProtorevParams = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'params']);
/**
 * Queries the number of arbitrage trades the module has executed
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: number_of_trades - the number of trades the module has executed
 */
export const queryOsmosisProtorevGetProtoRevNumberOfTrades = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'number_of_trades']);
/**
 * Queries the profits of the module by denom
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom - the denom to query profits by
 * @returns a tuple where:
 *   - 0: profit - the profits of the module by the selected denom
 */
export const queryOsmosisProtorevGetProtoRevProfitsByDenom = restful_grpc(s_denom => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'profits_by_denom', {
        denom: s_denom,
    }]);
/**
 * Queries all of the profits from the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: profits - a list of all of the profits from the module
 */
export const queryOsmosisProtorevGetProtoRevAllProfits = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'all_profits']);
/**
 * Queries the number of arbitrages and profits that have been executed for a given route
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param a_routes - the set of pool ids to query statistics by i.e. 1,2,3
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 */
export const queryOsmosisProtorevGetProtoRevStatisticsByRoute = restful_grpc(a_routes => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'statistics_by_route', {
        route: a_routes,
    }]);
/**
 * Queries all of routes that the module has arbitraged against and the number of trades and profits that have been accumulated for each route
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 */
export const queryOsmosisProtorevGetProtoRevAllRouteStatistics = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'all_route_statistics']);
/**
 * Queries all of the hot routes that the module is currently arbitraging
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: routes - a list of all of the hot routes that the module is currently arbitraging
 */
export const queryOsmosisProtorevGetProtoRevTokenPairArbRoutes = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'token_pair_arb_routes']);
/**
 * Queries the admin account of the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: admin_account - the admin account of the module
 */
export const queryOsmosisProtorevGetProtoRevAdminAccount = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'admin_account']);
/**
 * Queries the developer account of the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: developer_account - the developer account of the module
 */
export const queryOsmosisProtorevGetProtoRevDeveloperAccount = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'developer_account']);
/**
 * Queries pool type information that is currently being utilized by the module
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: info_by_pool_type - InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 */
export const queryOsmosisProtorevGetProtoRevInfoByPoolType = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'info_by_pool_type']);
/**
 * Queries the maximum number of pool points that can be consumed per transaction
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction
 */
export const queryOsmosisProtorevGetProtoRevMaxPoolPointsPerTx = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'max_pool_points_per_tx']);
/**
 * Queries the maximum number of pool points that can consumed per block
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: max_pool_points_per_block - the maximum number of pool points that can be consumed per block
 */
export const queryOsmosisProtorevGetProtoRevMaxPoolPointsPerBlock = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'max_pool_points_per_block']);
/**
 * Queries the base denoms that the module is currently utilizing for arbitrage
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: base_denoms - a list of all of the base denoms and step sizes
 */
export const queryOsmosisProtorevGetProtoRevBaseDenoms = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'base_denoms']);
/**
 * Queries whether the module is enabled or not
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: enabled - whether the module is enabled
 */
export const queryOsmosisProtorevGetProtoRevEnabled = restful_grpc(() => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'enabled']);
/**
 * Queries the pool id used via the highest liquidity method for arbitrage route building given a pair of denominations
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_base_denom - the base denom set in protorev for the denom pair to pool mapping
 * @param s_other_denom - the other denom for the denom pair to pool mapping
 * @returns a tuple where:
 *   - 0: pool_id - the pool_id stored for the denom pair
 */
export const queryOsmosisProtorevGetProtoRevPool = restful_grpc((s_base_denom, s_other_denom) => [SR_LCD_OSMOSIS_PROTOREV_QUERY + 'pool', {
        base_denom: s_base_denom,
        other_denom: s_other_denom,
    }]);
/**
 * Encodes a `QueryParamsRequest` protobuf message: request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: response type for the Query/Params RPC method.
 * @param g_params - `params`: holds all the parameters of this module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevNumberOfTradesRequest` protobuf message: request type for the Query/GetProtoRevNumberOfTrades RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevNumberOfTradesResponse` protobuf message: response type for the Query/GetProtoRevNumberOfTrades RPC method.
 * @param s_number_of_trades - `number_of_trades`: the number of trades the module has executed
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse = (s_number_of_trades) => Protobuf() // ...
    .s(s_number_of_trades) // string number_of_trades = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevProfitsByDenomRequest` protobuf message: request type for the Query/GetProtoRevProfitsByDenom RPC method.
 * @param s_denom - `denom`: the denom to query profits by
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevProfitsByDenomResponse` protobuf message: response type for the Query/GetProtoRevProfitsByDenom RPC method.
 * @param a_profit - `profit`: the profits of the module by the selected denom
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse = (a_profit) => Protobuf() // ...
    .b(coin(a_profit)) // Coin profit = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevAllProfitsRequest` protobuf message: request type for the Query/GetProtoRevAllProfits RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevAllProfitsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevAllProfitsResponse` protobuf message: response type for the Query/GetProtoRevAllProfits RPC method.
 * @param a_profits - `profits`: a list of all of the profits from the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevAllProfitsResponse = (a_profits) => Protobuf() // ...
    .B(coins(a_profits)) // Coin[] profits = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevStatisticsByRouteRequest` protobuf message: QueryGetProtoRevStatisticsByPoolRequest is request type for the Query/GetProtoRevStatisticsByRoute RPC method.
 * @param a_routes - `route`: the set of pool ids to query statistics by i.e. 1,2,3
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest = (a_routes) => Protobuf() // ...
    .G(a_routes) // uint64[] route = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevStatisticsByRouteResponse` protobuf message: response type for the Query/GetProtoRevStatisticsByRoute RPC method.
 * @param g_statistics - `statistics`: contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse = (atu8_statistics) => Protobuf() // ...
    .b(atu8_statistics) // RouteStatistics statistics = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevAllRouteStatisticsRequest` protobuf message: request type for the Query/GetProtoRevAllRouteStatistics RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevAllRouteStatisticsResponse` protobuf message: response type for the Query/GetProtoRevAllRouteStatistics RPC method.
 * @param a_statistics - `statistics`: contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse = (a_statistics) => Protobuf() // ...
    .B(a_statistics) // RouteStatistics[] statistics = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevTokenPairArbRoutesRequest` protobuf message: request type for the Query/GetProtoRevTokenPairArbRoutes RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevTokenPairArbRoutesResponse` protobuf message: response type for the Query/GetProtoRevTokenPairArbRoutes RPC method.
 * @param a_routes - `routes`: a list of all of the hot routes that the module is currently arbitraging
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse = (a_routes) => Protobuf() // ...
    .B(a_routes) // TokenPairArbRoutes[] routes = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevAdminAccountRequest` protobuf message: request type for the Query/GetProtoRevAdminAccount RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevAdminAccountRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevAdminAccountResponse` protobuf message: response type for the Query/GetProtoRevAdminAccount RPC method.
 * @param s_admin_account - `admin_account`: the admin account of the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevAdminAccountResponse = (s_admin_account) => Protobuf() // ...
    .s(s_admin_account) // string admin_account = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevDeveloperAccountRequest` protobuf message: request type for the Query/GetProtoRevDeveloperAccount RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevDeveloperAccountResponse` protobuf message: response type for the Query/GetProtoRevDeveloperAccount RPC method.
 * @param s_developer_account - `developer_account`: the developer account of the module
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse = (s_developer_account) => Protobuf() // ...
    .s(s_developer_account) // string developer_account = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevInfoByPoolTypeRequest` protobuf message: request type for the Query/GetProtoRevInfoByPoolType RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevInfoByPoolTypeResponse` protobuf message: response type for the Query/GetProtoRevInfoByPoolType RPC method.
 * @param g_info_by_pool_type - `info_by_pool_type`: InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse = (atu8_info_by_pool_type) => Protobuf() // ...
    .b(atu8_info_by_pool_type) // InfoByPoolType info_by_pool_type = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerBlockRequest` protobuf message: request type for the Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerBlockResponse` protobuf message: response type for the Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
 * @param sg_max_pool_points_per_block - `max_pool_points_per_block`: the maximum number of pool points that can be consumed per block
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse = (sg_max_pool_points_per_block) => Protobuf() // ...
    .g(sg_max_pool_points_per_block) // uint64 max_pool_points_per_block = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerTxRequest` protobuf message: request type for the Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevMaxPoolPointsPerTxResponse` protobuf message: response type for the Query/GetProtoRevMaxPoolPointsPerTx RPC method.
 * @param sg_max_pool_points_per_tx - `max_pool_points_per_tx`: the maximum number of pool points that can be consumed per transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse = (sg_max_pool_points_per_tx) => Protobuf() // ...
    .g(sg_max_pool_points_per_tx) // uint64 max_pool_points_per_tx = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevBaseDenomsRequest` protobuf message: request type for the Query/GetProtoRevBaseDenoms RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevBaseDenomsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevBaseDenomsResponse` protobuf message: response type for the Query/GetProtoRevBaseDenoms RPC method.
 * @param a_base_denoms - `base_denoms`: a list of all of the base denoms and step sizes
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevBaseDenomsResponse = (a_base_denoms) => Protobuf() // ...
    .B(a_base_denoms) // BaseDenom[] base_denoms = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevEnabledRequest` protobuf message: request type for the Query/GetProtoRevEnabled RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevEnabledRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryGetProtoRevEnabledResponse` protobuf message: response type for the Query/GetProtoRevEnabled RPC method.
 * @param b_enabled - `enabled`: whether the module is enabled
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevEnabledResponse = (b_enabled) => Protobuf() // ...
    .v(b_enabled) // boolean enabled = 1
    .o;
/**
 * Encodes a `QueryGetProtoRevPoolRequest` protobuf message: request type for the Query/GetProtoRevPool RPC method.
 * @param s_base_denom - `base_denom`: the base denom set in protorev for the denom pair to pool mapping
 * @param s_other_denom - `other_denom`: the other denom for the denom pair to pool mapping
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevPoolRequest = (s_base_denom, s_other_denom) => Protobuf() // ...
    .s(s_base_denom) // string base_denom = 1
    .s(s_other_denom) // string other_denom = 2
    .o;
/**
 * Encodes a `QueryGetProtoRevPoolResponse` protobuf message: response type for the Query/GetProtoRevPool RPC method.
 * @param sg_pool_id - `pool_id`: the pool_id stored for the denom pair
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisProtorevQueryGetProtoRevPoolResponse = (sg_pool_id) => Protobuf() // ...
    .g(sg_pool_id) // uint64 pool_id = 1
    .o;
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryParamsRequest}
 */
export const decodeOsmosisProtorevQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryParamsResponse}
 */
export const decodeOsmosisProtorevQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisProtorevParams]);
/**
 * Decodes a protobuf QueryGetProtoRevNumberOfTradesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevNumberOfTrades message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryGetProtoRevProfitsByDenomRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryGetProtoRevProfitsByDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decode_coin]);
/**
 * Decodes a protobuf QueryGetProtoRevAllProfitsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllProfitsRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevAllProfitsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevAllProfits message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllProfitsResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevAllProfitsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decode_coin]);
/**
 * Decodes a protobuf QueryGetProtoRevStatisticsByRouteRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest = (atu8_payload) => decode_protobuf(atu8_payload, [2]);
/**
 * Decodes a protobuf QueryGetProtoRevStatisticsByRoute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisProtorevRouteStatistics]);
/**
 * Decodes a protobuf QueryGetProtoRevAllRouteStatisticsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevAllRouteStatistics message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisProtorevRouteStatistics]);
/**
 * Decodes a protobuf QueryGetProtoRevTokenPairArbRoutesRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevTokenPairArbRoutes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisProtorevTokenPairArbRoutes]);
/**
 * Decodes a protobuf QueryGetProtoRevAdminAccountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAdminAccountRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevAdminAccountRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevAdminAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevAdminAccountResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevAdminAccountResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryGetProtoRevDeveloperAccountRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevDeveloperAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryGetProtoRevInfoByPoolTypeRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevInfoByPoolType message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisProtorevInfoByPoolType]);
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerBlockRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerTxRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevMaxPoolPointsPerTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QueryGetProtoRevBaseDenomsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevBaseDenomsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevBaseDenoms message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevBaseDenomsResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevBaseDenomsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeOsmosisProtorevBaseDenom]);
/**
 * Decodes a protobuf QueryGetProtoRevEnabledRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevEnabledRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevEnabledRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryGetProtoRevEnabled message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevEnabledResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevEnabledResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf QueryGetProtoRevPoolRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevPoolRequest}
 */
export const decodeOsmosisProtorevQueryGetProtoRevPoolRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryGetProtoRevPool message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisProtorevQueryGetProtoRevPoolResponse}
 */
export const decodeOsmosisProtorevQueryGetProtoRevPoolResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_PARAMS_REQUEST = '/osmosis.protorev.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - holds all the parameters of this module.
 */
export const destructOsmosisProtorevQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_PARAMS_RESPONSE = '/osmosis.protorev.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevNumberOfTradesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevNumberOfTradesRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_NUMBER_OF_TRADES_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevNumberOfTradesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: number_of_trades - the number of trades the module has executed
 */
export const destructOsmosisProtorevQueryGetProtoRevNumberOfTradesResponse = (g_struct) => [g_struct.number_of_trades];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_NUMBER_OF_TRADES_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevProfitsByDenomRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - the denom to query profits by
 */
export const destructOsmosisProtorevQueryGetProtoRevProfitsByDenomRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_PROFITS_BY_DENOM_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevProfitsByDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: profit - the profits of the module by the selected denom
 */
export const destructOsmosisProtorevQueryGetProtoRevProfitsByDenomResponse = (g_struct) => [g_struct.profit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_PROFITS_BY_DENOM_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllProfitsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevAllProfitsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_PROFITS_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllProfitsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: profits - a list of all of the profits from the module
 */
export const destructOsmosisProtorevQueryGetProtoRevAllProfitsResponse = (g_struct) => [g_struct.profits];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_PROFITS_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: route - the set of pool ids to query statistics by i.e. 1,2,3
 */
export const destructOsmosisProtorevQueryGetProtoRevStatisticsByRouteRequest = (g_struct) => [g_struct.route];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_STATISTICS_BY_ROUTE_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades the module has executed after a swap on a given pool and the profits from the trades
 */
export const destructOsmosisProtorevQueryGetProtoRevStatisticsByRouteResponse = (g_struct) => [g_struct.statistics];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_STATISTICS_BY_ROUTE_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevAllRouteStatisticsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_ROUTE_STATISTICS_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: statistics - contains the number of trades/profits the module has executed on all routes it has successfully executed a trade on
 */
export const destructOsmosisProtorevQueryGetProtoRevAllRouteStatisticsResponse = (g_struct) => [g_struct.statistics];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ALL_ROUTE_STATISTICS_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_TOKEN_PAIR_ARB_ROUTES_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: routes - a list of all of the hot routes that the module is currently arbitraging
 */
export const destructOsmosisProtorevQueryGetProtoRevTokenPairArbRoutesResponse = (g_struct) => [g_struct.routes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_TOKEN_PAIR_ARB_ROUTES_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAdminAccountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevAdminAccountRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ADMIN_ACCOUNT_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevAdminAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: admin_account - the admin account of the module
 */
export const destructOsmosisProtorevQueryGetProtoRevAdminAccountResponse = (g_struct) => [g_struct.admin_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ADMIN_ACCOUNT_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevDeveloperAccountRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevDeveloperAccountRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_DEVELOPER_ACCOUNT_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevDeveloperAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: developer_account - the developer account of the module
 */
export const destructOsmosisProtorevQueryGetProtoRevDeveloperAccountResponse = (g_struct) => [g_struct.developer_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_DEVELOPER_ACCOUNT_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevInfoByPoolTypeRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_INFO_BY_POOL_TYPE_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: info_by_pool_type - InfoByPoolType contains all information pertaining to how different pool types are handled by the module.
 */
export const destructOsmosisProtorevQueryGetProtoRevInfoByPoolTypeResponse = (g_struct) => [g_struct.info_by_pool_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_INFO_BY_POOL_TYPE_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevInfoByPoolTypeResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_BLOCK_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_pool_points_per_block - the maximum number of pool points that can be consumed per block
 */
export const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerBlockResponse = (g_struct) => [g_struct.max_pool_points_per_block];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_BLOCK_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_TX_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_pool_points_per_tx - the maximum number of pool points that can be consumed per transaction
 */
export const destructOsmosisProtorevQueryGetProtoRevMaxPoolPointsPerTxResponse = (g_struct) => [g_struct.max_pool_points_per_tx];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_MAX_POOL_POINTS_PER_TX_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevBaseDenomsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevBaseDenomsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_BASE_DENOMS_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevBaseDenomsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_denoms - a list of all of the base denoms and step sizes
 */
export const destructOsmosisProtorevQueryGetProtoRevBaseDenomsResponse = (g_struct) => [g_struct.base_denoms];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_BASE_DENOMS_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevEnabledRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisProtorevQueryGetProtoRevEnabledRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ENABLED_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevEnabledResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: enabled - whether the module is enabled
 */
export const destructOsmosisProtorevQueryGetProtoRevEnabledResponse = (g_struct) => [g_struct.enabled];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_ENABLED_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevPoolRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: base_denom - the base denom set in protorev for the denom pair to pool mapping
 *   - 1: other_denom - the other denom for the denom pair to pool mapping
 */
export const destructOsmosisProtorevQueryGetProtoRevPoolRequest = (g_struct) => [g_struct.base_denom, g_struct.other_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_POOL_REQUEST = '/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest';
/**
 * Destructures the fields of a {@link OsmosisProtorevQueryGetProtoRevPoolResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pool_id - the pool_id stored for the denom pair
 */
export const destructOsmosisProtorevQueryGetProtoRevPoolResponse = (g_struct) => [g_struct.pool_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_PROTOREV_QUERY_GET_PROTO_REV_POOL_RESPONSE = '/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse';
//# sourceMappingURL=query.js.map