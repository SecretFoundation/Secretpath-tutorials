import type { Encoded, Opt } from '../../../api/types.js';
import type { OsmosisSuperfluidParams, DecodedOsmosisSuperfluidParams } from './params.js';
import type { OsmosisSuperfluidSuperfluidAsset, DecodedOsmosisSuperfluidSuperfluidAsset, OsmosisSuperfluidOsmoEquivalentMultiplierRecord, DecodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord, OsmosisSuperfluidSuperfluidIntermediaryAccount, DecodedOsmosisSuperfluidSuperfluidIntermediaryAccount, OsmosisSuperfluidLockIdIntermediaryAccountConnection, DecodedOsmosisSuperfluidLockIdIntermediaryAccountConnection } from './superfluid.js';
export type EncodedOsmosisSuperfluidGenesisState = Encoded<'/osmosis.superfluid.GenesisState'>;
/**
 * Encodes a `GenesisState` protobuf message: defines the module's genesis state.
 * @param g_params - `params`:
 * @param a_superfluid_assets - `superfluid_assets`: defines the registered superfluid assets that have been registered via governance.
 * @param a_osmo_equivalent_multipliers - `osmo_equivalent_multipliers`: the records of osmo equivalent amount of each superfluid registered pool, updated every epoch.
 * @param a_intermediary_accounts - `intermediary_accounts`: a secondary account for superfluid staking that plays an intermediary role between validators and the delegators.
 * @param a_intemediary_account_connections - `intemediary_account_connections`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisSuperfluidGenesisState: (atu8_params?: Opt<Encoded<'/osmosis.superfluid.Params'>>, a_superfluid_assets?: Opt<Encoded<'/osmosis.superfluid.SuperfluidAsset'>[]>, a_osmo_equivalent_multipliers?: Opt<Encoded<'/osmosis.superfluid.OsmoEquivalentMultiplierRecord'>[]>, a_intermediary_accounts?: Opt<Encoded<'/osmosis.superfluid.SuperfluidIntermediaryAccount'>[]>, a_intemediary_account_connections?: Opt<Encoded<'/osmosis.superfluid.LockIdIntermediaryAccountConnection'>[]>) => EncodedOsmosisSuperfluidGenesisState;
/**
 * A decoded protobuf GenesisState message
 *
 * Tuple where:
 *   - 0: params -
 *   - 1: superfluid_assets - defines the registered superfluid assets that have been registered via governance.
 *   - 2: osmo_equivalent_multipliers - the records of osmo equivalent amount of each superfluid registered pool, updated every epoch.
 *   - 3: intermediary_accounts - a secondary account for superfluid staking that plays an intermediary role between validators and the delegators.
 *   - 4: intemediary_account_connections -
 */
export type DecodedOsmosisSuperfluidGenesisState = [
    a_params?: DecodedOsmosisSuperfluidParams,
    a_superfluid_assets?: DecodedOsmosisSuperfluidSuperfluidAsset[],
    a_osmo_equivalent_multipliers?: DecodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord[],
    a_intermediary_accounts?: DecodedOsmosisSuperfluidSuperfluidIntermediaryAccount[],
    a_intemediary_account_connections?: DecodedOsmosisSuperfluidLockIdIntermediaryAccountConnection[]
];
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidGenesisState}
 */
export declare const decodeOsmosisSuperfluidGenesisState: (atu8_payload: Uint8Array) => DecodedOsmosisSuperfluidGenesisState;
/**
 * Destructures the fields of a {@link OsmosisSuperfluidGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: superfluid_assets - defines the registered superfluid assets that have been registered via governance.
 *   - 2: osmo_equivalent_multipliers - the records of osmo equivalent amount of each superfluid registered pool, updated every epoch.
 *   - 3: intermediary_accounts - a secondary account for superfluid staking that plays an intermediary role between validators and the delegators.
 *   - 4: intemediary_account_connections -
 */
export declare const destructOsmosisSuperfluidGenesisState: (g_struct: OsmosisSuperfluidGenesisState) => [params?: OsmosisSuperfluidParams, superfluid_assets?: OsmosisSuperfluidSuperfluidAsset[], osmo_equivalent_multipliers?: OsmosisSuperfluidOsmoEquivalentMultiplierRecord[], intermediary_accounts?: OsmosisSuperfluidSuperfluidIntermediaryAccount[], intemediary_account_connections?: OsmosisSuperfluidLockIdIntermediaryAccountConnection[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_GENESIS_STATE = "/osmosis.superfluid.GenesisState";
/**
 * JSON serialization of `osmosis.superfluid.GenesisState` - defines the module's genesis state.
 */
export type OsmosisSuperfluidGenesisState = {
    params?: OsmosisSuperfluidParams | undefined;
    superfluid_assets?: OsmosisSuperfluidSuperfluidAsset[] | undefined;
    osmo_equivalent_multipliers?: OsmosisSuperfluidOsmoEquivalentMultiplierRecord[] | undefined;
    intermediary_accounts?: OsmosisSuperfluidSuperfluidIntermediaryAccount[] | undefined;
    intemediary_account_connections?: OsmosisSuperfluidLockIdIntermediaryAccountConnection[] | undefined;
};
