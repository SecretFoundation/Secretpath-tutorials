/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { decodeOsmosisSuperfluidParams } from './params.js';
import { decodeOsmosisSuperfluidSuperfluidAsset, decodeOsmosisSuperfluidOsmoEquivalentMultiplierRecord, decodeOsmosisSuperfluidSuperfluidIntermediaryAccount, decodeOsmosisSuperfluidLockIdIntermediaryAccountConnection } from './superfluid.js';
/**
 * Encodes a `GenesisState` protobuf message: defines the module's genesis state.
 * @param g_params - `params`:
 * @param a_superfluid_assets - `superfluid_assets`: defines the registered superfluid assets that have been registered via governance.
 * @param a_osmo_equivalent_multipliers - `osmo_equivalent_multipliers`: the records of osmo equivalent amount of each superfluid registered pool, updated every epoch.
 * @param a_intermediary_accounts - `intermediary_accounts`: a secondary account for superfluid staking that plays an intermediary role between validators and the delegators.
 * @param a_intemediary_account_connections - `intemediary_account_connections`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidGenesisState = (atu8_params, a_superfluid_assets, a_osmo_equivalent_multipliers, a_intermediary_accounts, a_intemediary_account_connections) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .B(a_superfluid_assets) // SuperfluidAsset[] superfluid_assets = 2
    .B(a_osmo_equivalent_multipliers) // OsmoEquivalentMultiplierRecord[] osmo_equivalent_multipliers = 3
    .B(a_intermediary_accounts) // SuperfluidIntermediaryAccount[] intermediary_accounts = 4
    .B(a_intemediary_account_connections) // LockIdIntermediaryAccountConnection[] intemediary_account_connections = 5
    .o;
/**
 * Decodes a protobuf GenesisState message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidGenesisState}
 */
export const decodeOsmosisSuperfluidGenesisState = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 0, 0, 0], [decodeOsmosisSuperfluidParams, decodeOsmosisSuperfluidSuperfluidAsset, decodeOsmosisSuperfluidOsmoEquivalentMultiplierRecord, decodeOsmosisSuperfluidSuperfluidIntermediaryAccount, decodeOsmosisSuperfluidLockIdIntermediaryAccountConnection]);
/**
 * Destructures the fields of a {@link OsmosisSuperfluidGenesisState} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params -
 *   - 1: superfluid_assets - defines the registered superfluid assets that have been registered via governance.
 *   - 2: osmo_equivalent_multipliers - the records of osmo equivalent amount of each superfluid registered pool, updated every epoch.
 *   - 3: intermediary_accounts - a secondary account for superfluid staking that plays an intermediary role between validators and the delegators.
 *   - 4: intemediary_account_connections -
 */
export const destructOsmosisSuperfluidGenesisState = (g_struct) => [g_struct.params, g_struct.superfluid_assets, g_struct.osmo_equivalent_multipliers, g_struct.intermediary_accounts, g_struct.intemediary_account_connections];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_GENESIS_STATE = '/osmosis.superfluid.GenesisState';
//# sourceMappingURL=genesis.js.map