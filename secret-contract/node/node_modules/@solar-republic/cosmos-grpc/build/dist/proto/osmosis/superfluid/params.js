/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message: holds parameters for the superfluid module
 * @param s_minimum_risk_factor - `minimum_risk_factor`: to be cut on OSMO equivalent value of lp tokens for superfluid staking, default: 5%. The minimum risk factor works to counter-balance the staked amount on chain's exposure to various asset volatilities, and have base staking be 'resistant' to volatility.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidParams = (s_minimum_risk_factor) => Protobuf() // ...
    .s(s_minimum_risk_factor) // string minimum_risk_factor = 1
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidParams}
 */
export const decodeOsmosisSuperfluidParams = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link OsmosisSuperfluidParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: minimum_risk_factor - to be cut on OSMO equivalent value of lp tokens for superfluid staking, default: 5%. The minimum risk factor works to counter-balance the staked amount on chain's exposure to various asset volatilities, and have base staking be 'resistant' to volatility.
 */
export const destructOsmosisSuperfluidParams = (g_struct) => [g_struct.minimum_risk_factor];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_PARAMS = '/osmosis.superfluid.Params';
//# sourceMappingURL=params.js.map