import { decode_protobuf, decode_coin } from '../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../api/protobuf-writer.js';
import { decodeOsmosisLockupSyntheticLock } from '../lockup/lock.js';
/**
 * Encodes a `SuperfluidAsset` protobuf message: stores the pair of superfluid asset type and denom pair
 * @param s_denom - `denom`:
 * @param xc_asset_type - `asset_type`: AssetType indicates whether the superfluid asset is a native token or an lp share
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidSuperfluidAsset = (s_denom, xc_asset_type) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .v(xc_asset_type) // SuperfluidAssetType asset_type = 2
    .o;
/**
 * Encodes a `SuperfluidIntermediaryAccount` protobuf message: takes the role of intermediary between LP token and OSMO tokens for superfluid staking. The intermediary account is the actual account responsible for delegation, not the validator account itself.
 * @param s_denom - `denom`: Denom indicates the denom of the superfluid asset.
 * @param sa_val - `val_addr`:
 * @param sg_gauge_id - `gauge_id`: perpetual gauge for rewards distribution
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidSuperfluidIntermediaryAccount = (s_denom, sa_val, sg_gauge_id) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .s(sa_val) // string val_addr = 2
    .g(sg_gauge_id) // uint64 gauge_id = 3
    .o;
/**
 * Encodes a `OsmoEquivalentMultiplierRecord` protobuf message: The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we treat an LP share as having, for all of epoch N. Eventually this is intended to be set as the Time-weighted-average-osmo-backing for the entire duration of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior epochs rewards) However for now, this is not the TWAP but instead the spot price at the boundary. For different types of assets in the future, it could change.
 * @param sg_epoch_number - `epoch_number`:
 * @param s_denom - `denom`: superfluid asset denom, can be LP token or native token
 * @param s_multiplier - `multiplier`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidOsmoEquivalentMultiplierRecord = (sg_epoch_number, s_denom, s_multiplier) => Protobuf() // ...
    .g(sg_epoch_number) // int32 epoch_number = 1
    .s(s_denom) // string denom = 2
    .s(s_multiplier) // string multiplier = 3
    .o;
/**
 * Encodes a `SuperfluidDelegationRecord` protobuf message: a struct used to indicate superfluid delegations of an account in the state machine in a user friendly form.
 * @param sa_delegator - `delegator_address`:
 * @param sa_validator - `validator_address`:
 * @param a_delegation_amount - `delegation_amount`:
 * @param a_equivalent_staked_amount - `equivalent_staked_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidSuperfluidDelegationRecord = (sa_delegator, sa_validator, a_delegation_amount, a_equivalent_staked_amount) => Protobuf() // ...
    .s(sa_delegator) // string delegator_address = 1
    .s(sa_validator) // string validator_address = 2
    .b(coin(a_delegation_amount)) // Coin delegation_amount = 3
    .b(coin(a_equivalent_staked_amount)) // Coin equivalent_staked_amount = 4
    .o;
/**
 * Encodes a `LockIdIntermediaryAccountConnection` protobuf message: a struct used to indicate the relationship between the underlying lock id and superfluid delegation done via lp shares.
 * @param sg_lock_id - `lock_id`:
 * @param s_intermediary_account - `intermediary_account`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidLockIdIntermediaryAccountConnection = (sg_lock_id, s_intermediary_account) => Protobuf() // ...
    .g(sg_lock_id) // uint64 lock_id = 1
    .s(s_intermediary_account) // string intermediary_account = 2
    .o;
/**
 * Encodes a `UnpoolWhitelistedPools` protobuf message:
 * @param a_ids - `ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidUnpoolWhitelistedPools = (a_ids) => Protobuf() // ...
    .G(a_ids) // uint64[] ids = 1
    .o;
/**
 * Encodes a `ConcentratedPoolUserPositionRecord` protobuf message:
 * @param sa_validator - `validator_address`:
 * @param sg_position_id - `position_id`:
 * @param sg_lock_id - `lock_id`:
 * @param g_synthetic_lock - `synthetic_lock`:
 * @param a_delegation_amount - `delegation_amount`:
 * @param a_equivalent_staked_amount - `equivalent_staked_amount`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisSuperfluidConcentratedPoolUserPositionRecord = (sa_validator, sg_position_id, sg_lock_id, atu8_synthetic_lock, a_delegation_amount, a_equivalent_staked_amount) => Protobuf() // ...
    .s(sa_validator) // string validator_address = 1
    .g(sg_position_id) // uint64 position_id = 2
    .g(sg_lock_id) // uint64 lock_id = 3
    .b(atu8_synthetic_lock) // SyntheticLock synthetic_lock = 4
    .b(coin(a_delegation_amount)) // Coin delegation_amount = 5
    .b(coin(a_equivalent_staked_amount)) // Coin equivalent_staked_amount = 6
    .o;
/**
 * Decodes a protobuf SuperfluidAsset message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidSuperfluidAsset}
 */
export const decodeOsmosisSuperfluidSuperfluidAsset = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf SuperfluidIntermediaryAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidSuperfluidIntermediaryAccount}
 */
export const decodeOsmosisSuperfluidSuperfluidIntermediaryAccount = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3]);
/**
 * Decodes a protobuf OsmoEquivalentMultiplierRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidOsmoEquivalentMultiplierRecord}
 */
export const decodeOsmosisSuperfluidOsmoEquivalentMultiplierRecord = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5]);
/**
 * Decodes a protobuf SuperfluidDelegationRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidSuperfluidDelegationRecord}
 */
export const decodeOsmosisSuperfluidSuperfluidDelegationRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1, 1], [0, 0, decode_coin, decode_coin]);
/**
 * Decodes a protobuf LockIdIntermediaryAccountConnection message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidLockIdIntermediaryAccountConnection}
 */
export const decodeOsmosisSuperfluidLockIdIntermediaryAccountConnection = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf UnpoolWhitelistedPools message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidUnpoolWhitelistedPools}
 */
export const decodeOsmosisSuperfluidUnpoolWhitelistedPools = (atu8_payload) => decode_protobuf(atu8_payload, [2]);
/**
 * Decodes a protobuf ConcentratedPoolUserPositionRecord message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisSuperfluidConcentratedPoolUserPositionRecord}
 */
export const decodeOsmosisSuperfluidConcentratedPoolUserPositionRecord = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, 1, 1, 1], [0, 0, 0, decodeOsmosisLockupSyntheticLock, decode_coin, decode_coin]);
/**
 * Destructures the fields of a {@link OsmosisSuperfluidSuperfluidAsset} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 *   - 1: asset_type - AssetType indicates whether the superfluid asset is a native token or an lp share
 */
export const destructOsmosisSuperfluidSuperfluidAsset = (g_struct) => [g_struct.denom, g_struct.asset_type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_SUPERFLUID_ASSET = '/osmosis.superfluid.SuperfluidAsset';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidOsmoEquivalentMultiplierRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: epoch_number -
 *   - 1: denom - superfluid asset denom, can be LP token or native token
 *   - 2: multiplier -
 */
export const destructOsmosisSuperfluidOsmoEquivalentMultiplierRecord = (g_struct) => [g_struct.epoch_number, g_struct.denom, g_struct.multiplier];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_OSMO_EQUIVALENT_MULTIPLIER_RECORD = '/osmosis.superfluid.OsmoEquivalentMultiplierRecord';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidSuperfluidDelegationRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: delegator_address -
 *   - 1: validator_address -
 *   - 2: delegation_amount -
 *   - 3: equivalent_staked_amount -
 */
export const destructOsmosisSuperfluidSuperfluidDelegationRecord = (g_struct) => [g_struct.delegator_address, g_struct.validator_address, g_struct.delegation_amount, g_struct.equivalent_staked_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_SUPERFLUID_DELEGATION_RECORD = '/osmosis.superfluid.SuperfluidDelegationRecord';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidConcentratedPoolUserPositionRecord} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator_address -
 *   - 1: position_id -
 *   - 2: lock_id -
 *   - 3: synthetic_lock -
 *   - 4: delegation_amount -
 *   - 5: equivalent_staked_amount -
 */
export const destructOsmosisSuperfluidConcentratedPoolUserPositionRecord = (g_struct) => [g_struct.validator_address, g_struct.position_id, g_struct.lock_id, g_struct.synthetic_lock, g_struct.delegation_amount, g_struct.equivalent_staked_amount];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_CONCENTRATED_POOL_USER_POSITION_RECORD = '/osmosis.superfluid.ConcentratedPoolUserPositionRecord';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidSuperfluidIntermediaryAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom - Denom indicates the denom of the superfluid asset.
 *   - 1: val_addr -
 *   - 2: gauge_id - perpetual gauge for rewards distribution
 */
export const destructOsmosisSuperfluidSuperfluidIntermediaryAccount = (g_struct) => [g_struct.denom, g_struct.val_addr, g_struct.gauge_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_SUPERFLUID_INTERMEDIARY_ACCOUNT = '/osmosis.superfluid.SuperfluidIntermediaryAccount';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidLockIdIntermediaryAccountConnection} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: lock_id -
 *   - 1: intermediary_account -
 */
export const destructOsmosisSuperfluidLockIdIntermediaryAccountConnection = (g_struct) => [g_struct.lock_id, g_struct.intermediary_account];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_LOCK_ID_INTERMEDIARY_ACCOUNT_CONNECTION = '/osmosis.superfluid.LockIdIntermediaryAccountConnection';
/**
 * Destructures the fields of a {@link OsmosisSuperfluidUnpoolWhitelistedPools} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ids -
 */
export const destructOsmosisSuperfluidUnpoolWhitelistedPools = (g_struct) => [g_struct.ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_SUPERFLUID_UNPOOL_WHITELISTED_POOLS = '/osmosis.superfluid.UnpoolWhitelistedPools';
/**
 * Protobuf enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeNative** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export const XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative = 0;
/**
 * JSON enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeNative** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export const SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative = 'SuperfluidAssetTypeNative';
/**
 * Protobuf enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeLPShare** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export const XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare = 1;
/**
 * JSON enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeLPShare** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export const SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare = 'SuperfluidAssetTypeLPShare';
/**
 * Protobuf enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeConcentratedShare** -
 *
 * Belongs to enum type {@link ProtoEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export const XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare = 2;
/**
 * JSON enum value for `osmosis.superfluid.SuperfluidAssetType`.
 *
 * **SuperfluidAssetTypeConcentratedShare** -
 *
 * Belongs to enum type {@link JsonEnumOsmosisSuperfluidSuperfluidAssetType}
 */
export const SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare = 'SuperfluidAssetTypeConcentratedShare';
/**
 * Maps a protobuf enum int value for `osmosis.superfluid.SuperfluidAssetType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumOsmosisSuperfluidSuperfluidAssetType = {
    [XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative]: SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative,
    [XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare]: SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare,
    [XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare]: SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare,
};
/**
 * Maps a JSON enum string value for `osmosis.superfluid.SuperfluidAssetType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumOsmosisSuperfluidSuperfluidAssetType = {
    [SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative]: XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeNative,
    [SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare]: XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeLPShare,
    [SI_JSON_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare]: XC_PROTO_OSMOSIS_SUPERFLUID_SuperfluidAssetTypeConcentratedShare,
};
//# sourceMappingURL=superfluid.js.map