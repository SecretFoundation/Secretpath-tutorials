import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `Params` protobuf message: defines the parameters for the tokenfactory module.
 * @param a_denom_creation_fees - `denom_creation_fee`: DenomCreationFee defines the fee to be charged on the creation of a new denom. The fee is drawn from the MsgCreateDenom's sender account, and transferred to the community pool.
 * @param sg_denom_creation_gas_consume - `denom_creation_gas_consume`: DenomCreationGasConsume defines the gas cost for creating a new denom. This is intended as a spam deterrence mechanism. See: https://github.com/CosmWasm/token-factory/issues/11
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryParams = (a_denom_creation_fees, sg_denom_creation_gas_consume) => Protobuf() // ...
    .B(coins(a_denom_creation_fees)) // Coin[] denom_creation_fee = 1
    .g(sg_denom_creation_gas_consume) // uint64 denom_creation_gas_consume = 2
    .o;
/**
 * Decodes a protobuf Params message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryParams}
 */
export const decodeOsmosisTokenfactoryParams = (atu8_payload) => decode_protobuf(atu8_payload, [0, 3], [decode_coin]);
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryParams} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom_creation_fee - DenomCreationFee defines the fee to be charged on the creation of a new denom. The fee is drawn from the MsgCreateDenom's sender account, and transferred to the community pool.
 *   - 1: denom_creation_gas_consume - DenomCreationGasConsume defines the gas cost for creating a new denom. This is intended as a spam deterrence mechanism. See: https://github.com/CosmWasm/token-factory/issues/11
 */
export const destructOsmosisTokenfactoryParams = (g_struct) => [g_struct.denom_creation_fee, g_struct.denom_creation_gas_consume];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_PARAMS = '/osmosis.tokenfactory.v1beta1.Params';
//# sourceMappingURL=params.js.map