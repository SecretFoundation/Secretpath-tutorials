/// <reference types="node" />
import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { OsmosisTokenfactoryDenomAuthorityMetadata, DecodedOsmosisTokenfactoryDenomAuthorityMetadata } from './authorityMetadata.js';
import type { OsmosisTokenfactoryParams, DecodedOsmosisTokenfactoryParams } from './params.js';
export type EncodedOsmosisTokenfactoryQueryParamsRequest = Encoded<'/osmosis.tokenfactory.v1beta1.QueryParamsRequest'>;
export type EncodedOsmosisTokenfactoryQueryParamsResponse = Encoded<'/osmosis.tokenfactory.v1beta1.QueryParamsResponse'>;
export type EncodedOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest = Encoded<'/osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest'>;
export type EncodedOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse = Encoded<'/osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse'>;
export type EncodedOsmosisTokenfactoryQueryDenomsFromCreatorRequest = Encoded<'/osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest'>;
export type EncodedOsmosisTokenfactoryQueryDenomsFromCreatorResponse = Encoded<'/osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse'>;
export type EncodedOsmosisTokenfactoryQueryBeforeSendHookAddressRequest = Encoded<'/osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest'>;
export type EncodedOsmosisTokenfactoryQueryBeforeSendHookAddressResponse = Encoded<'/osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse'>;
/**
 * Defines a gRPC query method that returns the tokenfactory module's parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const queryOsmosisTokenfactoryParams: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisTokenfactoryQueryParamsResponse>>;
/**
 * Defines a gRPC query method for fetching DenomAuthorityMetadata for a particular denom.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: authority_metadata - the 'authority_metadata' response property
 */
export declare const queryOsmosisTokenfactoryDenomAuthorityMetadata: (z_req: string | ({
    origin: string;
} & RequestInit), s_denom?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisTokenfactoryQueryDenomAuthorityMetadataResponse>>;
/**
 * Defines a gRPC query method for fetching all denominations created by a specific admin/creator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_creator -
 * @returns a tuple where:
 *   - 0: denoms - the 'denoms' response property
 */
export declare const queryOsmosisTokenfactoryDenomsFromCreator: (z_req: string | ({
    origin: string;
} & RequestInit), sa_creator?: Opt<`${string}1${string}`>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisTokenfactoryQueryDenomsFromCreatorResponse>>;
/**
 * Defines a gRPC query method for getting the address registered for the before send hook.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: cosmwasm_address - the 'cosmwasm_address' response property
 */
export declare const queryOsmosisTokenfactoryBeforeSendHookAddress: (z_req: string | ({
    origin: string;
} & RequestInit), s_denom?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<OsmosisTokenfactoryQueryBeforeSendHookAddressResponse>>;
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryParamsRequest: () => EncodedOsmosisTokenfactoryQueryParamsRequest;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryParamsResponse: (atu8_params?: Opt<Encoded<'/osmosis.tokenfactory.v1beta1.Params'>>) => EncodedOsmosisTokenfactoryQueryParamsResponse;
/**
 * Encodes a `QueryDenomAuthorityMetadataRequest` protobuf message: defines the request structure for the DenomAuthorityMetadata gRPC query.
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest: (s_denom?: Opt<string>) => EncodedOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest;
/**
 * Encodes a `QueryDenomAuthorityMetadataResponse` protobuf message: defines the response structure for the DenomAuthorityMetadata gRPC query.
 * @param g_authority_metadata - `authority_metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse: (atu8_authority_metadata?: Opt<Encoded<'/osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata'>>) => EncodedOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse;
/**
 * Encodes a `QueryDenomsFromCreatorRequest` protobuf message: defines the request structure for the DenomsFromCreator gRPC query.
 * @param sa_creator - `creator`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryDenomsFromCreatorRequest: (sa_creator?: Opt<WeakAccountAddr>) => EncodedOsmosisTokenfactoryQueryDenomsFromCreatorRequest;
/**
 * Encodes a `QueryDenomsFromCreatorResponse` protobuf message: QueryDenomsFromCreatorRequest defines the response structure for the DenomsFromCreator gRPC query.
 * @param a_denoms - `denoms`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryDenomsFromCreatorResponse: (a_denoms?: Opt<string[]>) => EncodedOsmosisTokenfactoryQueryDenomsFromCreatorResponse;
/**
 * Encodes a `QueryBeforeSendHookAddressRequest` protobuf message:
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryBeforeSendHookAddressRequest: (s_denom?: Opt<string>) => EncodedOsmosisTokenfactoryQueryBeforeSendHookAddressRequest;
/**
 * Encodes a `QueryBeforeSendHookAddressResponse` protobuf message: defines the response structure for the DenomBeforeSendHook gRPC query.
 * @param sa_cosmwasm - `cosmwasm_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisTokenfactoryQueryBeforeSendHookAddressResponse: (sa_cosmwasm?: Opt<WeakAccountAddr>) => EncodedOsmosisTokenfactoryQueryBeforeSendHookAddressResponse;
/**
 * A decoded protobuf QueryParamsRequest message
 *
 * Tuple where:
 */
export type DecodedOsmosisTokenfactoryQueryParamsRequest = [];
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryParamsRequest}
 */
export declare const decodeOsmosisTokenfactoryQueryParamsRequest: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf QueryParams message
 *
 * Alias for: params - defines the parameters of the module.
 */
export type DecodedOsmosisTokenfactoryQueryParamsResponse = [
    a_params?: DecodedOsmosisTokenfactoryParams
];
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryParamsResponse}
 */
export declare const decodeOsmosisTokenfactoryQueryParamsResponse: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryParamsResponse;
/**
 * A decoded protobuf QueryDenomAuthorityMetadataRequest message
 *
 * Alias for: denom -
 */
export type DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest = [
    s_denom?: string
];
/**
 * Decodes a protobuf QueryDenomAuthorityMetadataRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest}
 */
export declare const decodeOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest;
/**
 * A decoded protobuf QueryDenomAuthorityMetadata message
 *
 * Alias for: authority_metadata -
 */
export type DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse = [
    a_authority_metadata?: DecodedOsmosisTokenfactoryDenomAuthorityMetadata
];
/**
 * Decodes a protobuf QueryDenomAuthorityMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse}
 */
export declare const decodeOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse;
/**
 * A decoded protobuf QueryDenomsFromCreatorRequest message
 *
 * Alias for: creator -
 */
export type DecodedOsmosisTokenfactoryQueryDenomsFromCreatorRequest = [
    sa_creator?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryDenomsFromCreatorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomsFromCreatorRequest}
 */
export declare const decodeOsmosisTokenfactoryQueryDenomsFromCreatorRequest: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryDenomsFromCreatorRequest;
/**
 * A decoded protobuf QueryDenomsFromCreator message
 *
 * Alias for: denoms -
 */
export type DecodedOsmosisTokenfactoryQueryDenomsFromCreatorResponse = [
    a_denoms?: string[]
];
/**
 * Decodes a protobuf QueryDenomsFromCreator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomsFromCreatorResponse}
 */
export declare const decodeOsmosisTokenfactoryQueryDenomsFromCreatorResponse: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryDenomsFromCreatorResponse;
/**
 * A decoded protobuf QueryBeforeSendHookAddressRequest message
 *
 * Alias for: denom -
 */
export type DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressRequest = [
    s_denom?: string
];
/**
 * Decodes a protobuf QueryBeforeSendHookAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressRequest}
 */
export declare const decodeOsmosisTokenfactoryQueryBeforeSendHookAddressRequest: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressRequest;
/**
 * A decoded protobuf QueryBeforeSendHookAddress message
 *
 * Alias for: cosmwasm_address -
 */
export type DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressResponse = [
    sa_cosmwasm?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryBeforeSendHookAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressResponse}
 */
export declare const decodeOsmosisTokenfactoryQueryBeforeSendHookAddressResponse: (atu8_payload: Uint8Array) => DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressResponse;
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructOsmosisTokenfactoryQueryParamsRequest: (g_struct: OsmosisTokenfactoryQueryParamsRequest) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_PARAMS_REQUEST = "/osmosis.tokenfactory.v1beta1.QueryParamsRequest";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryParamsRequest` - the request type for the Query/Params RPC method.
 */
export type OsmosisTokenfactoryQueryParamsRequest = {};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export declare const destructOsmosisTokenfactoryQueryParamsResponse: (g_struct: OsmosisTokenfactoryQueryParamsResponse) => [params?: OsmosisTokenfactoryParams];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_PARAMS_RESPONSE = "/osmosis.tokenfactory.v1beta1.QueryParamsResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryParamsResponse` - the response type for the Query/Params RPC method.
 */
export type OsmosisTokenfactoryQueryParamsResponse = {
    params?: OsmosisTokenfactoryParams | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomAuthorityMetadataRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 */
export declare const destructOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest: (g_struct: OsmosisTokenfactoryQueryDenomAuthorityMetadataRequest) => [denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOM_AUTHORITY_METADATA_REQUEST = "/osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest` - defines the request structure for the DenomAuthorityMetadata gRPC query.
 */
export type OsmosisTokenfactoryQueryDenomAuthorityMetadataRequest = {
    denom?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomAuthorityMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority_metadata -
 */
export declare const destructOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse: (g_struct: OsmosisTokenfactoryQueryDenomAuthorityMetadataResponse) => [authority_metadata?: OsmosisTokenfactoryDenomAuthorityMetadata];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOM_AUTHORITY_METADATA_RESPONSE = "/osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse` - defines the response structure for the DenomAuthorityMetadata gRPC query.
 */
export type OsmosisTokenfactoryQueryDenomAuthorityMetadataResponse = {
    authority_metadata?: OsmosisTokenfactoryDenomAuthorityMetadata | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomsFromCreatorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: creator -
 */
export declare const destructOsmosisTokenfactoryQueryDenomsFromCreatorRequest: (g_struct: OsmosisTokenfactoryQueryDenomsFromCreatorRequest) => [creator?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOMS_FROM_CREATOR_REQUEST = "/osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest` - defines the request structure for the DenomsFromCreator gRPC query.
 */
export type OsmosisTokenfactoryQueryDenomsFromCreatorRequest = {
    creator?: CwAccountAddr | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomsFromCreatorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denoms -
 */
export declare const destructOsmosisTokenfactoryQueryDenomsFromCreatorResponse: (g_struct: OsmosisTokenfactoryQueryDenomsFromCreatorResponse) => [denoms?: string[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOMS_FROM_CREATOR_RESPONSE = "/osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse` - QueryDenomsFromCreatorRequest defines the response structure for the DenomsFromCreator gRPC query.
 */
export type OsmosisTokenfactoryQueryDenomsFromCreatorResponse = {
    denoms?: string[] | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryBeforeSendHookAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 */
export declare const destructOsmosisTokenfactoryQueryBeforeSendHookAddressRequest: (g_struct: OsmosisTokenfactoryQueryBeforeSendHookAddressRequest) => [denom?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_BEFORE_SEND_HOOK_ADDRESS_REQUEST = "/osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest` -
 */
export type OsmosisTokenfactoryQueryBeforeSendHookAddressRequest = {
    denom?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryBeforeSendHookAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cosmwasm_address -
 */
export declare const destructOsmosisTokenfactoryQueryBeforeSendHookAddressResponse: (g_struct: OsmosisTokenfactoryQueryBeforeSendHookAddressResponse) => [cosmwasm_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_BEFORE_SEND_HOOK_ADDRESS_RESPONSE = "/osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse";
/**
 * JSON serialization of `osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse` - defines the response structure for the DenomBeforeSendHook gRPC query.
 */
export type OsmosisTokenfactoryQueryBeforeSendHookAddressResponse = {
    cosmwasm_address?: CwAccountAddr | undefined;
};
