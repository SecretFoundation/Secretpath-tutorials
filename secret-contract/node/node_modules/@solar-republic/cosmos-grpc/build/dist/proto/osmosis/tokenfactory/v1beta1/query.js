import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { decodeOsmosisTokenfactoryDenomAuthorityMetadata } from './authorityMetadata.js';
import { decodeOsmosisTokenfactoryParams } from './params.js';
const SR_LCD_OSMOSIS_TOKENFACTORY_QUERY = '/osmosis/tokenfactory/v1beta1/';
/**
 * Defines a gRPC query method that returns the tokenfactory module's parameters.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const queryOsmosisTokenfactoryParams = restful_grpc(() => [SR_LCD_OSMOSIS_TOKENFACTORY_QUERY + 'params']);
/**
 * Defines a gRPC query method for fetching DenomAuthorityMetadata for a particular denom.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: authority_metadata - the 'authority_metadata' response property
 */
export const queryOsmosisTokenfactoryDenomAuthorityMetadata = restful_grpc(s_denom => [SR_LCD_OSMOSIS_TOKENFACTORY_QUERY + 'denoms/' + s_denom + '/authority_metadata']);
/**
 * Defines a gRPC query method for fetching all denominations created by a specific admin/creator.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_creator -
 * @returns a tuple where:
 *   - 0: denoms - the 'denoms' response property
 */
export const queryOsmosisTokenfactoryDenomsFromCreator = restful_grpc(sa_creator => [SR_LCD_OSMOSIS_TOKENFACTORY_QUERY + 'denoms_from_creator/' + sa_creator]);
/**
 * Defines a gRPC query method for getting the address registered for the before send hook.
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_denom -
 * @returns a tuple where:
 *   - 0: cosmwasm_address - the 'cosmwasm_address' response property
 */
export const queryOsmosisTokenfactoryBeforeSendHookAddress = restful_grpc(s_denom => [SR_LCD_OSMOSIS_TOKENFACTORY_QUERY + 'denoms/' + s_denom + '/before_send_hook']);
/**
 * Encodes a `QueryParamsRequest` protobuf message: the request type for the Query/Params RPC method.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryParamsRequest = () => Protobuf() // ...
    .o;
/**
 * Encodes a `QueryParamsResponse` protobuf message: the response type for the Query/Params RPC method.
 * @param g_params - `params`: defines the parameters of the module.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryParamsResponse = (atu8_params) => Protobuf() // ...
    .b(atu8_params) // Params params = 1
    .o;
/**
 * Encodes a `QueryDenomAuthorityMetadataRequest` protobuf message: defines the request structure for the DenomAuthorityMetadata gRPC query.
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QueryDenomAuthorityMetadataResponse` protobuf message: defines the response structure for the DenomAuthorityMetadata gRPC query.
 * @param g_authority_metadata - `authority_metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse = (atu8_authority_metadata) => Protobuf() // ...
    .b(atu8_authority_metadata) // DenomAuthorityMetadata authority_metadata = 1
    .o;
/**
 * Encodes a `QueryDenomsFromCreatorRequest` protobuf message: defines the request structure for the DenomsFromCreator gRPC query.
 * @param sa_creator - `creator`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryDenomsFromCreatorRequest = (sa_creator) => Protobuf() // ...
    .s(sa_creator) // string creator = 1
    .o;
/**
 * Encodes a `QueryDenomsFromCreatorResponse` protobuf message: QueryDenomsFromCreatorRequest defines the response structure for the DenomsFromCreator gRPC query.
 * @param a_denoms - `denoms`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryDenomsFromCreatorResponse = (a_denoms) => Protobuf() // ...
    .S(a_denoms) // string[] denoms = 1
    .o;
/**
 * Encodes a `QueryBeforeSendHookAddressRequest` protobuf message:
 * @param s_denom - `denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryBeforeSendHookAddressRequest = (s_denom) => Protobuf() // ...
    .s(s_denom) // string denom = 1
    .o;
/**
 * Encodes a `QueryBeforeSendHookAddressResponse` protobuf message: defines the response structure for the DenomBeforeSendHook gRPC query.
 * @param sa_cosmwasm - `cosmwasm_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryQueryBeforeSendHookAddressResponse = (sa_cosmwasm) => Protobuf() // ...
    .s(sa_cosmwasm) // string cosmwasm_address = 1
    .o;
/**
 * Decodes a protobuf QueryParamsRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryParamsRequest}
 */
export const decodeOsmosisTokenfactoryQueryParamsRequest = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf QueryParams message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryParamsResponse}
 */
export const decodeOsmosisTokenfactoryQueryParamsResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisTokenfactoryParams]);
/**
 * Decodes a protobuf QueryDenomAuthorityMetadataRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest}
 */
export const decodeOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDenomAuthorityMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse}
 */
export const decodeOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1], [decodeOsmosisTokenfactoryDenomAuthorityMetadata]);
/**
 * Decodes a protobuf QueryDenomsFromCreatorRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomsFromCreatorRequest}
 */
export const decodeOsmosisTokenfactoryQueryDenomsFromCreatorRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryDenomsFromCreator message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryDenomsFromCreatorResponse}
 */
export const decodeOsmosisTokenfactoryQueryDenomsFromCreatorResponse = (atu8_payload) => decode_protobuf(atu8_payload, [4]);
/**
 * Decodes a protobuf QueryBeforeSendHookAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressRequest}
 */
export const decodeOsmosisTokenfactoryQueryBeforeSendHookAddressRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryBeforeSendHookAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryQueryBeforeSendHookAddressResponse}
 */
export const decodeOsmosisTokenfactoryQueryBeforeSendHookAddressResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryParamsRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryQueryParamsRequest = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_PARAMS_REQUEST = '/osmosis.tokenfactory.v1beta1.QueryParamsRequest';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryParamsResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: params - defines the parameters of the module.
 */
export const destructOsmosisTokenfactoryQueryParamsResponse = (g_struct) => [g_struct.params];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_PARAMS_RESPONSE = '/osmosis.tokenfactory.v1beta1.QueryParamsResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomAuthorityMetadataRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 */
export const destructOsmosisTokenfactoryQueryDenomAuthorityMetadataRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOM_AUTHORITY_METADATA_REQUEST = '/osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomAuthorityMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: authority_metadata -
 */
export const destructOsmosisTokenfactoryQueryDenomAuthorityMetadataResponse = (g_struct) => [g_struct.authority_metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOM_AUTHORITY_METADATA_RESPONSE = '/osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomsFromCreatorRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: creator -
 */
export const destructOsmosisTokenfactoryQueryDenomsFromCreatorRequest = (g_struct) => [g_struct.creator];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOMS_FROM_CREATOR_REQUEST = '/osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryDenomsFromCreatorResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denoms -
 */
export const destructOsmosisTokenfactoryQueryDenomsFromCreatorResponse = (g_struct) => [g_struct.denoms];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_DENOMS_FROM_CREATOR_RESPONSE = '/osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryBeforeSendHookAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: denom -
 */
export const destructOsmosisTokenfactoryQueryBeforeSendHookAddressRequest = (g_struct) => [g_struct.denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_BEFORE_SEND_HOOK_ADDRESS_REQUEST = '/osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryQueryBeforeSendHookAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: cosmwasm_address -
 */
export const destructOsmosisTokenfactoryQueryBeforeSendHookAddressResponse = (g_struct) => [g_struct.cosmwasm_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_QUERY_BEFORE_SEND_HOOK_ADDRESS_RESPONSE = '/osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse';
//# sourceMappingURL=query.js.map