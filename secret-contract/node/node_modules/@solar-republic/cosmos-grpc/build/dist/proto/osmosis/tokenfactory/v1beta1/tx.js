import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coin } from '../../../../api/protobuf-writer.js';
import { decodeCosmosBankMetadata } from '../../../cosmos/bank/v1beta1/bank.js';
/**
 * Encodes a `MsgCreateDenom` protobuf message: defines the message structure for the CreateDenom gRPC service method. It allows an account to create a new denom. It requires a sender address and a sub denomination. The (sender_address, sub_denomination) tuple must be unique and cannot be re-used. The resulting denom created is defined as <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is originally set to be the creator, but this can be changed later. The token denom does not indicate the current admin.
 * @param sa_sender - `sender`:
 * @param s_subdenom - `subdenom`: can be up to 44 "alphanumeric" characters long.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgCreateDenom = (sa_sender, s_subdenom) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_subdenom) // string subdenom = 2
    .o;
/**
 * Encodes a `MsgCreateDenomResponse` protobuf message: the return value of MsgCreateDenom It returns the full string of the newly created denom
 * @param s_new_token_denom - `new_token_denom`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgCreateDenomResponse = (s_new_token_denom) => Protobuf() // ...
    .s(s_new_token_denom) // string new_token_denom = 1
    .o;
/**
 * Encodes a `MsgMint` protobuf message: the sdk.Msg type for allowing an admin account to mint more of a token. Only the admin of the token factory denom has permission to mint unless the denom does not have any admin.
 * @param sa_sender - `sender`:
 * @param a_amount - `amount`:
 * @param s_mintToAddress - `mintToAddress`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgMint = (sa_sender, a_amount, s_mintToAddress) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .b(coin(a_amount)) // Coin amount = 2
    .s(s_mintToAddress) // string mintToAddress = 3
    .o;
/**
 * Encodes a `MsgMintResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgMintResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgBurn` protobuf message: the sdk.Msg type for allowing an admin account to burn a token. Only the admin of the token factory denom has permission to burn unless the denom does not have any admin.
 * @param sa_sender - `sender`:
 * @param a_amount - `amount`:
 * @param s_burnFromAddress - `burnFromAddress`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgBurn = (sa_sender, a_amount, s_burnFromAddress) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .b(coin(a_amount)) // Coin amount = 2
    .s(s_burnFromAddress) // string burnFromAddress = 3
    .o;
/**
 * Encodes a `MsgBurnResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgBurnResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgChangeAdmin` protobuf message: the sdk.Msg type for allowing an admin account to reassign adminship of a denom to a new account
 * @param sa_sender - `sender`:
 * @param s_denom - `denom`:
 * @param s_new_admin - `new_admin`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgChangeAdmin = (sa_sender, s_denom, s_new_admin) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_denom) // string denom = 2
    .s(s_new_admin) // string new_admin = 3
    .o;
/**
 * Encodes a `MsgChangeAdminResponse` protobuf message: defines the response structure for an executed MsgChangeAdmin message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgChangeAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetBeforeSendHook` protobuf message: the sdk.Msg type for allowing an admin account to assign a CosmWasm contract to call with a BeforeSend hook
 * @param sa_sender - `sender`:
 * @param s_denom - `denom`:
 * @param sa_cosmwasm - `cosmwasm_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgSetBeforeSendHook = (sa_sender, s_denom, sa_cosmwasm) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_denom) // string denom = 2
    .s(sa_cosmwasm) // string cosmwasm_address = 3
    .o;
/**
 * Encodes a `MsgSetBeforeSendHookResponse` protobuf message: defines the response structure for an executed MsgSetBeforeSendHook message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgSetBeforeSendHookResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgSetDenomMetadata` protobuf message: the sdk.Msg type for allowing an admin account to set the denom's bank metadata
 * @param sa_sender - `sender`:
 * @param g_metadata - `metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgSetDenomMetadata = (sa_sender, atu8_metadata) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .b(atu8_metadata) // Metadata metadata = 2
    .o;
/**
 * Encodes a `MsgSetDenomMetadataResponse` protobuf message: defines the response structure for an executed MsgSetDenomMetadata message.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgSetDenomMetadataResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgForceTransfer` protobuf message:
 * @param sa_sender - `sender`:
 * @param a_amount - `amount`:
 * @param s_transferFromAddress - `transferFromAddress`:
 * @param s_transferToAddress - `transferToAddress`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgForceTransfer = (sa_sender, a_amount, s_transferFromAddress, s_transferToAddress) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .b(coin(a_amount)) // Coin amount = 2
    .s(s_transferFromAddress) // string transferFromAddress = 3
    .s(s_transferToAddress) // string transferToAddress = 4
    .o;
/**
 * Encodes a `MsgForceTransferResponse` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTokenfactoryMsgForceTransferResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf CreateDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgCreateDenom}
 */
export const decodeOsmosisTokenfactoryMsgCreateDenom = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf CreateDenom message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgCreateDenomResponse}
 */
export const decodeOsmosisTokenfactoryMsgCreateDenomResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf Mint message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgMint}
 */
export const decodeOsmosisTokenfactoryMsgMint = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5], [0, decode_coin]);
/**
 * Decodes a protobuf Mint message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgMintResponse}
 */
export const decodeOsmosisTokenfactoryMsgMintResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf Burn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgBurn}
 */
export const decodeOsmosisTokenfactoryMsgBurn = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5], [0, decode_coin]);
/**
 * Decodes a protobuf Burn message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgBurnResponse}
 */
export const decodeOsmosisTokenfactoryMsgBurnResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ChangeAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgChangeAdmin}
 */
export const decodeOsmosisTokenfactoryMsgChangeAdmin = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf ChangeAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgChangeAdminResponse}
 */
export const decodeOsmosisTokenfactoryMsgChangeAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetBeforeSendHook message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetBeforeSendHook}
 */
export const decodeOsmosisTokenfactoryMsgSetBeforeSendHook = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf SetBeforeSendHook message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetBeforeSendHookResponse}
 */
export const decodeOsmosisTokenfactoryMsgSetBeforeSendHookResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf SetDenomMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetDenomMetadata}
 */
export const decodeOsmosisTokenfactoryMsgSetDenomMetadata = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeCosmosBankMetadata]);
/**
 * Decodes a protobuf SetDenomMetadata message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgSetDenomMetadataResponse}
 */
export const decodeOsmosisTokenfactoryMsgSetDenomMetadataResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ForceTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgForceTransfer}
 */
export const decodeOsmosisTokenfactoryMsgForceTransfer = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1, 5, 5], [0, decode_coin]);
/**
 * Decodes a protobuf ForceTransfer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTokenfactoryMsgForceTransferResponse}
 */
export const decodeOsmosisTokenfactoryMsgForceTransferResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgCreateDenom} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: subdenom - can be up to 44 "alphanumeric" characters long.
 */
export const destructOsmosisTokenfactoryMsgCreateDenom = (g_struct) => [g_struct.sender, g_struct.subdenom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CREATE_DENOM = '/osmosis.tokenfactory.v1beta1.MsgCreateDenom';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgCreateDenomResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: new_token_denom -
 */
export const destructOsmosisTokenfactoryMsgCreateDenomResponse = (g_struct) => [g_struct.new_token_denom];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CREATE_DENOM_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgMint} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: mintToAddress -
 */
export const destructOsmosisTokenfactoryMsgMint = (g_struct) => [g_struct.sender, g_struct.amount, g_struct.mintToAddress];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_MINT = '/osmosis.tokenfactory.v1beta1.MsgMint';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgMintResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryMsgMintResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_MINT_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgMintResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgBurn} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: burnFromAddress -
 */
export const destructOsmosisTokenfactoryMsgBurn = (g_struct) => [g_struct.sender, g_struct.amount, g_struct.burnFromAddress];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_BURN = '/osmosis.tokenfactory.v1beta1.MsgBurn';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgBurnResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryMsgBurnResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_BURN_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgBurnResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgChangeAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: denom -
 *   - 2: new_admin -
 */
export const destructOsmosisTokenfactoryMsgChangeAdmin = (g_struct) => [g_struct.sender, g_struct.denom, g_struct.new_admin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CHANGE_ADMIN = '/osmosis.tokenfactory.v1beta1.MsgChangeAdmin';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgChangeAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryMsgChangeAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_CHANGE_ADMIN_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetBeforeSendHook} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: denom -
 *   - 2: cosmwasm_address -
 */
export const destructOsmosisTokenfactoryMsgSetBeforeSendHook = (g_struct) => [g_struct.sender, g_struct.denom, g_struct.cosmwasm_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_BEFORE_SEND_HOOK = '/osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetBeforeSendHookResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryMsgSetBeforeSendHookResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_BEFORE_SEND_HOOK_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetDenomMetadata} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: metadata -
 */
export const destructOsmosisTokenfactoryMsgSetDenomMetadata = (g_struct) => [g_struct.sender, g_struct.metadata];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_DENOM_METADATA = '/osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgSetDenomMetadataResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryMsgSetDenomMetadataResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_SET_DENOM_METADATA_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgForceTransfer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender -
 *   - 1: amount -
 *   - 2: transferFromAddress -
 *   - 3: transferToAddress -
 */
export const destructOsmosisTokenfactoryMsgForceTransfer = (g_struct) => [g_struct.sender, g_struct.amount, g_struct.transferFromAddress, g_struct.transferToAddress];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_FORCE_TRANSFER = '/osmosis.tokenfactory.v1beta1.MsgForceTransfer';
/**
 * Destructures the fields of a {@link OsmosisTokenfactoryMsgForceTransferResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructOsmosisTokenfactoryMsgForceTransferResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TOKENFACTORY_MSG_FORCE_TRANSFER_RESPONSE = '/osmosis.tokenfactory.v1beta1.MsgForceTransferResponse';
//# sourceMappingURL=tx.js.map