/*
* ================================
*     GENERATED FILE WARNING
* Do not edit this file manually.
* ================================
*/
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf, any } from '../../../../api/protobuf-writer.js';
import { decodeOsmosisTxfeesFeeToken } from './feetoken.js';
/**
 * Encodes a `UpdateFeeTokenProposal` protobuf message wrapped in the `Any` container: a gov Content type for adding new whitelisted fee token(s). It must specify a denom along with gamm pool ID to use as a spot price calculator. It can be used to add new denoms to the whitelist. It can also be used to update the Pool to associate with the denom. If Pool ID is set to 0, it will remove the denom from the whitelisted set.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_feetokens - `feetokens`:
 * @returns a strongly subtyped Uint8Array representing an `Any` protobuf message
 */
export const anyUpdateFeeTokenProposal = (s_title, s_description, a_feetokens) => any('/osmosis.txfees.v1beta1.UpdateFeeTokenProposal', Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .B(a_feetokens) // FeeToken[] feetokens = 3
    .o);
/**
 * Encodes a `UpdateFeeTokenProposal` protobuf message: a gov Content type for adding new whitelisted fee token(s). It must specify a denom along with gamm pool ID to use as a spot price calculator. It can be used to add new denoms to the whitelist. It can also be used to update the Pool to associate with the denom. If Pool ID is set to 0, it will remove the denom from the whitelisted set.
 * @param s_title - `title`:
 * @param s_description - `description`:
 * @param a_feetokens - `feetokens`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisTxfeesUpdateFeeTokenProposal = (s_title, s_description, a_feetokens) => Protobuf() // ...
    .s(s_title) // string title = 1
    .s(s_description) // string description = 2
    .B(a_feetokens) // FeeToken[] feetokens = 3
    .o;
/**
 * Decodes a protobuf UpdateFeeTokenProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisTxfeesUpdateFeeTokenProposal}
 */
export const decodeOsmosisTxfeesUpdateFeeTokenProposal = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 0], [0, 0, decodeOsmosisTxfeesFeeToken]);
/**
 * Destructures the fields of a {@link OsmosisTxfeesUpdateFeeTokenProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: title -
 *   - 1: description -
 *   - 2: feetokens -
 */
export const destructOsmosisTxfeesUpdateFeeTokenProposal = (g_struct) => [g_struct.title, g_struct.description, g_struct.feetokens];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_TXFEES_UPDATE_FEE_TOKEN_PROPOSAL = '/osmosis.txfees.v1beta1.UpdateFeeTokenProposal';
//# sourceMappingURL=gov.js.map