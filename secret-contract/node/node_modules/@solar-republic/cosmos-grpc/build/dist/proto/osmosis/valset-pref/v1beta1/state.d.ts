import type { WeakValidatorAddr, CwValidatorAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedOsmosisValsetprefValidatorPreference = Encoded<'/osmosis.valsetpref.v1beta1.ValidatorPreference'>;
export type EncodedOsmosisValsetprefValidatorSetPreferences = Encoded<'/osmosis.valsetpref.v1beta1.ValidatorSetPreferences'>;
/**
 * Encodes a `ValidatorPreference` protobuf message: defines the message structure for CreateValidatorSetPreference. It allows a user to set {val_addr, weight} in state. If a user does not have a validator set preference list set, and has staked, make their preference list default to their current staking distribution.
 * @param sa_val_oper - `val_oper_address`: holds the validator address the user wants to delegate funds to.
 * @param s_weight - `weight`: decimal between 0 and 1, and they all sum to 1.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefValidatorPreference: (sa_val_oper?: Opt<WeakValidatorAddr>, s_weight?: Opt<string>) => EncodedOsmosisValsetprefValidatorPreference;
/**
 * Encodes a `ValidatorSetPreferences` protobuf message: defines a delegator's validator set preference. It contains a list of (validator, percent_allocation) pairs. The percent allocation are arranged in decimal notation from 0 to 1 and must add up to 1.
 * @param a_preferences - `preferences`: preference holds {valAddr, weight} for the user who created it.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeOsmosisValsetprefValidatorSetPreferences: (a_preferences?: Opt<Encoded<'/osmosis.valsetpref.v1beta1.ValidatorPreference'>[]>) => EncodedOsmosisValsetprefValidatorSetPreferences;
/**
 * A decoded protobuf ValidatorPreference message
 *
 * Tuple where:
 *   - 0: val_oper_address - holds the validator address the user wants to delegate funds to.
 *   - 1: weight - decimal between 0 and 1, and they all sum to 1.
 */
export type DecodedOsmosisValsetprefValidatorPreference = [
    sa_val_oper?: CwValidatorAddr,
    s_weight?: string
];
/**
 * Decodes a protobuf ValidatorPreference message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefValidatorPreference}
 */
export declare const decodeOsmosisValsetprefValidatorPreference: (atu8_payload: Uint8Array) => DecodedOsmosisValsetprefValidatorPreference;
/**
 * A decoded protobuf ValidatorSetPreferences message
 *
 * Alias for: preferences - preference holds {valAddr, weight} for the user who created it.
 */
export type DecodedOsmosisValsetprefValidatorSetPreferences = [
    w_0?: undefined,
    a_preferences?: DecodedOsmosisValsetprefValidatorPreference[]
];
/**
 * Decodes a protobuf ValidatorSetPreferences message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisValsetprefValidatorSetPreferences}
 */
export declare const decodeOsmosisValsetprefValidatorSetPreferences: (atu8_payload: Uint8Array, RESERVED?: never) => DecodedOsmosisValsetprefValidatorSetPreferences;
/**
 * Destructures the fields of a {@link OsmosisValsetprefValidatorPreference} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: val_oper_address - holds the validator address the user wants to delegate funds to.
 *   - 1: weight - decimal between 0 and 1, and they all sum to 1.
 */
export declare const destructOsmosisValsetprefValidatorPreference: (g_struct: OsmosisValsetprefValidatorPreference) => [val_oper_address?: CwValidatorAddr, weight?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_VALIDATOR_PREFERENCE = "/osmosis.valsetpref.v1beta1.ValidatorPreference";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.ValidatorPreference` - defines the message structure for CreateValidatorSetPreference. It allows a user to set {val_addr, weight} in state. If a user does not have a validator set preference list set, and has staked, make their preference list default to their current staking distribution.
 */
export type OsmosisValsetprefValidatorPreference = {
    val_oper_address?: CwValidatorAddr | undefined;
    weight?: string | undefined;
};
/**
 * Destructures the fields of a {@link OsmosisValsetprefValidatorSetPreferences} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: preferences - preference holds {valAddr, weight} for the user who created it.
 */
export declare const destructOsmosisValsetprefValidatorSetPreferences: (g_struct: OsmosisValsetprefValidatorSetPreferences) => [EMPTY?: void, preferences?: OsmosisValsetprefValidatorPreference[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_VALIDATOR_SET_PREFERENCES = "/osmosis.valsetpref.v1beta1.ValidatorSetPreferences";
/**
 * JSON serialization of `osmosis.valsetpref.v1beta1.ValidatorSetPreferences` - defines a delegator's validator set preference. It contains a list of (validator, percent_allocation) pairs. The percent allocation are arranged in decimal notation from 0 to 1 and must add up to 1.
 */
export type OsmosisValsetprefValidatorSetPreferences = {
    preferences?: OsmosisValsetprefValidatorPreference[] | undefined;
};
