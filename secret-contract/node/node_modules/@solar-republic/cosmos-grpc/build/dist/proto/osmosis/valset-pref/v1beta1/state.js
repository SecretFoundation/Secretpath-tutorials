import { __UNDEFINED } from '@blake.regalia/belt';
import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
/**
 * Encodes a `ValidatorPreference` protobuf message: defines the message structure for CreateValidatorSetPreference. It allows a user to set {val_addr, weight} in state. If a user does not have a validator set preference list set, and has staked, make their preference list default to their current staking distribution.
 * @param sa_val_oper - `val_oper_address`: holds the validator address the user wants to delegate funds to.
 * @param s_weight - `weight`: decimal between 0 and 1, and they all sum to 1.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefValidatorPreference = (sa_val_oper, s_weight) => Protobuf() // ...
    .s(sa_val_oper) // string val_oper_address = 1
    .s(s_weight) // string weight = 2
    .o;
/**
 * Encodes a `ValidatorSetPreferences` protobuf message: defines a delegator's validator set preference. It contains a list of (validator, percent_allocation) pairs. The percent allocation are arranged in decimal notation from 0 to 1 and must add up to 1.
 * @param a_preferences - `preferences`: preference holds {valAddr, weight} for the user who created it.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeOsmosisValsetprefValidatorSetPreferences = (a_preferences) => Protobuf() // ...
    .B(a_preferences, 2) // ValidatorPreference[] preferences = 2
    .o;
/**
 * Decodes a protobuf ValidatorPreference message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedOsmosisValsetprefValidatorPreference}
 */
export const decodeOsmosisValsetprefValidatorPreference = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf ValidatorSetPreferences message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedOsmosisValsetprefValidatorSetPreferences}
 */
export const decodeOsmosisValsetprefValidatorSetPreferences = ((atu8_payload, [, a_preferences] = decode_protobuf(atu8_payload, [0, 0], [0, decodeOsmosisValsetprefValidatorPreference])) => [__UNDEFINED, a_preferences]);
/**
 * Destructures the fields of a {@link OsmosisValsetprefValidatorPreference} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: val_oper_address - holds the validator address the user wants to delegate funds to.
 *   - 1: weight - decimal between 0 and 1, and they all sum to 1.
 */
export const destructOsmosisValsetprefValidatorPreference = (g_struct) => [g_struct.val_oper_address, g_struct.weight];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_VALIDATOR_PREFERENCE = '/osmosis.valsetpref.v1beta1.ValidatorPreference';
/**
 * Destructures the fields of a {@link OsmosisValsetprefValidatorSetPreferences} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 1: preferences - preference holds {valAddr, weight} for the user who created it.
 */
export const destructOsmosisValsetprefValidatorSetPreferences = (g_struct) => [__UNDEFINED, g_struct.preferences];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_OSMOSIS_VALSETPREF_VALIDATOR_SET_PREFERENCES = '/osmosis.valsetpref.v1beta1.ValidatorSetPreferences';
//# sourceMappingURL=state.js.map