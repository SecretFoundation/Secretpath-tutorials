import { __UNDEFINED } from '@blake.regalia/belt';
import { bech32_decode } from '@solar-republic/crypto';
import { decode_protobuf, decode_coin } from '../../../../api/protobuf-reader.js';
import { Protobuf, coins } from '../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../api/util.js';
/**
 * Encodes a `MsgStoreCode` protobuf message:
 * @param sa_sender - `sender`: the canonical address of the sender
 * @param atu8_wasm_byte_code - `wasm_byte_code`: WASMByteCode can be raw or gzip compressed
 * @param s_source - `source`: Source is a valid absolute HTTPS URI to the contract's source code, optional
 * @param s_builder - `builder`: Builder is a valid docker image name with tag, optional
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgStoreCode = (sa_sender, atu8_wasm_byte_code, s_source, s_builder) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(atu8_wasm_byte_code) // bytes wasm_byte_code = 2
    .s(s_source) // string source = 3
    .s(s_builder) // string builder = 4
    .o;
/**
 * Encodes a `MsgStoreCodeResponse` protobuf message: returns store result data.
 * @param sg_code_id - `code_id`: CodeID is the reference to the stored WASM code
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgStoreCodeResponse = (sg_code_id) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .o;
/**
 * Encodes a `MsgInstantiateContract` protobuf message:
 * @param sa_sender - `sender`: the canonical address of the sender
 * @param sb16_callback_code_hash - `callback_code_hash`:
 * @param sg_code_id - `code_id`:
 * @param s_label - `label`:
 * @param atu8_init_msg - `init_msg`: an encrypted input to pass to the contract on init
 * @param a_init_funds - `init_funds`:
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @param s_admin - `admin`: Admin is an optional address that can execute migrations
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgInstantiateContract = (sa_sender, sb16_callback_code_hash, sg_code_id, s_label, atu8_init_msg, a_init_funds, atu8_callback_sig, s_admin) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .s(sb16_callback_code_hash) // string callback_code_hash = 2
    .g(sg_code_id) // uint64 code_id = 3
    .s(s_label) // string label = 4
    .b(atu8_init_msg) // bytes init_msg = 5
    .B(coins(a_init_funds)) // Coin[] init_funds = 6
    .b(atu8_callback_sig) // bytes callback_sig = 7
    .s(s_admin) // string admin = 8
    .o;
/**
 * Encodes a `MsgInstantiateContractResponse` protobuf message: return instantiation result data
 * @param sa_address - `address`: Address is the bech32 address of the new contract instance.
 * @param atu8_data - `data`: Data contains base64-encoded bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgInstantiateContractResponse = (sa_address, atu8_data) => Protobuf() // ...
    .s(sa_address) // string address = 1
    .b(atu8_data) // bytes data = 2
    .o;
/**
 * Encodes a `MsgExecuteContract` protobuf message:
 * @param sa_sender - `sender`: the canonical address of the sender
 * @param sa_contract - `contract`: the canonical address of the contract
 * @param atu8_msg - `msg`: an encrypted input to pass to the contract on execute
 * @param sb16_callback_code_hash - `callback_code_hash`: used internally for encryption, should always be empty in a signed transaction
 * @param a_sent_funds - `sent_funds`:
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgExecuteContract = (sa_sender, sa_contract, atu8_msg, sb16_callback_code_hash, a_sent_funds, atu8_callback_sig) => Protobuf() // ...
    .b(bech32_decode(sa_sender)) // bytes sender = 1
    .b(bech32_decode(sa_contract)) // bytes contract = 2
    .b(atu8_msg) // bytes msg = 3
    .s(sb16_callback_code_hash) // string callback_code_hash = 4
    .B(coins(a_sent_funds)) // Coin[] sent_funds = 5
    .b(atu8_callback_sig) // bytes callback_sig = 6
    .o;
/**
 * Encodes a `MsgExecuteContractResponse` protobuf message: returns execution result data.
 * @param atu8_data - `data`: Data contains base64-encoded bytes to returned from the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgExecuteContractResponse = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `MsgMigrateContract` protobuf message: runs a code upgrade/ downgrade for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param sg_code_id - `code_id`: CodeID references the new WASM code
 * @param atu8_msg - `msg`: an encrypted input to pass to the contract on migration
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @param sb16_callback_code_hash - `callback_code_hash`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgMigrateContract = (sa_sender, s_contract, sg_code_id, atu8_msg, atu8_callback_sig, sb16_callback_code_hash) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_contract) // string contract = 2
    .g(sg_code_id) // uint64 code_id = 3
    .b(atu8_msg) // bytes msg = 4
    .b(atu8_callback_sig, 7) // bytes callback_sig = 7
    .s(sb16_callback_code_hash, 8) // string callback_code_hash = 8
    .o;
/**
 * Encodes a `MsgMigrateContractResponse` protobuf message: returns contract migration result data.
 * @param atu8_data - `data`: Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgMigrateContractResponse = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `MsgUpdateAdmin` protobuf message: sets a new admin for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_new_admin - `new_admin`: NewAdmin address to be set
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgUpdateAdmin = (sa_sender, s_new_admin, s_contract, atu8_callback_sig) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_new_admin) // string new_admin = 2
    .s(s_contract) // string contract = 3
    .b(atu8_callback_sig, 7) // bytes callback_sig = 7
    .o;
/**
 * Encodes a `MsgUpdateAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgUpdateAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Encodes a `MsgClearAdmin` protobuf message: removes any admin stored for a smart contract
 * @param sa_sender - `sender`: Sender is the that actor that signed the messages
 * @param s_contract - `contract`: Contract is the address of the smart contract
 * @param atu8_callback_sig - `callback_sig`: used internally for encryption, should always be empty in a signed transaction
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgClearAdmin = (sa_sender, s_contract, atu8_callback_sig) => Protobuf() // ...
    .s(sa_sender) // string sender = 1
    .s(s_contract, 3) // string contract = 3
    .b(atu8_callback_sig, 7) // bytes callback_sig = 7
    .o;
/**
 * Encodes a `MsgClearAdminResponse` protobuf message: returns empty data
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeMsgClearAdminResponse = () => Protobuf() // ...
    .o;
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgStoreCode}
 */
export const decodeSecretComputeMsgStoreCode = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5, 5]);
/**
 * Decodes a protobuf StoreCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgStoreCodeResponse}
 */
export const decodeSecretComputeMsgStoreCodeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgInstantiateContract}
 */
export const decodeSecretComputeMsgInstantiateContract = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3, 5, 1, 0, 1, 5], [0, 0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf InstantiateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgInstantiateContractResponse}
 */
export const decodeSecretComputeMsgInstantiateContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgExecuteContract}
 */
export const decodeSecretComputeMsgExecuteContract = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 5, 0, 1], [0, 0, 0, 0, decode_coin]);
/**
 * Decodes a protobuf ExecuteContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgExecuteContractResponse}
 */
export const decodeSecretComputeMsgExecuteContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedSecretComputeMsgMigrateContract}
 */
export const decodeSecretComputeMsgMigrateContract = ((atu8_payload, [sa_sender, s_contract, sg_code_id, atu8_msg, , , atu8_callback_sig, sb16_callback_code_hash] = decode_protobuf(atu8_payload, [5, 5, 3, 1, 0, 0, 1, 5])) => [sa_sender, s_contract, sg_code_id, atu8_msg, __UNDEFINED, __UNDEFINED, atu8_callback_sig, sb16_callback_code_hash]);
/**
 * Decodes a protobuf MigrateContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgMigrateContractResponse}
 */
export const decodeSecretComputeMsgMigrateContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedSecretComputeMsgUpdateAdmin}
 */
export const decodeSecretComputeMsgUpdateAdmin = ((atu8_payload, [sa_sender, s_new_admin, s_contract, , , , atu8_callback_sig] = decode_protobuf(atu8_payload, [5, 5, 5, 0, 0, 0, 1])) => [sa_sender, s_new_admin, s_contract, __UNDEFINED, __UNDEFINED, __UNDEFINED, atu8_callback_sig]);
/**
 * Decodes a protobuf UpdateAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgUpdateAdminResponse}
 */
export const decodeSecretComputeMsgUpdateAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedSecretComputeMsgClearAdmin}
 */
export const decodeSecretComputeMsgClearAdmin = ((atu8_payload, [sa_sender, , s_contract, , , , atu8_callback_sig] = decode_protobuf(atu8_payload, [5, 0, 5, 0, 0, 0, 1])) => [sa_sender, __UNDEFINED, s_contract, __UNDEFINED, __UNDEFINED, __UNDEFINED, atu8_callback_sig]);
/**
 * Decodes a protobuf ClearAdmin message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeMsgClearAdminResponse}
 */
export const decodeSecretComputeMsgClearAdminResponse = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Destructures the fields of a {@link SecretComputeMsgStoreCode} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: wasm_byte_code - WASMByteCode can be raw or gzip compressed
 *   - 2: source - Source is a valid absolute HTTPS URI to the contract's source code, optional
 *   - 3: builder - Builder is a valid docker image name with tag, optional
 */
export const destructSecretComputeMsgStoreCode = (g_struct) => [g_struct.sender, safe_base64_to_bytes(g_struct.wasm_byte_code), g_struct.source, g_struct.builder];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_STORE_CODE = '/secret.compute.v1beta1.MsgStoreCode';
/**
 * Destructures the fields of a {@link SecretComputeMsgStoreCodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id - CodeID is the reference to the stored WASM code
 */
export const destructSecretComputeMsgStoreCodeResponse = (g_struct) => [g_struct.code_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_STORE_CODE_RESPONSE = '/secret.compute.v1beta1.MsgStoreCodeResponse';
/**
 * Destructures the fields of a {@link SecretComputeMsgInstantiateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: callback_code_hash -
 *   - 2: code_id -
 *   - 3: label -
 *   - 4: init_msg - an encrypted input to pass to the contract on init
 *   - 5: init_funds -
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 *   - 7: admin - Admin is an optional address that can execute migrations
 */
export const destructSecretComputeMsgInstantiateContract = (g_struct) => [g_struct.sender, g_struct.callback_code_hash, g_struct.code_id, g_struct.label, safe_base64_to_bytes(g_struct.init_msg), g_struct.init_funds, safe_base64_to_bytes(g_struct.callback_sig), g_struct.admin];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_INSTANTIATE_CONTRACT = '/secret.compute.v1beta1.MsgInstantiateContract';
/**
 * Destructures the fields of a {@link SecretComputeMsgInstantiateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address - Address is the bech32 address of the new contract instance.
 *   - 1: data - Data contains base64-encoded bytes to returned from the contract
 */
export const destructSecretComputeMsgInstantiateContractResponse = (g_struct) => [g_struct.address, safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_INSTANTIATE_CONTRACT_RESPONSE = '/secret.compute.v1beta1.MsgInstantiateContractResponse';
/**
 * Destructures the fields of a {@link SecretComputeMsgExecuteContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - the canonical address of the sender
 *   - 1: contract - the canonical address of the contract
 *   - 2: msg - an encrypted input to pass to the contract on execute
 *   - 3: callback_code_hash - used internally for encryption, should always be empty in a signed transaction
 *   - 4: sent_funds -
 *   - 5: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export const destructSecretComputeMsgExecuteContract = (g_struct) => [g_struct.sender, g_struct.contract, safe_base64_to_bytes(g_struct.msg), g_struct.callback_code_hash, g_struct.sent_funds, safe_base64_to_bytes(g_struct.callback_sig)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_EXECUTE_CONTRACT = '/secret.compute.v1beta1.MsgExecuteContract';
/**
 * Destructures the fields of a {@link SecretComputeMsgExecuteContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains base64-encoded bytes to returned from the contract
 */
export const destructSecretComputeMsgExecuteContractResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_EXECUTE_CONTRACT_RESPONSE = '/secret.compute.v1beta1.MsgExecuteContractResponse';
/**
 * Destructures the fields of a {@link SecretComputeMsgMigrateContract} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: contract - Contract is the address of the smart contract
 *   - 2: code_id - CodeID references the new WASM code
 *   - 3: msg - an encrypted input to pass to the contract on migration
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 *   - 7: callback_code_hash - used internally for encryption, should always be empty in a signed transaction
 */
export const destructSecretComputeMsgMigrateContract = (g_struct) => [g_struct.sender, g_struct.contract, g_struct.code_id, safe_base64_to_bytes(g_struct.msg), __UNDEFINED, __UNDEFINED, safe_base64_to_bytes(g_struct.callback_sig), g_struct.callback_code_hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_MIGRATE_CONTRACT = '/secret.compute.v1beta1.MsgMigrateContract';
/**
 * Destructures the fields of a {@link SecretComputeMsgMigrateContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data - Data contains same raw bytes returned as data from the wasm contract. (May be empty)
 */
export const destructSecretComputeMsgMigrateContractResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_MIGRATE_CONTRACT_RESPONSE = '/secret.compute.v1beta1.MsgMigrateContractResponse';
/**
 * Destructures the fields of a {@link SecretComputeMsgUpdateAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 1: new_admin - NewAdmin address to be set
 *   - 2: contract - Contract is the address of the smart contract
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export const destructSecretComputeMsgUpdateAdmin = (g_struct) => [g_struct.sender, g_struct.new_admin, g_struct.contract, __UNDEFINED, __UNDEFINED, __UNDEFINED, safe_base64_to_bytes(g_struct.callback_sig)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_UPDATE_ADMIN = '/secret.compute.v1beta1.MsgUpdateAdmin';
/**
 * Destructures the fields of a {@link SecretComputeMsgUpdateAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructSecretComputeMsgUpdateAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_UPDATE_ADMIN_RESPONSE = '/secret.compute.v1beta1.MsgUpdateAdminResponse';
/**
 * Destructures the fields of a {@link SecretComputeMsgClearAdmin} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sender - Sender is the that actor that signed the messages
 *   - 2: contract - Contract is the address of the smart contract
 *   - 6: callback_sig - used internally for encryption, should always be empty in a signed transaction
 */
export const destructSecretComputeMsgClearAdmin = (g_struct) => [g_struct.sender, __UNDEFINED, g_struct.contract, __UNDEFINED, __UNDEFINED, __UNDEFINED, safe_base64_to_bytes(g_struct.callback_sig)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_CLEAR_ADMIN = '/secret.compute.v1beta1.MsgClearAdmin';
/**
 * Destructures the fields of a {@link SecretComputeMsgClearAdminResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructSecretComputeMsgClearAdminResponse = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_MSG_CLEAR_ADMIN_RESPONSE = '/secret.compute.v1beta1.MsgClearAdminResponse';
//# sourceMappingURL=msg.js.map