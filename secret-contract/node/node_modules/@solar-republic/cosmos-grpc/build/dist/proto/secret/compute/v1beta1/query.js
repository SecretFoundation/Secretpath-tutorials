import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64, safe_base64_to_bytes } from '../../../../api/util.js';
import { decodeCosmosBaseAbciStringEvent } from '../../../cosmos/base/abci/v1beta1/abci.js';
import { decodeSecretComputeContractInfo, decodeSecretComputeContractCodeHistoryEntry } from './types.js';
const SR_LCD_SECRET_COMPUTE_QUERY = '/compute/v1beta1/';
/**
 * Query contract info by address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info - the bech32 human readable address of the contract
 */
export const querySecretComputeContractInfo = restful_grpc(sa_contract => [SR_LCD_SECRET_COMPUTE_QUERY + 'info/' + sa_contract]);
/**
 * Query code info by id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_code_id -
 * @returns a tuple where:
 *   - 0: contract_infos - the 'contract_infos' response property
 */
export const querySecretComputeContractsByCodeId = restful_grpc(sg_code_id => [SR_LCD_SECRET_COMPUTE_QUERY + 'contracts/' + sg_code_id]);
/**
 * Query secret contract
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @param atu8_query -
 * @returns a tuple where:
 *   - 0: data - the 'data' response property
 */
export const querySecretComputeQuerySecretContract = restful_grpc((sa_contract, atu8_query) => [SR_LCD_SECRET_COMPUTE_QUERY + 'query/' + sa_contract, {
        query: safe_bytes_to_base64(atu8_query),
    }]);
/**
 * Query a specific contract code by id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_code_id -
 * @returns a tuple where:
 *   - 0: code_info - the 'code_info' response property
 *   - 1: wasm - the 'code_info' response property
 */
export const querySecretComputeCode = restful_grpc(sg_code_id => [SR_LCD_SECRET_COMPUTE_QUERY + 'code/' + sg_code_id]);
/**
 * Query all contract codes on-chain
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: code_infos - the 'code_infos' response property
 */
export const querySecretComputeCodes = restful_grpc(() => [SR_LCD_SECRET_COMPUTE_QUERY + 'codes']);
/**
 * Query code hash by contract address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @returns a tuple where:
 *   - 0: code_hash - the 'code_hash' response property
 */
export const querySecretComputeCodeHashByContractAddress = restful_grpc(sa_contract => [SR_LCD_SECRET_COMPUTE_QUERY + 'code_hash/by_contract_address/' + sa_contract]);
/**
 * Query code hash by code id
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sg_code_id -
 * @returns a tuple where:
 *   - 0: code_hash - the 'code_hash' response property
 */
export const querySecretComputeCodeHashByCodeId = restful_grpc(sg_code_id => [SR_LCD_SECRET_COMPUTE_QUERY + 'code_hash/by_code_id/' + sg_code_id]);
/**
 * Query contract label by address
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the bech32 human readable address of the contract
 * @returns a tuple where:
 *   - 0: label - the 'label' response property
 */
export const querySecretComputeLabelByAddress = restful_grpc(sa_contract => [SR_LCD_SECRET_COMPUTE_QUERY + 'label/' + sa_contract]);
/**
 * Query contract address by label
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param s_label -
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 */
export const querySecretComputeAddressByLabel = restful_grpc(s_label => [SR_LCD_SECRET_COMPUTE_QUERY + 'contract_address/' + s_label]);
/**
 * Gets the contract code history
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_contract - address is the address of the contract to query
 * @returns a tuple where:
 *   - 0: entries - the 'entries' response property
 */
export const querySecretComputeContractHistory = restful_grpc(sa_contract => [SR_LCD_SECRET_COMPUTE_QUERY + 'contract_history/' + sa_contract]);
/**
 * Encodes a `QuerySecretContractRequest` protobuf message:
 * @param sa_contract - `contract_address`: address is the bech32 human readable address of the contract
 * @param atu8_query - `query`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQuerySecretContractRequest = (sa_contract, atu8_query) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .b(atu8_query) // bytes query = 2
    .o;
/**
 * Encodes a `QueryByLabelRequest` protobuf message:
 * @param s_label - `label`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryByLabelRequest = (s_label) => Protobuf() // ...
    .s(s_label) // string label = 1
    .o;
/**
 * Encodes a `QueryByContractAddressRequest` protobuf message:
 * @param sa_contract - `contract_address`: address is the bech32 human readable address of the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryByContractAddressRequest = (sa_contract) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .o;
/**
 * Encodes a `QueryByCodeIdRequest` protobuf message:
 * @param sg_code_id - `code_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryByCodeIdRequest = (sg_code_id) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .o;
/**
 * Encodes a `QuerySecretContractResponse` protobuf message:
 * @param atu8_data - `data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQuerySecretContractResponse = (atu8_data) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .o;
/**
 * Encodes a `QueryContractInfoResponse` protobuf message: the response type for the Query/ContractInfo RPC method
 * @param sa_contract - `contract_address`: the bech32 human readable address of the contract
 * @param g_contract_info - `contract_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryContractInfoResponse = (sa_contract, atu8_contract_info) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .b(atu8_contract_info) // ContractInfo contract_info = 2
    .o;
/**
 * Encodes a `ContractInfoWithAddress` protobuf message: adds the contract address to the ContractInfo representation
 * @param sa_contract - `contract_address`: the bech32 human readable address of the contract
 * @param g_contract_info - `contract_info`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeContractInfoWithAddress = (sa_contract, atu8_contract_info) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .b(atu8_contract_info) // ContractInfo contract_info = 2
    .o;
/**
 * Encodes a `QueryContractsByCodeIdResponse` protobuf message:
 * @param a_contract_infos - `contract_infos`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryContractsByCodeIdResponse = (a_contract_infos) => Protobuf() // ...
    .B(a_contract_infos) // ContractInfoWithAddress[] contract_infos = 1
    .o;
/**
 * Encodes a `CodeInfoResponse` protobuf message:
 * @param sg_code_id - `code_id`:
 * @param sa_creator - `creator`: the bech32 human readable address of the contract
 * @param sb16_code_hash - `code_hash`:
 * @param s_source - `source`:
 * @param s_builder - `builder`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeCodeInfoResponse = (sg_code_id, sa_creator, sb16_code_hash, s_source, s_builder) => Protobuf() // ...
    .g(sg_code_id) // uint64 code_id = 1
    .s(sa_creator) // string creator = 2
    .s(sb16_code_hash) // string code_hash = 3
    .s(s_source) // string source = 4
    .s(s_builder) // string builder = 5
    .o;
/**
 * Encodes a `QueryCodeResponse` protobuf message:
 * @param g_code_info - `code_info`:
 * @param atu8_wasm - `wasm`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryCodeResponse = (atu8_code_info, atu8_wasm) => Protobuf() // ...
    .b(atu8_code_info) // CodeInfoResponse code_info = 1
    .b(atu8_wasm) // bytes wasm = 2
    .o;
/**
 * Encodes a `QueryCodesResponse` protobuf message:
 * @param a_code_infos - `code_infos`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryCodesResponse = (a_code_infos) => Protobuf() // ...
    .B(a_code_infos) // CodeInfoResponse[] code_infos = 1
    .o;
/**
 * Encodes a `QueryContractAddressResponse` protobuf message:
 * @param sa_contract - `contract_address`: address is the bech32 human readable address of the contract
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryContractAddressResponse = (sa_contract) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .o;
/**
 * Encodes a `QueryContractLabelResponse` protobuf message:
 * @param s_label - `label`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryContractLabelResponse = (s_label) => Protobuf() // ...
    .s(s_label) // string label = 1
    .o;
/**
 * Encodes a `QueryCodeHashResponse` protobuf message:
 * @param sb16_code_hash - `code_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryCodeHashResponse = (sb16_code_hash) => Protobuf() // ...
    .s(sb16_code_hash) // string code_hash = 1
    .o;
/**
 * Encodes a `DecryptedAnswer` protobuf message: a struct that represents a decrypted tx-query
 * @param s_type - `type`:
 * @param s_input - `input`:
 * @param s_output_data - `output_data`:
 * @param s_output_data_as_string - `output_data_as_string`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeDecryptedAnswer = (s_type, s_input, s_output_data, s_output_data_as_string) => Protobuf() // ...
    .s(s_type) // string type = 1
    .s(s_input) // string input = 2
    .s(s_output_data) // string output_data = 3
    .s(s_output_data_as_string) // string output_data_as_string = 4
    .o;
/**
 * Encodes a `DecryptedAnswers` protobuf message:
 * @param a_answers - `answers`:
 * @param a_output_logs - `output_logs`:
 * @param s_output_error - `output_error`:
 * @param s_plaintext_error - `plaintext_error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeDecryptedAnswers = (a_answers, a_output_logs, s_output_error, s_plaintext_error) => Protobuf() // ...
    .B(a_answers) // DecryptedAnswer[] answers = 1
    .B(a_output_logs) // StringEvent[] output_logs = 2
    .s(s_output_error) // string output_error = 3
    .s(s_plaintext_error) // string plaintext_error = 4
    .o;
/**
 * Encodes a `QueryContractHistoryRequest` protobuf message: the request type for the Query/ContractHistory RPC method
 * @param sa_contract - `contract_address`: address is the address of the contract to query
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryContractHistoryRequest = (sa_contract) => Protobuf() // ...
    .s(sa_contract) // string contract_address = 1
    .o;
/**
 * Encodes a `QueryContractHistoryResponse` protobuf message: the response type for the Query/ContractHistory RPC method
 * @param a_entries - `entries`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretComputeQueryContractHistoryResponse = (a_entries) => Protobuf() // ...
    .B(a_entries) // ContractCodeHistoryEntry[] entries = 1
    .o;
/**
 * Decodes a protobuf QuerySecretContractRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQuerySecretContractRequest}
 */
export const decodeSecretComputeQuerySecretContractRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1]);
/**
 * Decodes a protobuf QueryByLabelRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryByLabelRequest}
 */
export const decodeSecretComputeQueryByLabelRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryByContractAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryByContractAddressRequest}
 */
export const decodeSecretComputeQueryByContractAddressRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryByCodeIdRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryByCodeIdRequest}
 */
export const decodeSecretComputeQueryByCodeIdRequest = (atu8_payload) => decode_protobuf(atu8_payload, [3]);
/**
 * Decodes a protobuf QuerySecretContract message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQuerySecretContractResponse}
 */
export const decodeSecretComputeQuerySecretContractResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf QueryContractInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractInfoResponse}
 */
export const decodeSecretComputeQueryContractInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeSecretComputeContractInfo]);
/**
 * Decodes a protobuf ContractInfoWithAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeContractInfoWithAddress}
 */
export const decodeSecretComputeContractInfoWithAddress = (atu8_payload) => decode_protobuf(atu8_payload, [5, 1], [0, decodeSecretComputeContractInfo]);
/**
 * Decodes a protobuf QueryContractsByCodeId message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractsByCodeIdResponse}
 */
export const decodeSecretComputeQueryContractsByCodeIdResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeSecretComputeContractInfoWithAddress]);
/**
 * Decodes a protobuf CodeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeCodeInfoResponse}
 */
export const decodeSecretComputeCodeInfoResponse = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5, 5, 5, 5]);
/**
 * Decodes a protobuf QueryCode message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryCodeResponse}
 */
export const decodeSecretComputeQueryCodeResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeSecretComputeCodeInfoResponse]);
/**
 * Decodes a protobuf QueryCodes message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryCodesResponse}
 */
export const decodeSecretComputeQueryCodesResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeSecretComputeCodeInfoResponse]);
/**
 * Decodes a protobuf QueryContractAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractAddressResponse}
 */
export const decodeSecretComputeQueryContractAddressResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryContractLabel message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractLabelResponse}
 */
export const decodeSecretComputeQueryContractLabelResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryCodeHash message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryCodeHashResponse}
 */
export const decodeSecretComputeQueryCodeHashResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf DecryptedAnswer message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeDecryptedAnswer}
 */
export const decodeSecretComputeDecryptedAnswer = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5, 5]);
/**
 * Decodes a protobuf DecryptedAnswers message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeDecryptedAnswers}
 */
export const decodeSecretComputeDecryptedAnswers = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 5, 5], [decodeSecretComputeDecryptedAnswer, decodeCosmosBaseAbciStringEvent]);
/**
 * Decodes a protobuf QueryContractHistoryRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractHistoryRequest}
 */
export const decodeSecretComputeQueryContractHistoryRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf QueryContractHistory message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretComputeQueryContractHistoryResponse}
 */
export const decodeSecretComputeQueryContractHistoryResponse = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeSecretComputeContractCodeHistoryEntry]);
/**
 * Destructures the fields of a {@link SecretComputeQuerySecretContractRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 *   - 1: query -
 */
export const destructSecretComputeQuerySecretContractRequest = (g_struct) => [g_struct.contract_address, safe_base64_to_bytes(g_struct.query)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_SECRET_CONTRACT_REQUEST = '/secret.compute.v1beta1.QuerySecretContractRequest';
/**
 * Destructures the fields of a {@link SecretComputeQueryByLabelRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: label -
 */
export const destructSecretComputeQueryByLabelRequest = (g_struct) => [g_struct.label];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_BY_LABEL_REQUEST = '/secret.compute.v1beta1.QueryByLabelRequest';
/**
 * Destructures the fields of a {@link SecretComputeQueryByContractAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 */
export const destructSecretComputeQueryByContractAddressRequest = (g_struct) => [g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_BY_CONTRACT_ADDRESS_REQUEST = '/secret.compute.v1beta1.QueryByContractAddressRequest';
/**
 * Destructures the fields of a {@link SecretComputeQueryByCodeIdRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id -
 */
export const destructSecretComputeQueryByCodeIdRequest = (g_struct) => [g_struct.code_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_BY_CODE_ID_REQUEST = '/secret.compute.v1beta1.QueryByCodeIdRequest';
/**
 * Destructures the fields of a {@link SecretComputeQuerySecretContractResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 */
export const destructSecretComputeQuerySecretContractResponse = (g_struct) => [safe_base64_to_bytes(g_struct.data)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_SECRET_CONTRACT_RESPONSE = '/secret.compute.v1beta1.QuerySecretContractResponse';
/**
 * Destructures the fields of a {@link SecretComputeQueryContractInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info -
 */
export const destructSecretComputeQueryContractInfoResponse = (g_struct) => [g_struct.contract_address, g_struct.contract_info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_INFO_RESPONSE = '/secret.compute.v1beta1.QueryContractInfoResponse';
/**
 * Destructures the fields of a {@link SecretComputeContractInfoWithAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - the bech32 human readable address of the contract
 *   - 1: contract_info -
 */
export const destructSecretComputeContractInfoWithAddress = (g_struct) => [g_struct.contract_address, g_struct.contract_info];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_CONTRACT_INFO_WITH_ADDRESS = '/secret.compute.v1beta1.ContractInfoWithAddress';
/**
 * Destructures the fields of a {@link SecretComputeQueryContractsByCodeIdResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_infos -
 */
export const destructSecretComputeQueryContractsByCodeIdResponse = (g_struct) => [g_struct.contract_infos];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACTS_BY_CODE_ID_RESPONSE = '/secret.compute.v1beta1.QueryContractsByCodeIdResponse';
/**
 * Destructures the fields of a {@link SecretComputeCodeInfoResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_id -
 *   - 1: creator - the bech32 human readable address of the contract
 *   - 2: code_hash -
 *   - 3: source -
 *   - 4: builder -
 */
export const destructSecretComputeCodeInfoResponse = (g_struct) => [g_struct.code_id, g_struct.creator, g_struct.code_hash, g_struct.source, g_struct.builder];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_CODE_INFO_RESPONSE = '/secret.compute.v1beta1.CodeInfoResponse';
/**
 * Destructures the fields of a {@link SecretComputeQueryCodeResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_info -
 *   - 1: wasm -
 */
export const destructSecretComputeQueryCodeResponse = (g_struct) => [g_struct.code_info, safe_base64_to_bytes(g_struct.wasm)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CODE_RESPONSE = '/secret.compute.v1beta1.QueryCodeResponse';
/**
 * Destructures the fields of a {@link SecretComputeQueryCodesResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_infos -
 */
export const destructSecretComputeQueryCodesResponse = (g_struct) => [g_struct.code_infos];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CODES_RESPONSE = '/secret.compute.v1beta1.QueryCodesResponse';
/**
 * Destructures the fields of a {@link SecretComputeQueryContractAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the bech32 human readable address of the contract
 */
export const destructSecretComputeQueryContractAddressResponse = (g_struct) => [g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_ADDRESS_RESPONSE = '/secret.compute.v1beta1.QueryContractAddressResponse';
/**
 * Destructures the fields of a {@link SecretComputeQueryContractLabelResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: label -
 */
export const destructSecretComputeQueryContractLabelResponse = (g_struct) => [g_struct.label];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_LABEL_RESPONSE = '/secret.compute.v1beta1.QueryContractLabelResponse';
/**
 * Destructures the fields of a {@link SecretComputeQueryCodeHashResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code_hash -
 */
export const destructSecretComputeQueryCodeHashResponse = (g_struct) => [g_struct.code_hash];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CODE_HASH_RESPONSE = '/secret.compute.v1beta1.QueryCodeHashResponse';
/**
 * Destructures the fields of a {@link SecretComputeDecryptedAnswer} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: input -
 *   - 2: output_data -
 *   - 3: output_data_as_string -
 */
export const destructSecretComputeDecryptedAnswer = (g_struct) => [g_struct.type, g_struct.input, g_struct.output_data, g_struct.output_data_as_string];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_DECRYPTED_ANSWER = '/secret.compute.v1beta1.DecryptedAnswer';
/**
 * Destructures the fields of a {@link SecretComputeDecryptedAnswers} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: answers -
 *   - 1: output_logs -
 *   - 2: output_error -
 *   - 3: plaintext_error -
 */
export const destructSecretComputeDecryptedAnswers = (g_struct) => [g_struct.answers, g_struct.output_logs, g_struct.output_error, g_struct.plaintext_error];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_DECRYPTED_ANSWERS = '/secret.compute.v1beta1.DecryptedAnswers';
/**
 * Destructures the fields of a {@link SecretComputeQueryContractHistoryRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: contract_address - address is the address of the contract to query
 */
export const destructSecretComputeQueryContractHistoryRequest = (g_struct) => [g_struct.contract_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_HISTORY_REQUEST = '/secret.compute.v1beta1.QueryContractHistoryRequest';
/**
 * Destructures the fields of a {@link SecretComputeQueryContractHistoryResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: entries -
 */
export const destructSecretComputeQueryContractHistoryResponse = (g_struct) => [g_struct.entries];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_COMPUTE_QUERY_CONTRACT_HISTORY_RESPONSE = '/secret.compute.v1beta1.QueryContractHistoryResponse';
//# sourceMappingURL=query.js.map