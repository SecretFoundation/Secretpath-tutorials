/// <reference types="node" />
import type { WeakAccountAddr, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedSecretIntertxQueryInterchainAccountFromAddressRequest = Encoded<'/secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest'>;
export type EncodedSecretIntertxQueryInterchainAccountFromAddressResponse = Encoded<'/secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse'>;
/**
 * QueryInterchainAccountFromAddress returns the interchain account for given owner address on a given connection pair
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param si_connection -
 * @returns a tuple where:
 *   - 0: interchain_account_address - the 'interchain_account_address' response property
 */
export declare const querySecretIntertxInterchainAccountFromAddress: (z_req: string | ({
    origin: string;
} & RequestInit), sa_owner?: Opt<`${string}1${string}`>, si_connection?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretIntertxQueryInterchainAccountFromAddressResponse>>;
/**
 * Encodes a `QueryInterchainAccountFromAddressRequest` protobuf message: the request type for the Query/InterchainAccountAddress RPC
 * @param sa_owner - `owner`:
 * @param si_connection - `connection_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretIntertxQueryInterchainAccountFromAddressRequest: (sa_owner?: Opt<WeakAccountAddr>, si_connection?: Opt<string>) => EncodedSecretIntertxQueryInterchainAccountFromAddressRequest;
/**
 * Encodes a `QueryInterchainAccountFromAddressResponse` protobuf message: the response type for the Query/InterchainAccountAddress RPC
 * @param sa_interchain_account - `interchain_account_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretIntertxQueryInterchainAccountFromAddressResponse: (sa_interchain_account?: Opt<WeakAccountAddr>) => EncodedSecretIntertxQueryInterchainAccountFromAddressResponse;
/**
 * A decoded protobuf QueryInterchainAccountFromAddressRequest message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 */
export type DecodedSecretIntertxQueryInterchainAccountFromAddressRequest = [
    sa_owner?: CwAccountAddr,
    si_connection?: string
];
/**
 * Decodes a protobuf QueryInterchainAccountFromAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxQueryInterchainAccountFromAddressRequest}
 */
export declare const decodeSecretIntertxQueryInterchainAccountFromAddressRequest: (atu8_payload: Uint8Array) => DecodedSecretIntertxQueryInterchainAccountFromAddressRequest;
/**
 * A decoded protobuf QueryInterchainAccountFromAddress message
 *
 * Alias for: interchain_account_address -
 */
export type DecodedSecretIntertxQueryInterchainAccountFromAddressResponse = [
    sa_interchain_account?: CwAccountAddr
];
/**
 * Decodes a protobuf QueryInterchainAccountFromAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxQueryInterchainAccountFromAddressResponse}
 */
export declare const decodeSecretIntertxQueryInterchainAccountFromAddressResponse: (atu8_payload: Uint8Array) => DecodedSecretIntertxQueryInterchainAccountFromAddressResponse;
/**
 * Destructures the fields of a {@link SecretIntertxQueryInterchainAccountFromAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 */
export declare const destructSecretIntertxQueryInterchainAccountFromAddressRequest: (g_struct: SecretIntertxQueryInterchainAccountFromAddressRequest) => [owner?: CwAccountAddr, connection_id?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_INTERTX_QUERY_INTERCHAIN_ACCOUNT_FROM_ADDRESS_REQUEST = "/secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest";
/**
 * JSON serialization of `secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest` - the request type for the Query/InterchainAccountAddress RPC
 */
export type SecretIntertxQueryInterchainAccountFromAddressRequest = {
    owner?: CwAccountAddr | undefined;
    connection_id?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretIntertxQueryInterchainAccountFromAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interchain_account_address -
 */
export declare const destructSecretIntertxQueryInterchainAccountFromAddressResponse: (g_struct: SecretIntertxQueryInterchainAccountFromAddressResponse) => [interchain_account_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_INTERTX_QUERY_INTERCHAIN_ACCOUNT_FROM_ADDRESS_RESPONSE = "/secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse";
/**
 * JSON serialization of `secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse` - the response type for the Query/InterchainAccountAddress RPC
 */
export type SecretIntertxQueryInterchainAccountFromAddressResponse = {
    interchain_account_address?: CwAccountAddr | undefined;
};
