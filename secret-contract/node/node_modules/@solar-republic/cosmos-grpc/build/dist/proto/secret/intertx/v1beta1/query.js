import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
const SR_LCD_SECRET_INTERTX_QUERY = '/mauth/interchain_account/owner/';
/**
 * QueryInterchainAccountFromAddress returns the interchain account for given owner address on a given connection pair
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param si_connection -
 * @returns a tuple where:
 *   - 0: interchain_account_address - the 'interchain_account_address' response property
 */
export const querySecretIntertxInterchainAccountFromAddress = restful_grpc((sa_owner, si_connection) => [SR_LCD_SECRET_INTERTX_QUERY + sa_owner + '/connection/' + si_connection]);
/**
 * Encodes a `QueryInterchainAccountFromAddressRequest` protobuf message: the request type for the Query/InterchainAccountAddress RPC
 * @param sa_owner - `owner`:
 * @param si_connection - `connection_id`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretIntertxQueryInterchainAccountFromAddressRequest = (sa_owner, si_connection) => Protobuf() // ...
    .s(sa_owner) // string owner = 1
    .s(si_connection) // string connection_id = 2
    .o;
/**
 * Encodes a `QueryInterchainAccountFromAddressResponse` protobuf message: the response type for the Query/InterchainAccountAddress RPC
 * @param sa_interchain_account - `interchain_account_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretIntertxQueryInterchainAccountFromAddressResponse = (sa_interchain_account) => Protobuf() // ...
    .s(sa_interchain_account) // string interchain_account_address = 1
    .o;
/**
 * Decodes a protobuf QueryInterchainAccountFromAddressRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxQueryInterchainAccountFromAddressRequest}
 */
export const decodeSecretIntertxQueryInterchainAccountFromAddressRequest = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf QueryInterchainAccountFromAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxQueryInterchainAccountFromAddressResponse}
 */
export const decodeSecretIntertxQueryInterchainAccountFromAddressResponse = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Destructures the fields of a {@link SecretIntertxQueryInterchainAccountFromAddressRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 */
export const destructSecretIntertxQueryInterchainAccountFromAddressRequest = (g_struct) => [g_struct.owner, g_struct.connection_id];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_INTERTX_QUERY_INTERCHAIN_ACCOUNT_FROM_ADDRESS_REQUEST = '/secret.intertx.v1beta1.QueryInterchainAccountFromAddressRequest';
/**
 * Destructures the fields of a {@link SecretIntertxQueryInterchainAccountFromAddressResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: interchain_account_address -
 */
export const destructSecretIntertxQueryInterchainAccountFromAddressResponse = (g_struct) => [g_struct.interchain_account_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_INTERTX_QUERY_INTERCHAIN_ACCOUNT_FROM_ADDRESS_RESPONSE = '/secret.intertx.v1beta1.QueryInterchainAccountFromAddressResponse';
//# sourceMappingURL=query.js.map