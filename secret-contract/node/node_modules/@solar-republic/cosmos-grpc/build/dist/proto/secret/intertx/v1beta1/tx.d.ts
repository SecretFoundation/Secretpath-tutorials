/// <reference types="node" />
import type { WeakAccountAddr, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, JsonAny, Opt } from '../../../../api/types.js';
import type { DecodedGoogleProtobufAny } from '../../../google/protobuf/any.js';
export type EncodedSecretIntertxMsgRegisterAccount = Encoded<'/secret.intertx.v1beta1.MsgRegisterAccount'>;
export type EncodedSecretIntertxMsgRegisterAccountResponse = Encoded<'/secret.intertx.v1beta1.MsgRegisterAccountResponse'>;
export type EncodedSecretIntertxMsgSubmitTx = Encoded<'/secret.intertx.v1beta1.MsgSubmitTx'>;
export type EncodedSecretIntertxMsgSubmitTxResponse = Encoded<'/secret.intertx.v1beta1.MsgSubmitTxResponse'>;
/**
 * Register defines a rpc handler for MsgRegisterAccount
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param si_connection -
 * @param s_version -
 * @returns an empty tuple
 */
export declare const submitSecretIntertxRegisterAccount: (z_req: string | ({
    origin: string;
} & RequestInit), sa_owner?: Opt<`${string}1${string}`>, si_connection?: Opt<string>, s_version?: Opt<string>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretIntertxMsgRegisterAccountResponse>>;
/**
 *
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param sa_owner -
 * @param si_connection -
 * @param atu8_msg -
 * @returns an empty tuple
 */
export declare const submitSecretIntertxSubmitTx: (z_req: string | ({
    origin: string;
} & RequestInit), sa_owner?: Opt<`${string}1${string}`>, si_connection?: Opt<string>, atu8_msg?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretIntertxMsgSubmitTxResponse>>;
/**
 * Encodes a `MsgRegisterAccount` protobuf message: registers an interchain account for the given owner over the specified connection pair
 * @param sa_owner - `owner`:
 * @param si_connection - `connection_id`:
 * @param s_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretIntertxMsgRegisterAccount: (sa_owner?: Opt<WeakAccountAddr>, si_connection?: Opt<string>, s_version?: Opt<string>) => EncodedSecretIntertxMsgRegisterAccount;
/**
 * Encodes a `MsgRegisterAccountResponse` protobuf message: the response type for Msg/RegisterAccount
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretIntertxMsgRegisterAccountResponse: () => EncodedSecretIntertxMsgRegisterAccountResponse;
/**
 * Encodes a `MsgSubmitTx` protobuf message: creates and submits an arbitrary transaction msg to be executed using an interchain account
 * @param sa_owner - `owner`:
 * @param si_connection - `connection_id`:
 * @param atu8_msg - `msg`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretIntertxMsgSubmitTx: (sa_owner?: Opt<WeakAccountAddr>, si_connection?: Opt<string>, atu8_msg?: Opt<Uint8Array>) => EncodedSecretIntertxMsgSubmitTx;
/**
 * Encodes a `MsgSubmitTxResponse` protobuf message: defines the MsgSubmitTx response type
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretIntertxMsgSubmitTxResponse: () => EncodedSecretIntertxMsgSubmitTxResponse;
/**
 * A decoded protobuf RegisterAccount message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 *   - 2: version -
 */
export type DecodedSecretIntertxMsgRegisterAccount = [
    sa_owner?: CwAccountAddr,
    si_connection?: string,
    s_version?: string
];
/**
 * Decodes a protobuf RegisterAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgRegisterAccount}
 */
export declare const decodeSecretIntertxMsgRegisterAccount: (atu8_payload: Uint8Array) => DecodedSecretIntertxMsgRegisterAccount;
/**
 * A decoded protobuf RegisterAccount message
 *
 * Tuple where:
 */
export type DecodedSecretIntertxMsgRegisterAccountResponse = [];
/**
 * Decodes a protobuf RegisterAccount message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgRegisterAccountResponse}
 */
export declare const decodeSecretIntertxMsgRegisterAccountResponse: (atu8_payload: Uint8Array) => [];
/**
 * A decoded protobuf SubmitTx message
 *
 * Tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 *   - 2: msg -
 */
export type DecodedSecretIntertxMsgSubmitTx = [
    sa_owner?: CwAccountAddr,
    si_connection?: string,
    a_msg?: DecodedGoogleProtobufAny
];
/**
 * Decodes a protobuf SubmitTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgSubmitTx}
 */
export declare const decodeSecretIntertxMsgSubmitTx: (atu8_payload: Uint8Array) => DecodedSecretIntertxMsgSubmitTx;
/**
 * A decoded protobuf SubmitTx message
 *
 * Tuple where:
 */
export type DecodedSecretIntertxMsgSubmitTxResponse = [];
/**
 * Decodes a protobuf SubmitTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretIntertxMsgSubmitTxResponse}
 */
export declare const decodeSecretIntertxMsgSubmitTxResponse: (atu8_payload: Uint8Array) => [];
/**
 * Destructures the fields of a {@link SecretIntertxMsgRegisterAccount} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 *   - 2: version -
 */
export declare const destructSecretIntertxMsgRegisterAccount: (g_struct: SecretIntertxMsgRegisterAccount) => [owner?: CwAccountAddr, connection_id?: string, version?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_REGISTER_ACCOUNT = "/secret.intertx.v1beta1.MsgRegisterAccount";
/**
 * JSON serialization of `secret.intertx.v1beta1.MsgRegisterAccount` - registers an interchain account for the given owner over the specified connection pair
 */
export type SecretIntertxMsgRegisterAccount = {
    owner?: CwAccountAddr | undefined;
    connection_id?: string | undefined;
    version?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretIntertxMsgRegisterAccountResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructSecretIntertxMsgRegisterAccountResponse: (g_struct: SecretIntertxMsgRegisterAccountResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_REGISTER_ACCOUNT_RESPONSE = "/secret.intertx.v1beta1.MsgRegisterAccountResponse";
/**
 * JSON serialization of `secret.intertx.v1beta1.MsgRegisterAccountResponse` - the response type for Msg/RegisterAccount
 */
export type SecretIntertxMsgRegisterAccountResponse = {};
/**
 * Destructures the fields of a {@link SecretIntertxMsgSubmitTx} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: owner -
 *   - 1: connection_id -
 *   - 2: msg -
 */
export declare const destructSecretIntertxMsgSubmitTx: (g_struct: SecretIntertxMsgSubmitTx) => [owner?: CwBase64, connection_id?: string, msg?: JsonAny];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_SUBMIT_TX = "/secret.intertx.v1beta1.MsgSubmitTx";
/**
 * JSON serialization of `secret.intertx.v1beta1.MsgSubmitTx` - creates and submits an arbitrary transaction msg to be executed using an interchain account
 */
export type SecretIntertxMsgSubmitTx = {
    owner?: CwBase64 | undefined;
    connection_id?: string | undefined;
    msg?: JsonAny | undefined;
};
/**
 * Destructures the fields of a {@link SecretIntertxMsgSubmitTxResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export declare const destructSecretIntertxMsgSubmitTxResponse: (g_struct: SecretIntertxMsgSubmitTxResponse) => [];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_INTERTX_MSG_SUBMIT_TX_RESPONSE = "/secret.intertx.v1beta1.MsgSubmitTxResponse";
/**
 * JSON serialization of `secret.intertx.v1beta1.MsgSubmitTxResponse` - defines the MsgSubmitTx response type
 */
export type SecretIntertxMsgSubmitTxResponse = {};
