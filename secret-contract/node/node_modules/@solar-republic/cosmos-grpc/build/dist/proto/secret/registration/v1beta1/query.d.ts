/// <reference types="node" />
import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
import type { SecretRegistrationKey } from './msg.js';
export type EncodedSecretRegistrationQueryEncryptedSeedRequest = Encoded<'/secret.registration.v1beta1.QueryEncryptedSeedRequest'>;
export type EncodedSecretRegistrationQueryEncryptedSeedResponse = Encoded<'/secret.registration.v1beta1.QueryEncryptedSeedResponse'>;
/**
 * Returns the key used for transactions
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: key - the 'key' response property
 */
export declare const querySecretRegistrationTxKey: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretRegistrationKey>>;
/**
 * Returns the key used for registration
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: key - the 'key' response property
 */
export declare const querySecretRegistrationRegistrationKey: (z_req: string | ({
    origin: string;
} & RequestInit)) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretRegistrationKey>>;
/**
 * Returns the encrypted seed for a registered node by public key
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_pub_key -
 * @returns a tuple where:
 *   - 0: encrypted_seed - the 'encrypted_seed' response property
 */
export declare const querySecretRegistrationEncryptedSeed: (z_req: string | ({
    origin: string;
} & RequestInit), atu8_pub_key?: Opt<Uint8Array>) => Promise<import("../../../../api/transport.js").NetworkJsonResponse<SecretRegistrationQueryEncryptedSeedResponse>>;
/**
 * Encodes a `QueryEncryptedSeedRequest` protobuf message:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationQueryEncryptedSeedRequest: (atu8_pub_key?: Opt<Uint8Array>) => EncodedSecretRegistrationQueryEncryptedSeedRequest;
/**
 * Encodes a `QueryEncryptedSeedResponse` protobuf message:
 * @param atu8_encrypted_seed - `encrypted_seed`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationQueryEncryptedSeedResponse: (atu8_encrypted_seed?: Opt<Uint8Array>) => EncodedSecretRegistrationQueryEncryptedSeedResponse;
/**
 * A decoded protobuf QueryEncryptedSeedRequest message
 *
 * Alias for: pub_key -
 */
export type DecodedSecretRegistrationQueryEncryptedSeedRequest = [
    atu8_pub_key?: Uint8Array
];
/**
 * Decodes a protobuf QueryEncryptedSeedRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationQueryEncryptedSeedRequest}
 */
export declare const decodeSecretRegistrationQueryEncryptedSeedRequest: (atu8_payload: Uint8Array) => DecodedSecretRegistrationQueryEncryptedSeedRequest;
/**
 * A decoded protobuf QueryEncryptedSeed message
 *
 * Alias for: encrypted_seed -
 */
export type DecodedSecretRegistrationQueryEncryptedSeedResponse = [
    atu8_encrypted_seed?: Uint8Array
];
/**
 * Decodes a protobuf QueryEncryptedSeed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationQueryEncryptedSeedResponse}
 */
export declare const decodeSecretRegistrationQueryEncryptedSeedResponse: (atu8_payload: Uint8Array) => DecodedSecretRegistrationQueryEncryptedSeedResponse;
/**
 * Destructures the fields of a {@link SecretRegistrationQueryEncryptedSeedRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 */
export declare const destructSecretRegistrationQueryEncryptedSeedRequest: (g_struct: SecretRegistrationQueryEncryptedSeedRequest) => [pub_key?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_QUERY_ENCRYPTED_SEED_REQUEST = "/secret.registration.v1beta1.QueryEncryptedSeedRequest";
/**
 * JSON serialization of `secret.registration.v1beta1.QueryEncryptedSeedRequest` -
 */
export type SecretRegistrationQueryEncryptedSeedRequest = {
    pub_key?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link SecretRegistrationQueryEncryptedSeedResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: encrypted_seed -
 */
export declare const destructSecretRegistrationQueryEncryptedSeedResponse: (g_struct: SecretRegistrationQueryEncryptedSeedResponse) => [encrypted_seed?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_QUERY_ENCRYPTED_SEED_RESPONSE = "/secret.registration.v1beta1.QueryEncryptedSeedResponse";
/**
 * JSON serialization of `secret.registration.v1beta1.QueryEncryptedSeedResponse` -
 */
export type SecretRegistrationQueryEncryptedSeedResponse = {
    encrypted_seed?: CwBase64 | undefined;
};
