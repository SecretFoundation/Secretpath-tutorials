import { decode_protobuf } from '../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../api/protobuf-writer.js';
import { restful_grpc } from '../../../../api/transport.js';
import { safe_bytes_to_base64, safe_base64_to_bytes } from '../../../../api/util.js';
const SR_LCD_SECRET_REGISTRATION_QUERY = '/registration/v1beta1/';
/**
 * Returns the key used for transactions
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: key - the 'key' response property
 */
export const querySecretRegistrationTxKey = restful_grpc(() => [SR_LCD_SECRET_REGISTRATION_QUERY + 'tx-key']);
/**
 * Returns the key used for registration
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @returns a tuple where:
 *   - 0: key - the 'key' response property
 */
export const querySecretRegistrationRegistrationKey = restful_grpc(() => [SR_LCD_SECRET_REGISTRATION_QUERY + 'registration-key']);
/**
 * Returns the encrypted seed for a registered node by public key
 * @param z_req - URL origin of LCD endpoint or {@link RequestInit}
 * @param atu8_pub_key -
 * @returns a tuple where:
 *   - 0: encrypted_seed - the 'encrypted_seed' response property
 */
export const querySecretRegistrationEncryptedSeed = restful_grpc(atu8_pub_key => [SR_LCD_SECRET_REGISTRATION_QUERY + 'encrypted-seed/' + safe_bytes_to_base64(atu8_pub_key)]);
/**
 * Encodes a `QueryEncryptedSeedRequest` protobuf message:
 * @param atu8_pub_key - `pub_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationQueryEncryptedSeedRequest = (atu8_pub_key) => Protobuf() // ...
    .b(atu8_pub_key) // bytes pub_key = 1
    .o;
/**
 * Encodes a `QueryEncryptedSeedResponse` protobuf message:
 * @param atu8_encrypted_seed - `encrypted_seed`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationQueryEncryptedSeedResponse = (atu8_encrypted_seed) => Protobuf() // ...
    .b(atu8_encrypted_seed) // bytes encrypted_seed = 1
    .o;
/**
 * Decodes a protobuf QueryEncryptedSeedRequest message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationQueryEncryptedSeedRequest}
 */
export const decodeSecretRegistrationQueryEncryptedSeedRequest = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf QueryEncryptedSeed message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationQueryEncryptedSeedResponse}
 */
export const decodeSecretRegistrationQueryEncryptedSeedResponse = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Destructures the fields of a {@link SecretRegistrationQueryEncryptedSeedRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 */
export const destructSecretRegistrationQueryEncryptedSeedRequest = (g_struct) => [safe_base64_to_bytes(g_struct.pub_key)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_QUERY_ENCRYPTED_SEED_REQUEST = '/secret.registration.v1beta1.QueryEncryptedSeedRequest';
/**
 * Destructures the fields of a {@link SecretRegistrationQueryEncryptedSeedResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: encrypted_seed -
 */
export const destructSecretRegistrationQueryEncryptedSeedResponse = (g_struct) => [safe_base64_to_bytes(g_struct.encrypted_seed)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_QUERY_ENCRYPTED_SEED_RESPONSE = '/secret.registration.v1beta1.QueryEncryptedSeedResponse';
//# sourceMappingURL=query.js.map