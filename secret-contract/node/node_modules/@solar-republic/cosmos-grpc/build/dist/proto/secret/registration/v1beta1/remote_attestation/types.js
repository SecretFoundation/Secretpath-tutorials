import { decode_protobuf } from '../../../../../api/protobuf-reader.js';
import { Protobuf } from '../../../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../../../api/util.js';
/**
 * Encodes a `QuoteReport` protobuf message:
 * @param s_id - `id`:
 * @param s_timestamp - `timestamp`:
 * @param sg_version - `version`:
 * @param s_isv_enclave_quote_status - `isv_enclave_quote_status`:
 * @param s_platform_info_blob - `platform_info_blob`:
 * @param s_isv_enclave_quote_body - `isv_enclave_quote_body`:
 * @param a_advisory_ids - `advisory_ids`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRemoteAttestationQuoteReport = (s_id, s_timestamp, sg_version, s_isv_enclave_quote_status, s_platform_info_blob, s_isv_enclave_quote_body, a_advisory_ids) => Protobuf() // ...
    .s(s_id) // string id = 1
    .s(s_timestamp) // string timestamp = 2
    .g(sg_version) // uint64 version = 3
    .s(s_isv_enclave_quote_status) // string isv_enclave_quote_status = 4
    .s(s_platform_info_blob) // string platform_info_blob = 5
    .s(s_isv_enclave_quote_body) // string isv_enclave_quote_body = 6
    .S(a_advisory_ids) // string[] advisory_ids = 7
    .o;
/**
 * Encodes a `QuoteReportBody` protobuf message:
 * @param s_mr_enclave - `mr_enclave`:
 * @param s_mr_signer - `mr_signer`:
 * @param s_report_data - `report_data`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRemoteAttestationQuoteReportBody = (s_mr_enclave, s_mr_signer, s_report_data) => Protobuf() // ...
    .s(s_mr_enclave) // string mr_enclave = 1
    .s(s_mr_signer) // string mr_signer = 2
    .s(s_report_data) // string report_data = 3
    .o;
/**
 * Encodes a `QuoteReportData` protobuf message:
 * @param sg_version - `version`:
 * @param sg_sign_type - `sign_type`:
 * @param g_report_body - `report_body`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRemoteAttestationQuoteReportData = (sg_version, sg_sign_type, atu8_report_body) => Protobuf() // ...
    .g(sg_version) // uint64 version = 1
    .g(sg_sign_type) // uint64 sign_type = 2
    .b(atu8_report_body) // QuoteReportBody report_body = 3
    .o;
/**
 * Encodes a `EndorsedAttestationReport` protobuf message:
 * @param atu8_report - `report`:
 * @param atu8_signature - `signature`:
 * @param atu8_signing_cert - `signing_cert`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRemoteAttestationEndorsedAttestationReport = (atu8_report, atu8_signature, atu8_signing_cert) => Protobuf() // ...
    .b(atu8_report) // bytes report = 1
    .b(atu8_signature) // bytes signature = 2
    .b(atu8_signing_cert) // bytes signing_cert = 3
    .o;
/**
 * Encodes a `SGXEC256Signature` protobuf message:
 * @param s_gx - `gx`:
 * @param s_gy - `gy`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRemoteAttestationSGXEC256Signature = (s_gx, s_gy) => Protobuf() // ...
    .s(s_gx) // string gx = 1
    .s(s_gy) // string gy = 2
    .o;
/**
 * Encodes a `PlatformInfoBlob` protobuf message:
 * @param n_sgx_epid_group_flags - `sgx_epid_group_flags`:
 * @param n_sgx_tcb_evaluation_flags - `sgx_tcb_evaluation_flags`:
 * @param n_pse_evaluation_flags - `pse_evaluation_flags`:
 * @param s_latest_equivalent_tcb_psvn - `latest_equivalent_tcb_psvn`:
 * @param s_latest_pse_isvsvn - `latest_pse_isvsvn`:
 * @param s_latest_psda_svn - `latest_psda_svn`:
 * @param n_xeid - `xeid`:
 * @param n_gid - `gid`:
 * @param g_sgx_ec256_signature_t - `sgx_ec256_signature_t`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeSecretRegistrationRemoteAttestationPlatformInfoBlob = (n_sgx_epid_group_flags, n_sgx_tcb_evaluation_flags, n_pse_evaluation_flags, s_latest_equivalent_tcb_psvn, s_latest_pse_isvsvn, s_latest_psda_svn, n_xeid, n_gid, atu8_sgx_ec256_signature_t) => Protobuf() // ...
    .v(n_sgx_epid_group_flags) // uint32 sgx_epid_group_flags = 1
    .v(n_sgx_tcb_evaluation_flags) // uint32 sgx_tcb_evaluation_flags = 2
    .v(n_pse_evaluation_flags) // uint32 pse_evaluation_flags = 3
    .s(s_latest_equivalent_tcb_psvn) // string latest_equivalent_tcb_psvn = 4
    .s(s_latest_pse_isvsvn) // string latest_pse_isvsvn = 5
    .s(s_latest_psda_svn) // string latest_psda_svn = 6
    .v(n_xeid) // uint32 xeid = 7
    .v(n_gid) // uint32 gid = 8
    .b(atu8_sgx_ec256_signature_t) // SGXEC256Signature sgx_ec256_signature_t = 9
    .o;
/**
 * Decodes a protobuf QuoteReport message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRemoteAttestationQuoteReport}
 */
export const decodeSecretRegistrationRemoteAttestationQuoteReport = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 5, 5, 5, 4]);
/**
 * Decodes a protobuf QuoteReportBody message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRemoteAttestationQuoteReportBody}
 */
export const decodeSecretRegistrationRemoteAttestationQuoteReportBody = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 5]);
/**
 * Decodes a protobuf QuoteReportData message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRemoteAttestationQuoteReportData}
 */
export const decodeSecretRegistrationRemoteAttestationQuoteReportData = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 1], [0, 0, decodeSecretRegistrationRemoteAttestationQuoteReportBody]);
/**
 * Decodes a protobuf EndorsedAttestationReport message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRemoteAttestationEndorsedAttestationReport}
 */
export const decodeSecretRegistrationRemoteAttestationEndorsedAttestationReport = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1]);
/**
 * Decodes a protobuf SGXEC256Signature message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRemoteAttestationSGXEC256Signature}
 */
export const decodeSecretRegistrationRemoteAttestationSGXEC256Signature = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Decodes a protobuf PlatformInfoBlob message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRemoteAttestationPlatformInfoBlob}
 */
export const decodeSecretRegistrationRemoteAttestationPlatformInfoBlob = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1, 5, 5, 5, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, decodeSecretRegistrationRemoteAttestationSGXEC256Signature]);
/**
 * Destructures the fields of a {@link SecretRegistrationRemoteAttestationQuoteReport} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: timestamp -
 *   - 2: version -
 *   - 3: isv_enclave_quote_status -
 *   - 4: platform_info_blob -
 *   - 5: isv_enclave_quote_body -
 *   - 6: advisory_ids -
 */
export const destructSecretRegistrationRemoteAttestationQuoteReport = (g_struct) => [g_struct.id, g_struct.timestamp, g_struct.version, g_struct.isv_enclave_quote_status, g_struct.platform_info_blob, g_struct.isv_enclave_quote_body, g_struct.advisory_ids];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REMOTE_ATTESTATION_QUOTE_REPORT = '/secret.registration.remote_attestation.v1beta1.QuoteReport';
/**
 * Destructures the fields of a {@link SecretRegistrationRemoteAttestationQuoteReportBody} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: mr_enclave -
 *   - 1: mr_signer -
 *   - 2: report_data -
 */
export const destructSecretRegistrationRemoteAttestationQuoteReportBody = (g_struct) => [g_struct.mr_enclave, g_struct.mr_signer, g_struct.report_data];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REMOTE_ATTESTATION_QUOTE_REPORT_BODY = '/secret.registration.remote_attestation.v1beta1.QuoteReportBody';
/**
 * Destructures the fields of a {@link SecretRegistrationRemoteAttestationQuoteReportData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: sign_type -
 *   - 2: report_body -
 */
export const destructSecretRegistrationRemoteAttestationQuoteReportData = (g_struct) => [g_struct.version, g_struct.sign_type, g_struct.report_body];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REMOTE_ATTESTATION_QUOTE_REPORT_DATA = '/secret.registration.remote_attestation.v1beta1.QuoteReportData';
/**
 * Destructures the fields of a {@link SecretRegistrationRemoteAttestationEndorsedAttestationReport} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: report -
 *   - 1: signature -
 *   - 2: signing_cert -
 */
export const destructSecretRegistrationRemoteAttestationEndorsedAttestationReport = (g_struct) => [safe_base64_to_bytes(g_struct.report), safe_base64_to_bytes(g_struct.signature), safe_base64_to_bytes(g_struct.signing_cert)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REMOTE_ATTESTATION_ENDORSED_ATTESTATION_REPORT = '/secret.registration.remote_attestation.v1beta1.EndorsedAttestationReport';
/**
 * Destructures the fields of a {@link SecretRegistrationRemoteAttestationSGXEC256Signature} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: gx -
 *   - 1: gy -
 */
export const destructSecretRegistrationRemoteAttestationSGXEC256Signature = (g_struct) => [g_struct.gx, g_struct.gy];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REMOTE_ATTESTATION_S_G_X_E_C256_SIGNATURE = '/secret.registration.remote_attestation.v1beta1.SGXEC256Signature';
/**
 * Destructures the fields of a {@link SecretRegistrationRemoteAttestationPlatformInfoBlob} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: sgx_epid_group_flags -
 *   - 1: sgx_tcb_evaluation_flags -
 *   - 2: pse_evaluation_flags -
 *   - 3: latest_equivalent_tcb_psvn -
 *   - 4: latest_pse_isvsvn -
 *   - 5: latest_psda_svn -
 *   - 6: xeid -
 *   - 7: gid -
 *   - 8: sgx_ec256_signature_t -
 */
export const destructSecretRegistrationRemoteAttestationPlatformInfoBlob = (g_struct) => [g_struct.sgx_epid_group_flags, g_struct.sgx_tcb_evaluation_flags, g_struct.pse_evaluation_flags, g_struct.latest_equivalent_tcb_psvn, g_struct.latest_pse_isvsvn, g_struct.latest_psda_svn, g_struct.xeid, g_struct.gid, g_struct.sgx_ec256_signature_t];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REMOTE_ATTESTATION_PLATFORM_INFO_BLOB = '/secret.registration.remote_attestation.v1beta1.PlatformInfoBlob';
//# sourceMappingURL=types.js.map