import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedSecretRegistrationSeedConfig = Encoded<'/secret.registration.v1beta1.SeedConfig'>;
export type EncodedSecretRegistrationLegacySeedConfig = Encoded<'/secret.registration.v1beta1.LegacySeedConfig'>;
export type EncodedSecretRegistrationRegistrationNodeInfo = Encoded<'/secret.registration.v1beta1.RegistrationNodeInfo'>;
/**
 * Encodes a `SeedConfig` protobuf message:
 * @param s_master_key - `master_key`:
 * @param s_encrypted_key - `encrypted_key`:
 * @param n_version - `version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationSeedConfig: (s_master_key?: Opt<string>, s_encrypted_key?: Opt<string>, n_version?: Opt<number>) => EncodedSecretRegistrationSeedConfig;
/**
 * Encodes a `LegacySeedConfig` protobuf message:
 * @param s_master_cert - `master_cert`:
 * @param s_encrypted_key - `encrypted_key`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationLegacySeedConfig: (s_master_cert?: Opt<string>, s_encrypted_key?: Opt<string>) => EncodedSecretRegistrationLegacySeedConfig;
/**
 * Encodes a `RegistrationNodeInfo` protobuf message:
 * @param atu8_certificate - `certificate`:
 * @param atu8_encrypted_seed - `encrypted_seed`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeSecretRegistrationRegistrationNodeInfo: (atu8_certificate?: Opt<Uint8Array>, atu8_encrypted_seed?: Opt<Uint8Array>) => EncodedSecretRegistrationRegistrationNodeInfo;
/**
 * A decoded protobuf SeedConfig message
 *
 * Tuple where:
 *   - 0: master_key -
 *   - 1: encrypted_key -
 *   - 2: version -
 */
export type DecodedSecretRegistrationSeedConfig = [
    s_master_key?: string,
    s_encrypted_key?: string,
    n_version?: number
];
/**
 * Decodes a protobuf SeedConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationSeedConfig}
 */
export declare const decodeSecretRegistrationSeedConfig: (atu8_payload: Uint8Array) => DecodedSecretRegistrationSeedConfig;
/**
 * A decoded protobuf LegacySeedConfig message
 *
 * Tuple where:
 *   - 0: master_cert -
 *   - 1: encrypted_key -
 */
export type DecodedSecretRegistrationLegacySeedConfig = [
    s_master_cert?: string,
    s_encrypted_key?: string
];
/**
 * Decodes a protobuf LegacySeedConfig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationLegacySeedConfig}
 */
export declare const decodeSecretRegistrationLegacySeedConfig: (atu8_payload: Uint8Array) => DecodedSecretRegistrationLegacySeedConfig;
/**
 * A decoded protobuf RegistrationNodeInfo message
 *
 * Tuple where:
 *   - 0: certificate -
 *   - 1: encrypted_seed -
 */
export type DecodedSecretRegistrationRegistrationNodeInfo = [
    atu8_certificate?: Uint8Array,
    atu8_encrypted_seed?: Uint8Array
];
/**
 * Decodes a protobuf RegistrationNodeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedSecretRegistrationRegistrationNodeInfo}
 */
export declare const decodeSecretRegistrationRegistrationNodeInfo: (atu8_payload: Uint8Array) => DecodedSecretRegistrationRegistrationNodeInfo;
/**
 * Destructures the fields of a {@link SecretRegistrationSeedConfig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: master_key -
 *   - 1: encrypted_key -
 *   - 2: version -
 */
export declare const destructSecretRegistrationSeedConfig: (g_struct: SecretRegistrationSeedConfig) => [master_key?: string, encrypted_key?: string, version?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_SEED_CONFIG = "/secret.registration.v1beta1.SeedConfig";
/**
 * JSON serialization of `secret.registration.v1beta1.SeedConfig` -
 */
export type SecretRegistrationSeedConfig = {
    master_key?: string | undefined;
    encrypted_key?: string | undefined;
    version?: number | undefined;
};
/**
 * Destructures the fields of a {@link SecretRegistrationLegacySeedConfig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: master_cert -
 *   - 1: encrypted_key -
 */
export declare const destructSecretRegistrationLegacySeedConfig: (g_struct: SecretRegistrationLegacySeedConfig) => [master_cert?: string, encrypted_key?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_LEGACY_SEED_CONFIG = "/secret.registration.v1beta1.LegacySeedConfig";
/**
 * JSON serialization of `secret.registration.v1beta1.LegacySeedConfig` -
 */
export type SecretRegistrationLegacySeedConfig = {
    master_cert?: string | undefined;
    encrypted_key?: string | undefined;
};
/**
 * Destructures the fields of a {@link SecretRegistrationRegistrationNodeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: certificate -
 *   - 1: encrypted_seed -
 */
export declare const destructSecretRegistrationRegistrationNodeInfo: (g_struct: SecretRegistrationRegistrationNodeInfo) => [certificate?: Uint8Array, encrypted_seed?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_SECRET_REGISTRATION_REGISTRATION_NODE_INFO = "/secret.registration.v1beta1.RegistrationNodeInfo";
/**
 * JSON serialization of `secret.registration.v1beta1.RegistrationNodeInfo` -
 */
export type SecretRegistrationRegistrationNodeInfo = {
    certificate?: CwBase64 | undefined;
    encrypted_seed?: CwBase64 | undefined;
};
