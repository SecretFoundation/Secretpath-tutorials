import { __UNDEFINED } from '@blake.regalia/belt';
import { parse_timestamp } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, map, temporal } from '../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../api/util.js';
import { decodeTendermintCryptoPublicKey } from '../crypto/keys.js';
import { decodeTendermintCryptoProofOps } from '../crypto/proof.js';
import { decodeTendermintTypesConsensusParams } from '../types/params.js';
/**
 * Encodes a `Request` protobuf message:
 * @param g_echo - `echo`:
 * @param g_flush - `flush`:
 * @param g_info - `info`:
 * @param g_init_chain - `init_chain`:
 * @param g_query - `query`:
 * @param g_check_tx - `check_tx`:
 * @param g_commit - `commit`:
 * @param g_list_snapshots - `list_snapshots`:
 * @param g_offer_snapshot - `offer_snapshot`:
 * @param g_load_snapshot_chunk - `load_snapshot_chunk`:
 * @param g_apply_snapshot_chunk - `apply_snapshot_chunk`:
 * @param g_prepare_proposal - `prepare_proposal`:
 * @param g_process_proposal - `process_proposal`:
 * @param g_extend_vote - `extend_vote`:
 * @param g_verify_vote_extension - `verify_vote_extension`:
 * @param g_finalize_block - `finalize_block`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequest = (atu8_echo, atu8_flush, atu8_info, atu8_init_chain, atu8_query, atu8_check_tx, atu8_commit, atu8_list_snapshots, atu8_offer_snapshot, atu8_load_snapshot_chunk, atu8_apply_snapshot_chunk, atu8_prepare_proposal, atu8_process_proposal, atu8_extend_vote, atu8_verify_vote_extension, atu8_finalize_block) => Protobuf() // ...
    .b(atu8_echo) // RequestEcho echo = 1
    .b(atu8_flush) // RequestFlush flush = 2
    .b(atu8_info) // RequestInfo info = 3
    .b(atu8_init_chain, 5) // RequestInitChain init_chain = 5
    .b(atu8_query, 6) // RequestQuery query = 6
    .b(atu8_check_tx, 8) // RequestCheckTx check_tx = 8
    .b(atu8_commit, 11) // RequestCommit commit = 11
    .b(atu8_list_snapshots, 12) // RequestListSnapshots list_snapshots = 12
    .b(atu8_offer_snapshot, 13) // RequestOfferSnapshot offer_snapshot = 13
    .b(atu8_load_snapshot_chunk, 14) // RequestLoadSnapshotChunk load_snapshot_chunk = 14
    .b(atu8_apply_snapshot_chunk, 15) // RequestApplySnapshotChunk apply_snapshot_chunk = 15
    .b(atu8_prepare_proposal, 16) // RequestPrepareProposal prepare_proposal = 16
    .b(atu8_process_proposal, 17) // RequestProcessProposal process_proposal = 17
    .b(atu8_extend_vote, 18) // RequestExtendVote extend_vote = 18
    .b(atu8_verify_vote_extension, 19) // RequestVerifyVoteExtension verify_vote_extension = 19
    .b(atu8_finalize_block, 20) // RequestFinalizeBlock finalize_block = 20
    .o;
/**
 * Encodes a `RequestEcho` protobuf message:
 * @param s_message - `message`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestEcho = (s_message) => Protobuf() // ...
    .s(s_message) // string message = 1
    .o;
/**
 * Encodes a `RequestFlush` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestFlush = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RequestInfo` protobuf message:
 * @param s_version - `version`:
 * @param sg_block_version - `block_version`:
 * @param sg_p2p_version - `p2p_version`:
 * @param s_abci_version - `abci_version`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestInfo = (s_version, sg_block_version, sg_p2p_version, s_abci_version) => Protobuf() // ...
    .s(s_version) // string version = 1
    .g(sg_block_version) // uint64 block_version = 2
    .g(sg_p2p_version) // uint64 p2p_version = 3
    .s(s_abci_version) // string abci_version = 4
    .o;
/**
 * Encodes a `RequestInitChain` protobuf message:
 * @param xt_time - `time`:
 * @param si_chain - `chain_id`:
 * @param g_consensus_params - `consensus_params`:
 * @param a_validators - `validators`:
 * @param atu8_app_state_bytes - `app_state_bytes`:
 * @param sg_initial_height - `initial_height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestInitChain = (xt_time, si_chain, atu8_consensus_params, a_validators, atu8_app_state_bytes, sg_initial_height) => Protobuf() // ...
    .b(temporal(xt_time)) // Timestamp time = 1
    .s(si_chain) // string chain_id = 2
    .b(atu8_consensus_params) // ConsensusParams consensus_params = 3
    .B(a_validators) // ValidatorUpdate[] validators = 4
    .b(atu8_app_state_bytes) // bytes app_state_bytes = 5
    .g(sg_initial_height) // int32 initial_height = 6
    .o;
/**
 * Encodes a `RequestQuery` protobuf message:
 * @param atu8_data - `data`:
 * @param s_path - `path`:
 * @param sg_height - `height`:
 * @param b_prove - `prove`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestQuery = (atu8_data, s_path, sg_height, b_prove) => Protobuf() // ...
    .b(atu8_data) // bytes data = 1
    .s(s_path) // string path = 2
    .g(sg_height) // int32 height = 3
    .v(b_prove) // boolean prove = 4
    .o;
/**
 * Encodes a `RequestCheckTx` protobuf message:
 * @param atu8_tx - `tx`:
 * @param xc_type - `type`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestCheckTx = (atu8_tx, xc_type) => Protobuf() // ...
    .b(atu8_tx) // bytes tx = 1
    .v(xc_type) // CheckTxType type = 2
    .o;
/**
 * Encodes a `RequestCommit` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestCommit = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RequestListSnapshots` protobuf message: lists available snapshots
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestListSnapshots = () => Protobuf() // ...
    .o;
/**
 * Encodes a `RequestOfferSnapshot` protobuf message: offers a snapshot to the application
 * @param g_snapshot - `snapshot`:
 * @param atu8_app_hash - `app_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestOfferSnapshot = (atu8_snapshot, atu8_app_hash) => Protobuf() // ...
    .b(atu8_snapshot) // Snapshot snapshot = 1
    .b(atu8_app_hash) // bytes app_hash = 2
    .o;
/**
 * Encodes a `RequestLoadSnapshotChunk` protobuf message: loads a snapshot chunk
 * @param sg_height - `height`:
 * @param n_format - `format`:
 * @param n_chunk - `chunk`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestLoadSnapshotChunk = (sg_height, n_format, n_chunk) => Protobuf() // ...
    .g(sg_height) // uint64 height = 1
    .v(n_format) // uint32 format = 2
    .v(n_chunk) // uint32 chunk = 3
    .o;
/**
 * Encodes a `RequestApplySnapshotChunk` protobuf message: Applies a snapshot chunk
 * @param n_index - `index`:
 * @param atu8_chunk - `chunk`:
 * @param sa_sender - `sender`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestApplySnapshotChunk = (n_index, atu8_chunk, sa_sender) => Protobuf() // ...
    .v(n_index) // uint32 index = 1
    .b(atu8_chunk) // bytes chunk = 2
    .s(sa_sender) // string sender = 3
    .o;
/**
 * Encodes a `RequestPrepareProposal` protobuf message:
 * @param sg_max_tx_bytes - `max_tx_bytes`: the modified transactions cannot exceed this size.
 * @param a_txs - `txs`: an array of transactions that will be included in a block, sent to the app for possible modifications.
 * @param g_local_last_commit - `local_last_commit`:
 * @param a_misbehaviors - `misbehavior`:
 * @param sg_height - `height`:
 * @param xt_time - `time`:
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_proposer_address - `proposer_address`: address of the public key of the validator proposing the block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestPrepareProposal = (sg_max_tx_bytes, a_txs, atu8_local_last_commit, a_misbehaviors, sg_height, xt_time, atu8_next_validators_hash, atu8_proposer_address) => Protobuf() // ...
    .g(sg_max_tx_bytes) // int32 max_tx_bytes = 1
    .B(a_txs) // bytes[] txs = 2
    .b(atu8_local_last_commit) // ExtendedCommitInfo local_last_commit = 3
    .B(a_misbehaviors) // Misbehavior[] misbehavior = 4
    .g(sg_height) // int32 height = 5
    .b(temporal(xt_time)) // Timestamp time = 6
    .b(atu8_next_validators_hash) // bytes next_validators_hash = 7
    .b(atu8_proposer_address) // bytes proposer_address = 8
    .o;
/**
 * Encodes a `RequestProcessProposal` protobuf message:
 * @param a_txs - `txs`:
 * @param g_proposed_last_commit - `proposed_last_commit`:
 * @param a_misbehaviors - `misbehavior`:
 * @param atu8_hash - `hash`: the merkle root hash of the fields of the proposed block.
 * @param sg_height - `height`:
 * @param xt_time - `time`:
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_proposer_address - `proposer_address`: address of the public key of the original proposer of the block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestProcessProposal = (a_txs, atu8_proposed_last_commit, a_misbehaviors, atu8_hash, sg_height, xt_time, atu8_next_validators_hash, atu8_proposer_address) => Protobuf() // ...
    .B(a_txs) // bytes[] txs = 1
    .b(atu8_proposed_last_commit) // CommitInfo proposed_last_commit = 2
    .B(a_misbehaviors) // Misbehavior[] misbehavior = 3
    .b(atu8_hash) // bytes hash = 4
    .g(sg_height) // int32 height = 5
    .b(temporal(xt_time)) // Timestamp time = 6
    .b(atu8_next_validators_hash) // bytes next_validators_hash = 7
    .b(atu8_proposer_address) // bytes proposer_address = 8
    .o;
/**
 * Encodes a `RequestExtendVote` protobuf message: Extends a vote with application-injected data
 * @param atu8_hash - `hash`: the hash of the block that this vote may be referring to
 * @param sg_height - `height`: the height of the extended vote
 * @param xt_time - `time`: info of the block that this vote may be referring to
 * @param a_txs - `txs`:
 * @param g_proposed_last_commit - `proposed_last_commit`:
 * @param a_misbehaviors - `misbehavior`:
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_proposer_address - `proposer_address`: address of the public key of the original proposer of the block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestExtendVote = (atu8_hash, sg_height, xt_time, a_txs, atu8_proposed_last_commit, a_misbehaviors, atu8_next_validators_hash, atu8_proposer_address) => Protobuf() // ...
    .b(atu8_hash) // bytes hash = 1
    .g(sg_height) // int32 height = 2
    .b(temporal(xt_time)) // Timestamp time = 3
    .B(a_txs) // bytes[] txs = 4
    .b(atu8_proposed_last_commit) // CommitInfo proposed_last_commit = 5
    .B(a_misbehaviors) // Misbehavior[] misbehavior = 6
    .b(atu8_next_validators_hash) // bytes next_validators_hash = 7
    .b(atu8_proposer_address) // bytes proposer_address = 8
    .o;
/**
 * Encodes a `RequestVerifyVoteExtension` protobuf message: Verify the vote extension
 * @param atu8_hash - `hash`: the hash of the block that this received vote corresponds to
 * @param atu8_validator_address - `validator_address`: the validator that signed the vote extension
 * @param sg_height - `height`:
 * @param atu8_vote_extension - `vote_extension`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestVerifyVoteExtension = (atu8_hash, atu8_validator_address, sg_height, atu8_vote_extension) => Protobuf() // ...
    .b(atu8_hash) // bytes hash = 1
    .b(atu8_validator_address) // bytes validator_address = 2
    .g(sg_height) // int32 height = 3
    .b(atu8_vote_extension) // bytes vote_extension = 4
    .o;
/**
 * Encodes a `RequestFinalizeBlock` protobuf message:
 * @param a_txs - `txs`:
 * @param g_decided_last_commit - `decided_last_commit`:
 * @param a_misbehaviors - `misbehavior`:
 * @param atu8_hash - `hash`: the merkle root hash of the fields of the decided block.
 * @param sg_height - `height`:
 * @param xt_time - `time`:
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_proposer_address - `proposer_address`: the address of the public key of the original proposer of the block.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciRequestFinalizeBlock = (a_txs, atu8_decided_last_commit, a_misbehaviors, atu8_hash, sg_height, xt_time, atu8_next_validators_hash, atu8_proposer_address) => Protobuf() // ...
    .B(a_txs) // bytes[] txs = 1
    .b(atu8_decided_last_commit) // CommitInfo decided_last_commit = 2
    .B(a_misbehaviors) // Misbehavior[] misbehavior = 3
    .b(atu8_hash) // bytes hash = 4
    .g(sg_height) // int32 height = 5
    .b(temporal(xt_time)) // Timestamp time = 6
    .b(atu8_next_validators_hash) // bytes next_validators_hash = 7
    .b(atu8_proposer_address) // bytes proposer_address = 8
    .o;
/**
 * Encodes a `Response` protobuf message:
 * @param g_exception - `exception`:
 * @param g_echo - `echo`:
 * @param g_flush - `flush`:
 * @param g_info - `info`:
 * @param g_init_chain - `init_chain`:
 * @param g_query - `query`:
 * @param g_check_tx - `check_tx`:
 * @param g_commit - `commit`:
 * @param g_list_snapshots - `list_snapshots`:
 * @param g_offer_snapshot - `offer_snapshot`:
 * @param g_load_snapshot_chunk - `load_snapshot_chunk`:
 * @param g_apply_snapshot_chunk - `apply_snapshot_chunk`:
 * @param g_prepare_proposal - `prepare_proposal`:
 * @param g_process_proposal - `process_proposal`:
 * @param g_extend_vote - `extend_vote`:
 * @param g_verify_vote_extension - `verify_vote_extension`:
 * @param g_finalize_block - `finalize_block`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponse = (atu8_exception, atu8_echo, atu8_flush, atu8_info, atu8_init_chain, atu8_query, atu8_check_tx, atu8_commit, atu8_list_snapshots, atu8_offer_snapshot, atu8_load_snapshot_chunk, atu8_apply_snapshot_chunk, atu8_prepare_proposal, atu8_process_proposal, atu8_extend_vote, atu8_verify_vote_extension, atu8_finalize_block) => Protobuf() // ...
    .b(atu8_exception) // ResponseException exception = 1
    .b(atu8_echo) // ResponseEcho echo = 2
    .b(atu8_flush) // ResponseFlush flush = 3
    .b(atu8_info) // ResponseInfo info = 4
    .b(atu8_init_chain, 6) // ResponseInitChain init_chain = 6
    .b(atu8_query, 7) // ResponseQuery query = 7
    .b(atu8_check_tx, 9) // ResponseCheckTx check_tx = 9
    .b(atu8_commit, 12) // ResponseCommit commit = 12
    .b(atu8_list_snapshots, 13) // ResponseListSnapshots list_snapshots = 13
    .b(atu8_offer_snapshot, 14) // ResponseOfferSnapshot offer_snapshot = 14
    .b(atu8_load_snapshot_chunk, 15) // ResponseLoadSnapshotChunk load_snapshot_chunk = 15
    .b(atu8_apply_snapshot_chunk, 16) // ResponseApplySnapshotChunk apply_snapshot_chunk = 16
    .b(atu8_prepare_proposal, 17) // ResponsePrepareProposal prepare_proposal = 17
    .b(atu8_process_proposal, 18) // ResponseProcessProposal process_proposal = 18
    .b(atu8_extend_vote, 19) // ResponseExtendVote extend_vote = 19
    .b(atu8_verify_vote_extension, 20) // ResponseVerifyVoteExtension verify_vote_extension = 20
    .b(atu8_finalize_block, 21) // ResponseFinalizeBlock finalize_block = 21
    .o;
/**
 * Encodes a `ResponseException` protobuf message: nondeterministic
 * @param s_error - `error`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseException = (s_error) => Protobuf() // ...
    .s(s_error) // string error = 1
    .o;
/**
 * Encodes a `ResponseEcho` protobuf message:
 * @param s_message - `message`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseEcho = (s_message) => Protobuf() // ...
    .s(s_message) // string message = 1
    .o;
/**
 * Encodes a `ResponseFlush` protobuf message:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseFlush = () => Protobuf() // ...
    .o;
/**
 * Encodes a `ResponseInfo` protobuf message:
 * @param s_data - `data`:
 * @param s_version - `version`:
 * @param sg_app_version - `app_version`:
 * @param sg_last_block_height - `last_block_height`:
 * @param atu8_last_block_app_hash - `last_block_app_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseInfo = (s_data, s_version, sg_app_version, sg_last_block_height, atu8_last_block_app_hash) => Protobuf() // ...
    .s(s_data) // string data = 1
    .s(s_version) // string version = 2
    .g(sg_app_version) // uint64 app_version = 3
    .g(sg_last_block_height) // int32 last_block_height = 4
    .b(atu8_last_block_app_hash) // bytes last_block_app_hash = 5
    .o;
/**
 * Encodes a `ResponseInitChain` protobuf message:
 * @param g_consensus_params - `consensus_params`:
 * @param a_validators - `validators`:
 * @param atu8_app_hash - `app_hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseInitChain = (atu8_consensus_params, a_validators, atu8_app_hash) => Protobuf() // ...
    .b(atu8_consensus_params) // ConsensusParams consensus_params = 1
    .B(a_validators) // ValidatorUpdate[] validators = 2
    .b(atu8_app_hash) // bytes app_hash = 3
    .o;
/**
 * Encodes a `ResponseQuery` protobuf message:
 * @param n_code - `code`:
 * @param s_log - `log`: bytes data = 2; // use "value" instead.
 * @param s_info - `info`:
 * @param sg_index - `index`:
 * @param atu8_key - `key`:
 * @param atu8_value - `value`:
 * @param g_proof_ops - `proof_ops`:
 * @param sg_height - `height`:
 * @param s_codespace - `codespace`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseQuery = (n_code, s_log, s_info, sg_index, atu8_key, atu8_value, atu8_proof_ops, sg_height, s_codespace) => Protobuf() // ...
    .v(n_code) // uint32 code = 1
    .s(s_log, 3) // string log = 3
    .s(s_info, 4) // string info = 4
    .g(sg_index, 5) // int32 index = 5
    .b(atu8_key, 6) // bytes key = 6
    .b(atu8_value, 7) // bytes value = 7
    .b(atu8_proof_ops, 8) // ProofOps proof_ops = 8
    .g(sg_height, 9) // int32 height = 9
    .s(s_codespace, 10) // string codespace = 10
    .o;
/**
 * Encodes a `ResponseCheckTx` protobuf message:
 * @param n_code - `code`:
 * @param atu8_data - `data`:
 * @param s_log - `log`:
 * @param s_info - `info`:
 * @param sg_gas_wanted - `gas_wanted`:
 * @param sg_gas_used - `gas_used`:
 * @param a_events - `events`:
 * @param s_codespace - `codespace`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseCheckTx = (n_code, atu8_data, s_log, s_info, sg_gas_wanted, sg_gas_used, a_events, s_codespace) => Protobuf() // ...
    .v(n_code) // uint32 code = 1
    .b(atu8_data) // bytes data = 2
    .s(s_log) // string log = 3
    .s(s_info) // string info = 4
    .g(sg_gas_wanted) // int32 gas_wanted = 5
    .g(sg_gas_used) // int32 gas_used = 6
    .B(a_events) // Event[] events = 7
    .s(s_codespace) // string codespace = 8
    .o;
/**
 * Encodes a `ResponseCommit` protobuf message:
 * @param sg_retain_height - `retain_height`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseCommit = (sg_retain_height) => Protobuf() // ...
    .g(sg_retain_height, 3) // int32 retain_height = 3
    .o;
/**
 * Encodes a `ResponseListSnapshots` protobuf message:
 * @param a_snapshots - `snapshots`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseListSnapshots = (a_snapshots) => Protobuf() // ...
    .B(a_snapshots) // Snapshot[] snapshots = 1
    .o;
/**
 * Encodes a `ResponseOfferSnapshot` protobuf message:
 * @param xc_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseOfferSnapshot = (xc_result) => Protobuf() // ...
    .v(xc_result) // Result result = 1
    .o;
/**
 * Encodes a `ResponseLoadSnapshotChunk` protobuf message:
 * @param atu8_chunk - `chunk`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseLoadSnapshotChunk = (atu8_chunk) => Protobuf() // ...
    .b(atu8_chunk) // bytes chunk = 1
    .o;
/**
 * Encodes a `ResponseApplySnapshotChunk` protobuf message:
 * @param xc_result - `result`:
 * @param a_refetch_chunks - `refetch_chunks`:
 * @param a_reject_senders - `reject_senders`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseApplySnapshotChunk = (xc_result, a_refetch_chunks, a_reject_senders) => Protobuf() // ...
    .v(xc_result) // Result result = 1
    .V(a_refetch_chunks) // uint32[] refetch_chunks = 2
    .S(a_reject_senders) // string[] reject_senders = 3
    .o;
/**
 * Encodes a `ResponsePrepareProposal` protobuf message:
 * @param a_txs - `txs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponsePrepareProposal = (a_txs) => Protobuf() // ...
    .B(a_txs) // bytes[] txs = 1
    .o;
/**
 * Encodes a `ResponseProcessProposal` protobuf message:
 * @param xc_status - `status`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseProcessProposal = (xc_status) => Protobuf() // ...
    .v(xc_status) // ProposalStatus status = 1
    .o;
/**
 * Encodes a `ResponseExtendVote` protobuf message:
 * @param atu8_vote_extension - `vote_extension`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseExtendVote = (atu8_vote_extension) => Protobuf() // ...
    .b(atu8_vote_extension) // bytes vote_extension = 1
    .o;
/**
 * Encodes a `ResponseVerifyVoteExtension` protobuf message:
 * @param xc_status - `status`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseVerifyVoteExtension = (xc_status) => Protobuf() // ...
    .v(xc_status) // VerifyStatus status = 1
    .o;
/**
 * Encodes a `ResponseFinalizeBlock` protobuf message:
 * @param a_events - `events`: set of block events emmitted as part of executing the block
 * @param a_tx_results - `tx_results`: the result of executing each transaction including the events the particular transction emitted. This should match the order of the transactions delivered in the block itself
 * @param a_validator_updates - `validator_updates`: a list of updates to the validator set. These will reflect the validator set at current height + 2.
 * @param g_consensus_param_updates - `consensus_param_updates`: updates to the consensus params, if any.
 * @param atu8_app_hash - `app_hash`: the hash of the applications' state which is used to confirm that execution of the transactions was deterministic. It is up to the application to decide which algorithm to use.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciResponseFinalizeBlock = (a_events, a_tx_results, a_validator_updates, atu8_consensus_param_updates, atu8_app_hash) => Protobuf() // ...
    .B(a_events) // Event[] events = 1
    .B(a_tx_results) // ExecTxResult[] tx_results = 2
    .B(a_validator_updates) // ValidatorUpdate[] validator_updates = 3
    .b(atu8_consensus_param_updates) // ConsensusParams consensus_param_updates = 4
    .b(atu8_app_hash) // bytes app_hash = 5
    .o;
/**
 * Encodes a `CommitInfo` protobuf message:
 * @param n_round - `round`:
 * @param a_votes - `votes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciCommitInfo = (n_round, a_votes) => Protobuf() // ...
    .v(n_round) // int32 round = 1
    .B(a_votes) // VoteInfo[] votes = 2
    .o;
/**
 * Encodes a `ExtendedCommitInfo` protobuf message: similar to CommitInfo except that it is only used in the PrepareProposal request such that CometBFT can provide vote extensions to the application.
 * @param n_round - `round`: The round at which the block proposer decided in the previous height.
 * @param a_votes - `votes`: List of validators' addresses in the last validator set with their voting information, including vote extensions.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciExtendedCommitInfo = (n_round, a_votes) => Protobuf() // ...
    .v(n_round) // int32 round = 1
    .B(a_votes) // ExtendedVoteInfo[] votes = 2
    .o;
/**
 * Encodes a `Event` protobuf message: allows application developers to attach additional information to ResponseFinalizeBlock and ResponseCheckTx. Later, transactions may be queried using these events.
 * @param s_type - `type`:
 * @param a_attributes - `attributes`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciEvent = (s_type, a_attributes) => Protobuf() // ...
    .s(s_type) // string type = 1
    .B(a_attributes) // EventAttribute[] attributes = 2
    .o;
/**
 * Encodes a `EventAttribute` protobuf message: a single key-value pair, associated with an event.
 * @param s_key - `key`:
 * @param s_value - `value`:
 * @param b_index - `index`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciEventAttribute = (s_key, s_value, b_index) => Protobuf() // ...
    .s(s_key) // string key = 1
    .s(s_value) // string value = 2
    .v(b_index) // boolean index = 3
    .o;
/**
 * Encodes a `ExecTxResult` protobuf message: contains results of executing one individual transaction. * Its structure is equivalent to #ResponseDeliverTx which will be deprecated/deleted
 * @param n_code - `code`:
 * @param atu8_data - `data`:
 * @param s_log - `log`:
 * @param s_info - `info`:
 * @param sg_gas_wanted - `gas_wanted`:
 * @param sg_gas_used - `gas_used`:
 * @param a_events - `events`:
 * @param s_codespace - `codespace`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciExecTxResult = (n_code, atu8_data, s_log, s_info, sg_gas_wanted, sg_gas_used, a_events, s_codespace) => Protobuf() // ...
    .v(n_code) // uint32 code = 1
    .b(atu8_data) // bytes data = 2
    .s(s_log) // string log = 3
    .s(s_info) // string info = 4
    .g(sg_gas_wanted) // int32 gas_wanted = 5
    .g(sg_gas_used) // int32 gas_used = 6
    .B(a_events) // Event[] events = 7
    .s(s_codespace) // string codespace = 8
    .o;
/**
 * Encodes a `TxResult` protobuf message: contains results of executing the transaction. One usage is indexing transaction results.
 * @param sg_height - `height`:
 * @param n_index - `index`:
 * @param atu8_tx - `tx`:
 * @param g_result - `result`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciTxResult = (sg_height, n_index, atu8_tx, atu8_result) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .v(n_index) // uint32 index = 2
    .b(atu8_tx) // bytes tx = 3
    .b(atu8_result) // ExecTxResult result = 4
    .o;
/**
 * Encodes a `Validator` protobuf message:
 * @param atu8_address - `address`:
 * @param sg_power - `power`: PubKey pub_key = 2 [(gogoproto.nullable)=false];
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciValidator = (atu8_address, sg_power) => Protobuf() // ...
    .b(atu8_address) // bytes address = 1
    .g(sg_power, 3) // int32 power = 3
    .o;
/**
 * Encodes a `ValidatorUpdate` protobuf message:
 * @param g_pub_key - `pub_key`:
 * @param sg_power - `power`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciValidatorUpdate = (atu8_pub_key, sg_power) => Protobuf() // ...
    .b(atu8_pub_key) // PublicKey pub_key = 1
    .g(sg_power) // int32 power = 2
    .o;
/**
 * Encodes a `VoteInfo` protobuf message:
 * @param g_validator - `validator`:
 * @param xc_block_id_flag - `block_id_flag`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciVoteInfo = (atu8_validator, xc_block_id_flag) => Protobuf() // ...
    .b(atu8_validator) // Validator validator = 1
    .v(xc_block_id_flag, 3) // BlockIDFlag block_id_flag = 3
    .o;
/**
 * Encodes a `ExtendedVoteInfo` protobuf message:
 * @param g_validator - `validator`: The validator that sent the vote.
 * @param atu8_vote_extension - `vote_extension`: Non-deterministic extension provided by the sending validator's application.
 * @param atu8_extension_signature - `extension_signature`: Vote extension signature created by CometBFT
 * @param xc_block_id_flag - `block_id_flag`: indicates whether the validator voted for a block, nil, or did not vote at all
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciExtendedVoteInfo = (atu8_validator, atu8_vote_extension, atu8_extension_signature, xc_block_id_flag) => Protobuf() // ...
    .b(atu8_validator) // Validator validator = 1
    .b(atu8_vote_extension, 3) // bytes vote_extension = 3
    .b(atu8_extension_signature, 4) // bytes extension_signature = 4
    .v(xc_block_id_flag, 5) // BlockIDFlag block_id_flag = 5
    .o;
/**
 * Encodes a `Misbehavior` protobuf message:
 * @param xc_type - `type`:
 * @param g_validator - `validator`: The offending validator
 * @param sg_height - `height`: The height when the offense occurred
 * @param xt_time - `time`: The corresponding time where the offense occurred
 * @param sg_total_voting_power - `total_voting_power`: Total voting power of the validator set in case the ABCI application does not store historical validators. https://github.com/tendermint/tendermint/issues/4581
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciMisbehavior = (xc_type, atu8_validator, sg_height, xt_time, sg_total_voting_power) => Protobuf() // ...
    .v(xc_type) // MisbehaviorType type = 1
    .b(atu8_validator) // Validator validator = 2
    .g(sg_height) // int32 height = 3
    .b(temporal(xt_time)) // Timestamp time = 4
    .g(sg_total_voting_power) // int32 total_voting_power = 5
    .o;
/**
 * Encodes a `Snapshot` protobuf message:
 * @param sg_height - `height`:
 * @param n_format - `format`:
 * @param n_chunks - `chunks`:
 * @param atu8_hash - `hash`:
 * @param atu8_metadata - `metadata`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintAbciSnapshot = (sg_height, n_format, n_chunks, atu8_hash, atu8_metadata) => Protobuf() // ...
    .g(sg_height) // uint64 height = 1
    .v(n_format) // uint32 format = 2
    .v(n_chunks) // uint32 chunks = 3
    .b(atu8_hash) // bytes hash = 4
    .b(atu8_metadata) // bytes metadata = 5
    .o;
/**
 * Decodes a protobuf Request message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciRequest}
 */
export const decodeTendermintAbciRequest = ((atu8_payload, [a_echo, a_flush, a_info, , a_init_chain, a_query, , a_check_tx, , , a_commit, a_list_snapshots, a_offer_snapshot, a_load_snapshot_chunk, a_apply_snapshot_chunk, a_prepare_proposal, a_process_proposal, a_extend_vote, a_verify_vote_extension, a_finalize_block] = decode_protobuf(atu8_payload, [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [decodeTendermintAbciRequestEcho, decodeTendermintAbciRequestFlush, decodeTendermintAbciRequestInfo, 0, decodeTendermintAbciRequestInitChain, decodeTendermintAbciRequestQuery, 0, decodeTendermintAbciRequestCheckTx, 0, 0, decodeTendermintAbciRequestCommit, decodeTendermintAbciRequestListSnapshots, decodeTendermintAbciRequestOfferSnapshot, decodeTendermintAbciRequestLoadSnapshotChunk, decodeTendermintAbciRequestApplySnapshotChunk, decodeTendermintAbciRequestPrepareProposal, decodeTendermintAbciRequestProcessProposal, decodeTendermintAbciRequestExtendVote, decodeTendermintAbciRequestVerifyVoteExtension, decodeTendermintAbciRequestFinalizeBlock])) => [a_echo, a_flush, a_info, __UNDEFINED, a_init_chain, a_query, __UNDEFINED, a_check_tx, __UNDEFINED, __UNDEFINED, a_commit, a_list_snapshots, a_offer_snapshot, a_load_snapshot_chunk, a_apply_snapshot_chunk, a_prepare_proposal, a_process_proposal, a_extend_vote, a_verify_vote_extension, a_finalize_block]);
/**
 * Decodes a protobuf RequestEcho message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestEcho}
 */
export const decodeTendermintAbciRequestEcho = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf RequestFlush message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestFlush}
 */
export const decodeTendermintAbciRequestFlush = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RequestInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestInfo}
 */
export const decodeTendermintAbciRequestInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 3, 3, 5]);
/**
 * Decodes a protobuf RequestInitChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestInitChain}
 */
export const decodeTendermintAbciRequestInitChain = (atu8_payload) => decode_protobuf(atu8_payload, [[3, 1], 5, 1, 0, 1, 3], [decode_temporal, 0, decodeTendermintTypesConsensusParams, decodeTendermintAbciValidatorUpdate]);
/**
 * Decodes a protobuf RequestQuery message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestQuery}
 */
export const decodeTendermintAbciRequestQuery = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3, 1]);
/**
 * Decodes a protobuf RequestCheckTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestCheckTx}
 */
export const decodeTendermintAbciRequestCheckTx = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf RequestCommit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestCommit}
 */
export const decodeTendermintAbciRequestCommit = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RequestListSnapshots message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestListSnapshots}
 */
export const decodeTendermintAbciRequestListSnapshots = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf RequestOfferSnapshot message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestOfferSnapshot}
 */
export const decodeTendermintAbciRequestOfferSnapshot = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeTendermintAbciSnapshot]);
/**
 * Decodes a protobuf RequestLoadSnapshotChunk message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestLoadSnapshotChunk}
 */
export const decodeTendermintAbciRequestLoadSnapshotChunk = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1]);
/**
 * Decodes a protobuf RequestApplySnapshotChunk message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestApplySnapshotChunk}
 */
export const decodeTendermintAbciRequestApplySnapshotChunk = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5]);
/**
 * Decodes a protobuf RequestPrepareProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestPrepareProposal}
 */
export const decodeTendermintAbciRequestPrepareProposal = (atu8_payload) => decode_protobuf(atu8_payload, [3, 0, 1, 0, 3, [3, 1], 1, 1], [0, 0, decodeTendermintAbciExtendedCommitInfo, decodeTendermintAbciMisbehavior, 0, decode_temporal]);
/**
 * Decodes a protobuf RequestProcessProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestProcessProposal}
 */
export const decodeTendermintAbciRequestProcessProposal = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 0, 1, 3, [3, 1], 1, 1], [0, decodeTendermintAbciCommitInfo, decodeTendermintAbciMisbehavior, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf RequestExtendVote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestExtendVote}
 */
export const decodeTendermintAbciRequestExtendVote = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, [3, 1], 0, 1, 0, 1, 1], [0, 0, decode_temporal, 0, decodeTendermintAbciCommitInfo, decodeTendermintAbciMisbehavior]);
/**
 * Decodes a protobuf RequestVerifyVoteExtension message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestVerifyVoteExtension}
 */
export const decodeTendermintAbciRequestVerifyVoteExtension = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3, 1]);
/**
 * Decodes a protobuf RequestFinalizeBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciRequestFinalizeBlock}
 */
export const decodeTendermintAbciRequestFinalizeBlock = (atu8_payload) => decode_protobuf(atu8_payload, [0, 1, 0, 1, 3, [3, 1], 1, 1], [0, decodeTendermintAbciCommitInfo, decodeTendermintAbciMisbehavior, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf  message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciResponse}
 */
export const decodeTendermintAbciResponse = ((atu8_payload, [a_exception, a_echo, a_flush, a_info, , a_init_chain, a_query, , a_check_tx, , , a_commit, a_list_snapshots, a_offer_snapshot, a_load_snapshot_chunk, a_apply_snapshot_chunk, a_prepare_proposal, a_process_proposal, a_extend_vote, a_verify_vote_extension, a_finalize_block] = decode_protobuf(atu8_payload, [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [decodeTendermintAbciResponseException, decodeTendermintAbciResponseEcho, decodeTendermintAbciResponseFlush, decodeTendermintAbciResponseInfo, 0, decodeTendermintAbciResponseInitChain, decodeTendermintAbciResponseQuery, 0, decodeTendermintAbciResponseCheckTx, 0, 0, decodeTendermintAbciResponseCommit, decodeTendermintAbciResponseListSnapshots, decodeTendermintAbciResponseOfferSnapshot, decodeTendermintAbciResponseLoadSnapshotChunk, decodeTendermintAbciResponseApplySnapshotChunk, decodeTendermintAbciResponsePrepareProposal, decodeTendermintAbciResponseProcessProposal, decodeTendermintAbciResponseExtendVote, decodeTendermintAbciResponseVerifyVoteExtension, decodeTendermintAbciResponseFinalizeBlock])) => [a_exception, a_echo, a_flush, a_info, __UNDEFINED, a_init_chain, a_query, __UNDEFINED, a_check_tx, __UNDEFINED, __UNDEFINED, a_commit, a_list_snapshots, a_offer_snapshot, a_load_snapshot_chunk, a_apply_snapshot_chunk, a_prepare_proposal, a_process_proposal, a_extend_vote, a_verify_vote_extension, a_finalize_block]);
/**
 * Decodes a protobuf ResponseException message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseException}
 */
export const decodeTendermintAbciResponseException = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf ResponseEcho message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseEcho}
 */
export const decodeTendermintAbciResponseEcho = (atu8_payload) => decode_protobuf(atu8_payload, [5]);
/**
 * Decodes a protobuf ResponseFlush message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseFlush}
 */
export const decodeTendermintAbciResponseFlush = (atu8_payload) => decode_protobuf(atu8_payload);
/**
 * Decodes a protobuf ResponseInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseInfo}
 */
export const decodeTendermintAbciResponseInfo = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 3, 3, 1]);
/**
 * Decodes a protobuf ResponseInitChain message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseInitChain}
 */
export const decodeTendermintAbciResponseInitChain = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 1], [decodeTendermintTypesConsensusParams, decodeTendermintAbciValidatorUpdate]);
/**
 * Decodes a protobuf ResponseQuery message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciResponseQuery}
 */
export const decodeTendermintAbciResponseQuery = ((atu8_payload, [n_code, , s_log, s_info, sg_index, atu8_key, atu8_value, a_proof_ops, sg_height, s_codespace] = decode_protobuf(atu8_payload, [1, 0, 5, 5, 3, 1, 1, 1, 3, 5], [0, 0, 0, 0, 0, 0, 0, decodeTendermintCryptoProofOps])) => [n_code, __UNDEFINED, s_log, s_info, sg_index, atu8_key, atu8_value, a_proof_ops, sg_height, s_codespace]);
/**
 * Decodes a protobuf ResponseCheckTx message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseCheckTx}
 */
export const decodeTendermintAbciResponseCheckTx = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5, 5, 3, 3, 0, 5], [0, 0, 0, 0, 0, 0, decodeTendermintAbciEvent]);
/**
 * Decodes a protobuf ResponseCommit message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciResponseCommit}
 */
export const decodeTendermintAbciResponseCommit = ((atu8_payload, [, , sg_retain_height] = decode_protobuf(atu8_payload, [0, 0, 3])) => [__UNDEFINED, __UNDEFINED, sg_retain_height]);
/**
 * Decodes a protobuf ResponseListSnapshots message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseListSnapshots}
 */
export const decodeTendermintAbciResponseListSnapshots = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeTendermintAbciSnapshot]);
/**
 * Decodes a protobuf ResponseOfferSnapshot message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseOfferSnapshot}
 */
export const decodeTendermintAbciResponseOfferSnapshot = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ResponseLoadSnapshotChunk message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseLoadSnapshotChunk}
 */
export const decodeTendermintAbciResponseLoadSnapshotChunk = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ResponseApplySnapshotChunk message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseApplySnapshotChunk}
 */
export const decodeTendermintAbciResponseApplySnapshotChunk = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0, 4]);
/**
 * Decodes a protobuf ResponsePrepareProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponsePrepareProposal}
 */
export const decodeTendermintAbciResponsePrepareProposal = (atu8_payload) => decode_protobuf(atu8_payload, [0]);
/**
 * Decodes a protobuf ResponseProcessProposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseProcessProposal}
 */
export const decodeTendermintAbciResponseProcessProposal = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ResponseExtendVote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseExtendVote}
 */
export const decodeTendermintAbciResponseExtendVote = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ResponseVerifyVoteExtension message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseVerifyVoteExtension}
 */
export const decodeTendermintAbciResponseVerifyVoteExtension = (atu8_payload) => decode_protobuf(atu8_payload, [1]);
/**
 * Decodes a protobuf ResponseFinalizeBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciResponseFinalizeBlock}
 */
export const decodeTendermintAbciResponseFinalizeBlock = (atu8_payload) => decode_protobuf(atu8_payload, [0, 0, 0, 1, 1], [decodeTendermintAbciEvent, decodeTendermintAbciExecTxResult, decodeTendermintAbciValidatorUpdate, decodeTendermintTypesConsensusParams]);
/**
 * Decodes a protobuf CommitInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciCommitInfo}
 */
export const decodeTendermintAbciCommitInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [0, decodeTendermintAbciVoteInfo]);
/**
 * Decodes a protobuf ExtendedCommitInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciExtendedCommitInfo}
 */
export const decodeTendermintAbciExtendedCommitInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 0], [0, decodeTendermintAbciExtendedVoteInfo]);
/**
 * Decodes a protobuf Event message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciEvent}
 */
export const decodeTendermintAbciEvent = (atu8_payload) => decode_protobuf(atu8_payload, [5, 0], [0, decodeTendermintAbciEventAttribute]);
/**
 * Decodes a protobuf EventAttribute message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciEventAttribute}
 */
export const decodeTendermintAbciEventAttribute = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf ExecTxResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciExecTxResult}
 */
export const decodeTendermintAbciExecTxResult = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 5, 5, 3, 3, 0, 5], [0, 0, 0, 0, 0, 0, decodeTendermintAbciEvent]);
/**
 * Decodes a protobuf TxResult message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciTxResult}
 */
export const decodeTendermintAbciTxResult = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1, 1], [0, 0, 0, decodeTendermintAbciExecTxResult]);
/**
 * Decodes a protobuf Validator message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciValidator}
 */
export const decodeTendermintAbciValidator = ((atu8_payload, [atu8_address, , sg_power] = decode_protobuf(atu8_payload, [1, 0, 3])) => [atu8_address, __UNDEFINED, sg_power]);
/**
 * Decodes a protobuf ValidatorUpdate message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciValidatorUpdate}
 */
export const decodeTendermintAbciValidatorUpdate = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3], [decodeTendermintCryptoPublicKey]);
/**
 * Decodes a protobuf VoteInfo message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciVoteInfo}
 */
export const decodeTendermintAbciVoteInfo = ((atu8_payload, [a_validator, , xc_block_id_flag] = decode_protobuf(atu8_payload, [1, 0, 1], [decodeTendermintAbciValidator])) => [a_validator, __UNDEFINED, xc_block_id_flag]);
/**
 * Decodes a protobuf ExtendedVoteInfo message
 * @param atu8_payload - raw bytes to decode
 * @param RESERVED - a second argument is explicitly forbidden. make sure not to pass this function by reference to some callback argument
 * @returns a {@link DecodedTendermintAbciExtendedVoteInfo}
 */
export const decodeTendermintAbciExtendedVoteInfo = ((atu8_payload, [a_validator, , atu8_vote_extension, atu8_extension_signature, xc_block_id_flag] = decode_protobuf(atu8_payload, [1, 0, 1, 1, 1], [decodeTendermintAbciValidator])) => [a_validator, __UNDEFINED, atu8_vote_extension, atu8_extension_signature, xc_block_id_flag]);
/**
 * Decodes a protobuf Misbehavior message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciMisbehavior}
 */
export const decodeTendermintAbciMisbehavior = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3, [3, 1], 3], [0, decodeTendermintAbciValidator, 0, decode_temporal]);
/**
 * Decodes a protobuf Snapshot message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintAbciSnapshot}
 */
export const decodeTendermintAbciSnapshot = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1, 1, 1]);
/**
 * Destructures the fields of a {@link TendermintAbciResponse} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: exception -
 *   - 1: echo -
 *   - 2: flush -
 *   - 3: info -
 *   - 5: init_chain -
 *   - 6: query -
 *   - 8: check_tx -
 *   - 11: commit -
 *   - 12: list_snapshots -
 *   - 13: offer_snapshot -
 *   - 14: load_snapshot_chunk -
 *   - 15: apply_snapshot_chunk -
 *   - 16: prepare_proposal -
 *   - 17: process_proposal -
 *   - 18: extend_vote -
 *   - 19: verify_vote_extension -
 *   - 20: finalize_block -
 */
export const destructTendermintAbciResponse = (g_struct) => [g_struct.exception, g_struct.echo, g_struct.flush, g_struct.info, __UNDEFINED, g_struct.init_chain, g_struct.query, __UNDEFINED, g_struct.check_tx, __UNDEFINED, __UNDEFINED, g_struct.commit, g_struct.list_snapshots, g_struct.offer_snapshot, g_struct.load_snapshot_chunk, g_struct.apply_snapshot_chunk, g_struct.prepare_proposal, g_struct.process_proposal, g_struct.extend_vote, g_struct.verify_vote_extension, g_struct.finalize_block];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE = '/tendermint.abci.Response';
/**
 * Destructures the fields of a {@link TendermintAbciResponseException} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: error -
 */
export const destructTendermintAbciResponseException = (g_struct) => [g_struct.error];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_EXCEPTION = '/tendermint.abci.ResponseException';
/**
 * Destructures the fields of a {@link TendermintAbciResponseEcho} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message -
 */
export const destructTendermintAbciResponseEcho = (g_struct) => [g_struct.message];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_ECHO = '/tendermint.abci.ResponseEcho';
/**
 * Destructures the fields of a {@link TendermintAbciResponseFlush} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructTendermintAbciResponseFlush = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_FLUSH = '/tendermint.abci.ResponseFlush';
/**
 * Destructures the fields of a {@link TendermintAbciResponseInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 *   - 1: version -
 *   - 2: app_version -
 *   - 3: last_block_height -
 *   - 4: last_block_app_hash -
 */
export const destructTendermintAbciResponseInfo = (g_struct) => [g_struct.data, g_struct.version, g_struct.app_version, g_struct.last_block_height, safe_base64_to_bytes(g_struct.last_block_app_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_INFO = '/tendermint.abci.ResponseInfo';
/**
 * Destructures the fields of a {@link TendermintAbciResponseInitChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: consensus_params -
 *   - 1: validators -
 *   - 2: app_hash -
 */
export const destructTendermintAbciResponseInitChain = (g_struct) => [g_struct.consensus_params, g_struct.validators, safe_base64_to_bytes(g_struct.app_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_INIT_CHAIN = '/tendermint.abci.ResponseInitChain';
/**
 * Destructures the fields of a {@link TendermintAbciResponseQuery} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code -
 *   - 2: log - bytes data = 2; // use "value" instead.
 *   - 3: info -
 *   - 4: index -
 *   - 5: key -
 *   - 6: value -
 *   - 7: proof_ops -
 *   - 8: height -
 *   - 9: codespace -
 */
export const destructTendermintAbciResponseQuery = (g_struct) => [g_struct.code, __UNDEFINED, g_struct.log, g_struct.info, g_struct.index, safe_base64_to_bytes(g_struct.key), safe_base64_to_bytes(g_struct.value), g_struct.proof_ops, g_struct.height, g_struct.codespace];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_QUERY = '/tendermint.abci.ResponseQuery';
/**
 * Destructures the fields of a {@link TendermintAbciResponseCheckTx} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code -
 *   - 1: data -
 *   - 2: log -
 *   - 3: info -
 *   - 4: gas_wanted -
 *   - 5: gas_used -
 *   - 6: events -
 *   - 7: codespace -
 */
export const destructTendermintAbciResponseCheckTx = (g_struct) => [g_struct.code, safe_base64_to_bytes(g_struct.data), g_struct.log, g_struct.info, g_struct.gas_wanted, g_struct.gas_used, g_struct.events, g_struct.codespace];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_CHECK_TX = '/tendermint.abci.ResponseCheckTx';
/**
 * Destructures the fields of a {@link TendermintAbciResponseCommit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 2: retain_height -
 */
export const destructTendermintAbciResponseCommit = (g_struct) => [__UNDEFINED, __UNDEFINED, g_struct.retain_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_COMMIT = '/tendermint.abci.ResponseCommit';
/**
 * Destructures the fields of a {@link TendermintAbciResponseListSnapshots} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: snapshots -
 */
export const destructTendermintAbciResponseListSnapshots = (g_struct) => [g_struct.snapshots];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_LIST_SNAPSHOTS = '/tendermint.abci.ResponseListSnapshots';
/**
 * Destructures the fields of a {@link TendermintAbciResponseOfferSnapshot} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 */
export const destructTendermintAbciResponseOfferSnapshot = (g_struct) => [g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT = '/tendermint.abci.ResponseOfferSnapshot';
/**
 * Destructures the fields of a {@link TendermintAbciResponseLoadSnapshotChunk} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: chunk -
 */
export const destructTendermintAbciResponseLoadSnapshotChunk = (g_struct) => [safe_base64_to_bytes(g_struct.chunk)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_LOAD_SNAPSHOT_CHUNK = '/tendermint.abci.ResponseLoadSnapshotChunk';
/**
 * Destructures the fields of a {@link TendermintAbciResponseApplySnapshotChunk} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: result -
 *   - 1: refetch_chunks -
 *   - 2: reject_senders -
 */
export const destructTendermintAbciResponseApplySnapshotChunk = (g_struct) => [g_struct.result, g_struct.refetch_chunks, g_struct.reject_senders];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK = '/tendermint.abci.ResponseApplySnapshotChunk';
/**
 * Destructures the fields of a {@link TendermintAbciResponsePrepareProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs -
 */
export const destructTendermintAbciResponsePrepareProposal = (g_struct) => [map(g_struct.txs, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_PREPARE_PROPOSAL = '/tendermint.abci.ResponsePrepareProposal';
/**
 * Destructures the fields of a {@link TendermintAbciResponseProcessProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: status -
 */
export const destructTendermintAbciResponseProcessProposal = (g_struct) => [g_struct.status];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL = '/tendermint.abci.ResponseProcessProposal';
/**
 * Destructures the fields of a {@link TendermintAbciResponseExtendVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote_extension -
 */
export const destructTendermintAbciResponseExtendVote = (g_struct) => [safe_base64_to_bytes(g_struct.vote_extension)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_EXTEND_VOTE = '/tendermint.abci.ResponseExtendVote';
/**
 * Destructures the fields of a {@link TendermintAbciResponseVerifyVoteExtension} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: status -
 */
export const destructTendermintAbciResponseVerifyVoteExtension = (g_struct) => [g_struct.status];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION = '/tendermint.abci.ResponseVerifyVoteExtension';
/**
 * Destructures the fields of a {@link TendermintAbciResponseFinalizeBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: events - set of block events emmitted as part of executing the block
 *   - 1: tx_results - the result of executing each transaction including the events the particular transction emitted. This should match the order of the transactions delivered in the block itself
 *   - 2: validator_updates - a list of updates to the validator set. These will reflect the validator set at current height + 2.
 *   - 3: consensus_param_updates - updates to the consensus params, if any.
 *   - 4: app_hash - the hash of the applications' state which is used to confirm that execution of the transactions was deterministic. It is up to the application to decide which algorithm to use.
 */
export const destructTendermintAbciResponseFinalizeBlock = (g_struct) => [g_struct.events, g_struct.tx_results, g_struct.validator_updates, g_struct.consensus_param_updates, safe_base64_to_bytes(g_struct.app_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_RESPONSE_FINALIZE_BLOCK = '/tendermint.abci.ResponseFinalizeBlock';
/**
 * Destructures the fields of a {@link TendermintAbciExecTxResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: code -
 *   - 1: data -
 *   - 2: log -
 *   - 3: info -
 *   - 4: gas_wanted -
 *   - 5: gas_used -
 *   - 6: events -
 *   - 7: codespace -
 */
export const destructTendermintAbciExecTxResult = (g_struct) => [g_struct.code, safe_base64_to_bytes(g_struct.data), g_struct.log, g_struct.info, g_struct.gas_wanted, g_struct.gas_used, g_struct.events, g_struct.codespace];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_EXEC_TX_RESULT = '/tendermint.abci.ExecTxResult';
/**
 * Destructures the fields of a {@link TendermintAbciTxResult} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: index -
 *   - 2: tx -
 *   - 3: result -
 */
export const destructTendermintAbciTxResult = (g_struct) => [g_struct.height, g_struct.index, safe_base64_to_bytes(g_struct.tx), g_struct.result];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_TX_RESULT = '/tendermint.abci.TxResult';
/**
 * Destructures the fields of a {@link TendermintAbciRequest} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: echo -
 *   - 1: flush -
 *   - 2: info -
 *   - 4: init_chain -
 *   - 5: query -
 *   - 7: check_tx -
 *   - 10: commit -
 *   - 11: list_snapshots -
 *   - 12: offer_snapshot -
 *   - 13: load_snapshot_chunk -
 *   - 14: apply_snapshot_chunk -
 *   - 15: prepare_proposal -
 *   - 16: process_proposal -
 *   - 17: extend_vote -
 *   - 18: verify_vote_extension -
 *   - 19: finalize_block -
 */
export const destructTendermintAbciRequest = (g_struct) => [g_struct.echo, g_struct.flush, g_struct.info, __UNDEFINED, g_struct.init_chain, g_struct.query, __UNDEFINED, g_struct.check_tx, __UNDEFINED, __UNDEFINED, g_struct.commit, g_struct.list_snapshots, g_struct.offer_snapshot, g_struct.load_snapshot_chunk, g_struct.apply_snapshot_chunk, g_struct.prepare_proposal, g_struct.process_proposal, g_struct.extend_vote, g_struct.verify_vote_extension, g_struct.finalize_block];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST = '/tendermint.abci.Request';
/**
 * Destructures the fields of a {@link TendermintAbciRequestEcho} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: message -
 */
export const destructTendermintAbciRequestEcho = (g_struct) => [g_struct.message];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_ECHO = '/tendermint.abci.RequestEcho';
/**
 * Destructures the fields of a {@link TendermintAbciRequestFlush} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructTendermintAbciRequestFlush = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_FLUSH = '/tendermint.abci.RequestFlush';
/**
 * Destructures the fields of a {@link TendermintAbciRequestInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version -
 *   - 1: block_version -
 *   - 2: p2p_version -
 *   - 3: abci_version -
 */
export const destructTendermintAbciRequestInfo = (g_struct) => [g_struct.version, g_struct.block_version, g_struct.p2p_version, g_struct.abci_version];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_INFO = '/tendermint.abci.RequestInfo';
/**
 * Destructures the fields of a {@link TendermintAbciRequestInitChain} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: time -
 *   - 1: chain_id -
 *   - 2: consensus_params -
 *   - 3: validators -
 *   - 4: app_state_bytes -
 *   - 5: initial_height -
 */
export const destructTendermintAbciRequestInitChain = (g_struct) => [parse_timestamp(g_struct.time), g_struct.chain_id, g_struct.consensus_params, g_struct.validators, safe_base64_to_bytes(g_struct.app_state_bytes), g_struct.initial_height];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_INIT_CHAIN = '/tendermint.abci.RequestInitChain';
/**
 * Destructures the fields of a {@link TendermintAbciValidatorUpdate} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: pub_key -
 *   - 1: power -
 */
export const destructTendermintAbciValidatorUpdate = (g_struct) => [g_struct.pub_key, g_struct.power];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_VALIDATOR_UPDATE = '/tendermint.abci.ValidatorUpdate';
/**
 * Destructures the fields of a {@link TendermintAbciRequestQuery} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: data -
 *   - 1: path -
 *   - 2: height -
 *   - 3: prove -
 */
export const destructTendermintAbciRequestQuery = (g_struct) => [safe_base64_to_bytes(g_struct.data), g_struct.path, g_struct.height, g_struct.prove];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_QUERY = '/tendermint.abci.RequestQuery';
/**
 * Destructures the fields of a {@link TendermintAbciRequestCheckTx} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx -
 *   - 1: type -
 */
export const destructTendermintAbciRequestCheckTx = (g_struct) => [safe_base64_to_bytes(g_struct.tx), g_struct.type];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_CHECK_TX = '/tendermint.abci.RequestCheckTx';
/**
 * Destructures the fields of a {@link TendermintAbciRequestCommit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructTendermintAbciRequestCommit = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_COMMIT = '/tendermint.abci.RequestCommit';
/**
 * Destructures the fields of a {@link TendermintAbciRequestListSnapshots} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 */
export const destructTendermintAbciRequestListSnapshots = (g_struct) => [];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_LIST_SNAPSHOTS = '/tendermint.abci.RequestListSnapshots';
/**
 * Destructures the fields of a {@link TendermintAbciRequestOfferSnapshot} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: snapshot -
 *   - 1: app_hash -
 */
export const destructTendermintAbciRequestOfferSnapshot = (g_struct) => [g_struct.snapshot, safe_base64_to_bytes(g_struct.app_hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_OFFER_SNAPSHOT = '/tendermint.abci.RequestOfferSnapshot';
/**
 * Destructures the fields of a {@link TendermintAbciSnapshot} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: format -
 *   - 2: chunks -
 *   - 3: hash -
 *   - 4: metadata -
 */
export const destructTendermintAbciSnapshot = (g_struct) => [g_struct.height, g_struct.format, g_struct.chunks, safe_base64_to_bytes(g_struct.hash), safe_base64_to_bytes(g_struct.metadata)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_SNAPSHOT = '/tendermint.abci.Snapshot';
/**
 * Destructures the fields of a {@link TendermintAbciRequestLoadSnapshotChunk} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: format -
 *   - 2: chunk -
 */
export const destructTendermintAbciRequestLoadSnapshotChunk = (g_struct) => [g_struct.height, g_struct.format, g_struct.chunk];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_LOAD_SNAPSHOT_CHUNK = '/tendermint.abci.RequestLoadSnapshotChunk';
/**
 * Destructures the fields of a {@link TendermintAbciRequestApplySnapshotChunk} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: index -
 *   - 1: chunk -
 *   - 2: sender -
 */
export const destructTendermintAbciRequestApplySnapshotChunk = (g_struct) => [g_struct.index, safe_base64_to_bytes(g_struct.chunk), g_struct.sender];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_APPLY_SNAPSHOT_CHUNK = '/tendermint.abci.RequestApplySnapshotChunk';
/**
 * Destructures the fields of a {@link TendermintAbciRequestPrepareProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: max_tx_bytes - the modified transactions cannot exceed this size.
 *   - 1: txs - an array of transactions that will be included in a block, sent to the app for possible modifications.
 *   - 2: local_last_commit -
 *   - 3: misbehavior -
 *   - 4: height -
 *   - 5: time -
 *   - 6: next_validators_hash -
 *   - 7: proposer_address - address of the public key of the validator proposing the block.
 */
export const destructTendermintAbciRequestPrepareProposal = (g_struct) => [g_struct.max_tx_bytes, map(g_struct.txs, safe_base64_to_bytes), g_struct.local_last_commit, g_struct.misbehavior, g_struct.height, parse_timestamp(g_struct.time), safe_base64_to_bytes(g_struct.next_validators_hash), safe_base64_to_bytes(g_struct.proposer_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_PREPARE_PROPOSAL = '/tendermint.abci.RequestPrepareProposal';
/**
 * Destructures the fields of a {@link TendermintAbciExtendedCommitInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: round - The round at which the block proposer decided in the previous height.
 *   - 1: votes - List of validators' addresses in the last validator set with their voting information, including vote extensions.
 */
export const destructTendermintAbciExtendedCommitInfo = (g_struct) => [g_struct.round, g_struct.votes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_EXTENDED_COMMIT_INFO = '/tendermint.abci.ExtendedCommitInfo';
/**
 * Destructures the fields of a {@link TendermintAbciExtendedVoteInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator - The validator that sent the vote.
 *   - 2: vote_extension - Non-deterministic extension provided by the sending validator's application.
 *   - 3: extension_signature - Vote extension signature created by CometBFT
 *   - 4: block_id_flag - indicates whether the validator voted for a block, nil, or did not vote at all
 */
export const destructTendermintAbciExtendedVoteInfo = (g_struct) => [g_struct.validator, __UNDEFINED, safe_base64_to_bytes(g_struct.vote_extension), safe_base64_to_bytes(g_struct.extension_signature), g_struct.block_id_flag];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_EXTENDED_VOTE_INFO = '/tendermint.abci.ExtendedVoteInfo';
/**
 * Destructures the fields of a {@link TendermintAbciValidator} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: address -
 *   - 2: power - PubKey pub_key = 2 [(gogoproto.nullable)=false];
 */
export const destructTendermintAbciValidator = (g_struct) => [safe_base64_to_bytes(g_struct.address), __UNDEFINED, g_struct.power];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_VALIDATOR = '/tendermint.abci.Validator';
/**
 * Destructures the fields of a {@link TendermintAbciMisbehavior} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: validator - The offending validator
 *   - 2: height - The height when the offense occurred
 *   - 3: time - The corresponding time where the offense occurred
 *   - 4: total_voting_power - Total voting power of the validator set in case the ABCI application does not store historical validators. https://github.com/tendermint/tendermint/issues/4581
 */
export const destructTendermintAbciMisbehavior = (g_struct) => [g_struct.type, g_struct.validator, g_struct.height, parse_timestamp(g_struct.time), g_struct.total_voting_power];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_MISBEHAVIOR = '/tendermint.abci.Misbehavior';
/**
 * Destructures the fields of a {@link TendermintAbciRequestProcessProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs -
 *   - 1: proposed_last_commit -
 *   - 2: misbehavior -
 *   - 3: hash - the merkle root hash of the fields of the proposed block.
 *   - 4: height -
 *   - 5: time -
 *   - 6: next_validators_hash -
 *   - 7: proposer_address - address of the public key of the original proposer of the block.
 */
export const destructTendermintAbciRequestProcessProposal = (g_struct) => [map(g_struct.txs, safe_base64_to_bytes), g_struct.proposed_last_commit, g_struct.misbehavior, safe_base64_to_bytes(g_struct.hash), g_struct.height, parse_timestamp(g_struct.time), safe_base64_to_bytes(g_struct.next_validators_hash), safe_base64_to_bytes(g_struct.proposer_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_PROCESS_PROPOSAL = '/tendermint.abci.RequestProcessProposal';
/**
 * Destructures the fields of a {@link TendermintAbciCommitInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: round -
 *   - 1: votes -
 */
export const destructTendermintAbciCommitInfo = (g_struct) => [g_struct.round, g_struct.votes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_COMMIT_INFO = '/tendermint.abci.CommitInfo';
/**
 * Destructures the fields of a {@link TendermintAbciVoteInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: validator -
 *   - 2: block_id_flag -
 */
export const destructTendermintAbciVoteInfo = (g_struct) => [g_struct.validator, __UNDEFINED, g_struct.block_id_flag];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_VOTE_INFO = '/tendermint.abci.VoteInfo';
/**
 * Destructures the fields of a {@link TendermintAbciRequestExtendVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - the hash of the block that this vote may be referring to
 *   - 1: height - the height of the extended vote
 *   - 2: time - info of the block that this vote may be referring to
 *   - 3: txs -
 *   - 4: proposed_last_commit -
 *   - 5: misbehavior -
 *   - 6: next_validators_hash -
 *   - 7: proposer_address - address of the public key of the original proposer of the block.
 */
export const destructTendermintAbciRequestExtendVote = (g_struct) => [safe_base64_to_bytes(g_struct.hash), g_struct.height, parse_timestamp(g_struct.time), map(g_struct.txs, safe_base64_to_bytes), g_struct.proposed_last_commit, g_struct.misbehavior, safe_base64_to_bytes(g_struct.next_validators_hash), safe_base64_to_bytes(g_struct.proposer_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_EXTEND_VOTE = '/tendermint.abci.RequestExtendVote';
/**
 * Destructures the fields of a {@link TendermintAbciRequestVerifyVoteExtension} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash - the hash of the block that this received vote corresponds to
 *   - 1: validator_address - the validator that signed the vote extension
 *   - 2: height -
 *   - 3: vote_extension -
 */
export const destructTendermintAbciRequestVerifyVoteExtension = (g_struct) => [safe_base64_to_bytes(g_struct.hash), safe_base64_to_bytes(g_struct.validator_address), g_struct.height, safe_base64_to_bytes(g_struct.vote_extension)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_VERIFY_VOTE_EXTENSION = '/tendermint.abci.RequestVerifyVoteExtension';
/**
 * Destructures the fields of a {@link TendermintAbciRequestFinalizeBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs -
 *   - 1: decided_last_commit -
 *   - 2: misbehavior -
 *   - 3: hash - the merkle root hash of the fields of the decided block.
 *   - 4: height -
 *   - 5: time -
 *   - 6: next_validators_hash -
 *   - 7: proposer_address - the address of the public key of the original proposer of the block.
 */
export const destructTendermintAbciRequestFinalizeBlock = (g_struct) => [map(g_struct.txs, safe_base64_to_bytes), g_struct.decided_last_commit, g_struct.misbehavior, safe_base64_to_bytes(g_struct.hash), g_struct.height, parse_timestamp(g_struct.time), safe_base64_to_bytes(g_struct.next_validators_hash), safe_base64_to_bytes(g_struct.proposer_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_REQUEST_FINALIZE_BLOCK = '/tendermint.abci.RequestFinalizeBlock';
/**
 * Destructures the fields of a {@link TendermintAbciEvent} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: attributes -
 */
export const destructTendermintAbciEvent = (g_struct) => [g_struct.type, g_struct.attributes];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_EVENT = '/tendermint.abci.Event';
/**
 * Destructures the fields of a {@link TendermintAbciEventAttribute} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: key -
 *   - 1: value -
 *   - 2: index -
 */
export const destructTendermintAbciEventAttribute = (g_struct) => [g_struct.key, g_struct.value, g_struct.index];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_ABCI_EVENT_ATTRIBUTE = '/tendermint.abci.EventAttribute';
/**
 * Protobuf enum value for `tendermint.abci.CheckTxType`.
 *
 * **NEW** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciCheckTxType}
 */
export const XC_PROTO_TENDERMINT_ABCI_NEW = 0;
/**
 * JSON enum value for `tendermint.abci.CheckTxType`.
 *
 * **NEW** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciCheckTxType}
 */
export const SI_JSON_TENDERMINT_ABCI_NEW = 'New';
/**
 * Protobuf enum value for `tendermint.abci.CheckTxType`.
 *
 * **RECHECK** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciCheckTxType}
 */
export const XC_PROTO_TENDERMINT_ABCI_RECHECK = 1;
/**
 * JSON enum value for `tendermint.abci.CheckTxType`.
 *
 * **RECHECK** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciCheckTxType}
 */
export const SI_JSON_TENDERMINT_ABCI_RECHECK = 'Recheck';
/**
 * Maps a protobuf enum int value for `tendermint.abci.CheckTxType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintAbciCheckTxType = {
    [XC_PROTO_TENDERMINT_ABCI_NEW]: SI_JSON_TENDERMINT_ABCI_NEW,
    [XC_PROTO_TENDERMINT_ABCI_RECHECK]: SI_JSON_TENDERMINT_ABCI_RECHECK,
};
/**
 * Maps a JSON enum string value for `tendermint.abci.CheckTxType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintAbciCheckTxType = {
    [SI_JSON_TENDERMINT_ABCI_NEW]: XC_PROTO_TENDERMINT_ABCI_NEW,
    [SI_JSON_TENDERMINT_ABCI_RECHECK]: XC_PROTO_TENDERMINT_ABCI_RECHECK,
};
/**
 * Protobuf enum value for `tendermint.abci.MisbehaviorType`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciMisbehaviorType}
 */
export const XC_PROTO_TENDERMINT_ABCI_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.abci.MisbehaviorType`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciMisbehaviorType}
 */
export const SI_JSON_TENDERMINT_ABCI_UNKNOWN = 'UNKNOWN';
/**
 * Protobuf enum value for `tendermint.abci.MisbehaviorType`.
 *
 * **DUPLICATE_VOTE** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciMisbehaviorType}
 */
export const XC_PROTO_TENDERMINT_ABCI_DUPLICATE_VOTE = 1;
/**
 * JSON enum value for `tendermint.abci.MisbehaviorType`.
 *
 * **DUPLICATE_VOTE** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciMisbehaviorType}
 */
export const SI_JSON_TENDERMINT_ABCI_DUPLICATE_VOTE = 'DUPLICATE_VOTE';
/**
 * Protobuf enum value for `tendermint.abci.MisbehaviorType`.
 *
 * **LIGHT_CLIENT_ATTACK** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciMisbehaviorType}
 */
export const XC_PROTO_TENDERMINT_ABCI_LIGHT_CLIENT_ATTACK = 2;
/**
 * JSON enum value for `tendermint.abci.MisbehaviorType`.
 *
 * **LIGHT_CLIENT_ATTACK** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciMisbehaviorType}
 */
export const SI_JSON_TENDERMINT_ABCI_LIGHT_CLIENT_ATTACK = 'LIGHT_CLIENT_ATTACK';
/**
 * Maps a protobuf enum int value for `tendermint.abci.MisbehaviorType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintAbciMisbehaviorType = {
    [XC_PROTO_TENDERMINT_ABCI_UNKNOWN]: SI_JSON_TENDERMINT_ABCI_UNKNOWN,
    [XC_PROTO_TENDERMINT_ABCI_DUPLICATE_VOTE]: SI_JSON_TENDERMINT_ABCI_DUPLICATE_VOTE,
    [XC_PROTO_TENDERMINT_ABCI_LIGHT_CLIENT_ATTACK]: SI_JSON_TENDERMINT_ABCI_LIGHT_CLIENT_ATTACK,
};
/**
 * Maps a JSON enum string value for `tendermint.abci.MisbehaviorType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintAbciMisbehaviorType = {
    [SI_JSON_TENDERMINT_ABCI_UNKNOWN]: XC_PROTO_TENDERMINT_ABCI_UNKNOWN,
    [SI_JSON_TENDERMINT_ABCI_DUPLICATE_VOTE]: XC_PROTO_TENDERMINT_ABCI_DUPLICATE_VOTE,
    [SI_JSON_TENDERMINT_ABCI_LIGHT_CLIENT_ATTACK]: XC_PROTO_TENDERMINT_ABCI_LIGHT_CLIENT_ATTACK,
};
/**
 * Protobuf enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_UNKNOWN = 'UNKNOWN';
/**
 * Protobuf enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ACCEPT = 1;
/**
 * JSON enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ACCEPT = 'ACCEPT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **ABORT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ABORT = 2;
/**
 * JSON enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **ABORT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ABORT = 'ABORT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **REJECT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT = 3;
/**
 * JSON enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **REJECT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT = 'REJECT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **REJECT_FORMAT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_FORMAT = 4;
/**
 * JSON enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **REJECT_FORMAT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_FORMAT = 'REJECT_FORMAT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **REJECT_SENDER** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_SENDER = 5;
/**
 * JSON enum value for `tendermint.abci.ResponseOfferSnapshot.Result`.
 *
 * **REJECT_SENDER** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseOfferSnapshotResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_SENDER = 'REJECT_SENDER';
/**
 * Maps a protobuf enum int value for `tendermint.abci.ResponseOfferSnapshot.Result` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintAbciResponseOfferSnapshotResult = {
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_UNKNOWN]: SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_UNKNOWN,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ACCEPT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ACCEPT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ABORT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ABORT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_FORMAT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_FORMAT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_SENDER]: SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_SENDER,
};
/**
 * Maps a JSON enum string value for `tendermint.abci.ResponseOfferSnapshot.Result` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintAbciResponseOfferSnapshotResult = {
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_UNKNOWN]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_UNKNOWN,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ACCEPT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ACCEPT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ABORT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_ABORT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_FORMAT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_FORMAT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_SENDER]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_OFFER_SNAPSHOT_REJECT_SENDER,
};
/**
 * Protobuf enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_UNKNOWN = 'UNKNOWN';
/**
 * Protobuf enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ACCEPT = 1;
/**
 * JSON enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ACCEPT = 'ACCEPT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **ABORT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ABORT = 2;
/**
 * JSON enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **ABORT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ABORT = 'ABORT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **RETRY** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY = 3;
/**
 * JSON enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **RETRY** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY = 'RETRY';
/**
 * Protobuf enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **RETRY_SNAPSHOT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY_SNAPSHOT = 4;
/**
 * JSON enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **RETRY_SNAPSHOT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY_SNAPSHOT = 'RETRY_SNAPSHOT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **REJECT_SNAPSHOT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_REJECT_SNAPSHOT = 5;
/**
 * JSON enum value for `tendermint.abci.ResponseApplySnapshotChunk.Result`.
 *
 * **REJECT_SNAPSHOT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseApplySnapshotChunkResult}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_REJECT_SNAPSHOT = 'REJECT_SNAPSHOT';
/**
 * Maps a protobuf enum int value for `tendermint.abci.ResponseApplySnapshotChunk.Result` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintAbciResponseApplySnapshotChunkResult = {
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_UNKNOWN]: SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_UNKNOWN,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ACCEPT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ACCEPT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ABORT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ABORT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY]: SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY_SNAPSHOT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY_SNAPSHOT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_REJECT_SNAPSHOT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_REJECT_SNAPSHOT,
};
/**
 * Maps a JSON enum string value for `tendermint.abci.ResponseApplySnapshotChunk.Result` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintAbciResponseApplySnapshotChunkResult = {
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_UNKNOWN]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_UNKNOWN,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ACCEPT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ACCEPT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ABORT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_ABORT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY_SNAPSHOT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_RETRY_SNAPSHOT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_REJECT_SNAPSHOT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_APPLY_SNAPSHOT_CHUNK_REJECT_SNAPSHOT,
};
/**
 * Protobuf enum value for `tendermint.abci.ResponseProcessProposal.ProposalStatus`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseProcessProposalProposalStatus}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.abci.ResponseProcessProposal.ProposalStatus`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseProcessProposalProposalStatus}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_UNKNOWN = 'UNKNOWN';
/**
 * Protobuf enum value for `tendermint.abci.ResponseProcessProposal.ProposalStatus`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseProcessProposalProposalStatus}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_ACCEPT = 1;
/**
 * JSON enum value for `tendermint.abci.ResponseProcessProposal.ProposalStatus`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseProcessProposalProposalStatus}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_ACCEPT = 'ACCEPT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseProcessProposal.ProposalStatus`.
 *
 * **REJECT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseProcessProposalProposalStatus}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_REJECT = 2;
/**
 * JSON enum value for `tendermint.abci.ResponseProcessProposal.ProposalStatus`.
 *
 * **REJECT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseProcessProposalProposalStatus}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_REJECT = 'REJECT';
/**
 * Maps a protobuf enum int value for `tendermint.abci.ResponseProcessProposal.ProposalStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintAbciResponseProcessProposalProposalStatus = {
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_UNKNOWN]: SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_UNKNOWN,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_ACCEPT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_ACCEPT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_REJECT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_REJECT,
};
/**
 * Maps a JSON enum string value for `tendermint.abci.ResponseProcessProposal.ProposalStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintAbciResponseProcessProposalProposalStatus = {
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_UNKNOWN]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_UNKNOWN,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_ACCEPT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_ACCEPT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_REJECT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_PROCESS_PROPOSAL_REJECT,
};
/**
 * Protobuf enum value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus`.
 *
 * **UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_UNKNOWN = 'UNKNOWN';
/**
 * Protobuf enum value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_ACCEPT = 1;
/**
 * JSON enum value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus`.
 *
 * **ACCEPT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_ACCEPT = 'ACCEPT';
/**
 * Protobuf enum value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus`.
 *
 * **REJECT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus}
 */
export const XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_REJECT = 2;
/**
 * JSON enum value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus`.
 *
 * **REJECT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus}
 */
export const SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_REJECT = 'REJECT';
/**
 * Maps a protobuf enum int value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus = {
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_UNKNOWN]: SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_UNKNOWN,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_ACCEPT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_ACCEPT,
    [XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_REJECT]: SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_REJECT,
};
/**
 * Maps a JSON enum string value for `tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintAbciResponseVerifyVoteExtensionVerifyStatus = {
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_UNKNOWN]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_UNKNOWN,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_ACCEPT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_ACCEPT,
    [SI_JSON_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_REJECT]: XC_PROTO_TENDERMINT_ABCI_RESPONSE_VERIFY_VOTE_EXTENSION_REJECT,
};
//# sourceMappingURL=types.js.map