import type { CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedTendermintCryptoPublicKey = Encoded<'/tendermint.crypto.PublicKey'>;
/**
 * Encodes a `PublicKey` protobuf message: defines the keys available for use with Validators
 * @param atu8_ed25519 - `ed25519`:
 * @param atu8_secp256k1 - `secp256k1`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintCryptoPublicKey: (atu8_ed25519?: Opt<Uint8Array>, atu8_secp256k1?: Opt<Uint8Array>) => EncodedTendermintCryptoPublicKey;
/**
 * A decoded protobuf PublicKey message
 *
 * Tuple where:
 *   - 0: ed25519 -
 *   - 1: secp256k1 -
 */
export type DecodedTendermintCryptoPublicKey = [
    atu8_ed25519?: Uint8Array,
    atu8_secp256k1?: Uint8Array
];
/**
 * Decodes a protobuf PublicKey message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintCryptoPublicKey}
 */
export declare const decodeTendermintCryptoPublicKey: (atu8_payload: Uint8Array) => DecodedTendermintCryptoPublicKey;
/**
 * Destructures the fields of a {@link TendermintCryptoPublicKey} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: ed25519 -
 *   - 1: secp256k1 -
 */
export declare const destructTendermintCryptoPublicKey: (g_struct: TendermintCryptoPublicKey) => [ed25519?: Uint8Array, secp256k1?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_CRYPTO_PUBLIC_KEY = "/tendermint.crypto.PublicKey";
/**
 * JSON serialization of `tendermint.crypto.PublicKey` - defines the keys available for use with Validators
 */
export type TendermintCryptoPublicKey = {
    ed25519?: CwBase64 | undefined;
    secp256k1?: CwBase64 | undefined;
};
