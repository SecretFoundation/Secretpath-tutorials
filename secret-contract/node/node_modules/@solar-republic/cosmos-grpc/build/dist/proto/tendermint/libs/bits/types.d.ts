import type { WeakInt64Str, WeakUint64Str, CwInt64, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../../api/types.js';
export type EncodedTendermintLibsBitsBitArray = Encoded<'/tendermint.libs.bits.BitArray'>;
/**
 * Encodes a `BitArray` protobuf message:
 * @param sg_bits - `bits`:
 * @param a_elems - `elems`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintLibsBitsBitArray: (sg_bits?: Opt<WeakInt64Str>, a_elems?: Opt<WeakUint64Str[]>) => EncodedTendermintLibsBitsBitArray;
/**
 * A decoded protobuf BitArray message
 *
 * Tuple where:
 *   - 0: bits -
 *   - 1: elems -
 */
export type DecodedTendermintLibsBitsBitArray = [
    sg_bits?: CwInt64,
    a_elems?: CwUint64[]
];
/**
 * Decodes a protobuf BitArray message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintLibsBitsBitArray}
 */
export declare const decodeTendermintLibsBitsBitArray: (atu8_payload: Uint8Array) => DecodedTendermintLibsBitsBitArray;
/**
 * Destructures the fields of a {@link TendermintLibsBitsBitArray} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: bits -
 *   - 1: elems -
 */
export declare const destructTendermintLibsBitsBitArray: (g_struct: TendermintLibsBitsBitArray) => [bits?: CwInt64, elems?: CwUint64[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_LIBS_BITS_BIT_ARRAY = "/tendermint.libs.bits.BitArray";
/**
 * JSON serialization of `tendermint.libs.bits.BitArray` -
 */
export type TendermintLibsBitsBitArray = {
    bits?: CwInt64 | undefined;
    elems?: CwUint64[] | undefined;
};
