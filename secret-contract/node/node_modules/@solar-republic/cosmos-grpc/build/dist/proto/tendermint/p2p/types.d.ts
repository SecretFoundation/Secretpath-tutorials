import type { WeakUint64Str, WeakAccountAddr, CwUint64, CwBase64, CwAccountAddr } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedTendermintP2pNetAddress = Encoded<'/tendermint.p2p.NetAddress'>;
export type EncodedTendermintP2pProtocolVersion = Encoded<'/tendermint.p2p.ProtocolVersion'>;
export type EncodedTendermintP2pDefaultNodeInfo = Encoded<'/tendermint.p2p.DefaultNodeInfo'>;
export type EncodedTendermintP2pDefaultNodeInfoOther = Encoded<'/tendermint.p2p.DefaultNodeInfoOther'>;
/**
 * Encodes a `NetAddress` protobuf message:
 * @param s_id - `id`:
 * @param s_ip - `ip`:
 * @param n_port - `port`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintP2pNetAddress: (s_id?: Opt<string>, s_ip?: Opt<string>, n_port?: Opt<number>) => EncodedTendermintP2pNetAddress;
/**
 * Encodes a `ProtocolVersion` protobuf message:
 * @param sg_p2p - `p2p`:
 * @param sg_block - `block`:
 * @param sg_app - `app`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintP2pProtocolVersion: (sg_p2p?: Opt<WeakUint64Str>, sg_block?: Opt<WeakUint64Str>, sg_app?: Opt<WeakUint64Str>) => EncodedTendermintP2pProtocolVersion;
/**
 * Encodes a `DefaultNodeInfo` protobuf message:
 * @param g_protocol_version - `protocol_version`:
 * @param si_default_node - `default_node_id`:
 * @param sa_listen_addr - `listen_addr`:
 * @param s_network - `network`:
 * @param s_version - `version`:
 * @param atu8_channels - `channels`:
 * @param s_moniker - `moniker`:
 * @param g_other - `other`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintP2pDefaultNodeInfo: (atu8_protocol_version?: Opt<Encoded<'/tendermint.p2p.ProtocolVersion'>>, si_default_node?: Opt<string>, sa_listen_addr?: Opt<WeakAccountAddr>, s_network?: Opt<string>, s_version?: Opt<string>, atu8_channels?: Opt<Uint8Array>, s_moniker?: Opt<string>, atu8_other?: Opt<Encoded<'/tendermint.p2p.DefaultNodeInfoOther'>>) => EncodedTendermintP2pDefaultNodeInfo;
/**
 * Encodes a `DefaultNodeInfoOther` protobuf message:
 * @param s_tx_index - `tx_index`:
 * @param sa_rpc - `rpc_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintP2pDefaultNodeInfoOther: (s_tx_index?: Opt<string>, sa_rpc?: Opt<WeakAccountAddr>) => EncodedTendermintP2pDefaultNodeInfoOther;
/**
 * A decoded protobuf NetAddress message
 *
 * Tuple where:
 *   - 0: id -
 *   - 1: ip -
 *   - 2: port -
 */
export type DecodedTendermintP2pNetAddress = [
    s_id?: string,
    s_ip?: string,
    n_port?: number
];
/**
 * Decodes a protobuf NetAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pNetAddress}
 */
export declare const decodeTendermintP2pNetAddress: (atu8_payload: Uint8Array) => DecodedTendermintP2pNetAddress;
/**
 * A decoded protobuf ProtocolVersion message
 *
 * Tuple where:
 *   - 0: p2p -
 *   - 1: block -
 *   - 2: app -
 */
export type DecodedTendermintP2pProtocolVersion = [
    sg_p2p?: CwUint64,
    sg_block?: CwUint64,
    sg_app?: CwUint64
];
/**
 * Decodes a protobuf ProtocolVersion message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pProtocolVersion}
 */
export declare const decodeTendermintP2pProtocolVersion: (atu8_payload: Uint8Array) => DecodedTendermintP2pProtocolVersion;
/**
 * A decoded protobuf DefaultNodeInfo message
 *
 * Tuple where:
 *   - 0: protocol_version -
 *   - 1: default_node_id -
 *   - 2: listen_addr -
 *   - 3: network -
 *   - 4: version -
 *   - 5: channels -
 *   - 6: moniker -
 *   - 7: other -
 */
export type DecodedTendermintP2pDefaultNodeInfo = [
    a_protocol_version?: DecodedTendermintP2pProtocolVersion,
    si_default_node?: string,
    sa_listen_addr?: CwAccountAddr,
    s_network?: string,
    s_version?: string,
    atu8_channels?: Uint8Array,
    s_moniker?: string,
    a_other?: DecodedTendermintP2pDefaultNodeInfoOther
];
/**
 * Decodes a protobuf DefaultNodeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pDefaultNodeInfo}
 */
export declare const decodeTendermintP2pDefaultNodeInfo: (atu8_payload: Uint8Array) => DecodedTendermintP2pDefaultNodeInfo;
/**
 * A decoded protobuf DefaultNodeInfoOther message
 *
 * Tuple where:
 *   - 0: tx_index -
 *   - 1: rpc_address -
 */
export type DecodedTendermintP2pDefaultNodeInfoOther = [
    s_tx_index?: string,
    sa_rpc?: CwAccountAddr
];
/**
 * Decodes a protobuf DefaultNodeInfoOther message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pDefaultNodeInfoOther}
 */
export declare const decodeTendermintP2pDefaultNodeInfoOther: (atu8_payload: Uint8Array) => DecodedTendermintP2pDefaultNodeInfoOther;
/**
 * Destructures the fields of a {@link TendermintP2pNetAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: ip -
 *   - 2: port -
 */
export declare const destructTendermintP2pNetAddress: (g_struct: TendermintP2pNetAddress) => [id?: string, ip?: string, port?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_P2P_NET_ADDRESS = "/tendermint.p2p.NetAddress";
/**
 * JSON serialization of `tendermint.p2p.NetAddress` -
 */
export type TendermintP2pNetAddress = {
    id?: string | undefined;
    ip?: string | undefined;
    port?: number | undefined;
};
/**
 * Destructures the fields of a {@link TendermintP2pProtocolVersion} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: p2p -
 *   - 1: block -
 *   - 2: app -
 */
export declare const destructTendermintP2pProtocolVersion: (g_struct: TendermintP2pProtocolVersion) => [p2p?: CwUint64, block?: CwUint64, app?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_P2P_PROTOCOL_VERSION = "/tendermint.p2p.ProtocolVersion";
/**
 * JSON serialization of `tendermint.p2p.ProtocolVersion` -
 */
export type TendermintP2pProtocolVersion = {
    p2p?: CwUint64 | undefined;
    block?: CwUint64 | undefined;
    app?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintP2pDefaultNodeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: protocol_version -
 *   - 1: default_node_id -
 *   - 2: listen_addr -
 *   - 3: network -
 *   - 4: version -
 *   - 5: channels -
 *   - 6: moniker -
 *   - 7: other -
 */
export declare const destructTendermintP2pDefaultNodeInfo: (g_struct: TendermintP2pDefaultNodeInfo) => [protocol_version?: TendermintP2pProtocolVersion, default_node_id?: string, listen_addr?: CwAccountAddr, network?: string, version?: string, channels?: Uint8Array, moniker?: string, other?: TendermintP2pDefaultNodeInfoOther];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_P2P_DEFAULT_NODE_INFO = "/tendermint.p2p.DefaultNodeInfo";
/**
 * JSON serialization of `tendermint.p2p.DefaultNodeInfo` -
 */
export type TendermintP2pDefaultNodeInfo = {
    protocol_version?: TendermintP2pProtocolVersion | undefined;
    default_node_id?: string | undefined;
    listen_addr?: CwAccountAddr | undefined;
    network?: string | undefined;
    version?: string | undefined;
    channels?: CwBase64 | undefined;
    moniker?: string | undefined;
    other?: TendermintP2pDefaultNodeInfoOther | undefined;
};
/**
 * Destructures the fields of a {@link TendermintP2pDefaultNodeInfoOther} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_index -
 *   - 1: rpc_address -
 */
export declare const destructTendermintP2pDefaultNodeInfoOther: (g_struct: TendermintP2pDefaultNodeInfoOther) => [tx_index?: string, rpc_address?: CwAccountAddr];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_P2P_DEFAULT_NODE_INFO_OTHER = "/tendermint.p2p.DefaultNodeInfoOther";
/**
 * JSON serialization of `tendermint.p2p.DefaultNodeInfoOther` -
 */
export type TendermintP2pDefaultNodeInfoOther = {
    tx_index?: string | undefined;
    rpc_address?: CwAccountAddr | undefined;
};
