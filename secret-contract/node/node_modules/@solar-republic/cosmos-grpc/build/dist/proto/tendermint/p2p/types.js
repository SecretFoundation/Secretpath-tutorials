import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../api/util.js';
/**
 * Encodes a `NetAddress` protobuf message:
 * @param s_id - `id`:
 * @param s_ip - `ip`:
 * @param n_port - `port`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintP2pNetAddress = (s_id, s_ip, n_port) => Protobuf() // ...
    .s(s_id) // string id = 1
    .s(s_ip) // string ip = 2
    .v(n_port) // uint32 port = 3
    .o;
/**
 * Encodes a `ProtocolVersion` protobuf message:
 * @param sg_p2p - `p2p`:
 * @param sg_block - `block`:
 * @param sg_app - `app`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintP2pProtocolVersion = (sg_p2p, sg_block, sg_app) => Protobuf() // ...
    .g(sg_p2p) // uint64 p2p = 1
    .g(sg_block) // uint64 block = 2
    .g(sg_app) // uint64 app = 3
    .o;
/**
 * Encodes a `DefaultNodeInfo` protobuf message:
 * @param g_protocol_version - `protocol_version`:
 * @param si_default_node - `default_node_id`:
 * @param sa_listen_addr - `listen_addr`:
 * @param s_network - `network`:
 * @param s_version - `version`:
 * @param atu8_channels - `channels`:
 * @param s_moniker - `moniker`:
 * @param g_other - `other`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintP2pDefaultNodeInfo = (atu8_protocol_version, si_default_node, sa_listen_addr, s_network, s_version, atu8_channels, s_moniker, atu8_other) => Protobuf() // ...
    .b(atu8_protocol_version) // ProtocolVersion protocol_version = 1
    .s(si_default_node) // string default_node_id = 2
    .s(sa_listen_addr) // string listen_addr = 3
    .s(s_network) // string network = 4
    .s(s_version) // string version = 5
    .b(atu8_channels) // bytes channels = 6
    .s(s_moniker) // string moniker = 7
    .b(atu8_other) // DefaultNodeInfoOther other = 8
    .o;
/**
 * Encodes a `DefaultNodeInfoOther` protobuf message:
 * @param s_tx_index - `tx_index`:
 * @param sa_rpc - `rpc_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintP2pDefaultNodeInfoOther = (s_tx_index, sa_rpc) => Protobuf() // ...
    .s(s_tx_index) // string tx_index = 1
    .s(sa_rpc) // string rpc_address = 2
    .o;
/**
 * Decodes a protobuf NetAddress message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pNetAddress}
 */
export const decodeTendermintP2pNetAddress = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5, 1]);
/**
 * Decodes a protobuf ProtocolVersion message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pProtocolVersion}
 */
export const decodeTendermintP2pProtocolVersion = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3, 3]);
/**
 * Decodes a protobuf DefaultNodeInfo message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pDefaultNodeInfo}
 */
export const decodeTendermintP2pDefaultNodeInfo = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 5, 5, 5, 1, 5, 1], [decodeTendermintP2pProtocolVersion, 0, 0, 0, 0, 0, 0, decodeTendermintP2pDefaultNodeInfoOther]);
/**
 * Decodes a protobuf DefaultNodeInfoOther message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintP2pDefaultNodeInfoOther}
 */
export const decodeTendermintP2pDefaultNodeInfoOther = (atu8_payload) => decode_protobuf(atu8_payload, [5, 5]);
/**
 * Destructures the fields of a {@link TendermintP2pNetAddress} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: id -
 *   - 1: ip -
 *   - 2: port -
 */
export const destructTendermintP2pNetAddress = (g_struct) => [g_struct.id, g_struct.ip, g_struct.port];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_P2P_NET_ADDRESS = '/tendermint.p2p.NetAddress';
/**
 * Destructures the fields of a {@link TendermintP2pProtocolVersion} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: p2p -
 *   - 1: block -
 *   - 2: app -
 */
export const destructTendermintP2pProtocolVersion = (g_struct) => [g_struct.p2p, g_struct.block, g_struct.app];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_P2P_PROTOCOL_VERSION = '/tendermint.p2p.ProtocolVersion';
/**
 * Destructures the fields of a {@link TendermintP2pDefaultNodeInfo} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: protocol_version -
 *   - 1: default_node_id -
 *   - 2: listen_addr -
 *   - 3: network -
 *   - 4: version -
 *   - 5: channels -
 *   - 6: moniker -
 *   - 7: other -
 */
export const destructTendermintP2pDefaultNodeInfo = (g_struct) => [g_struct.protocol_version, g_struct.default_node_id, g_struct.listen_addr, g_struct.network, g_struct.version, safe_base64_to_bytes(g_struct.channels), g_struct.moniker, g_struct.other];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_P2P_DEFAULT_NODE_INFO = '/tendermint.p2p.DefaultNodeInfo';
/**
 * Destructures the fields of a {@link TendermintP2pDefaultNodeInfoOther} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: tx_index -
 *   - 1: rpc_address -
 */
export const destructTendermintP2pDefaultNodeInfoOther = (g_struct) => [g_struct.tx_index, g_struct.rpc_address];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_P2P_DEFAULT_NODE_INFO_OTHER = '/tendermint.p2p.DefaultNodeInfoOther';
//# sourceMappingURL=types.js.map