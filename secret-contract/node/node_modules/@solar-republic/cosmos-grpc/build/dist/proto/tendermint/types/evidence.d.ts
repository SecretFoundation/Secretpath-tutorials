import type { WeakInt64Str, CwInt64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../api/types.js';
import type { TendermintTypesVote, DecodedTendermintTypesVote, TendermintTypesLightBlock, DecodedTendermintTypesLightBlock } from './types.js';
import type { TendermintTypesValidator, DecodedTendermintTypesValidator } from './validator.js';
export type EncodedTendermintTypesEvidence = Encoded<'/tendermint.types.Evidence'>;
export type EncodedTendermintTypesDuplicateVoteEvidence = Encoded<'/tendermint.types.DuplicateVoteEvidence'>;
export type EncodedTendermintTypesLightClientAttackEvidence = Encoded<'/tendermint.types.LightClientAttackEvidence'>;
export type EncodedTendermintTypesEvidenceList = Encoded<'/tendermint.types.EvidenceList'>;
/**
 * Encodes a `Evidence` protobuf message:
 * @param g_duplicate_vote_evidence - `duplicate_vote_evidence`:
 * @param g_light_client_attack_evidence - `light_client_attack_evidence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesEvidence: (atu8_duplicate_vote_evidence?: Opt<Encoded<'/tendermint.types.DuplicateVoteEvidence'>>, atu8_light_client_attack_evidence?: Opt<Encoded<'/tendermint.types.LightClientAttackEvidence'>>) => EncodedTendermintTypesEvidence;
/**
 * Encodes a `DuplicateVoteEvidence` protobuf message: contains evidence of a validator signed two conflicting votes.
 * @param g_vote_a - `vote_a`:
 * @param g_vote_b - `vote_b`:
 * @param sg_total_voting_power - `total_voting_power`:
 * @param sg_validator_power - `validator_power`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesDuplicateVoteEvidence: (atu8_vote_a?: Opt<Encoded<'/tendermint.types.Vote'>>, atu8_vote_b?: Opt<Encoded<'/tendermint.types.Vote'>>, sg_total_voting_power?: Opt<WeakInt64Str>, sg_validator_power?: Opt<WeakInt64Str>, xt_timestamp?: Opt<number>) => EncodedTendermintTypesDuplicateVoteEvidence;
/**
 * Encodes a `LightClientAttackEvidence` protobuf message: contains evidence of a set of validators attempting to mislead a light client.
 * @param g_conflicting_block - `conflicting_block`:
 * @param sg_common_height - `common_height`:
 * @param a_byzantine_validators - `byzantine_validators`:
 * @param sg_total_voting_power - `total_voting_power`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesLightClientAttackEvidence: (atu8_conflicting_block?: Opt<Encoded<'/tendermint.types.LightBlock'>>, sg_common_height?: Opt<WeakInt64Str>, a_byzantine_validators?: Opt<Encoded<'/tendermint.types.Validator'>[]>, sg_total_voting_power?: Opt<WeakInt64Str>, xt_timestamp?: Opt<number>) => EncodedTendermintTypesLightClientAttackEvidence;
/**
 * Encodes a `EvidenceList` protobuf message:
 * @param a_evidences - `evidence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesEvidenceList: (a_evidences?: Opt<Encoded<'/tendermint.types.Evidence'>[]>) => EncodedTendermintTypesEvidenceList;
/**
 * A decoded protobuf Evidence message
 *
 * Tuple where:
 *   - 0: duplicate_vote_evidence -
 *   - 1: light_client_attack_evidence -
 */
export type DecodedTendermintTypesEvidence = [
    a_duplicate_vote_evidence?: DecodedTendermintTypesDuplicateVoteEvidence,
    a_light_client_attack_evidence?: DecodedTendermintTypesLightClientAttackEvidence
];
/**
 * Decodes a protobuf Evidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesEvidence}
 */
export declare const decodeTendermintTypesEvidence: (atu8_payload: Uint8Array) => DecodedTendermintTypesEvidence;
/**
 * A decoded protobuf DuplicateVoteEvidence message
 *
 * Tuple where:
 *   - 0: vote_a -
 *   - 1: vote_b -
 *   - 2: total_voting_power -
 *   - 3: validator_power -
 *   - 4: timestamp -
 */
export type DecodedTendermintTypesDuplicateVoteEvidence = [
    a_vote_a?: DecodedTendermintTypesVote,
    a_vote_b?: DecodedTendermintTypesVote,
    sg_total_voting_power?: CwInt64,
    sg_validator_power?: CwInt64,
    a_timestamp?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf DuplicateVoteEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesDuplicateVoteEvidence}
 */
export declare const decodeTendermintTypesDuplicateVoteEvidence: (atu8_payload: Uint8Array) => DecodedTendermintTypesDuplicateVoteEvidence;
/**
 * A decoded protobuf LightClientAttackEvidence message
 *
 * Tuple where:
 *   - 0: conflicting_block -
 *   - 1: common_height -
 *   - 2: byzantine_validators -
 *   - 3: total_voting_power -
 *   - 4: timestamp -
 */
export type DecodedTendermintTypesLightClientAttackEvidence = [
    a_conflicting_block?: DecodedTendermintTypesLightBlock,
    sg_common_height?: CwInt64,
    a_byzantine_validators?: DecodedTendermintTypesValidator[],
    sg_total_voting_power?: CwInt64,
    a_timestamp?: [
        string,
        number
    ]
];
/**
 * Decodes a protobuf LightClientAttackEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesLightClientAttackEvidence}
 */
export declare const decodeTendermintTypesLightClientAttackEvidence: (atu8_payload: Uint8Array) => DecodedTendermintTypesLightClientAttackEvidence;
/**
 * A decoded protobuf EvidenceList message
 *
 * Alias for: evidence -
 */
export type DecodedTendermintTypesEvidenceList = [
    a_evidence?: DecodedTendermintTypesEvidence[]
];
/**
 * Decodes a protobuf EvidenceList message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesEvidenceList}
 */
export declare const decodeTendermintTypesEvidenceList: (atu8_payload: Uint8Array) => DecodedTendermintTypesEvidenceList;
/**
 * Destructures the fields of a {@link TendermintTypesEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: duplicate_vote_evidence -
 *   - 1: light_client_attack_evidence -
 */
export declare const destructTendermintTypesEvidence: (g_struct: TendermintTypesEvidence) => [duplicate_vote_evidence?: TendermintTypesDuplicateVoteEvidence, light_client_attack_evidence?: TendermintTypesLightClientAttackEvidence];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EVIDENCE = "/tendermint.types.Evidence";
/**
 * JSON serialization of `tendermint.types.Evidence` -
 */
export type TendermintTypesEvidence = {
    duplicate_vote_evidence?: TendermintTypesDuplicateVoteEvidence | undefined;
    light_client_attack_evidence?: TendermintTypesLightClientAttackEvidence | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesDuplicateVoteEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote_a -
 *   - 1: vote_b -
 *   - 2: total_voting_power -
 *   - 3: validator_power -
 *   - 4: timestamp -
 */
export declare const destructTendermintTypesDuplicateVoteEvidence: (g_struct: TendermintTypesDuplicateVoteEvidence) => [vote_a?: TendermintTypesVote, vote_b?: TendermintTypesVote, total_voting_power?: CwInt64, validator_power?: CwInt64, timestamp?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_DUPLICATE_VOTE_EVIDENCE = "/tendermint.types.DuplicateVoteEvidence";
/**
 * JSON serialization of `tendermint.types.DuplicateVoteEvidence` - contains evidence of a validator signed two conflicting votes.
 */
export type TendermintTypesDuplicateVoteEvidence = {
    vote_a?: TendermintTypesVote | undefined;
    vote_b?: TendermintTypesVote | undefined;
    total_voting_power?: CwInt64 | undefined;
    validator_power?: CwInt64 | undefined;
    timestamp?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesLightClientAttackEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: conflicting_block -
 *   - 1: common_height -
 *   - 2: byzantine_validators -
 *   - 3: total_voting_power -
 *   - 4: timestamp -
 */
export declare const destructTendermintTypesLightClientAttackEvidence: (g_struct: TendermintTypesLightClientAttackEvidence) => [conflicting_block?: TendermintTypesLightBlock, common_height?: CwInt64, byzantine_validators?: TendermintTypesValidator[], total_voting_power?: CwInt64, timestamp?: number];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_LIGHT_CLIENT_ATTACK_EVIDENCE = "/tendermint.types.LightClientAttackEvidence";
/**
 * JSON serialization of `tendermint.types.LightClientAttackEvidence` - contains evidence of a set of validators attempting to mislead a light client.
 */
export type TendermintTypesLightClientAttackEvidence = {
    conflicting_block?: TendermintTypesLightBlock | undefined;
    common_height?: CwInt64 | undefined;
    byzantine_validators?: TendermintTypesValidator[] | undefined;
    total_voting_power?: CwInt64 | undefined;
    timestamp?: WeakTimestampStr | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesEvidenceList} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence -
 */
export declare const destructTendermintTypesEvidenceList: (g_struct: TendermintTypesEvidenceList) => [evidence?: TendermintTypesEvidence[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EVIDENCE_LIST = "/tendermint.types.EvidenceList";
/**
 * JSON serialization of `tendermint.types.EvidenceList` -
 */
export type TendermintTypesEvidenceList = {
    evidence?: TendermintTypesEvidence[] | undefined;
};
