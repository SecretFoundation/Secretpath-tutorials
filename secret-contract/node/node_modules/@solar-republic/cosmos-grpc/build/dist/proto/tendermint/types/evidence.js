import { parse_timestamp } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, temporal } from '../../../api/protobuf-writer.js';
import { decodeTendermintTypesVote, decodeTendermintTypesLightBlock } from './types.js';
import { decodeTendermintTypesValidator } from './validator.js';
/**
 * Encodes a `Evidence` protobuf message:
 * @param g_duplicate_vote_evidence - `duplicate_vote_evidence`:
 * @param g_light_client_attack_evidence - `light_client_attack_evidence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesEvidence = (atu8_duplicate_vote_evidence, atu8_light_client_attack_evidence) => Protobuf() // ...
    .b(atu8_duplicate_vote_evidence) // DuplicateVoteEvidence duplicate_vote_evidence = 1
    .b(atu8_light_client_attack_evidence) // LightClientAttackEvidence light_client_attack_evidence = 2
    .o;
/**
 * Encodes a `DuplicateVoteEvidence` protobuf message: contains evidence of a validator signed two conflicting votes.
 * @param g_vote_a - `vote_a`:
 * @param g_vote_b - `vote_b`:
 * @param sg_total_voting_power - `total_voting_power`:
 * @param sg_validator_power - `validator_power`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesDuplicateVoteEvidence = (atu8_vote_a, atu8_vote_b, sg_total_voting_power, sg_validator_power, xt_timestamp) => Protobuf() // ...
    .b(atu8_vote_a) // Vote vote_a = 1
    .b(atu8_vote_b) // Vote vote_b = 2
    .g(sg_total_voting_power) // int32 total_voting_power = 3
    .g(sg_validator_power) // int32 validator_power = 4
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 5
    .o;
/**
 * Encodes a `LightClientAttackEvidence` protobuf message: contains evidence of a set of validators attempting to mislead a light client.
 * @param g_conflicting_block - `conflicting_block`:
 * @param sg_common_height - `common_height`:
 * @param a_byzantine_validators - `byzantine_validators`:
 * @param sg_total_voting_power - `total_voting_power`:
 * @param xt_timestamp - `timestamp`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesLightClientAttackEvidence = (atu8_conflicting_block, sg_common_height, a_byzantine_validators, sg_total_voting_power, xt_timestamp) => Protobuf() // ...
    .b(atu8_conflicting_block) // LightBlock conflicting_block = 1
    .g(sg_common_height) // int32 common_height = 2
    .B(a_byzantine_validators) // Validator[] byzantine_validators = 3
    .g(sg_total_voting_power) // int32 total_voting_power = 4
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 5
    .o;
/**
 * Encodes a `EvidenceList` protobuf message:
 * @param a_evidences - `evidence`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesEvidenceList = (a_evidences) => Protobuf() // ...
    .B(a_evidences) // Evidence[] evidence = 1
    .o;
/**
 * Decodes a protobuf Evidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesEvidence}
 */
export const decodeTendermintTypesEvidence = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeTendermintTypesDuplicateVoteEvidence, decodeTendermintTypesLightClientAttackEvidence]);
/**
 * Decodes a protobuf DuplicateVoteEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesDuplicateVoteEvidence}
 */
export const decodeTendermintTypesDuplicateVoteEvidence = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 3, 3, [3, 1]], [decodeTendermintTypesVote, decodeTendermintTypesVote, 0, 0, decode_temporal]);
/**
 * Decodes a protobuf LightClientAttackEvidence message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesLightClientAttackEvidence}
 */
export const decodeTendermintTypesLightClientAttackEvidence = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 0, 3, [3, 1]], [decodeTendermintTypesLightBlock, 0, decodeTendermintTypesValidator, 0, decode_temporal]);
/**
 * Decodes a protobuf EvidenceList message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesEvidenceList}
 */
export const decodeTendermintTypesEvidenceList = (atu8_payload) => decode_protobuf(atu8_payload, [0], [decodeTendermintTypesEvidence]);
/**
 * Destructures the fields of a {@link TendermintTypesEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: duplicate_vote_evidence -
 *   - 1: light_client_attack_evidence -
 */
export const destructTendermintTypesEvidence = (g_struct) => [g_struct.duplicate_vote_evidence, g_struct.light_client_attack_evidence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EVIDENCE = '/tendermint.types.Evidence';
/**
 * Destructures the fields of a {@link TendermintTypesDuplicateVoteEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: vote_a -
 *   - 1: vote_b -
 *   - 2: total_voting_power -
 *   - 3: validator_power -
 *   - 4: timestamp -
 */
export const destructTendermintTypesDuplicateVoteEvidence = (g_struct) => [g_struct.vote_a, g_struct.vote_b, g_struct.total_voting_power, g_struct.validator_power, parse_timestamp(g_struct.timestamp)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_DUPLICATE_VOTE_EVIDENCE = '/tendermint.types.DuplicateVoteEvidence';
/**
 * Destructures the fields of a {@link TendermintTypesLightClientAttackEvidence} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: conflicting_block -
 *   - 1: common_height -
 *   - 2: byzantine_validators -
 *   - 3: total_voting_power -
 *   - 4: timestamp -
 */
export const destructTendermintTypesLightClientAttackEvidence = (g_struct) => [g_struct.conflicting_block, g_struct.common_height, g_struct.byzantine_validators, g_struct.total_voting_power, parse_timestamp(g_struct.timestamp)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_LIGHT_CLIENT_ATTACK_EVIDENCE = '/tendermint.types.LightClientAttackEvidence';
/**
 * Destructures the fields of a {@link TendermintTypesEvidenceList} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: evidence -
 */
export const destructTendermintTypesEvidenceList = (g_struct) => [g_struct.evidence];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EVIDENCE_LIST = '/tendermint.types.EvidenceList';
//# sourceMappingURL=evidence.js.map