import type { WeakInt64Str, CwInt64, CwBase64 } from '@solar-republic/types';
import type { Encoded, Opt, WeakTimestampStr } from '../../../api/types.js';
import type { TendermintCryptoProof, DecodedTendermintCryptoProof } from '../crypto/proof.js';
import type { ProtoEnumTendermintTypesBlockIDFlag, JsonEnumTendermintTypesBlockIDFlag, TendermintTypesValidatorSet, DecodedTendermintTypesValidatorSet } from './validator.js';
import type { TendermintVersionConsensus, DecodedTendermintVersionConsensus } from '../version/types.js';
export type EncodedTendermintTypesPartSetHeader = Encoded<'/tendermint.types.PartSetHeader'>;
export type EncodedTendermintTypesPart = Encoded<'/tendermint.types.Part'>;
export type EncodedTendermintTypesBlockID = Encoded<'/tendermint.types.BlockID'>;
export type EncodedTendermintTypesHeader = Encoded<'/tendermint.types.Header'>;
export type EncodedTendermintTypesData = Encoded<'/tendermint.types.Data'>;
export type EncodedTendermintTypesVote = Encoded<'/tendermint.types.Vote'>;
export type EncodedTendermintTypesCommit = Encoded<'/tendermint.types.Commit'>;
export type EncodedTendermintTypesCommitSig = Encoded<'/tendermint.types.CommitSig'>;
export type EncodedTendermintTypesExtendedCommit = Encoded<'/tendermint.types.ExtendedCommit'>;
export type EncodedTendermintTypesExtendedCommitSig = Encoded<'/tendermint.types.ExtendedCommitSig'>;
export type EncodedTendermintTypesProposal = Encoded<'/tendermint.types.Proposal'>;
export type EncodedTendermintTypesSignedHeader = Encoded<'/tendermint.types.SignedHeader'>;
export type EncodedTendermintTypesLightBlock = Encoded<'/tendermint.types.LightBlock'>;
export type EncodedTendermintTypesBlockMeta = Encoded<'/tendermint.types.BlockMeta'>;
export type EncodedTendermintTypesTxProof = Encoded<'/tendermint.types.TxProof'>;
/**
 * Encodes a `PartSetHeader` protobuf message: PartsetHeader
 * @param n_total - `total`:
 * @param atu8_hash - `hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesPartSetHeader: (n_total?: Opt<number>, atu8_hash?: Opt<Uint8Array>) => EncodedTendermintTypesPartSetHeader;
/**
 * Encodes a `Part` protobuf message:
 * @param n_index - `index`:
 * @param atu8_bytes - `bytes`:
 * @param g_proof - `proof`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesPart: (n_index?: Opt<number>, atu8_bytes?: Opt<Uint8Array>, atu8_proof?: Opt<Encoded<'/tendermint.crypto.Proof'>>) => EncodedTendermintTypesPart;
/**
 * Encodes a `BlockID` protobuf message:
 * @param atu8_hash - `hash`:
 * @param g_part_set_header - `part_set_header`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesBlockID: (atu8_hash?: Opt<Uint8Array>, atu8_part_set_header?: Opt<Encoded<'/tendermint.types.PartSetHeader'>>) => EncodedTendermintTypesBlockID;
/**
 * Encodes a `Header` protobuf message: defines the structure of a block header.
 * @param g_version - `version`: basic block info
 * @param si_chain - `chain_id`:
 * @param sg_height - `height`:
 * @param xt_time - `time`:
 * @param g_last_block_id - `last_block_id`: prev block info
 * @param atu8_last_commit_hash - `last_commit_hash`: hashes of block data
 * @param atu8_data_hash - `data_hash`:
 * @param atu8_validators_hash - `validators_hash`: hashes from the app output from the prev block
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_consensus_hash - `consensus_hash`:
 * @param atu8_app_hash - `app_hash`:
 * @param atu8_last_results_hash - `last_results_hash`:
 * @param atu8_evidence_hash - `evidence_hash`: consensus info
 * @param atu8_proposer_address - `proposer_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesHeader: (atu8_version?: Opt<Encoded<'/tendermint.version.Consensus'>>, si_chain?: Opt<string>, sg_height?: Opt<WeakInt64Str>, xt_time?: Opt<number>, atu8_last_block_id?: Opt<Encoded<'/tendermint.types.BlockID'>>, atu8_last_commit_hash?: Opt<Uint8Array>, atu8_data_hash?: Opt<Uint8Array>, atu8_validators_hash?: Opt<Uint8Array>, atu8_next_validators_hash?: Opt<Uint8Array>, atu8_consensus_hash?: Opt<Uint8Array>, atu8_app_hash?: Opt<Uint8Array>, atu8_last_results_hash?: Opt<Uint8Array>, atu8_evidence_hash?: Opt<Uint8Array>, atu8_proposer_address?: Opt<Uint8Array>) => EncodedTendermintTypesHeader;
/**
 * Encodes a `Data` protobuf message: contains the set of transactions included in the block
 * @param a_txs - `txs`: Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We're just agreeing on the order first. This means that block.AppHash does not include these txs.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesData: (a_txs?: Opt<Uint8Array[]>) => EncodedTendermintTypesData;
/**
 * Encodes a `Vote` protobuf message: represents a prevote or precommit vote from validators for consensus.
 * @param xc_type - `type`:
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param g_block_id - `block_id`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_validator_address - `validator_address`:
 * @param n_validator_index - `validator_index`:
 * @param atu8_signature - `signature`: Vote signature by the validator if they participated in consensus for the associated block.
 * @param atu8_extension - `extension`: Vote extension provided by the application. Only valid for precommit messages.
 * @param atu8_extension_signature - `extension_signature`: Vote extension signature by the validator if they participated in consensus for the associated block. Only valid for precommit messages.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesVote: (xc_type?: Opt<ProtoEnumTendermintTypesSignedMsgType>, sg_height?: Opt<WeakInt64Str>, n_round?: Opt<number>, atu8_block_id?: Opt<Encoded<'/tendermint.types.BlockID'>>, xt_timestamp?: Opt<number>, atu8_validator_address?: Opt<Uint8Array>, n_validator_index?: Opt<number>, atu8_signature?: Opt<Uint8Array>, atu8_extension?: Opt<Uint8Array>, atu8_extension_signature?: Opt<Uint8Array>) => EncodedTendermintTypesVote;
/**
 * Encodes a `Commit` protobuf message: contains the evidence that a block was committed by a set of validators.
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param g_block_id - `block_id`:
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesCommit: (sg_height?: Opt<WeakInt64Str>, n_round?: Opt<number>, atu8_block_id?: Opt<Encoded<'/tendermint.types.BlockID'>>, a_signatures?: Opt<Encoded<'/tendermint.types.CommitSig'>[]>) => EncodedTendermintTypesCommit;
/**
 * Encodes a `CommitSig` protobuf message: a part of the Vote included in a Commit.
 * @param xc_block_id_flag - `block_id_flag`:
 * @param atu8_validator_address - `validator_address`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesCommitSig: (xc_block_id_flag?: Opt<ProtoEnumTendermintTypesBlockIDFlag>, atu8_validator_address?: Opt<Uint8Array>, xt_timestamp?: Opt<number>, atu8_signature?: Opt<Uint8Array>) => EncodedTendermintTypesCommitSig;
/**
 * Encodes a `ExtendedCommit` protobuf message:
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param g_block_id - `block_id`:
 * @param a_extended_signatures - `extended_signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesExtendedCommit: (sg_height?: Opt<WeakInt64Str>, n_round?: Opt<number>, atu8_block_id?: Opt<Encoded<'/tendermint.types.BlockID'>>, a_extended_signatures?: Opt<Encoded<'/tendermint.types.ExtendedCommitSig'>[]>) => EncodedTendermintTypesExtendedCommit;
/**
 * Encodes a `ExtendedCommitSig` protobuf message: retains all the same fields as CommitSig but adds vote extension-related fields. We use two signatures to ensure backwards compatibility. That is the digest of the original signature is still the same in prior versions
 * @param xc_block_id_flag - `block_id_flag`:
 * @param atu8_validator_address - `validator_address`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @param atu8_extension - `extension`: Vote extension data
 * @param atu8_extension_signature - `extension_signature`: Vote extension signature
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesExtendedCommitSig: (xc_block_id_flag?: Opt<ProtoEnumTendermintTypesBlockIDFlag>, atu8_validator_address?: Opt<Uint8Array>, xt_timestamp?: Opt<number>, atu8_signature?: Opt<Uint8Array>, atu8_extension?: Opt<Uint8Array>, atu8_extension_signature?: Opt<Uint8Array>) => EncodedTendermintTypesExtendedCommitSig;
/**
 * Encodes a `Proposal` protobuf message:
 * @param xc_type - `type`:
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param n_pol_round - `pol_round`:
 * @param g_block_id - `block_id`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesProposal: (xc_type?: Opt<ProtoEnumTendermintTypesSignedMsgType>, sg_height?: Opt<WeakInt64Str>, n_round?: Opt<number>, n_pol_round?: Opt<number>, atu8_block_id?: Opt<Encoded<'/tendermint.types.BlockID'>>, xt_timestamp?: Opt<number>, atu8_signature?: Opt<Uint8Array>) => EncodedTendermintTypesProposal;
/**
 * Encodes a `SignedHeader` protobuf message:
 * @param g_header - `header`:
 * @param g_commit - `commit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesSignedHeader: (atu8_header?: Opt<Encoded<'/tendermint.types.Header'>>, atu8_commit?: Opt<Encoded<'/tendermint.types.Commit'>>) => EncodedTendermintTypesSignedHeader;
/**
 * Encodes a `LightBlock` protobuf message:
 * @param g_signed_header - `signed_header`:
 * @param g_validator_set - `validator_set`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesLightBlock: (atu8_signed_header?: Opt<Encoded<'/tendermint.types.SignedHeader'>>, atu8_validator_set?: Opt<Encoded<'/tendermint.types.ValidatorSet'>>) => EncodedTendermintTypesLightBlock;
/**
 * Encodes a `BlockMeta` protobuf message:
 * @param g_block_id - `block_id`:
 * @param sg_block_size - `block_size`:
 * @param g_header - `header`:
 * @param sg_num_txs - `num_txs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesBlockMeta: (atu8_block_id?: Opt<Encoded<'/tendermint.types.BlockID'>>, sg_block_size?: Opt<WeakInt64Str>, atu8_header?: Opt<Encoded<'/tendermint.types.Header'>>, sg_num_txs?: Opt<WeakInt64Str>) => EncodedTendermintTypesBlockMeta;
/**
 * Encodes a `TxProof` protobuf message: represents a Merkle proof of the presence of a transaction in the Merkle tree.
 * @param atu8_root_hash - `root_hash`:
 * @param atu8_data - `data`:
 * @param g_proof - `proof`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintTypesTxProof: (atu8_root_hash?: Opt<Uint8Array>, atu8_data?: Opt<Uint8Array>, atu8_proof?: Opt<Encoded<'/tendermint.crypto.Proof'>>) => EncodedTendermintTypesTxProof;
/**
 * A decoded protobuf PartSetHeader message
 *
 * Tuple where:
 *   - 0: total -
 *   - 1: hash -
 */
export type DecodedTendermintTypesPartSetHeader = [
    n_total?: number,
    atu8_hash?: Uint8Array
];
/**
 * Decodes a protobuf PartSetHeader message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesPartSetHeader}
 */
export declare const decodeTendermintTypesPartSetHeader: (atu8_payload: Uint8Array) => DecodedTendermintTypesPartSetHeader;
/**
 * A decoded protobuf Part message
 *
 * Tuple where:
 *   - 0: index -
 *   - 1: bytes -
 *   - 2: proof -
 */
export type DecodedTendermintTypesPart = [
    n_index?: number,
    atu8_bytes?: Uint8Array,
    a_proof?: DecodedTendermintCryptoProof
];
/**
 * Decodes a protobuf Part message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesPart}
 */
export declare const decodeTendermintTypesPart: (atu8_payload: Uint8Array) => DecodedTendermintTypesPart;
/**
 * A decoded protobuf BlockID message
 *
 * Tuple where:
 *   - 0: hash -
 *   - 1: part_set_header -
 */
export type DecodedTendermintTypesBlockID = [
    atu8_hash?: Uint8Array,
    a_part_set_header?: DecodedTendermintTypesPartSetHeader
];
/**
 * Decodes a protobuf BlockID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesBlockID}
 */
export declare const decodeTendermintTypesBlockID: (atu8_payload: Uint8Array) => DecodedTendermintTypesBlockID;
/**
 * A decoded protobuf Header message
 *
 * Tuple where:
 *   - 0: version - basic block info
 *   - 1: chain_id -
 *   - 2: height -
 *   - 3: time -
 *   - 4: last_block_id - prev block info
 *   - 5: last_commit_hash - hashes of block data
 *   - 6: data_hash -
 *   - 7: validators_hash - hashes from the app output from the prev block
 *   - 8: next_validators_hash -
 *   - 9: consensus_hash -
 *   - 10: app_hash -
 *   - 11: last_results_hash -
 *   - 12: evidence_hash - consensus info
 *   - 13: proposer_address -
 */
export type DecodedTendermintTypesHeader = [
    a_version?: DecodedTendermintVersionConsensus,
    si_chain?: string,
    sg_height?: CwInt64,
    a_time?: [
        string,
        number
    ],
    a_last_block_id?: DecodedTendermintTypesBlockID,
    atu8_last_commit_hash?: Uint8Array,
    atu8_data_hash?: Uint8Array,
    atu8_validators_hash?: Uint8Array,
    atu8_next_validators_hash?: Uint8Array,
    atu8_consensus_hash?: Uint8Array,
    atu8_app_hash?: Uint8Array,
    atu8_last_results_hash?: Uint8Array,
    atu8_evidence_hash?: Uint8Array,
    atu8_proposer_address?: Uint8Array
];
/**
 * Decodes a protobuf Header message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesHeader}
 */
export declare const decodeTendermintTypesHeader: (atu8_payload: Uint8Array) => DecodedTendermintTypesHeader;
/**
 * A decoded protobuf Data message
 *
 * Alias for: txs - Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We're just agreeing on the order first. This means that block.AppHash does not include these txs.
 */
export type DecodedTendermintTypesData = [
    a_txs?: Uint8Array[]
];
/**
 * Decodes a protobuf Data message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesData}
 */
export declare const decodeTendermintTypesData: (atu8_payload: Uint8Array) => DecodedTendermintTypesData;
/**
 * A decoded protobuf Vote message
 *
 * Tuple where:
 *   - 0: type -
 *   - 1: height -
 *   - 2: round -
 *   - 3: block_id -
 *   - 4: timestamp -
 *   - 5: validator_address -
 *   - 6: validator_index -
 *   - 7: signature - Vote signature by the validator if they participated in consensus for the associated block.
 *   - 8: extension - Vote extension provided by the application. Only valid for precommit messages.
 *   - 9: extension_signature - Vote extension signature by the validator if they participated in consensus for the associated block. Only valid for precommit messages.
 */
export type DecodedTendermintTypesVote = [
    xc_type?: ProtoEnumTendermintTypesSignedMsgType,
    sg_height?: CwInt64,
    n_round?: number,
    a_block_id?: DecodedTendermintTypesBlockID,
    a_timestamp?: [
        string,
        number
    ],
    atu8_validator_address?: Uint8Array,
    n_validator_index?: number,
    atu8_signature?: Uint8Array,
    atu8_extension?: Uint8Array,
    atu8_extension_signature?: Uint8Array
];
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesVote}
 */
export declare const decodeTendermintTypesVote: (atu8_payload: Uint8Array) => DecodedTendermintTypesVote;
/**
 * A decoded protobuf Commit message
 *
 * Tuple where:
 *   - 0: height -
 *   - 1: round -
 *   - 2: block_id -
 *   - 3: signatures -
 */
export type DecodedTendermintTypesCommit = [
    sg_height?: CwInt64,
    n_round?: number,
    a_block_id?: DecodedTendermintTypesBlockID,
    a_signatures?: DecodedTendermintTypesCommitSig[]
];
/**
 * Decodes a protobuf Commit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesCommit}
 */
export declare const decodeTendermintTypesCommit: (atu8_payload: Uint8Array) => DecodedTendermintTypesCommit;
/**
 * A decoded protobuf CommitSig message
 *
 * Tuple where:
 *   - 0: block_id_flag -
 *   - 1: validator_address -
 *   - 2: timestamp -
 *   - 3: signature -
 */
export type DecodedTendermintTypesCommitSig = [
    xc_block_id_flag?: ProtoEnumTendermintTypesBlockIDFlag,
    atu8_validator_address?: Uint8Array,
    a_timestamp?: [
        string,
        number
    ],
    atu8_signature?: Uint8Array
];
/**
 * Decodes a protobuf CommitSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesCommitSig}
 */
export declare const decodeTendermintTypesCommitSig: (atu8_payload: Uint8Array) => DecodedTendermintTypesCommitSig;
/**
 * A decoded protobuf ExtendedCommit message
 *
 * Tuple where:
 *   - 0: height -
 *   - 1: round -
 *   - 2: block_id -
 *   - 3: extended_signatures -
 */
export type DecodedTendermintTypesExtendedCommit = [
    sg_height?: CwInt64,
    n_round?: number,
    a_block_id?: DecodedTendermintTypesBlockID,
    a_extended_signatures?: DecodedTendermintTypesExtendedCommitSig[]
];
/**
 * Decodes a protobuf ExtendedCommit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesExtendedCommit}
 */
export declare const decodeTendermintTypesExtendedCommit: (atu8_payload: Uint8Array) => DecodedTendermintTypesExtendedCommit;
/**
 * A decoded protobuf ExtendedCommitSig message
 *
 * Tuple where:
 *   - 0: block_id_flag -
 *   - 1: validator_address -
 *   - 2: timestamp -
 *   - 3: signature -
 *   - 4: extension - Vote extension data
 *   - 5: extension_signature - Vote extension signature
 */
export type DecodedTendermintTypesExtendedCommitSig = [
    xc_block_id_flag?: ProtoEnumTendermintTypesBlockIDFlag,
    atu8_validator_address?: Uint8Array,
    a_timestamp?: [
        string,
        number
    ],
    atu8_signature?: Uint8Array,
    atu8_extension?: Uint8Array,
    atu8_extension_signature?: Uint8Array
];
/**
 * Decodes a protobuf ExtendedCommitSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesExtendedCommitSig}
 */
export declare const decodeTendermintTypesExtendedCommitSig: (atu8_payload: Uint8Array) => DecodedTendermintTypesExtendedCommitSig;
/**
 * A decoded protobuf Proposal message
 *
 * Tuple where:
 *   - 0: type -
 *   - 1: height -
 *   - 2: round -
 *   - 3: pol_round -
 *   - 4: block_id -
 *   - 5: timestamp -
 *   - 6: signature -
 */
export type DecodedTendermintTypesProposal = [
    xc_type?: ProtoEnumTendermintTypesSignedMsgType,
    sg_height?: CwInt64,
    n_round?: number,
    n_pol_round?: number,
    a_block_id?: DecodedTendermintTypesBlockID,
    a_timestamp?: [
        string,
        number
    ],
    atu8_signature?: Uint8Array
];
/**
 * Decodes a protobuf Proposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesProposal}
 */
export declare const decodeTendermintTypesProposal: (atu8_payload: Uint8Array) => DecodedTendermintTypesProposal;
/**
 * A decoded protobuf SignedHeader message
 *
 * Tuple where:
 *   - 0: header -
 *   - 1: commit -
 */
export type DecodedTendermintTypesSignedHeader = [
    a_header?: DecodedTendermintTypesHeader,
    a_commit?: DecodedTendermintTypesCommit
];
/**
 * Decodes a protobuf SignedHeader message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesSignedHeader}
 */
export declare const decodeTendermintTypesSignedHeader: (atu8_payload: Uint8Array) => DecodedTendermintTypesSignedHeader;
/**
 * A decoded protobuf LightBlock message
 *
 * Tuple where:
 *   - 0: signed_header -
 *   - 1: validator_set -
 */
export type DecodedTendermintTypesLightBlock = [
    a_signed_header?: DecodedTendermintTypesSignedHeader,
    a_validator_set?: DecodedTendermintTypesValidatorSet
];
/**
 * Decodes a protobuf LightBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesLightBlock}
 */
export declare const decodeTendermintTypesLightBlock: (atu8_payload: Uint8Array) => DecodedTendermintTypesLightBlock;
/**
 * A decoded protobuf BlockMeta message
 *
 * Tuple where:
 *   - 0: block_id -
 *   - 1: block_size -
 *   - 2: header -
 *   - 3: num_txs -
 */
export type DecodedTendermintTypesBlockMeta = [
    a_block_id?: DecodedTendermintTypesBlockID,
    sg_block_size?: CwInt64,
    a_header?: DecodedTendermintTypesHeader,
    sg_num_txs?: CwInt64
];
/**
 * Decodes a protobuf BlockMeta message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesBlockMeta}
 */
export declare const decodeTendermintTypesBlockMeta: (atu8_payload: Uint8Array) => DecodedTendermintTypesBlockMeta;
/**
 * A decoded protobuf TxProof message
 *
 * Tuple where:
 *   - 0: root_hash -
 *   - 1: data -
 *   - 2: proof -
 */
export type DecodedTendermintTypesTxProof = [
    atu8_root_hash?: Uint8Array,
    atu8_data?: Uint8Array,
    a_proof?: DecodedTendermintCryptoProof
];
/**
 * Decodes a protobuf TxProof message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesTxProof}
 */
export declare const decodeTendermintTypesTxProof: (atu8_payload: Uint8Array) => DecodedTendermintTypesTxProof;
/**
 * Destructures the fields of a {@link TendermintTypesVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: height -
 *   - 2: round -
 *   - 3: block_id -
 *   - 4: timestamp -
 *   - 5: validator_address -
 *   - 6: validator_index -
 *   - 7: signature - Vote signature by the validator if they participated in consensus for the associated block.
 *   - 8: extension - Vote extension provided by the application. Only valid for precommit messages.
 *   - 9: extension_signature - Vote extension signature by the validator if they participated in consensus for the associated block. Only valid for precommit messages.
 */
export declare const destructTendermintTypesVote: (g_struct: TendermintTypesVote) => [type_?: JsonEnumTendermintTypesSignedMsgType, height?: CwInt64, round?: number, block_id?: TendermintTypesBlockID, timestamp?: number, validator_address?: Uint8Array, validator_index?: number, signature?: Uint8Array, extension?: Uint8Array, extension_signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VOTE = "/tendermint.types.Vote";
/**
 * JSON serialization of `tendermint.types.Vote` - represents a prevote or precommit vote from validators for consensus.
 */
export type TendermintTypesVote = {
    type?: JsonEnumTendermintTypesSignedMsgType | undefined;
    height?: CwInt64 | undefined;
    round?: number | undefined;
    block_id?: TendermintTypesBlockID | undefined;
    timestamp?: WeakTimestampStr | undefined;
    validator_address?: CwBase64 | undefined;
    validator_index?: number | undefined;
    signature?: CwBase64 | undefined;
    extension?: CwBase64 | undefined;
    extension_signature?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesBlockID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash -
 *   - 1: part_set_header -
 */
export declare const destructTendermintTypesBlockID: (g_struct: TendermintTypesBlockID) => [hash?: Uint8Array, part_set_header?: TendermintTypesPartSetHeader];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_BLOCK_I_D = "/tendermint.types.BlockID";
/**
 * JSON serialization of `tendermint.types.BlockID` -
 */
export type TendermintTypesBlockID = {
    hash?: CwBase64 | undefined;
    part_set_header?: TendermintTypesPartSetHeader | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesPartSetHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total -
 *   - 1: hash -
 */
export declare const destructTendermintTypesPartSetHeader: (g_struct: TendermintTypesPartSetHeader) => [total?: number, hash?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_PART_SET_HEADER = "/tendermint.types.PartSetHeader";
/**
 * JSON serialization of `tendermint.types.PartSetHeader` - PartsetHeader
 */
export type TendermintTypesPartSetHeader = {
    total?: number | undefined;
    hash?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesLightBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signed_header -
 *   - 1: validator_set -
 */
export declare const destructTendermintTypesLightBlock: (g_struct: TendermintTypesLightBlock) => [signed_header?: TendermintTypesSignedHeader, validator_set?: TendermintTypesValidatorSet];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_LIGHT_BLOCK = "/tendermint.types.LightBlock";
/**
 * JSON serialization of `tendermint.types.LightBlock` -
 */
export type TendermintTypesLightBlock = {
    signed_header?: TendermintTypesSignedHeader | undefined;
    validator_set?: TendermintTypesValidatorSet | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesSignedHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: header -
 *   - 1: commit -
 */
export declare const destructTendermintTypesSignedHeader: (g_struct: TendermintTypesSignedHeader) => [header?: TendermintTypesHeader, commit?: TendermintTypesCommit];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_SIGNED_HEADER = "/tendermint.types.SignedHeader";
/**
 * JSON serialization of `tendermint.types.SignedHeader` -
 */
export type TendermintTypesSignedHeader = {
    header?: TendermintTypesHeader | undefined;
    commit?: TendermintTypesCommit | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version - basic block info
 *   - 1: chain_id -
 *   - 2: height -
 *   - 3: time -
 *   - 4: last_block_id - prev block info
 *   - 5: last_commit_hash - hashes of block data
 *   - 6: data_hash -
 *   - 7: validators_hash - hashes from the app output from the prev block
 *   - 8: next_validators_hash -
 *   - 9: consensus_hash -
 *   - 10: app_hash -
 *   - 11: last_results_hash -
 *   - 12: evidence_hash - consensus info
 *   - 13: proposer_address -
 */
export declare const destructTendermintTypesHeader: (g_struct: TendermintTypesHeader) => [version?: TendermintVersionConsensus, chain_id?: string, height?: CwInt64, time?: number, last_block_id?: TendermintTypesBlockID, last_commit_hash?: Uint8Array, data_hash?: Uint8Array, validators_hash?: Uint8Array, next_validators_hash?: Uint8Array, consensus_hash?: Uint8Array, app_hash?: Uint8Array, last_results_hash?: Uint8Array, evidence_hash?: Uint8Array, proposer_address?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_HEADER = "/tendermint.types.Header";
/**
 * JSON serialization of `tendermint.types.Header` - defines the structure of a block header.
 */
export type TendermintTypesHeader = {
    version?: TendermintVersionConsensus | undefined;
    chain_id?: string | undefined;
    height?: CwInt64 | undefined;
    time?: WeakTimestampStr | undefined;
    last_block_id?: TendermintTypesBlockID | undefined;
    last_commit_hash?: CwBase64 | undefined;
    data_hash?: CwBase64 | undefined;
    validators_hash?: CwBase64 | undefined;
    next_validators_hash?: CwBase64 | undefined;
    consensus_hash?: CwBase64 | undefined;
    app_hash?: CwBase64 | undefined;
    last_results_hash?: CwBase64 | undefined;
    evidence_hash?: CwBase64 | undefined;
    proposer_address?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesCommit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: round -
 *   - 2: block_id -
 *   - 3: signatures -
 */
export declare const destructTendermintTypesCommit: (g_struct: TendermintTypesCommit) => [height?: CwInt64, round?: number, block_id?: TendermintTypesBlockID, signatures?: TendermintTypesCommitSig[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_COMMIT = "/tendermint.types.Commit";
/**
 * JSON serialization of `tendermint.types.Commit` - contains the evidence that a block was committed by a set of validators.
 */
export type TendermintTypesCommit = {
    height?: CwInt64 | undefined;
    round?: number | undefined;
    block_id?: TendermintTypesBlockID | undefined;
    signatures?: TendermintTypesCommitSig[] | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesCommitSig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_id_flag -
 *   - 1: validator_address -
 *   - 2: timestamp -
 *   - 3: signature -
 */
export declare const destructTendermintTypesCommitSig: (g_struct: TendermintTypesCommitSig) => [block_id_flag?: JsonEnumTendermintTypesBlockIDFlag, validator_address?: Uint8Array, timestamp?: number, signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_COMMIT_SIG = "/tendermint.types.CommitSig";
/**
 * JSON serialization of `tendermint.types.CommitSig` - a part of the Vote included in a Commit.
 */
export type TendermintTypesCommitSig = {
    block_id_flag?: JsonEnumTendermintTypesBlockIDFlag | undefined;
    validator_address?: CwBase64 | undefined;
    timestamp?: WeakTimestampStr | undefined;
    signature?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesPart} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: index -
 *   - 1: bytes -
 *   - 2: proof -
 */
export declare const destructTendermintTypesPart: (g_struct: TendermintTypesPart) => [index?: number, bytes?: Uint8Array, proof?: TendermintCryptoProof];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_PART = "/tendermint.types.Part";
/**
 * JSON serialization of `tendermint.types.Part` -
 */
export type TendermintTypesPart = {
    index?: number | undefined;
    bytes?: CwBase64 | undefined;
    proof?: TendermintCryptoProof | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs - Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We're just agreeing on the order first. This means that block.AppHash does not include these txs.
 */
export declare const destructTendermintTypesData: (g_struct: TendermintTypesData) => [txs?: Uint8Array[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_DATA = "/tendermint.types.Data";
/**
 * JSON serialization of `tendermint.types.Data` - contains the set of transactions included in the block
 */
export type TendermintTypesData = {
    txs?: CwBase64[] | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesExtendedCommit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: round -
 *   - 2: block_id -
 *   - 3: extended_signatures -
 */
export declare const destructTendermintTypesExtendedCommit: (g_struct: TendermintTypesExtendedCommit) => [height?: CwInt64, round?: number, block_id?: TendermintTypesBlockID, extended_signatures?: TendermintTypesExtendedCommitSig[]];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EXTENDED_COMMIT = "/tendermint.types.ExtendedCommit";
/**
 * JSON serialization of `tendermint.types.ExtendedCommit` -
 */
export type TendermintTypesExtendedCommit = {
    height?: CwInt64 | undefined;
    round?: number | undefined;
    block_id?: TendermintTypesBlockID | undefined;
    extended_signatures?: TendermintTypesExtendedCommitSig[] | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesExtendedCommitSig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_id_flag -
 *   - 1: validator_address -
 *   - 2: timestamp -
 *   - 3: signature -
 *   - 4: extension - Vote extension data
 *   - 5: extension_signature - Vote extension signature
 */
export declare const destructTendermintTypesExtendedCommitSig: (g_struct: TendermintTypesExtendedCommitSig) => [block_id_flag?: JsonEnumTendermintTypesBlockIDFlag, validator_address?: Uint8Array, timestamp?: number, signature?: Uint8Array, extension?: Uint8Array, extension_signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EXTENDED_COMMIT_SIG = "/tendermint.types.ExtendedCommitSig";
/**
 * JSON serialization of `tendermint.types.ExtendedCommitSig` - retains all the same fields as CommitSig but adds vote extension-related fields. We use two signatures to ensure backwards compatibility. That is the digest of the original signature is still the same in prior versions
 */
export type TendermintTypesExtendedCommitSig = {
    block_id_flag?: JsonEnumTendermintTypesBlockIDFlag | undefined;
    validator_address?: CwBase64 | undefined;
    timestamp?: WeakTimestampStr | undefined;
    signature?: CwBase64 | undefined;
    extension?: CwBase64 | undefined;
    extension_signature?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: height -
 *   - 2: round -
 *   - 3: pol_round -
 *   - 4: block_id -
 *   - 5: timestamp -
 *   - 6: signature -
 */
export declare const destructTendermintTypesProposal: (g_struct: TendermintTypesProposal) => [type_?: JsonEnumTendermintTypesSignedMsgType, height?: CwInt64, round?: number, pol_round?: number, block_id?: TendermintTypesBlockID, timestamp?: number, signature?: Uint8Array];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_PROPOSAL = "/tendermint.types.Proposal";
/**
 * JSON serialization of `tendermint.types.Proposal` -
 */
export type TendermintTypesProposal = {
    type?: JsonEnumTendermintTypesSignedMsgType | undefined;
    height?: CwInt64 | undefined;
    round?: number | undefined;
    pol_round?: number | undefined;
    block_id?: TendermintTypesBlockID | undefined;
    timestamp?: WeakTimestampStr | undefined;
    signature?: CwBase64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesBlockMeta} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_id -
 *   - 1: block_size -
 *   - 2: header -
 *   - 3: num_txs -
 */
export declare const destructTendermintTypesBlockMeta: (g_struct: TendermintTypesBlockMeta) => [block_id?: TendermintTypesBlockID, block_size?: CwInt64, header?: TendermintTypesHeader, num_txs?: CwInt64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_BLOCK_META = "/tendermint.types.BlockMeta";
/**
 * JSON serialization of `tendermint.types.BlockMeta` -
 */
export type TendermintTypesBlockMeta = {
    block_id?: TendermintTypesBlockID | undefined;
    block_size?: CwInt64 | undefined;
    header?: TendermintTypesHeader | undefined;
    num_txs?: CwInt64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintTypesTxProof} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: root_hash -
 *   - 1: data -
 *   - 2: proof -
 */
export declare const destructTendermintTypesTxProof: (g_struct: TendermintTypesTxProof) => [root_hash?: Uint8Array, data?: Uint8Array, proof?: TendermintCryptoProof];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_TYPES_TX_PROOF = "/tendermint.types.TxProof";
/**
 * JSON serialization of `tendermint.types.TxProof` - represents a Merkle proof of the presence of a transaction in the Merkle tree.
 */
export type TendermintTypesTxProof = {
    root_hash?: CwBase64 | undefined;
    data?: CwBase64 | undefined;
    proof?: TendermintCryptoProof | undefined;
};
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export declare const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export declare const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN = "UnknownType";
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PREVOTE** - Votes
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export declare const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE = 1;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PREVOTE** - Votes
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export declare const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE = "PrevoteType";
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PRECOMMIT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export declare const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT = 2;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PRECOMMIT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export declare const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT = "PrecommitType";
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PROPOSAL** - Proposals
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export declare const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL = 32;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PROPOSAL** - Proposals
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export declare const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL = "ProposalType";
/**
 * Raw protobuf enum values for `tendermint.types.SignedMsgType` to be used when passing to an encoder or comparing to a decoded protobuf value.
 *
 * Values:
 *   - {@link XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN}
 *   - {@link XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE}
 *   - {@link XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT}
 *   - {@link XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL}
 */
export type ProtoEnumTendermintTypesSignedMsgType = typeof XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN | typeof XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE | typeof XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT | typeof XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL;
/**
 * JSON enum values for `tendermint.types.SignedMsgType` to be used when passing to a gRPC-gateway method or comparing to a response value
 *
 * Values:
 *   - {@link SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN}
 *   - {@link SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE}
 *   - {@link SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT}
 *   - {@link SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL}
 */
export type JsonEnumTendermintTypesSignedMsgType = typeof SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN | typeof SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE | typeof SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT | typeof SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL;
/**
 * Maps a protobuf enum int value for `tendermint.types.SignedMsgType` to is JSON equivalent enum string value
 */
export declare const ProtoToJsonEnumTendermintTypesSignedMsgType: Record<ProtoEnumTendermintTypesSignedMsgType, JsonEnumTendermintTypesSignedMsgType>;
/**
 * Maps a JSON enum string value for `tendermint.types.SignedMsgType` to is protobuf equivalent enum int value
 */
export declare const JsonToProtoEnumTendermintTypesSignedMsgType: Record<JsonEnumTendermintTypesSignedMsgType, ProtoEnumTendermintTypesSignedMsgType>;
