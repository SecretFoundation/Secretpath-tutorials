import { parse_timestamp } from '../../../api/json.js';
import { decode_protobuf, decode_temporal } from '../../../api/protobuf-reader.js';
import { Protobuf, map, temporal } from '../../../api/protobuf-writer.js';
import { safe_base64_to_bytes } from '../../../api/util.js';
import { decodeTendermintCryptoProof } from '../crypto/proof.js';
import { decodeTendermintTypesValidatorSet } from './validator.js';
import { decodeTendermintVersionConsensus } from '../version/types.js';
/**
 * Encodes a `PartSetHeader` protobuf message: PartsetHeader
 * @param n_total - `total`:
 * @param atu8_hash - `hash`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesPartSetHeader = (n_total, atu8_hash) => Protobuf() // ...
    .v(n_total) // uint32 total = 1
    .b(atu8_hash) // bytes hash = 2
    .o;
/**
 * Encodes a `Part` protobuf message:
 * @param n_index - `index`:
 * @param atu8_bytes - `bytes`:
 * @param g_proof - `proof`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesPart = (n_index, atu8_bytes, atu8_proof) => Protobuf() // ...
    .v(n_index) // uint32 index = 1
    .b(atu8_bytes) // bytes bytes = 2
    .b(atu8_proof) // Proof proof = 3
    .o;
/**
 * Encodes a `BlockID` protobuf message:
 * @param atu8_hash - `hash`:
 * @param g_part_set_header - `part_set_header`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesBlockID = (atu8_hash, atu8_part_set_header) => Protobuf() // ...
    .b(atu8_hash) // bytes hash = 1
    .b(atu8_part_set_header) // PartSetHeader part_set_header = 2
    .o;
/**
 * Encodes a `Header` protobuf message: defines the structure of a block header.
 * @param g_version - `version`: basic block info
 * @param si_chain - `chain_id`:
 * @param sg_height - `height`:
 * @param xt_time - `time`:
 * @param g_last_block_id - `last_block_id`: prev block info
 * @param atu8_last_commit_hash - `last_commit_hash`: hashes of block data
 * @param atu8_data_hash - `data_hash`:
 * @param atu8_validators_hash - `validators_hash`: hashes from the app output from the prev block
 * @param atu8_next_validators_hash - `next_validators_hash`:
 * @param atu8_consensus_hash - `consensus_hash`:
 * @param atu8_app_hash - `app_hash`:
 * @param atu8_last_results_hash - `last_results_hash`:
 * @param atu8_evidence_hash - `evidence_hash`: consensus info
 * @param atu8_proposer_address - `proposer_address`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesHeader = (atu8_version, si_chain, sg_height, xt_time, atu8_last_block_id, atu8_last_commit_hash, atu8_data_hash, atu8_validators_hash, atu8_next_validators_hash, atu8_consensus_hash, atu8_app_hash, atu8_last_results_hash, atu8_evidence_hash, atu8_proposer_address) => Protobuf() // ...
    .b(atu8_version) // Consensus version = 1
    .s(si_chain) // string chain_id = 2
    .g(sg_height) // int32 height = 3
    .b(temporal(xt_time)) // Timestamp time = 4
    .b(atu8_last_block_id) // BlockID last_block_id = 5
    .b(atu8_last_commit_hash) // bytes last_commit_hash = 6
    .b(atu8_data_hash) // bytes data_hash = 7
    .b(atu8_validators_hash) // bytes validators_hash = 8
    .b(atu8_next_validators_hash) // bytes next_validators_hash = 9
    .b(atu8_consensus_hash) // bytes consensus_hash = 10
    .b(atu8_app_hash) // bytes app_hash = 11
    .b(atu8_last_results_hash) // bytes last_results_hash = 12
    .b(atu8_evidence_hash) // bytes evidence_hash = 13
    .b(atu8_proposer_address) // bytes proposer_address = 14
    .o;
/**
 * Encodes a `Data` protobuf message: contains the set of transactions included in the block
 * @param a_txs - `txs`: Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We're just agreeing on the order first. This means that block.AppHash does not include these txs.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesData = (a_txs) => Protobuf() // ...
    .B(a_txs) // bytes[] txs = 1
    .o;
/**
 * Encodes a `Vote` protobuf message: represents a prevote or precommit vote from validators for consensus.
 * @param xc_type - `type`:
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param g_block_id - `block_id`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_validator_address - `validator_address`:
 * @param n_validator_index - `validator_index`:
 * @param atu8_signature - `signature`: Vote signature by the validator if they participated in consensus for the associated block.
 * @param atu8_extension - `extension`: Vote extension provided by the application. Only valid for precommit messages.
 * @param atu8_extension_signature - `extension_signature`: Vote extension signature by the validator if they participated in consensus for the associated block. Only valid for precommit messages.
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesVote = (xc_type, sg_height, n_round, atu8_block_id, xt_timestamp, atu8_validator_address, n_validator_index, atu8_signature, atu8_extension, atu8_extension_signature) => Protobuf() // ...
    .v(xc_type) // SignedMsgType type = 1
    .g(sg_height) // int32 height = 2
    .v(n_round) // int32 round = 3
    .b(atu8_block_id) // BlockID block_id = 4
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 5
    .b(atu8_validator_address) // bytes validator_address = 6
    .v(n_validator_index) // int32 validator_index = 7
    .b(atu8_signature) // bytes signature = 8
    .b(atu8_extension) // bytes extension = 9
    .b(atu8_extension_signature) // bytes extension_signature = 10
    .o;
/**
 * Encodes a `Commit` protobuf message: contains the evidence that a block was committed by a set of validators.
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param g_block_id - `block_id`:
 * @param a_signatures - `signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesCommit = (sg_height, n_round, atu8_block_id, a_signatures) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .v(n_round) // int32 round = 2
    .b(atu8_block_id) // BlockID block_id = 3
    .B(a_signatures) // CommitSig[] signatures = 4
    .o;
/**
 * Encodes a `CommitSig` protobuf message: a part of the Vote included in a Commit.
 * @param xc_block_id_flag - `block_id_flag`:
 * @param atu8_validator_address - `validator_address`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesCommitSig = (xc_block_id_flag, atu8_validator_address, xt_timestamp, atu8_signature) => Protobuf() // ...
    .v(xc_block_id_flag) // BlockIDFlag block_id_flag = 1
    .b(atu8_validator_address) // bytes validator_address = 2
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 3
    .b(atu8_signature) // bytes signature = 4
    .o;
/**
 * Encodes a `ExtendedCommit` protobuf message:
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param g_block_id - `block_id`:
 * @param a_extended_signatures - `extended_signatures`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesExtendedCommit = (sg_height, n_round, atu8_block_id, a_extended_signatures) => Protobuf() // ...
    .g(sg_height) // int32 height = 1
    .v(n_round) // int32 round = 2
    .b(atu8_block_id) // BlockID block_id = 3
    .B(a_extended_signatures) // ExtendedCommitSig[] extended_signatures = 4
    .o;
/**
 * Encodes a `ExtendedCommitSig` protobuf message: retains all the same fields as CommitSig but adds vote extension-related fields. We use two signatures to ensure backwards compatibility. That is the digest of the original signature is still the same in prior versions
 * @param xc_block_id_flag - `block_id_flag`:
 * @param atu8_validator_address - `validator_address`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @param atu8_extension - `extension`: Vote extension data
 * @param atu8_extension_signature - `extension_signature`: Vote extension signature
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesExtendedCommitSig = (xc_block_id_flag, atu8_validator_address, xt_timestamp, atu8_signature, atu8_extension, atu8_extension_signature) => Protobuf() // ...
    .v(xc_block_id_flag) // BlockIDFlag block_id_flag = 1
    .b(atu8_validator_address) // bytes validator_address = 2
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 3
    .b(atu8_signature) // bytes signature = 4
    .b(atu8_extension) // bytes extension = 5
    .b(atu8_extension_signature) // bytes extension_signature = 6
    .o;
/**
 * Encodes a `Proposal` protobuf message:
 * @param xc_type - `type`:
 * @param sg_height - `height`:
 * @param n_round - `round`:
 * @param n_pol_round - `pol_round`:
 * @param g_block_id - `block_id`:
 * @param xt_timestamp - `timestamp`:
 * @param atu8_signature - `signature`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesProposal = (xc_type, sg_height, n_round, n_pol_round, atu8_block_id, xt_timestamp, atu8_signature) => Protobuf() // ...
    .v(xc_type) // SignedMsgType type = 1
    .g(sg_height) // int32 height = 2
    .v(n_round) // int32 round = 3
    .v(n_pol_round) // int32 pol_round = 4
    .b(atu8_block_id) // BlockID block_id = 5
    .b(temporal(xt_timestamp)) // Timestamp timestamp = 6
    .b(atu8_signature) // bytes signature = 7
    .o;
/**
 * Encodes a `SignedHeader` protobuf message:
 * @param g_header - `header`:
 * @param g_commit - `commit`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesSignedHeader = (atu8_header, atu8_commit) => Protobuf() // ...
    .b(atu8_header) // Header header = 1
    .b(atu8_commit) // Commit commit = 2
    .o;
/**
 * Encodes a `LightBlock` protobuf message:
 * @param g_signed_header - `signed_header`:
 * @param g_validator_set - `validator_set`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesLightBlock = (atu8_signed_header, atu8_validator_set) => Protobuf() // ...
    .b(atu8_signed_header) // SignedHeader signed_header = 1
    .b(atu8_validator_set) // ValidatorSet validator_set = 2
    .o;
/**
 * Encodes a `BlockMeta` protobuf message:
 * @param g_block_id - `block_id`:
 * @param sg_block_size - `block_size`:
 * @param g_header - `header`:
 * @param sg_num_txs - `num_txs`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesBlockMeta = (atu8_block_id, sg_block_size, atu8_header, sg_num_txs) => Protobuf() // ...
    .b(atu8_block_id) // BlockID block_id = 1
    .g(sg_block_size) // int32 block_size = 2
    .b(atu8_header) // Header header = 3
    .g(sg_num_txs) // int32 num_txs = 4
    .o;
/**
 * Encodes a `TxProof` protobuf message: represents a Merkle proof of the presence of a transaction in the Merkle tree.
 * @param atu8_root_hash - `root_hash`:
 * @param atu8_data - `data`:
 * @param g_proof - `proof`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintTypesTxProof = (atu8_root_hash, atu8_data, atu8_proof) => Protobuf() // ...
    .b(atu8_root_hash) // bytes root_hash = 1
    .b(atu8_data) // bytes data = 2
    .b(atu8_proof) // Proof proof = 3
    .o;
/**
 * Decodes a protobuf PartSetHeader message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesPartSetHeader}
 */
export const decodeTendermintTypesPartSetHeader = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1]);
/**
 * Decodes a protobuf Part message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesPart}
 */
export const decodeTendermintTypesPart = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, 0, decodeTendermintCryptoProof]);
/**
 * Decodes a protobuf BlockID message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesBlockID}
 */
export const decodeTendermintTypesBlockID = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [0, decodeTendermintTypesPartSetHeader]);
/**
 * Decodes a protobuf Header message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesHeader}
 */
export const decodeTendermintTypesHeader = (atu8_payload) => decode_protobuf(atu8_payload, [1, 5, 3, [3, 1], 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [decodeTendermintVersionConsensus, 0, 0, decode_temporal, decodeTendermintTypesBlockID]);
/**
 * Decodes a protobuf Data message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesData}
 */
export const decodeTendermintTypesData = (atu8_payload) => decode_protobuf(atu8_payload, [0]);
/**
 * Decodes a protobuf Vote message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesVote}
 */
export const decodeTendermintTypesVote = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 1, 1, [3, 1], 1, 1, 1, 1, 1], [0, 0, 0, decodeTendermintTypesBlockID, decode_temporal]);
/**
 * Decodes a protobuf Commit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesCommit}
 */
export const decodeTendermintTypesCommit = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1, 0], [0, 0, decodeTendermintTypesBlockID, decodeTendermintTypesCommitSig]);
/**
 * Decodes a protobuf CommitSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesCommitSig}
 */
export const decodeTendermintTypesCommitSig = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, [3, 1], 1], [0, 0, decode_temporal]);
/**
 * Decodes a protobuf ExtendedCommit message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesExtendedCommit}
 */
export const decodeTendermintTypesExtendedCommit = (atu8_payload) => decode_protobuf(atu8_payload, [3, 1, 1, 0], [0, 0, decodeTendermintTypesBlockID, decodeTendermintTypesExtendedCommitSig]);
/**
 * Decodes a protobuf ExtendedCommitSig message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesExtendedCommitSig}
 */
export const decodeTendermintTypesExtendedCommitSig = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, [3, 1], 1, 1, 1], [0, 0, decode_temporal]);
/**
 * Decodes a protobuf Proposal message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesProposal}
 */
export const decodeTendermintTypesProposal = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 1, 1, 1, [3, 1], 1], [0, 0, 0, 0, decodeTendermintTypesBlockID, decode_temporal]);
/**
 * Decodes a protobuf SignedHeader message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesSignedHeader}
 */
export const decodeTendermintTypesSignedHeader = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeTendermintTypesHeader, decodeTendermintTypesCommit]);
/**
 * Decodes a protobuf LightBlock message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesLightBlock}
 */
export const decodeTendermintTypesLightBlock = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1], [decodeTendermintTypesSignedHeader, decodeTendermintTypesValidatorSet]);
/**
 * Decodes a protobuf BlockMeta message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesBlockMeta}
 */
export const decodeTendermintTypesBlockMeta = (atu8_payload) => decode_protobuf(atu8_payload, [1, 3, 1, 3], [decodeTendermintTypesBlockID, 0, decodeTendermintTypesHeader]);
/**
 * Decodes a protobuf TxProof message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintTypesTxProof}
 */
export const decodeTendermintTypesTxProof = (atu8_payload) => decode_protobuf(atu8_payload, [1, 1, 1], [0, 0, decodeTendermintCryptoProof]);
/**
 * Destructures the fields of a {@link TendermintTypesVote} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: height -
 *   - 2: round -
 *   - 3: block_id -
 *   - 4: timestamp -
 *   - 5: validator_address -
 *   - 6: validator_index -
 *   - 7: signature - Vote signature by the validator if they participated in consensus for the associated block.
 *   - 8: extension - Vote extension provided by the application. Only valid for precommit messages.
 *   - 9: extension_signature - Vote extension signature by the validator if they participated in consensus for the associated block. Only valid for precommit messages.
 */
export const destructTendermintTypesVote = (g_struct) => [g_struct.type, g_struct.height, g_struct.round, g_struct.block_id, parse_timestamp(g_struct.timestamp), safe_base64_to_bytes(g_struct.validator_address), g_struct.validator_index, safe_base64_to_bytes(g_struct.signature), safe_base64_to_bytes(g_struct.extension), safe_base64_to_bytes(g_struct.extension_signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_VOTE = '/tendermint.types.Vote';
/**
 * Destructures the fields of a {@link TendermintTypesBlockID} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: hash -
 *   - 1: part_set_header -
 */
export const destructTendermintTypesBlockID = (g_struct) => [safe_base64_to_bytes(g_struct.hash), g_struct.part_set_header];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_BLOCK_I_D = '/tendermint.types.BlockID';
/**
 * Destructures the fields of a {@link TendermintTypesPartSetHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: total -
 *   - 1: hash -
 */
export const destructTendermintTypesPartSetHeader = (g_struct) => [g_struct.total, safe_base64_to_bytes(g_struct.hash)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_PART_SET_HEADER = '/tendermint.types.PartSetHeader';
/**
 * Destructures the fields of a {@link TendermintTypesLightBlock} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: signed_header -
 *   - 1: validator_set -
 */
export const destructTendermintTypesLightBlock = (g_struct) => [g_struct.signed_header, g_struct.validator_set];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_LIGHT_BLOCK = '/tendermint.types.LightBlock';
/**
 * Destructures the fields of a {@link TendermintTypesSignedHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: header -
 *   - 1: commit -
 */
export const destructTendermintTypesSignedHeader = (g_struct) => [g_struct.header, g_struct.commit];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_SIGNED_HEADER = '/tendermint.types.SignedHeader';
/**
 * Destructures the fields of a {@link TendermintTypesHeader} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: version - basic block info
 *   - 1: chain_id -
 *   - 2: height -
 *   - 3: time -
 *   - 4: last_block_id - prev block info
 *   - 5: last_commit_hash - hashes of block data
 *   - 6: data_hash -
 *   - 7: validators_hash - hashes from the app output from the prev block
 *   - 8: next_validators_hash -
 *   - 9: consensus_hash -
 *   - 10: app_hash -
 *   - 11: last_results_hash -
 *   - 12: evidence_hash - consensus info
 *   - 13: proposer_address -
 */
export const destructTendermintTypesHeader = (g_struct) => [g_struct.version, g_struct.chain_id, g_struct.height, parse_timestamp(g_struct.time), g_struct.last_block_id, safe_base64_to_bytes(g_struct.last_commit_hash), safe_base64_to_bytes(g_struct.data_hash), safe_base64_to_bytes(g_struct.validators_hash), safe_base64_to_bytes(g_struct.next_validators_hash), safe_base64_to_bytes(g_struct.consensus_hash), safe_base64_to_bytes(g_struct.app_hash), safe_base64_to_bytes(g_struct.last_results_hash), safe_base64_to_bytes(g_struct.evidence_hash), safe_base64_to_bytes(g_struct.proposer_address)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_HEADER = '/tendermint.types.Header';
/**
 * Destructures the fields of a {@link TendermintTypesCommit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: round -
 *   - 2: block_id -
 *   - 3: signatures -
 */
export const destructTendermintTypesCommit = (g_struct) => [g_struct.height, g_struct.round, g_struct.block_id, g_struct.signatures];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_COMMIT = '/tendermint.types.Commit';
/**
 * Destructures the fields of a {@link TendermintTypesCommitSig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_id_flag -
 *   - 1: validator_address -
 *   - 2: timestamp -
 *   - 3: signature -
 */
export const destructTendermintTypesCommitSig = (g_struct) => [g_struct.block_id_flag, safe_base64_to_bytes(g_struct.validator_address), parse_timestamp(g_struct.timestamp), safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_COMMIT_SIG = '/tendermint.types.CommitSig';
/**
 * Destructures the fields of a {@link TendermintTypesPart} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: index -
 *   - 1: bytes -
 *   - 2: proof -
 */
export const destructTendermintTypesPart = (g_struct) => [g_struct.index, safe_base64_to_bytes(g_struct.bytes), g_struct.proof];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_PART = '/tendermint.types.Part';
/**
 * Destructures the fields of a {@link TendermintTypesData} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: txs - Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We're just agreeing on the order first. This means that block.AppHash does not include these txs.
 */
export const destructTendermintTypesData = (g_struct) => [map(g_struct.txs, safe_base64_to_bytes)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_DATA = '/tendermint.types.Data';
/**
 * Destructures the fields of a {@link TendermintTypesExtendedCommit} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: height -
 *   - 1: round -
 *   - 2: block_id -
 *   - 3: extended_signatures -
 */
export const destructTendermintTypesExtendedCommit = (g_struct) => [g_struct.height, g_struct.round, g_struct.block_id, g_struct.extended_signatures];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EXTENDED_COMMIT = '/tendermint.types.ExtendedCommit';
/**
 * Destructures the fields of a {@link TendermintTypesExtendedCommitSig} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_id_flag -
 *   - 1: validator_address -
 *   - 2: timestamp -
 *   - 3: signature -
 *   - 4: extension - Vote extension data
 *   - 5: extension_signature - Vote extension signature
 */
export const destructTendermintTypesExtendedCommitSig = (g_struct) => [g_struct.block_id_flag, safe_base64_to_bytes(g_struct.validator_address), parse_timestamp(g_struct.timestamp), safe_base64_to_bytes(g_struct.signature), safe_base64_to_bytes(g_struct.extension), safe_base64_to_bytes(g_struct.extension_signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_EXTENDED_COMMIT_SIG = '/tendermint.types.ExtendedCommitSig';
/**
 * Destructures the fields of a {@link TendermintTypesProposal} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: type -
 *   - 1: height -
 *   - 2: round -
 *   - 3: pol_round -
 *   - 4: block_id -
 *   - 5: timestamp -
 *   - 6: signature -
 */
export const destructTendermintTypesProposal = (g_struct) => [g_struct.type, g_struct.height, g_struct.round, g_struct.pol_round, g_struct.block_id, parse_timestamp(g_struct.timestamp), safe_base64_to_bytes(g_struct.signature)];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_PROPOSAL = '/tendermint.types.Proposal';
/**
 * Destructures the fields of a {@link TendermintTypesBlockMeta} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block_id -
 *   - 1: block_size -
 *   - 2: header -
 *   - 3: num_txs -
 */
export const destructTendermintTypesBlockMeta = (g_struct) => [g_struct.block_id, g_struct.block_size, g_struct.header, g_struct.num_txs];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_BLOCK_META = '/tendermint.types.BlockMeta';
/**
 * Destructures the fields of a {@link TendermintTypesTxProof} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: root_hash -
 *   - 1: data -
 *   - 2: proof -
 */
export const destructTendermintTypesTxProof = (g_struct) => [safe_base64_to_bytes(g_struct.root_hash), safe_base64_to_bytes(g_struct.data), g_struct.proof];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_TYPES_TX_PROOF = '/tendermint.types.TxProof';
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_UNKNOWN** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN = 0;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_UNKNOWN** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN = 'UnknownType';
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PREVOTE** - Votes
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE = 1;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PREVOTE** - Votes
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE = 'PrevoteType';
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PRECOMMIT** -
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT = 2;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PRECOMMIT** -
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT = 'PrecommitType';
/**
 * Protobuf enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PROPOSAL** - Proposals
 *
 * Belongs to enum type {@link ProtoEnumTendermintTypesSignedMsgType}
 */
export const XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL = 32;
/**
 * JSON enum value for `tendermint.types.SignedMsgType`.
 *
 * **SIGNED_MSG_TYPE_PROPOSAL** - Proposals
 *
 * Belongs to enum type {@link JsonEnumTendermintTypesSignedMsgType}
 */
export const SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL = 'ProposalType';
/**
 * Maps a protobuf enum int value for `tendermint.types.SignedMsgType` to is JSON equivalent enum string value
 */
export const ProtoToJsonEnumTendermintTypesSignedMsgType = {
    [XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN]: SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN,
    [XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE]: SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE,
    [XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT]: SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT,
    [XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL]: SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL,
};
/**
 * Maps a JSON enum string value for `tendermint.types.SignedMsgType` to is protobuf equivalent enum int value
 */
export const JsonToProtoEnumTendermintTypesSignedMsgType = {
    [SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN]: XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_UNKNOWN,
    [SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE]: XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PREVOTE,
    [SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT]: XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PRECOMMIT,
    [SI_JSON_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL]: XC_PROTO_TENDERMINT_TYPES_SIGNED_MSG_TYPE_PROPOSAL,
};
//# sourceMappingURL=types.js.map