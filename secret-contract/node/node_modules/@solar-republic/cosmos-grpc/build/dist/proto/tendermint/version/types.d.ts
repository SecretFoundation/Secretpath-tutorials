import type { WeakUint64Str, CwUint64 } from '@solar-republic/types';
import type { Encoded, Opt } from '../../../api/types.js';
export type EncodedTendermintVersionApp = Encoded<'/tendermint.version.App'>;
export type EncodedTendermintVersionConsensus = Encoded<'/tendermint.version.Consensus'>;
/**
 * Encodes a `App` protobuf message: includes the protocol and software version for the application. This information is included in ResponseInfo. The App.Protocol can be updated in ResponseEndBlock.
 * @param sg_protocol - `protocol`:
 * @param s_software - `software`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintVersionApp: (sg_protocol?: Opt<WeakUint64Str>, s_software?: Opt<string>) => EncodedTendermintVersionApp;
/**
 * Encodes a `Consensus` protobuf message: captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application's state transition machine.
 * @param sg_block - `block`:
 * @param sg_app - `app`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export declare const encodeTendermintVersionConsensus: (sg_block?: Opt<WeakUint64Str>, sg_app?: Opt<WeakUint64Str>) => EncodedTendermintVersionConsensus;
/**
 * A decoded protobuf App message
 *
 * Tuple where:
 *   - 0: protocol -
 *   - 1: software -
 */
export type DecodedTendermintVersionApp = [
    sg_protocol?: CwUint64,
    s_software?: string
];
/**
 * Decodes a protobuf App message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintVersionApp}
 */
export declare const decodeTendermintVersionApp: (atu8_payload: Uint8Array) => DecodedTendermintVersionApp;
/**
 * A decoded protobuf Consensus message
 *
 * Tuple where:
 *   - 0: block -
 *   - 1: app -
 */
export type DecodedTendermintVersionConsensus = [
    sg_block?: CwUint64,
    sg_app?: CwUint64
];
/**
 * Decodes a protobuf Consensus message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintVersionConsensus}
 */
export declare const decodeTendermintVersionConsensus: (atu8_payload: Uint8Array) => DecodedTendermintVersionConsensus;
/**
 * Destructures the fields of a {@link TendermintVersionConsensus} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block -
 *   - 1: app -
 */
export declare const destructTendermintVersionConsensus: (g_struct: TendermintVersionConsensus) => [block?: CwUint64, app?: CwUint64];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_VERSION_CONSENSUS = "/tendermint.version.Consensus";
/**
 * JSON serialization of `tendermint.version.Consensus` - captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application's state transition machine.
 */
export type TendermintVersionConsensus = {
    block?: CwUint64 | undefined;
    app?: CwUint64 | undefined;
};
/**
 * Destructures the fields of a {@link TendermintVersionApp} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: protocol -
 *   - 1: software -
 */
export declare const destructTendermintVersionApp: (g_struct: TendermintVersionApp) => [protocol?: CwUint64, software?: string];
/**
 * Message type string constant
 */
export declare const SI_MESSAGE_TYPE_TENDERMINT_VERSION_APP = "/tendermint.version.App";
/**
 * JSON serialization of `tendermint.version.App` - includes the protocol and software version for the application. This information is included in ResponseInfo. The App.Protocol can be updated in ResponseEndBlock.
 */
export type TendermintVersionApp = {
    protocol?: CwUint64 | undefined;
    software?: string | undefined;
};
