import { decode_protobuf } from '../../../api/protobuf-reader.js';
import { Protobuf } from '../../../api/protobuf-writer.js';
/**
 * Encodes a `App` protobuf message: includes the protocol and software version for the application. This information is included in ResponseInfo. The App.Protocol can be updated in ResponseEndBlock.
 * @param sg_protocol - `protocol`:
 * @param s_software - `software`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintVersionApp = (sg_protocol, s_software) => Protobuf() // ...
    .g(sg_protocol) // uint64 protocol = 1
    .s(s_software) // string software = 2
    .o;
/**
 * Encodes a `Consensus` protobuf message: captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application's state transition machine.
 * @param sg_block - `block`:
 * @param sg_app - `app`:
 * @returns a strongly subtyped Uint8Array protobuf message
 */
export const encodeTendermintVersionConsensus = (sg_block, sg_app) => Protobuf() // ...
    .g(sg_block) // uint64 block = 1
    .g(sg_app) // uint64 app = 2
    .o;
/**
 * Decodes a protobuf App message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintVersionApp}
 */
export const decodeTendermintVersionApp = (atu8_payload) => decode_protobuf(atu8_payload, [3, 5]);
/**
 * Decodes a protobuf Consensus message
 * @param atu8_payload - raw bytes to decode
 * @returns a {@link DecodedTendermintVersionConsensus}
 */
export const decodeTendermintVersionConsensus = (atu8_payload) => decode_protobuf(atu8_payload, [3, 3]);
/**
 * Destructures the fields of a {@link TendermintVersionConsensus} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: block -
 *   - 1: app -
 */
export const destructTendermintVersionConsensus = (g_struct) => [g_struct.block, g_struct.app];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_VERSION_CONSENSUS = '/tendermint.version.Consensus';
/**
 * Destructures the fields of a {@link TendermintVersionApp} JSON message into a tuple of parsed ES equivalents
 * @param g_struct - the JSON message
 * @returns a tuple where:
 *   - 0: protocol -
 *   - 1: software -
 */
export const destructTendermintVersionApp = (g_struct) => [g_struct.protocol, g_struct.software];
/**
 * Message type string constant
 */
export const SI_MESSAGE_TYPE_TENDERMINT_VERSION_APP = '/tendermint.version.App';
//# sourceMappingURL=types.js.map