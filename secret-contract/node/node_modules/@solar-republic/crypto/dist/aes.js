import { ATU8_SHA256_STARSHELL } from './constants.js';
export class AesGcmEncryptionError extends Error {
    original;
    constructor(original) {
        super('Failed to encrypt data: ' + original);
        this.original = original;
    }
}
export class AesGcmDecryptionError extends Error {
    original;
    constructor(original) {
        super('Failed to decrypt data: ' + original);
        this.original = original;
    }
}
export async function aes_gcm_encrypt(atu8_data, dk_key, atu8_nonce, atu8_verify = ATU8_SHA256_STARSHELL, ni_tag = 128) {
    try {
        return new Uint8Array(await crypto.subtle.encrypt({
            name: 'AES-GCM',
            iv: atu8_nonce,
            additionalData: atu8_verify,
            tagLength: ni_tag,
        }, dk_key, atu8_data));
    }
    catch (e_encrypt) {
        throw new AesGcmEncryptionError(e_encrypt);
    }
}
export async function aes_gcm_decrypt(atu8_data, dk_key, atu8_nonce, atu8_verify = ATU8_SHA256_STARSHELL, ni_tag = 128) {
    try {
        return new Uint8Array(await crypto.subtle.decrypt({
            name: 'AES-GCM',
            iv: atu8_nonce,
            additionalData: atu8_verify,
            tagLength: ni_tag,
        }, dk_key, atu8_data));
    }
    catch (e_decrypt) {
        throw new AesGcmDecryptionError(e_decrypt);
    }
}
//# sourceMappingURL=aes.js.map