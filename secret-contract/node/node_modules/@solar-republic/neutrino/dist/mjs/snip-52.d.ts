import type { SecretContract } from './secret-contract.js';
import type { AuthSecret, NotificationSeedUpdate, WeakSecretAccAddr } from './types.js';
import type { Wallet } from './wallet.js';
import type { CborValue } from '@blake.regalia/belt';
import type { ContractInterface } from '@solar-republic/contractor';
import type { CwBase64, TrustedContextUrl } from '@solar-republic/types';
export type NotificationCallback = (z_data: CborValue) => void;
type Channels<g_interface extends ContractInterface> = g_interface['config']['snip52_channels'];
/**
 * Subscribes to the set of channels given by a dict of callbacks, each of which will be invoked for every
 * new notification emitted on that channel.
 * Returns an unsubscribe callback once all subscriptions have been confirmed.
 * @param p_rpc
 * @param k_contract
 * @param z_auth
 * @param h_channels
 */
export declare const subscribe_snip52_channels: <g_interface extends {
    config: {
        all_executions?: import("@solar-republic/contractor").MethodDescriptor;
        default_execution_answer?: import("@blake.regalia/belt").JsonObject<never>;
        all_queries?: import("@solar-republic/contractor").MethodDescriptor;
        snip52_channels?: import("@solar-republic/contractor").Snip52ChannelDict;
    };
    executions: import("@blake.regalia/belt").JsonObject<never>;
    queries: import("@blake.regalia/belt").JsonObject<never>;
}, h_channels_cddl extends Channels<g_interface>, as_channels extends keyof h_channels_cddl>(p_rpc: TrustedContextUrl, k_contract: SecretContract<g_interface>, z_auth: Exclude<AuthSecret, string>, h_channels: { [si_channel in as_channels]: (w_data: h_channels_cddl[si_channel]) => void; }) => Promise<() => void>;
export declare const sign_seed_update: (k_wallet: Wallet, sa_contract: WeakSecretAccAddr, sb64_previous: CwBase64) => Promise<NotificationSeedUpdate>;
export {};
